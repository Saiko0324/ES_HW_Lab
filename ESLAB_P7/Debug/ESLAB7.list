
ESLAB7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800c000  0800c000  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4fc  0800c4fc  0000edb8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c4fc  0800c4fc  0000d4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c504  0800c504  0000edb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c504  0800c504  0000d504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c508  0800c508  0000d508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000db8  20000000  0800c50c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001548  20000db8  0800d2c4  0000edb8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002300  0800d2c4  0000f300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000edb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c32c  00000000  00000000  0000ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d25  00000000  00000000  0002b114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002ee40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a35e  00000000  00000000  00030720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001d5d9  00000000  00000000  0005aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fa463  00000000  00000000  00078057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000b8  00000000  00000000  001724ba  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000012ea  00000000  00000000  00172572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f50  00000000  00000000  0017385c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  0017b80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0017c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000db8 	.word	0x20000db8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfe4 	.word	0x0800bfe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000dbc 	.word	0x20000dbc
 80001cc:	0800bfe4 	.word	0x0800bfe4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001024:	b098      	sub	sp, #96	@ 0x60
 8001026:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f001 fd12 	bl	8002a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 fa00 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 fbc8 	bl	80017c4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001034:	f000 fa5e 	bl	80014f4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001038:	f000 fa94 	bl	8001564 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800103c:	f000 fad0 	bl	80015e0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001040:	f000 faf4 	bl	800162c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001044:	f000 fb30 	bl	80016a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001048:	f000 fb5e 	bl	8001708 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800104c:	f000 fb8c 	bl	8001768 <MX_USB_OTG_FS_PCD_Init>

  //uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
  //HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
  //HAL_Delay(1000);

  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8001050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001054:	2230      	movs	r2, #48	@ 0x30
 8001056:	49a5      	ldr	r1, [pc, #660]	@ (80012ec <main+0x2cc>)
 8001058:	48a5      	ldr	r0, [pc, #660]	@ (80012f0 <main+0x2d0>)
 800105a:	f004 ff0a 	bl	8005e72 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	2231      	movs	r2, #49	@ 0x31
 8001064:	49a3      	ldr	r1, [pc, #652]	@ (80012f4 <main+0x2d4>)
 8001066:	48a2      	ldr	r0, [pc, #648]	@ (80012f0 <main+0x2d0>)
 8001068:	f004 ff03 	bl	8005e72 <HAL_UART_Transmit>
  //BSP_TSENSOR_Init();
  BSP_ACCELERO_Init();
 800106c:	f001 fb82 	bl	8002774 <BSP_ACCELERO_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8001070:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001074:	2233      	movs	r2, #51	@ 0x33
 8001076:	49a0      	ldr	r1, [pc, #640]	@ (80012f8 <main+0x2d8>)
 8001078:	489d      	ldr	r0, [pc, #628]	@ (80012f0 <main+0x2d0>)
 800107a:	f004 fefa 	bl	8005e72 <HAL_UART_Transmit>
  arm_fir_instance_f32 S;
  arm_status status;
  float32_t  *inputF32, *outputF32;

  /* Initialize input and output buffer pointers */
  inputF32 = &testInput_f32_1kHz_15kHz[0];
 800107e:	4b9f      	ldr	r3, [pc, #636]	@ (80012fc <main+0x2dc>)
 8001080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  outputF32 = &testOutput[0];
 8001082:	4b9f      	ldr	r3, [pc, #636]	@ (8001300 <main+0x2e0>)
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Call FIR init function to initialize the instance structure */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 8001086:	4b9f      	ldr	r3, [pc, #636]	@ (8001304 <main+0x2e4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	4b9d      	ldr	r3, [pc, #628]	@ (8001308 <main+0x2e8>)
 8001092:	4a9e      	ldr	r2, [pc, #632]	@ (800130c <main+0x2ec>)
 8001094:	211d      	movs	r1, #29
 8001096:	f005 fef5 	bl	8006e84 <arm_fir_init_f32>

  /* Call the FIR process function for every blockSize samples */
  HAL_UART_Transmit(&huart1,msg4,sizeof(msg4),1000);
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	222b      	movs	r2, #43	@ 0x2b
 80010a0:	499b      	ldr	r1, [pc, #620]	@ (8001310 <main+0x2f0>)
 80010a2:	4893      	ldr	r0, [pc, #588]	@ (80012f0 <main+0x2d0>)
 80010a4:	f004 fee5 	bl	8005e72 <HAL_UART_Transmit>
  for(i=0; i < numBlocks; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80010ac:	e018      	b.n	80010e0 <main+0xc0>
  {
    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 80010ae:	4b95      	ldr	r3, [pc, #596]	@ (8001304 <main+0x2e4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010bc:	18d1      	adds	r1, r2, r3
 80010be:	4b91      	ldr	r3, [pc, #580]	@ (8001304 <main+0x2e4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010cc:	441a      	add	r2, r3
 80010ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001304 <main+0x2e4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80010d6:	f005 fee5 	bl	8006ea4 <arm_fir_f32>
  for(i=0; i < numBlocks; i++)
 80010da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010dc:	3301      	adds	r3, #1
 80010de:	647b      	str	r3, [r7, #68]	@ 0x44
 80010e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001314 <main+0x2f4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3e1      	bcc.n	80010ae <main+0x8e>
  }

  /* Compare the generated output against the reference output computed in MATLAB. */

  snr = arm_snr_f32(&refOutput[0], &testOutput[0], TEST_LENGTH_SAMPLES);
 80010ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010ee:	4984      	ldr	r1, [pc, #528]	@ (8001300 <main+0x2e0>)
 80010f0:	4889      	ldr	r0, [pc, #548]	@ (8001318 <main+0x2f8>)
 80010f2:	f000 fd1f 	bl	8001b34 <arm_snr_f32>
 80010f6:	eef0 7a40 	vmov.f32	s15, s0
 80010fa:	4b88      	ldr	r3, [pc, #544]	@ (800131c <main+0x2fc>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]

  if (snr < SNR_THRESHOLD_F32)
 8001100:	4b86      	ldr	r3, [pc, #536]	@ (800131c <main+0x2fc>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001320 <main+0x300>
 800110a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	d50a      	bpl.n	800112a <main+0x10a>
  {
    status = ARM_MATH_TEST_FAILURE;
 8001114:	23fa      	movs	r3, #250	@ 0xfa
 8001116:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    HAL_UART_Transmit(&huart1,msg_failure,sizeof(msg_failure),1000);
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	221c      	movs	r2, #28
 8001120:	4980      	ldr	r1, [pc, #512]	@ (8001324 <main+0x304>)
 8001122:	4873      	ldr	r0, [pc, #460]	@ (80012f0 <main+0x2d0>)
 8001124:	f004 fea5 	bl	8005e72 <HAL_UART_Transmit>
 8001128:	e009      	b.n	800113e <main+0x11e>
  }
  else
  {
    status = ARM_MATH_SUCCESS;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    HAL_UART_Transmit(&huart1,msg_success,sizeof(msg_success),1000);
 8001130:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001134:	221f      	movs	r2, #31
 8001136:	497c      	ldr	r1, [pc, #496]	@ (8001328 <main+0x308>)
 8001138:	486d      	ldr	r0, [pc, #436]	@ (80012f0 <main+0x2d0>)
 800113a:	f004 fe9a 	bl	8005e72 <HAL_UART_Transmit>
  }

  HAL_UART_Transmit(&huart1,msg5,sizeof(msg5),1000);
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	2229      	movs	r2, #41	@ 0x29
 8001144:	4979      	ldr	r1, [pc, #484]	@ (800132c <main+0x30c>)
 8001146:	486a      	ldr	r0, [pc, #424]	@ (80012f0 <main+0x2d0>)
 8001148:	f004 fe93 	bl	8005e72 <HAL_UART_Transmit>
  uint32_t j;  // for loop variable
  arm_fir_instance_f32 Sx, Sy, Sz;
  arm_fir_init_f32(&Sx, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firXF32[0], blockSize);
 800114c:	4b6d      	ldr	r3, [pc, #436]	@ (8001304 <main+0x2e4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f107 001c 	add.w	r0, r7, #28
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	4b76      	ldr	r3, [pc, #472]	@ (8001330 <main+0x310>)
 8001158:	4a6c      	ldr	r2, [pc, #432]	@ (800130c <main+0x2ec>)
 800115a:	211d      	movs	r1, #29
 800115c:	f005 fe92 	bl	8006e84 <arm_fir_init_f32>
  arm_fir_init_f32(&Sy, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firYF32[0], blockSize);
 8001160:	4b68      	ldr	r3, [pc, #416]	@ (8001304 <main+0x2e4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f107 0010 	add.w	r0, r7, #16
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	4b72      	ldr	r3, [pc, #456]	@ (8001334 <main+0x314>)
 800116c:	4a67      	ldr	r2, [pc, #412]	@ (800130c <main+0x2ec>)
 800116e:	211d      	movs	r1, #29
 8001170:	f005 fe88 	bl	8006e84 <arm_fir_init_f32>
  arm_fir_init_f32(&Sz, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firZF32[0], blockSize);
 8001174:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <main+0x2e4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1d38      	adds	r0, r7, #4
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4b6e      	ldr	r3, [pc, #440]	@ (8001338 <main+0x318>)
 800117e:	4a63      	ldr	r2, [pc, #396]	@ (800130c <main+0x2ec>)
 8001180:	211d      	movs	r1, #29
 8001182:	f005 fe7f 	bl	8006e84 <arm_fir_init_f32>
	//BSP_ACCELERO_AccGetXYZ(temp_xyz);
	//snprintf(str_tmp,100," ACCELERATION = {\"x\":%d,\"y\":%d,\"z\":%d}\n\r", temp_xyz[0], temp_xyz[1], temp_xyz[2]);
	//HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
	//HAL_Delay(1000);

	for(i=0; i < BLOCK_SIZE; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	647b      	str	r3, [r7, #68]	@ 0x44
 800118a:	e031      	b.n	80011f0 <main+0x1d0>
	{
		BSP_ACCELERO_AccGetXYZ(temp_xyz);
 800118c:	486b      	ldr	r0, [pc, #428]	@ (800133c <main+0x31c>)
 800118e:	f001 fb31 	bl	80027f4 <BSP_ACCELERO_AccGetXYZ>
		input_block_x[i] = (float32_t)temp_xyz[0];
 8001192:	4b6a      	ldr	r3, [pc, #424]	@ (800133c <main+0x31c>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a0:	4a67      	ldr	r2, [pc, #412]	@ (8001340 <main+0x320>)
 80011a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	edc3 7a00 	vstr	s15, [r3]
		input_block_y[i] = (float32_t)temp_xyz[1];
 80011ac:	4b63      	ldr	r3, [pc, #396]	@ (800133c <main+0x31c>)
 80011ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	4a62      	ldr	r2, [pc, #392]	@ (8001344 <main+0x324>)
 80011bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edc3 7a00 	vstr	s15, [r3]
		input_block_z[i] = (float32_t)temp_xyz[2];
 80011c6:	4b5d      	ldr	r3, [pc, #372]	@ (800133c <main+0x31c>)
 80011c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	4a5c      	ldr	r2, [pc, #368]	@ (8001348 <main+0x328>)
 80011d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(sample_time);
 80011e0:	4b5a      	ldr	r3, [pc, #360]	@ (800134c <main+0x32c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fca7 	bl	8002b38 <HAL_Delay>
	for(i=0; i < BLOCK_SIZE; i++)
 80011ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ec:	3301      	adds	r3, #1
 80011ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80011f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011f2:	2b1f      	cmp	r3, #31
 80011f4:	d9ca      	bls.n	800118c <main+0x16c>
	}
	arm_fir_f32(&Sx, &input_block_x[0], &output_block_x[0], blockSize);
 80011f6:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <main+0x2e4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f107 001c 	add.w	r0, r7, #28
 80011fe:	4a54      	ldr	r2, [pc, #336]	@ (8001350 <main+0x330>)
 8001200:	494f      	ldr	r1, [pc, #316]	@ (8001340 <main+0x320>)
 8001202:	f005 fe4f 	bl	8006ea4 <arm_fir_f32>
	arm_fir_f32(&Sy, &input_block_y[0], &output_block_y[0], blockSize);
 8001206:	4b3f      	ldr	r3, [pc, #252]	@ (8001304 <main+0x2e4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f107 0010 	add.w	r0, r7, #16
 800120e:	4a51      	ldr	r2, [pc, #324]	@ (8001354 <main+0x334>)
 8001210:	494c      	ldr	r1, [pc, #304]	@ (8001344 <main+0x324>)
 8001212:	f005 fe47 	bl	8006ea4 <arm_fir_f32>
	arm_fir_f32(&Sz, &input_block_z[0], &output_block_z[0], blockSize);
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <main+0x2e4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1d38      	adds	r0, r7, #4
 800121c:	4a4e      	ldr	r2, [pc, #312]	@ (8001358 <main+0x338>)
 800121e:	494a      	ldr	r1, [pc, #296]	@ (8001348 <main+0x328>)
 8001220:	f005 fe40 	bl	8006ea4 <arm_fir_f32>
	HAL_UART_Transmit(&huart1,msg_output1,sizeof(msg_output1),100);
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	2237      	movs	r2, #55	@ 0x37
 8001228:	494c      	ldr	r1, [pc, #304]	@ (800135c <main+0x33c>)
 800122a:	4831      	ldr	r0, [pc, #196]	@ (80012f0 <main+0x2d0>)
 800122c:	f004 fe21 	bl	8005e72 <HAL_UART_Transmit>
	for(i=0; i < inblock_it; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	647b      	str	r3, [r7, #68]	@ 0x44
 8001234:	e049      	b.n	80012ca <main+0x2aa>
	{
		for(j=0; j < DATA_PER_LINE; j++)
 8001236:	2300      	movs	r3, #0
 8001238:	643b      	str	r3, [r7, #64]	@ 0x40
 800123a:	e03a      	b.n	80012b2 <main+0x292>
		{
			snprintf(str_tmp,100,"{%.2lf,%.2lf,%.2lf} ", input_block_x[i*(DATA_PER_LINE)+j], input_block_y[i*(DATA_PER_LINE)+j], input_block_z[i*(DATA_PER_LINE)+j]);
 800123c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800123e:	005a      	lsls	r2, r3, #1
 8001240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001242:	4413      	add	r3, r2
 8001244:	4a3e      	ldr	r2, [pc, #248]	@ (8001340 <main+0x320>)
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001258:	005a      	lsls	r2, r3, #1
 800125a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800125c:	4413      	add	r3, r2
 800125e:	4a39      	ldr	r2, [pc, #228]	@ (8001344 <main+0x324>)
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_f2d>
 800126c:	4680      	mov	r8, r0
 800126e:	4689      	mov	r9, r1
 8001270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001272:	005a      	lsls	r2, r3, #1
 8001274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001276:	4413      	add	r3, r2
 8001278:	4a33      	ldr	r2, [pc, #204]	@ (8001348 <main+0x328>)
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f961 	bl	8000548 <__aeabi_f2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800128e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001292:	e9cd 4500 	strd	r4, r5, [sp]
 8001296:	4a32      	ldr	r2, [pc, #200]	@ (8001360 <main+0x340>)
 8001298:	2164      	movs	r1, #100	@ 0x64
 800129a:	4832      	ldr	r0, [pc, #200]	@ (8001364 <main+0x344>)
 800129c:	f006 ffa8 	bl	80081f0 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),100);
 80012a0:	2364      	movs	r3, #100	@ 0x64
 80012a2:	2264      	movs	r2, #100	@ 0x64
 80012a4:	492f      	ldr	r1, [pc, #188]	@ (8001364 <main+0x344>)
 80012a6:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <main+0x2d0>)
 80012a8:	f004 fde3 	bl	8005e72 <HAL_UART_Transmit>
		for(j=0; j < DATA_PER_LINE; j++)
 80012ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ae:	3301      	adds	r3, #1
 80012b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80012b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d9c1      	bls.n	800123c <main+0x21c>
		}
		HAL_UART_Transmit(&huart1,msg_nextline,sizeof(msg_nextline),100);
 80012b8:	2364      	movs	r3, #100	@ 0x64
 80012ba:	2203      	movs	r2, #3
 80012bc:	492a      	ldr	r1, [pc, #168]	@ (8001368 <main+0x348>)
 80012be:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <main+0x2d0>)
 80012c0:	f004 fdd7 	bl	8005e72 <HAL_UART_Transmit>
	for(i=0; i < inblock_it; i++)
 80012c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012c6:	3301      	adds	r3, #1
 80012c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <main+0x34c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3b0      	bcc.n	8001236 <main+0x216>
	}
	HAL_UART_Transmit(&huart1,msg_output2,sizeof(msg_output2),100);
 80012d4:	2364      	movs	r3, #100	@ 0x64
 80012d6:	2237      	movs	r2, #55	@ 0x37
 80012d8:	4925      	ldr	r1, [pc, #148]	@ (8001370 <main+0x350>)
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <main+0x2d0>)
 80012dc:	f004 fdc9 	bl	8005e72 <HAL_UART_Transmit>
	for(i=0; i < inblock_it; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80012e4:	e08d      	b.n	8001402 <main+0x3e2>
	{
		for(j=0; j < DATA_PER_LINE; j++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80012ea:	e07e      	b.n	80013ea <main+0x3ca>
 80012ec:	20000a00 	.word	0x20000a00
 80012f0:	20000f08 	.word	0x20000f08
 80012f4:	20000a30 	.word	0x20000a30
 80012f8:	20000a64 	.word	0x20000a64
 80012fc:	20000000 	.word	0x20000000
 8001300:	20001868 	.word	0x20001868
 8001304:	20000ba8 	.word	0x20000ba8
 8001308:	20001d68 	.word	0x20001d68
 800130c:	0800c018 	.word	0x0800c018
 8001310:	20000a98 	.word	0x20000a98
 8001314:	20000bac 	.word	0x20000bac
 8001318:	20000500 	.word	0x20000500
 800131c:	20002128 	.word	0x20002128
 8001320:	430c0000 	.word	0x430c0000
 8001324:	20000ae4 	.word	0x20000ae4
 8001328:	20000ac4 	.word	0x20000ac4
 800132c:	20000b00 	.word	0x20000b00
 8001330:	20001e58 	.word	0x20001e58
 8001334:	20001f48 	.word	0x20001f48
 8001338:	20002038 	.word	0x20002038
 800133c:	200014fc 	.word	0x200014fc
 8001340:	20001504 	.word	0x20001504
 8001344:	20001584 	.word	0x20001584
 8001348:	20001604 	.word	0x20001604
 800134c:	20000ba0 	.word	0x20000ba0
 8001350:	20001684 	.word	0x20001684
 8001354:	20001704 	.word	0x20001704
 8001358:	20001784 	.word	0x20001784
 800135c:	20000b2c 	.word	0x20000b2c
 8001360:	0800c000 	.word	0x0800c000
 8001364:	20001804 	.word	0x20001804
 8001368:	20000b9c 	.word	0x20000b9c
 800136c:	20000ba4 	.word	0x20000ba4
 8001370:	20000b64 	.word	0x20000b64
		{
			snprintf(str_tmp,100,"{%.2lf,%.2lf,%.2lf} ", output_block_x[i*(DATA_PER_LINE)+j], output_block_y[i*(DATA_PER_LINE)+j], output_block_z[i*(DATA_PER_LINE)+j]);
 8001374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001376:	005a      	lsls	r2, r3, #1
 8001378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800137a:	4413      	add	r3, r2
 800137c:	4a24      	ldr	r2, [pc, #144]	@ (8001410 <main+0x3f0>)
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8df 	bl	8000548 <__aeabi_f2d>
 800138a:	4604      	mov	r4, r0
 800138c:	460d      	mov	r5, r1
 800138e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001390:	005a      	lsls	r2, r3, #1
 8001392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001394:	4413      	add	r3, r2
 8001396:	4a1f      	ldr	r2, [pc, #124]	@ (8001414 <main+0x3f4>)
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8d2 	bl	8000548 <__aeabi_f2d>
 80013a4:	4680      	mov	r8, r0
 80013a6:	4689      	mov	r9, r1
 80013a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013aa:	005a      	lsls	r2, r3, #1
 80013ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ae:	4413      	add	r3, r2
 80013b0:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <main+0x3f8>)
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8c5 	bl	8000548 <__aeabi_f2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013c6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013ca:	e9cd 4500 	strd	r4, r5, [sp]
 80013ce:	4a13      	ldr	r2, [pc, #76]	@ (800141c <main+0x3fc>)
 80013d0:	2164      	movs	r1, #100	@ 0x64
 80013d2:	4813      	ldr	r0, [pc, #76]	@ (8001420 <main+0x400>)
 80013d4:	f006 ff0c 	bl	80081f0 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),100);
 80013d8:	2364      	movs	r3, #100	@ 0x64
 80013da:	2264      	movs	r2, #100	@ 0x64
 80013dc:	4910      	ldr	r1, [pc, #64]	@ (8001420 <main+0x400>)
 80013de:	4811      	ldr	r0, [pc, #68]	@ (8001424 <main+0x404>)
 80013e0:	f004 fd47 	bl	8005e72 <HAL_UART_Transmit>
		for(j=0; j < DATA_PER_LINE; j++)
 80013e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013e6:	3301      	adds	r3, #1
 80013e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80013ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d9c1      	bls.n	8001374 <main+0x354>
		}
		HAL_UART_Transmit(&huart1,msg_nextline,sizeof(msg_nextline),100);
 80013f0:	2364      	movs	r3, #100	@ 0x64
 80013f2:	2203      	movs	r2, #3
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <main+0x408>)
 80013f6:	480b      	ldr	r0, [pc, #44]	@ (8001424 <main+0x404>)
 80013f8:	f004 fd3b 	bl	8005e72 <HAL_UART_Transmit>
	for(i=0; i < inblock_it; i++)
 80013fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013fe:	3301      	adds	r3, #1
 8001400:	647b      	str	r3, [r7, #68]	@ 0x44
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <main+0x40c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001408:	429a      	cmp	r2, r3
 800140a:	f4ff af6c 	bcc.w	80012e6 <main+0x2c6>
	for(i=0; i < BLOCK_SIZE; i++)
 800140e:	e6ba      	b.n	8001186 <main+0x166>
 8001410:	20001684 	.word	0x20001684
 8001414:	20001704 	.word	0x20001704
 8001418:	20001784 	.word	0x20001784
 800141c:	0800c000 	.word	0x0800c000
 8001420:	20001804 	.word	0x20001804
 8001424:	20000f08 	.word	0x20000f08
 8001428:	20000b9c 	.word	0x20000b9c
 800142c:	20000ba4 	.word	0x20000ba4

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b096      	sub	sp, #88	@ 0x58
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2244      	movs	r2, #68	@ 0x44
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f006 ff71 	bl	8008326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001452:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001456:	f003 f82d 	bl	80044b4 <HAL_PWREx_ControlVoltageScaling>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001460:	f000 fb62 	bl	8001b28 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001464:	f003 f808 	bl	8004478 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001468:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <SystemClock_Config+0xc0>)
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800146e:	4a20      	ldr	r2, [pc, #128]	@ (80014f0 <SystemClock_Config+0xc0>)
 8001470:	f023 0318 	bic.w	r3, r3, #24
 8001474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001478:	2314      	movs	r3, #20
 800147a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001488:	2360      	movs	r3, #96	@ 0x60
 800148a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148c:	2302      	movs	r3, #2
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001490:	2301      	movs	r3, #1
 8001492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001494:	2301      	movs	r3, #1
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001498:	2328      	movs	r3, #40	@ 0x28
 800149a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800149c:	2307      	movs	r3, #7
 800149e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 f923 	bl	80046f8 <HAL_RCC_OscConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80014b8:	f000 fb36 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014bc:	230f      	movs	r3, #15
 80014be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c0:	2303      	movs	r3, #3
 80014c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	2104      	movs	r1, #4
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fceb 	bl	8004eb0 <HAL_RCC_ClockConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014e0:	f000 fb22 	bl	8001b28 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014e4:	f004 f9f2 	bl	80058cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80014e8:	bf00      	nop
 80014ea:	3758      	adds	r7, #88	@ 0x58
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000

080014f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <MX_DFSDM1_Init+0x68>)
 80014fa:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <MX_DFSDM1_Init+0x6c>)
 80014fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <MX_DFSDM1_Init+0x68>)
 8001500:	2201      	movs	r2, #1
 8001502:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001504:	4b15      	ldr	r3, [pc, #84]	@ (800155c <MX_DFSDM1_Init+0x68>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <MX_DFSDM1_Init+0x68>)
 800150c:	2202      	movs	r2, #2
 800150e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <MX_DFSDM1_Init+0x68>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_DFSDM1_Init+0x68>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <MX_DFSDM1_Init+0x68>)
 800151e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001522:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001524:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <MX_DFSDM1_Init+0x68>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_DFSDM1_Init+0x68>)
 800152c:	2204      	movs	r2, #4
 800152e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <MX_DFSDM1_Init+0x68>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_DFSDM1_Init+0x68>)
 8001538:	2201      	movs	r2, #1
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <MX_DFSDM1_Init+0x68>)
 800153e:	2200      	movs	r2, #0
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_DFSDM1_Init+0x68>)
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_DFSDM1_Init+0x68>)
 800154a:	f001 fc2b 	bl	8002da4 <HAL_DFSDM_ChannelInit>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001554:	f000 fae8 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000dd4 	.word	0x20000dd4
 8001560:	40016020 	.word	0x40016020

08001564 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <MX_I2C2_Init+0x74>)
 800156a:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <MX_I2C2_Init+0x78>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_I2C2_Init+0x74>)
 8001570:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001574:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_I2C2_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <MX_I2C2_Init+0x74>)
 800157e:	2201      	movs	r2, #1
 8001580:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_I2C2_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_I2C2_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800158e:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_I2C2_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_I2C2_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_I2C2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015a0:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <MX_I2C2_Init+0x74>)
 80015a2:	f001 ffe4 	bl	800356e <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 fabc 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4809      	ldr	r0, [pc, #36]	@ (80015d8 <MX_I2C2_Init+0x74>)
 80015b4:	f002 fd96 	bl	80040e4 <HAL_I2CEx_ConfigAnalogFilter>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80015be:	f000 fab3 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015c2:	2100      	movs	r1, #0
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_I2C2_Init+0x74>)
 80015c6:	f002 fdd8 	bl	800417a <HAL_I2CEx_ConfigDigitalFilter>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80015d0:	f000 faaa 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000e0c 	.word	0x20000e0c
 80015dc:	40005800 	.word	0x40005800

080015e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_QUADSPI_Init+0x44>)
 80015e6:	4a10      	ldr	r2, [pc, #64]	@ (8001628 <MX_QUADSPI_Init+0x48>)
 80015e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_QUADSPI_Init+0x44>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_QUADSPI_Init+0x44>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <MX_QUADSPI_Init+0x44>)
 80015f8:	2210      	movs	r2, #16
 80015fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_QUADSPI_Init+0x44>)
 80015fe:	2217      	movs	r2, #23
 8001600:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <MX_QUADSPI_Init+0x44>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <MX_QUADSPI_Init+0x44>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_QUADSPI_Init+0x44>)
 8001610:	f002 ffb6 	bl	8004580 <HAL_QSPI_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800161a:	f000 fa85 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000e60 	.word	0x20000e60
 8001628:	a0001000 	.word	0xa0001000

0800162c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <MX_SPI3_Init+0x78>)
 8001634:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001638:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800163c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001646:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800164a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_SPI3_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_SPI3_Init+0x74>)
 800165a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800165e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_SPI3_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_SPI3_Init+0x74>)
 800167a:	2207      	movs	r2, #7
 800167c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_SPI3_Init+0x74>)
 8001686:	2208      	movs	r2, #8
 8001688:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_SPI3_Init+0x74>)
 800168c:	f004 fb00 	bl	8005c90 <HAL_SPI_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001696:	f000 fa47 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000ea4 	.word	0x20000ea4
 80016a4:	40003c00 	.word	0x40003c00

080016a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016ac:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016ae:	4a15      	ldr	r2, [pc, #84]	@ (8001704 <MX_USART1_UART_Init+0x5c>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016b2:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_USART1_UART_Init+0x58>)
 80016ec:	f004 fb73 	bl	8005dd6 <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016f6:	f000 fa17 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000f08 	.word	0x20000f08
 8001704:	40013800 	.word	0x40013800

08001708 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 800170e:	4a15      	ldr	r2, [pc, #84]	@ (8001764 <MX_USART3_UART_Init+0x5c>)
 8001710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_USART3_UART_Init+0x58>)
 800174c:	f004 fb43 	bl	8005dd6 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001756:	f000 f9e7 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000f90 	.word	0x20000f90
 8001764:	40004800 	.word	0x40004800

08001768 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800176e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001772:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001776:	2206      	movs	r2, #6
 8001778:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800177c:	2202      	movs	r2, #2
 800177e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001782:	2202      	movs	r2, #2
 8001784:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ac:	f002 fd31 	bl	8004212 <HAL_PCD_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017b6:	f000 f9b7 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20001018 	.word	0x20001018

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017da:	4bbd      	ldr	r3, [pc, #756]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4abc      	ldr	r2, [pc, #752]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 80017e0:	f043 0310 	orr.w	r3, r3, #16
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4bba      	ldr	r3, [pc, #744]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4bb7      	ldr	r3, [pc, #732]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4ab6      	ldr	r2, [pc, #728]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4bb4      	ldr	r3, [pc, #720]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4bb1      	ldr	r3, [pc, #708]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	4ab0      	ldr	r2, [pc, #704]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001816:	4bae      	ldr	r3, [pc, #696]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4bab      	ldr	r3, [pc, #684]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	4aaa      	ldr	r2, [pc, #680]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182e:	4ba8      	ldr	r3, [pc, #672]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	4ba5      	ldr	r3, [pc, #660]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	4aa4      	ldr	r2, [pc, #656]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001846:	4ba2      	ldr	r3, [pc, #648]	@ (8001ad0 <MX_GPIO_Init+0x30c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001858:	489e      	ldr	r0, [pc, #632]	@ (8001ad4 <MX_GPIO_Init+0x310>)
 800185a:	f001 fe4d 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001868:	f001 fe46 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800186c:	2200      	movs	r2, #0
 800186e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8001872:	4899      	ldr	r0, [pc, #612]	@ (8001ad8 <MX_GPIO_Init+0x314>)
 8001874:	f001 fe40 	bl	80034f8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f241 0181 	movw	r1, #4225	@ 0x1081
 800187e:	4897      	ldr	r0, [pc, #604]	@ (8001adc <MX_GPIO_Init+0x318>)
 8001880:	f001 fe3a 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800188a:	4894      	ldr	r0, [pc, #592]	@ (8001adc <MX_GPIO_Init+0x318>)
 800188c:	f001 fe34 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001896:	4892      	ldr	r0, [pc, #584]	@ (8001ae0 <MX_GPIO_Init+0x31c>)
 8001898:	f001 fe2e 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	2120      	movs	r1, #32
 80018a0:	488d      	ldr	r0, [pc, #564]	@ (8001ad8 <MX_GPIO_Init+0x314>)
 80018a2:	f001 fe29 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2101      	movs	r1, #1
 80018aa:	488a      	ldr	r0, [pc, #552]	@ (8001ad4 <MX_GPIO_Init+0x310>)
 80018ac:	f001 fe24 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80018b0:	f240 1315 	movw	r3, #277	@ 0x115
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4882      	ldr	r0, [pc, #520]	@ (8001ad4 <MX_GPIO_Init+0x310>)
 80018ca:	f001 fb77 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80018ce:	236a      	movs	r3, #106	@ 0x6a
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	487c      	ldr	r0, [pc, #496]	@ (8001ad4 <MX_GPIO_Init+0x310>)
 80018e4:	f001 fb6a 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80018e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4878      	ldr	r0, [pc, #480]	@ (8001ae0 <MX_GPIO_Init+0x31c>)
 8001900:	f001 fb5c 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001904:	233f      	movs	r3, #63	@ 0x3f
 8001906:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001908:	230b      	movs	r3, #11
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4872      	ldr	r0, [pc, #456]	@ (8001ae0 <MX_GPIO_Init+0x31c>)
 8001918:	f001 fb50 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800191c:	2303      	movs	r3, #3
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800192c:	2308      	movs	r3, #8
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193a:	f001 fb3f 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800193e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195a:	f001 fb2f 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800195e:	2308      	movs	r3, #8
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800196e:	2301      	movs	r3, #1
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800197c:	f001 fb1e 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001980:	2310      	movs	r3, #16
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001984:	230b      	movs	r3, #11
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001996:	f001 fb11 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800199a:	23e0      	movs	r3, #224	@ 0xe0
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019aa:	2305      	movs	r3, #5
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b8:	f001 fb00 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80019bc:	2301      	movs	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4841      	ldr	r0, [pc, #260]	@ (8001ad8 <MX_GPIO_Init+0x314>)
 80019d2:	f001 faf3 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80019d6:	2302      	movs	r3, #2
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019da:	230b      	movs	r3, #11
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	483b      	ldr	r0, [pc, #236]	@ (8001ad8 <MX_GPIO_Init+0x314>)
 80019ea:	f001 fae7 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80019ee:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80019f2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4834      	ldr	r0, [pc, #208]	@ (8001ad8 <MX_GPIO_Init+0x314>)
 8001a08:	f001 fad8 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001a0c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001a10:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	482e      	ldr	r0, [pc, #184]	@ (8001adc <MX_GPIO_Init+0x318>)
 8001a24:	f001 faca 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001a28:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4826      	ldr	r0, [pc, #152]	@ (8001adc <MX_GPIO_Init+0x318>)
 8001a42:	f001 fabb 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001a46:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4820      	ldr	r0, [pc, #128]	@ (8001ae0 <MX_GPIO_Init+0x31c>)
 8001a60:	f001 faac 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a64:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4819      	ldr	r0, [pc, #100]	@ (8001ae0 <MX_GPIO_Init+0x31c>)
 8001a7c:	f001 fa9e 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001a80:	2302      	movs	r3, #2
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a90:	2305      	movs	r3, #5
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4810      	ldr	r0, [pc, #64]	@ (8001adc <MX_GPIO_Init+0x318>)
 8001a9c:	f001 fa8e 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001aa0:	2378      	movs	r3, #120	@ 0x78
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4808      	ldr	r0, [pc, #32]	@ (8001adc <MX_GPIO_Init+0x318>)
 8001abc:	f001 fa7e 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001ac0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac6:	2312      	movs	r3, #18
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e00a      	b.n	8001ae4 <MX_GPIO_Init+0x320>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48001000 	.word	0x48001000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48000800 	.word	0x48000800
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aea:	2304      	movs	r3, #4
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	480b      	ldr	r0, [pc, #44]	@ (8001b24 <MX_GPIO_Init+0x360>)
 8001af6:	f001 fa61 	bl	8002fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2017      	movs	r0, #23
 8001b00:	f001 f919 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b04:	2017      	movs	r0, #23
 8001b06:	f001 f932 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2028      	movs	r0, #40	@ 0x28
 8001b10:	f001 f911 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b14:	2028      	movs	r0, #40	@ 0x28
 8001b16:	f001 f92a 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	@ 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	48000400 	.word	0x48000400

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <Error_Handler+0x8>

08001b34 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output
 * and test output
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	e058      	b.n	8001c04 <arm_snr_f32+0xd0>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4a43      	ldr	r2, [pc, #268]	@ (8001c74 <arm_snr_f32+0x140>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d102      	bne.n	8001b70 <arm_snr_f32+0x3c>
	  {
	  		return(0);
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e07a      	b.n	8001c66 <arm_snr_f32+0x132>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	4413      	add	r3, r2
 8001b78:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	4a3c      	ldr	r2, [pc, #240]	@ (8001c74 <arm_snr_f32+0x140>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d102      	bne.n	8001b8e <arm_snr_f32+0x5a>
	  {
	  		return(0);
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e06b      	b.n	8001c66 <arm_snr_f32+0x132>
	  }
      EnergySignal += pRef[i] * pRef[i];
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4413      	add	r3, r2
 8001b96:	ed93 7a00 	vldr	s14, [r3]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]);
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	ed93 7a00 	vldr	s14, [r3]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4413      	add	r3, r2
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	edd3 6a00 	vldr	s13, [r3]
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	4413      	add	r3, r2
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	edc7 7a04 	vstr	s15, [r7, #16]
  for (i = 0; i < buffSize; i++)
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	3301      	adds	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3a2      	bcc.n	8001b52 <arm_snr_f32+0x1e>
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	61fb      	str	r3, [r7, #28]
    temp =  *test;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	61bb      	str	r3, [r7, #24]

    if (temp == 0x7FC00000)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <arm_snr_f32+0x140>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d102      	bne.n	8001c26 <arm_snr_f32+0xf2>
    {
  		return(0);
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e01f      	b.n	8001c66 <arm_snr_f32+0x132>
    }


  SNR = 10 * log10 (EnergySignal / EnergyError);
 8001c26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c2a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001c2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c32:	ee16 0a90 	vmov	r0, s13
 8001c36:	f7fe fc87 	bl	8000548 <__aeabi_f2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	ec43 2b10 	vmov	d0, r2, r3
 8001c42:	f009 ff4d 	bl	800bae0 <log10>
 8001c46:	ec51 0b10 	vmov	r0, r1, d0
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <arm_snr_f32+0x144>)
 8001c50:	f7fe fcd2 	bl	80005f8 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ffc4 	bl	8000be8 <__aeabi_d2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	617b      	str	r3, [r7, #20]

  return (SNR);
 8001c64:	697b      	ldr	r3, [r7, #20]

}
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	3728      	adds	r7, #40	@ 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	7fc00000 	.word	0x7fc00000
 8001c78:	40240000 	.word	0x40240000

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0ac      	sub	sp, #176	@ 0xb0
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2288      	movs	r2, #136	@ 0x88
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 fb1e 	bl	8008326 <memset>
  if(DFSDM1_Init == 0)
 8001cea:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d142      	bne.n	8001d78 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001cf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cf6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 faf8 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001d0e:	f7ff ff0b 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d16:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d42:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d5c:	2306      	movs	r3, #6
 8001d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d66:	4619      	mov	r1, r3
 8001d68:	4807      	ldr	r0, [pc, #28]	@ (8001d88 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001d6a:	f001 f927 	bl	8002fbc <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4a02      	ldr	r2, [pc, #8]	@ (8001d80 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d76:	6013      	str	r3, [r2, #0]
  }

}
 8001d78:	bf00      	nop
 8001d7a:	37b0      	adds	r7, #176	@ 0xb0
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000212c 	.word	0x2000212c
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48001000 	.word	0x48001000

08001d8c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0ac      	sub	sp, #176	@ 0xb0
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2288      	movs	r2, #136	@ 0x88
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f006 faba 	bl	8008326 <memset>
  if(hi2c->Instance==I2C2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a21      	ldr	r2, [pc, #132]	@ (8001e3c <HAL_I2C_MspInit+0xb0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d13b      	bne.n	8001e34 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fa95 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dd4:	f7ff fea8 	bl	8001b28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ddc:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de4:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001df0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df8:	2312      	movs	r3, #18
 8001dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e14:	4619      	mov	r1, r3
 8001e16:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <HAL_I2C_MspInit+0xb8>)
 8001e18:	f001 f8d0 	bl	8002fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001e22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001e34:	bf00      	nop
 8001e36:	37b0      	adds	r7, #176	@ 0xb0
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40005800 	.word	0x40005800
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48000400 	.word	0x48000400

08001e48 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <HAL_I2C_MspDeInit+0x3c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d10f      	bne.n	8001e7a <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_I2C_MspDeInit+0x40>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <HAL_I2C_MspDeInit+0x40>)
 8001e60:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e64:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001e66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e6a:	4808      	ldr	r0, [pc, #32]	@ (8001e8c <HAL_I2C_MspDeInit+0x44>)
 8001e6c:	f001 fa50 	bl	8003310 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001e70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e74:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <HAL_I2C_MspDeInit+0x44>)
 8001e76:	f001 fa4b 	bl	8003310 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40005800 	.word	0x40005800
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000400 	.word	0x48000400

08001e90 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	@ (8001f0c <HAL_QSPI_MspInit+0x7c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d128      	bne.n	8001f04 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001eb2:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <HAL_QSPI_MspInit+0x80>)
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eb6:	4a16      	ldr	r2, [pc, #88]	@ (8001f10 <HAL_QSPI_MspInit+0x80>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebc:	6513      	str	r3, [r2, #80]	@ 0x50
 8001ebe:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <HAL_QSPI_MspInit+0x80>)
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eca:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <HAL_QSPI_MspInit+0x80>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	4a10      	ldr	r2, [pc, #64]	@ (8001f10 <HAL_QSPI_MspInit+0x80>)
 8001ed0:	f043 0310 	orr.w	r3, r3, #16
 8001ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <HAL_QSPI_MspInit+0x80>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001ee2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001ee6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ef4:	230a      	movs	r3, #10
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <HAL_QSPI_MspInit+0x84>)
 8001f00:	f001 f85c 	bl	8002fbc <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	@ 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	a0001000 	.word	0xa0001000
 8001f10:	40021000 	.word	0x40021000
 8001f14:	48001000 	.word	0x48001000

08001f18 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <HAL_SPI_MspInit+0x7c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d128      	bne.n	8001f8c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f3a:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	4a16      	ldr	r2, [pc, #88]	@ (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f46:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	4a10      	ldr	r2, [pc, #64]	@ (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <HAL_SPI_MspInit+0x80>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f6a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f7c:	2306      	movs	r3, #6
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <HAL_SPI_MspInit+0x84>)
 8001f88:	f001 f818 	bl	8002fbc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40003c00 	.word	0x40003c00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48000800 	.word	0x48000800

08001fa0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0ae      	sub	sp, #184	@ 0xb8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	2288      	movs	r2, #136	@ 0x88
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f006 f9b0 	bl	8008326 <memset>
  if(huart->Instance==USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a42      	ldr	r2, [pc, #264]	@ (80020d4 <HAL_UART_MspInit+0x134>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d13b      	bne.n	8002048 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 f98b 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe8:	f7ff fd9e 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fec:	4b3a      	ldr	r3, [pc, #232]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff0:	4a39      	ldr	r2, [pc, #228]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8001ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ff8:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002008:	4a33      	ldr	r2, [pc, #204]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002010:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800201c:	23c0      	movs	r3, #192	@ 0xc0
 800201e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002034:	2307      	movs	r3, #7
 8002036:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800203e:	4619      	mov	r1, r3
 8002040:	4826      	ldr	r0, [pc, #152]	@ (80020dc <HAL_UART_MspInit+0x13c>)
 8002042:	f000 ffbb 	bl	8002fbc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002046:	e040      	b.n	80020ca <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a24      	ldr	r2, [pc, #144]	@ (80020e0 <HAL_UART_MspInit+0x140>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d13b      	bne.n	80020ca <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002052:	2304      	movs	r3, #4
 8002054:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002056:	2300      	movs	r3, #0
 8002058:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4618      	mov	r0, r3
 8002060:	f003 f94a 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800206a:	f7ff fd5d 	bl	8001b28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002078:	6593      	str	r3, [r2, #88]	@ 0x58
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	4a13      	ldr	r2, [pc, #76]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_UART_MspInit+0x138>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800209e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b8:	2307      	movs	r3, #7
 80020ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 80020c6:	f000 ff79 	bl	8002fbc <HAL_GPIO_Init>
}
 80020ca:	bf00      	nop
 80020cc:	37b8      	adds	r7, #184	@ 0xb8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	40004800 	.word	0x40004800
 80020e4:	48000c00 	.word	0x48000c00

080020e8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0ac      	sub	sp, #176	@ 0xb0
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2288      	movs	r2, #136	@ 0x88
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f006 f90c 	bl	8008326 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002116:	d17c      	bne.n	8002212 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800211c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800211e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002122:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800212e:	2318      	movs	r3, #24
 8002130:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002132:	2307      	movs	r3, #7
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002136:	2302      	movs	r3, #2
 8002138:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800213a:	2302      	movs	r3, #2
 800213c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800213e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4618      	mov	r0, r3
 800214a:	f003 f8d5 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002154:	f7ff fce8 	bl	8001b28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	4b30      	ldr	r3, [pc, #192]	@ (800221c <HAL_PCD_MspInit+0x134>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215c:	4a2f      	ldr	r2, [pc, #188]	@ (800221c <HAL_PCD_MspInit+0x134>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002164:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <HAL_PCD_MspInit+0x134>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002174:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800218e:	f000 ff15 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002192:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021ac:	230a      	movs	r3, #10
 80021ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021bc:	f000 fefe 	bl	8002fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_PCD_MspInit+0x134>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c4:	4a15      	ldr	r2, [pc, #84]	@ (800221c <HAL_PCD_MspInit+0x134>)
 80021c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <HAL_PCD_MspInit+0x134>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <HAL_PCD_MspInit+0x134>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d114      	bne.n	800220e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_PCD_MspInit+0x134>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	4a0c      	ldr	r2, [pc, #48]	@ (800221c <HAL_PCD_MspInit+0x134>)
 80021ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_PCD_MspInit+0x134>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80021fc:	f002 f9b0 	bl	8004560 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_PCD_MspInit+0x134>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_PCD_MspInit+0x134>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800220c:	e001      	b.n	8002212 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800220e:	f002 f9a7 	bl	8004560 <HAL_PWREx_EnableVddUSB>
}
 8002212:	bf00      	nop
 8002214:	37b0      	adds	r7, #176	@ 0xb0
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <NMI_Handler+0x4>

08002228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <MemManage_Handler+0x4>

08002238 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <UsageFault_Handler+0x4>

08002248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002276:	f000 fc3f 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}

0800227e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002282:	2020      	movs	r0, #32
 8002284:	f001 f950 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002288:	2040      	movs	r0, #64	@ 0x40
 800228a:	f001 f94d 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800228e:	2080      	movs	r0, #128	@ 0x80
 8002290:	f001 f94a 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002294:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002298:	f001 f946 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80022a4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80022a8:	f001 f93e 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80022ac:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80022b0:	f001 f93a 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80022b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022b8:	f001 f936 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80022bc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80022c0:	f001 f932 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80022c4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80022c8:	f001 f92e 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return 1;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_kill>:

int _kill(int pid, int sig)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ea:	f006 f86f 	bl	80083cc <__errno>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2216      	movs	r2, #22
 80022f2:	601a      	str	r2, [r3, #0]
  return -1;
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_exit>:

void _exit (int status)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ffe7 	bl	80022e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002312:	bf00      	nop
 8002314:	e7fd      	b.n	8002312 <_exit+0x12>

08002316 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e00a      	b.n	800233e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002328:	f3af 8000 	nop.w
 800232c:	4601      	mov	r1, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	60ba      	str	r2, [r7, #8]
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	dbf0      	blt.n	8002328 <_read+0x12>
  }

  return len;
 8002346:	687b      	ldr	r3, [r7, #4]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	e009      	b.n	8002376 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	60ba      	str	r2, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3301      	adds	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	dbf1      	blt.n	8002362 <_write+0x12>
  }
  return len;
 800237e:	687b      	ldr	r3, [r7, #4]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_close>:

int _close(int file)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023b0:	605a      	str	r2, [r3, #4]
  return 0;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_isatty>:

int _isatty(int file)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c8:	2301      	movs	r3, #1
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f8:	4a14      	ldr	r2, [pc, #80]	@ (800244c <_sbrk+0x5c>)
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <_sbrk+0x60>)
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <_sbrk+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800240c:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <_sbrk+0x64>)
 800240e:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <_sbrk+0x68>)
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	429a      	cmp	r2, r3
 800241e:	d207      	bcs.n	8002430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002420:	f005 ffd4 	bl	80083cc <__errno>
 8002424:	4603      	mov	r3, r0
 8002426:	220c      	movs	r2, #12
 8002428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	e009      	b.n	8002444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002430:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002436:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <_sbrk+0x64>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	4a05      	ldr	r2, [pc, #20]	@ (8002454 <_sbrk+0x64>)
 8002440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002442:	68fb      	ldr	r3, [r7, #12]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20018000 	.word	0x20018000
 8002450:	00000400 	.word	0x00000400
 8002454:	20002130 	.word	0x20002130
 8002458:	20002300 	.word	0x20002300

0800245c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <SystemInit+0x20>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002466:	4a05      	ldr	r2, [pc, #20]	@ (800247c <SystemInit+0x20>)
 8002468:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800246c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002484:	f7ff ffea 	bl	800245c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002488:	480c      	ldr	r0, [pc, #48]	@ (80024bc <LoopForever+0x6>)
  ldr r1, =_edata
 800248a:	490d      	ldr	r1, [pc, #52]	@ (80024c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800248c:	4a0d      	ldr	r2, [pc, #52]	@ (80024c4 <LoopForever+0xe>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002490:	e002      	b.n	8002498 <LoopCopyDataInit>

08002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002496:	3304      	adds	r3, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800249c:	d3f9      	bcc.n	8002492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024a0:	4c0a      	ldr	r4, [pc, #40]	@ (80024cc <LoopForever+0x16>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a4:	e001      	b.n	80024aa <LoopFillZerobss>

080024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a8:	3204      	adds	r2, #4

080024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ac:	d3fb      	bcc.n	80024a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ae:	f005 ff93 	bl	80083d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024b2:	f7fe fdb5 	bl	8001020 <main>

080024b6 <LoopForever>:

LoopForever:
    b LoopForever
 80024b6:	e7fe      	b.n	80024b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c0:	20000db8 	.word	0x20000db8
  ldr r2, =_sidata
 80024c4:	0800c50c 	.word	0x0800c50c
  ldr r2, =_sbss
 80024c8:	20000db8 	.word	0x20000db8
  ldr r4, =_ebss
 80024cc:	20002300 	.word	0x20002300

080024d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024d0:	e7fe      	b.n	80024d0 <ADC1_2_IRQHandler>
	...

080024d4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80024dc:	4b27      	ldr	r3, [pc, #156]	@ (800257c <I2Cx_MspInit+0xa8>)
 80024de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e0:	4a26      	ldr	r2, [pc, #152]	@ (800257c <I2Cx_MspInit+0xa8>)
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e8:	4b24      	ldr	r3, [pc, #144]	@ (800257c <I2Cx_MspInit+0xa8>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80024f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80024fa:	2312      	movs	r3, #18
 80024fc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80024fe:	2301      	movs	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002506:	2304      	movs	r3, #4
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	481b      	ldr	r0, [pc, #108]	@ (8002580 <I2Cx_MspInit+0xac>)
 8002512:	f000 fd53 	bl	8002fbc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4818      	ldr	r0, [pc, #96]	@ (8002580 <I2Cx_MspInit+0xac>)
 800251e:	f000 fd4d 	bl	8002fbc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <I2Cx_MspInit+0xa8>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	4a15      	ldr	r2, [pc, #84]	@ (800257c <I2Cx_MspInit+0xa8>)
 8002528:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800252c:	6593      	str	r3, [r2, #88]	@ 0x58
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <I2Cx_MspInit+0xa8>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <I2Cx_MspInit+0xa8>)
 800253c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253e:	4a0f      	ldr	r2, [pc, #60]	@ (800257c <I2Cx_MspInit+0xa8>)
 8002540:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002544:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <I2Cx_MspInit+0xa8>)
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	4a0c      	ldr	r2, [pc, #48]	@ (800257c <I2Cx_MspInit+0xa8>)
 800254c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002550:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	210f      	movs	r1, #15
 8002556:	2021      	movs	r0, #33	@ 0x21
 8002558:	f000 fbed 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800255c:	2021      	movs	r0, #33	@ 0x21
 800255e:	f000 fc06 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002562:	2200      	movs	r2, #0
 8002564:	210f      	movs	r1, #15
 8002566:	2022      	movs	r0, #34	@ 0x22
 8002568:	f000 fbe5 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800256c:	2022      	movs	r0, #34	@ 0x22
 800256e:	f000 fbfe 	bl	8002d6e <HAL_NVIC_EnableIRQ>
}
 8002572:	bf00      	nop
 8002574:	3728      	adds	r7, #40	@ 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	48000400 	.word	0x48000400

08002584 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <I2Cx_Init+0x54>)
 8002590:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a11      	ldr	r2, [pc, #68]	@ (80025dc <I2Cx_Init+0x58>)
 8002596:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff89 	bl	80024d4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 ffd3 	bl	800356e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80025c8:	2100      	movs	r1, #0
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f001 fd8a 	bl	80040e4 <HAL_I2CEx_ConfigAnalogFilter>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40005800 	.word	0x40005800
 80025dc:	00702681 	.word	0x00702681

080025e0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	72fb      	strb	r3, [r7, #11]
 80025f2:	460b      	mov	r3, r1
 80025f4:	813b      	strh	r3, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	b299      	uxth	r1, r3
 8002602:	88f8      	ldrh	r0, [r7, #6]
 8002604:	893a      	ldrh	r2, [r7, #8]
 8002606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4603      	mov	r3, r0
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f001 f988 	bl	800392c <HAL_I2C_Mem_Read>
 800261c:	4603      	mov	r3, r0
 800261e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002626:	7afb      	ldrb	r3, [r7, #11]
 8002628:	4619      	mov	r1, r3
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f832 	bl	8002694 <I2Cx_Error>
  }
  return status;
 8002630:	7dfb      	ldrb	r3, [r7, #23]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b08a      	sub	sp, #40	@ 0x28
 800263e:	af04      	add	r7, sp, #16
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	4608      	mov	r0, r1
 8002644:	4611      	mov	r1, r2
 8002646:	461a      	mov	r2, r3
 8002648:	4603      	mov	r3, r0
 800264a:	72fb      	strb	r3, [r7, #11]
 800264c:	460b      	mov	r3, r1
 800264e:	813b      	strh	r3, [r7, #8]
 8002650:	4613      	mov	r3, r2
 8002652:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002658:	7afb      	ldrb	r3, [r7, #11]
 800265a:	b299      	uxth	r1, r3
 800265c:	88f8      	ldrh	r0, [r7, #6]
 800265e:	893a      	ldrh	r2, [r7, #8]
 8002660:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	4603      	mov	r3, r0
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f001 f847 	bl	8003704 <HAL_I2C_Mem_Write>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002680:	7afb      	ldrb	r3, [r7, #11]
 8002682:	4619      	mov	r1, r3
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f805 	bl	8002694 <I2Cx_Error>
  }
  return status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 ffff 	bl	80036a4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff6c 	bl	8002584 <I2Cx_Init>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80026b8:	4802      	ldr	r0, [pc, #8]	@ (80026c4 <SENSOR_IO_Init+0x10>)
 80026ba:	f7ff ff63 	bl	8002584 <I2Cx_Init>
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20002134 	.word	0x20002134

080026c8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	460b      	mov	r3, r1
 80026d4:	71bb      	strb	r3, [r7, #6]
 80026d6:	4613      	mov	r3, r2
 80026d8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80026da:	79bb      	ldrb	r3, [r7, #6]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	79f9      	ldrb	r1, [r7, #7]
 80026e0:	2301      	movs	r3, #1
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	1d7b      	adds	r3, r7, #5
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	4803      	ldr	r0, [pc, #12]	@ (80026f8 <SENSOR_IO_Write+0x30>)
 80026ec:	f7ff ffa5 	bl	800263a <I2Cx_WriteMultiple>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20002134 	.word	0x20002134

080026fc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	4603      	mov	r3, r0
 8002704:	460a      	mov	r2, r1
 8002706:	71fb      	strb	r3, [r7, #7]
 8002708:	4613      	mov	r3, r2
 800270a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	b29a      	uxth	r2, r3
 8002714:	79f9      	ldrb	r1, [r7, #7]
 8002716:	2301      	movs	r3, #1
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	f107 030f 	add.w	r3, r7, #15
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	4804      	ldr	r0, [pc, #16]	@ (8002734 <SENSOR_IO_Read+0x38>)
 8002724:	f7ff ff5c 	bl	80025e0 <I2Cx_ReadMultiple>

  return read_value;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20002134 	.word	0x20002134

08002738 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af02      	add	r7, sp, #8
 800273e:	603a      	str	r2, [r7, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
 8002746:	460b      	mov	r3, r1
 8002748:	71bb      	strb	r3, [r7, #6]
 800274a:	4613      	mov	r3, r2
 800274c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800274e:	79bb      	ldrb	r3, [r7, #6]
 8002750:	b29a      	uxth	r2, r3
 8002752:	79f9      	ldrb	r1, [r7, #7]
 8002754:	88bb      	ldrh	r3, [r7, #4]
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2301      	movs	r3, #1
 800275e:	4804      	ldr	r0, [pc, #16]	@ (8002770 <SENSOR_IO_ReadMultiple+0x38>)
 8002760:	f7ff ff3e 	bl	80025e0 <I2Cx_ReadMultiple>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20002134 	.word	0x20002134

08002774 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800277e:	2300      	movs	r3, #0
 8002780:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002782:	4b1a      	ldr	r3, [pc, #104]	@ (80027ec <BSP_ACCELERO_Init+0x78>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4798      	blx	r3
 8002788:	4603      	mov	r3, r0
 800278a:	2b6a      	cmp	r3, #106	@ 0x6a
 800278c:	d002      	beq.n	8002794 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	e025      	b.n	80027e0 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002794:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <BSP_ACCELERO_Init+0x7c>)
 8002796:	4a15      	ldr	r2, [pc, #84]	@ (80027ec <BSP_ACCELERO_Init+0x78>)
 8002798:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800279a:	2330      	movs	r3, #48	@ 0x30
 800279c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80027a2:	2300      	movs	r3, #0
 80027a4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80027a6:	2340      	movs	r3, #64	@ 0x40
 80027a8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80027b2:	797a      	ldrb	r2, [r7, #5]
 80027b4:	7abb      	ldrb	r3, [r7, #10]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80027bc:	7a3b      	ldrb	r3, [r7, #8]
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <BSP_ACCELERO_Init+0x7c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	89ba      	ldrh	r2, [r7, #12]
 80027dc:	4610      	mov	r0, r2
 80027de:	4798      	blx	r3
  }  

  return ret;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000bb4 	.word	0x20000bb4
 80027f0:	20002188 	.word	0x20002188

080027f4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002804:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800280e:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
    }
  }
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20002188 	.word	0x20002188

08002824 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002832:	2110      	movs	r1, #16
 8002834:	20d4      	movs	r0, #212	@ 0xd4
 8002836:	f7ff ff61 	bl	80026fc <SENSOR_IO_Read>
 800283a:	4603      	mov	r3, r0
 800283c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800284a:	7bba      	ldrb	r2, [r7, #14]
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	4313      	orrs	r3, r2
 8002850:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002852:	7bbb      	ldrb	r3, [r7, #14]
 8002854:	461a      	mov	r2, r3
 8002856:	2110      	movs	r1, #16
 8002858:	20d4      	movs	r0, #212	@ 0xd4
 800285a:	f7ff ff35 	bl	80026c8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800285e:	2112      	movs	r1, #18
 8002860:	20d4      	movs	r0, #212	@ 0xd4
 8002862:	f7ff ff4b 	bl	80026fc <SENSOR_IO_Read>
 8002866:	4603      	mov	r3, r0
 8002868:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b29b      	uxth	r3, r3
 8002870:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002872:	7bbb      	ldrb	r3, [r7, #14]
 8002874:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002878:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800287a:	7bba      	ldrb	r2, [r7, #14]
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	4313      	orrs	r3, r2
 8002880:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002882:	7bbb      	ldrb	r3, [r7, #14]
 8002884:	461a      	mov	r2, r3
 8002886:	2112      	movs	r1, #18
 8002888:	20d4      	movs	r0, #212	@ 0xd4
 800288a:	f7ff ff1d 	bl	80026c8 <SENSOR_IO_Write>
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800289c:	2300      	movs	r3, #0
 800289e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80028a0:	2110      	movs	r1, #16
 80028a2:	20d4      	movs	r0, #212	@ 0xd4
 80028a4:	f7ff ff2a 	bl	80026fc <SENSOR_IO_Read>
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	461a      	mov	r2, r3
 80028b8:	2110      	movs	r1, #16
 80028ba:	20d4      	movs	r0, #212	@ 0xd4
 80028bc:	f7ff ff04 	bl	80026c8 <SENSOR_IO_Write>
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80028cc:	f7ff fef2 	bl	80026b4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80028d0:	210f      	movs	r1, #15
 80028d2:	20d4      	movs	r0, #212	@ 0xd4
 80028d4:	f7ff ff12 	bl	80026fc <SENSOR_IO_Read>
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}

080028de <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80028ec:	2115      	movs	r1, #21
 80028ee:	20d4      	movs	r0, #212	@ 0xd4
 80028f0:	f7ff ff04 	bl	80026fc <SENSOR_IO_Read>
 80028f4:	4603      	mov	r3, r0
 80028f6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	f023 0310 	bic.w	r3, r3, #16
 80028fe:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	461a      	mov	r2, r3
 8002912:	2115      	movs	r1, #21
 8002914:	20d4      	movs	r0, #212	@ 0xd4
 8002916:	f7ff fed7 	bl	80026c8 <SENSOR_IO_Write>
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800293a:	2110      	movs	r1, #16
 800293c:	20d4      	movs	r0, #212	@ 0xd4
 800293e:	f7ff fedd 	bl	80026fc <SENSOR_IO_Read>
 8002942:	4603      	mov	r3, r0
 8002944:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002946:	f107 0208 	add.w	r2, r7, #8
 800294a:	2306      	movs	r3, #6
 800294c:	2128      	movs	r1, #40	@ 0x28
 800294e:	20d4      	movs	r0, #212	@ 0xd4
 8002950:	f7ff fef2 	bl	8002738 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	e01a      	b.n	8002990 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800295a:	7ffb      	ldrb	r3, [r7, #31]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	3301      	adds	r3, #1
 8002960:	3320      	adds	r3, #32
 8002962:	443b      	add	r3, r7
 8002964:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	b29b      	uxth	r3, r3
 800296c:	7ffa      	ldrb	r2, [r7, #31]
 800296e:	0052      	lsls	r2, r2, #1
 8002970:	3220      	adds	r2, #32
 8002972:	443a      	add	r2, r7
 8002974:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002978:	4413      	add	r3, r2
 800297a:	b29a      	uxth	r2, r3
 800297c:	7ffb      	ldrb	r3, [r7, #31]
 800297e:	b212      	sxth	r2, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	3320      	adds	r3, #32
 8002984:	443b      	add	r3, r7
 8002986:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800298a:	7ffb      	ldrb	r3, [r7, #31]
 800298c:	3301      	adds	r3, #1
 800298e:	77fb      	strb	r3, [r7, #31]
 8002990:	7ffb      	ldrb	r3, [r7, #31]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d9e1      	bls.n	800295a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b0c      	cmp	r3, #12
 800299e:	d829      	bhi.n	80029f4 <LSM6DSL_AccReadXYZ+0xd0>
 80029a0:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <LSM6DSL_AccReadXYZ+0x84>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029dd 	.word	0x080029dd
 80029ac:	080029f5 	.word	0x080029f5
 80029b0:	080029f5 	.word	0x080029f5
 80029b4:	080029f5 	.word	0x080029f5
 80029b8:	080029ef 	.word	0x080029ef
 80029bc:	080029f5 	.word	0x080029f5
 80029c0:	080029f5 	.word	0x080029f5
 80029c4:	080029f5 	.word	0x080029f5
 80029c8:	080029e3 	.word	0x080029e3
 80029cc:	080029f5 	.word	0x080029f5
 80029d0:	080029f5 	.word	0x080029f5
 80029d4:	080029f5 	.word	0x080029f5
 80029d8:	080029e9 	.word	0x080029e9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <LSM6DSL_AccReadXYZ+0x11c>)
 80029de:	61bb      	str	r3, [r7, #24]
    break;
 80029e0:	e008      	b.n	80029f4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80029e2:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <LSM6DSL_AccReadXYZ+0x120>)
 80029e4:	61bb      	str	r3, [r7, #24]
    break;
 80029e6:	e005      	b.n	80029f4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80029e8:	4b17      	ldr	r3, [pc, #92]	@ (8002a48 <LSM6DSL_AccReadXYZ+0x124>)
 80029ea:	61bb      	str	r3, [r7, #24]
    break;
 80029ec:	e002      	b.n	80029f4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80029ee:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <LSM6DSL_AccReadXYZ+0x128>)
 80029f0:	61bb      	str	r3, [r7, #24]
    break;    
 80029f2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e01a      	b.n	8002a30 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80029fa:	7ffb      	ldrb	r3, [r7, #31]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	3320      	adds	r3, #32
 8002a00:	443b      	add	r3, r7
 8002a02:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a22:	ee17 2a90 	vmov	r2, s15
 8002a26:	b212      	sxth	r2, r2
 8002a28:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002a2a:	7ffb      	ldrb	r3, [r7, #31]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d9e1      	bls.n	80029fa <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	3d79db23 	.word	0x3d79db23
 8002a44:	3df9db23 	.word	0x3df9db23
 8002a48:	3e79db23 	.word	0x3e79db23
 8002a4c:	3ef9db23 	.word	0x3ef9db23

08002a50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	f000 f960 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a60:	2000      	movs	r0, #0
 8002a62:	f000 f80d 	bl	8002a80 <HAL_InitTick>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	71fb      	strb	r3, [r7, #7]
 8002a70:	e001      	b.n	8002a76 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a72:	f7ff f903 	bl	8001c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a76:	79fb      	ldrb	r3, [r7, #7]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a8c:	4b17      	ldr	r3, [pc, #92]	@ (8002aec <HAL_InitTick+0x6c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d023      	beq.n	8002adc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a94:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <HAL_InitTick+0x70>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b14      	ldr	r3, [pc, #80]	@ (8002aec <HAL_InitTick+0x6c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f96d 	bl	8002d8a <HAL_SYSTICK_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0f      	cmp	r3, #15
 8002aba:	d809      	bhi.n	8002ad0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002abc:	2200      	movs	r2, #0
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f000 f937 	bl	8002d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <HAL_InitTick+0x74>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e007      	b.n	8002ae0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
 8002ad4:	e004      	b.n	8002ae0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	e001      	b.n	8002ae0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000bec 	.word	0x20000bec
 8002af0:	20000bb0 	.word	0x20000bb0
 8002af4:	20000be8 	.word	0x20000be8

08002af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_IncTick+0x20>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_IncTick+0x24>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_IncTick+0x24>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000bec 	.word	0x20000bec
 8002b1c:	2000218c 	.word	0x2000218c

08002b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return uwTick;
 8002b24:	4b03      	ldr	r3, [pc, #12]	@ (8002b34 <HAL_GetTick+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	2000218c 	.word	0x2000218c

08002b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7ff ffee 	bl	8002b20 <HAL_GetTick>
 8002b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d005      	beq.n	8002b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <HAL_Delay+0x44>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b5e:	bf00      	nop
 8002b60:	f7ff ffde 	bl	8002b20 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d8f7      	bhi.n	8002b60 <HAL_Delay+0x28>
  {
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000bec 	.word	0x20000bec

08002b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4907      	ldr	r1, [pc, #28]	@ (8002c1c <__NVIC_EnableIRQ+0x38>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	@ (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	@ (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	@ 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	4313      	orrs	r3, r2
         );
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	@ 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff8e 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff29 	bl	8002b80 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff3e 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff8e 	bl	8002c74 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5d 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff31 	bl	8002be4 <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0ac      	b.n	8002f10 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f8b2 	bl	8002f24 <DFSDM_GetChannelFromInstance>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4a55      	ldr	r2, [pc, #340]	@ (8002f18 <HAL_DFSDM_ChannelInit+0x174>)
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e09f      	b.n	8002f10 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7fe ff77 	bl	8001cc4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002dd6:	4b51      	ldr	r3, [pc, #324]	@ (8002f1c <HAL_DFSDM_ChannelInit+0x178>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8002f1c <HAL_DFSDM_ChannelInit+0x178>)
 8002dde:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002de0:	4b4e      	ldr	r3, [pc, #312]	@ (8002f1c <HAL_DFSDM_ChannelInit+0x178>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d125      	bne.n	8002e34 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002de8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a4c      	ldr	r2, [pc, #304]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002df2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002df4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4948      	ldr	r1, [pc, #288]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a46      	ldr	r2, [pc, #280]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e08:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002e0c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	791b      	ldrb	r3, [r3, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002e16:	4b42      	ldr	r3, [pc, #264]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	493f      	ldr	r1, [pc, #252]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e28:	4b3d      	ldr	r3, [pc, #244]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e32:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002e42:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e52:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e58:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 020f 	bic.w	r2, r2, #15
 8002e70:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002e98:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6899      	ldr	r1, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f002 0207 	and.w	r2, r2, #7
 8002ec4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f810 	bl	8002f24 <DFSDM_GetChannelFromInstance>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4904      	ldr	r1, [pc, #16]	@ (8002f18 <HAL_DFSDM_ChannelInit+0x174>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20002194 	.word	0x20002194
 8002f1c:	20002190 	.word	0x20002190
 8002f20:	40016000 	.word	0x40016000

08002f24 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d102      	bne.n	8002f3a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e02b      	b.n	8002f92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a19      	ldr	r2, [pc, #100]	@ (8002fa4 <DFSDM_GetChannelFromInstance+0x80>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d102      	bne.n	8002f48 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e024      	b.n	8002f92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a17      	ldr	r2, [pc, #92]	@ (8002fa8 <DFSDM_GetChannelFromInstance+0x84>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d102      	bne.n	8002f56 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002f50:	2302      	movs	r3, #2
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e01d      	b.n	8002f92 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a14      	ldr	r2, [pc, #80]	@ (8002fac <DFSDM_GetChannelFromInstance+0x88>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d102      	bne.n	8002f64 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e016      	b.n	8002f92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a12      	ldr	r2, [pc, #72]	@ (8002fb0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d102      	bne.n	8002f72 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002f6c:	2305      	movs	r3, #5
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e00f      	b.n	8002f92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb4 <DFSDM_GetChannelFromInstance+0x90>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d102      	bne.n	8002f80 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002f7a:	2306      	movs	r3, #6
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e008      	b.n	8002f92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <DFSDM_GetChannelFromInstance+0x94>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d102      	bne.n	8002f8e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e001      	b.n	8002f92 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40016000 	.word	0x40016000
 8002fa4:	40016020 	.word	0x40016020
 8002fa8:	40016040 	.word	0x40016040
 8002fac:	40016080 	.word	0x40016080
 8002fb0:	400160a0 	.word	0x400160a0
 8002fb4:	400160c0 	.word	0x400160c0
 8002fb8:	400160e0 	.word	0x400160e0

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fca:	e17f      	b.n	80032cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8171 	beq.w	80032c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d005      	beq.n	8002ffc <HAL_GPIO_Init+0x40>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d130      	bne.n	800305e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003032:	2201      	movs	r2, #1
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 0201 	and.w	r2, r3, #1
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b03      	cmp	r3, #3
 8003068:	d118      	bne.n	800309c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003070:	2201      	movs	r2, #1
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	08db      	lsrs	r3, r3, #3
 8003086:	f003 0201 	and.w	r2, r3, #1
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d017      	beq.n	80030d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d123      	bne.n	800312c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	220f      	movs	r2, #15
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	6939      	ldr	r1, [r7, #16]
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80ac 	beq.w	80032c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_GPIO_Init+0x330>)
 8003170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003172:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_GPIO_Init+0x330>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6613      	str	r3, [r2, #96]	@ 0x60
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_GPIO_Init+0x330>)
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003186:	4a5a      	ldr	r2, [pc, #360]	@ (80032f0 <HAL_GPIO_Init+0x334>)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	220f      	movs	r2, #15
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031b0:	d025      	beq.n	80031fe <HAL_GPIO_Init+0x242>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4f      	ldr	r2, [pc, #316]	@ (80032f4 <HAL_GPIO_Init+0x338>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <HAL_GPIO_Init+0x23e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4e      	ldr	r2, [pc, #312]	@ (80032f8 <HAL_GPIO_Init+0x33c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d019      	beq.n	80031f6 <HAL_GPIO_Init+0x23a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4d      	ldr	r2, [pc, #308]	@ (80032fc <HAL_GPIO_Init+0x340>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_GPIO_Init+0x236>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003300 <HAL_GPIO_Init+0x344>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00d      	beq.n	80031ee <HAL_GPIO_Init+0x232>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003304 <HAL_GPIO_Init+0x348>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <HAL_GPIO_Init+0x22e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003308 <HAL_GPIO_Init+0x34c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_GPIO_Init+0x22a>
 80031e2:	2306      	movs	r3, #6
 80031e4:	e00c      	b.n	8003200 <HAL_GPIO_Init+0x244>
 80031e6:	2307      	movs	r3, #7
 80031e8:	e00a      	b.n	8003200 <HAL_GPIO_Init+0x244>
 80031ea:	2305      	movs	r3, #5
 80031ec:	e008      	b.n	8003200 <HAL_GPIO_Init+0x244>
 80031ee:	2304      	movs	r3, #4
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x244>
 80031f2:	2303      	movs	r3, #3
 80031f4:	e004      	b.n	8003200 <HAL_GPIO_Init+0x244>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e002      	b.n	8003200 <HAL_GPIO_Init+0x244>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_GPIO_Init+0x244>
 80031fe:	2300      	movs	r3, #0
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	f002 0203 	and.w	r2, r2, #3
 8003206:	0092      	lsls	r2, r2, #2
 8003208:	4093      	lsls	r3, r2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003210:	4937      	ldr	r1, [pc, #220]	@ (80032f0 <HAL_GPIO_Init+0x334>)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	3302      	adds	r3, #2
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800321e:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <HAL_GPIO_Init+0x350>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003242:	4a32      	ldr	r2, [pc, #200]	@ (800330c <HAL_GPIO_Init+0x350>)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003248:	4b30      	ldr	r3, [pc, #192]	@ (800330c <HAL_GPIO_Init+0x350>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800326c:	4a27      	ldr	r2, [pc, #156]	@ (800330c <HAL_GPIO_Init+0x350>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003272:	4b26      	ldr	r3, [pc, #152]	@ (800330c <HAL_GPIO_Init+0x350>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003296:	4a1d      	ldr	r2, [pc, #116]	@ (800330c <HAL_GPIO_Init+0x350>)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800329c:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <HAL_GPIO_Init+0x350>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032c0:	4a12      	ldr	r2, [pc, #72]	@ (800330c <HAL_GPIO_Init+0x350>)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3301      	adds	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f47f ae78 	bne.w	8002fcc <HAL_GPIO_Init+0x10>
  }
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40010000 	.word	0x40010000
 80032f4:	48000400 	.word	0x48000400
 80032f8:	48000800 	.word	0x48000800
 80032fc:	48000c00 	.word	0x48000c00
 8003300:	48001000 	.word	0x48001000
 8003304:	48001400 	.word	0x48001400
 8003308:	48001800 	.word	0x48001800
 800330c:	40010400 	.word	0x40010400

08003310 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800331e:	e0cd      	b.n	80034bc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003320:	2201      	movs	r2, #1
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80c0 	beq.w	80034b6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003336:	4a68      	ldr	r2, [pc, #416]	@ (80034d8 <HAL_GPIO_DeInit+0x1c8>)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800335e:	d025      	beq.n	80033ac <HAL_GPIO_DeInit+0x9c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a5e      	ldr	r2, [pc, #376]	@ (80034dc <HAL_GPIO_DeInit+0x1cc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01f      	beq.n	80033a8 <HAL_GPIO_DeInit+0x98>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a5d      	ldr	r2, [pc, #372]	@ (80034e0 <HAL_GPIO_DeInit+0x1d0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d019      	beq.n	80033a4 <HAL_GPIO_DeInit+0x94>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a5c      	ldr	r2, [pc, #368]	@ (80034e4 <HAL_GPIO_DeInit+0x1d4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_GPIO_DeInit+0x90>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a5b      	ldr	r2, [pc, #364]	@ (80034e8 <HAL_GPIO_DeInit+0x1d8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00d      	beq.n	800339c <HAL_GPIO_DeInit+0x8c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a5a      	ldr	r2, [pc, #360]	@ (80034ec <HAL_GPIO_DeInit+0x1dc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <HAL_GPIO_DeInit+0x88>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a59      	ldr	r2, [pc, #356]	@ (80034f0 <HAL_GPIO_DeInit+0x1e0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_GPIO_DeInit+0x84>
 8003390:	2306      	movs	r3, #6
 8003392:	e00c      	b.n	80033ae <HAL_GPIO_DeInit+0x9e>
 8003394:	2307      	movs	r3, #7
 8003396:	e00a      	b.n	80033ae <HAL_GPIO_DeInit+0x9e>
 8003398:	2305      	movs	r3, #5
 800339a:	e008      	b.n	80033ae <HAL_GPIO_DeInit+0x9e>
 800339c:	2304      	movs	r3, #4
 800339e:	e006      	b.n	80033ae <HAL_GPIO_DeInit+0x9e>
 80033a0:	2303      	movs	r3, #3
 80033a2:	e004      	b.n	80033ae <HAL_GPIO_DeInit+0x9e>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e002      	b.n	80033ae <HAL_GPIO_DeInit+0x9e>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_GPIO_DeInit+0x9e>
 80033ac:	2300      	movs	r3, #0
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	f002 0203 	and.w	r2, r2, #3
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	4093      	lsls	r3, r2
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d132      	bne.n	8003424 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80033be:	4b4d      	ldr	r3, [pc, #308]	@ (80034f4 <HAL_GPIO_DeInit+0x1e4>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	494b      	ldr	r1, [pc, #300]	@ (80034f4 <HAL_GPIO_DeInit+0x1e4>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80033cc:	4b49      	ldr	r3, [pc, #292]	@ (80034f4 <HAL_GPIO_DeInit+0x1e4>)
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	4947      	ldr	r1, [pc, #284]	@ (80034f4 <HAL_GPIO_DeInit+0x1e4>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80033da:	4b46      	ldr	r3, [pc, #280]	@ (80034f4 <HAL_GPIO_DeInit+0x1e4>)
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	4944      	ldr	r1, [pc, #272]	@ (80034f4 <HAL_GPIO_DeInit+0x1e4>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80033e8:	4b42      	ldr	r3, [pc, #264]	@ (80034f4 <HAL_GPIO_DeInit+0x1e4>)
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	4940      	ldr	r1, [pc, #256]	@ (80034f4 <HAL_GPIO_DeInit+0x1e4>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003406:	4a34      	ldr	r2, [pc, #208]	@ (80034d8 <HAL_GPIO_DeInit+0x1c8>)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43da      	mvns	r2, r3
 8003416:	4830      	ldr	r0, [pc, #192]	@ (80034d8 <HAL_GPIO_DeInit+0x1c8>)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	400a      	ands	r2, r1
 800341e:	3302      	adds	r3, #2
 8003420:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2103      	movs	r1, #3
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	08da      	lsrs	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3208      	adds	r2, #8
 8003440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	08d2      	lsrs	r2, r2, #3
 8003458:	4019      	ands	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2103      	movs	r1, #3
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	401a      	ands	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	2101      	movs	r1, #1
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	401a      	ands	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2103      	movs	r1, #3
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	401a      	ands	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a6:	2101      	movs	r1, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	401a      	ands	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3301      	adds	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f af2b 	bne.w	8003320 <HAL_GPIO_DeInit+0x10>
  }
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40010000 	.word	0x40010000
 80034dc:	48000400 	.word	0x48000400
 80034e0:	48000800 	.word	0x48000800
 80034e4:	48000c00 	.word	0x48000c00
 80034e8:	48001000 	.word	0x48001000
 80034ec:	48001400 	.word	0x48001400
 80034f0:	48001800 	.word	0x48001800
 80034f4:	40010400 	.word	0x40010400

080034f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
 8003504:	4613      	mov	r3, r2
 8003506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003508:	787b      	ldrb	r3, [r7, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003514:	e002      	b.n	800351c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003532:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800353e:	4a05      	ldr	r2, [pc, #20]	@ (8003554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f806 	bl	8003558 <HAL_GPIO_EXTI_Callback>
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40010400 	.word	0x40010400

08003558 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e08d      	b.n	800369c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fe fbf9 	bl	8001d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2224      	movs	r2, #36	@ 0x24
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	e006      	b.n	80035f6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d108      	bne.n	8003610 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e007      	b.n	8003620 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800361e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800362e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003632:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003642:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69d9      	ldr	r1, [r3, #28]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1a      	ldr	r2, [r3, #32]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e021      	b.n	80036fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2224      	movs	r2, #36	@ 0x24
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe fbba 	bl	8001e48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	461a      	mov	r2, r3
 8003712:	4603      	mov	r3, r0
 8003714:	817b      	strh	r3, [r7, #10]
 8003716:	460b      	mov	r3, r1
 8003718:	813b      	strh	r3, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b20      	cmp	r3, #32
 8003728:	f040 80f9 	bne.w	800391e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_I2C_Mem_Write+0x34>
 8003732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800373e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0ed      	b.n	8003920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Mem_Write+0x4e>
 800374e:	2302      	movs	r3, #2
 8003750:	e0e6      	b.n	8003920 <HAL_I2C_Mem_Write+0x21c>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800375a:	f7ff f9e1 	bl	8002b20 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2319      	movs	r3, #25
 8003766:	2201      	movs	r2, #1
 8003768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fac3 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0d1      	b.n	8003920 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2221      	movs	r2, #33	@ 0x21
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2240      	movs	r2, #64	@ 0x40
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800379c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037a4:	88f8      	ldrh	r0, [r7, #6]
 80037a6:	893a      	ldrh	r2, [r7, #8]
 80037a8:	8979      	ldrh	r1, [r7, #10]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	4603      	mov	r3, r0
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f9d3 	bl	8003b60 <I2C_RequestMemoryWrite>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0a9      	b.n	8003920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2bff      	cmp	r3, #255	@ 0xff
 80037d4:	d90e      	bls.n	80037f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	22ff      	movs	r2, #255	@ 0xff
 80037da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	8979      	ldrh	r1, [r7, #10]
 80037e4:	2300      	movs	r3, #0
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fc47 	bl	8004080 <I2C_TransferConfig>
 80037f2:	e00f      	b.n	8003814 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003802:	b2da      	uxtb	r2, r3
 8003804:	8979      	ldrh	r1, [r7, #10]
 8003806:	2300      	movs	r3, #0
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fc36 	bl	8004080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fac6 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e07b      	b.n	8003920 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d034      	beq.n	80038cc <HAL_I2C_Mem_Write+0x1c8>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d130      	bne.n	80038cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	2200      	movs	r2, #0
 8003872:	2180      	movs	r1, #128	@ 0x80
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fa3f 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e04d      	b.n	8003920 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2bff      	cmp	r3, #255	@ 0xff
 800388c:	d90e      	bls.n	80038ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	22ff      	movs	r2, #255	@ 0xff
 8003892:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003898:	b2da      	uxtb	r2, r3
 800389a:	8979      	ldrh	r1, [r7, #10]
 800389c:	2300      	movs	r3, #0
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fbeb 	bl	8004080 <I2C_TransferConfig>
 80038aa:	e00f      	b.n	80038cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	8979      	ldrh	r1, [r7, #10]
 80038be:	2300      	movs	r3, #0
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fbda 	bl	8004080 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d19e      	bne.n	8003814 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 faac 	bl	8003e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e01a      	b.n	8003920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2220      	movs	r2, #32
 80038f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <HAL_I2C_Mem_Write+0x224>)
 80038fe:	400b      	ands	r3, r1
 8003900:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	fe00e800 	.word	0xfe00e800

0800392c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	f040 80fd 	bne.w	8003b4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_I2C_Mem_Read+0x34>
 800395a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003966:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0f1      	b.n	8003b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_I2C_Mem_Read+0x4e>
 8003976:	2302      	movs	r3, #2
 8003978:	e0ea      	b.n	8003b50 <HAL_I2C_Mem_Read+0x224>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003982:	f7ff f8cd 	bl	8002b20 <HAL_GetTick>
 8003986:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2319      	movs	r3, #25
 800398e:	2201      	movs	r2, #1
 8003990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f9af 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0d5      	b.n	8003b50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2222      	movs	r2, #34	@ 0x22
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2240      	movs	r2, #64	@ 0x40
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039cc:	88f8      	ldrh	r0, [r7, #6]
 80039ce:	893a      	ldrh	r2, [r7, #8]
 80039d0:	8979      	ldrh	r1, [r7, #10]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	4603      	mov	r3, r0
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f913 	bl	8003c08 <I2C_RequestMemoryRead>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0ad      	b.n	8003b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2bff      	cmp	r3, #255	@ 0xff
 80039fc:	d90e      	bls.n	8003a1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	8979      	ldrh	r1, [r7, #10]
 8003a0c:	4b52      	ldr	r3, [pc, #328]	@ (8003b58 <HAL_I2C_Mem_Read+0x22c>)
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fb33 	bl	8004080 <I2C_TransferConfig>
 8003a1a:	e00f      	b.n	8003a3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	8979      	ldrh	r1, [r7, #10]
 8003a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b58 <HAL_I2C_Mem_Read+0x22c>)
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fb22 	bl	8004080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	2200      	movs	r2, #0
 8003a44:	2104      	movs	r1, #4
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f956 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07c      	b.n	8003b50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d034      	beq.n	8003afc <HAL_I2C_Mem_Read+0x1d0>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d130      	bne.n	8003afc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2180      	movs	r1, #128	@ 0x80
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f927 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e04d      	b.n	8003b50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2bff      	cmp	r3, #255	@ 0xff
 8003abc:	d90e      	bls.n	8003adc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	8979      	ldrh	r1, [r7, #10]
 8003acc:	2300      	movs	r3, #0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fad3 	bl	8004080 <I2C_TransferConfig>
 8003ada:	e00f      	b.n	8003afc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	8979      	ldrh	r1, [r7, #10]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fac2 	bl	8004080 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d19a      	bne.n	8003a3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f994 	bl	8003e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e01a      	b.n	8003b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_I2C_Mem_Read+0x230>)
 8003b2e:	400b      	ands	r3, r1
 8003b30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	80002400 	.word	0x80002400
 8003b5c:	fe00e800 	.word	0xfe00e800

08003b60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	460b      	mov	r3, r1
 8003b74:	813b      	strh	r3, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	8979      	ldrh	r1, [r7, #10]
 8003b80:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <I2C_RequestMemoryWrite+0xa4>)
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fa79 	bl	8004080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f909 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e02c      	b.n	8003bfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba8:	893b      	ldrh	r3, [r7, #8]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bb2:	e015      	b.n	8003be0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f8ef 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e012      	b.n	8003bfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd6:	893b      	ldrh	r3, [r7, #8]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2200      	movs	r2, #0
 8003be8:	2180      	movs	r1, #128	@ 0x80
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f884 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	80002000 	.word	0x80002000

08003c08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	817b      	strh	r3, [r7, #10]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	8979      	ldrh	r1, [r7, #10]
 8003c28:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <I2C_RequestMemoryRead+0xa4>)
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fa26 	bl	8004080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f8b6 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e02c      	b.n	8003ca2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4e:	893b      	ldrh	r3, [r7, #8]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c58:	e015      	b.n	8003c86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c5a:	893b      	ldrh	r3, [r7, #8]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	69b9      	ldr	r1, [r7, #24]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f89c 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e012      	b.n	8003ca2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c7c:	893b      	ldrh	r3, [r7, #8]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2140      	movs	r1, #64	@ 0x40
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f831 	bl	8003cf8 <I2C_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	80002000 	.word	0x80002000

08003cb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d103      	bne.n	8003cce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d007      	beq.n	8003cec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	619a      	str	r2, [r3, #24]
  }
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d08:	e03b      	b.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f8d6 	bl	8003ec0 <I2C_IsErrorOccurred>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e041      	b.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d02d      	beq.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fe fefb 	bl	8002b20 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d122      	bne.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d113      	bne.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00f      	b.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d0b4      	beq.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003db6:	e033      	b.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f87f 	bl	8003ec0 <I2C_IsErrorOccurred>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e031      	b.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d025      	beq.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd4:	f7fe fea4 	bl	8002b20 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d11a      	bne.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d013      	beq.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d1c4      	bne.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e44:	e02f      	b.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f838 	bl	8003ec0 <I2C_IsErrorOccurred>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e02d      	b.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fe fe61 	bl	8002b20 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d11a      	bne.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d013      	beq.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e007      	b.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d1c8      	bne.n	8003e46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d068      	beq.n	8003fbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ef4:	e049      	b.n	8003f8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d045      	beq.n	8003f8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003efe:	f7fe fe0f 	bl	8002b20 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d302      	bcc.n	8003f14 <I2C_IsErrorOccurred+0x54>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d13a      	bne.n	8003f8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f36:	d121      	bne.n	8003f7c <I2C_IsErrorOccurred+0xbc>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f3e:	d01d      	beq.n	8003f7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d01a      	beq.n	8003f7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f56:	f7fe fde3 	bl	8002b20 <HAL_GetTick>
 8003f5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f5c:	e00e      	b.n	8003f7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f5e:	f7fe fddf 	bl	8002b20 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b19      	cmp	r3, #25
 8003f6a:	d907      	bls.n	8003f7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	f043 0320 	orr.w	r3, r3, #32
 8003f72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f7a:	e006      	b.n	8003f8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d1e9      	bne.n	8003f5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d003      	beq.n	8003fa0 <I2C_IsErrorOccurred+0xe0>
 8003f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0aa      	beq.n	8003ef6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2220      	movs	r2, #32
 8003fae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004002:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800402c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01c      	beq.n	800406e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff fe3b 	bl	8003cb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <I2C_IsErrorOccurred+0x1bc>)
 8004046:	400b      	ands	r3, r1
 8004048:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800406e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004072:	4618      	mov	r0, r3
 8004074:	3728      	adds	r7, #40	@ 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	fe00e800 	.word	0xfe00e800

08004080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	817b      	strh	r3, [r7, #10]
 800408e:	4613      	mov	r3, r2
 8004090:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004098:	7a7b      	ldrb	r3, [r7, #9]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	0d5b      	lsrs	r3, r3, #21
 80040ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040be:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <I2C_TransferConfig+0x60>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	43db      	mvns	r3, r3
 80040c4:	ea02 0103 	and.w	r1, r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	03ff63ff 	.word	0x03ff63ff

080040e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d138      	bne.n	800416c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004104:	2302      	movs	r3, #2
 8004106:	e032      	b.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	@ 0x24
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b20      	cmp	r3, #32
 800418e:	d139      	bne.n	8004204 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800419a:	2302      	movs	r3, #2
 800419c:	e033      	b.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2224      	movs	r2, #36	@ 0x24
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af02      	add	r7, sp, #8
 8004218:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e101      	b.n	8004428 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fd ff55 	bl	80020e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2203      	movs	r2, #3
 8004242:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f002 fb97 	bl	8006984 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7c1a      	ldrb	r2, [r3, #16]
 800425e:	f88d 2000 	strb.w	r2, [sp]
 8004262:	3304      	adds	r3, #4
 8004264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004266:	f002 fb60 	bl	800692a <USB_CoreInit>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0d5      	b.n	8004428 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f002 fb8f 	bl	80069a6 <USB_SetCurrentMode>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0c6      	b.n	8004428 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
 800429e:	e04a      	b.n	8004336 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3315      	adds	r3, #21
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3314      	adds	r3, #20
 80042c4:	7bfa      	ldrb	r2, [r7, #15]
 80042c6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	b298      	uxth	r0, r3
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	332e      	adds	r3, #46	@ 0x2e
 80042dc:	4602      	mov	r2, r0
 80042de:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	3318      	adds	r3, #24
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042f4:	7bfa      	ldrb	r2, [r7, #15]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	331c      	adds	r3, #28
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004308:	7bfa      	ldrb	r2, [r7, #15]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	3320      	adds	r3, #32
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	3324      	adds	r3, #36	@ 0x24
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	3301      	adds	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	791b      	ldrb	r3, [r3, #4]
 800433a:	7bfa      	ldrb	r2, [r7, #15]
 800433c:	429a      	cmp	r2, r3
 800433e:	d3af      	bcc.n	80042a0 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	e044      	b.n	80043d0 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	3301      	adds	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	791b      	ldrb	r3, [r3, #4]
 80043d4:	7bfa      	ldrb	r2, [r7, #15]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d3b5      	bcc.n	8004346 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7c1a      	ldrb	r2, [r3, #16]
 80043e2:	f88d 2000 	strb.w	r2, [sp]
 80043e6:	3304      	adds	r3, #4
 80043e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ea:	f002 fb29 	bl	8006a40 <USB_DevInit>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e013      	b.n	8004428 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	7b1b      	ldrb	r3, [r3, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d102      	bne.n	800441c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f80a 	bl	8004430 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f002 fcce 	bl	8006dc2 <USB_DevDisconnect>

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004462:	f043 0303 	orr.w	r3, r3, #3
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a04      	ldr	r2, [pc, #16]	@ (8004494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40007000 	.word	0x40007000

08004498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800449c:	4b04      	ldr	r3, [pc, #16]	@ (80044b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40007000 	.word	0x40007000

080044b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c2:	d130      	bne.n	8004526 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c4:	4b23      	ldr	r3, [pc, #140]	@ (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d0:	d038      	beq.n	8004544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d2:	4b20      	ldr	r3, [pc, #128]	@ (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044da:	4a1e      	ldr	r2, [pc, #120]	@ (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2232      	movs	r2, #50	@ 0x32
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	4a1b      	ldr	r2, [pc, #108]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	0c9b      	lsrs	r3, r3, #18
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044f8:	e002      	b.n	8004500 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004500:	4b14      	ldr	r3, [pc, #80]	@ (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800450c:	d102      	bne.n	8004514 <HAL_PWREx_ControlVoltageScaling+0x60>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f2      	bne.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004514:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004520:	d110      	bne.n	8004544 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e00f      	b.n	8004546 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800452e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004532:	d007      	beq.n	8004544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004534:	4b07      	ldr	r3, [pc, #28]	@ (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800453c:	4a05      	ldr	r2, [pc, #20]	@ (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800453e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004542:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40007000 	.word	0x40007000
 8004558:	20000bb0 	.word	0x20000bb0
 800455c:	431bde83 	.word	0x431bde83

08004560 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4a04      	ldr	r2, [pc, #16]	@ (800457c <HAL_PWREx_EnableVddUSB+0x1c>)
 800456a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800456e:	6053      	str	r3, [r2, #4]
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40007000 	.word	0x40007000

08004580 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af02      	add	r7, sp, #8
 8004586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004588:	f7fe faca 	bl	8002b20 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e063      	b.n	8004660 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fd fc6f 	bl	8001e90 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80045b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f858 	bl	800466c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	021a      	lsls	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	2120      	movs	r1, #32
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f850 	bl	8004688 <QSPI_WaitFlagStateUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80045ec:	7afb      	ldrb	r3, [r7, #11]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d131      	bne.n	8004656 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045fc:	f023 0310 	bic.w	r3, r3, #16
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6852      	ldr	r2, [r2, #4]
 8004604:	0611      	lsls	r1, r2, #24
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68d2      	ldr	r2, [r2, #12]
 800460a:	4311      	orrs	r1, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	430b      	orrs	r3, r1
 8004612:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <HAL_QSPI_Init+0xe8>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6912      	ldr	r2, [r2, #16]
 8004622:	0411      	lsls	r1, r2, #16
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6952      	ldr	r2, [r2, #20]
 8004628:	4311      	orrs	r1, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6992      	ldr	r2, [r2, #24]
 800462e:	4311      	orrs	r1, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	430b      	orrs	r3, r1
 8004636:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800465e:	7afb      	ldrb	r3, [r7, #11]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	ffe0f8fe 	.word	0xffe0f8fe

0800466c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004698:	e01a      	b.n	80046d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d016      	beq.n	80046d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fe fa3d 	bl	8002b20 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2204      	movs	r2, #4
 80046bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	f043 0201 	orr.w	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e00e      	b.n	80046ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bf14      	ite	ne
 80046de:	2301      	movne	r3, #1
 80046e0:	2300      	moveq	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d1d6      	bne.n	800469a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e3ca      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470a:	4b97      	ldr	r3, [pc, #604]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004714:	4b94      	ldr	r3, [pc, #592]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80e4 	beq.w	80048f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_RCC_OscConfig+0x4a>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b0c      	cmp	r3, #12
 8004736:	f040 808b 	bne.w	8004850 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b01      	cmp	r3, #1
 800473e:	f040 8087 	bne.w	8004850 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004742:	4b89      	ldr	r3, [pc, #548]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_RCC_OscConfig+0x62>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e3a2      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	4b82      	ldr	r3, [pc, #520]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_RCC_OscConfig+0x7c>
 800476a:	4b7f      	ldr	r3, [pc, #508]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004772:	e005      	b.n	8004780 <HAL_RCC_OscConfig+0x88>
 8004774:	4b7c      	ldr	r3, [pc, #496]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004780:	4293      	cmp	r3, r2
 8004782:	d223      	bcs.n	80047cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd55 	bl	8005238 <RCC_SetFlashLatencyFromMSIRange>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e383      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004798:	4b73      	ldr	r3, [pc, #460]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a72      	ldr	r2, [pc, #456]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b70      	ldr	r3, [pc, #448]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	496d      	ldr	r1, [pc, #436]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	4968      	ldr	r1, [pc, #416]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	604b      	str	r3, [r1, #4]
 80047ca:	e025      	b.n	8004818 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047cc:	4b66      	ldr	r3, [pc, #408]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a65      	ldr	r2, [pc, #404]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047d2:	f043 0308 	orr.w	r3, r3, #8
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b63      	ldr	r3, [pc, #396]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	4960      	ldr	r1, [pc, #384]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	495b      	ldr	r1, [pc, #364]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fd15 	bl	8005238 <RCC_SetFlashLatencyFromMSIRange>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e343      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004818:	f000 fc4a 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b52      	ldr	r3, [pc, #328]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	4950      	ldr	r1, [pc, #320]	@ (800496c <HAL_RCC_OscConfig+0x274>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	4a4e      	ldr	r2, [pc, #312]	@ (8004970 <HAL_RCC_OscConfig+0x278>)
 8004836:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004838:	4b4e      	ldr	r3, [pc, #312]	@ (8004974 <HAL_RCC_OscConfig+0x27c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe f91f 	bl	8002a80 <HAL_InitTick>
 8004842:	4603      	mov	r3, r0
 8004844:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d052      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	e327      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d032      	beq.n	80048be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004858:	4b43      	ldr	r3, [pc, #268]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a42      	ldr	r2, [pc, #264]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004864:	f7fe f95c 	bl	8002b20 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800486c:	f7fe f958 	bl	8002b20 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e310      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800487e:	4b3a      	ldr	r3, [pc, #232]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800488a:	4b37      	ldr	r3, [pc, #220]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a36      	ldr	r2, [pc, #216]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b34      	ldr	r3, [pc, #208]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	4931      	ldr	r1, [pc, #196]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	492c      	ldr	r1, [pc, #176]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	e01a      	b.n	80048f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048be:	4b2a      	ldr	r3, [pc, #168]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a29      	ldr	r2, [pc, #164]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ca:	f7fe f929 	bl	8002b20 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d2:	f7fe f925 	bl	8002b20 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e2dd      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048e4:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x1da>
 80048f0:	e000      	b.n	80048f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d074      	beq.n	80049ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b08      	cmp	r3, #8
 8004904:	d005      	beq.n	8004912 <HAL_RCC_OscConfig+0x21a>
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d10e      	bne.n	800492a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d10b      	bne.n	800492a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004912:	4b15      	ldr	r3, [pc, #84]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d064      	beq.n	80049e8 <HAL_RCC_OscConfig+0x2f0>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d160      	bne.n	80049e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e2ba      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x24a>
 8004934:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a0b      	ldr	r2, [pc, #44]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800493a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e026      	b.n	8004990 <HAL_RCC_OscConfig+0x298>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800494a:	d115      	bne.n	8004978 <HAL_RCC_OscConfig+0x280>
 800494c:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a05      	ldr	r2, [pc, #20]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 8004952:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b03      	ldr	r3, [pc, #12]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a02      	ldr	r2, [pc, #8]	@ (8004968 <HAL_RCC_OscConfig+0x270>)
 800495e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e014      	b.n	8004990 <HAL_RCC_OscConfig+0x298>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	0800c08c 	.word	0x0800c08c
 8004970:	20000bb0 	.word	0x20000bb0
 8004974:	20000be8 	.word	0x20000be8
 8004978:	4ba0      	ldr	r3, [pc, #640]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a9f      	ldr	r2, [pc, #636]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 800497e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4b9d      	ldr	r3, [pc, #628]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a9c      	ldr	r2, [pc, #624]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 800498a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800498e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fe f8c2 	bl	8002b20 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a0:	f7fe f8be 	bl	8002b20 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	@ 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e276      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b2:	4b92      	ldr	r3, [pc, #584]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0x2a8>
 80049be:	e014      	b.n	80049ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fe f8ae 	bl	8002b20 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fe f8aa 	bl	8002b20 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	@ 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e262      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049da:	4b88      	ldr	r3, [pc, #544]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x2d0>
 80049e6:	e000      	b.n	80049ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d060      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_OscConfig+0x310>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d119      	bne.n	8004a36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d116      	bne.n	8004a36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a08:	4b7c      	ldr	r3, [pc, #496]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_OscConfig+0x328>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e23f      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a20:	4b76      	ldr	r3, [pc, #472]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	4973      	ldr	r1, [pc, #460]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a34:	e040      	b.n	8004ab8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d023      	beq.n	8004a86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3e:	4b6f      	ldr	r3, [pc, #444]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6e      	ldr	r2, [pc, #440]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fe f869 	bl	8002b20 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a52:	f7fe f865 	bl	8002b20 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e21d      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a64:	4b65      	ldr	r3, [pc, #404]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b62      	ldr	r3, [pc, #392]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	061b      	lsls	r3, r3, #24
 8004a7e:	495f      	ldr	r1, [pc, #380]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
 8004a84:	e018      	b.n	8004ab8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a86:	4b5d      	ldr	r3, [pc, #372]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a5c      	ldr	r2, [pc, #368]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fe f845 	bl	8002b20 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a9a:	f7fe f841 	bl	8002b20 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e1f9      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aac:	4b53      	ldr	r3, [pc, #332]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d03c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01c      	beq.n	8004b06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004acc:	4b4b      	ldr	r3, [pc, #300]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ad2:	4a4a      	ldr	r2, [pc, #296]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fe f820 	bl	8002b20 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae4:	f7fe f81c 	bl	8002b20 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e1d4      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af6:	4b41      	ldr	r3, [pc, #260]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0ef      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x3ec>
 8004b04:	e01b      	b.n	8004b3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b06:	4b3d      	ldr	r3, [pc, #244]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b16:	f7fe f803 	bl	8002b20 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1e:	f7fd ffff 	bl	8002b20 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e1b7      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b30:	4b32      	ldr	r3, [pc, #200]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ef      	bne.n	8004b1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80a6 	beq.w	8004c98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b50:	4b2a      	ldr	r3, [pc, #168]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5c:	4b27      	ldr	r3, [pc, #156]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	4a26      	ldr	r2, [pc, #152]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b68:	4b24      	ldr	r3, [pc, #144]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b74:	2301      	movs	r3, #1
 8004b76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b78:	4b21      	ldr	r3, [pc, #132]	@ (8004c00 <HAL_RCC_OscConfig+0x508>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d118      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b84:	4b1e      	ldr	r3, [pc, #120]	@ (8004c00 <HAL_RCC_OscConfig+0x508>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	@ (8004c00 <HAL_RCC_OscConfig+0x508>)
 8004b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b90:	f7fd ffc6 	bl	8002b20 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b98:	f7fd ffc2 	bl	8002b20 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e17a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004baa:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <HAL_RCC_OscConfig+0x508>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d108      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4d8>
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bce:	e029      	b.n	8004c24 <HAL_RCC_OscConfig+0x52c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d115      	bne.n	8004c04 <HAL_RCC_OscConfig+0x50c>
 8004bd8:	4b08      	ldr	r3, [pc, #32]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bde:	4a07      	ldr	r2, [pc, #28]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004be8:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bee:	4a03      	ldr	r2, [pc, #12]	@ (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bf8:	e014      	b.n	8004c24 <HAL_RCC_OscConfig+0x52c>
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40007000 	.word	0x40007000
 8004c04:	4b9c      	ldr	r3, [pc, #624]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0a:	4a9b      	ldr	r2, [pc, #620]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c14:	4b98      	ldr	r3, [pc, #608]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1a:	4a97      	ldr	r2, [pc, #604]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d016      	beq.n	8004c5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd ff78 	bl	8002b20 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd ff74 	bl	8002b20 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e12a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ed      	beq.n	8004c34 <HAL_RCC_OscConfig+0x53c>
 8004c58:	e015      	b.n	8004c86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fd ff61 	bl	8002b20 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd ff5d 	bl	8002b20 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e113      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c78:	4b7f      	ldr	r3, [pc, #508]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1ed      	bne.n	8004c62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c86:	7ffb      	ldrb	r3, [r7, #31]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8c:	4b7a      	ldr	r3, [pc, #488]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c90:	4a79      	ldr	r2, [pc, #484]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80fe 	beq.w	8004e9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	f040 80d0 	bne.w	8004e4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cac:	4b72      	ldr	r3, [pc, #456]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0203 	and.w	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d130      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d127      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d11f      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cec:	2a07      	cmp	r2, #7
 8004cee:	bf14      	ite	ne
 8004cf0:	2201      	movne	r2, #1
 8004cf2:	2200      	moveq	r2, #0
 8004cf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	3b01      	subs	r3, #1
 8004d08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d109      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d06e      	beq.n	8004e00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d069      	beq.n	8004dfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d28:	4b53      	ldr	r3, [pc, #332]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d34:	4b50      	ldr	r3, [pc, #320]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0ad      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d44:	4b4c      	ldr	r3, [pc, #304]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a4b      	ldr	r2, [pc, #300]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d50:	f7fd fee6 	bl	8002b20 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fd fee2 	bl	8002b20 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e09a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6a:	4b43      	ldr	r3, [pc, #268]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d76:	4b40      	ldr	r3, [pc, #256]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	4b40      	ldr	r3, [pc, #256]	@ (8004e7c <HAL_RCC_OscConfig+0x784>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d86:	3a01      	subs	r2, #1
 8004d88:	0112      	lsls	r2, r2, #4
 8004d8a:	4311      	orrs	r1, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d90:	0212      	lsls	r2, r2, #8
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d98:	0852      	lsrs	r2, r2, #1
 8004d9a:	3a01      	subs	r2, #1
 8004d9c:	0552      	lsls	r2, r2, #21
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004da4:	0852      	lsrs	r2, r2, #1
 8004da6:	3a01      	subs	r2, #1
 8004da8:	0652      	lsls	r2, r2, #25
 8004daa:	4311      	orrs	r1, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004db0:	0912      	lsrs	r2, r2, #4
 8004db2:	0452      	lsls	r2, r2, #17
 8004db4:	430a      	orrs	r2, r1
 8004db6:	4930      	ldr	r1, [pc, #192]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd4:	f7fd fea4 	bl	8002b20 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fd fea0 	bl	8002b20 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e058      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dee:	4b22      	ldr	r3, [pc, #136]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dfa:	e050      	b.n	8004e9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e04f      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e00:	4b1d      	ldr	r3, [pc, #116]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d148      	bne.n	8004e9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a19      	ldr	r2, [pc, #100]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e18:	4b17      	ldr	r3, [pc, #92]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e24:	f7fd fe7c 	bl	8002b20 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fd fe78 	bl	8002b20 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e030      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x734>
 8004e4a:	e028      	b.n	8004e9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d023      	beq.n	8004e9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e52:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a08      	ldr	r2, [pc, #32]	@ (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fd fe5f 	bl	8002b20 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e64:	e00c      	b.n	8004e80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fd fe5b 	bl	8002b20 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d905      	bls.n	8004e80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e013      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e80:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <HAL_RCC_OscConfig+0x7b0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ec      	bne.n	8004e66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <HAL_RCC_OscConfig+0x7b0>)
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	4905      	ldr	r1, [pc, #20]	@ (8004ea8 <HAL_RCC_OscConfig+0x7b0>)
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <HAL_RCC_OscConfig+0x7b4>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60cb      	str	r3, [r1, #12]
 8004e98:	e001      	b.n	8004e9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	feeefffc 	.word	0xfeeefffc

08004eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0e7      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b75      	ldr	r3, [pc, #468]	@ (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d910      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b72      	ldr	r3, [pc, #456]	@ (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 0207 	bic.w	r2, r3, #7
 8004eda:	4970      	ldr	r1, [pc, #448]	@ (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b6e      	ldr	r3, [pc, #440]	@ (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0cf      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	4b66      	ldr	r3, [pc, #408]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d908      	bls.n	8004f22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b63      	ldr	r3, [pc, #396]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4960      	ldr	r1, [pc, #384]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d04c      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f36:	4b5a      	ldr	r3, [pc, #360]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d121      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0a6      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f4e:	4b54      	ldr	r3, [pc, #336]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d115      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e09a      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f66:	4b4e      	ldr	r3, [pc, #312]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e08e      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f76:	4b4a      	ldr	r3, [pc, #296]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e086      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f86:	4b46      	ldr	r3, [pc, #280]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4943      	ldr	r1, [pc, #268]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f98:	f7fd fdc2 	bl	8002b20 <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa0:	f7fd fdbe 	bl	8002b20 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e06e      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 020c 	and.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1eb      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	4b31      	ldr	r3, [pc, #196]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d208      	bcs.n	8004ff6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	492b      	ldr	r1, [pc, #172]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff6:	4b29      	ldr	r3, [pc, #164]	@ (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d210      	bcs.n	8005026 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005004:	4b25      	ldr	r3, [pc, #148]	@ (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 0207 	bic.w	r2, r3, #7
 800500c:	4923      	ldr	r1, [pc, #140]	@ (800509c <HAL_RCC_ClockConfig+0x1ec>)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005014:	4b21      	ldr	r3, [pc, #132]	@ (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e036      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005032:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4918      	ldr	r1, [pc, #96]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005050:	4b13      	ldr	r3, [pc, #76]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4910      	ldr	r1, [pc, #64]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005060:	4313      	orrs	r3, r2
 8005062:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005064:	f000 f824 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 8005068:	4602      	mov	r2, r0
 800506a:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	091b      	lsrs	r3, r3, #4
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	490b      	ldr	r1, [pc, #44]	@ (80050a4 <HAL_RCC_ClockConfig+0x1f4>)
 8005076:	5ccb      	ldrb	r3, [r1, r3]
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	4a09      	ldr	r2, [pc, #36]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005082:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <HAL_RCC_ClockConfig+0x1fc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7fd fcf9 	bl	8002a80 <HAL_InitTick>
 800508e:	4603      	mov	r3, r0
 8005090:	72fb      	strb	r3, [r7, #11]

  return status;
 8005092:	7afb      	ldrb	r3, [r7, #11]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40022000 	.word	0x40022000
 80050a0:	40021000 	.word	0x40021000
 80050a4:	0800c08c 	.word	0x0800c08c
 80050a8:	20000bb0 	.word	0x20000bb0
 80050ac:	20000be8 	.word	0x20000be8

080050b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	@ 0x24
 80050b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050be:	4b3e      	ldr	r3, [pc, #248]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c8:	4b3b      	ldr	r3, [pc, #236]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0x34>
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b0c      	cmp	r3, #12
 80050dc:	d121      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d11e      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050e4:	4b34      	ldr	r3, [pc, #208]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050f0:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e005      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005100:	4b2d      	ldr	r3, [pc, #180]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800510c:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005114:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005120:	e00a      	b.n	8005138 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b04      	cmp	r3, #4
 8005126:	d102      	bne.n	800512e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005128:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e004      	b.n	8005138 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d101      	bne.n	8005138 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005134:	4b23      	ldr	r3, [pc, #140]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005136:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d134      	bne.n	80051a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800513e:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d003      	beq.n	8005156 <HAL_RCC_GetSysClockFreq+0xa6>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d003      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0xac>
 8005154:	e005      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005156:	4b1a      	ldr	r3, [pc, #104]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005158:	617b      	str	r3, [r7, #20]
      break;
 800515a:	e005      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800515c:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800515e:	617b      	str	r3, [r7, #20]
      break;
 8005160:	e002      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	617b      	str	r3, [r7, #20]
      break;
 8005166:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005168:	4b13      	ldr	r3, [pc, #76]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	3301      	adds	r3, #1
 8005174:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005176:	4b10      	ldr	r3, [pc, #64]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	fb03 f202 	mul.w	r2, r3, r2
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800518e:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	0e5b      	lsrs	r3, r3, #25
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	3301      	adds	r3, #1
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051a8:	69bb      	ldr	r3, [r7, #24]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3724      	adds	r7, #36	@ 0x24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
 80051bc:	0800c0a4 	.word	0x0800c0a4
 80051c0:	00f42400 	.word	0x00f42400
 80051c4:	007a1200 	.word	0x007a1200

080051c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051cc:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000bb0 	.word	0x20000bb0

080051e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051e4:	f7ff fff0 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	4904      	ldr	r1, [pc, #16]	@ (8005208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051f6:	5ccb      	ldrb	r3, [r1, r3]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40021000 	.word	0x40021000
 8005208:	0800c09c 	.word	0x0800c09c

0800520c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005210:	f7ff ffda 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	0adb      	lsrs	r3, r3, #11
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4904      	ldr	r1, [pc, #16]	@ (8005234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	0800c09c 	.word	0x0800c09c

08005238 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005244:	4b2a      	ldr	r3, [pc, #168]	@ (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005250:	f7ff f922 	bl	8004498 <HAL_PWREx_GetVoltageRange>
 8005254:	6178      	str	r0, [r7, #20]
 8005256:	e014      	b.n	8005282 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005258:	4b25      	ldr	r3, [pc, #148]	@ (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525c:	4a24      	ldr	r2, [pc, #144]	@ (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005262:	6593      	str	r3, [r2, #88]	@ 0x58
 8005264:	4b22      	ldr	r3, [pc, #136]	@ (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005270:	f7ff f912 	bl	8004498 <HAL_PWREx_GetVoltageRange>
 8005274:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005276:	4b1e      	ldr	r3, [pc, #120]	@ (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527a:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800527c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005280:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005288:	d10b      	bne.n	80052a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b80      	cmp	r3, #128	@ 0x80
 800528e:	d919      	bls.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2ba0      	cmp	r3, #160	@ 0xa0
 8005294:	d902      	bls.n	800529c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005296:	2302      	movs	r3, #2
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e013      	b.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800529c:	2301      	movs	r3, #1
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	e010      	b.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b80      	cmp	r3, #128	@ 0x80
 80052a6:	d902      	bls.n	80052ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052a8:	2303      	movs	r3, #3
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	e00a      	b.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b80      	cmp	r3, #128	@ 0x80
 80052b2:	d102      	bne.n	80052ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052b4:	2302      	movs	r3, #2
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e004      	b.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b70      	cmp	r3, #112	@ 0x70
 80052be:	d101      	bne.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052c0:	2301      	movs	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052c4:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 0207 	bic.w	r2, r3, #7
 80052cc:	4909      	ldr	r1, [pc, #36]	@ (80052f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052d4:	4b07      	ldr	r3, [pc, #28]	@ (80052f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d001      	beq.n	80052e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40022000 	.word	0x40022000

080052f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005300:	2300      	movs	r3, #0
 8005302:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005304:	2300      	movs	r3, #0
 8005306:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005310:	2b00      	cmp	r3, #0
 8005312:	d041      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005318:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800531c:	d02a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800531e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005322:	d824      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005324:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005328:	d008      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800532a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800532e:	d81e      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005338:	d010      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800533a:	e018      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800533c:	4b86      	ldr	r3, [pc, #536]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a85      	ldr	r2, [pc, #532]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005346:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005348:	e015      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f000 facb 	bl	80058ec <RCCEx_PLLSAI1_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800535a:	e00c      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3320      	adds	r3, #32
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fbb6 	bl	8005ad4 <RCCEx_PLLSAI2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	74fb      	strb	r3, [r7, #19]
      break;
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800537c:	4b76      	ldr	r3, [pc, #472]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005382:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800538a:	4973      	ldr	r1, [pc, #460]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005392:	e001      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d041      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053ac:	d02a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80053ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053b2:	d824      	bhi.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053b8:	d008      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053be:	d81e      	bhi.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80053c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053c8:	d010      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053ca:	e018      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053cc:	4b62      	ldr	r3, [pc, #392]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a61      	ldr	r2, [pc, #388]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053d8:	e015      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fa83 	bl	80058ec <RCCEx_PLLSAI1_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053ea:	e00c      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3320      	adds	r3, #32
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fb6e 	bl	8005ad4 <RCCEx_PLLSAI2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053fc:	e003      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	74fb      	strb	r3, [r7, #19]
      break;
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800540c:	4b52      	ldr	r3, [pc, #328]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005412:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800541a:	494f      	ldr	r1, [pc, #316]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005422:	e001      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80a0 	beq.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005436:	2300      	movs	r3, #0
 8005438:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800543a:	4b47      	ldr	r3, [pc, #284]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005450:	4b41      	ldr	r3, [pc, #260]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005454:	4a40      	ldr	r2, [pc, #256]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800545a:	6593      	str	r3, [r2, #88]	@ 0x58
 800545c:	4b3e      	ldr	r3, [pc, #248]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005468:	2301      	movs	r3, #1
 800546a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800546c:	4b3b      	ldr	r3, [pc, #236]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a3a      	ldr	r2, [pc, #232]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005476:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005478:	f7fd fb52 	bl	8002b20 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800547e:	e009      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005480:	f7fd fb4e 	bl	8002b20 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d902      	bls.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	74fb      	strb	r3, [r7, #19]
        break;
 8005492:	e005      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005494:	4b31      	ldr	r3, [pc, #196]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ef      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d15c      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01f      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d019      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054c4:	4b24      	ldr	r3, [pc, #144]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d0:	4b21      	ldr	r3, [pc, #132]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d6:	4a20      	ldr	r2, [pc, #128]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f0:	4a19      	ldr	r2, [pc, #100]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d016      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fd fb0d 	bl	8002b20 <HAL_GetTick>
 8005506:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005508:	e00b      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550a:	f7fd fb09 	bl	8002b20 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005518:	4293      	cmp	r3, r2
 800551a:	d902      	bls.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	74fb      	strb	r3, [r7, #19]
            break;
 8005520:	e006      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005522:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ec      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10c      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005536:	4b08      	ldr	r3, [pc, #32]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005546:	4904      	ldr	r1, [pc, #16]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800554e:	e009      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005550:	7cfb      	ldrb	r3, [r7, #19]
 8005552:	74bb      	strb	r3, [r7, #18]
 8005554:	e006      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005564:	7c7b      	ldrb	r3, [r7, #17]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d105      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556a:	4b9e      	ldr	r3, [pc, #632]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	4a9d      	ldr	r2, [pc, #628]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005574:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005582:	4b98      	ldr	r3, [pc, #608]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005588:	f023 0203 	bic.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	4994      	ldr	r1, [pc, #592]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055a4:	4b8f      	ldr	r3, [pc, #572]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	f023 020c 	bic.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b2:	498c      	ldr	r1, [pc, #560]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055c6:	4b87      	ldr	r3, [pc, #540]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	4983      	ldr	r1, [pc, #524]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e8:	4b7e      	ldr	r3, [pc, #504]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	497b      	ldr	r1, [pc, #492]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800560a:	4b76      	ldr	r3, [pc, #472]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005618:	4972      	ldr	r1, [pc, #456]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800562c:	4b6d      	ldr	r3, [pc, #436]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	496a      	ldr	r1, [pc, #424]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800564e:	4b65      	ldr	r3, [pc, #404]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565c:	4961      	ldr	r1, [pc, #388]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005670:	4b5c      	ldr	r3, [pc, #368]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800567e:	4959      	ldr	r1, [pc, #356]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005692:	4b54      	ldr	r3, [pc, #336]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a0:	4950      	ldr	r1, [pc, #320]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b4:	4b4b      	ldr	r3, [pc, #300]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c2:	4948      	ldr	r1, [pc, #288]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d6:	4b43      	ldr	r3, [pc, #268]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e4:	493f      	ldr	r1, [pc, #252]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d028      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056f8:	4b3a      	ldr	r3, [pc, #232]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005706:	4937      	ldr	r1, [pc, #220]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005716:	d106      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005718:	4b32      	ldr	r3, [pc, #200]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a31      	ldr	r2, [pc, #196]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005722:	60d3      	str	r3, [r2, #12]
 8005724:	e011      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800572a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800572e:	d10c      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f8d8 	bl	80058ec <RCCEx_PLLSAI1_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005740:	7cfb      	ldrb	r3, [r7, #19]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d028      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005756:	4b23      	ldr	r3, [pc, #140]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005764:	491f      	ldr	r1, [pc, #124]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005774:	d106      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005776:	4b1b      	ldr	r3, [pc, #108]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	4a1a      	ldr	r2, [pc, #104]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005780:	60d3      	str	r3, [r2, #12]
 8005782:	e011      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005788:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800578c:	d10c      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f8a9 	bl	80058ec <RCCEx_PLLSAI1_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d02b      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057b4:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c2:	4908      	ldr	r1, [pc, #32]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057d2:	d109      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d4:	4b03      	ldr	r3, [pc, #12]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4a02      	ldr	r2, [pc, #8]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057de:	60d3      	str	r3, [r2, #12]
 80057e0:	e014      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057f0:	d10c      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2101      	movs	r1, #1
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f877 	bl	80058ec <RCCEx_PLLSAI1_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005802:	7cfb      	ldrb	r3, [r7, #19]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d02f      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005818:	4b2b      	ldr	r3, [pc, #172]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005826:	4928      	ldr	r1, [pc, #160]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005836:	d10d      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	2102      	movs	r1, #2
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f854 	bl	80058ec <RCCEx_PLLSAI1_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d014      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	74bb      	strb	r3, [r7, #18]
 8005852:	e011      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800585c:	d10c      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3320      	adds	r3, #32
 8005862:	2102      	movs	r1, #2
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f935 	bl	8005ad4 <RCCEx_PLLSAI2_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005884:	4b10      	ldr	r3, [pc, #64]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005892:	490d      	ldr	r1, [pc, #52]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058a6:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b6:	4904      	ldr	r1, [pc, #16]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058be:	7cbb      	ldrb	r3, [r7, #18]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021000 	.word	0x40021000

080058cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80058d0:	4b05      	ldr	r3, [pc, #20]	@ (80058e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a04      	ldr	r2, [pc, #16]	@ (80058e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058d6:	f043 0304 	orr.w	r3, r3, #4
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40021000 	.word	0x40021000

080058ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058fa:	4b75      	ldr	r3, [pc, #468]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d018      	beq.n	8005938 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005906:	4b72      	ldr	r3, [pc, #456]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f003 0203 	and.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d10d      	bne.n	8005932 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
       ||
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800591e:	4b6c      	ldr	r3, [pc, #432]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
       ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d047      	beq.n	80059c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
 8005936:	e044      	b.n	80059c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b03      	cmp	r3, #3
 800593e:	d018      	beq.n	8005972 <RCCEx_PLLSAI1_Config+0x86>
 8005940:	2b03      	cmp	r3, #3
 8005942:	d825      	bhi.n	8005990 <RCCEx_PLLSAI1_Config+0xa4>
 8005944:	2b01      	cmp	r3, #1
 8005946:	d002      	beq.n	800594e <RCCEx_PLLSAI1_Config+0x62>
 8005948:	2b02      	cmp	r3, #2
 800594a:	d009      	beq.n	8005960 <RCCEx_PLLSAI1_Config+0x74>
 800594c:	e020      	b.n	8005990 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800594e:	4b60      	ldr	r3, [pc, #384]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d11d      	bne.n	8005996 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800595e:	e01a      	b.n	8005996 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005960:	4b5b      	ldr	r3, [pc, #364]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005968:	2b00      	cmp	r3, #0
 800596a:	d116      	bne.n	800599a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005970:	e013      	b.n	800599a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005972:	4b57      	ldr	r3, [pc, #348]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800597e:	4b54      	ldr	r3, [pc, #336]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800598e:	e006      	b.n	800599e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e004      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005996:	bf00      	nop
 8005998:	e002      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800599e:	bf00      	nop
    }

    if(status == HAL_OK)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10d      	bne.n	80059c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059a6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6819      	ldr	r1, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	430b      	orrs	r3, r1
 80059bc:	4944      	ldr	r1, [pc, #272]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d17d      	bne.n	8005ac4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059c8:	4b41      	ldr	r3, [pc, #260]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a40      	ldr	r2, [pc, #256]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d4:	f7fd f8a4 	bl	8002b20 <HAL_GetTick>
 80059d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059da:	e009      	b.n	80059f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059dc:	f7fd f8a0 	bl	8002b20 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d902      	bls.n	80059f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	73fb      	strb	r3, [r7, #15]
        break;
 80059ee:	e005      	b.n	80059fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059f0:	4b37      	ldr	r3, [pc, #220]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1ef      	bne.n	80059dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d160      	bne.n	8005ac4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d111      	bne.n	8005a2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a08:	4b31      	ldr	r3, [pc, #196]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6892      	ldr	r2, [r2, #8]
 8005a18:	0211      	lsls	r1, r2, #8
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68d2      	ldr	r2, [r2, #12]
 8005a1e:	0912      	lsrs	r2, r2, #4
 8005a20:	0452      	lsls	r2, r2, #17
 8005a22:	430a      	orrs	r2, r1
 8005a24:	492a      	ldr	r1, [pc, #168]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]
 8005a2a:	e027      	b.n	8005a7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d112      	bne.n	8005a58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a32:	4b27      	ldr	r3, [pc, #156]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6892      	ldr	r2, [r2, #8]
 8005a42:	0211      	lsls	r1, r2, #8
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6912      	ldr	r2, [r2, #16]
 8005a48:	0852      	lsrs	r2, r2, #1
 8005a4a:	3a01      	subs	r2, #1
 8005a4c:	0552      	lsls	r2, r2, #21
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	491f      	ldr	r1, [pc, #124]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]
 8005a56:	e011      	b.n	8005a7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a58:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6892      	ldr	r2, [r2, #8]
 8005a68:	0211      	lsls	r1, r2, #8
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6952      	ldr	r2, [r2, #20]
 8005a6e:	0852      	lsrs	r2, r2, #1
 8005a70:	3a01      	subs	r2, #1
 8005a72:	0652      	lsls	r2, r2, #25
 8005a74:	430a      	orrs	r2, r1
 8005a76:	4916      	ldr	r1, [pc, #88]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a7c:	4b14      	ldr	r3, [pc, #80]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a13      	ldr	r2, [pc, #76]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a88:	f7fd f84a 	bl	8002b20 <HAL_GetTick>
 8005a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a8e:	e009      	b.n	8005aa4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a90:	f7fd f846 	bl	8002b20 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d902      	bls.n	8005aa4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8005aa2:	e005      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0ef      	beq.n	8005a90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ab6:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	4904      	ldr	r1, [pc, #16]	@ (8005ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000

08005ad4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d018      	beq.n	8005b20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005aee:	4b67      	ldr	r3, [pc, #412]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f003 0203 	and.w	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d10d      	bne.n	8005b1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
       ||
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b06:	4b61      	ldr	r3, [pc, #388]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	091b      	lsrs	r3, r3, #4
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
       ||
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d047      	beq.n	8005baa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
 8005b1e:	e044      	b.n	8005baa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d018      	beq.n	8005b5a <RCCEx_PLLSAI2_Config+0x86>
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d825      	bhi.n	8005b78 <RCCEx_PLLSAI2_Config+0xa4>
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d002      	beq.n	8005b36 <RCCEx_PLLSAI2_Config+0x62>
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d009      	beq.n	8005b48 <RCCEx_PLLSAI2_Config+0x74>
 8005b34:	e020      	b.n	8005b78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b36:	4b55      	ldr	r3, [pc, #340]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11d      	bne.n	8005b7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b46:	e01a      	b.n	8005b7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b48:	4b50      	ldr	r3, [pc, #320]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d116      	bne.n	8005b82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b58:	e013      	b.n	8005b82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b66:	4b49      	ldr	r3, [pc, #292]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b76:	e006      	b.n	8005b86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7c:	e004      	b.n	8005b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b7e:	bf00      	nop
 8005b80:	e002      	b.n	8005b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b86:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10d      	bne.n	8005baa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	4939      	ldr	r1, [pc, #228]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d167      	bne.n	8005c80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bb0:	4b36      	ldr	r3, [pc, #216]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a35      	ldr	r2, [pc, #212]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bbc:	f7fc ffb0 	bl	8002b20 <HAL_GetTick>
 8005bc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bc2:	e009      	b.n	8005bd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bc4:	f7fc ffac 	bl	8002b20 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d902      	bls.n	8005bd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	73fb      	strb	r3, [r7, #15]
        break;
 8005bd6:	e005      	b.n	8005be4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ef      	bne.n	8005bc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d14a      	bne.n	8005c80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d111      	bne.n	8005c14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf0:	4b26      	ldr	r3, [pc, #152]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6892      	ldr	r2, [r2, #8]
 8005c00:	0211      	lsls	r1, r2, #8
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68d2      	ldr	r2, [r2, #12]
 8005c06:	0912      	lsrs	r2, r2, #4
 8005c08:	0452      	lsls	r2, r2, #17
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	491f      	ldr	r1, [pc, #124]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	614b      	str	r3, [r1, #20]
 8005c12:	e011      	b.n	8005c38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c14:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6892      	ldr	r2, [r2, #8]
 8005c24:	0211      	lsls	r1, r2, #8
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6912      	ldr	r2, [r2, #16]
 8005c2a:	0852      	lsrs	r2, r2, #1
 8005c2c:	3a01      	subs	r2, #1
 8005c2e:	0652      	lsls	r2, r2, #25
 8005c30:	430a      	orrs	r2, r1
 8005c32:	4916      	ldr	r1, [pc, #88]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c38:	4b14      	ldr	r3, [pc, #80]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a13      	ldr	r2, [pc, #76]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fc ff6c 	bl	8002b20 <HAL_GetTick>
 8005c48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c4a:	e009      	b.n	8005c60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c4c:	f7fc ff68 	bl	8002b20 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d902      	bls.n	8005c60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	73fb      	strb	r3, [r7, #15]
          break;
 8005c5e:	e005      	b.n	8005c6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c60:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ef      	beq.n	8005c4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c72:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	4904      	ldr	r1, [pc, #16]	@ (8005c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000

08005c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e095      	b.n	8005dce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d108      	bne.n	8005cbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb2:	d009      	beq.n	8005cc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	61da      	str	r2, [r3, #28]
 8005cba:	e005      	b.n	8005cc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fc f918 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d08:	d902      	bls.n	8005d10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	e002      	b.n	8005d16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d1e:	d007      	beq.n	8005d30 <HAL_SPI_Init+0xa0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d28:	d002      	beq.n	8005d30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d72:	ea42 0103 	orr.w	r1, r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	0c1b      	lsrs	r3, r3, #16
 8005d8c:	f003 0204 	and.w	r2, r3, #4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005dac:	ea42 0103 	orr.w	r1, r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e040      	b.n	8005e6a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fc f8d1 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2224      	movs	r2, #36	@ 0x24
 8005e02:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fb69 	bl	80064f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8ae 	bl	8005f84 <UART_SetConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e01b      	b.n	8005e6a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fbe8 	bl	8006638 <UART_CheckIdleState>
 8005e68:	4603      	mov	r3, r0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b08a      	sub	sp, #40	@ 0x28
 8005e76:	af02      	add	r7, sp, #8
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	603b      	str	r3, [r7, #0]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d177      	bne.n	8005f7a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_Transmit+0x24>
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e070      	b.n	8005f7c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2221      	movs	r2, #33	@ 0x21
 8005ea6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ea8:	f7fc fe3a 	bl	8002b20 <HAL_GetTick>
 8005eac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	88fa      	ldrh	r2, [r7, #6]
 8005eb2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec6:	d108      	bne.n	8005eda <HAL_UART_Transmit+0x68>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	e003      	b.n	8005ee2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ee2:	e02f      	b.n	8005f44 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	2180      	movs	r1, #128	@ 0x80
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fc4a 	bl	8006788 <UART_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e03b      	b.n	8005f7c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	881a      	ldrh	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f16:	b292      	uxth	r2, r2
 8005f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e007      	b.n	8005f32 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	781a      	ldrb	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1c9      	bne.n	8005ee4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2140      	movs	r1, #64	@ 0x40
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fc14 	bl	8006788 <UART_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d004      	beq.n	8005f70 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e005      	b.n	8005f7c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e000      	b.n	8005f7c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
  }
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f88:	b08a      	sub	sp, #40	@ 0x28
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4ba4      	ldr	r3, [pc, #656]	@ (8006244 <UART_SetConfig+0x2c0>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a99      	ldr	r2, [pc, #612]	@ (8006248 <UART_SetConfig+0x2c4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fec:	4313      	orrs	r3, r2
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a90      	ldr	r2, [pc, #576]	@ (800624c <UART_SetConfig+0x2c8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d126      	bne.n	800605c <UART_SetConfig+0xd8>
 800600e:	4b90      	ldr	r3, [pc, #576]	@ (8006250 <UART_SetConfig+0x2cc>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b03      	cmp	r3, #3
 800601a:	d81b      	bhi.n	8006054 <UART_SetConfig+0xd0>
 800601c:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <UART_SetConfig+0xa0>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006035 	.word	0x08006035
 8006028:	08006045 	.word	0x08006045
 800602c:	0800603d 	.word	0x0800603d
 8006030:	0800604d 	.word	0x0800604d
 8006034:	2301      	movs	r3, #1
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800603a:	e116      	b.n	800626a <UART_SetConfig+0x2e6>
 800603c:	2302      	movs	r3, #2
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006042:	e112      	b.n	800626a <UART_SetConfig+0x2e6>
 8006044:	2304      	movs	r3, #4
 8006046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800604a:	e10e      	b.n	800626a <UART_SetConfig+0x2e6>
 800604c:	2308      	movs	r3, #8
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006052:	e10a      	b.n	800626a <UART_SetConfig+0x2e6>
 8006054:	2310      	movs	r3, #16
 8006056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800605a:	e106      	b.n	800626a <UART_SetConfig+0x2e6>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a7c      	ldr	r2, [pc, #496]	@ (8006254 <UART_SetConfig+0x2d0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d138      	bne.n	80060d8 <UART_SetConfig+0x154>
 8006066:	4b7a      	ldr	r3, [pc, #488]	@ (8006250 <UART_SetConfig+0x2cc>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606c:	f003 030c 	and.w	r3, r3, #12
 8006070:	2b0c      	cmp	r3, #12
 8006072:	d82d      	bhi.n	80060d0 <UART_SetConfig+0x14c>
 8006074:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <UART_SetConfig+0xf8>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060d1 	.word	0x080060d1
 8006084:	080060d1 	.word	0x080060d1
 8006088:	080060d1 	.word	0x080060d1
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060d1 	.word	0x080060d1
 8006094:	080060d1 	.word	0x080060d1
 8006098:	080060d1 	.word	0x080060d1
 800609c:	080060b9 	.word	0x080060b9
 80060a0:	080060d1 	.word	0x080060d1
 80060a4:	080060d1 	.word	0x080060d1
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b6:	e0d8      	b.n	800626a <UART_SetConfig+0x2e6>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060be:	e0d4      	b.n	800626a <UART_SetConfig+0x2e6>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c6:	e0d0      	b.n	800626a <UART_SetConfig+0x2e6>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ce:	e0cc      	b.n	800626a <UART_SetConfig+0x2e6>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d6:	e0c8      	b.n	800626a <UART_SetConfig+0x2e6>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5e      	ldr	r2, [pc, #376]	@ (8006258 <UART_SetConfig+0x2d4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d125      	bne.n	800612e <UART_SetConfig+0x1aa>
 80060e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006250 <UART_SetConfig+0x2cc>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060ec:	2b30      	cmp	r3, #48	@ 0x30
 80060ee:	d016      	beq.n	800611e <UART_SetConfig+0x19a>
 80060f0:	2b30      	cmp	r3, #48	@ 0x30
 80060f2:	d818      	bhi.n	8006126 <UART_SetConfig+0x1a2>
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d00a      	beq.n	800610e <UART_SetConfig+0x18a>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d814      	bhi.n	8006126 <UART_SetConfig+0x1a2>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <UART_SetConfig+0x182>
 8006100:	2b10      	cmp	r3, #16
 8006102:	d008      	beq.n	8006116 <UART_SetConfig+0x192>
 8006104:	e00f      	b.n	8006126 <UART_SetConfig+0x1a2>
 8006106:	2300      	movs	r3, #0
 8006108:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610c:	e0ad      	b.n	800626a <UART_SetConfig+0x2e6>
 800610e:	2302      	movs	r3, #2
 8006110:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006114:	e0a9      	b.n	800626a <UART_SetConfig+0x2e6>
 8006116:	2304      	movs	r3, #4
 8006118:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611c:	e0a5      	b.n	800626a <UART_SetConfig+0x2e6>
 800611e:	2308      	movs	r3, #8
 8006120:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006124:	e0a1      	b.n	800626a <UART_SetConfig+0x2e6>
 8006126:	2310      	movs	r3, #16
 8006128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612c:	e09d      	b.n	800626a <UART_SetConfig+0x2e6>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a4a      	ldr	r2, [pc, #296]	@ (800625c <UART_SetConfig+0x2d8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d125      	bne.n	8006184 <UART_SetConfig+0x200>
 8006138:	4b45      	ldr	r3, [pc, #276]	@ (8006250 <UART_SetConfig+0x2cc>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006142:	2bc0      	cmp	r3, #192	@ 0xc0
 8006144:	d016      	beq.n	8006174 <UART_SetConfig+0x1f0>
 8006146:	2bc0      	cmp	r3, #192	@ 0xc0
 8006148:	d818      	bhi.n	800617c <UART_SetConfig+0x1f8>
 800614a:	2b80      	cmp	r3, #128	@ 0x80
 800614c:	d00a      	beq.n	8006164 <UART_SetConfig+0x1e0>
 800614e:	2b80      	cmp	r3, #128	@ 0x80
 8006150:	d814      	bhi.n	800617c <UART_SetConfig+0x1f8>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <UART_SetConfig+0x1d8>
 8006156:	2b40      	cmp	r3, #64	@ 0x40
 8006158:	d008      	beq.n	800616c <UART_SetConfig+0x1e8>
 800615a:	e00f      	b.n	800617c <UART_SetConfig+0x1f8>
 800615c:	2300      	movs	r3, #0
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006162:	e082      	b.n	800626a <UART_SetConfig+0x2e6>
 8006164:	2302      	movs	r3, #2
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616a:	e07e      	b.n	800626a <UART_SetConfig+0x2e6>
 800616c:	2304      	movs	r3, #4
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006172:	e07a      	b.n	800626a <UART_SetConfig+0x2e6>
 8006174:	2308      	movs	r3, #8
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617a:	e076      	b.n	800626a <UART_SetConfig+0x2e6>
 800617c:	2310      	movs	r3, #16
 800617e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006182:	e072      	b.n	800626a <UART_SetConfig+0x2e6>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a35      	ldr	r2, [pc, #212]	@ (8006260 <UART_SetConfig+0x2dc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d12a      	bne.n	80061e4 <UART_SetConfig+0x260>
 800618e:	4b30      	ldr	r3, [pc, #192]	@ (8006250 <UART_SetConfig+0x2cc>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006194:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619c:	d01a      	beq.n	80061d4 <UART_SetConfig+0x250>
 800619e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061a2:	d81b      	bhi.n	80061dc <UART_SetConfig+0x258>
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a8:	d00c      	beq.n	80061c4 <UART_SetConfig+0x240>
 80061aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ae:	d815      	bhi.n	80061dc <UART_SetConfig+0x258>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <UART_SetConfig+0x238>
 80061b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b8:	d008      	beq.n	80061cc <UART_SetConfig+0x248>
 80061ba:	e00f      	b.n	80061dc <UART_SetConfig+0x258>
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c2:	e052      	b.n	800626a <UART_SetConfig+0x2e6>
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ca:	e04e      	b.n	800626a <UART_SetConfig+0x2e6>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d2:	e04a      	b.n	800626a <UART_SetConfig+0x2e6>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061da:	e046      	b.n	800626a <UART_SetConfig+0x2e6>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e2:	e042      	b.n	800626a <UART_SetConfig+0x2e6>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	@ (8006248 <UART_SetConfig+0x2c4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d13a      	bne.n	8006264 <UART_SetConfig+0x2e0>
 80061ee:	4b18      	ldr	r3, [pc, #96]	@ (8006250 <UART_SetConfig+0x2cc>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061fc:	d01a      	beq.n	8006234 <UART_SetConfig+0x2b0>
 80061fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006202:	d81b      	bhi.n	800623c <UART_SetConfig+0x2b8>
 8006204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006208:	d00c      	beq.n	8006224 <UART_SetConfig+0x2a0>
 800620a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800620e:	d815      	bhi.n	800623c <UART_SetConfig+0x2b8>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <UART_SetConfig+0x298>
 8006214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006218:	d008      	beq.n	800622c <UART_SetConfig+0x2a8>
 800621a:	e00f      	b.n	800623c <UART_SetConfig+0x2b8>
 800621c:	2300      	movs	r3, #0
 800621e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006222:	e022      	b.n	800626a <UART_SetConfig+0x2e6>
 8006224:	2302      	movs	r3, #2
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622a:	e01e      	b.n	800626a <UART_SetConfig+0x2e6>
 800622c:	2304      	movs	r3, #4
 800622e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006232:	e01a      	b.n	800626a <UART_SetConfig+0x2e6>
 8006234:	2308      	movs	r3, #8
 8006236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800623a:	e016      	b.n	800626a <UART_SetConfig+0x2e6>
 800623c:	2310      	movs	r3, #16
 800623e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006242:	e012      	b.n	800626a <UART_SetConfig+0x2e6>
 8006244:	efff69f3 	.word	0xefff69f3
 8006248:	40008000 	.word	0x40008000
 800624c:	40013800 	.word	0x40013800
 8006250:	40021000 	.word	0x40021000
 8006254:	40004400 	.word	0x40004400
 8006258:	40004800 	.word	0x40004800
 800625c:	40004c00 	.word	0x40004c00
 8006260:	40005000 	.word	0x40005000
 8006264:	2310      	movs	r3, #16
 8006266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a9f      	ldr	r2, [pc, #636]	@ (80064ec <UART_SetConfig+0x568>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d17a      	bne.n	800636a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006274:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006278:	2b08      	cmp	r3, #8
 800627a:	d824      	bhi.n	80062c6 <UART_SetConfig+0x342>
 800627c:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x300>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062c7 	.word	0x080062c7
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062c7 	.word	0x080062c7
 8006294:	080062b7 	.word	0x080062b7
 8006298:	080062c7 	.word	0x080062c7
 800629c:	080062c7 	.word	0x080062c7
 80062a0:	080062c7 	.word	0x080062c7
 80062a4:	080062bf 	.word	0x080062bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fe ff9a 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 80062ac:	61f8      	str	r0, [r7, #28]
        break;
 80062ae:	e010      	b.n	80062d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b8f      	ldr	r3, [pc, #572]	@ (80064f0 <UART_SetConfig+0x56c>)
 80062b2:	61fb      	str	r3, [r7, #28]
        break;
 80062b4:	e00d      	b.n	80062d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fe fefb 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 80062ba:	61f8      	str	r0, [r7, #28]
        break;
 80062bc:	e009      	b.n	80062d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062c2:	61fb      	str	r3, [r7, #28]
        break;
 80062c4:	e005      	b.n	80062d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80fb 	beq.w	80064d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	4413      	add	r3, r2
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d305      	bcc.n	80062f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d903      	bls.n	80062fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062fc:	e0e8      	b.n	80064d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	2200      	movs	r2, #0
 8006302:	461c      	mov	r4, r3
 8006304:	4615      	mov	r5, r2
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	022b      	lsls	r3, r5, #8
 8006310:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006314:	0222      	lsls	r2, r4, #8
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	6849      	ldr	r1, [r1, #4]
 800631a:	0849      	lsrs	r1, r1, #1
 800631c:	2000      	movs	r0, #0
 800631e:	4688      	mov	r8, r1
 8006320:	4681      	mov	r9, r0
 8006322:	eb12 0a08 	adds.w	sl, r2, r8
 8006326:	eb43 0b09 	adc.w	fp, r3, r9
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006338:	4650      	mov	r0, sl
 800633a:	4659      	mov	r1, fp
 800633c:	f7fa fca4 	bl	8000c88 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4613      	mov	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800634e:	d308      	bcc.n	8006362 <UART_SetConfig+0x3de>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006356:	d204      	bcs.n	8006362 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	60da      	str	r2, [r3, #12]
 8006360:	e0b6      	b.n	80064d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006368:	e0b2      	b.n	80064d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006372:	d15e      	bne.n	8006432 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006374:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006378:	2b08      	cmp	r3, #8
 800637a:	d828      	bhi.n	80063ce <UART_SetConfig+0x44a>
 800637c:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <UART_SetConfig+0x400>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063cf 	.word	0x080063cf
 8006394:	080063bf 	.word	0x080063bf
 8006398:	080063cf 	.word	0x080063cf
 800639c:	080063cf 	.word	0x080063cf
 80063a0:	080063cf 	.word	0x080063cf
 80063a4:	080063c7 	.word	0x080063c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a8:	f7fe ff1a 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 80063ac:	61f8      	str	r0, [r7, #28]
        break;
 80063ae:	e014      	b.n	80063da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b0:	f7fe ff2c 	bl	800520c <HAL_RCC_GetPCLK2Freq>
 80063b4:	61f8      	str	r0, [r7, #28]
        break;
 80063b6:	e010      	b.n	80063da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b4d      	ldr	r3, [pc, #308]	@ (80064f0 <UART_SetConfig+0x56c>)
 80063ba:	61fb      	str	r3, [r7, #28]
        break;
 80063bc:	e00d      	b.n	80063da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063be:	f7fe fe77 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 80063c2:	61f8      	str	r0, [r7, #28]
        break;
 80063c4:	e009      	b.n	80063da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ca:	61fb      	str	r3, [r7, #28]
        break;
 80063cc:	e005      	b.n	80063da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d077      	beq.n	80064d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	005a      	lsls	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	441a      	add	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b0f      	cmp	r3, #15
 80063fa:	d916      	bls.n	800642a <UART_SetConfig+0x4a6>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006402:	d212      	bcs.n	800642a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f023 030f 	bic.w	r3, r3, #15
 800640c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	b29b      	uxth	r3, r3
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	b29a      	uxth	r2, r3
 800641a:	8afb      	ldrh	r3, [r7, #22]
 800641c:	4313      	orrs	r3, r2
 800641e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	8afa      	ldrh	r2, [r7, #22]
 8006426:	60da      	str	r2, [r3, #12]
 8006428:	e052      	b.n	80064d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006430:	e04e      	b.n	80064d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006432:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006436:	2b08      	cmp	r3, #8
 8006438:	d827      	bhi.n	800648a <UART_SetConfig+0x506>
 800643a:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <UART_SetConfig+0x4bc>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	08006465 	.word	0x08006465
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006475 	.word	0x08006475
 800644c:	0800648b 	.word	0x0800648b
 8006450:	0800647b 	.word	0x0800647b
 8006454:	0800648b 	.word	0x0800648b
 8006458:	0800648b 	.word	0x0800648b
 800645c:	0800648b 	.word	0x0800648b
 8006460:	08006483 	.word	0x08006483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006464:	f7fe febc 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 8006468:	61f8      	str	r0, [r7, #28]
        break;
 800646a:	e014      	b.n	8006496 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7fe fece 	bl	800520c <HAL_RCC_GetPCLK2Freq>
 8006470:	61f8      	str	r0, [r7, #28]
        break;
 8006472:	e010      	b.n	8006496 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006474:	4b1e      	ldr	r3, [pc, #120]	@ (80064f0 <UART_SetConfig+0x56c>)
 8006476:	61fb      	str	r3, [r7, #28]
        break;
 8006478:	e00d      	b.n	8006496 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647a:	f7fe fe19 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 800647e:	61f8      	str	r0, [r7, #28]
        break;
 8006480:	e009      	b.n	8006496 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006486:	61fb      	str	r3, [r7, #28]
        break;
 8006488:	e005      	b.n	8006496 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006494:	bf00      	nop
    }

    if (pclk != 0U)
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d019      	beq.n	80064d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	085a      	lsrs	r2, r3, #1
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	441a      	add	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b0f      	cmp	r3, #15
 80064b4:	d909      	bls.n	80064ca <UART_SetConfig+0x546>
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064bc:	d205      	bcs.n	80064ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60da      	str	r2, [r3, #12]
 80064c8:	e002      	b.n	80064d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80064dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3728      	adds	r7, #40	@ 0x28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ea:	bf00      	nop
 80064ec:	40008000 	.word	0x40008000
 80064f0:	00f42400 	.word	0x00f42400

080064f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01a      	beq.n	800660a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065f2:	d10a      	bne.n	800660a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
  }
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b098      	sub	sp, #96	@ 0x60
 800663c:	af02      	add	r7, sp, #8
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006648:	f7fc fa6a 	bl	8002b20 <HAL_GetTick>
 800664c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b08      	cmp	r3, #8
 800665a:	d12e      	bne.n	80066ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800665c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006664:	2200      	movs	r2, #0
 8006666:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f88c 	bl	8006788 <UART_WaitOnFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d021      	beq.n	80066ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800668a:	653b      	str	r3, [r7, #80]	@ 0x50
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006694:	647b      	str	r3, [r7, #68]	@ 0x44
 8006696:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800669a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e6      	bne.n	8006676 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e062      	b.n	8006780 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d149      	bne.n	800675c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066d0:	2200      	movs	r2, #0
 80066d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f856 	bl	8006788 <UART_WaitOnFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d03c      	beq.n	800675c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	623b      	str	r3, [r7, #32]
   return(result);
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30
 8006702:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e6      	bne.n	80066e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3308      	adds	r3, #8
 800671a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	60fb      	str	r3, [r7, #12]
   return(result);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006734:	61fa      	str	r2, [r7, #28]
 8006736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	69b9      	ldr	r1, [r7, #24]
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	617b      	str	r3, [r7, #20]
   return(result);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e011      	b.n	8006780 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3758      	adds	r7, #88	@ 0x58
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006798:	e04f      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d04b      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a2:	f7fc f9bd 	bl	8002b20 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d302      	bcc.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e04e      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d037      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b80      	cmp	r3, #128	@ 0x80
 80067ce:	d034      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b40      	cmp	r3, #64	@ 0x40
 80067d4:	d031      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d110      	bne.n	8006806 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2208      	movs	r2, #8
 80067ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f838 	bl	8006862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2208      	movs	r2, #8
 80067f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e029      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006814:	d111      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800681e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f81e 	bl	8006862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e00f      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	429a      	cmp	r2, r3
 8006856:	d0a0      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006862:	b480      	push	{r7}
 8006864:	b095      	sub	sp, #84	@ 0x54
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800687e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006888:	643b      	str	r3, [r7, #64]	@ 0x40
 800688a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800688e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e6      	bne.n	800686a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3308      	adds	r3, #8
 80068a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f023 0301 	bic.w	r3, r3, #1
 80068b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3308      	adds	r3, #8
 80068ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e5      	bne.n	800689c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d118      	bne.n	800690a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f023 0310 	bic.w	r3, r3, #16
 80068ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6979      	ldr	r1, [r7, #20]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	613b      	str	r3, [r7, #16]
   return(result);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e6      	bne.n	80068d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800691e:	bf00      	nop
 8006920:	3754      	adds	r7, #84	@ 0x54
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800692a:	b084      	sub	sp, #16
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	f107 001c 	add.w	r0, r7, #28
 8006938:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fa69 	bl	8006e20 <USB_CoreReset>
 800694e:	4603      	mov	r3, r0
 8006950:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006952:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	639a      	str	r2, [r3, #56]	@ 0x38
 8006966:	e005      	b.n	8006974 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006980:	b004      	add	sp, #16
 8006982:	4770      	bx	lr

08006984 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f023 0201 	bic.w	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d115      	bne.n	80069f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069d4:	200a      	movs	r0, #10
 80069d6:	f7fc f8af 	bl	8002b38 <HAL_Delay>
      ms += 10U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	330a      	adds	r3, #10
 80069de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fa0f 	bl	8006e04 <USB_GetMode>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d01e      	beq.n	8006a2a <USB_SetCurrentMode+0x84>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80069f0:	d9f0      	bls.n	80069d4 <USB_SetCurrentMode+0x2e>
 80069f2:	e01a      	b.n	8006a2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d115      	bne.n	8006a26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a06:	200a      	movs	r0, #10
 8006a08:	f7fc f896 	bl	8002b38 <HAL_Delay>
      ms += 10U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	330a      	adds	r3, #10
 8006a10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f9f6 	bl	8006e04 <USB_GetMode>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <USB_SetCurrentMode+0x84>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a22:	d9f0      	bls.n	8006a06 <USB_SetCurrentMode+0x60>
 8006a24:	e001      	b.n	8006a2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e005      	b.n	8006a36 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006a2e:	d101      	bne.n	8006a34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a40:	b084      	sub	sp, #16
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	e009      	b.n	8006a74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3340      	adds	r3, #64	@ 0x40
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3301      	adds	r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b0e      	cmp	r3, #14
 8006a78:	d9f2      	bls.n	8006a60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d11c      	bne.n	8006abc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a90:	f043 0302 	orr.w	r3, r3, #2
 8006a94:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e005      	b.n	8006ac8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ace:	461a      	mov	r2, r3
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ad4:	2103      	movs	r1, #3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f95a 	bl	8006d90 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006adc:	2110      	movs	r1, #16
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8f6 	bl	8006cd0 <USB_FlushTxFifo>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f920 	bl	8006d34 <USB_FlushRxFifo>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b10:	461a      	mov	r2, r3
 8006b12:	2300      	movs	r3, #0
 8006b14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	e043      	b.n	8006bb0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b3e:	d118      	bne.n	8006b72 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b52:	461a      	mov	r2, r3
 8006b54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e013      	b.n	8006b84 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	e008      	b.n	8006b84 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b7e:	461a      	mov	r2, r3
 8006b80:	2300      	movs	r3, #0
 8006b82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	461a      	mov	r2, r3
 8006b92:	2300      	movs	r3, #0
 8006b94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ba8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3301      	adds	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d3b5      	bcc.n	8006b28 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	e043      	b.n	8006c4a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bd8:	d118      	bne.n	8006c0c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bec:	461a      	mov	r2, r3
 8006bee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	e013      	b.n	8006c1e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c02:	461a      	mov	r2, r3
 8006c04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	e008      	b.n	8006c1e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c18:	461a      	mov	r2, r3
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3301      	adds	r3, #1
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c4e:	461a      	mov	r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d3b5      	bcc.n	8006bc2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	f043 0210 	orr.w	r2, r3, #16
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699a      	ldr	r2, [r3, #24]
 8006c88:	4b10      	ldr	r3, [pc, #64]	@ (8006ccc <USB_DevInit+0x28c>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f043 0208 	orr.w	r2, r3, #8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ca4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d107      	bne.n	8006cbc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cb4:	f043 0304 	orr.w	r3, r3, #4
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cc8:	b004      	add	sp, #16
 8006cca:	4770      	bx	lr
 8006ccc:	803c3800 	.word	0x803c3800

08006cd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cea:	d901      	bls.n	8006cf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e01b      	b.n	8006d28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	daf2      	bge.n	8006cde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	019b      	lsls	r3, r3, #6
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d14:	d901      	bls.n	8006d1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e006      	b.n	8006d28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d0f0      	beq.n	8006d08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d4c:	d901      	bls.n	8006d52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e018      	b.n	8006d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	daf2      	bge.n	8006d40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2210      	movs	r2, #16
 8006d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d70:	d901      	bls.n	8006d76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e006      	b.n	8006d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d0f0      	beq.n	8006d64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006db0:	4313      	orrs	r3, r2
 8006db2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ddc:	f023 0303 	bic.w	r3, r3, #3
 8006de0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006df0:	f043 0302 	orr.w	r3, r3, #2
 8006df4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f003 0301 	and.w	r3, r3, #1
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e38:	d901      	bls.n	8006e3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e01b      	b.n	8006e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	daf2      	bge.n	8006e2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f043 0201 	orr.w	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e62:	d901      	bls.n	8006e68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e006      	b.n	8006e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d0f0      	beq.n	8006e56 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <arm_fir_init_f32>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	9c04      	ldr	r4, [sp, #16]
 8006e88:	6082      	str	r2, [r0, #8]
 8006e8a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8006e8e:	3c01      	subs	r4, #1
 8006e90:	440c      	add	r4, r1
 8006e92:	8001      	strh	r1, [r0, #0]
 8006e94:	4605      	mov	r5, r0
 8006e96:	00a2      	lsls	r2, r4, #2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	f001 fa43 	bl	8008326 <memset>
 8006ea0:	6068      	str	r0, [r5, #4]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}

08006ea4 <arm_fir_f32>:
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	ed2d 8b10 	vpush	{d8-d15}
 8006eac:	b08b      	sub	sp, #44	@ 0x2c
 8006eae:	f8b0 8000 	ldrh.w	r8, [r0]
 8006eb2:	9003      	str	r0, [sp, #12]
 8006eb4:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 8006eb8:	461e      	mov	r6, r3
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 8006ec6:	08f3      	lsrs	r3, r6, #3
 8006ec8:	9002      	str	r0, [sp, #8]
 8006eca:	9500      	str	r5, [sp, #0]
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	f000 81f1 	beq.w	80072b4 <arm_fir_f32+0x410>
 8006ed2:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 8006ed6:	f100 0620 	add.w	r6, r0, #32
 8006eda:	9405      	str	r4, [sp, #20]
 8006edc:	0164      	lsls	r4, r4, #5
 8006ede:	4420      	add	r0, r4
 8006ee0:	f008 0a07 	and.w	sl, r8, #7
 8006ee4:	9607      	str	r6, [sp, #28]
 8006ee6:	9006      	str	r0, [sp, #24]
 8006ee8:	469c      	mov	ip, r3
 8006eea:	4650      	mov	r0, sl
 8006eec:	4623      	mov	r3, r4
 8006eee:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ef2:	f8cd 8020 	str.w	r8, [sp, #32]
 8006ef6:	1937      	adds	r7, r6, r4
 8006ef8:	f109 0b1c 	add.w	fp, r9, #28
 8006efc:	f8dd e014 	ldr.w	lr, [sp, #20]
 8006f00:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f02:	f8cd 9014 	str.w	r9, [sp, #20]
 8006f06:	f101 0620 	add.w	r6, r1, #32
 8006f0a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8006f0e:	9106      	str	r1, [sp, #24]
 8006f10:	3520      	adds	r5, #32
 8006f12:	f102 0420 	add.w	r4, r2, #32
 8006f16:	4698      	mov	r8, r3
 8006f18:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8006f1c:	f845 3c20 	str.w	r3, [r5, #-32]
 8006f20:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8006f24:	f845 3c1c 	str.w	r3, [r5, #-28]
 8006f28:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8006f2c:	f845 3c18 	str.w	r3, [r5, #-24]
 8006f30:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8006f34:	f845 3c14 	str.w	r3, [r5, #-20]
 8006f38:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8006f3c:	f845 3c10 	str.w	r3, [r5, #-16]
 8006f40:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8006f44:	f845 3c0c 	str.w	r3, [r5, #-12]
 8006f48:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8006f4c:	f845 3c08 	str.w	r3, [r5, #-8]
 8006f50:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006f54:	f845 3c04 	str.w	r3, [r5, #-4]
 8006f58:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 8006f5c:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 8006f60:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 8006f64:	ed5b 0a04 	vldr	s1, [fp, #-16]
 8006f68:	ed1b 0a03 	vldr	s0, [fp, #-12]
 8006f6c:	ed1b 8a02 	vldr	s16, [fp, #-8]
 8006f70:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8006f74:	eddf 6af5 	vldr	s13, [pc, #980]	@ 800734c <arm_fir_f32+0x4a8>
 8006f78:	465a      	mov	r2, fp
 8006f7a:	f1be 0f00 	cmp.w	lr, #0
 8006f7e:	f000 81fe 	beq.w	800737e <arm_fir_f32+0x4da>
 8006f82:	f10b 0120 	add.w	r1, fp, #32
 8006f86:	eef0 ba66 	vmov.f32	s23, s13
 8006f8a:	eeb0 6a66 	vmov.f32	s12, s13
 8006f8e:	eeb0 9a66 	vmov.f32	s18, s13
 8006f92:	eef0 9a66 	vmov.f32	s19, s13
 8006f96:	eeb0 aa66 	vmov.f32	s20, s13
 8006f9a:	eef0 aa66 	vmov.f32	s21, s13
 8006f9e:	eeb0 ba66 	vmov.f32	s22, s13
 8006fa2:	460a      	mov	r2, r1
 8006fa4:	4653      	mov	r3, sl
 8006fa6:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 8006faa:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 8006fae:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 8006fb2:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 8006fb6:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 8006fba:	ed53 ca04 	vldr	s25, [r3, #-16]
 8006fbe:	ed53 2a03 	vldr	s5, [r3, #-12]
 8006fc2:	ed13 4a02 	vldr	s8, [r3, #-8]
 8006fc6:	ed13 5a01 	vldr	s10, [r3, #-4]
 8006fca:	ee67 fa02 	vmul.f32	s31, s14, s4
 8006fce:	ee27 da21 	vmul.f32	s26, s14, s3
 8006fd2:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 8006fd6:	ee27 ca01 	vmul.f32	s24, s14, s2
 8006fda:	ee27 3a20 	vmul.f32	s6, s14, s1
 8006fde:	ee67 3a00 	vmul.f32	s7, s14, s0
 8006fe2:	ee67 5a08 	vmul.f32	s11, s14, s16
 8006fe6:	ee27 fa28 	vmul.f32	s30, s14, s17
 8006fea:	ee67 7a24 	vmul.f32	s15, s14, s9
 8006fee:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8006ff2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8006ff6:	ee6e faa1 	vmul.f32	s31, s29, s3
 8006ffa:	ee2e da81 	vmul.f32	s26, s29, s2
 8006ffe:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 8007002:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007006:	ee73 9a29 	vadd.f32	s19, s6, s19
 800700a:	ee2e caa0 	vmul.f32	s24, s29, s1
 800700e:	ee2e 3a80 	vmul.f32	s6, s29, s0
 8007012:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007016:	ee35 6a86 	vadd.f32	s12, s11, s12
 800701a:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800701e:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8007022:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702a:	ee24 faae 	vmul.f32	s30, s9, s29
 800702e:	ee6e ea82 	vmul.f32	s29, s29, s4
 8007032:	ee2e 7a01 	vmul.f32	s14, s28, s2
 8007036:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800703a:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 800703e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007042:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007046:	ee2e da20 	vmul.f32	s26, s28, s1
 800704a:	ee2e ca00 	vmul.f32	s24, s28, s0
 800704e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007052:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007056:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800705a:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800705e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007062:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007066:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800706a:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800706e:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8007072:	ee2e ea21 	vmul.f32	s28, s28, s3
 8007076:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800707a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800707e:	ed52 0a04 	vldr	s1, [r2, #-16]
 8007082:	ee2d da80 	vmul.f32	s26, s27, s0
 8007086:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800708a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800708e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007092:	ee2d ca88 	vmul.f32	s24, s27, s16
 8007096:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800709a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800709e:	ee35 6a86 	vadd.f32	s12, s11, s12
 80070a2:	ee64 3aad 	vmul.f32	s7, s9, s27
 80070a6:	ee62 5a2d 	vmul.f32	s11, s4, s27
 80070aa:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80070ae:	ee7e 7a27 	vadd.f32	s15, s28, s15
 80070b2:	ee21 faad 	vmul.f32	s30, s3, s27
 80070b6:	ee6d da81 	vmul.f32	s27, s27, s2
 80070ba:	ee6c fa80 	vmul.f32	s31, s25, s0
 80070be:	ee36 ba8b 	vadd.f32	s22, s13, s22
 80070c2:	ed12 0a03 	vldr	s0, [r2, #-12]
 80070c6:	ee3d da2a 	vadd.f32	s26, s26, s21
 80070ca:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80070ce:	ee6c aa88 	vmul.f32	s21, s25, s16
 80070d2:	ee2c caa8 	vmul.f32	s24, s25, s17
 80070d6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80070da:	ee33 9a89 	vadd.f32	s18, s7, s18
 80070de:	ee24 3aac 	vmul.f32	s6, s9, s25
 80070e2:	ee62 3a2c 	vmul.f32	s7, s4, s25
 80070e6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80070ea:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80070ee:	ee61 5aac 	vmul.f32	s11, s3, s25
 80070f2:	ee21 fa2c 	vmul.f32	s30, s2, s25
 80070f6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80070fa:	ee6c caa0 	vmul.f32	s25, s25, s1
 80070fe:	ee62 ea88 	vmul.f32	s29, s5, s16
 8007102:	ee3a da8d 	vadd.f32	s26, s21, s26
 8007106:	ed12 8a02 	vldr	s16, [r2, #-8]
 800710a:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800710e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8007112:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007116:	ee73 9a29 	vadd.f32	s19, s6, s19
 800711a:	ee24 caa2 	vmul.f32	s24, s9, s5
 800711e:	ee22 3a22 	vmul.f32	s6, s4, s5
 8007122:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007126:	ee35 6a86 	vadd.f32	s12, s11, s12
 800712a:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800712e:	ee61 5a22 	vmul.f32	s11, s2, s5
 8007132:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007136:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800713a:	ee20 faa2 	vmul.f32	s30, s1, s5
 800713e:	ee62 2a80 	vmul.f32	s5, s5, s0
 8007142:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8007146:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800714a:	ee24 ba28 	vmul.f32	s22, s8, s17
 800714e:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8007152:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007156:	ee24 da84 	vmul.f32	s26, s9, s8
 800715a:	ee22 ca04 	vmul.f32	s24, s4, s8
 800715e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007162:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007166:	ee21 3a84 	vmul.f32	s6, s3, s8
 800716a:	ee61 3a04 	vmul.f32	s7, s2, s8
 800716e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007172:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007176:	ee60 5a84 	vmul.f32	s11, s1, s8
 800717a:	ee20 7a04 	vmul.f32	s14, s0, s8
 800717e:	ee64 6a08 	vmul.f32	s13, s8, s16
 8007182:	ed52 8a01 	vldr	s17, [r2, #-4]
 8007186:	ee73 9a29 	vadd.f32	s19, s6, s19
 800718a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800718e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007192:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8007196:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800719a:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800719e:	ee64 4a85 	vmul.f32	s9, s9, s10
 80071a2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80071a6:	ee22 4a05 	vmul.f32	s8, s4, s10
 80071aa:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80071ae:	ee61 2a85 	vmul.f32	s5, s3, s10
 80071b2:	ee21 3a05 	vmul.f32	s6, s2, s10
 80071b6:	ee60 3a85 	vmul.f32	s7, s1, s10
 80071ba:	ee60 5a05 	vmul.f32	s11, s0, s10
 80071be:	ee68 ba05 	vmul.f32	s23, s16, s10
 80071c2:	ee65 7a28 	vmul.f32	s15, s10, s17
 80071c6:	3320      	adds	r3, #32
 80071c8:	429f      	cmp	r7, r3
 80071ca:	ee34 ba8b 	vadd.f32	s22, s9, s22
 80071ce:	ee74 aa2a 	vadd.f32	s21, s8, s21
 80071d2:	ee32 aa8a 	vadd.f32	s20, s5, s20
 80071d6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80071da:	ee33 9a89 	vadd.f32	s18, s7, s18
 80071de:	ee35 6a86 	vadd.f32	s12, s11, s12
 80071e2:	ee7b ba87 	vadd.f32	s23, s23, s14
 80071e6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80071ea:	f102 0220 	add.w	r2, r2, #32
 80071ee:	f47f aeda 	bne.w	8006fa6 <arm_fir_f32+0x102>
 80071f2:	eb0b 0208 	add.w	r2, fp, r8
 80071f6:	46cb      	mov	fp, r9
 80071f8:	b3a0      	cbz	r0, 8007264 <arm_fir_f32+0x3c0>
 80071fa:	4603      	mov	r3, r0
 80071fc:	ecfb 7a01 	vldmia	fp!, {s15}
 8007200:	ecf2 5a01 	vldmia	r2!, {s11}
 8007204:	ee27 2a82 	vmul.f32	s4, s15, s4
 8007208:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800720c:	ee27 3a81 	vmul.f32	s6, s15, s2
 8007210:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8007214:	ee27 4a80 	vmul.f32	s8, s15, s0
 8007218:	ee67 4a88 	vmul.f32	s9, s15, s16
 800721c:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8007220:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007224:	3b01      	subs	r3, #1
 8007226:	ee3b ba02 	vadd.f32	s22, s22, s4
 800722a:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800722e:	eeb0 2a61 	vmov.f32	s4, s3
 8007232:	ee3a aa03 	vadd.f32	s20, s20, s6
 8007236:	eef0 1a41 	vmov.f32	s3, s2
 800723a:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800723e:	eeb0 1a60 	vmov.f32	s2, s1
 8007242:	ee39 9a04 	vadd.f32	s18, s18, s8
 8007246:	eef0 0a40 	vmov.f32	s1, s0
 800724a:	ee36 6a24 	vadd.f32	s12, s12, s9
 800724e:	eeb0 0a48 	vmov.f32	s0, s16
 8007252:	ee7b ba85 	vadd.f32	s23, s23, s10
 8007256:	eeb0 8a68 	vmov.f32	s16, s17
 800725a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800725e:	eef0 8a65 	vmov.f32	s17, s11
 8007262:	d1cb      	bne.n	80071fc <arm_fir_f32+0x358>
 8007264:	f1bc 0c01 	subs.w	ip, ip, #1
 8007268:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 800726c:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 8007270:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 8007274:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 8007278:	ed04 9a04 	vstr	s18, [r4, #-16]
 800727c:	ed04 6a03 	vstr	s12, [r4, #-12]
 8007280:	ed44 ba02 	vstr	s23, [r4, #-8]
 8007284:	ed44 6a01 	vstr	s13, [r4, #-4]
 8007288:	f106 0620 	add.w	r6, r6, #32
 800728c:	f105 0520 	add.w	r5, r5, #32
 8007290:	f104 0420 	add.w	r4, r4, #32
 8007294:	468b      	mov	fp, r1
 8007296:	f47f ae3f 	bne.w	8006f18 <arm_fir_f32+0x74>
 800729a:	9b01      	ldr	r3, [sp, #4]
 800729c:	9800      	ldr	r0, [sp, #0]
 800729e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072a4:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 80072a8:	015b      	lsls	r3, r3, #5
 80072aa:	4418      	add	r0, r3
 80072ac:	4419      	add	r1, r3
 80072ae:	441a      	add	r2, r3
 80072b0:	4499      	add	r9, r3
 80072b2:	9000      	str	r0, [sp, #0]
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	f013 0707 	ands.w	r7, r3, #7
 80072ba:	d020      	beq.n	80072fe <arm_fir_f32+0x45a>
 80072bc:	00bf      	lsls	r7, r7, #2
 80072be:	9e00      	ldr	r6, [sp, #0]
 80072c0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80072c4:	eb01 0c07 	add.w	ip, r1, r7
 80072c8:	464d      	mov	r5, r9
 80072ca:	f851 3b04 	ldr.w	r3, [r1], #4
 80072ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800734c <arm_fir_f32+0x4a8>
 80072d2:	f846 3b04 	str.w	r3, [r6], #4
 80072d6:	4674      	mov	r4, lr
 80072d8:	4643      	mov	r3, r8
 80072da:	4628      	mov	r0, r5
 80072dc:	ecf0 7a01 	vldmia	r0!, {s15}
 80072e0:	ecf4 6a01 	vldmia	r4!, {s13}
 80072e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072e8:	3b01      	subs	r3, #1
 80072ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072ee:	d1f5      	bne.n	80072dc <arm_fir_f32+0x438>
 80072f0:	4561      	cmp	r1, ip
 80072f2:	eca2 7a01 	vstmia	r2!, {s14}
 80072f6:	f105 0504 	add.w	r5, r5, #4
 80072fa:	d1e6      	bne.n	80072ca <arm_fir_f32+0x426>
 80072fc:	44b9      	add	r9, r7
 80072fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	ea5f 0498 	movs.w	r4, r8, lsr #2
 8007308:	685d      	ldr	r5, [r3, #4]
 800730a:	d021      	beq.n	8007350 <arm_fir_f32+0x4ac>
 800730c:	f109 0210 	add.w	r2, r9, #16
 8007310:	f105 0310 	add.w	r3, r5, #16
 8007314:	4621      	mov	r1, r4
 8007316:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800731a:	f843 0c10 	str.w	r0, [r3, #-16]
 800731e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8007322:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007326:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800732a:	f843 0c08 	str.w	r0, [r3, #-8]
 800732e:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007332:	f843 0c04 	str.w	r0, [r3, #-4]
 8007336:	3901      	subs	r1, #1
 8007338:	f102 0210 	add.w	r2, r2, #16
 800733c:	f103 0310 	add.w	r3, r3, #16
 8007340:	d1e9      	bne.n	8007316 <arm_fir_f32+0x472>
 8007342:	0124      	lsls	r4, r4, #4
 8007344:	44a1      	add	r9, r4
 8007346:	4425      	add	r5, r4
 8007348:	e002      	b.n	8007350 <arm_fir_f32+0x4ac>
 800734a:	bf00      	nop
 800734c:	00000000 	.word	0x00000000
 8007350:	f018 0803 	ands.w	r8, r8, #3
 8007354:	d00e      	beq.n	8007374 <arm_fir_f32+0x4d0>
 8007356:	f8d9 3000 	ldr.w	r3, [r9]
 800735a:	602b      	str	r3, [r5, #0]
 800735c:	f1b8 0801 	subs.w	r8, r8, #1
 8007360:	d008      	beq.n	8007374 <arm_fir_f32+0x4d0>
 8007362:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007366:	606b      	str	r3, [r5, #4]
 8007368:	f1b8 0f01 	cmp.w	r8, #1
 800736c:	bf1c      	itt	ne
 800736e:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8007372:	60ab      	strne	r3, [r5, #8]
 8007374:	b00b      	add	sp, #44	@ 0x2c
 8007376:	ecbd 8b10 	vpop	{d8-d15}
 800737a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737e:	eef0 ba66 	vmov.f32	s23, s13
 8007382:	eeb0 6a66 	vmov.f32	s12, s13
 8007386:	eeb0 9a66 	vmov.f32	s18, s13
 800738a:	eef0 9a66 	vmov.f32	s19, s13
 800738e:	eeb0 aa66 	vmov.f32	s20, s13
 8007392:	eef0 aa66 	vmov.f32	s21, s13
 8007396:	eeb0 ba66 	vmov.f32	s22, s13
 800739a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800739e:	f102 0120 	add.w	r1, r2, #32
 80073a2:	e729      	b.n	80071f8 <arm_fir_f32+0x354>

080073a4 <__cvt>:
 80073a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	ec57 6b10 	vmov	r6, r7, d0
 80073ac:	2f00      	cmp	r7, #0
 80073ae:	460c      	mov	r4, r1
 80073b0:	4619      	mov	r1, r3
 80073b2:	463b      	mov	r3, r7
 80073b4:	bfbb      	ittet	lt
 80073b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80073ba:	461f      	movlt	r7, r3
 80073bc:	2300      	movge	r3, #0
 80073be:	232d      	movlt	r3, #45	@ 0x2d
 80073c0:	700b      	strb	r3, [r1, #0]
 80073c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80073c8:	4691      	mov	r9, r2
 80073ca:	f023 0820 	bic.w	r8, r3, #32
 80073ce:	bfbc      	itt	lt
 80073d0:	4632      	movlt	r2, r6
 80073d2:	4616      	movlt	r6, r2
 80073d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073d8:	d005      	beq.n	80073e6 <__cvt+0x42>
 80073da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80073de:	d100      	bne.n	80073e2 <__cvt+0x3e>
 80073e0:	3401      	adds	r4, #1
 80073e2:	2102      	movs	r1, #2
 80073e4:	e000      	b.n	80073e8 <__cvt+0x44>
 80073e6:	2103      	movs	r1, #3
 80073e8:	ab03      	add	r3, sp, #12
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	ab02      	add	r3, sp, #8
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	ec47 6b10 	vmov	d0, r6, r7
 80073f4:	4653      	mov	r3, sl
 80073f6:	4622      	mov	r2, r4
 80073f8:	f001 f8b2 	bl	8008560 <_dtoa_r>
 80073fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007400:	4605      	mov	r5, r0
 8007402:	d119      	bne.n	8007438 <__cvt+0x94>
 8007404:	f019 0f01 	tst.w	r9, #1
 8007408:	d00e      	beq.n	8007428 <__cvt+0x84>
 800740a:	eb00 0904 	add.w	r9, r0, r4
 800740e:	2200      	movs	r2, #0
 8007410:	2300      	movs	r3, #0
 8007412:	4630      	mov	r0, r6
 8007414:	4639      	mov	r1, r7
 8007416:	f7f9 fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800741a:	b108      	cbz	r0, 8007420 <__cvt+0x7c>
 800741c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007420:	2230      	movs	r2, #48	@ 0x30
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	454b      	cmp	r3, r9
 8007426:	d31e      	bcc.n	8007466 <__cvt+0xc2>
 8007428:	9b03      	ldr	r3, [sp, #12]
 800742a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800742c:	1b5b      	subs	r3, r3, r5
 800742e:	4628      	mov	r0, r5
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	b004      	add	sp, #16
 8007434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800743c:	eb00 0904 	add.w	r9, r0, r4
 8007440:	d1e5      	bne.n	800740e <__cvt+0x6a>
 8007442:	7803      	ldrb	r3, [r0, #0]
 8007444:	2b30      	cmp	r3, #48	@ 0x30
 8007446:	d10a      	bne.n	800745e <__cvt+0xba>
 8007448:	2200      	movs	r2, #0
 800744a:	2300      	movs	r3, #0
 800744c:	4630      	mov	r0, r6
 800744e:	4639      	mov	r1, r7
 8007450:	f7f9 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007454:	b918      	cbnz	r0, 800745e <__cvt+0xba>
 8007456:	f1c4 0401 	rsb	r4, r4, #1
 800745a:	f8ca 4000 	str.w	r4, [sl]
 800745e:	f8da 3000 	ldr.w	r3, [sl]
 8007462:	4499      	add	r9, r3
 8007464:	e7d3      	b.n	800740e <__cvt+0x6a>
 8007466:	1c59      	adds	r1, r3, #1
 8007468:	9103      	str	r1, [sp, #12]
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	e7d9      	b.n	8007422 <__cvt+0x7e>

0800746e <__exponent>:
 800746e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007470:	2900      	cmp	r1, #0
 8007472:	bfba      	itte	lt
 8007474:	4249      	neglt	r1, r1
 8007476:	232d      	movlt	r3, #45	@ 0x2d
 8007478:	232b      	movge	r3, #43	@ 0x2b
 800747a:	2909      	cmp	r1, #9
 800747c:	7002      	strb	r2, [r0, #0]
 800747e:	7043      	strb	r3, [r0, #1]
 8007480:	dd29      	ble.n	80074d6 <__exponent+0x68>
 8007482:	f10d 0307 	add.w	r3, sp, #7
 8007486:	461d      	mov	r5, r3
 8007488:	270a      	movs	r7, #10
 800748a:	461a      	mov	r2, r3
 800748c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007490:	fb07 1416 	mls	r4, r7, r6, r1
 8007494:	3430      	adds	r4, #48	@ 0x30
 8007496:	f802 4c01 	strb.w	r4, [r2, #-1]
 800749a:	460c      	mov	r4, r1
 800749c:	2c63      	cmp	r4, #99	@ 0x63
 800749e:	f103 33ff 	add.w	r3, r3, #4294967295
 80074a2:	4631      	mov	r1, r6
 80074a4:	dcf1      	bgt.n	800748a <__exponent+0x1c>
 80074a6:	3130      	adds	r1, #48	@ 0x30
 80074a8:	1e94      	subs	r4, r2, #2
 80074aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074ae:	1c41      	adds	r1, r0, #1
 80074b0:	4623      	mov	r3, r4
 80074b2:	42ab      	cmp	r3, r5
 80074b4:	d30a      	bcc.n	80074cc <__exponent+0x5e>
 80074b6:	f10d 0309 	add.w	r3, sp, #9
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	42ac      	cmp	r4, r5
 80074be:	bf88      	it	hi
 80074c0:	2300      	movhi	r3, #0
 80074c2:	3302      	adds	r3, #2
 80074c4:	4403      	add	r3, r0
 80074c6:	1a18      	subs	r0, r3, r0
 80074c8:	b003      	add	sp, #12
 80074ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80074d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80074d4:	e7ed      	b.n	80074b2 <__exponent+0x44>
 80074d6:	2330      	movs	r3, #48	@ 0x30
 80074d8:	3130      	adds	r1, #48	@ 0x30
 80074da:	7083      	strb	r3, [r0, #2]
 80074dc:	70c1      	strb	r1, [r0, #3]
 80074de:	1d03      	adds	r3, r0, #4
 80074e0:	e7f1      	b.n	80074c6 <__exponent+0x58>
	...

080074e4 <_printf_float>:
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	b08d      	sub	sp, #52	@ 0x34
 80074ea:	460c      	mov	r4, r1
 80074ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80074f0:	4616      	mov	r6, r2
 80074f2:	461f      	mov	r7, r3
 80074f4:	4605      	mov	r5, r0
 80074f6:	f000 ff1f 	bl	8008338 <_localeconv_r>
 80074fa:	6803      	ldr	r3, [r0, #0]
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7f8 feb6 	bl	8000270 <strlen>
 8007504:	2300      	movs	r3, #0
 8007506:	930a      	str	r3, [sp, #40]	@ 0x28
 8007508:	f8d8 3000 	ldr.w	r3, [r8]
 800750c:	9005      	str	r0, [sp, #20]
 800750e:	3307      	adds	r3, #7
 8007510:	f023 0307 	bic.w	r3, r3, #7
 8007514:	f103 0208 	add.w	r2, r3, #8
 8007518:	f894 a018 	ldrb.w	sl, [r4, #24]
 800751c:	f8d4 b000 	ldr.w	fp, [r4]
 8007520:	f8c8 2000 	str.w	r2, [r8]
 8007524:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007528:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800752c:	9307      	str	r3, [sp, #28]
 800752e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007532:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800753a:	4b9c      	ldr	r3, [pc, #624]	@ (80077ac <_printf_float+0x2c8>)
 800753c:	f04f 32ff 	mov.w	r2, #4294967295
 8007540:	f7f9 faf4 	bl	8000b2c <__aeabi_dcmpun>
 8007544:	bb70      	cbnz	r0, 80075a4 <_printf_float+0xc0>
 8007546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800754a:	4b98      	ldr	r3, [pc, #608]	@ (80077ac <_printf_float+0x2c8>)
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	f7f9 face 	bl	8000af0 <__aeabi_dcmple>
 8007554:	bb30      	cbnz	r0, 80075a4 <_printf_float+0xc0>
 8007556:	2200      	movs	r2, #0
 8007558:	2300      	movs	r3, #0
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	f7f9 fabd 	bl	8000adc <__aeabi_dcmplt>
 8007562:	b110      	cbz	r0, 800756a <_printf_float+0x86>
 8007564:	232d      	movs	r3, #45	@ 0x2d
 8007566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800756a:	4a91      	ldr	r2, [pc, #580]	@ (80077b0 <_printf_float+0x2cc>)
 800756c:	4b91      	ldr	r3, [pc, #580]	@ (80077b4 <_printf_float+0x2d0>)
 800756e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007572:	bf8c      	ite	hi
 8007574:	4690      	movhi	r8, r2
 8007576:	4698      	movls	r8, r3
 8007578:	2303      	movs	r3, #3
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	f02b 0304 	bic.w	r3, fp, #4
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	9700      	str	r7, [sp, #0]
 8007588:	4633      	mov	r3, r6
 800758a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f9d2 	bl	8007938 <_printf_common>
 8007594:	3001      	adds	r0, #1
 8007596:	f040 808d 	bne.w	80076b4 <_printf_float+0x1d0>
 800759a:	f04f 30ff 	mov.w	r0, #4294967295
 800759e:	b00d      	add	sp, #52	@ 0x34
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f9 fabe 	bl	8000b2c <__aeabi_dcmpun>
 80075b0:	b140      	cbz	r0, 80075c4 <_printf_float+0xe0>
 80075b2:	464b      	mov	r3, r9
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfbc      	itt	lt
 80075b8:	232d      	movlt	r3, #45	@ 0x2d
 80075ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80075be:	4a7e      	ldr	r2, [pc, #504]	@ (80077b8 <_printf_float+0x2d4>)
 80075c0:	4b7e      	ldr	r3, [pc, #504]	@ (80077bc <_printf_float+0x2d8>)
 80075c2:	e7d4      	b.n	800756e <_printf_float+0x8a>
 80075c4:	6863      	ldr	r3, [r4, #4]
 80075c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80075ca:	9206      	str	r2, [sp, #24]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	d13b      	bne.n	8007648 <_printf_float+0x164>
 80075d0:	2306      	movs	r3, #6
 80075d2:	6063      	str	r3, [r4, #4]
 80075d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80075d8:	2300      	movs	r3, #0
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	9303      	str	r3, [sp, #12]
 80075de:	ab0a      	add	r3, sp, #40	@ 0x28
 80075e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80075e4:	ab09      	add	r3, sp, #36	@ 0x24
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	ec49 8b10 	vmov	d0, r8, r9
 80075ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7ff fed6 	bl	80073a4 <__cvt>
 80075f8:	9b06      	ldr	r3, [sp, #24]
 80075fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075fc:	2b47      	cmp	r3, #71	@ 0x47
 80075fe:	4680      	mov	r8, r0
 8007600:	d129      	bne.n	8007656 <_printf_float+0x172>
 8007602:	1cc8      	adds	r0, r1, #3
 8007604:	db02      	blt.n	800760c <_printf_float+0x128>
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	4299      	cmp	r1, r3
 800760a:	dd41      	ble.n	8007690 <_printf_float+0x1ac>
 800760c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007610:	fa5f fa8a 	uxtb.w	sl, sl
 8007614:	3901      	subs	r1, #1
 8007616:	4652      	mov	r2, sl
 8007618:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800761c:	9109      	str	r1, [sp, #36]	@ 0x24
 800761e:	f7ff ff26 	bl	800746e <__exponent>
 8007622:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007624:	1813      	adds	r3, r2, r0
 8007626:	2a01      	cmp	r2, #1
 8007628:	4681      	mov	r9, r0
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	dc02      	bgt.n	8007634 <_printf_float+0x150>
 800762e:	6822      	ldr	r2, [r4, #0]
 8007630:	07d2      	lsls	r2, r2, #31
 8007632:	d501      	bpl.n	8007638 <_printf_float+0x154>
 8007634:	3301      	adds	r3, #1
 8007636:	6123      	str	r3, [r4, #16]
 8007638:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0a2      	beq.n	8007586 <_printf_float+0xa2>
 8007640:	232d      	movs	r3, #45	@ 0x2d
 8007642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007646:	e79e      	b.n	8007586 <_printf_float+0xa2>
 8007648:	9a06      	ldr	r2, [sp, #24]
 800764a:	2a47      	cmp	r2, #71	@ 0x47
 800764c:	d1c2      	bne.n	80075d4 <_printf_float+0xf0>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1c0      	bne.n	80075d4 <_printf_float+0xf0>
 8007652:	2301      	movs	r3, #1
 8007654:	e7bd      	b.n	80075d2 <_printf_float+0xee>
 8007656:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800765a:	d9db      	bls.n	8007614 <_printf_float+0x130>
 800765c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007660:	d118      	bne.n	8007694 <_printf_float+0x1b0>
 8007662:	2900      	cmp	r1, #0
 8007664:	6863      	ldr	r3, [r4, #4]
 8007666:	dd0b      	ble.n	8007680 <_printf_float+0x19c>
 8007668:	6121      	str	r1, [r4, #16]
 800766a:	b913      	cbnz	r3, 8007672 <_printf_float+0x18e>
 800766c:	6822      	ldr	r2, [r4, #0]
 800766e:	07d0      	lsls	r0, r2, #31
 8007670:	d502      	bpl.n	8007678 <_printf_float+0x194>
 8007672:	3301      	adds	r3, #1
 8007674:	440b      	add	r3, r1
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	65a1      	str	r1, [r4, #88]	@ 0x58
 800767a:	f04f 0900 	mov.w	r9, #0
 800767e:	e7db      	b.n	8007638 <_printf_float+0x154>
 8007680:	b913      	cbnz	r3, 8007688 <_printf_float+0x1a4>
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	07d2      	lsls	r2, r2, #31
 8007686:	d501      	bpl.n	800768c <_printf_float+0x1a8>
 8007688:	3302      	adds	r3, #2
 800768a:	e7f4      	b.n	8007676 <_printf_float+0x192>
 800768c:	2301      	movs	r3, #1
 800768e:	e7f2      	b.n	8007676 <_printf_float+0x192>
 8007690:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007696:	4299      	cmp	r1, r3
 8007698:	db05      	blt.n	80076a6 <_printf_float+0x1c2>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	6121      	str	r1, [r4, #16]
 800769e:	07d8      	lsls	r0, r3, #31
 80076a0:	d5ea      	bpl.n	8007678 <_printf_float+0x194>
 80076a2:	1c4b      	adds	r3, r1, #1
 80076a4:	e7e7      	b.n	8007676 <_printf_float+0x192>
 80076a6:	2900      	cmp	r1, #0
 80076a8:	bfd4      	ite	le
 80076aa:	f1c1 0202 	rsble	r2, r1, #2
 80076ae:	2201      	movgt	r2, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	e7e0      	b.n	8007676 <_printf_float+0x192>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	055a      	lsls	r2, r3, #21
 80076b8:	d407      	bmi.n	80076ca <_printf_float+0x1e6>
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	4642      	mov	r2, r8
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	d12b      	bne.n	8007720 <_printf_float+0x23c>
 80076c8:	e767      	b.n	800759a <_printf_float+0xb6>
 80076ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076ce:	f240 80dd 	bls.w	800788c <_printf_float+0x3a8>
 80076d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076d6:	2200      	movs	r2, #0
 80076d8:	2300      	movs	r3, #0
 80076da:	f7f9 f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d033      	beq.n	800774a <_printf_float+0x266>
 80076e2:	4a37      	ldr	r2, [pc, #220]	@ (80077c0 <_printf_float+0x2dc>)
 80076e4:	2301      	movs	r3, #1
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	f43f af54 	beq.w	800759a <_printf_float+0xb6>
 80076f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80076f6:	4543      	cmp	r3, r8
 80076f8:	db02      	blt.n	8007700 <_printf_float+0x21c>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	07d8      	lsls	r0, r3, #31
 80076fe:	d50f      	bpl.n	8007720 <_printf_float+0x23c>
 8007700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	f43f af45 	beq.w	800759a <_printf_float+0xb6>
 8007710:	f04f 0900 	mov.w	r9, #0
 8007714:	f108 38ff 	add.w	r8, r8, #4294967295
 8007718:	f104 0a1a 	add.w	sl, r4, #26
 800771c:	45c8      	cmp	r8, r9
 800771e:	dc09      	bgt.n	8007734 <_printf_float+0x250>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	079b      	lsls	r3, r3, #30
 8007724:	f100 8103 	bmi.w	800792e <_printf_float+0x44a>
 8007728:	68e0      	ldr	r0, [r4, #12]
 800772a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800772c:	4298      	cmp	r0, r3
 800772e:	bfb8      	it	lt
 8007730:	4618      	movlt	r0, r3
 8007732:	e734      	b.n	800759e <_printf_float+0xba>
 8007734:	2301      	movs	r3, #1
 8007736:	4652      	mov	r2, sl
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	f43f af2b 	beq.w	800759a <_printf_float+0xb6>
 8007744:	f109 0901 	add.w	r9, r9, #1
 8007748:	e7e8      	b.n	800771c <_printf_float+0x238>
 800774a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	dc39      	bgt.n	80077c4 <_printf_float+0x2e0>
 8007750:	4a1b      	ldr	r2, [pc, #108]	@ (80077c0 <_printf_float+0x2dc>)
 8007752:	2301      	movs	r3, #1
 8007754:	4631      	mov	r1, r6
 8007756:	4628      	mov	r0, r5
 8007758:	47b8      	blx	r7
 800775a:	3001      	adds	r0, #1
 800775c:	f43f af1d 	beq.w	800759a <_printf_float+0xb6>
 8007760:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007764:	ea59 0303 	orrs.w	r3, r9, r3
 8007768:	d102      	bne.n	8007770 <_printf_float+0x28c>
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	07d9      	lsls	r1, r3, #31
 800776e:	d5d7      	bpl.n	8007720 <_printf_float+0x23c>
 8007770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f af0d 	beq.w	800759a <_printf_float+0xb6>
 8007780:	f04f 0a00 	mov.w	sl, #0
 8007784:	f104 0b1a 	add.w	fp, r4, #26
 8007788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778a:	425b      	negs	r3, r3
 800778c:	4553      	cmp	r3, sl
 800778e:	dc01      	bgt.n	8007794 <_printf_float+0x2b0>
 8007790:	464b      	mov	r3, r9
 8007792:	e793      	b.n	80076bc <_printf_float+0x1d8>
 8007794:	2301      	movs	r3, #1
 8007796:	465a      	mov	r2, fp
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f aefb 	beq.w	800759a <_printf_float+0xb6>
 80077a4:	f10a 0a01 	add.w	sl, sl, #1
 80077a8:	e7ee      	b.n	8007788 <_printf_float+0x2a4>
 80077aa:	bf00      	nop
 80077ac:	7fefffff 	.word	0x7fefffff
 80077b0:	0800c0d8 	.word	0x0800c0d8
 80077b4:	0800c0d4 	.word	0x0800c0d4
 80077b8:	0800c0e0 	.word	0x0800c0e0
 80077bc:	0800c0dc 	.word	0x0800c0dc
 80077c0:	0800c0e4 	.word	0x0800c0e4
 80077c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077ca:	4553      	cmp	r3, sl
 80077cc:	bfa8      	it	ge
 80077ce:	4653      	movge	r3, sl
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	4699      	mov	r9, r3
 80077d4:	dc36      	bgt.n	8007844 <_printf_float+0x360>
 80077d6:	f04f 0b00 	mov.w	fp, #0
 80077da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077de:	f104 021a 	add.w	r2, r4, #26
 80077e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077e4:	9306      	str	r3, [sp, #24]
 80077e6:	eba3 0309 	sub.w	r3, r3, r9
 80077ea:	455b      	cmp	r3, fp
 80077ec:	dc31      	bgt.n	8007852 <_printf_float+0x36e>
 80077ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f0:	459a      	cmp	sl, r3
 80077f2:	dc3a      	bgt.n	800786a <_printf_float+0x386>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	07da      	lsls	r2, r3, #31
 80077f8:	d437      	bmi.n	800786a <_printf_float+0x386>
 80077fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077fc:	ebaa 0903 	sub.w	r9, sl, r3
 8007800:	9b06      	ldr	r3, [sp, #24]
 8007802:	ebaa 0303 	sub.w	r3, sl, r3
 8007806:	4599      	cmp	r9, r3
 8007808:	bfa8      	it	ge
 800780a:	4699      	movge	r9, r3
 800780c:	f1b9 0f00 	cmp.w	r9, #0
 8007810:	dc33      	bgt.n	800787a <_printf_float+0x396>
 8007812:	f04f 0800 	mov.w	r8, #0
 8007816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800781a:	f104 0b1a 	add.w	fp, r4, #26
 800781e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007820:	ebaa 0303 	sub.w	r3, sl, r3
 8007824:	eba3 0309 	sub.w	r3, r3, r9
 8007828:	4543      	cmp	r3, r8
 800782a:	f77f af79 	ble.w	8007720 <_printf_float+0x23c>
 800782e:	2301      	movs	r3, #1
 8007830:	465a      	mov	r2, fp
 8007832:	4631      	mov	r1, r6
 8007834:	4628      	mov	r0, r5
 8007836:	47b8      	blx	r7
 8007838:	3001      	adds	r0, #1
 800783a:	f43f aeae 	beq.w	800759a <_printf_float+0xb6>
 800783e:	f108 0801 	add.w	r8, r8, #1
 8007842:	e7ec      	b.n	800781e <_printf_float+0x33a>
 8007844:	4642      	mov	r2, r8
 8007846:	4631      	mov	r1, r6
 8007848:	4628      	mov	r0, r5
 800784a:	47b8      	blx	r7
 800784c:	3001      	adds	r0, #1
 800784e:	d1c2      	bne.n	80077d6 <_printf_float+0x2f2>
 8007850:	e6a3      	b.n	800759a <_printf_float+0xb6>
 8007852:	2301      	movs	r3, #1
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	9206      	str	r2, [sp, #24]
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f ae9c 	beq.w	800759a <_printf_float+0xb6>
 8007862:	9a06      	ldr	r2, [sp, #24]
 8007864:	f10b 0b01 	add.w	fp, fp, #1
 8007868:	e7bb      	b.n	80077e2 <_printf_float+0x2fe>
 800786a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	d1c0      	bne.n	80077fa <_printf_float+0x316>
 8007878:	e68f      	b.n	800759a <_printf_float+0xb6>
 800787a:	9a06      	ldr	r2, [sp, #24]
 800787c:	464b      	mov	r3, r9
 800787e:	4442      	add	r2, r8
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	d1c3      	bne.n	8007812 <_printf_float+0x32e>
 800788a:	e686      	b.n	800759a <_printf_float+0xb6>
 800788c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007890:	f1ba 0f01 	cmp.w	sl, #1
 8007894:	dc01      	bgt.n	800789a <_printf_float+0x3b6>
 8007896:	07db      	lsls	r3, r3, #31
 8007898:	d536      	bpl.n	8007908 <_printf_float+0x424>
 800789a:	2301      	movs	r3, #1
 800789c:	4642      	mov	r2, r8
 800789e:	4631      	mov	r1, r6
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b8      	blx	r7
 80078a4:	3001      	adds	r0, #1
 80078a6:	f43f ae78 	beq.w	800759a <_printf_float+0xb6>
 80078aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f ae70 	beq.w	800759a <_printf_float+0xb6>
 80078ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078be:	2200      	movs	r2, #0
 80078c0:	2300      	movs	r3, #0
 80078c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078c6:	f7f9 f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ca:	b9c0      	cbnz	r0, 80078fe <_printf_float+0x41a>
 80078cc:	4653      	mov	r3, sl
 80078ce:	f108 0201 	add.w	r2, r8, #1
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	d10c      	bne.n	80078f6 <_printf_float+0x412>
 80078dc:	e65d      	b.n	800759a <_printf_float+0xb6>
 80078de:	2301      	movs	r3, #1
 80078e0:	465a      	mov	r2, fp
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f ae56 	beq.w	800759a <_printf_float+0xb6>
 80078ee:	f108 0801 	add.w	r8, r8, #1
 80078f2:	45d0      	cmp	r8, sl
 80078f4:	dbf3      	blt.n	80078de <_printf_float+0x3fa>
 80078f6:	464b      	mov	r3, r9
 80078f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80078fc:	e6df      	b.n	80076be <_printf_float+0x1da>
 80078fe:	f04f 0800 	mov.w	r8, #0
 8007902:	f104 0b1a 	add.w	fp, r4, #26
 8007906:	e7f4      	b.n	80078f2 <_printf_float+0x40e>
 8007908:	2301      	movs	r3, #1
 800790a:	4642      	mov	r2, r8
 800790c:	e7e1      	b.n	80078d2 <_printf_float+0x3ee>
 800790e:	2301      	movs	r3, #1
 8007910:	464a      	mov	r2, r9
 8007912:	4631      	mov	r1, r6
 8007914:	4628      	mov	r0, r5
 8007916:	47b8      	blx	r7
 8007918:	3001      	adds	r0, #1
 800791a:	f43f ae3e 	beq.w	800759a <_printf_float+0xb6>
 800791e:	f108 0801 	add.w	r8, r8, #1
 8007922:	68e3      	ldr	r3, [r4, #12]
 8007924:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007926:	1a5b      	subs	r3, r3, r1
 8007928:	4543      	cmp	r3, r8
 800792a:	dcf0      	bgt.n	800790e <_printf_float+0x42a>
 800792c:	e6fc      	b.n	8007728 <_printf_float+0x244>
 800792e:	f04f 0800 	mov.w	r8, #0
 8007932:	f104 0919 	add.w	r9, r4, #25
 8007936:	e7f4      	b.n	8007922 <_printf_float+0x43e>

08007938 <_printf_common>:
 8007938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800793c:	4616      	mov	r6, r2
 800793e:	4698      	mov	r8, r3
 8007940:	688a      	ldr	r2, [r1, #8]
 8007942:	690b      	ldr	r3, [r1, #16]
 8007944:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007948:	4293      	cmp	r3, r2
 800794a:	bfb8      	it	lt
 800794c:	4613      	movlt	r3, r2
 800794e:	6033      	str	r3, [r6, #0]
 8007950:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007954:	4607      	mov	r7, r0
 8007956:	460c      	mov	r4, r1
 8007958:	b10a      	cbz	r2, 800795e <_printf_common+0x26>
 800795a:	3301      	adds	r3, #1
 800795c:	6033      	str	r3, [r6, #0]
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	0699      	lsls	r1, r3, #26
 8007962:	bf42      	ittt	mi
 8007964:	6833      	ldrmi	r3, [r6, #0]
 8007966:	3302      	addmi	r3, #2
 8007968:	6033      	strmi	r3, [r6, #0]
 800796a:	6825      	ldr	r5, [r4, #0]
 800796c:	f015 0506 	ands.w	r5, r5, #6
 8007970:	d106      	bne.n	8007980 <_printf_common+0x48>
 8007972:	f104 0a19 	add.w	sl, r4, #25
 8007976:	68e3      	ldr	r3, [r4, #12]
 8007978:	6832      	ldr	r2, [r6, #0]
 800797a:	1a9b      	subs	r3, r3, r2
 800797c:	42ab      	cmp	r3, r5
 800797e:	dc26      	bgt.n	80079ce <_printf_common+0x96>
 8007980:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007984:	6822      	ldr	r2, [r4, #0]
 8007986:	3b00      	subs	r3, #0
 8007988:	bf18      	it	ne
 800798a:	2301      	movne	r3, #1
 800798c:	0692      	lsls	r2, r2, #26
 800798e:	d42b      	bmi.n	80079e8 <_printf_common+0xb0>
 8007990:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007994:	4641      	mov	r1, r8
 8007996:	4638      	mov	r0, r7
 8007998:	47c8      	blx	r9
 800799a:	3001      	adds	r0, #1
 800799c:	d01e      	beq.n	80079dc <_printf_common+0xa4>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	6922      	ldr	r2, [r4, #16]
 80079a2:	f003 0306 	and.w	r3, r3, #6
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	bf02      	ittt	eq
 80079aa:	68e5      	ldreq	r5, [r4, #12]
 80079ac:	6833      	ldreq	r3, [r6, #0]
 80079ae:	1aed      	subeq	r5, r5, r3
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	bf0c      	ite	eq
 80079b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079b8:	2500      	movne	r5, #0
 80079ba:	4293      	cmp	r3, r2
 80079bc:	bfc4      	itt	gt
 80079be:	1a9b      	subgt	r3, r3, r2
 80079c0:	18ed      	addgt	r5, r5, r3
 80079c2:	2600      	movs	r6, #0
 80079c4:	341a      	adds	r4, #26
 80079c6:	42b5      	cmp	r5, r6
 80079c8:	d11a      	bne.n	8007a00 <_printf_common+0xc8>
 80079ca:	2000      	movs	r0, #0
 80079cc:	e008      	b.n	80079e0 <_printf_common+0xa8>
 80079ce:	2301      	movs	r3, #1
 80079d0:	4652      	mov	r2, sl
 80079d2:	4641      	mov	r1, r8
 80079d4:	4638      	mov	r0, r7
 80079d6:	47c8      	blx	r9
 80079d8:	3001      	adds	r0, #1
 80079da:	d103      	bne.n	80079e4 <_printf_common+0xac>
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e4:	3501      	adds	r5, #1
 80079e6:	e7c6      	b.n	8007976 <_printf_common+0x3e>
 80079e8:	18e1      	adds	r1, r4, r3
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	2030      	movs	r0, #48	@ 0x30
 80079ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079f2:	4422      	add	r2, r4
 80079f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079fc:	3302      	adds	r3, #2
 80079fe:	e7c7      	b.n	8007990 <_printf_common+0x58>
 8007a00:	2301      	movs	r3, #1
 8007a02:	4622      	mov	r2, r4
 8007a04:	4641      	mov	r1, r8
 8007a06:	4638      	mov	r0, r7
 8007a08:	47c8      	blx	r9
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	d0e6      	beq.n	80079dc <_printf_common+0xa4>
 8007a0e:	3601      	adds	r6, #1
 8007a10:	e7d9      	b.n	80079c6 <_printf_common+0x8e>
	...

08007a14 <_printf_i>:
 8007a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	7e0f      	ldrb	r7, [r1, #24]
 8007a1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a1c:	2f78      	cmp	r7, #120	@ 0x78
 8007a1e:	4691      	mov	r9, r2
 8007a20:	4680      	mov	r8, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	469a      	mov	sl, r3
 8007a26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a2a:	d807      	bhi.n	8007a3c <_printf_i+0x28>
 8007a2c:	2f62      	cmp	r7, #98	@ 0x62
 8007a2e:	d80a      	bhi.n	8007a46 <_printf_i+0x32>
 8007a30:	2f00      	cmp	r7, #0
 8007a32:	f000 80d1 	beq.w	8007bd8 <_printf_i+0x1c4>
 8007a36:	2f58      	cmp	r7, #88	@ 0x58
 8007a38:	f000 80b8 	beq.w	8007bac <_printf_i+0x198>
 8007a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a44:	e03a      	b.n	8007abc <_printf_i+0xa8>
 8007a46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a4a:	2b15      	cmp	r3, #21
 8007a4c:	d8f6      	bhi.n	8007a3c <_printf_i+0x28>
 8007a4e:	a101      	add	r1, pc, #4	@ (adr r1, 8007a54 <_printf_i+0x40>)
 8007a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a54:	08007aad 	.word	0x08007aad
 8007a58:	08007ac1 	.word	0x08007ac1
 8007a5c:	08007a3d 	.word	0x08007a3d
 8007a60:	08007a3d 	.word	0x08007a3d
 8007a64:	08007a3d 	.word	0x08007a3d
 8007a68:	08007a3d 	.word	0x08007a3d
 8007a6c:	08007ac1 	.word	0x08007ac1
 8007a70:	08007a3d 	.word	0x08007a3d
 8007a74:	08007a3d 	.word	0x08007a3d
 8007a78:	08007a3d 	.word	0x08007a3d
 8007a7c:	08007a3d 	.word	0x08007a3d
 8007a80:	08007bbf 	.word	0x08007bbf
 8007a84:	08007aeb 	.word	0x08007aeb
 8007a88:	08007b79 	.word	0x08007b79
 8007a8c:	08007a3d 	.word	0x08007a3d
 8007a90:	08007a3d 	.word	0x08007a3d
 8007a94:	08007be1 	.word	0x08007be1
 8007a98:	08007a3d 	.word	0x08007a3d
 8007a9c:	08007aeb 	.word	0x08007aeb
 8007aa0:	08007a3d 	.word	0x08007a3d
 8007aa4:	08007a3d 	.word	0x08007a3d
 8007aa8:	08007b81 	.word	0x08007b81
 8007aac:	6833      	ldr	r3, [r6, #0]
 8007aae:	1d1a      	adds	r2, r3, #4
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6032      	str	r2, [r6, #0]
 8007ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ab8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007abc:	2301      	movs	r3, #1
 8007abe:	e09c      	b.n	8007bfa <_printf_i+0x1e6>
 8007ac0:	6833      	ldr	r3, [r6, #0]
 8007ac2:	6820      	ldr	r0, [r4, #0]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	6031      	str	r1, [r6, #0]
 8007ac8:	0606      	lsls	r6, r0, #24
 8007aca:	d501      	bpl.n	8007ad0 <_printf_i+0xbc>
 8007acc:	681d      	ldr	r5, [r3, #0]
 8007ace:	e003      	b.n	8007ad8 <_printf_i+0xc4>
 8007ad0:	0645      	lsls	r5, r0, #25
 8007ad2:	d5fb      	bpl.n	8007acc <_printf_i+0xb8>
 8007ad4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ad8:	2d00      	cmp	r5, #0
 8007ada:	da03      	bge.n	8007ae4 <_printf_i+0xd0>
 8007adc:	232d      	movs	r3, #45	@ 0x2d
 8007ade:	426d      	negs	r5, r5
 8007ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ae4:	4858      	ldr	r0, [pc, #352]	@ (8007c48 <_printf_i+0x234>)
 8007ae6:	230a      	movs	r3, #10
 8007ae8:	e011      	b.n	8007b0e <_printf_i+0xfa>
 8007aea:	6821      	ldr	r1, [r4, #0]
 8007aec:	6833      	ldr	r3, [r6, #0]
 8007aee:	0608      	lsls	r0, r1, #24
 8007af0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007af4:	d402      	bmi.n	8007afc <_printf_i+0xe8>
 8007af6:	0649      	lsls	r1, r1, #25
 8007af8:	bf48      	it	mi
 8007afa:	b2ad      	uxthmi	r5, r5
 8007afc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007afe:	4852      	ldr	r0, [pc, #328]	@ (8007c48 <_printf_i+0x234>)
 8007b00:	6033      	str	r3, [r6, #0]
 8007b02:	bf14      	ite	ne
 8007b04:	230a      	movne	r3, #10
 8007b06:	2308      	moveq	r3, #8
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b0e:	6866      	ldr	r6, [r4, #4]
 8007b10:	60a6      	str	r6, [r4, #8]
 8007b12:	2e00      	cmp	r6, #0
 8007b14:	db05      	blt.n	8007b22 <_printf_i+0x10e>
 8007b16:	6821      	ldr	r1, [r4, #0]
 8007b18:	432e      	orrs	r6, r5
 8007b1a:	f021 0104 	bic.w	r1, r1, #4
 8007b1e:	6021      	str	r1, [r4, #0]
 8007b20:	d04b      	beq.n	8007bba <_printf_i+0x1a6>
 8007b22:	4616      	mov	r6, r2
 8007b24:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b28:	fb03 5711 	mls	r7, r3, r1, r5
 8007b2c:	5dc7      	ldrb	r7, [r0, r7]
 8007b2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b32:	462f      	mov	r7, r5
 8007b34:	42bb      	cmp	r3, r7
 8007b36:	460d      	mov	r5, r1
 8007b38:	d9f4      	bls.n	8007b24 <_printf_i+0x110>
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d10b      	bne.n	8007b56 <_printf_i+0x142>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	07df      	lsls	r7, r3, #31
 8007b42:	d508      	bpl.n	8007b56 <_printf_i+0x142>
 8007b44:	6923      	ldr	r3, [r4, #16]
 8007b46:	6861      	ldr	r1, [r4, #4]
 8007b48:	4299      	cmp	r1, r3
 8007b4a:	bfde      	ittt	le
 8007b4c:	2330      	movle	r3, #48	@ 0x30
 8007b4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b56:	1b92      	subs	r2, r2, r6
 8007b58:	6122      	str	r2, [r4, #16]
 8007b5a:	f8cd a000 	str.w	sl, [sp]
 8007b5e:	464b      	mov	r3, r9
 8007b60:	aa03      	add	r2, sp, #12
 8007b62:	4621      	mov	r1, r4
 8007b64:	4640      	mov	r0, r8
 8007b66:	f7ff fee7 	bl	8007938 <_printf_common>
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d14a      	bne.n	8007c04 <_printf_i+0x1f0>
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b72:	b004      	add	sp, #16
 8007b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	f043 0320 	orr.w	r3, r3, #32
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	4832      	ldr	r0, [pc, #200]	@ (8007c4c <_printf_i+0x238>)
 8007b82:	2778      	movs	r7, #120	@ 0x78
 8007b84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	6831      	ldr	r1, [r6, #0]
 8007b8c:	061f      	lsls	r7, r3, #24
 8007b8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b92:	d402      	bmi.n	8007b9a <_printf_i+0x186>
 8007b94:	065f      	lsls	r7, r3, #25
 8007b96:	bf48      	it	mi
 8007b98:	b2ad      	uxthmi	r5, r5
 8007b9a:	6031      	str	r1, [r6, #0]
 8007b9c:	07d9      	lsls	r1, r3, #31
 8007b9e:	bf44      	itt	mi
 8007ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ba4:	6023      	strmi	r3, [r4, #0]
 8007ba6:	b11d      	cbz	r5, 8007bb0 <_printf_i+0x19c>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	e7ad      	b.n	8007b08 <_printf_i+0xf4>
 8007bac:	4826      	ldr	r0, [pc, #152]	@ (8007c48 <_printf_i+0x234>)
 8007bae:	e7e9      	b.n	8007b84 <_printf_i+0x170>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	f023 0320 	bic.w	r3, r3, #32
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	e7f6      	b.n	8007ba8 <_printf_i+0x194>
 8007bba:	4616      	mov	r6, r2
 8007bbc:	e7bd      	b.n	8007b3a <_printf_i+0x126>
 8007bbe:	6833      	ldr	r3, [r6, #0]
 8007bc0:	6825      	ldr	r5, [r4, #0]
 8007bc2:	6961      	ldr	r1, [r4, #20]
 8007bc4:	1d18      	adds	r0, r3, #4
 8007bc6:	6030      	str	r0, [r6, #0]
 8007bc8:	062e      	lsls	r6, r5, #24
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	d501      	bpl.n	8007bd2 <_printf_i+0x1be>
 8007bce:	6019      	str	r1, [r3, #0]
 8007bd0:	e002      	b.n	8007bd8 <_printf_i+0x1c4>
 8007bd2:	0668      	lsls	r0, r5, #25
 8007bd4:	d5fb      	bpl.n	8007bce <_printf_i+0x1ba>
 8007bd6:	8019      	strh	r1, [r3, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	6123      	str	r3, [r4, #16]
 8007bdc:	4616      	mov	r6, r2
 8007bde:	e7bc      	b.n	8007b5a <_printf_i+0x146>
 8007be0:	6833      	ldr	r3, [r6, #0]
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	6032      	str	r2, [r6, #0]
 8007be6:	681e      	ldr	r6, [r3, #0]
 8007be8:	6862      	ldr	r2, [r4, #4]
 8007bea:	2100      	movs	r1, #0
 8007bec:	4630      	mov	r0, r6
 8007bee:	f7f8 faef 	bl	80001d0 <memchr>
 8007bf2:	b108      	cbz	r0, 8007bf8 <_printf_i+0x1e4>
 8007bf4:	1b80      	subs	r0, r0, r6
 8007bf6:	6060      	str	r0, [r4, #4]
 8007bf8:	6863      	ldr	r3, [r4, #4]
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c02:	e7aa      	b.n	8007b5a <_printf_i+0x146>
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	4632      	mov	r2, r6
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	47d0      	blx	sl
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d0ad      	beq.n	8007b6e <_printf_i+0x15a>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	079b      	lsls	r3, r3, #30
 8007c16:	d413      	bmi.n	8007c40 <_printf_i+0x22c>
 8007c18:	68e0      	ldr	r0, [r4, #12]
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	4298      	cmp	r0, r3
 8007c1e:	bfb8      	it	lt
 8007c20:	4618      	movlt	r0, r3
 8007c22:	e7a6      	b.n	8007b72 <_printf_i+0x15e>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4632      	mov	r2, r6
 8007c28:	4649      	mov	r1, r9
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	47d0      	blx	sl
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d09d      	beq.n	8007b6e <_printf_i+0x15a>
 8007c32:	3501      	adds	r5, #1
 8007c34:	68e3      	ldr	r3, [r4, #12]
 8007c36:	9903      	ldr	r1, [sp, #12]
 8007c38:	1a5b      	subs	r3, r3, r1
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	dcf2      	bgt.n	8007c24 <_printf_i+0x210>
 8007c3e:	e7eb      	b.n	8007c18 <_printf_i+0x204>
 8007c40:	2500      	movs	r5, #0
 8007c42:	f104 0619 	add.w	r6, r4, #25
 8007c46:	e7f5      	b.n	8007c34 <_printf_i+0x220>
 8007c48:	0800c0e6 	.word	0x0800c0e6
 8007c4c:	0800c0f7 	.word	0x0800c0f7

08007c50 <_scanf_float>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	b087      	sub	sp, #28
 8007c56:	4691      	mov	r9, r2
 8007c58:	9303      	str	r3, [sp, #12]
 8007c5a:	688b      	ldr	r3, [r1, #8]
 8007c5c:	1e5a      	subs	r2, r3, #1
 8007c5e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007c62:	bf81      	itttt	hi
 8007c64:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007c68:	eb03 0b05 	addhi.w	fp, r3, r5
 8007c6c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007c70:	608b      	strhi	r3, [r1, #8]
 8007c72:	680b      	ldr	r3, [r1, #0]
 8007c74:	460a      	mov	r2, r1
 8007c76:	f04f 0500 	mov.w	r5, #0
 8007c7a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007c7e:	f842 3b1c 	str.w	r3, [r2], #28
 8007c82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c86:	4680      	mov	r8, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	bf98      	it	ls
 8007c8c:	f04f 0b00 	movls.w	fp, #0
 8007c90:	9201      	str	r2, [sp, #4]
 8007c92:	4616      	mov	r6, r2
 8007c94:	46aa      	mov	sl, r5
 8007c96:	462f      	mov	r7, r5
 8007c98:	9502      	str	r5, [sp, #8]
 8007c9a:	68a2      	ldr	r2, [r4, #8]
 8007c9c:	b15a      	cbz	r2, 8007cb6 <_scanf_float+0x66>
 8007c9e:	f8d9 3000 	ldr.w	r3, [r9]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b4e      	cmp	r3, #78	@ 0x4e
 8007ca6:	d863      	bhi.n	8007d70 <_scanf_float+0x120>
 8007ca8:	2b40      	cmp	r3, #64	@ 0x40
 8007caa:	d83b      	bhi.n	8007d24 <_scanf_float+0xd4>
 8007cac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007cb0:	b2c8      	uxtb	r0, r1
 8007cb2:	280e      	cmp	r0, #14
 8007cb4:	d939      	bls.n	8007d2a <_scanf_float+0xda>
 8007cb6:	b11f      	cbz	r7, 8007cc0 <_scanf_float+0x70>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cc4:	f1ba 0f01 	cmp.w	sl, #1
 8007cc8:	f200 8114 	bhi.w	8007ef4 <_scanf_float+0x2a4>
 8007ccc:	9b01      	ldr	r3, [sp, #4]
 8007cce:	429e      	cmp	r6, r3
 8007cd0:	f200 8105 	bhi.w	8007ede <_scanf_float+0x28e>
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	b007      	add	sp, #28
 8007cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007ce0:	2a0d      	cmp	r2, #13
 8007ce2:	d8e8      	bhi.n	8007cb6 <_scanf_float+0x66>
 8007ce4:	a101      	add	r1, pc, #4	@ (adr r1, 8007cec <_scanf_float+0x9c>)
 8007ce6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007e35 	.word	0x08007e35
 8007cf0:	08007cb7 	.word	0x08007cb7
 8007cf4:	08007cb7 	.word	0x08007cb7
 8007cf8:	08007cb7 	.word	0x08007cb7
 8007cfc:	08007e91 	.word	0x08007e91
 8007d00:	08007e6b 	.word	0x08007e6b
 8007d04:	08007cb7 	.word	0x08007cb7
 8007d08:	08007cb7 	.word	0x08007cb7
 8007d0c:	08007e43 	.word	0x08007e43
 8007d10:	08007cb7 	.word	0x08007cb7
 8007d14:	08007cb7 	.word	0x08007cb7
 8007d18:	08007cb7 	.word	0x08007cb7
 8007d1c:	08007cb7 	.word	0x08007cb7
 8007d20:	08007dff 	.word	0x08007dff
 8007d24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007d28:	e7da      	b.n	8007ce0 <_scanf_float+0x90>
 8007d2a:	290e      	cmp	r1, #14
 8007d2c:	d8c3      	bhi.n	8007cb6 <_scanf_float+0x66>
 8007d2e:	a001      	add	r0, pc, #4	@ (adr r0, 8007d34 <_scanf_float+0xe4>)
 8007d30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d34:	08007def 	.word	0x08007def
 8007d38:	08007cb7 	.word	0x08007cb7
 8007d3c:	08007def 	.word	0x08007def
 8007d40:	08007e7f 	.word	0x08007e7f
 8007d44:	08007cb7 	.word	0x08007cb7
 8007d48:	08007d91 	.word	0x08007d91
 8007d4c:	08007dd5 	.word	0x08007dd5
 8007d50:	08007dd5 	.word	0x08007dd5
 8007d54:	08007dd5 	.word	0x08007dd5
 8007d58:	08007dd5 	.word	0x08007dd5
 8007d5c:	08007dd5 	.word	0x08007dd5
 8007d60:	08007dd5 	.word	0x08007dd5
 8007d64:	08007dd5 	.word	0x08007dd5
 8007d68:	08007dd5 	.word	0x08007dd5
 8007d6c:	08007dd5 	.word	0x08007dd5
 8007d70:	2b6e      	cmp	r3, #110	@ 0x6e
 8007d72:	d809      	bhi.n	8007d88 <_scanf_float+0x138>
 8007d74:	2b60      	cmp	r3, #96	@ 0x60
 8007d76:	d8b1      	bhi.n	8007cdc <_scanf_float+0x8c>
 8007d78:	2b54      	cmp	r3, #84	@ 0x54
 8007d7a:	d07b      	beq.n	8007e74 <_scanf_float+0x224>
 8007d7c:	2b59      	cmp	r3, #89	@ 0x59
 8007d7e:	d19a      	bne.n	8007cb6 <_scanf_float+0x66>
 8007d80:	2d07      	cmp	r5, #7
 8007d82:	d198      	bne.n	8007cb6 <_scanf_float+0x66>
 8007d84:	2508      	movs	r5, #8
 8007d86:	e02f      	b.n	8007de8 <_scanf_float+0x198>
 8007d88:	2b74      	cmp	r3, #116	@ 0x74
 8007d8a:	d073      	beq.n	8007e74 <_scanf_float+0x224>
 8007d8c:	2b79      	cmp	r3, #121	@ 0x79
 8007d8e:	e7f6      	b.n	8007d7e <_scanf_float+0x12e>
 8007d90:	6821      	ldr	r1, [r4, #0]
 8007d92:	05c8      	lsls	r0, r1, #23
 8007d94:	d51e      	bpl.n	8007dd4 <_scanf_float+0x184>
 8007d96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007d9a:	6021      	str	r1, [r4, #0]
 8007d9c:	3701      	adds	r7, #1
 8007d9e:	f1bb 0f00 	cmp.w	fp, #0
 8007da2:	d003      	beq.n	8007dac <_scanf_float+0x15c>
 8007da4:	3201      	adds	r2, #1
 8007da6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007daa:	60a2      	str	r2, [r4, #8]
 8007dac:	68a3      	ldr	r3, [r4, #8]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	60a3      	str	r3, [r4, #8]
 8007db2:	6923      	ldr	r3, [r4, #16]
 8007db4:	3301      	adds	r3, #1
 8007db6:	6123      	str	r3, [r4, #16]
 8007db8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f8c9 3004 	str.w	r3, [r9, #4]
 8007dc4:	f340 8082 	ble.w	8007ecc <_scanf_float+0x27c>
 8007dc8:	f8d9 3000 	ldr.w	r3, [r9]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	f8c9 3000 	str.w	r3, [r9]
 8007dd2:	e762      	b.n	8007c9a <_scanf_float+0x4a>
 8007dd4:	eb1a 0105 	adds.w	r1, sl, r5
 8007dd8:	f47f af6d 	bne.w	8007cb6 <_scanf_float+0x66>
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007de2:	6022      	str	r2, [r4, #0]
 8007de4:	460d      	mov	r5, r1
 8007de6:	468a      	mov	sl, r1
 8007de8:	f806 3b01 	strb.w	r3, [r6], #1
 8007dec:	e7de      	b.n	8007dac <_scanf_float+0x15c>
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	0610      	lsls	r0, r2, #24
 8007df2:	f57f af60 	bpl.w	8007cb6 <_scanf_float+0x66>
 8007df6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007dfa:	6022      	str	r2, [r4, #0]
 8007dfc:	e7f4      	b.n	8007de8 <_scanf_float+0x198>
 8007dfe:	f1ba 0f00 	cmp.w	sl, #0
 8007e02:	d10c      	bne.n	8007e1e <_scanf_float+0x1ce>
 8007e04:	b977      	cbnz	r7, 8007e24 <_scanf_float+0x1d4>
 8007e06:	6822      	ldr	r2, [r4, #0]
 8007e08:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e0c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e10:	d108      	bne.n	8007e24 <_scanf_float+0x1d4>
 8007e12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	f04f 0a01 	mov.w	sl, #1
 8007e1c:	e7e4      	b.n	8007de8 <_scanf_float+0x198>
 8007e1e:	f1ba 0f02 	cmp.w	sl, #2
 8007e22:	d050      	beq.n	8007ec6 <_scanf_float+0x276>
 8007e24:	2d01      	cmp	r5, #1
 8007e26:	d002      	beq.n	8007e2e <_scanf_float+0x1de>
 8007e28:	2d04      	cmp	r5, #4
 8007e2a:	f47f af44 	bne.w	8007cb6 <_scanf_float+0x66>
 8007e2e:	3501      	adds	r5, #1
 8007e30:	b2ed      	uxtb	r5, r5
 8007e32:	e7d9      	b.n	8007de8 <_scanf_float+0x198>
 8007e34:	f1ba 0f01 	cmp.w	sl, #1
 8007e38:	f47f af3d 	bne.w	8007cb6 <_scanf_float+0x66>
 8007e3c:	f04f 0a02 	mov.w	sl, #2
 8007e40:	e7d2      	b.n	8007de8 <_scanf_float+0x198>
 8007e42:	b975      	cbnz	r5, 8007e62 <_scanf_float+0x212>
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	f47f af37 	bne.w	8007cb8 <_scanf_float+0x68>
 8007e4a:	6822      	ldr	r2, [r4, #0]
 8007e4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e54:	f040 8103 	bne.w	800805e <_scanf_float+0x40e>
 8007e58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e5c:	6022      	str	r2, [r4, #0]
 8007e5e:	2501      	movs	r5, #1
 8007e60:	e7c2      	b.n	8007de8 <_scanf_float+0x198>
 8007e62:	2d03      	cmp	r5, #3
 8007e64:	d0e3      	beq.n	8007e2e <_scanf_float+0x1de>
 8007e66:	2d05      	cmp	r5, #5
 8007e68:	e7df      	b.n	8007e2a <_scanf_float+0x1da>
 8007e6a:	2d02      	cmp	r5, #2
 8007e6c:	f47f af23 	bne.w	8007cb6 <_scanf_float+0x66>
 8007e70:	2503      	movs	r5, #3
 8007e72:	e7b9      	b.n	8007de8 <_scanf_float+0x198>
 8007e74:	2d06      	cmp	r5, #6
 8007e76:	f47f af1e 	bne.w	8007cb6 <_scanf_float+0x66>
 8007e7a:	2507      	movs	r5, #7
 8007e7c:	e7b4      	b.n	8007de8 <_scanf_float+0x198>
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	0591      	lsls	r1, r2, #22
 8007e82:	f57f af18 	bpl.w	8007cb6 <_scanf_float+0x66>
 8007e86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007e8a:	6022      	str	r2, [r4, #0]
 8007e8c:	9702      	str	r7, [sp, #8]
 8007e8e:	e7ab      	b.n	8007de8 <_scanf_float+0x198>
 8007e90:	6822      	ldr	r2, [r4, #0]
 8007e92:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007e96:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007e9a:	d005      	beq.n	8007ea8 <_scanf_float+0x258>
 8007e9c:	0550      	lsls	r0, r2, #21
 8007e9e:	f57f af0a 	bpl.w	8007cb6 <_scanf_float+0x66>
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	f000 80db 	beq.w	800805e <_scanf_float+0x40e>
 8007ea8:	0591      	lsls	r1, r2, #22
 8007eaa:	bf58      	it	pl
 8007eac:	9902      	ldrpl	r1, [sp, #8]
 8007eae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007eb2:	bf58      	it	pl
 8007eb4:	1a79      	subpl	r1, r7, r1
 8007eb6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007eba:	bf58      	it	pl
 8007ebc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ec0:	6022      	str	r2, [r4, #0]
 8007ec2:	2700      	movs	r7, #0
 8007ec4:	e790      	b.n	8007de8 <_scanf_float+0x198>
 8007ec6:	f04f 0a03 	mov.w	sl, #3
 8007eca:	e78d      	b.n	8007de8 <_scanf_float+0x198>
 8007ecc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	4798      	blx	r3
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f43f aedf 	beq.w	8007c9a <_scanf_float+0x4a>
 8007edc:	e6eb      	b.n	8007cb6 <_scanf_float+0x66>
 8007ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ee2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	4640      	mov	r0, r8
 8007eea:	4798      	blx	r3
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	6123      	str	r3, [r4, #16]
 8007ef2:	e6eb      	b.n	8007ccc <_scanf_float+0x7c>
 8007ef4:	1e6b      	subs	r3, r5, #1
 8007ef6:	2b06      	cmp	r3, #6
 8007ef8:	d824      	bhi.n	8007f44 <_scanf_float+0x2f4>
 8007efa:	2d02      	cmp	r5, #2
 8007efc:	d836      	bhi.n	8007f6c <_scanf_float+0x31c>
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	429e      	cmp	r6, r3
 8007f02:	f67f aee7 	bls.w	8007cd4 <_scanf_float+0x84>
 8007f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f0e:	464a      	mov	r2, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	4798      	blx	r3
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	e7f0      	b.n	8007efe <_scanf_float+0x2ae>
 8007f1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f20:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007f24:	464a      	mov	r2, r9
 8007f26:	4640      	mov	r0, r8
 8007f28:	4798      	blx	r3
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	6123      	str	r3, [r4, #16]
 8007f30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f34:	fa5f fa8a 	uxtb.w	sl, sl
 8007f38:	f1ba 0f02 	cmp.w	sl, #2
 8007f3c:	d1ee      	bne.n	8007f1c <_scanf_float+0x2cc>
 8007f3e:	3d03      	subs	r5, #3
 8007f40:	b2ed      	uxtb	r5, r5
 8007f42:	1b76      	subs	r6, r6, r5
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	05da      	lsls	r2, r3, #23
 8007f48:	d530      	bpl.n	8007fac <_scanf_float+0x35c>
 8007f4a:	055b      	lsls	r3, r3, #21
 8007f4c:	d511      	bpl.n	8007f72 <_scanf_float+0x322>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	429e      	cmp	r6, r3
 8007f52:	f67f aebf 	bls.w	8007cd4 <_scanf_float+0x84>
 8007f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f5e:	464a      	mov	r2, r9
 8007f60:	4640      	mov	r0, r8
 8007f62:	4798      	blx	r3
 8007f64:	6923      	ldr	r3, [r4, #16]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	e7f0      	b.n	8007f4e <_scanf_float+0x2fe>
 8007f6c:	46aa      	mov	sl, r5
 8007f6e:	46b3      	mov	fp, r6
 8007f70:	e7de      	b.n	8007f30 <_scanf_float+0x2e0>
 8007f72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	2965      	cmp	r1, #101	@ 0x65
 8007f7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f82:	6123      	str	r3, [r4, #16]
 8007f84:	d00c      	beq.n	8007fa0 <_scanf_float+0x350>
 8007f86:	2945      	cmp	r1, #69	@ 0x45
 8007f88:	d00a      	beq.n	8007fa0 <_scanf_float+0x350>
 8007f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f8e:	464a      	mov	r2, r9
 8007f90:	4640      	mov	r0, r8
 8007f92:	4798      	blx	r3
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	1eb5      	subs	r5, r6, #2
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fa4:	464a      	mov	r2, r9
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	4798      	blx	r3
 8007faa:	462e      	mov	r6, r5
 8007fac:	6822      	ldr	r2, [r4, #0]
 8007fae:	f012 0210 	ands.w	r2, r2, #16
 8007fb2:	d001      	beq.n	8007fb8 <_scanf_float+0x368>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e68e      	b.n	8007cd6 <_scanf_float+0x86>
 8007fb8:	7032      	strb	r2, [r6, #0]
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc4:	d125      	bne.n	8008012 <_scanf_float+0x3c2>
 8007fc6:	9b02      	ldr	r3, [sp, #8]
 8007fc8:	429f      	cmp	r7, r3
 8007fca:	d00a      	beq.n	8007fe2 <_scanf_float+0x392>
 8007fcc:	1bda      	subs	r2, r3, r7
 8007fce:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007fd2:	429e      	cmp	r6, r3
 8007fd4:	bf28      	it	cs
 8007fd6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007fda:	4922      	ldr	r1, [pc, #136]	@ (8008064 <_scanf_float+0x414>)
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f000 f93d 	bl	800825c <siprintf>
 8007fe2:	9901      	ldr	r1, [sp, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	f002 fc36 	bl	800a858 <_strtod_r>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	6821      	ldr	r1, [r4, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f011 0f02 	tst.w	r1, #2
 8007ff6:	ec57 6b10 	vmov	r6, r7, d0
 8007ffa:	f103 0204 	add.w	r2, r3, #4
 8007ffe:	d015      	beq.n	800802c <_scanf_float+0x3dc>
 8008000:	9903      	ldr	r1, [sp, #12]
 8008002:	600a      	str	r2, [r1, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	e9c3 6700 	strd	r6, r7, [r3]
 800800a:	68e3      	ldr	r3, [r4, #12]
 800800c:	3301      	adds	r3, #1
 800800e:	60e3      	str	r3, [r4, #12]
 8008010:	e7d0      	b.n	8007fb4 <_scanf_float+0x364>
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0e4      	beq.n	8007fe2 <_scanf_float+0x392>
 8008018:	9905      	ldr	r1, [sp, #20]
 800801a:	230a      	movs	r3, #10
 800801c:	3101      	adds	r1, #1
 800801e:	4640      	mov	r0, r8
 8008020:	f002 fc9a 	bl	800a958 <_strtol_r>
 8008024:	9b04      	ldr	r3, [sp, #16]
 8008026:	9e05      	ldr	r6, [sp, #20]
 8008028:	1ac2      	subs	r2, r0, r3
 800802a:	e7d0      	b.n	8007fce <_scanf_float+0x37e>
 800802c:	f011 0f04 	tst.w	r1, #4
 8008030:	9903      	ldr	r1, [sp, #12]
 8008032:	600a      	str	r2, [r1, #0]
 8008034:	d1e6      	bne.n	8008004 <_scanf_float+0x3b4>
 8008036:	681d      	ldr	r5, [r3, #0]
 8008038:	4632      	mov	r2, r6
 800803a:	463b      	mov	r3, r7
 800803c:	4630      	mov	r0, r6
 800803e:	4639      	mov	r1, r7
 8008040:	f7f8 fd74 	bl	8000b2c <__aeabi_dcmpun>
 8008044:	b128      	cbz	r0, 8008052 <_scanf_float+0x402>
 8008046:	4808      	ldr	r0, [pc, #32]	@ (8008068 <_scanf_float+0x418>)
 8008048:	f000 f9fc 	bl	8008444 <nanf>
 800804c:	ed85 0a00 	vstr	s0, [r5]
 8008050:	e7db      	b.n	800800a <_scanf_float+0x3ba>
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 fdc7 	bl	8000be8 <__aeabi_d2f>
 800805a:	6028      	str	r0, [r5, #0]
 800805c:	e7d5      	b.n	800800a <_scanf_float+0x3ba>
 800805e:	2700      	movs	r7, #0
 8008060:	e62e      	b.n	8007cc0 <_scanf_float+0x70>
 8008062:	bf00      	nop
 8008064:	0800c108 	.word	0x0800c108
 8008068:	0800c249 	.word	0x0800c249

0800806c <std>:
 800806c:	2300      	movs	r3, #0
 800806e:	b510      	push	{r4, lr}
 8008070:	4604      	mov	r4, r0
 8008072:	e9c0 3300 	strd	r3, r3, [r0]
 8008076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800807a:	6083      	str	r3, [r0, #8]
 800807c:	8181      	strh	r1, [r0, #12]
 800807e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008080:	81c2      	strh	r2, [r0, #14]
 8008082:	6183      	str	r3, [r0, #24]
 8008084:	4619      	mov	r1, r3
 8008086:	2208      	movs	r2, #8
 8008088:	305c      	adds	r0, #92	@ 0x5c
 800808a:	f000 f94c 	bl	8008326 <memset>
 800808e:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <std+0x58>)
 8008090:	6263      	str	r3, [r4, #36]	@ 0x24
 8008092:	4b0d      	ldr	r3, [pc, #52]	@ (80080c8 <std+0x5c>)
 8008094:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008096:	4b0d      	ldr	r3, [pc, #52]	@ (80080cc <std+0x60>)
 8008098:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800809a:	4b0d      	ldr	r3, [pc, #52]	@ (80080d0 <std+0x64>)
 800809c:	6323      	str	r3, [r4, #48]	@ 0x30
 800809e:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <std+0x68>)
 80080a0:	6224      	str	r4, [r4, #32]
 80080a2:	429c      	cmp	r4, r3
 80080a4:	d006      	beq.n	80080b4 <std+0x48>
 80080a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080aa:	4294      	cmp	r4, r2
 80080ac:	d002      	beq.n	80080b4 <std+0x48>
 80080ae:	33d0      	adds	r3, #208	@ 0xd0
 80080b0:	429c      	cmp	r4, r3
 80080b2:	d105      	bne.n	80080c0 <std+0x54>
 80080b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080bc:	f000 b9b0 	b.w	8008420 <__retarget_lock_init_recursive>
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	bf00      	nop
 80080c4:	080082a1 	.word	0x080082a1
 80080c8:	080082c3 	.word	0x080082c3
 80080cc:	080082fb 	.word	0x080082fb
 80080d0:	0800831f 	.word	0x0800831f
 80080d4:	200021b4 	.word	0x200021b4

080080d8 <stdio_exit_handler>:
 80080d8:	4a02      	ldr	r2, [pc, #8]	@ (80080e4 <stdio_exit_handler+0xc>)
 80080da:	4903      	ldr	r1, [pc, #12]	@ (80080e8 <stdio_exit_handler+0x10>)
 80080dc:	4803      	ldr	r0, [pc, #12]	@ (80080ec <stdio_exit_handler+0x14>)
 80080de:	f000 b869 	b.w	80081b4 <_fwalk_sglue>
 80080e2:	bf00      	nop
 80080e4:	20000bf0 	.word	0x20000bf0
 80080e8:	0800ad15 	.word	0x0800ad15
 80080ec:	20000c00 	.word	0x20000c00

080080f0 <cleanup_stdio>:
 80080f0:	6841      	ldr	r1, [r0, #4]
 80080f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008124 <cleanup_stdio+0x34>)
 80080f4:	4299      	cmp	r1, r3
 80080f6:	b510      	push	{r4, lr}
 80080f8:	4604      	mov	r4, r0
 80080fa:	d001      	beq.n	8008100 <cleanup_stdio+0x10>
 80080fc:	f002 fe0a 	bl	800ad14 <_fflush_r>
 8008100:	68a1      	ldr	r1, [r4, #8]
 8008102:	4b09      	ldr	r3, [pc, #36]	@ (8008128 <cleanup_stdio+0x38>)
 8008104:	4299      	cmp	r1, r3
 8008106:	d002      	beq.n	800810e <cleanup_stdio+0x1e>
 8008108:	4620      	mov	r0, r4
 800810a:	f002 fe03 	bl	800ad14 <_fflush_r>
 800810e:	68e1      	ldr	r1, [r4, #12]
 8008110:	4b06      	ldr	r3, [pc, #24]	@ (800812c <cleanup_stdio+0x3c>)
 8008112:	4299      	cmp	r1, r3
 8008114:	d004      	beq.n	8008120 <cleanup_stdio+0x30>
 8008116:	4620      	mov	r0, r4
 8008118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800811c:	f002 bdfa 	b.w	800ad14 <_fflush_r>
 8008120:	bd10      	pop	{r4, pc}
 8008122:	bf00      	nop
 8008124:	200021b4 	.word	0x200021b4
 8008128:	2000221c 	.word	0x2000221c
 800812c:	20002284 	.word	0x20002284

08008130 <global_stdio_init.part.0>:
 8008130:	b510      	push	{r4, lr}
 8008132:	4b0b      	ldr	r3, [pc, #44]	@ (8008160 <global_stdio_init.part.0+0x30>)
 8008134:	4c0b      	ldr	r4, [pc, #44]	@ (8008164 <global_stdio_init.part.0+0x34>)
 8008136:	4a0c      	ldr	r2, [pc, #48]	@ (8008168 <global_stdio_init.part.0+0x38>)
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	4620      	mov	r0, r4
 800813c:	2200      	movs	r2, #0
 800813e:	2104      	movs	r1, #4
 8008140:	f7ff ff94 	bl	800806c <std>
 8008144:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008148:	2201      	movs	r2, #1
 800814a:	2109      	movs	r1, #9
 800814c:	f7ff ff8e 	bl	800806c <std>
 8008150:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008154:	2202      	movs	r2, #2
 8008156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800815a:	2112      	movs	r1, #18
 800815c:	f7ff bf86 	b.w	800806c <std>
 8008160:	200022ec 	.word	0x200022ec
 8008164:	200021b4 	.word	0x200021b4
 8008168:	080080d9 	.word	0x080080d9

0800816c <__sfp_lock_acquire>:
 800816c:	4801      	ldr	r0, [pc, #4]	@ (8008174 <__sfp_lock_acquire+0x8>)
 800816e:	f000 b958 	b.w	8008422 <__retarget_lock_acquire_recursive>
 8008172:	bf00      	nop
 8008174:	200022f5 	.word	0x200022f5

08008178 <__sfp_lock_release>:
 8008178:	4801      	ldr	r0, [pc, #4]	@ (8008180 <__sfp_lock_release+0x8>)
 800817a:	f000 b953 	b.w	8008424 <__retarget_lock_release_recursive>
 800817e:	bf00      	nop
 8008180:	200022f5 	.word	0x200022f5

08008184 <__sinit>:
 8008184:	b510      	push	{r4, lr}
 8008186:	4604      	mov	r4, r0
 8008188:	f7ff fff0 	bl	800816c <__sfp_lock_acquire>
 800818c:	6a23      	ldr	r3, [r4, #32]
 800818e:	b11b      	cbz	r3, 8008198 <__sinit+0x14>
 8008190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008194:	f7ff bff0 	b.w	8008178 <__sfp_lock_release>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__sinit+0x28>)
 800819a:	6223      	str	r3, [r4, #32]
 800819c:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <__sinit+0x2c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f5      	bne.n	8008190 <__sinit+0xc>
 80081a4:	f7ff ffc4 	bl	8008130 <global_stdio_init.part.0>
 80081a8:	e7f2      	b.n	8008190 <__sinit+0xc>
 80081aa:	bf00      	nop
 80081ac:	080080f1 	.word	0x080080f1
 80081b0:	200022ec 	.word	0x200022ec

080081b4 <_fwalk_sglue>:
 80081b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	4607      	mov	r7, r0
 80081ba:	4688      	mov	r8, r1
 80081bc:	4614      	mov	r4, r2
 80081be:	2600      	movs	r6, #0
 80081c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081c4:	f1b9 0901 	subs.w	r9, r9, #1
 80081c8:	d505      	bpl.n	80081d6 <_fwalk_sglue+0x22>
 80081ca:	6824      	ldr	r4, [r4, #0]
 80081cc:	2c00      	cmp	r4, #0
 80081ce:	d1f7      	bne.n	80081c0 <_fwalk_sglue+0xc>
 80081d0:	4630      	mov	r0, r6
 80081d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d907      	bls.n	80081ec <_fwalk_sglue+0x38>
 80081dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081e0:	3301      	adds	r3, #1
 80081e2:	d003      	beq.n	80081ec <_fwalk_sglue+0x38>
 80081e4:	4629      	mov	r1, r5
 80081e6:	4638      	mov	r0, r7
 80081e8:	47c0      	blx	r8
 80081ea:	4306      	orrs	r6, r0
 80081ec:	3568      	adds	r5, #104	@ 0x68
 80081ee:	e7e9      	b.n	80081c4 <_fwalk_sglue+0x10>

080081f0 <sniprintf>:
 80081f0:	b40c      	push	{r2, r3}
 80081f2:	b530      	push	{r4, r5, lr}
 80081f4:	4b18      	ldr	r3, [pc, #96]	@ (8008258 <sniprintf+0x68>)
 80081f6:	1e0c      	subs	r4, r1, #0
 80081f8:	681d      	ldr	r5, [r3, #0]
 80081fa:	b09d      	sub	sp, #116	@ 0x74
 80081fc:	da08      	bge.n	8008210 <sniprintf+0x20>
 80081fe:	238b      	movs	r3, #139	@ 0x8b
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	f04f 30ff 	mov.w	r0, #4294967295
 8008206:	b01d      	add	sp, #116	@ 0x74
 8008208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800820c:	b002      	add	sp, #8
 800820e:	4770      	bx	lr
 8008210:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008214:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800821e:	bf14      	ite	ne
 8008220:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008224:	4623      	moveq	r3, r4
 8008226:	9304      	str	r3, [sp, #16]
 8008228:	9307      	str	r3, [sp, #28]
 800822a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800822e:	9002      	str	r0, [sp, #8]
 8008230:	9006      	str	r0, [sp, #24]
 8008232:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008236:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008238:	ab21      	add	r3, sp, #132	@ 0x84
 800823a:	a902      	add	r1, sp, #8
 800823c:	4628      	mov	r0, r5
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	f002 fbe8 	bl	800aa14 <_svfiprintf_r>
 8008244:	1c43      	adds	r3, r0, #1
 8008246:	bfbc      	itt	lt
 8008248:	238b      	movlt	r3, #139	@ 0x8b
 800824a:	602b      	strlt	r3, [r5, #0]
 800824c:	2c00      	cmp	r4, #0
 800824e:	d0da      	beq.n	8008206 <sniprintf+0x16>
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	2200      	movs	r2, #0
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e7d6      	b.n	8008206 <sniprintf+0x16>
 8008258:	20000bfc 	.word	0x20000bfc

0800825c <siprintf>:
 800825c:	b40e      	push	{r1, r2, r3}
 800825e:	b510      	push	{r4, lr}
 8008260:	b09d      	sub	sp, #116	@ 0x74
 8008262:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008264:	9002      	str	r0, [sp, #8]
 8008266:	9006      	str	r0, [sp, #24]
 8008268:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800826c:	480a      	ldr	r0, [pc, #40]	@ (8008298 <siprintf+0x3c>)
 800826e:	9107      	str	r1, [sp, #28]
 8008270:	9104      	str	r1, [sp, #16]
 8008272:	490a      	ldr	r1, [pc, #40]	@ (800829c <siprintf+0x40>)
 8008274:	f853 2b04 	ldr.w	r2, [r3], #4
 8008278:	9105      	str	r1, [sp, #20]
 800827a:	2400      	movs	r4, #0
 800827c:	a902      	add	r1, sp, #8
 800827e:	6800      	ldr	r0, [r0, #0]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008284:	f002 fbc6 	bl	800aa14 <_svfiprintf_r>
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	701c      	strb	r4, [r3, #0]
 800828c:	b01d      	add	sp, #116	@ 0x74
 800828e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008292:	b003      	add	sp, #12
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000bfc 	.word	0x20000bfc
 800829c:	ffff0208 	.word	0xffff0208

080082a0 <__sread>:
 80082a0:	b510      	push	{r4, lr}
 80082a2:	460c      	mov	r4, r1
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	f000 f86c 	bl	8008384 <_read_r>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	bfab      	itete	ge
 80082b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082b2:	89a3      	ldrhlt	r3, [r4, #12]
 80082b4:	181b      	addge	r3, r3, r0
 80082b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082ba:	bfac      	ite	ge
 80082bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082be:	81a3      	strhlt	r3, [r4, #12]
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <__swrite>:
 80082c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	461f      	mov	r7, r3
 80082c8:	898b      	ldrh	r3, [r1, #12]
 80082ca:	05db      	lsls	r3, r3, #23
 80082cc:	4605      	mov	r5, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	4616      	mov	r6, r2
 80082d2:	d505      	bpl.n	80082e0 <__swrite+0x1e>
 80082d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d8:	2302      	movs	r3, #2
 80082da:	2200      	movs	r2, #0
 80082dc:	f000 f840 	bl	8008360 <_lseek_r>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	4628      	mov	r0, r5
 80082f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f6:	f000 b857 	b.w	80083a8 <_write_r>

080082fa <__sseek>:
 80082fa:	b510      	push	{r4, lr}
 80082fc:	460c      	mov	r4, r1
 80082fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008302:	f000 f82d 	bl	8008360 <_lseek_r>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	bf15      	itete	ne
 800830c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800830e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008316:	81a3      	strheq	r3, [r4, #12]
 8008318:	bf18      	it	ne
 800831a:	81a3      	strhne	r3, [r4, #12]
 800831c:	bd10      	pop	{r4, pc}

0800831e <__sclose>:
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 b80d 	b.w	8008340 <_close_r>

08008326 <memset>:
 8008326:	4402      	add	r2, r0
 8008328:	4603      	mov	r3, r0
 800832a:	4293      	cmp	r3, r2
 800832c:	d100      	bne.n	8008330 <memset+0xa>
 800832e:	4770      	bx	lr
 8008330:	f803 1b01 	strb.w	r1, [r3], #1
 8008334:	e7f9      	b.n	800832a <memset+0x4>
	...

08008338 <_localeconv_r>:
 8008338:	4800      	ldr	r0, [pc, #0]	@ (800833c <_localeconv_r+0x4>)
 800833a:	4770      	bx	lr
 800833c:	20000d3c 	.word	0x20000d3c

08008340 <_close_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d06      	ldr	r5, [pc, #24]	@ (800835c <_close_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7fa f81c 	bl	8002388 <_close>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_close_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_close_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	200022f0 	.word	0x200022f0

08008360 <_lseek_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	@ (8008380 <_lseek_r+0x20>)
 8008364:	4604      	mov	r4, r0
 8008366:	4608      	mov	r0, r1
 8008368:	4611      	mov	r1, r2
 800836a:	2200      	movs	r2, #0
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7fa f831 	bl	80023d6 <_lseek>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_lseek_r+0x1e>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_lseek_r+0x1e>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	200022f0 	.word	0x200022f0

08008384 <_read_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d07      	ldr	r5, [pc, #28]	@ (80083a4 <_read_r+0x20>)
 8008388:	4604      	mov	r4, r0
 800838a:	4608      	mov	r0, r1
 800838c:	4611      	mov	r1, r2
 800838e:	2200      	movs	r2, #0
 8008390:	602a      	str	r2, [r5, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	f7f9 ffbf 	bl	8002316 <_read>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_read_r+0x1e>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_read_r+0x1e>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	200022f0 	.word	0x200022f0

080083a8 <_write_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d07      	ldr	r5, [pc, #28]	@ (80083c8 <_write_r+0x20>)
 80083ac:	4604      	mov	r4, r0
 80083ae:	4608      	mov	r0, r1
 80083b0:	4611      	mov	r1, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	602a      	str	r2, [r5, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f7f9 ffca 	bl	8002350 <_write>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d102      	bne.n	80083c6 <_write_r+0x1e>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	b103      	cbz	r3, 80083c6 <_write_r+0x1e>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	200022f0 	.word	0x200022f0

080083cc <__errno>:
 80083cc:	4b01      	ldr	r3, [pc, #4]	@ (80083d4 <__errno+0x8>)
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20000bfc 	.word	0x20000bfc

080083d8 <__libc_init_array>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	4d0d      	ldr	r5, [pc, #52]	@ (8008410 <__libc_init_array+0x38>)
 80083dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008414 <__libc_init_array+0x3c>)
 80083de:	1b64      	subs	r4, r4, r5
 80083e0:	10a4      	asrs	r4, r4, #2
 80083e2:	2600      	movs	r6, #0
 80083e4:	42a6      	cmp	r6, r4
 80083e6:	d109      	bne.n	80083fc <__libc_init_array+0x24>
 80083e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008418 <__libc_init_array+0x40>)
 80083ea:	4c0c      	ldr	r4, [pc, #48]	@ (800841c <__libc_init_array+0x44>)
 80083ec:	f003 fdfa 	bl	800bfe4 <_init>
 80083f0:	1b64      	subs	r4, r4, r5
 80083f2:	10a4      	asrs	r4, r4, #2
 80083f4:	2600      	movs	r6, #0
 80083f6:	42a6      	cmp	r6, r4
 80083f8:	d105      	bne.n	8008406 <__libc_init_array+0x2e>
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008400:	4798      	blx	r3
 8008402:	3601      	adds	r6, #1
 8008404:	e7ee      	b.n	80083e4 <__libc_init_array+0xc>
 8008406:	f855 3b04 	ldr.w	r3, [r5], #4
 800840a:	4798      	blx	r3
 800840c:	3601      	adds	r6, #1
 800840e:	e7f2      	b.n	80083f6 <__libc_init_array+0x1e>
 8008410:	0800c504 	.word	0x0800c504
 8008414:	0800c504 	.word	0x0800c504
 8008418:	0800c504 	.word	0x0800c504
 800841c:	0800c508 	.word	0x0800c508

08008420 <__retarget_lock_init_recursive>:
 8008420:	4770      	bx	lr

08008422 <__retarget_lock_acquire_recursive>:
 8008422:	4770      	bx	lr

08008424 <__retarget_lock_release_recursive>:
 8008424:	4770      	bx	lr

08008426 <memcpy>:
 8008426:	440a      	add	r2, r1
 8008428:	4291      	cmp	r1, r2
 800842a:	f100 33ff 	add.w	r3, r0, #4294967295
 800842e:	d100      	bne.n	8008432 <memcpy+0xc>
 8008430:	4770      	bx	lr
 8008432:	b510      	push	{r4, lr}
 8008434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800843c:	4291      	cmp	r1, r2
 800843e:	d1f9      	bne.n	8008434 <memcpy+0xe>
 8008440:	bd10      	pop	{r4, pc}
	...

08008444 <nanf>:
 8008444:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800844c <nanf+0x8>
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	7fc00000 	.word	0x7fc00000

08008450 <quorem>:
 8008450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	6903      	ldr	r3, [r0, #16]
 8008456:	690c      	ldr	r4, [r1, #16]
 8008458:	42a3      	cmp	r3, r4
 800845a:	4607      	mov	r7, r0
 800845c:	db7e      	blt.n	800855c <quorem+0x10c>
 800845e:	3c01      	subs	r4, #1
 8008460:	f101 0814 	add.w	r8, r1, #20
 8008464:	00a3      	lsls	r3, r4, #2
 8008466:	f100 0514 	add.w	r5, r0, #20
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800847a:	3301      	adds	r3, #1
 800847c:	429a      	cmp	r2, r3
 800847e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008482:	fbb2 f6f3 	udiv	r6, r2, r3
 8008486:	d32e      	bcc.n	80084e6 <quorem+0x96>
 8008488:	f04f 0a00 	mov.w	sl, #0
 800848c:	46c4      	mov	ip, r8
 800848e:	46ae      	mov	lr, r5
 8008490:	46d3      	mov	fp, sl
 8008492:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008496:	b298      	uxth	r0, r3
 8008498:	fb06 a000 	mla	r0, r6, r0, sl
 800849c:	0c02      	lsrs	r2, r0, #16
 800849e:	0c1b      	lsrs	r3, r3, #16
 80084a0:	fb06 2303 	mla	r3, r6, r3, r2
 80084a4:	f8de 2000 	ldr.w	r2, [lr]
 80084a8:	b280      	uxth	r0, r0
 80084aa:	b292      	uxth	r2, r2
 80084ac:	1a12      	subs	r2, r2, r0
 80084ae:	445a      	add	r2, fp
 80084b0:	f8de 0000 	ldr.w	r0, [lr]
 80084b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084c2:	b292      	uxth	r2, r2
 80084c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084c8:	45e1      	cmp	r9, ip
 80084ca:	f84e 2b04 	str.w	r2, [lr], #4
 80084ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084d2:	d2de      	bcs.n	8008492 <quorem+0x42>
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	58eb      	ldr	r3, [r5, r3]
 80084d8:	b92b      	cbnz	r3, 80084e6 <quorem+0x96>
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	3b04      	subs	r3, #4
 80084de:	429d      	cmp	r5, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	d32f      	bcc.n	8008544 <quorem+0xf4>
 80084e4:	613c      	str	r4, [r7, #16]
 80084e6:	4638      	mov	r0, r7
 80084e8:	f001 f9c6 	bl	8009878 <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	db25      	blt.n	800853c <quorem+0xec>
 80084f0:	4629      	mov	r1, r5
 80084f2:	2000      	movs	r0, #0
 80084f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80084f8:	f8d1 c000 	ldr.w	ip, [r1]
 80084fc:	fa1f fe82 	uxth.w	lr, r2
 8008500:	fa1f f38c 	uxth.w	r3, ip
 8008504:	eba3 030e 	sub.w	r3, r3, lr
 8008508:	4403      	add	r3, r0
 800850a:	0c12      	lsrs	r2, r2, #16
 800850c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008510:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008514:	b29b      	uxth	r3, r3
 8008516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800851a:	45c1      	cmp	r9, r8
 800851c:	f841 3b04 	str.w	r3, [r1], #4
 8008520:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008524:	d2e6      	bcs.n	80084f4 <quorem+0xa4>
 8008526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800852a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800852e:	b922      	cbnz	r2, 800853a <quorem+0xea>
 8008530:	3b04      	subs	r3, #4
 8008532:	429d      	cmp	r5, r3
 8008534:	461a      	mov	r2, r3
 8008536:	d30b      	bcc.n	8008550 <quorem+0x100>
 8008538:	613c      	str	r4, [r7, #16]
 800853a:	3601      	adds	r6, #1
 800853c:	4630      	mov	r0, r6
 800853e:	b003      	add	sp, #12
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	6812      	ldr	r2, [r2, #0]
 8008546:	3b04      	subs	r3, #4
 8008548:	2a00      	cmp	r2, #0
 800854a:	d1cb      	bne.n	80084e4 <quorem+0x94>
 800854c:	3c01      	subs	r4, #1
 800854e:	e7c6      	b.n	80084de <quorem+0x8e>
 8008550:	6812      	ldr	r2, [r2, #0]
 8008552:	3b04      	subs	r3, #4
 8008554:	2a00      	cmp	r2, #0
 8008556:	d1ef      	bne.n	8008538 <quorem+0xe8>
 8008558:	3c01      	subs	r4, #1
 800855a:	e7ea      	b.n	8008532 <quorem+0xe2>
 800855c:	2000      	movs	r0, #0
 800855e:	e7ee      	b.n	800853e <quorem+0xee>

08008560 <_dtoa_r>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	69c7      	ldr	r7, [r0, #28]
 8008566:	b097      	sub	sp, #92	@ 0x5c
 8008568:	ed8d 0b04 	vstr	d0, [sp, #16]
 800856c:	ec55 4b10 	vmov	r4, r5, d0
 8008570:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008572:	9107      	str	r1, [sp, #28]
 8008574:	4681      	mov	r9, r0
 8008576:	920c      	str	r2, [sp, #48]	@ 0x30
 8008578:	9311      	str	r3, [sp, #68]	@ 0x44
 800857a:	b97f      	cbnz	r7, 800859c <_dtoa_r+0x3c>
 800857c:	2010      	movs	r0, #16
 800857e:	f000 fe09 	bl	8009194 <malloc>
 8008582:	4602      	mov	r2, r0
 8008584:	f8c9 001c 	str.w	r0, [r9, #28]
 8008588:	b920      	cbnz	r0, 8008594 <_dtoa_r+0x34>
 800858a:	4ba9      	ldr	r3, [pc, #676]	@ (8008830 <_dtoa_r+0x2d0>)
 800858c:	21ef      	movs	r1, #239	@ 0xef
 800858e:	48a9      	ldr	r0, [pc, #676]	@ (8008834 <_dtoa_r+0x2d4>)
 8008590:	f002 fc2e 	bl	800adf0 <__assert_func>
 8008594:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008598:	6007      	str	r7, [r0, #0]
 800859a:	60c7      	str	r7, [r0, #12]
 800859c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085a0:	6819      	ldr	r1, [r3, #0]
 80085a2:	b159      	cbz	r1, 80085bc <_dtoa_r+0x5c>
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	604a      	str	r2, [r1, #4]
 80085a8:	2301      	movs	r3, #1
 80085aa:	4093      	lsls	r3, r2
 80085ac:	608b      	str	r3, [r1, #8]
 80085ae:	4648      	mov	r0, r9
 80085b0:	f000 fee6 	bl	8009380 <_Bfree>
 80085b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	1e2b      	subs	r3, r5, #0
 80085be:	bfb9      	ittee	lt
 80085c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085c4:	9305      	strlt	r3, [sp, #20]
 80085c6:	2300      	movge	r3, #0
 80085c8:	6033      	strge	r3, [r6, #0]
 80085ca:	9f05      	ldr	r7, [sp, #20]
 80085cc:	4b9a      	ldr	r3, [pc, #616]	@ (8008838 <_dtoa_r+0x2d8>)
 80085ce:	bfbc      	itt	lt
 80085d0:	2201      	movlt	r2, #1
 80085d2:	6032      	strlt	r2, [r6, #0]
 80085d4:	43bb      	bics	r3, r7
 80085d6:	d112      	bne.n	80085fe <_dtoa_r+0x9e>
 80085d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80085da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085e4:	4323      	orrs	r3, r4
 80085e6:	f000 855a 	beq.w	800909e <_dtoa_r+0xb3e>
 80085ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800884c <_dtoa_r+0x2ec>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 855c 	beq.w	80090ae <_dtoa_r+0xb4e>
 80085f6:	f10a 0303 	add.w	r3, sl, #3
 80085fa:	f000 bd56 	b.w	80090aa <_dtoa_r+0xb4a>
 80085fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008602:	2200      	movs	r2, #0
 8008604:	ec51 0b17 	vmov	r0, r1, d7
 8008608:	2300      	movs	r3, #0
 800860a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800860e:	f7f8 fa5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008612:	4680      	mov	r8, r0
 8008614:	b158      	cbz	r0, 800862e <_dtoa_r+0xce>
 8008616:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008618:	2301      	movs	r3, #1
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800861e:	b113      	cbz	r3, 8008626 <_dtoa_r+0xc6>
 8008620:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008622:	4b86      	ldr	r3, [pc, #536]	@ (800883c <_dtoa_r+0x2dc>)
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008850 <_dtoa_r+0x2f0>
 800862a:	f000 bd40 	b.w	80090ae <_dtoa_r+0xb4e>
 800862e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008632:	aa14      	add	r2, sp, #80	@ 0x50
 8008634:	a915      	add	r1, sp, #84	@ 0x54
 8008636:	4648      	mov	r0, r9
 8008638:	f001 fa3e 	bl	8009ab8 <__d2b>
 800863c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008640:	9002      	str	r0, [sp, #8]
 8008642:	2e00      	cmp	r6, #0
 8008644:	d078      	beq.n	8008738 <_dtoa_r+0x1d8>
 8008646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008648:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800864c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008654:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008658:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800865c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008660:	4619      	mov	r1, r3
 8008662:	2200      	movs	r2, #0
 8008664:	4b76      	ldr	r3, [pc, #472]	@ (8008840 <_dtoa_r+0x2e0>)
 8008666:	f7f7 fe0f 	bl	8000288 <__aeabi_dsub>
 800866a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008818 <_dtoa_r+0x2b8>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	f7f7 ffc2 	bl	80005f8 <__aeabi_dmul>
 8008674:	a36a      	add	r3, pc, #424	@ (adr r3, 8008820 <_dtoa_r+0x2c0>)
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f7f7 fe07 	bl	800028c <__adddf3>
 800867e:	4604      	mov	r4, r0
 8008680:	4630      	mov	r0, r6
 8008682:	460d      	mov	r5, r1
 8008684:	f7f7 ff4e 	bl	8000524 <__aeabi_i2d>
 8008688:	a367      	add	r3, pc, #412	@ (adr r3, 8008828 <_dtoa_r+0x2c8>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	f7f7 ffb3 	bl	80005f8 <__aeabi_dmul>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4620      	mov	r0, r4
 8008698:	4629      	mov	r1, r5
 800869a:	f7f7 fdf7 	bl	800028c <__adddf3>
 800869e:	4604      	mov	r4, r0
 80086a0:	460d      	mov	r5, r1
 80086a2:	f7f8 fa59 	bl	8000b58 <__aeabi_d2iz>
 80086a6:	2200      	movs	r2, #0
 80086a8:	4607      	mov	r7, r0
 80086aa:	2300      	movs	r3, #0
 80086ac:	4620      	mov	r0, r4
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7f8 fa14 	bl	8000adc <__aeabi_dcmplt>
 80086b4:	b140      	cbz	r0, 80086c8 <_dtoa_r+0x168>
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7f7 ff34 	bl	8000524 <__aeabi_i2d>
 80086bc:	4622      	mov	r2, r4
 80086be:	462b      	mov	r3, r5
 80086c0:	f7f8 fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 80086c4:	b900      	cbnz	r0, 80086c8 <_dtoa_r+0x168>
 80086c6:	3f01      	subs	r7, #1
 80086c8:	2f16      	cmp	r7, #22
 80086ca:	d852      	bhi.n	8008772 <_dtoa_r+0x212>
 80086cc:	4b5d      	ldr	r3, [pc, #372]	@ (8008844 <_dtoa_r+0x2e4>)
 80086ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086da:	f7f8 f9ff 	bl	8000adc <__aeabi_dcmplt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d049      	beq.n	8008776 <_dtoa_r+0x216>
 80086e2:	3f01      	subs	r7, #1
 80086e4:	2300      	movs	r3, #0
 80086e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80086e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086ea:	1b9b      	subs	r3, r3, r6
 80086ec:	1e5a      	subs	r2, r3, #1
 80086ee:	bf45      	ittet	mi
 80086f0:	f1c3 0301 	rsbmi	r3, r3, #1
 80086f4:	9300      	strmi	r3, [sp, #0]
 80086f6:	2300      	movpl	r3, #0
 80086f8:	2300      	movmi	r3, #0
 80086fa:	9206      	str	r2, [sp, #24]
 80086fc:	bf54      	ite	pl
 80086fe:	9300      	strpl	r3, [sp, #0]
 8008700:	9306      	strmi	r3, [sp, #24]
 8008702:	2f00      	cmp	r7, #0
 8008704:	db39      	blt.n	800877a <_dtoa_r+0x21a>
 8008706:	9b06      	ldr	r3, [sp, #24]
 8008708:	970d      	str	r7, [sp, #52]	@ 0x34
 800870a:	443b      	add	r3, r7
 800870c:	9306      	str	r3, [sp, #24]
 800870e:	2300      	movs	r3, #0
 8008710:	9308      	str	r3, [sp, #32]
 8008712:	9b07      	ldr	r3, [sp, #28]
 8008714:	2b09      	cmp	r3, #9
 8008716:	d863      	bhi.n	80087e0 <_dtoa_r+0x280>
 8008718:	2b05      	cmp	r3, #5
 800871a:	bfc4      	itt	gt
 800871c:	3b04      	subgt	r3, #4
 800871e:	9307      	strgt	r3, [sp, #28]
 8008720:	9b07      	ldr	r3, [sp, #28]
 8008722:	f1a3 0302 	sub.w	r3, r3, #2
 8008726:	bfcc      	ite	gt
 8008728:	2400      	movgt	r4, #0
 800872a:	2401      	movle	r4, #1
 800872c:	2b03      	cmp	r3, #3
 800872e:	d863      	bhi.n	80087f8 <_dtoa_r+0x298>
 8008730:	e8df f003 	tbb	[pc, r3]
 8008734:	2b375452 	.word	0x2b375452
 8008738:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800873c:	441e      	add	r6, r3
 800873e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008742:	2b20      	cmp	r3, #32
 8008744:	bfc1      	itttt	gt
 8008746:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800874a:	409f      	lslgt	r7, r3
 800874c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008750:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008754:	bfd6      	itet	le
 8008756:	f1c3 0320 	rsble	r3, r3, #32
 800875a:	ea47 0003 	orrgt.w	r0, r7, r3
 800875e:	fa04 f003 	lslle.w	r0, r4, r3
 8008762:	f7f7 fecf 	bl	8000504 <__aeabi_ui2d>
 8008766:	2201      	movs	r2, #1
 8008768:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800876c:	3e01      	subs	r6, #1
 800876e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008770:	e776      	b.n	8008660 <_dtoa_r+0x100>
 8008772:	2301      	movs	r3, #1
 8008774:	e7b7      	b.n	80086e6 <_dtoa_r+0x186>
 8008776:	9010      	str	r0, [sp, #64]	@ 0x40
 8008778:	e7b6      	b.n	80086e8 <_dtoa_r+0x188>
 800877a:	9b00      	ldr	r3, [sp, #0]
 800877c:	1bdb      	subs	r3, r3, r7
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	427b      	negs	r3, r7
 8008782:	9308      	str	r3, [sp, #32]
 8008784:	2300      	movs	r3, #0
 8008786:	930d      	str	r3, [sp, #52]	@ 0x34
 8008788:	e7c3      	b.n	8008712 <_dtoa_r+0x1b2>
 800878a:	2301      	movs	r3, #1
 800878c:	9309      	str	r3, [sp, #36]	@ 0x24
 800878e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008790:	eb07 0b03 	add.w	fp, r7, r3
 8008794:	f10b 0301 	add.w	r3, fp, #1
 8008798:	2b01      	cmp	r3, #1
 800879a:	9303      	str	r3, [sp, #12]
 800879c:	bfb8      	it	lt
 800879e:	2301      	movlt	r3, #1
 80087a0:	e006      	b.n	80087b0 <_dtoa_r+0x250>
 80087a2:	2301      	movs	r3, #1
 80087a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dd28      	ble.n	80087fe <_dtoa_r+0x29e>
 80087ac:	469b      	mov	fp, r3
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80087b4:	2100      	movs	r1, #0
 80087b6:	2204      	movs	r2, #4
 80087b8:	f102 0514 	add.w	r5, r2, #20
 80087bc:	429d      	cmp	r5, r3
 80087be:	d926      	bls.n	800880e <_dtoa_r+0x2ae>
 80087c0:	6041      	str	r1, [r0, #4]
 80087c2:	4648      	mov	r0, r9
 80087c4:	f000 fd9c 	bl	8009300 <_Balloc>
 80087c8:	4682      	mov	sl, r0
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d142      	bne.n	8008854 <_dtoa_r+0x2f4>
 80087ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008848 <_dtoa_r+0x2e8>)
 80087d0:	4602      	mov	r2, r0
 80087d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80087d6:	e6da      	b.n	800858e <_dtoa_r+0x2e>
 80087d8:	2300      	movs	r3, #0
 80087da:	e7e3      	b.n	80087a4 <_dtoa_r+0x244>
 80087dc:	2300      	movs	r3, #0
 80087de:	e7d5      	b.n	800878c <_dtoa_r+0x22c>
 80087e0:	2401      	movs	r4, #1
 80087e2:	2300      	movs	r3, #0
 80087e4:	9307      	str	r3, [sp, #28]
 80087e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80087e8:	f04f 3bff 	mov.w	fp, #4294967295
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80087f2:	2312      	movs	r3, #18
 80087f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80087f6:	e7db      	b.n	80087b0 <_dtoa_r+0x250>
 80087f8:	2301      	movs	r3, #1
 80087fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fc:	e7f4      	b.n	80087e8 <_dtoa_r+0x288>
 80087fe:	f04f 0b01 	mov.w	fp, #1
 8008802:	f8cd b00c 	str.w	fp, [sp, #12]
 8008806:	465b      	mov	r3, fp
 8008808:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800880c:	e7d0      	b.n	80087b0 <_dtoa_r+0x250>
 800880e:	3101      	adds	r1, #1
 8008810:	0052      	lsls	r2, r2, #1
 8008812:	e7d1      	b.n	80087b8 <_dtoa_r+0x258>
 8008814:	f3af 8000 	nop.w
 8008818:	636f4361 	.word	0x636f4361
 800881c:	3fd287a7 	.word	0x3fd287a7
 8008820:	8b60c8b3 	.word	0x8b60c8b3
 8008824:	3fc68a28 	.word	0x3fc68a28
 8008828:	509f79fb 	.word	0x509f79fb
 800882c:	3fd34413 	.word	0x3fd34413
 8008830:	0800c11a 	.word	0x0800c11a
 8008834:	0800c131 	.word	0x0800c131
 8008838:	7ff00000 	.word	0x7ff00000
 800883c:	0800c0e5 	.word	0x0800c0e5
 8008840:	3ff80000 	.word	0x3ff80000
 8008844:	0800c2e0 	.word	0x0800c2e0
 8008848:	0800c189 	.word	0x0800c189
 800884c:	0800c116 	.word	0x0800c116
 8008850:	0800c0e4 	.word	0x0800c0e4
 8008854:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008858:	6018      	str	r0, [r3, #0]
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	2b0e      	cmp	r3, #14
 800885e:	f200 80a1 	bhi.w	80089a4 <_dtoa_r+0x444>
 8008862:	2c00      	cmp	r4, #0
 8008864:	f000 809e 	beq.w	80089a4 <_dtoa_r+0x444>
 8008868:	2f00      	cmp	r7, #0
 800886a:	dd33      	ble.n	80088d4 <_dtoa_r+0x374>
 800886c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ae0 <_dtoa_r+0x580>)
 800886e:	f007 020f 	and.w	r2, r7, #15
 8008872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008876:	ed93 7b00 	vldr	d7, [r3]
 800887a:	05f8      	lsls	r0, r7, #23
 800887c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008880:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008884:	d516      	bpl.n	80088b4 <_dtoa_r+0x354>
 8008886:	4b97      	ldr	r3, [pc, #604]	@ (8008ae4 <_dtoa_r+0x584>)
 8008888:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800888c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008890:	f7f7 ffdc 	bl	800084c <__aeabi_ddiv>
 8008894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008898:	f004 040f 	and.w	r4, r4, #15
 800889c:	2603      	movs	r6, #3
 800889e:	4d91      	ldr	r5, [pc, #580]	@ (8008ae4 <_dtoa_r+0x584>)
 80088a0:	b954      	cbnz	r4, 80088b8 <_dtoa_r+0x358>
 80088a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088aa:	f7f7 ffcf 	bl	800084c <__aeabi_ddiv>
 80088ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088b2:	e028      	b.n	8008906 <_dtoa_r+0x3a6>
 80088b4:	2602      	movs	r6, #2
 80088b6:	e7f2      	b.n	800889e <_dtoa_r+0x33e>
 80088b8:	07e1      	lsls	r1, r4, #31
 80088ba:	d508      	bpl.n	80088ce <_dtoa_r+0x36e>
 80088bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088c4:	f7f7 fe98 	bl	80005f8 <__aeabi_dmul>
 80088c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088cc:	3601      	adds	r6, #1
 80088ce:	1064      	asrs	r4, r4, #1
 80088d0:	3508      	adds	r5, #8
 80088d2:	e7e5      	b.n	80088a0 <_dtoa_r+0x340>
 80088d4:	f000 80af 	beq.w	8008a36 <_dtoa_r+0x4d6>
 80088d8:	427c      	negs	r4, r7
 80088da:	4b81      	ldr	r3, [pc, #516]	@ (8008ae0 <_dtoa_r+0x580>)
 80088dc:	4d81      	ldr	r5, [pc, #516]	@ (8008ae4 <_dtoa_r+0x584>)
 80088de:	f004 020f 	and.w	r2, r4, #15
 80088e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088ee:	f7f7 fe83 	bl	80005f8 <__aeabi_dmul>
 80088f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088f6:	1124      	asrs	r4, r4, #4
 80088f8:	2300      	movs	r3, #0
 80088fa:	2602      	movs	r6, #2
 80088fc:	2c00      	cmp	r4, #0
 80088fe:	f040 808f 	bne.w	8008a20 <_dtoa_r+0x4c0>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1d3      	bne.n	80088ae <_dtoa_r+0x34e>
 8008906:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008908:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 8094 	beq.w	8008a3a <_dtoa_r+0x4da>
 8008912:	4b75      	ldr	r3, [pc, #468]	@ (8008ae8 <_dtoa_r+0x588>)
 8008914:	2200      	movs	r2, #0
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f8 f8df 	bl	8000adc <__aeabi_dcmplt>
 800891e:	2800      	cmp	r0, #0
 8008920:	f000 808b 	beq.w	8008a3a <_dtoa_r+0x4da>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 8087 	beq.w	8008a3a <_dtoa_r+0x4da>
 800892c:	f1bb 0f00 	cmp.w	fp, #0
 8008930:	dd34      	ble.n	800899c <_dtoa_r+0x43c>
 8008932:	4620      	mov	r0, r4
 8008934:	4b6d      	ldr	r3, [pc, #436]	@ (8008aec <_dtoa_r+0x58c>)
 8008936:	2200      	movs	r2, #0
 8008938:	4629      	mov	r1, r5
 800893a:	f7f7 fe5d 	bl	80005f8 <__aeabi_dmul>
 800893e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008942:	f107 38ff 	add.w	r8, r7, #4294967295
 8008946:	3601      	adds	r6, #1
 8008948:	465c      	mov	r4, fp
 800894a:	4630      	mov	r0, r6
 800894c:	f7f7 fdea 	bl	8000524 <__aeabi_i2d>
 8008950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008954:	f7f7 fe50 	bl	80005f8 <__aeabi_dmul>
 8008958:	4b65      	ldr	r3, [pc, #404]	@ (8008af0 <_dtoa_r+0x590>)
 800895a:	2200      	movs	r2, #0
 800895c:	f7f7 fc96 	bl	800028c <__adddf3>
 8008960:	4605      	mov	r5, r0
 8008962:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008966:	2c00      	cmp	r4, #0
 8008968:	d16a      	bne.n	8008a40 <_dtoa_r+0x4e0>
 800896a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800896e:	4b61      	ldr	r3, [pc, #388]	@ (8008af4 <_dtoa_r+0x594>)
 8008970:	2200      	movs	r2, #0
 8008972:	f7f7 fc89 	bl	8000288 <__aeabi_dsub>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800897e:	462a      	mov	r2, r5
 8008980:	4633      	mov	r3, r6
 8008982:	f7f8 f8c9 	bl	8000b18 <__aeabi_dcmpgt>
 8008986:	2800      	cmp	r0, #0
 8008988:	f040 8298 	bne.w	8008ebc <_dtoa_r+0x95c>
 800898c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008990:	462a      	mov	r2, r5
 8008992:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008996:	f7f8 f8a1 	bl	8000adc <__aeabi_dcmplt>
 800899a:	bb38      	cbnz	r0, 80089ec <_dtoa_r+0x48c>
 800899c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80089a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80089a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f2c0 8157 	blt.w	8008c5a <_dtoa_r+0x6fa>
 80089ac:	2f0e      	cmp	r7, #14
 80089ae:	f300 8154 	bgt.w	8008c5a <_dtoa_r+0x6fa>
 80089b2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ae0 <_dtoa_r+0x580>)
 80089b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089b8:	ed93 7b00 	vldr	d7, [r3]
 80089bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089be:	2b00      	cmp	r3, #0
 80089c0:	ed8d 7b00 	vstr	d7, [sp]
 80089c4:	f280 80e5 	bge.w	8008b92 <_dtoa_r+0x632>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f300 80e1 	bgt.w	8008b92 <_dtoa_r+0x632>
 80089d0:	d10c      	bne.n	80089ec <_dtoa_r+0x48c>
 80089d2:	4b48      	ldr	r3, [pc, #288]	@ (8008af4 <_dtoa_r+0x594>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	ec51 0b17 	vmov	r0, r1, d7
 80089da:	f7f7 fe0d 	bl	80005f8 <__aeabi_dmul>
 80089de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089e2:	f7f8 f88f 	bl	8000b04 <__aeabi_dcmpge>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f000 8266 	beq.w	8008eb8 <_dtoa_r+0x958>
 80089ec:	2400      	movs	r4, #0
 80089ee:	4625      	mov	r5, r4
 80089f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089f2:	4656      	mov	r6, sl
 80089f4:	ea6f 0803 	mvn.w	r8, r3
 80089f8:	2700      	movs	r7, #0
 80089fa:	4621      	mov	r1, r4
 80089fc:	4648      	mov	r0, r9
 80089fe:	f000 fcbf 	bl	8009380 <_Bfree>
 8008a02:	2d00      	cmp	r5, #0
 8008a04:	f000 80bd 	beq.w	8008b82 <_dtoa_r+0x622>
 8008a08:	b12f      	cbz	r7, 8008a16 <_dtoa_r+0x4b6>
 8008a0a:	42af      	cmp	r7, r5
 8008a0c:	d003      	beq.n	8008a16 <_dtoa_r+0x4b6>
 8008a0e:	4639      	mov	r1, r7
 8008a10:	4648      	mov	r0, r9
 8008a12:	f000 fcb5 	bl	8009380 <_Bfree>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4648      	mov	r0, r9
 8008a1a:	f000 fcb1 	bl	8009380 <_Bfree>
 8008a1e:	e0b0      	b.n	8008b82 <_dtoa_r+0x622>
 8008a20:	07e2      	lsls	r2, r4, #31
 8008a22:	d505      	bpl.n	8008a30 <_dtoa_r+0x4d0>
 8008a24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a28:	f7f7 fde6 	bl	80005f8 <__aeabi_dmul>
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	2301      	movs	r3, #1
 8008a30:	1064      	asrs	r4, r4, #1
 8008a32:	3508      	adds	r5, #8
 8008a34:	e762      	b.n	80088fc <_dtoa_r+0x39c>
 8008a36:	2602      	movs	r6, #2
 8008a38:	e765      	b.n	8008906 <_dtoa_r+0x3a6>
 8008a3a:	9c03      	ldr	r4, [sp, #12]
 8008a3c:	46b8      	mov	r8, r7
 8008a3e:	e784      	b.n	800894a <_dtoa_r+0x3ea>
 8008a40:	4b27      	ldr	r3, [pc, #156]	@ (8008ae0 <_dtoa_r+0x580>)
 8008a42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a4c:	4454      	add	r4, sl
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d054      	beq.n	8008afc <_dtoa_r+0x59c>
 8008a52:	4929      	ldr	r1, [pc, #164]	@ (8008af8 <_dtoa_r+0x598>)
 8008a54:	2000      	movs	r0, #0
 8008a56:	f7f7 fef9 	bl	800084c <__aeabi_ddiv>
 8008a5a:	4633      	mov	r3, r6
 8008a5c:	462a      	mov	r2, r5
 8008a5e:	f7f7 fc13 	bl	8000288 <__aeabi_dsub>
 8008a62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a66:	4656      	mov	r6, sl
 8008a68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a6c:	f7f8 f874 	bl	8000b58 <__aeabi_d2iz>
 8008a70:	4605      	mov	r5, r0
 8008a72:	f7f7 fd57 	bl	8000524 <__aeabi_i2d>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a7e:	f7f7 fc03 	bl	8000288 <__aeabi_dsub>
 8008a82:	3530      	adds	r5, #48	@ 0x30
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a8c:	f806 5b01 	strb.w	r5, [r6], #1
 8008a90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a94:	f7f8 f822 	bl	8000adc <__aeabi_dcmplt>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d172      	bne.n	8008b82 <_dtoa_r+0x622>
 8008a9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aa0:	4911      	ldr	r1, [pc, #68]	@ (8008ae8 <_dtoa_r+0x588>)
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	f7f7 fbf0 	bl	8000288 <__aeabi_dsub>
 8008aa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008aac:	f7f8 f816 	bl	8000adc <__aeabi_dcmplt>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f040 80b4 	bne.w	8008c1e <_dtoa_r+0x6be>
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	f43f af70 	beq.w	800899c <_dtoa_r+0x43c>
 8008abc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <_dtoa_r+0x58c>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f7f7 fd98 	bl	80005f8 <__aeabi_dmul>
 8008ac8:	4b08      	ldr	r3, [pc, #32]	@ (8008aec <_dtoa_r+0x58c>)
 8008aca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ace:	2200      	movs	r2, #0
 8008ad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008adc:	e7c4      	b.n	8008a68 <_dtoa_r+0x508>
 8008ade:	bf00      	nop
 8008ae0:	0800c2e0 	.word	0x0800c2e0
 8008ae4:	0800c2b8 	.word	0x0800c2b8
 8008ae8:	3ff00000 	.word	0x3ff00000
 8008aec:	40240000 	.word	0x40240000
 8008af0:	401c0000 	.word	0x401c0000
 8008af4:	40140000 	.word	0x40140000
 8008af8:	3fe00000 	.word	0x3fe00000
 8008afc:	4631      	mov	r1, r6
 8008afe:	4628      	mov	r0, r5
 8008b00:	f7f7 fd7a 	bl	80005f8 <__aeabi_dmul>
 8008b04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b08:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008b0a:	4656      	mov	r6, sl
 8008b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b10:	f7f8 f822 	bl	8000b58 <__aeabi_d2iz>
 8008b14:	4605      	mov	r5, r0
 8008b16:	f7f7 fd05 	bl	8000524 <__aeabi_i2d>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b22:	f7f7 fbb1 	bl	8000288 <__aeabi_dsub>
 8008b26:	3530      	adds	r5, #48	@ 0x30
 8008b28:	f806 5b01 	strb.w	r5, [r6], #1
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	42a6      	cmp	r6, r4
 8008b32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	d124      	bne.n	8008b86 <_dtoa_r+0x626>
 8008b3c:	4baf      	ldr	r3, [pc, #700]	@ (8008dfc <_dtoa_r+0x89c>)
 8008b3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b42:	f7f7 fba3 	bl	800028c <__adddf3>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b4e:	f7f7 ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d163      	bne.n	8008c1e <_dtoa_r+0x6be>
 8008b56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b5a:	49a8      	ldr	r1, [pc, #672]	@ (8008dfc <_dtoa_r+0x89c>)
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f7f7 fb93 	bl	8000288 <__aeabi_dsub>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b6a:	f7f7 ffb7 	bl	8000adc <__aeabi_dcmplt>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f43f af14 	beq.w	800899c <_dtoa_r+0x43c>
 8008b74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b76:	1e73      	subs	r3, r6, #1
 8008b78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b7e:	2b30      	cmp	r3, #48	@ 0x30
 8008b80:	d0f8      	beq.n	8008b74 <_dtoa_r+0x614>
 8008b82:	4647      	mov	r7, r8
 8008b84:	e03b      	b.n	8008bfe <_dtoa_r+0x69e>
 8008b86:	4b9e      	ldr	r3, [pc, #632]	@ (8008e00 <_dtoa_r+0x8a0>)
 8008b88:	f7f7 fd36 	bl	80005f8 <__aeabi_dmul>
 8008b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b90:	e7bc      	b.n	8008b0c <_dtoa_r+0x5ac>
 8008b92:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b96:	4656      	mov	r6, sl
 8008b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	f7f7 fe54 	bl	800084c <__aeabi_ddiv>
 8008ba4:	f7f7 ffd8 	bl	8000b58 <__aeabi_d2iz>
 8008ba8:	4680      	mov	r8, r0
 8008baa:	f7f7 fcbb 	bl	8000524 <__aeabi_i2d>
 8008bae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bb2:	f7f7 fd21 	bl	80005f8 <__aeabi_dmul>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008bc2:	f7f7 fb61 	bl	8000288 <__aeabi_dsub>
 8008bc6:	f806 4b01 	strb.w	r4, [r6], #1
 8008bca:	9d03      	ldr	r5, [sp, #12]
 8008bcc:	eba6 040a 	sub.w	r4, r6, sl
 8008bd0:	42a5      	cmp	r5, r4
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	d133      	bne.n	8008c40 <_dtoa_r+0x6e0>
 8008bd8:	f7f7 fb58 	bl	800028c <__adddf3>
 8008bdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008be0:	4604      	mov	r4, r0
 8008be2:	460d      	mov	r5, r1
 8008be4:	f7f7 ff98 	bl	8000b18 <__aeabi_dcmpgt>
 8008be8:	b9c0      	cbnz	r0, 8008c1c <_dtoa_r+0x6bc>
 8008bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	f7f7 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bf6:	b110      	cbz	r0, 8008bfe <_dtoa_r+0x69e>
 8008bf8:	f018 0f01 	tst.w	r8, #1
 8008bfc:	d10e      	bne.n	8008c1c <_dtoa_r+0x6bc>
 8008bfe:	9902      	ldr	r1, [sp, #8]
 8008c00:	4648      	mov	r0, r9
 8008c02:	f000 fbbd 	bl	8009380 <_Bfree>
 8008c06:	2300      	movs	r3, #0
 8008c08:	7033      	strb	r3, [r6, #0]
 8008c0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c0c:	3701      	adds	r7, #1
 8008c0e:	601f      	str	r7, [r3, #0]
 8008c10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 824b 	beq.w	80090ae <_dtoa_r+0xb4e>
 8008c18:	601e      	str	r6, [r3, #0]
 8008c1a:	e248      	b.n	80090ae <_dtoa_r+0xb4e>
 8008c1c:	46b8      	mov	r8, r7
 8008c1e:	4633      	mov	r3, r6
 8008c20:	461e      	mov	r6, r3
 8008c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c26:	2a39      	cmp	r2, #57	@ 0x39
 8008c28:	d106      	bne.n	8008c38 <_dtoa_r+0x6d8>
 8008c2a:	459a      	cmp	sl, r3
 8008c2c:	d1f8      	bne.n	8008c20 <_dtoa_r+0x6c0>
 8008c2e:	2230      	movs	r2, #48	@ 0x30
 8008c30:	f108 0801 	add.w	r8, r8, #1
 8008c34:	f88a 2000 	strb.w	r2, [sl]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	3201      	adds	r2, #1
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e7a0      	b.n	8008b82 <_dtoa_r+0x622>
 8008c40:	4b6f      	ldr	r3, [pc, #444]	@ (8008e00 <_dtoa_r+0x8a0>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	f7f7 fcd8 	bl	80005f8 <__aeabi_dmul>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	460d      	mov	r5, r1
 8008c50:	f7f7 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d09f      	beq.n	8008b98 <_dtoa_r+0x638>
 8008c58:	e7d1      	b.n	8008bfe <_dtoa_r+0x69e>
 8008c5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	f000 80ea 	beq.w	8008e36 <_dtoa_r+0x8d6>
 8008c62:	9a07      	ldr	r2, [sp, #28]
 8008c64:	2a01      	cmp	r2, #1
 8008c66:	f300 80cd 	bgt.w	8008e04 <_dtoa_r+0x8a4>
 8008c6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c6c:	2a00      	cmp	r2, #0
 8008c6e:	f000 80c1 	beq.w	8008df4 <_dtoa_r+0x894>
 8008c72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c76:	9c08      	ldr	r4, [sp, #32]
 8008c78:	9e00      	ldr	r6, [sp, #0]
 8008c7a:	9a00      	ldr	r2, [sp, #0]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	9200      	str	r2, [sp, #0]
 8008c80:	9a06      	ldr	r2, [sp, #24]
 8008c82:	2101      	movs	r1, #1
 8008c84:	441a      	add	r2, r3
 8008c86:	4648      	mov	r0, r9
 8008c88:	9206      	str	r2, [sp, #24]
 8008c8a:	f000 fc77 	bl	800957c <__i2b>
 8008c8e:	4605      	mov	r5, r0
 8008c90:	b166      	cbz	r6, 8008cac <_dtoa_r+0x74c>
 8008c92:	9b06      	ldr	r3, [sp, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dd09      	ble.n	8008cac <_dtoa_r+0x74c>
 8008c98:	42b3      	cmp	r3, r6
 8008c9a:	9a00      	ldr	r2, [sp, #0]
 8008c9c:	bfa8      	it	ge
 8008c9e:	4633      	movge	r3, r6
 8008ca0:	1ad2      	subs	r2, r2, r3
 8008ca2:	9200      	str	r2, [sp, #0]
 8008ca4:	9a06      	ldr	r2, [sp, #24]
 8008ca6:	1af6      	subs	r6, r6, r3
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	9306      	str	r3, [sp, #24]
 8008cac:	9b08      	ldr	r3, [sp, #32]
 8008cae:	b30b      	cbz	r3, 8008cf4 <_dtoa_r+0x794>
 8008cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80c6 	beq.w	8008e44 <_dtoa_r+0x8e4>
 8008cb8:	2c00      	cmp	r4, #0
 8008cba:	f000 80c0 	beq.w	8008e3e <_dtoa_r+0x8de>
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	4648      	mov	r0, r9
 8008cc4:	f000 fd12 	bl	80096ec <__pow5mult>
 8008cc8:	9a02      	ldr	r2, [sp, #8]
 8008cca:	4601      	mov	r1, r0
 8008ccc:	4605      	mov	r5, r0
 8008cce:	4648      	mov	r0, r9
 8008cd0:	f000 fc6a 	bl	80095a8 <__multiply>
 8008cd4:	9902      	ldr	r1, [sp, #8]
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	4648      	mov	r0, r9
 8008cda:	f000 fb51 	bl	8009380 <_Bfree>
 8008cde:	9b08      	ldr	r3, [sp, #32]
 8008ce0:	1b1b      	subs	r3, r3, r4
 8008ce2:	9308      	str	r3, [sp, #32]
 8008ce4:	f000 80b1 	beq.w	8008e4a <_dtoa_r+0x8ea>
 8008ce8:	9a08      	ldr	r2, [sp, #32]
 8008cea:	4641      	mov	r1, r8
 8008cec:	4648      	mov	r0, r9
 8008cee:	f000 fcfd 	bl	80096ec <__pow5mult>
 8008cf2:	9002      	str	r0, [sp, #8]
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	4648      	mov	r0, r9
 8008cf8:	f000 fc40 	bl	800957c <__i2b>
 8008cfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cfe:	4604      	mov	r4, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 81d8 	beq.w	80090b6 <_dtoa_r+0xb56>
 8008d06:	461a      	mov	r2, r3
 8008d08:	4601      	mov	r1, r0
 8008d0a:	4648      	mov	r0, r9
 8008d0c:	f000 fcee 	bl	80096ec <__pow5mult>
 8008d10:	9b07      	ldr	r3, [sp, #28]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	4604      	mov	r4, r0
 8008d16:	f300 809f 	bgt.w	8008e58 <_dtoa_r+0x8f8>
 8008d1a:	9b04      	ldr	r3, [sp, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f040 8097 	bne.w	8008e50 <_dtoa_r+0x8f0>
 8008d22:	9b05      	ldr	r3, [sp, #20]
 8008d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f040 8093 	bne.w	8008e54 <_dtoa_r+0x8f4>
 8008d2e:	9b05      	ldr	r3, [sp, #20]
 8008d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d34:	0d1b      	lsrs	r3, r3, #20
 8008d36:	051b      	lsls	r3, r3, #20
 8008d38:	b133      	cbz	r3, 8008d48 <_dtoa_r+0x7e8>
 8008d3a:	9b00      	ldr	r3, [sp, #0]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	9b06      	ldr	r3, [sp, #24]
 8008d42:	3301      	adds	r3, #1
 8008d44:	9306      	str	r3, [sp, #24]
 8008d46:	2301      	movs	r3, #1
 8008d48:	9308      	str	r3, [sp, #32]
 8008d4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 81b8 	beq.w	80090c2 <_dtoa_r+0xb62>
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d58:	6918      	ldr	r0, [r3, #16]
 8008d5a:	f000 fbc3 	bl	80094e4 <__hi0bits>
 8008d5e:	f1c0 0020 	rsb	r0, r0, #32
 8008d62:	9b06      	ldr	r3, [sp, #24]
 8008d64:	4418      	add	r0, r3
 8008d66:	f010 001f 	ands.w	r0, r0, #31
 8008d6a:	f000 8082 	beq.w	8008e72 <_dtoa_r+0x912>
 8008d6e:	f1c0 0320 	rsb	r3, r0, #32
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	dd73      	ble.n	8008e5e <_dtoa_r+0x8fe>
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	f1c0 001c 	rsb	r0, r0, #28
 8008d7c:	4403      	add	r3, r0
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	9b06      	ldr	r3, [sp, #24]
 8008d82:	4403      	add	r3, r0
 8008d84:	4406      	add	r6, r0
 8008d86:	9306      	str	r3, [sp, #24]
 8008d88:	9b00      	ldr	r3, [sp, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	dd05      	ble.n	8008d9a <_dtoa_r+0x83a>
 8008d8e:	9902      	ldr	r1, [sp, #8]
 8008d90:	461a      	mov	r2, r3
 8008d92:	4648      	mov	r0, r9
 8008d94:	f000 fd04 	bl	80097a0 <__lshift>
 8008d98:	9002      	str	r0, [sp, #8]
 8008d9a:	9b06      	ldr	r3, [sp, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dd05      	ble.n	8008dac <_dtoa_r+0x84c>
 8008da0:	4621      	mov	r1, r4
 8008da2:	461a      	mov	r2, r3
 8008da4:	4648      	mov	r0, r9
 8008da6:	f000 fcfb 	bl	80097a0 <__lshift>
 8008daa:	4604      	mov	r4, r0
 8008dac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d061      	beq.n	8008e76 <_dtoa_r+0x916>
 8008db2:	9802      	ldr	r0, [sp, #8]
 8008db4:	4621      	mov	r1, r4
 8008db6:	f000 fd5f 	bl	8009878 <__mcmp>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	da5b      	bge.n	8008e76 <_dtoa_r+0x916>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9902      	ldr	r1, [sp, #8]
 8008dc2:	220a      	movs	r2, #10
 8008dc4:	4648      	mov	r0, r9
 8008dc6:	f000 fafd 	bl	80093c4 <__multadd>
 8008dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dcc:	9002      	str	r0, [sp, #8]
 8008dce:	f107 38ff 	add.w	r8, r7, #4294967295
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8177 	beq.w	80090c6 <_dtoa_r+0xb66>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	2300      	movs	r3, #0
 8008ddc:	220a      	movs	r2, #10
 8008dde:	4648      	mov	r0, r9
 8008de0:	f000 faf0 	bl	80093c4 <__multadd>
 8008de4:	f1bb 0f00 	cmp.w	fp, #0
 8008de8:	4605      	mov	r5, r0
 8008dea:	dc6f      	bgt.n	8008ecc <_dtoa_r+0x96c>
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	dc49      	bgt.n	8008e86 <_dtoa_r+0x926>
 8008df2:	e06b      	b.n	8008ecc <_dtoa_r+0x96c>
 8008df4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008df6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008dfa:	e73c      	b.n	8008c76 <_dtoa_r+0x716>
 8008dfc:	3fe00000 	.word	0x3fe00000
 8008e00:	40240000 	.word	0x40240000
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	1e5c      	subs	r4, r3, #1
 8008e08:	9b08      	ldr	r3, [sp, #32]
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	db09      	blt.n	8008e22 <_dtoa_r+0x8c2>
 8008e0e:	1b1c      	subs	r4, r3, r4
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f6bf af30 	bge.w	8008c78 <_dtoa_r+0x718>
 8008e18:	9b00      	ldr	r3, [sp, #0]
 8008e1a:	9a03      	ldr	r2, [sp, #12]
 8008e1c:	1a9e      	subs	r6, r3, r2
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e72b      	b.n	8008c7a <_dtoa_r+0x71a>
 8008e22:	9b08      	ldr	r3, [sp, #32]
 8008e24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e26:	9408      	str	r4, [sp, #32]
 8008e28:	1ae3      	subs	r3, r4, r3
 8008e2a:	441a      	add	r2, r3
 8008e2c:	9e00      	ldr	r6, [sp, #0]
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	920d      	str	r2, [sp, #52]	@ 0x34
 8008e32:	2400      	movs	r4, #0
 8008e34:	e721      	b.n	8008c7a <_dtoa_r+0x71a>
 8008e36:	9c08      	ldr	r4, [sp, #32]
 8008e38:	9e00      	ldr	r6, [sp, #0]
 8008e3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008e3c:	e728      	b.n	8008c90 <_dtoa_r+0x730>
 8008e3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008e42:	e751      	b.n	8008ce8 <_dtoa_r+0x788>
 8008e44:	9a08      	ldr	r2, [sp, #32]
 8008e46:	9902      	ldr	r1, [sp, #8]
 8008e48:	e750      	b.n	8008cec <_dtoa_r+0x78c>
 8008e4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008e4e:	e751      	b.n	8008cf4 <_dtoa_r+0x794>
 8008e50:	2300      	movs	r3, #0
 8008e52:	e779      	b.n	8008d48 <_dtoa_r+0x7e8>
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	e777      	b.n	8008d48 <_dtoa_r+0x7e8>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	9308      	str	r3, [sp, #32]
 8008e5c:	e779      	b.n	8008d52 <_dtoa_r+0x7f2>
 8008e5e:	d093      	beq.n	8008d88 <_dtoa_r+0x828>
 8008e60:	9a00      	ldr	r2, [sp, #0]
 8008e62:	331c      	adds	r3, #28
 8008e64:	441a      	add	r2, r3
 8008e66:	9200      	str	r2, [sp, #0]
 8008e68:	9a06      	ldr	r2, [sp, #24]
 8008e6a:	441a      	add	r2, r3
 8008e6c:	441e      	add	r6, r3
 8008e6e:	9206      	str	r2, [sp, #24]
 8008e70:	e78a      	b.n	8008d88 <_dtoa_r+0x828>
 8008e72:	4603      	mov	r3, r0
 8008e74:	e7f4      	b.n	8008e60 <_dtoa_r+0x900>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	46b8      	mov	r8, r7
 8008e7c:	dc20      	bgt.n	8008ec0 <_dtoa_r+0x960>
 8008e7e:	469b      	mov	fp, r3
 8008e80:	9b07      	ldr	r3, [sp, #28]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	dd1e      	ble.n	8008ec4 <_dtoa_r+0x964>
 8008e86:	f1bb 0f00 	cmp.w	fp, #0
 8008e8a:	f47f adb1 	bne.w	80089f0 <_dtoa_r+0x490>
 8008e8e:	4621      	mov	r1, r4
 8008e90:	465b      	mov	r3, fp
 8008e92:	2205      	movs	r2, #5
 8008e94:	4648      	mov	r0, r9
 8008e96:	f000 fa95 	bl	80093c4 <__multadd>
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	9802      	ldr	r0, [sp, #8]
 8008ea0:	f000 fcea 	bl	8009878 <__mcmp>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f77f ada3 	ble.w	80089f0 <_dtoa_r+0x490>
 8008eaa:	4656      	mov	r6, sl
 8008eac:	2331      	movs	r3, #49	@ 0x31
 8008eae:	f806 3b01 	strb.w	r3, [r6], #1
 8008eb2:	f108 0801 	add.w	r8, r8, #1
 8008eb6:	e59f      	b.n	80089f8 <_dtoa_r+0x498>
 8008eb8:	9c03      	ldr	r4, [sp, #12]
 8008eba:	46b8      	mov	r8, r7
 8008ebc:	4625      	mov	r5, r4
 8008ebe:	e7f4      	b.n	8008eaa <_dtoa_r+0x94a>
 8008ec0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 8101 	beq.w	80090ce <_dtoa_r+0xb6e>
 8008ecc:	2e00      	cmp	r6, #0
 8008ece:	dd05      	ble.n	8008edc <_dtoa_r+0x97c>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4632      	mov	r2, r6
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f000 fc63 	bl	80097a0 <__lshift>
 8008eda:	4605      	mov	r5, r0
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d05c      	beq.n	8008f9c <_dtoa_r+0xa3c>
 8008ee2:	6869      	ldr	r1, [r5, #4]
 8008ee4:	4648      	mov	r0, r9
 8008ee6:	f000 fa0b 	bl	8009300 <_Balloc>
 8008eea:	4606      	mov	r6, r0
 8008eec:	b928      	cbnz	r0, 8008efa <_dtoa_r+0x99a>
 8008eee:	4b82      	ldr	r3, [pc, #520]	@ (80090f8 <_dtoa_r+0xb98>)
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ef6:	f7ff bb4a 	b.w	800858e <_dtoa_r+0x2e>
 8008efa:	692a      	ldr	r2, [r5, #16]
 8008efc:	3202      	adds	r2, #2
 8008efe:	0092      	lsls	r2, r2, #2
 8008f00:	f105 010c 	add.w	r1, r5, #12
 8008f04:	300c      	adds	r0, #12
 8008f06:	f7ff fa8e 	bl	8008426 <memcpy>
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4648      	mov	r0, r9
 8008f10:	f000 fc46 	bl	80097a0 <__lshift>
 8008f14:	f10a 0301 	add.w	r3, sl, #1
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	eb0a 030b 	add.w	r3, sl, fp
 8008f1e:	9308      	str	r3, [sp, #32]
 8008f20:	9b04      	ldr	r3, [sp, #16]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	462f      	mov	r7, r5
 8008f28:	9306      	str	r3, [sp, #24]
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	9802      	ldr	r0, [sp, #8]
 8008f30:	4621      	mov	r1, r4
 8008f32:	f103 3bff 	add.w	fp, r3, #4294967295
 8008f36:	f7ff fa8b 	bl	8008450 <quorem>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	3330      	adds	r3, #48	@ 0x30
 8008f3e:	9003      	str	r0, [sp, #12]
 8008f40:	4639      	mov	r1, r7
 8008f42:	9802      	ldr	r0, [sp, #8]
 8008f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f46:	f000 fc97 	bl	8009878 <__mcmp>
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	9004      	str	r0, [sp, #16]
 8008f4e:	4621      	mov	r1, r4
 8008f50:	4648      	mov	r0, r9
 8008f52:	f000 fcad 	bl	80098b0 <__mdiff>
 8008f56:	68c2      	ldr	r2, [r0, #12]
 8008f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	bb02      	cbnz	r2, 8008fa0 <_dtoa_r+0xa40>
 8008f5e:	4601      	mov	r1, r0
 8008f60:	9802      	ldr	r0, [sp, #8]
 8008f62:	f000 fc89 	bl	8009878 <__mcmp>
 8008f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f68:	4602      	mov	r2, r0
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4648      	mov	r0, r9
 8008f6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f72:	f000 fa05 	bl	8009380 <_Bfree>
 8008f76:	9b07      	ldr	r3, [sp, #28]
 8008f78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f7a:	9e00      	ldr	r6, [sp, #0]
 8008f7c:	ea42 0103 	orr.w	r1, r2, r3
 8008f80:	9b06      	ldr	r3, [sp, #24]
 8008f82:	4319      	orrs	r1, r3
 8008f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f86:	d10d      	bne.n	8008fa4 <_dtoa_r+0xa44>
 8008f88:	2b39      	cmp	r3, #57	@ 0x39
 8008f8a:	d027      	beq.n	8008fdc <_dtoa_r+0xa7c>
 8008f8c:	9a04      	ldr	r2, [sp, #16]
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	dd01      	ble.n	8008f96 <_dtoa_r+0xa36>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	3331      	adds	r3, #49	@ 0x31
 8008f96:	f88b 3000 	strb.w	r3, [fp]
 8008f9a:	e52e      	b.n	80089fa <_dtoa_r+0x49a>
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	e7b9      	b.n	8008f14 <_dtoa_r+0x9b4>
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	e7e2      	b.n	8008f6a <_dtoa_r+0xa0a>
 8008fa4:	9904      	ldr	r1, [sp, #16]
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	db04      	blt.n	8008fb4 <_dtoa_r+0xa54>
 8008faa:	9807      	ldr	r0, [sp, #28]
 8008fac:	4301      	orrs	r1, r0
 8008fae:	9806      	ldr	r0, [sp, #24]
 8008fb0:	4301      	orrs	r1, r0
 8008fb2:	d120      	bne.n	8008ff6 <_dtoa_r+0xa96>
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	ddee      	ble.n	8008f96 <_dtoa_r+0xa36>
 8008fb8:	9902      	ldr	r1, [sp, #8]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4648      	mov	r0, r9
 8008fc0:	f000 fbee 	bl	80097a0 <__lshift>
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	9002      	str	r0, [sp, #8]
 8008fc8:	f000 fc56 	bl	8009878 <__mcmp>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	9b00      	ldr	r3, [sp, #0]
 8008fd0:	dc02      	bgt.n	8008fd8 <_dtoa_r+0xa78>
 8008fd2:	d1e0      	bne.n	8008f96 <_dtoa_r+0xa36>
 8008fd4:	07da      	lsls	r2, r3, #31
 8008fd6:	d5de      	bpl.n	8008f96 <_dtoa_r+0xa36>
 8008fd8:	2b39      	cmp	r3, #57	@ 0x39
 8008fda:	d1da      	bne.n	8008f92 <_dtoa_r+0xa32>
 8008fdc:	2339      	movs	r3, #57	@ 0x39
 8008fde:	f88b 3000 	strb.w	r3, [fp]
 8008fe2:	4633      	mov	r3, r6
 8008fe4:	461e      	mov	r6, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008fec:	2a39      	cmp	r2, #57	@ 0x39
 8008fee:	d04e      	beq.n	800908e <_dtoa_r+0xb2e>
 8008ff0:	3201      	adds	r2, #1
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	e501      	b.n	80089fa <_dtoa_r+0x49a>
 8008ff6:	2a00      	cmp	r2, #0
 8008ff8:	dd03      	ble.n	8009002 <_dtoa_r+0xaa2>
 8008ffa:	2b39      	cmp	r3, #57	@ 0x39
 8008ffc:	d0ee      	beq.n	8008fdc <_dtoa_r+0xa7c>
 8008ffe:	3301      	adds	r3, #1
 8009000:	e7c9      	b.n	8008f96 <_dtoa_r+0xa36>
 8009002:	9a00      	ldr	r2, [sp, #0]
 8009004:	9908      	ldr	r1, [sp, #32]
 8009006:	f802 3c01 	strb.w	r3, [r2, #-1]
 800900a:	428a      	cmp	r2, r1
 800900c:	d028      	beq.n	8009060 <_dtoa_r+0xb00>
 800900e:	9902      	ldr	r1, [sp, #8]
 8009010:	2300      	movs	r3, #0
 8009012:	220a      	movs	r2, #10
 8009014:	4648      	mov	r0, r9
 8009016:	f000 f9d5 	bl	80093c4 <__multadd>
 800901a:	42af      	cmp	r7, r5
 800901c:	9002      	str	r0, [sp, #8]
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	f04f 020a 	mov.w	r2, #10
 8009026:	4639      	mov	r1, r7
 8009028:	4648      	mov	r0, r9
 800902a:	d107      	bne.n	800903c <_dtoa_r+0xadc>
 800902c:	f000 f9ca 	bl	80093c4 <__multadd>
 8009030:	4607      	mov	r7, r0
 8009032:	4605      	mov	r5, r0
 8009034:	9b00      	ldr	r3, [sp, #0]
 8009036:	3301      	adds	r3, #1
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	e777      	b.n	8008f2c <_dtoa_r+0x9cc>
 800903c:	f000 f9c2 	bl	80093c4 <__multadd>
 8009040:	4629      	mov	r1, r5
 8009042:	4607      	mov	r7, r0
 8009044:	2300      	movs	r3, #0
 8009046:	220a      	movs	r2, #10
 8009048:	4648      	mov	r0, r9
 800904a:	f000 f9bb 	bl	80093c4 <__multadd>
 800904e:	4605      	mov	r5, r0
 8009050:	e7f0      	b.n	8009034 <_dtoa_r+0xad4>
 8009052:	f1bb 0f00 	cmp.w	fp, #0
 8009056:	bfcc      	ite	gt
 8009058:	465e      	movgt	r6, fp
 800905a:	2601      	movle	r6, #1
 800905c:	4456      	add	r6, sl
 800905e:	2700      	movs	r7, #0
 8009060:	9902      	ldr	r1, [sp, #8]
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	2201      	movs	r2, #1
 8009066:	4648      	mov	r0, r9
 8009068:	f000 fb9a 	bl	80097a0 <__lshift>
 800906c:	4621      	mov	r1, r4
 800906e:	9002      	str	r0, [sp, #8]
 8009070:	f000 fc02 	bl	8009878 <__mcmp>
 8009074:	2800      	cmp	r0, #0
 8009076:	dcb4      	bgt.n	8008fe2 <_dtoa_r+0xa82>
 8009078:	d102      	bne.n	8009080 <_dtoa_r+0xb20>
 800907a:	9b00      	ldr	r3, [sp, #0]
 800907c:	07db      	lsls	r3, r3, #31
 800907e:	d4b0      	bmi.n	8008fe2 <_dtoa_r+0xa82>
 8009080:	4633      	mov	r3, r6
 8009082:	461e      	mov	r6, r3
 8009084:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009088:	2a30      	cmp	r2, #48	@ 0x30
 800908a:	d0fa      	beq.n	8009082 <_dtoa_r+0xb22>
 800908c:	e4b5      	b.n	80089fa <_dtoa_r+0x49a>
 800908e:	459a      	cmp	sl, r3
 8009090:	d1a8      	bne.n	8008fe4 <_dtoa_r+0xa84>
 8009092:	2331      	movs	r3, #49	@ 0x31
 8009094:	f108 0801 	add.w	r8, r8, #1
 8009098:	f88a 3000 	strb.w	r3, [sl]
 800909c:	e4ad      	b.n	80089fa <_dtoa_r+0x49a>
 800909e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80090fc <_dtoa_r+0xb9c>
 80090a4:	b11b      	cbz	r3, 80090ae <_dtoa_r+0xb4e>
 80090a6:	f10a 0308 	add.w	r3, sl, #8
 80090aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	4650      	mov	r0, sl
 80090b0:	b017      	add	sp, #92	@ 0x5c
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	9b07      	ldr	r3, [sp, #28]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	f77f ae2e 	ble.w	8008d1a <_dtoa_r+0x7ba>
 80090be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090c0:	9308      	str	r3, [sp, #32]
 80090c2:	2001      	movs	r0, #1
 80090c4:	e64d      	b.n	8008d62 <_dtoa_r+0x802>
 80090c6:	f1bb 0f00 	cmp.w	fp, #0
 80090ca:	f77f aed9 	ble.w	8008e80 <_dtoa_r+0x920>
 80090ce:	4656      	mov	r6, sl
 80090d0:	9802      	ldr	r0, [sp, #8]
 80090d2:	4621      	mov	r1, r4
 80090d4:	f7ff f9bc 	bl	8008450 <quorem>
 80090d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80090dc:	f806 3b01 	strb.w	r3, [r6], #1
 80090e0:	eba6 020a 	sub.w	r2, r6, sl
 80090e4:	4593      	cmp	fp, r2
 80090e6:	ddb4      	ble.n	8009052 <_dtoa_r+0xaf2>
 80090e8:	9902      	ldr	r1, [sp, #8]
 80090ea:	2300      	movs	r3, #0
 80090ec:	220a      	movs	r2, #10
 80090ee:	4648      	mov	r0, r9
 80090f0:	f000 f968 	bl	80093c4 <__multadd>
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	e7eb      	b.n	80090d0 <_dtoa_r+0xb70>
 80090f8:	0800c189 	.word	0x0800c189
 80090fc:	0800c10d 	.word	0x0800c10d

08009100 <_free_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4605      	mov	r5, r0
 8009104:	2900      	cmp	r1, #0
 8009106:	d041      	beq.n	800918c <_free_r+0x8c>
 8009108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800910c:	1f0c      	subs	r4, r1, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfb8      	it	lt
 8009112:	18e4      	addlt	r4, r4, r3
 8009114:	f000 f8e8 	bl	80092e8 <__malloc_lock>
 8009118:	4a1d      	ldr	r2, [pc, #116]	@ (8009190 <_free_r+0x90>)
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	b933      	cbnz	r3, 800912c <_free_r+0x2c>
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	6014      	str	r4, [r2, #0]
 8009122:	4628      	mov	r0, r5
 8009124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009128:	f000 b8e4 	b.w	80092f4 <__malloc_unlock>
 800912c:	42a3      	cmp	r3, r4
 800912e:	d908      	bls.n	8009142 <_free_r+0x42>
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	1821      	adds	r1, r4, r0
 8009134:	428b      	cmp	r3, r1
 8009136:	bf01      	itttt	eq
 8009138:	6819      	ldreq	r1, [r3, #0]
 800913a:	685b      	ldreq	r3, [r3, #4]
 800913c:	1809      	addeq	r1, r1, r0
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	e7ed      	b.n	800911e <_free_r+0x1e>
 8009142:	461a      	mov	r2, r3
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b10b      	cbz	r3, 800914c <_free_r+0x4c>
 8009148:	42a3      	cmp	r3, r4
 800914a:	d9fa      	bls.n	8009142 <_free_r+0x42>
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	1850      	adds	r0, r2, r1
 8009150:	42a0      	cmp	r0, r4
 8009152:	d10b      	bne.n	800916c <_free_r+0x6c>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	4401      	add	r1, r0
 8009158:	1850      	adds	r0, r2, r1
 800915a:	4283      	cmp	r3, r0
 800915c:	6011      	str	r1, [r2, #0]
 800915e:	d1e0      	bne.n	8009122 <_free_r+0x22>
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	6053      	str	r3, [r2, #4]
 8009166:	4408      	add	r0, r1
 8009168:	6010      	str	r0, [r2, #0]
 800916a:	e7da      	b.n	8009122 <_free_r+0x22>
 800916c:	d902      	bls.n	8009174 <_free_r+0x74>
 800916e:	230c      	movs	r3, #12
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	e7d6      	b.n	8009122 <_free_r+0x22>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	1821      	adds	r1, r4, r0
 8009178:	428b      	cmp	r3, r1
 800917a:	bf04      	itt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	bf04      	itt	eq
 8009184:	1809      	addeq	r1, r1, r0
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	6054      	str	r4, [r2, #4]
 800918a:	e7ca      	b.n	8009122 <_free_r+0x22>
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	bf00      	nop
 8009190:	200022fc 	.word	0x200022fc

08009194 <malloc>:
 8009194:	4b02      	ldr	r3, [pc, #8]	@ (80091a0 <malloc+0xc>)
 8009196:	4601      	mov	r1, r0
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	f000 b825 	b.w	80091e8 <_malloc_r>
 800919e:	bf00      	nop
 80091a0:	20000bfc 	.word	0x20000bfc

080091a4 <sbrk_aligned>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4e0f      	ldr	r6, [pc, #60]	@ (80091e4 <sbrk_aligned+0x40>)
 80091a8:	460c      	mov	r4, r1
 80091aa:	6831      	ldr	r1, [r6, #0]
 80091ac:	4605      	mov	r5, r0
 80091ae:	b911      	cbnz	r1, 80091b6 <sbrk_aligned+0x12>
 80091b0:	f001 fe04 	bl	800adbc <_sbrk_r>
 80091b4:	6030      	str	r0, [r6, #0]
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	f001 fdff 	bl	800adbc <_sbrk_r>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d103      	bne.n	80091ca <sbrk_aligned+0x26>
 80091c2:	f04f 34ff 	mov.w	r4, #4294967295
 80091c6:	4620      	mov	r0, r4
 80091c8:	bd70      	pop	{r4, r5, r6, pc}
 80091ca:	1cc4      	adds	r4, r0, #3
 80091cc:	f024 0403 	bic.w	r4, r4, #3
 80091d0:	42a0      	cmp	r0, r4
 80091d2:	d0f8      	beq.n	80091c6 <sbrk_aligned+0x22>
 80091d4:	1a21      	subs	r1, r4, r0
 80091d6:	4628      	mov	r0, r5
 80091d8:	f001 fdf0 	bl	800adbc <_sbrk_r>
 80091dc:	3001      	adds	r0, #1
 80091de:	d1f2      	bne.n	80091c6 <sbrk_aligned+0x22>
 80091e0:	e7ef      	b.n	80091c2 <sbrk_aligned+0x1e>
 80091e2:	bf00      	nop
 80091e4:	200022f8 	.word	0x200022f8

080091e8 <_malloc_r>:
 80091e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ec:	1ccd      	adds	r5, r1, #3
 80091ee:	f025 0503 	bic.w	r5, r5, #3
 80091f2:	3508      	adds	r5, #8
 80091f4:	2d0c      	cmp	r5, #12
 80091f6:	bf38      	it	cc
 80091f8:	250c      	movcc	r5, #12
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	4606      	mov	r6, r0
 80091fe:	db01      	blt.n	8009204 <_malloc_r+0x1c>
 8009200:	42a9      	cmp	r1, r5
 8009202:	d904      	bls.n	800920e <_malloc_r+0x26>
 8009204:	230c      	movs	r3, #12
 8009206:	6033      	str	r3, [r6, #0]
 8009208:	2000      	movs	r0, #0
 800920a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092e4 <_malloc_r+0xfc>
 8009212:	f000 f869 	bl	80092e8 <__malloc_lock>
 8009216:	f8d8 3000 	ldr.w	r3, [r8]
 800921a:	461c      	mov	r4, r3
 800921c:	bb44      	cbnz	r4, 8009270 <_malloc_r+0x88>
 800921e:	4629      	mov	r1, r5
 8009220:	4630      	mov	r0, r6
 8009222:	f7ff ffbf 	bl	80091a4 <sbrk_aligned>
 8009226:	1c43      	adds	r3, r0, #1
 8009228:	4604      	mov	r4, r0
 800922a:	d158      	bne.n	80092de <_malloc_r+0xf6>
 800922c:	f8d8 4000 	ldr.w	r4, [r8]
 8009230:	4627      	mov	r7, r4
 8009232:	2f00      	cmp	r7, #0
 8009234:	d143      	bne.n	80092be <_malloc_r+0xd6>
 8009236:	2c00      	cmp	r4, #0
 8009238:	d04b      	beq.n	80092d2 <_malloc_r+0xea>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	4639      	mov	r1, r7
 800923e:	4630      	mov	r0, r6
 8009240:	eb04 0903 	add.w	r9, r4, r3
 8009244:	f001 fdba 	bl	800adbc <_sbrk_r>
 8009248:	4581      	cmp	r9, r0
 800924a:	d142      	bne.n	80092d2 <_malloc_r+0xea>
 800924c:	6821      	ldr	r1, [r4, #0]
 800924e:	1a6d      	subs	r5, r5, r1
 8009250:	4629      	mov	r1, r5
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ffa6 	bl	80091a4 <sbrk_aligned>
 8009258:	3001      	adds	r0, #1
 800925a:	d03a      	beq.n	80092d2 <_malloc_r+0xea>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	442b      	add	r3, r5
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	f8d8 3000 	ldr.w	r3, [r8]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	bb62      	cbnz	r2, 80092c4 <_malloc_r+0xdc>
 800926a:	f8c8 7000 	str.w	r7, [r8]
 800926e:	e00f      	b.n	8009290 <_malloc_r+0xa8>
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	1b52      	subs	r2, r2, r5
 8009274:	d420      	bmi.n	80092b8 <_malloc_r+0xd0>
 8009276:	2a0b      	cmp	r2, #11
 8009278:	d917      	bls.n	80092aa <_malloc_r+0xc2>
 800927a:	1961      	adds	r1, r4, r5
 800927c:	42a3      	cmp	r3, r4
 800927e:	6025      	str	r5, [r4, #0]
 8009280:	bf18      	it	ne
 8009282:	6059      	strne	r1, [r3, #4]
 8009284:	6863      	ldr	r3, [r4, #4]
 8009286:	bf08      	it	eq
 8009288:	f8c8 1000 	streq.w	r1, [r8]
 800928c:	5162      	str	r2, [r4, r5]
 800928e:	604b      	str	r3, [r1, #4]
 8009290:	4630      	mov	r0, r6
 8009292:	f000 f82f 	bl	80092f4 <__malloc_unlock>
 8009296:	f104 000b 	add.w	r0, r4, #11
 800929a:	1d23      	adds	r3, r4, #4
 800929c:	f020 0007 	bic.w	r0, r0, #7
 80092a0:	1ac2      	subs	r2, r0, r3
 80092a2:	bf1c      	itt	ne
 80092a4:	1a1b      	subne	r3, r3, r0
 80092a6:	50a3      	strne	r3, [r4, r2]
 80092a8:	e7af      	b.n	800920a <_malloc_r+0x22>
 80092aa:	6862      	ldr	r2, [r4, #4]
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	bf0c      	ite	eq
 80092b0:	f8c8 2000 	streq.w	r2, [r8]
 80092b4:	605a      	strne	r2, [r3, #4]
 80092b6:	e7eb      	b.n	8009290 <_malloc_r+0xa8>
 80092b8:	4623      	mov	r3, r4
 80092ba:	6864      	ldr	r4, [r4, #4]
 80092bc:	e7ae      	b.n	800921c <_malloc_r+0x34>
 80092be:	463c      	mov	r4, r7
 80092c0:	687f      	ldr	r7, [r7, #4]
 80092c2:	e7b6      	b.n	8009232 <_malloc_r+0x4a>
 80092c4:	461a      	mov	r2, r3
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	d1fb      	bne.n	80092c4 <_malloc_r+0xdc>
 80092cc:	2300      	movs	r3, #0
 80092ce:	6053      	str	r3, [r2, #4]
 80092d0:	e7de      	b.n	8009290 <_malloc_r+0xa8>
 80092d2:	230c      	movs	r3, #12
 80092d4:	6033      	str	r3, [r6, #0]
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 f80c 	bl	80092f4 <__malloc_unlock>
 80092dc:	e794      	b.n	8009208 <_malloc_r+0x20>
 80092de:	6005      	str	r5, [r0, #0]
 80092e0:	e7d6      	b.n	8009290 <_malloc_r+0xa8>
 80092e2:	bf00      	nop
 80092e4:	200022fc 	.word	0x200022fc

080092e8 <__malloc_lock>:
 80092e8:	4801      	ldr	r0, [pc, #4]	@ (80092f0 <__malloc_lock+0x8>)
 80092ea:	f7ff b89a 	b.w	8008422 <__retarget_lock_acquire_recursive>
 80092ee:	bf00      	nop
 80092f0:	200022f4 	.word	0x200022f4

080092f4 <__malloc_unlock>:
 80092f4:	4801      	ldr	r0, [pc, #4]	@ (80092fc <__malloc_unlock+0x8>)
 80092f6:	f7ff b895 	b.w	8008424 <__retarget_lock_release_recursive>
 80092fa:	bf00      	nop
 80092fc:	200022f4 	.word	0x200022f4

08009300 <_Balloc>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	69c6      	ldr	r6, [r0, #28]
 8009304:	4604      	mov	r4, r0
 8009306:	460d      	mov	r5, r1
 8009308:	b976      	cbnz	r6, 8009328 <_Balloc+0x28>
 800930a:	2010      	movs	r0, #16
 800930c:	f7ff ff42 	bl	8009194 <malloc>
 8009310:	4602      	mov	r2, r0
 8009312:	61e0      	str	r0, [r4, #28]
 8009314:	b920      	cbnz	r0, 8009320 <_Balloc+0x20>
 8009316:	4b18      	ldr	r3, [pc, #96]	@ (8009378 <_Balloc+0x78>)
 8009318:	4818      	ldr	r0, [pc, #96]	@ (800937c <_Balloc+0x7c>)
 800931a:	216b      	movs	r1, #107	@ 0x6b
 800931c:	f001 fd68 	bl	800adf0 <__assert_func>
 8009320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009324:	6006      	str	r6, [r0, #0]
 8009326:	60c6      	str	r6, [r0, #12]
 8009328:	69e6      	ldr	r6, [r4, #28]
 800932a:	68f3      	ldr	r3, [r6, #12]
 800932c:	b183      	cbz	r3, 8009350 <_Balloc+0x50>
 800932e:	69e3      	ldr	r3, [r4, #28]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009336:	b9b8      	cbnz	r0, 8009368 <_Balloc+0x68>
 8009338:	2101      	movs	r1, #1
 800933a:	fa01 f605 	lsl.w	r6, r1, r5
 800933e:	1d72      	adds	r2, r6, #5
 8009340:	0092      	lsls	r2, r2, #2
 8009342:	4620      	mov	r0, r4
 8009344:	f001 fd72 	bl	800ae2c <_calloc_r>
 8009348:	b160      	cbz	r0, 8009364 <_Balloc+0x64>
 800934a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800934e:	e00e      	b.n	800936e <_Balloc+0x6e>
 8009350:	2221      	movs	r2, #33	@ 0x21
 8009352:	2104      	movs	r1, #4
 8009354:	4620      	mov	r0, r4
 8009356:	f001 fd69 	bl	800ae2c <_calloc_r>
 800935a:	69e3      	ldr	r3, [r4, #28]
 800935c:	60f0      	str	r0, [r6, #12]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e4      	bne.n	800932e <_Balloc+0x2e>
 8009364:	2000      	movs	r0, #0
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	6802      	ldr	r2, [r0, #0]
 800936a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800936e:	2300      	movs	r3, #0
 8009370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009374:	e7f7      	b.n	8009366 <_Balloc+0x66>
 8009376:	bf00      	nop
 8009378:	0800c11a 	.word	0x0800c11a
 800937c:	0800c19a 	.word	0x0800c19a

08009380 <_Bfree>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	69c6      	ldr	r6, [r0, #28]
 8009384:	4605      	mov	r5, r0
 8009386:	460c      	mov	r4, r1
 8009388:	b976      	cbnz	r6, 80093a8 <_Bfree+0x28>
 800938a:	2010      	movs	r0, #16
 800938c:	f7ff ff02 	bl	8009194 <malloc>
 8009390:	4602      	mov	r2, r0
 8009392:	61e8      	str	r0, [r5, #28]
 8009394:	b920      	cbnz	r0, 80093a0 <_Bfree+0x20>
 8009396:	4b09      	ldr	r3, [pc, #36]	@ (80093bc <_Bfree+0x3c>)
 8009398:	4809      	ldr	r0, [pc, #36]	@ (80093c0 <_Bfree+0x40>)
 800939a:	218f      	movs	r1, #143	@ 0x8f
 800939c:	f001 fd28 	bl	800adf0 <__assert_func>
 80093a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093a4:	6006      	str	r6, [r0, #0]
 80093a6:	60c6      	str	r6, [r0, #12]
 80093a8:	b13c      	cbz	r4, 80093ba <_Bfree+0x3a>
 80093aa:	69eb      	ldr	r3, [r5, #28]
 80093ac:	6862      	ldr	r2, [r4, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093b4:	6021      	str	r1, [r4, #0]
 80093b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	0800c11a 	.word	0x0800c11a
 80093c0:	0800c19a 	.word	0x0800c19a

080093c4 <__multadd>:
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	690d      	ldr	r5, [r1, #16]
 80093ca:	4607      	mov	r7, r0
 80093cc:	460c      	mov	r4, r1
 80093ce:	461e      	mov	r6, r3
 80093d0:	f101 0c14 	add.w	ip, r1, #20
 80093d4:	2000      	movs	r0, #0
 80093d6:	f8dc 3000 	ldr.w	r3, [ip]
 80093da:	b299      	uxth	r1, r3
 80093dc:	fb02 6101 	mla	r1, r2, r1, r6
 80093e0:	0c1e      	lsrs	r6, r3, #16
 80093e2:	0c0b      	lsrs	r3, r1, #16
 80093e4:	fb02 3306 	mla	r3, r2, r6, r3
 80093e8:	b289      	uxth	r1, r1
 80093ea:	3001      	adds	r0, #1
 80093ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093f0:	4285      	cmp	r5, r0
 80093f2:	f84c 1b04 	str.w	r1, [ip], #4
 80093f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093fa:	dcec      	bgt.n	80093d6 <__multadd+0x12>
 80093fc:	b30e      	cbz	r6, 8009442 <__multadd+0x7e>
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	42ab      	cmp	r3, r5
 8009402:	dc19      	bgt.n	8009438 <__multadd+0x74>
 8009404:	6861      	ldr	r1, [r4, #4]
 8009406:	4638      	mov	r0, r7
 8009408:	3101      	adds	r1, #1
 800940a:	f7ff ff79 	bl	8009300 <_Balloc>
 800940e:	4680      	mov	r8, r0
 8009410:	b928      	cbnz	r0, 800941e <__multadd+0x5a>
 8009412:	4602      	mov	r2, r0
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <__multadd+0x84>)
 8009416:	480d      	ldr	r0, [pc, #52]	@ (800944c <__multadd+0x88>)
 8009418:	21ba      	movs	r1, #186	@ 0xba
 800941a:	f001 fce9 	bl	800adf0 <__assert_func>
 800941e:	6922      	ldr	r2, [r4, #16]
 8009420:	3202      	adds	r2, #2
 8009422:	f104 010c 	add.w	r1, r4, #12
 8009426:	0092      	lsls	r2, r2, #2
 8009428:	300c      	adds	r0, #12
 800942a:	f7fe fffc 	bl	8008426 <memcpy>
 800942e:	4621      	mov	r1, r4
 8009430:	4638      	mov	r0, r7
 8009432:	f7ff ffa5 	bl	8009380 <_Bfree>
 8009436:	4644      	mov	r4, r8
 8009438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800943c:	3501      	adds	r5, #1
 800943e:	615e      	str	r6, [r3, #20]
 8009440:	6125      	str	r5, [r4, #16]
 8009442:	4620      	mov	r0, r4
 8009444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009448:	0800c189 	.word	0x0800c189
 800944c:	0800c19a 	.word	0x0800c19a

08009450 <__s2b>:
 8009450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009454:	460c      	mov	r4, r1
 8009456:	4615      	mov	r5, r2
 8009458:	461f      	mov	r7, r3
 800945a:	2209      	movs	r2, #9
 800945c:	3308      	adds	r3, #8
 800945e:	4606      	mov	r6, r0
 8009460:	fb93 f3f2 	sdiv	r3, r3, r2
 8009464:	2100      	movs	r1, #0
 8009466:	2201      	movs	r2, #1
 8009468:	429a      	cmp	r2, r3
 800946a:	db09      	blt.n	8009480 <__s2b+0x30>
 800946c:	4630      	mov	r0, r6
 800946e:	f7ff ff47 	bl	8009300 <_Balloc>
 8009472:	b940      	cbnz	r0, 8009486 <__s2b+0x36>
 8009474:	4602      	mov	r2, r0
 8009476:	4b19      	ldr	r3, [pc, #100]	@ (80094dc <__s2b+0x8c>)
 8009478:	4819      	ldr	r0, [pc, #100]	@ (80094e0 <__s2b+0x90>)
 800947a:	21d3      	movs	r1, #211	@ 0xd3
 800947c:	f001 fcb8 	bl	800adf0 <__assert_func>
 8009480:	0052      	lsls	r2, r2, #1
 8009482:	3101      	adds	r1, #1
 8009484:	e7f0      	b.n	8009468 <__s2b+0x18>
 8009486:	9b08      	ldr	r3, [sp, #32]
 8009488:	6143      	str	r3, [r0, #20]
 800948a:	2d09      	cmp	r5, #9
 800948c:	f04f 0301 	mov.w	r3, #1
 8009490:	6103      	str	r3, [r0, #16]
 8009492:	dd16      	ble.n	80094c2 <__s2b+0x72>
 8009494:	f104 0909 	add.w	r9, r4, #9
 8009498:	46c8      	mov	r8, r9
 800949a:	442c      	add	r4, r5
 800949c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80094a0:	4601      	mov	r1, r0
 80094a2:	3b30      	subs	r3, #48	@ 0x30
 80094a4:	220a      	movs	r2, #10
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7ff ff8c 	bl	80093c4 <__multadd>
 80094ac:	45a0      	cmp	r8, r4
 80094ae:	d1f5      	bne.n	800949c <__s2b+0x4c>
 80094b0:	f1a5 0408 	sub.w	r4, r5, #8
 80094b4:	444c      	add	r4, r9
 80094b6:	1b2d      	subs	r5, r5, r4
 80094b8:	1963      	adds	r3, r4, r5
 80094ba:	42bb      	cmp	r3, r7
 80094bc:	db04      	blt.n	80094c8 <__s2b+0x78>
 80094be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c2:	340a      	adds	r4, #10
 80094c4:	2509      	movs	r5, #9
 80094c6:	e7f6      	b.n	80094b6 <__s2b+0x66>
 80094c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094cc:	4601      	mov	r1, r0
 80094ce:	3b30      	subs	r3, #48	@ 0x30
 80094d0:	220a      	movs	r2, #10
 80094d2:	4630      	mov	r0, r6
 80094d4:	f7ff ff76 	bl	80093c4 <__multadd>
 80094d8:	e7ee      	b.n	80094b8 <__s2b+0x68>
 80094da:	bf00      	nop
 80094dc:	0800c189 	.word	0x0800c189
 80094e0:	0800c19a 	.word	0x0800c19a

080094e4 <__hi0bits>:
 80094e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094e8:	4603      	mov	r3, r0
 80094ea:	bf36      	itet	cc
 80094ec:	0403      	lslcc	r3, r0, #16
 80094ee:	2000      	movcs	r0, #0
 80094f0:	2010      	movcc	r0, #16
 80094f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094f6:	bf3c      	itt	cc
 80094f8:	021b      	lslcc	r3, r3, #8
 80094fa:	3008      	addcc	r0, #8
 80094fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009500:	bf3c      	itt	cc
 8009502:	011b      	lslcc	r3, r3, #4
 8009504:	3004      	addcc	r0, #4
 8009506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800950a:	bf3c      	itt	cc
 800950c:	009b      	lslcc	r3, r3, #2
 800950e:	3002      	addcc	r0, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	db05      	blt.n	8009520 <__hi0bits+0x3c>
 8009514:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009518:	f100 0001 	add.w	r0, r0, #1
 800951c:	bf08      	it	eq
 800951e:	2020      	moveq	r0, #32
 8009520:	4770      	bx	lr

08009522 <__lo0bits>:
 8009522:	6803      	ldr	r3, [r0, #0]
 8009524:	4602      	mov	r2, r0
 8009526:	f013 0007 	ands.w	r0, r3, #7
 800952a:	d00b      	beq.n	8009544 <__lo0bits+0x22>
 800952c:	07d9      	lsls	r1, r3, #31
 800952e:	d421      	bmi.n	8009574 <__lo0bits+0x52>
 8009530:	0798      	lsls	r0, r3, #30
 8009532:	bf49      	itett	mi
 8009534:	085b      	lsrmi	r3, r3, #1
 8009536:	089b      	lsrpl	r3, r3, #2
 8009538:	2001      	movmi	r0, #1
 800953a:	6013      	strmi	r3, [r2, #0]
 800953c:	bf5c      	itt	pl
 800953e:	6013      	strpl	r3, [r2, #0]
 8009540:	2002      	movpl	r0, #2
 8009542:	4770      	bx	lr
 8009544:	b299      	uxth	r1, r3
 8009546:	b909      	cbnz	r1, 800954c <__lo0bits+0x2a>
 8009548:	0c1b      	lsrs	r3, r3, #16
 800954a:	2010      	movs	r0, #16
 800954c:	b2d9      	uxtb	r1, r3
 800954e:	b909      	cbnz	r1, 8009554 <__lo0bits+0x32>
 8009550:	3008      	adds	r0, #8
 8009552:	0a1b      	lsrs	r3, r3, #8
 8009554:	0719      	lsls	r1, r3, #28
 8009556:	bf04      	itt	eq
 8009558:	091b      	lsreq	r3, r3, #4
 800955a:	3004      	addeq	r0, #4
 800955c:	0799      	lsls	r1, r3, #30
 800955e:	bf04      	itt	eq
 8009560:	089b      	lsreq	r3, r3, #2
 8009562:	3002      	addeq	r0, #2
 8009564:	07d9      	lsls	r1, r3, #31
 8009566:	d403      	bmi.n	8009570 <__lo0bits+0x4e>
 8009568:	085b      	lsrs	r3, r3, #1
 800956a:	f100 0001 	add.w	r0, r0, #1
 800956e:	d003      	beq.n	8009578 <__lo0bits+0x56>
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	4770      	bx	lr
 8009574:	2000      	movs	r0, #0
 8009576:	4770      	bx	lr
 8009578:	2020      	movs	r0, #32
 800957a:	4770      	bx	lr

0800957c <__i2b>:
 800957c:	b510      	push	{r4, lr}
 800957e:	460c      	mov	r4, r1
 8009580:	2101      	movs	r1, #1
 8009582:	f7ff febd 	bl	8009300 <_Balloc>
 8009586:	4602      	mov	r2, r0
 8009588:	b928      	cbnz	r0, 8009596 <__i2b+0x1a>
 800958a:	4b05      	ldr	r3, [pc, #20]	@ (80095a0 <__i2b+0x24>)
 800958c:	4805      	ldr	r0, [pc, #20]	@ (80095a4 <__i2b+0x28>)
 800958e:	f240 1145 	movw	r1, #325	@ 0x145
 8009592:	f001 fc2d 	bl	800adf0 <__assert_func>
 8009596:	2301      	movs	r3, #1
 8009598:	6144      	str	r4, [r0, #20]
 800959a:	6103      	str	r3, [r0, #16]
 800959c:	bd10      	pop	{r4, pc}
 800959e:	bf00      	nop
 80095a0:	0800c189 	.word	0x0800c189
 80095a4:	0800c19a 	.word	0x0800c19a

080095a8 <__multiply>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	4617      	mov	r7, r2
 80095ae:	690a      	ldr	r2, [r1, #16]
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	bfa8      	it	ge
 80095b6:	463b      	movge	r3, r7
 80095b8:	4689      	mov	r9, r1
 80095ba:	bfa4      	itt	ge
 80095bc:	460f      	movge	r7, r1
 80095be:	4699      	movge	r9, r3
 80095c0:	693d      	ldr	r5, [r7, #16]
 80095c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	eb05 060a 	add.w	r6, r5, sl
 80095ce:	42b3      	cmp	r3, r6
 80095d0:	b085      	sub	sp, #20
 80095d2:	bfb8      	it	lt
 80095d4:	3101      	addlt	r1, #1
 80095d6:	f7ff fe93 	bl	8009300 <_Balloc>
 80095da:	b930      	cbnz	r0, 80095ea <__multiply+0x42>
 80095dc:	4602      	mov	r2, r0
 80095de:	4b41      	ldr	r3, [pc, #260]	@ (80096e4 <__multiply+0x13c>)
 80095e0:	4841      	ldr	r0, [pc, #260]	@ (80096e8 <__multiply+0x140>)
 80095e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095e6:	f001 fc03 	bl	800adf0 <__assert_func>
 80095ea:	f100 0414 	add.w	r4, r0, #20
 80095ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80095f2:	4623      	mov	r3, r4
 80095f4:	2200      	movs	r2, #0
 80095f6:	4573      	cmp	r3, lr
 80095f8:	d320      	bcc.n	800963c <__multiply+0x94>
 80095fa:	f107 0814 	add.w	r8, r7, #20
 80095fe:	f109 0114 	add.w	r1, r9, #20
 8009602:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009606:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800960a:	9302      	str	r3, [sp, #8]
 800960c:	1beb      	subs	r3, r5, r7
 800960e:	3b15      	subs	r3, #21
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	3304      	adds	r3, #4
 8009616:	3715      	adds	r7, #21
 8009618:	42bd      	cmp	r5, r7
 800961a:	bf38      	it	cc
 800961c:	2304      	movcc	r3, #4
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	9b02      	ldr	r3, [sp, #8]
 8009622:	9103      	str	r1, [sp, #12]
 8009624:	428b      	cmp	r3, r1
 8009626:	d80c      	bhi.n	8009642 <__multiply+0x9a>
 8009628:	2e00      	cmp	r6, #0
 800962a:	dd03      	ble.n	8009634 <__multiply+0x8c>
 800962c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009630:	2b00      	cmp	r3, #0
 8009632:	d055      	beq.n	80096e0 <__multiply+0x138>
 8009634:	6106      	str	r6, [r0, #16]
 8009636:	b005      	add	sp, #20
 8009638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963c:	f843 2b04 	str.w	r2, [r3], #4
 8009640:	e7d9      	b.n	80095f6 <__multiply+0x4e>
 8009642:	f8b1 a000 	ldrh.w	sl, [r1]
 8009646:	f1ba 0f00 	cmp.w	sl, #0
 800964a:	d01f      	beq.n	800968c <__multiply+0xe4>
 800964c:	46c4      	mov	ip, r8
 800964e:	46a1      	mov	r9, r4
 8009650:	2700      	movs	r7, #0
 8009652:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009656:	f8d9 3000 	ldr.w	r3, [r9]
 800965a:	fa1f fb82 	uxth.w	fp, r2
 800965e:	b29b      	uxth	r3, r3
 8009660:	fb0a 330b 	mla	r3, sl, fp, r3
 8009664:	443b      	add	r3, r7
 8009666:	f8d9 7000 	ldr.w	r7, [r9]
 800966a:	0c12      	lsrs	r2, r2, #16
 800966c:	0c3f      	lsrs	r7, r7, #16
 800966e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009672:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009676:	b29b      	uxth	r3, r3
 8009678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800967c:	4565      	cmp	r5, ip
 800967e:	f849 3b04 	str.w	r3, [r9], #4
 8009682:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009686:	d8e4      	bhi.n	8009652 <__multiply+0xaa>
 8009688:	9b01      	ldr	r3, [sp, #4]
 800968a:	50e7      	str	r7, [r4, r3]
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009692:	3104      	adds	r1, #4
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	d020      	beq.n	80096dc <__multiply+0x134>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	4647      	mov	r7, r8
 800969e:	46a4      	mov	ip, r4
 80096a0:	f04f 0a00 	mov.w	sl, #0
 80096a4:	f8b7 b000 	ldrh.w	fp, [r7]
 80096a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80096ac:	fb09 220b 	mla	r2, r9, fp, r2
 80096b0:	4452      	add	r2, sl
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096b8:	f84c 3b04 	str.w	r3, [ip], #4
 80096bc:	f857 3b04 	ldr.w	r3, [r7], #4
 80096c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096c4:	f8bc 3000 	ldrh.w	r3, [ip]
 80096c8:	fb09 330a 	mla	r3, r9, sl, r3
 80096cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80096d0:	42bd      	cmp	r5, r7
 80096d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096d6:	d8e5      	bhi.n	80096a4 <__multiply+0xfc>
 80096d8:	9a01      	ldr	r2, [sp, #4]
 80096da:	50a3      	str	r3, [r4, r2]
 80096dc:	3404      	adds	r4, #4
 80096de:	e79f      	b.n	8009620 <__multiply+0x78>
 80096e0:	3e01      	subs	r6, #1
 80096e2:	e7a1      	b.n	8009628 <__multiply+0x80>
 80096e4:	0800c189 	.word	0x0800c189
 80096e8:	0800c19a 	.word	0x0800c19a

080096ec <__pow5mult>:
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	4615      	mov	r5, r2
 80096f2:	f012 0203 	ands.w	r2, r2, #3
 80096f6:	4607      	mov	r7, r0
 80096f8:	460e      	mov	r6, r1
 80096fa:	d007      	beq.n	800970c <__pow5mult+0x20>
 80096fc:	4c25      	ldr	r4, [pc, #148]	@ (8009794 <__pow5mult+0xa8>)
 80096fe:	3a01      	subs	r2, #1
 8009700:	2300      	movs	r3, #0
 8009702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009706:	f7ff fe5d 	bl	80093c4 <__multadd>
 800970a:	4606      	mov	r6, r0
 800970c:	10ad      	asrs	r5, r5, #2
 800970e:	d03d      	beq.n	800978c <__pow5mult+0xa0>
 8009710:	69fc      	ldr	r4, [r7, #28]
 8009712:	b97c      	cbnz	r4, 8009734 <__pow5mult+0x48>
 8009714:	2010      	movs	r0, #16
 8009716:	f7ff fd3d 	bl	8009194 <malloc>
 800971a:	4602      	mov	r2, r0
 800971c:	61f8      	str	r0, [r7, #28]
 800971e:	b928      	cbnz	r0, 800972c <__pow5mult+0x40>
 8009720:	4b1d      	ldr	r3, [pc, #116]	@ (8009798 <__pow5mult+0xac>)
 8009722:	481e      	ldr	r0, [pc, #120]	@ (800979c <__pow5mult+0xb0>)
 8009724:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009728:	f001 fb62 	bl	800adf0 <__assert_func>
 800972c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009730:	6004      	str	r4, [r0, #0]
 8009732:	60c4      	str	r4, [r0, #12]
 8009734:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800973c:	b94c      	cbnz	r4, 8009752 <__pow5mult+0x66>
 800973e:	f240 2171 	movw	r1, #625	@ 0x271
 8009742:	4638      	mov	r0, r7
 8009744:	f7ff ff1a 	bl	800957c <__i2b>
 8009748:	2300      	movs	r3, #0
 800974a:	f8c8 0008 	str.w	r0, [r8, #8]
 800974e:	4604      	mov	r4, r0
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	f04f 0900 	mov.w	r9, #0
 8009756:	07eb      	lsls	r3, r5, #31
 8009758:	d50a      	bpl.n	8009770 <__pow5mult+0x84>
 800975a:	4631      	mov	r1, r6
 800975c:	4622      	mov	r2, r4
 800975e:	4638      	mov	r0, r7
 8009760:	f7ff ff22 	bl	80095a8 <__multiply>
 8009764:	4631      	mov	r1, r6
 8009766:	4680      	mov	r8, r0
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff fe09 	bl	8009380 <_Bfree>
 800976e:	4646      	mov	r6, r8
 8009770:	106d      	asrs	r5, r5, #1
 8009772:	d00b      	beq.n	800978c <__pow5mult+0xa0>
 8009774:	6820      	ldr	r0, [r4, #0]
 8009776:	b938      	cbnz	r0, 8009788 <__pow5mult+0x9c>
 8009778:	4622      	mov	r2, r4
 800977a:	4621      	mov	r1, r4
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff ff13 	bl	80095a8 <__multiply>
 8009782:	6020      	str	r0, [r4, #0]
 8009784:	f8c0 9000 	str.w	r9, [r0]
 8009788:	4604      	mov	r4, r0
 800978a:	e7e4      	b.n	8009756 <__pow5mult+0x6a>
 800978c:	4630      	mov	r0, r6
 800978e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009792:	bf00      	nop
 8009794:	0800c2ac 	.word	0x0800c2ac
 8009798:	0800c11a 	.word	0x0800c11a
 800979c:	0800c19a 	.word	0x0800c19a

080097a0 <__lshift>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	460c      	mov	r4, r1
 80097a6:	6849      	ldr	r1, [r1, #4]
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	4607      	mov	r7, r0
 80097b2:	4691      	mov	r9, r2
 80097b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097b8:	f108 0601 	add.w	r6, r8, #1
 80097bc:	42b3      	cmp	r3, r6
 80097be:	db0b      	blt.n	80097d8 <__lshift+0x38>
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7ff fd9d 	bl	8009300 <_Balloc>
 80097c6:	4605      	mov	r5, r0
 80097c8:	b948      	cbnz	r0, 80097de <__lshift+0x3e>
 80097ca:	4602      	mov	r2, r0
 80097cc:	4b28      	ldr	r3, [pc, #160]	@ (8009870 <__lshift+0xd0>)
 80097ce:	4829      	ldr	r0, [pc, #164]	@ (8009874 <__lshift+0xd4>)
 80097d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097d4:	f001 fb0c 	bl	800adf0 <__assert_func>
 80097d8:	3101      	adds	r1, #1
 80097da:	005b      	lsls	r3, r3, #1
 80097dc:	e7ee      	b.n	80097bc <__lshift+0x1c>
 80097de:	2300      	movs	r3, #0
 80097e0:	f100 0114 	add.w	r1, r0, #20
 80097e4:	f100 0210 	add.w	r2, r0, #16
 80097e8:	4618      	mov	r0, r3
 80097ea:	4553      	cmp	r3, sl
 80097ec:	db33      	blt.n	8009856 <__lshift+0xb6>
 80097ee:	6920      	ldr	r0, [r4, #16]
 80097f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097f4:	f104 0314 	add.w	r3, r4, #20
 80097f8:	f019 091f 	ands.w	r9, r9, #31
 80097fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009804:	d02b      	beq.n	800985e <__lshift+0xbe>
 8009806:	f1c9 0e20 	rsb	lr, r9, #32
 800980a:	468a      	mov	sl, r1
 800980c:	2200      	movs	r2, #0
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	fa00 f009 	lsl.w	r0, r0, r9
 8009814:	4310      	orrs	r0, r2
 8009816:	f84a 0b04 	str.w	r0, [sl], #4
 800981a:	f853 2b04 	ldr.w	r2, [r3], #4
 800981e:	459c      	cmp	ip, r3
 8009820:	fa22 f20e 	lsr.w	r2, r2, lr
 8009824:	d8f3      	bhi.n	800980e <__lshift+0x6e>
 8009826:	ebac 0304 	sub.w	r3, ip, r4
 800982a:	3b15      	subs	r3, #21
 800982c:	f023 0303 	bic.w	r3, r3, #3
 8009830:	3304      	adds	r3, #4
 8009832:	f104 0015 	add.w	r0, r4, #21
 8009836:	4560      	cmp	r0, ip
 8009838:	bf88      	it	hi
 800983a:	2304      	movhi	r3, #4
 800983c:	50ca      	str	r2, [r1, r3]
 800983e:	b10a      	cbz	r2, 8009844 <__lshift+0xa4>
 8009840:	f108 0602 	add.w	r6, r8, #2
 8009844:	3e01      	subs	r6, #1
 8009846:	4638      	mov	r0, r7
 8009848:	612e      	str	r6, [r5, #16]
 800984a:	4621      	mov	r1, r4
 800984c:	f7ff fd98 	bl	8009380 <_Bfree>
 8009850:	4628      	mov	r0, r5
 8009852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009856:	f842 0f04 	str.w	r0, [r2, #4]!
 800985a:	3301      	adds	r3, #1
 800985c:	e7c5      	b.n	80097ea <__lshift+0x4a>
 800985e:	3904      	subs	r1, #4
 8009860:	f853 2b04 	ldr.w	r2, [r3], #4
 8009864:	f841 2f04 	str.w	r2, [r1, #4]!
 8009868:	459c      	cmp	ip, r3
 800986a:	d8f9      	bhi.n	8009860 <__lshift+0xc0>
 800986c:	e7ea      	b.n	8009844 <__lshift+0xa4>
 800986e:	bf00      	nop
 8009870:	0800c189 	.word	0x0800c189
 8009874:	0800c19a 	.word	0x0800c19a

08009878 <__mcmp>:
 8009878:	690a      	ldr	r2, [r1, #16]
 800987a:	4603      	mov	r3, r0
 800987c:	6900      	ldr	r0, [r0, #16]
 800987e:	1a80      	subs	r0, r0, r2
 8009880:	b530      	push	{r4, r5, lr}
 8009882:	d10e      	bne.n	80098a2 <__mcmp+0x2a>
 8009884:	3314      	adds	r3, #20
 8009886:	3114      	adds	r1, #20
 8009888:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800988c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009898:	4295      	cmp	r5, r2
 800989a:	d003      	beq.n	80098a4 <__mcmp+0x2c>
 800989c:	d205      	bcs.n	80098aa <__mcmp+0x32>
 800989e:	f04f 30ff 	mov.w	r0, #4294967295
 80098a2:	bd30      	pop	{r4, r5, pc}
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	d3f3      	bcc.n	8009890 <__mcmp+0x18>
 80098a8:	e7fb      	b.n	80098a2 <__mcmp+0x2a>
 80098aa:	2001      	movs	r0, #1
 80098ac:	e7f9      	b.n	80098a2 <__mcmp+0x2a>
	...

080098b0 <__mdiff>:
 80098b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b4:	4689      	mov	r9, r1
 80098b6:	4606      	mov	r6, r0
 80098b8:	4611      	mov	r1, r2
 80098ba:	4648      	mov	r0, r9
 80098bc:	4614      	mov	r4, r2
 80098be:	f7ff ffdb 	bl	8009878 <__mcmp>
 80098c2:	1e05      	subs	r5, r0, #0
 80098c4:	d112      	bne.n	80098ec <__mdiff+0x3c>
 80098c6:	4629      	mov	r1, r5
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7ff fd19 	bl	8009300 <_Balloc>
 80098ce:	4602      	mov	r2, r0
 80098d0:	b928      	cbnz	r0, 80098de <__mdiff+0x2e>
 80098d2:	4b3f      	ldr	r3, [pc, #252]	@ (80099d0 <__mdiff+0x120>)
 80098d4:	f240 2137 	movw	r1, #567	@ 0x237
 80098d8:	483e      	ldr	r0, [pc, #248]	@ (80099d4 <__mdiff+0x124>)
 80098da:	f001 fa89 	bl	800adf0 <__assert_func>
 80098de:	2301      	movs	r3, #1
 80098e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098e4:	4610      	mov	r0, r2
 80098e6:	b003      	add	sp, #12
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	bfbc      	itt	lt
 80098ee:	464b      	movlt	r3, r9
 80098f0:	46a1      	movlt	r9, r4
 80098f2:	4630      	mov	r0, r6
 80098f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098f8:	bfba      	itte	lt
 80098fa:	461c      	movlt	r4, r3
 80098fc:	2501      	movlt	r5, #1
 80098fe:	2500      	movge	r5, #0
 8009900:	f7ff fcfe 	bl	8009300 <_Balloc>
 8009904:	4602      	mov	r2, r0
 8009906:	b918      	cbnz	r0, 8009910 <__mdiff+0x60>
 8009908:	4b31      	ldr	r3, [pc, #196]	@ (80099d0 <__mdiff+0x120>)
 800990a:	f240 2145 	movw	r1, #581	@ 0x245
 800990e:	e7e3      	b.n	80098d8 <__mdiff+0x28>
 8009910:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009914:	6926      	ldr	r6, [r4, #16]
 8009916:	60c5      	str	r5, [r0, #12]
 8009918:	f109 0310 	add.w	r3, r9, #16
 800991c:	f109 0514 	add.w	r5, r9, #20
 8009920:	f104 0e14 	add.w	lr, r4, #20
 8009924:	f100 0b14 	add.w	fp, r0, #20
 8009928:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800992c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	46d9      	mov	r9, fp
 8009934:	f04f 0c00 	mov.w	ip, #0
 8009938:	9b01      	ldr	r3, [sp, #4]
 800993a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800993e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	fa1f f38a 	uxth.w	r3, sl
 8009948:	4619      	mov	r1, r3
 800994a:	b283      	uxth	r3, r0
 800994c:	1acb      	subs	r3, r1, r3
 800994e:	0c00      	lsrs	r0, r0, #16
 8009950:	4463      	add	r3, ip
 8009952:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009956:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800995a:	b29b      	uxth	r3, r3
 800995c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009960:	4576      	cmp	r6, lr
 8009962:	f849 3b04 	str.w	r3, [r9], #4
 8009966:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800996a:	d8e5      	bhi.n	8009938 <__mdiff+0x88>
 800996c:	1b33      	subs	r3, r6, r4
 800996e:	3b15      	subs	r3, #21
 8009970:	f023 0303 	bic.w	r3, r3, #3
 8009974:	3415      	adds	r4, #21
 8009976:	3304      	adds	r3, #4
 8009978:	42a6      	cmp	r6, r4
 800997a:	bf38      	it	cc
 800997c:	2304      	movcc	r3, #4
 800997e:	441d      	add	r5, r3
 8009980:	445b      	add	r3, fp
 8009982:	461e      	mov	r6, r3
 8009984:	462c      	mov	r4, r5
 8009986:	4544      	cmp	r4, r8
 8009988:	d30e      	bcc.n	80099a8 <__mdiff+0xf8>
 800998a:	f108 0103 	add.w	r1, r8, #3
 800998e:	1b49      	subs	r1, r1, r5
 8009990:	f021 0103 	bic.w	r1, r1, #3
 8009994:	3d03      	subs	r5, #3
 8009996:	45a8      	cmp	r8, r5
 8009998:	bf38      	it	cc
 800999a:	2100      	movcc	r1, #0
 800999c:	440b      	add	r3, r1
 800999e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099a2:	b191      	cbz	r1, 80099ca <__mdiff+0x11a>
 80099a4:	6117      	str	r7, [r2, #16]
 80099a6:	e79d      	b.n	80098e4 <__mdiff+0x34>
 80099a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80099ac:	46e6      	mov	lr, ip
 80099ae:	0c08      	lsrs	r0, r1, #16
 80099b0:	fa1c fc81 	uxtah	ip, ip, r1
 80099b4:	4471      	add	r1, lr
 80099b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099ba:	b289      	uxth	r1, r1
 80099bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099c0:	f846 1b04 	str.w	r1, [r6], #4
 80099c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099c8:	e7dd      	b.n	8009986 <__mdiff+0xd6>
 80099ca:	3f01      	subs	r7, #1
 80099cc:	e7e7      	b.n	800999e <__mdiff+0xee>
 80099ce:	bf00      	nop
 80099d0:	0800c189 	.word	0x0800c189
 80099d4:	0800c19a 	.word	0x0800c19a

080099d8 <__ulp>:
 80099d8:	b082      	sub	sp, #8
 80099da:	ed8d 0b00 	vstr	d0, [sp]
 80099de:	9a01      	ldr	r2, [sp, #4]
 80099e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009a20 <__ulp+0x48>)
 80099e2:	4013      	ands	r3, r2
 80099e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dc08      	bgt.n	80099fe <__ulp+0x26>
 80099ec:	425b      	negs	r3, r3
 80099ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80099f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80099f6:	da04      	bge.n	8009a02 <__ulp+0x2a>
 80099f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80099fc:	4113      	asrs	r3, r2
 80099fe:	2200      	movs	r2, #0
 8009a00:	e008      	b.n	8009a14 <__ulp+0x3c>
 8009a02:	f1a2 0314 	sub.w	r3, r2, #20
 8009a06:	2b1e      	cmp	r3, #30
 8009a08:	bfda      	itte	le
 8009a0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009a0e:	40da      	lsrle	r2, r3
 8009a10:	2201      	movgt	r2, #1
 8009a12:	2300      	movs	r3, #0
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	ec41 0b10 	vmov	d0, r0, r1
 8009a1c:	b002      	add	sp, #8
 8009a1e:	4770      	bx	lr
 8009a20:	7ff00000 	.word	0x7ff00000

08009a24 <__b2d>:
 8009a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a28:	6906      	ldr	r6, [r0, #16]
 8009a2a:	f100 0814 	add.w	r8, r0, #20
 8009a2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a32:	1f37      	subs	r7, r6, #4
 8009a34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a38:	4610      	mov	r0, r2
 8009a3a:	f7ff fd53 	bl	80094e4 <__hi0bits>
 8009a3e:	f1c0 0320 	rsb	r3, r0, #32
 8009a42:	280a      	cmp	r0, #10
 8009a44:	600b      	str	r3, [r1, #0]
 8009a46:	491b      	ldr	r1, [pc, #108]	@ (8009ab4 <__b2d+0x90>)
 8009a48:	dc15      	bgt.n	8009a76 <__b2d+0x52>
 8009a4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009a52:	45b8      	cmp	r8, r7
 8009a54:	ea43 0501 	orr.w	r5, r3, r1
 8009a58:	bf34      	ite	cc
 8009a5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a5e:	2300      	movcs	r3, #0
 8009a60:	3015      	adds	r0, #21
 8009a62:	fa02 f000 	lsl.w	r0, r2, r0
 8009a66:	fa23 f30c 	lsr.w	r3, r3, ip
 8009a6a:	4303      	orrs	r3, r0
 8009a6c:	461c      	mov	r4, r3
 8009a6e:	ec45 4b10 	vmov	d0, r4, r5
 8009a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a76:	45b8      	cmp	r8, r7
 8009a78:	bf3a      	itte	cc
 8009a7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009a82:	2300      	movcs	r3, #0
 8009a84:	380b      	subs	r0, #11
 8009a86:	d012      	beq.n	8009aae <__b2d+0x8a>
 8009a88:	f1c0 0120 	rsb	r1, r0, #32
 8009a8c:	fa23 f401 	lsr.w	r4, r3, r1
 8009a90:	4082      	lsls	r2, r0
 8009a92:	4322      	orrs	r2, r4
 8009a94:	4547      	cmp	r7, r8
 8009a96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009a9a:	bf8c      	ite	hi
 8009a9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009aa0:	2200      	movls	r2, #0
 8009aa2:	4083      	lsls	r3, r0
 8009aa4:	40ca      	lsrs	r2, r1
 8009aa6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	e7de      	b.n	8009a6c <__b2d+0x48>
 8009aae:	ea42 0501 	orr.w	r5, r2, r1
 8009ab2:	e7db      	b.n	8009a6c <__b2d+0x48>
 8009ab4:	3ff00000 	.word	0x3ff00000

08009ab8 <__d2b>:
 8009ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009abc:	460f      	mov	r7, r1
 8009abe:	2101      	movs	r1, #1
 8009ac0:	ec59 8b10 	vmov	r8, r9, d0
 8009ac4:	4616      	mov	r6, r2
 8009ac6:	f7ff fc1b 	bl	8009300 <_Balloc>
 8009aca:	4604      	mov	r4, r0
 8009acc:	b930      	cbnz	r0, 8009adc <__d2b+0x24>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b23      	ldr	r3, [pc, #140]	@ (8009b60 <__d2b+0xa8>)
 8009ad2:	4824      	ldr	r0, [pc, #144]	@ (8009b64 <__d2b+0xac>)
 8009ad4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ad8:	f001 f98a 	bl	800adf0 <__assert_func>
 8009adc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ae4:	b10d      	cbz	r5, 8009aea <__d2b+0x32>
 8009ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009aea:	9301      	str	r3, [sp, #4]
 8009aec:	f1b8 0300 	subs.w	r3, r8, #0
 8009af0:	d023      	beq.n	8009b3a <__d2b+0x82>
 8009af2:	4668      	mov	r0, sp
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	f7ff fd14 	bl	8009522 <__lo0bits>
 8009afa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009afe:	b1d0      	cbz	r0, 8009b36 <__d2b+0x7e>
 8009b00:	f1c0 0320 	rsb	r3, r0, #32
 8009b04:	fa02 f303 	lsl.w	r3, r2, r3
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	40c2      	lsrs	r2, r0
 8009b0c:	6163      	str	r3, [r4, #20]
 8009b0e:	9201      	str	r2, [sp, #4]
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	61a3      	str	r3, [r4, #24]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	bf0c      	ite	eq
 8009b18:	2201      	moveq	r2, #1
 8009b1a:	2202      	movne	r2, #2
 8009b1c:	6122      	str	r2, [r4, #16]
 8009b1e:	b1a5      	cbz	r5, 8009b4a <__d2b+0x92>
 8009b20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b24:	4405      	add	r5, r0
 8009b26:	603d      	str	r5, [r7, #0]
 8009b28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b2c:	6030      	str	r0, [r6, #0]
 8009b2e:	4620      	mov	r0, r4
 8009b30:	b003      	add	sp, #12
 8009b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b36:	6161      	str	r1, [r4, #20]
 8009b38:	e7ea      	b.n	8009b10 <__d2b+0x58>
 8009b3a:	a801      	add	r0, sp, #4
 8009b3c:	f7ff fcf1 	bl	8009522 <__lo0bits>
 8009b40:	9b01      	ldr	r3, [sp, #4]
 8009b42:	6163      	str	r3, [r4, #20]
 8009b44:	3020      	adds	r0, #32
 8009b46:	2201      	movs	r2, #1
 8009b48:	e7e8      	b.n	8009b1c <__d2b+0x64>
 8009b4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b52:	6038      	str	r0, [r7, #0]
 8009b54:	6918      	ldr	r0, [r3, #16]
 8009b56:	f7ff fcc5 	bl	80094e4 <__hi0bits>
 8009b5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b5e:	e7e5      	b.n	8009b2c <__d2b+0x74>
 8009b60:	0800c189 	.word	0x0800c189
 8009b64:	0800c19a 	.word	0x0800c19a

08009b68 <__ratio>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	b085      	sub	sp, #20
 8009b6e:	e9cd 1000 	strd	r1, r0, [sp]
 8009b72:	a902      	add	r1, sp, #8
 8009b74:	f7ff ff56 	bl	8009a24 <__b2d>
 8009b78:	9800      	ldr	r0, [sp, #0]
 8009b7a:	a903      	add	r1, sp, #12
 8009b7c:	ec55 4b10 	vmov	r4, r5, d0
 8009b80:	f7ff ff50 	bl	8009a24 <__b2d>
 8009b84:	9b01      	ldr	r3, [sp, #4]
 8009b86:	6919      	ldr	r1, [r3, #16]
 8009b88:	9b00      	ldr	r3, [sp, #0]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	1ac9      	subs	r1, r1, r3
 8009b8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009b92:	1a9b      	subs	r3, r3, r2
 8009b94:	ec5b ab10 	vmov	sl, fp, d0
 8009b98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	bfce      	itee	gt
 8009ba0:	462a      	movgt	r2, r5
 8009ba2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ba6:	465a      	movle	r2, fp
 8009ba8:	462f      	mov	r7, r5
 8009baa:	46d9      	mov	r9, fp
 8009bac:	bfcc      	ite	gt
 8009bae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009bb2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009bb6:	464b      	mov	r3, r9
 8009bb8:	4652      	mov	r2, sl
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	f7f6 fe45 	bl	800084c <__aeabi_ddiv>
 8009bc2:	ec41 0b10 	vmov	d0, r0, r1
 8009bc6:	b005      	add	sp, #20
 8009bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bcc <__copybits>:
 8009bcc:	3901      	subs	r1, #1
 8009bce:	b570      	push	{r4, r5, r6, lr}
 8009bd0:	1149      	asrs	r1, r1, #5
 8009bd2:	6914      	ldr	r4, [r2, #16]
 8009bd4:	3101      	adds	r1, #1
 8009bd6:	f102 0314 	add.w	r3, r2, #20
 8009bda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009be2:	1f05      	subs	r5, r0, #4
 8009be4:	42a3      	cmp	r3, r4
 8009be6:	d30c      	bcc.n	8009c02 <__copybits+0x36>
 8009be8:	1aa3      	subs	r3, r4, r2
 8009bea:	3b11      	subs	r3, #17
 8009bec:	f023 0303 	bic.w	r3, r3, #3
 8009bf0:	3211      	adds	r2, #17
 8009bf2:	42a2      	cmp	r2, r4
 8009bf4:	bf88      	it	hi
 8009bf6:	2300      	movhi	r3, #0
 8009bf8:	4418      	add	r0, r3
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4288      	cmp	r0, r1
 8009bfe:	d305      	bcc.n	8009c0c <__copybits+0x40>
 8009c00:	bd70      	pop	{r4, r5, r6, pc}
 8009c02:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c06:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c0a:	e7eb      	b.n	8009be4 <__copybits+0x18>
 8009c0c:	f840 3b04 	str.w	r3, [r0], #4
 8009c10:	e7f4      	b.n	8009bfc <__copybits+0x30>

08009c12 <__any_on>:
 8009c12:	f100 0214 	add.w	r2, r0, #20
 8009c16:	6900      	ldr	r0, [r0, #16]
 8009c18:	114b      	asrs	r3, r1, #5
 8009c1a:	4298      	cmp	r0, r3
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	db11      	blt.n	8009c44 <__any_on+0x32>
 8009c20:	dd0a      	ble.n	8009c38 <__any_on+0x26>
 8009c22:	f011 011f 	ands.w	r1, r1, #31
 8009c26:	d007      	beq.n	8009c38 <__any_on+0x26>
 8009c28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c2c:	fa24 f001 	lsr.w	r0, r4, r1
 8009c30:	fa00 f101 	lsl.w	r1, r0, r1
 8009c34:	428c      	cmp	r4, r1
 8009c36:	d10b      	bne.n	8009c50 <__any_on+0x3e>
 8009c38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d803      	bhi.n	8009c48 <__any_on+0x36>
 8009c40:	2000      	movs	r0, #0
 8009c42:	bd10      	pop	{r4, pc}
 8009c44:	4603      	mov	r3, r0
 8009c46:	e7f7      	b.n	8009c38 <__any_on+0x26>
 8009c48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c4c:	2900      	cmp	r1, #0
 8009c4e:	d0f5      	beq.n	8009c3c <__any_on+0x2a>
 8009c50:	2001      	movs	r0, #1
 8009c52:	e7f6      	b.n	8009c42 <__any_on+0x30>

08009c54 <sulp>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	4604      	mov	r4, r0
 8009c58:	460d      	mov	r5, r1
 8009c5a:	ec45 4b10 	vmov	d0, r4, r5
 8009c5e:	4616      	mov	r6, r2
 8009c60:	f7ff feba 	bl	80099d8 <__ulp>
 8009c64:	ec51 0b10 	vmov	r0, r1, d0
 8009c68:	b17e      	cbz	r6, 8009c8a <sulp+0x36>
 8009c6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	dd09      	ble.n	8009c8a <sulp+0x36>
 8009c76:	051b      	lsls	r3, r3, #20
 8009c78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009c7c:	2400      	movs	r4, #0
 8009c7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009c82:	4622      	mov	r2, r4
 8009c84:	462b      	mov	r3, r5
 8009c86:	f7f6 fcb7 	bl	80005f8 <__aeabi_dmul>
 8009c8a:	ec41 0b10 	vmov	d0, r0, r1
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}

08009c90 <_strtod_l>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	b09f      	sub	sp, #124	@ 0x7c
 8009c96:	460c      	mov	r4, r1
 8009c98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009c9e:	9005      	str	r0, [sp, #20]
 8009ca0:	f04f 0a00 	mov.w	sl, #0
 8009ca4:	f04f 0b00 	mov.w	fp, #0
 8009ca8:	460a      	mov	r2, r1
 8009caa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cac:	7811      	ldrb	r1, [r2, #0]
 8009cae:	292b      	cmp	r1, #43	@ 0x2b
 8009cb0:	d04a      	beq.n	8009d48 <_strtod_l+0xb8>
 8009cb2:	d838      	bhi.n	8009d26 <_strtod_l+0x96>
 8009cb4:	290d      	cmp	r1, #13
 8009cb6:	d832      	bhi.n	8009d1e <_strtod_l+0x8e>
 8009cb8:	2908      	cmp	r1, #8
 8009cba:	d832      	bhi.n	8009d22 <_strtod_l+0x92>
 8009cbc:	2900      	cmp	r1, #0
 8009cbe:	d03b      	beq.n	8009d38 <_strtod_l+0xa8>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009cc6:	782a      	ldrb	r2, [r5, #0]
 8009cc8:	2a30      	cmp	r2, #48	@ 0x30
 8009cca:	f040 80b2 	bne.w	8009e32 <_strtod_l+0x1a2>
 8009cce:	786a      	ldrb	r2, [r5, #1]
 8009cd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009cd4:	2a58      	cmp	r2, #88	@ 0x58
 8009cd6:	d16e      	bne.n	8009db6 <_strtod_l+0x126>
 8009cd8:	9302      	str	r3, [sp, #8]
 8009cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	4a8f      	ldr	r2, [pc, #572]	@ (8009f20 <_strtod_l+0x290>)
 8009ce4:	9805      	ldr	r0, [sp, #20]
 8009ce6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ce8:	a919      	add	r1, sp, #100	@ 0x64
 8009cea:	f001 f91b 	bl	800af24 <__gethex>
 8009cee:	f010 060f 	ands.w	r6, r0, #15
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	d005      	beq.n	8009d02 <_strtod_l+0x72>
 8009cf6:	2e06      	cmp	r6, #6
 8009cf8:	d128      	bne.n	8009d4c <_strtod_l+0xbc>
 8009cfa:	3501      	adds	r5, #1
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9519      	str	r5, [sp, #100]	@ 0x64
 8009d00:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f040 858e 	bne.w	800a826 <_strtod_l+0xb96>
 8009d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d0c:	b1cb      	cbz	r3, 8009d42 <_strtod_l+0xb2>
 8009d0e:	4652      	mov	r2, sl
 8009d10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009d14:	ec43 2b10 	vmov	d0, r2, r3
 8009d18:	b01f      	add	sp, #124	@ 0x7c
 8009d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1e:	2920      	cmp	r1, #32
 8009d20:	d1ce      	bne.n	8009cc0 <_strtod_l+0x30>
 8009d22:	3201      	adds	r2, #1
 8009d24:	e7c1      	b.n	8009caa <_strtod_l+0x1a>
 8009d26:	292d      	cmp	r1, #45	@ 0x2d
 8009d28:	d1ca      	bne.n	8009cc0 <_strtod_l+0x30>
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	910e      	str	r1, [sp, #56]	@ 0x38
 8009d2e:	1c51      	adds	r1, r2, #1
 8009d30:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d32:	7852      	ldrb	r2, [r2, #1]
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	d1c5      	bne.n	8009cc4 <_strtod_l+0x34>
 8009d38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f040 8570 	bne.w	800a822 <_strtod_l+0xb92>
 8009d42:	4652      	mov	r2, sl
 8009d44:	465b      	mov	r3, fp
 8009d46:	e7e5      	b.n	8009d14 <_strtod_l+0x84>
 8009d48:	2100      	movs	r1, #0
 8009d4a:	e7ef      	b.n	8009d2c <_strtod_l+0x9c>
 8009d4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d4e:	b13a      	cbz	r2, 8009d60 <_strtod_l+0xd0>
 8009d50:	2135      	movs	r1, #53	@ 0x35
 8009d52:	a81c      	add	r0, sp, #112	@ 0x70
 8009d54:	f7ff ff3a 	bl	8009bcc <__copybits>
 8009d58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d5a:	9805      	ldr	r0, [sp, #20]
 8009d5c:	f7ff fb10 	bl	8009380 <_Bfree>
 8009d60:	3e01      	subs	r6, #1
 8009d62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009d64:	2e04      	cmp	r6, #4
 8009d66:	d806      	bhi.n	8009d76 <_strtod_l+0xe6>
 8009d68:	e8df f006 	tbb	[pc, r6]
 8009d6c:	201d0314 	.word	0x201d0314
 8009d70:	14          	.byte	0x14
 8009d71:	00          	.byte	0x00
 8009d72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009d76:	05e1      	lsls	r1, r4, #23
 8009d78:	bf48      	it	mi
 8009d7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d82:	0d1b      	lsrs	r3, r3, #20
 8009d84:	051b      	lsls	r3, r3, #20
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1bb      	bne.n	8009d02 <_strtod_l+0x72>
 8009d8a:	f7fe fb1f 	bl	80083cc <__errno>
 8009d8e:	2322      	movs	r3, #34	@ 0x22
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	e7b6      	b.n	8009d02 <_strtod_l+0x72>
 8009d94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009d98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009da0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009da4:	e7e7      	b.n	8009d76 <_strtod_l+0xe6>
 8009da6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009f28 <_strtod_l+0x298>
 8009daa:	e7e4      	b.n	8009d76 <_strtod_l+0xe6>
 8009dac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009db0:	f04f 3aff 	mov.w	sl, #4294967295
 8009db4:	e7df      	b.n	8009d76 <_strtod_l+0xe6>
 8009db6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	2b30      	cmp	r3, #48	@ 0x30
 8009dc0:	d0f9      	beq.n	8009db6 <_strtod_l+0x126>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d09d      	beq.n	8009d02 <_strtod_l+0x72>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	2700      	movs	r7, #0
 8009dca:	9308      	str	r3, [sp, #32]
 8009dcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dce:	930c      	str	r3, [sp, #48]	@ 0x30
 8009dd0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009dd2:	46b9      	mov	r9, r7
 8009dd4:	220a      	movs	r2, #10
 8009dd6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009dd8:	7805      	ldrb	r5, [r0, #0]
 8009dda:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009dde:	b2d9      	uxtb	r1, r3
 8009de0:	2909      	cmp	r1, #9
 8009de2:	d928      	bls.n	8009e36 <_strtod_l+0x1a6>
 8009de4:	494f      	ldr	r1, [pc, #316]	@ (8009f24 <_strtod_l+0x294>)
 8009de6:	2201      	movs	r2, #1
 8009de8:	f000 ffd6 	bl	800ad98 <strncmp>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d032      	beq.n	8009e56 <_strtod_l+0x1c6>
 8009df0:	2000      	movs	r0, #0
 8009df2:	462a      	mov	r2, r5
 8009df4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009df6:	464d      	mov	r5, r9
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2a65      	cmp	r2, #101	@ 0x65
 8009dfc:	d001      	beq.n	8009e02 <_strtod_l+0x172>
 8009dfe:	2a45      	cmp	r2, #69	@ 0x45
 8009e00:	d114      	bne.n	8009e2c <_strtod_l+0x19c>
 8009e02:	b91d      	cbnz	r5, 8009e0c <_strtod_l+0x17c>
 8009e04:	9a08      	ldr	r2, [sp, #32]
 8009e06:	4302      	orrs	r2, r0
 8009e08:	d096      	beq.n	8009d38 <_strtod_l+0xa8>
 8009e0a:	2500      	movs	r5, #0
 8009e0c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009e0e:	1c62      	adds	r2, r4, #1
 8009e10:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e12:	7862      	ldrb	r2, [r4, #1]
 8009e14:	2a2b      	cmp	r2, #43	@ 0x2b
 8009e16:	d07a      	beq.n	8009f0e <_strtod_l+0x27e>
 8009e18:	2a2d      	cmp	r2, #45	@ 0x2d
 8009e1a:	d07e      	beq.n	8009f1a <_strtod_l+0x28a>
 8009e1c:	f04f 0c00 	mov.w	ip, #0
 8009e20:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009e24:	2909      	cmp	r1, #9
 8009e26:	f240 8085 	bls.w	8009f34 <_strtod_l+0x2a4>
 8009e2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e2c:	f04f 0800 	mov.w	r8, #0
 8009e30:	e0a5      	b.n	8009f7e <_strtod_l+0x2ee>
 8009e32:	2300      	movs	r3, #0
 8009e34:	e7c8      	b.n	8009dc8 <_strtod_l+0x138>
 8009e36:	f1b9 0f08 	cmp.w	r9, #8
 8009e3a:	bfd8      	it	le
 8009e3c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009e3e:	f100 0001 	add.w	r0, r0, #1
 8009e42:	bfda      	itte	le
 8009e44:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e48:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009e4a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009e4e:	f109 0901 	add.w	r9, r9, #1
 8009e52:	9019      	str	r0, [sp, #100]	@ 0x64
 8009e54:	e7bf      	b.n	8009dd6 <_strtod_l+0x146>
 8009e56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e5c:	785a      	ldrb	r2, [r3, #1]
 8009e5e:	f1b9 0f00 	cmp.w	r9, #0
 8009e62:	d03b      	beq.n	8009edc <_strtod_l+0x24c>
 8009e64:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e66:	464d      	mov	r5, r9
 8009e68:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009e6c:	2b09      	cmp	r3, #9
 8009e6e:	d912      	bls.n	8009e96 <_strtod_l+0x206>
 8009e70:	2301      	movs	r3, #1
 8009e72:	e7c2      	b.n	8009dfa <_strtod_l+0x16a>
 8009e74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e76:	1c5a      	adds	r2, r3, #1
 8009e78:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e7a:	785a      	ldrb	r2, [r3, #1]
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	2a30      	cmp	r2, #48	@ 0x30
 8009e80:	d0f8      	beq.n	8009e74 <_strtod_l+0x1e4>
 8009e82:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	f200 84d2 	bhi.w	800a830 <_strtod_l+0xba0>
 8009e8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e8e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e90:	2000      	movs	r0, #0
 8009e92:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e94:	4605      	mov	r5, r0
 8009e96:	3a30      	subs	r2, #48	@ 0x30
 8009e98:	f100 0301 	add.w	r3, r0, #1
 8009e9c:	d018      	beq.n	8009ed0 <_strtod_l+0x240>
 8009e9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ea0:	4419      	add	r1, r3
 8009ea2:	910a      	str	r1, [sp, #40]	@ 0x28
 8009ea4:	462e      	mov	r6, r5
 8009ea6:	f04f 0e0a 	mov.w	lr, #10
 8009eaa:	1c71      	adds	r1, r6, #1
 8009eac:	eba1 0c05 	sub.w	ip, r1, r5
 8009eb0:	4563      	cmp	r3, ip
 8009eb2:	dc15      	bgt.n	8009ee0 <_strtod_l+0x250>
 8009eb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009eb8:	182b      	adds	r3, r5, r0
 8009eba:	2b08      	cmp	r3, #8
 8009ebc:	f105 0501 	add.w	r5, r5, #1
 8009ec0:	4405      	add	r5, r0
 8009ec2:	dc1a      	bgt.n	8009efa <_strtod_l+0x26a>
 8009ec4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ec6:	230a      	movs	r3, #10
 8009ec8:	fb03 2301 	mla	r3, r3, r1, r2
 8009ecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ed2:	1c51      	adds	r1, r2, #1
 8009ed4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009ed6:	7852      	ldrb	r2, [r2, #1]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	e7c5      	b.n	8009e68 <_strtod_l+0x1d8>
 8009edc:	4648      	mov	r0, r9
 8009ede:	e7ce      	b.n	8009e7e <_strtod_l+0x1ee>
 8009ee0:	2e08      	cmp	r6, #8
 8009ee2:	dc05      	bgt.n	8009ef0 <_strtod_l+0x260>
 8009ee4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009ee6:	fb0e f606 	mul.w	r6, lr, r6
 8009eea:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009eec:	460e      	mov	r6, r1
 8009eee:	e7dc      	b.n	8009eaa <_strtod_l+0x21a>
 8009ef0:	2910      	cmp	r1, #16
 8009ef2:	bfd8      	it	le
 8009ef4:	fb0e f707 	mulle.w	r7, lr, r7
 8009ef8:	e7f8      	b.n	8009eec <_strtod_l+0x25c>
 8009efa:	2b0f      	cmp	r3, #15
 8009efc:	bfdc      	itt	le
 8009efe:	230a      	movle	r3, #10
 8009f00:	fb03 2707 	mlale	r7, r3, r7, r2
 8009f04:	e7e3      	b.n	8009ece <_strtod_l+0x23e>
 8009f06:	2300      	movs	r3, #0
 8009f08:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e77a      	b.n	8009e04 <_strtod_l+0x174>
 8009f0e:	f04f 0c00 	mov.w	ip, #0
 8009f12:	1ca2      	adds	r2, r4, #2
 8009f14:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f16:	78a2      	ldrb	r2, [r4, #2]
 8009f18:	e782      	b.n	8009e20 <_strtod_l+0x190>
 8009f1a:	f04f 0c01 	mov.w	ip, #1
 8009f1e:	e7f8      	b.n	8009f12 <_strtod_l+0x282>
 8009f20:	0800c3bc 	.word	0x0800c3bc
 8009f24:	0800c1f3 	.word	0x0800c1f3
 8009f28:	7ff00000 	.word	0x7ff00000
 8009f2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f2e:	1c51      	adds	r1, r2, #1
 8009f30:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f32:	7852      	ldrb	r2, [r2, #1]
 8009f34:	2a30      	cmp	r2, #48	@ 0x30
 8009f36:	d0f9      	beq.n	8009f2c <_strtod_l+0x29c>
 8009f38:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009f3c:	2908      	cmp	r1, #8
 8009f3e:	f63f af75 	bhi.w	8009e2c <_strtod_l+0x19c>
 8009f42:	3a30      	subs	r2, #48	@ 0x30
 8009f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f48:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009f4a:	f04f 080a 	mov.w	r8, #10
 8009f4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f50:	1c56      	adds	r6, r2, #1
 8009f52:	9619      	str	r6, [sp, #100]	@ 0x64
 8009f54:	7852      	ldrb	r2, [r2, #1]
 8009f56:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009f5a:	f1be 0f09 	cmp.w	lr, #9
 8009f5e:	d939      	bls.n	8009fd4 <_strtod_l+0x344>
 8009f60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f62:	1a76      	subs	r6, r6, r1
 8009f64:	2e08      	cmp	r6, #8
 8009f66:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009f6a:	dc03      	bgt.n	8009f74 <_strtod_l+0x2e4>
 8009f6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f6e:	4588      	cmp	r8, r1
 8009f70:	bfa8      	it	ge
 8009f72:	4688      	movge	r8, r1
 8009f74:	f1bc 0f00 	cmp.w	ip, #0
 8009f78:	d001      	beq.n	8009f7e <_strtod_l+0x2ee>
 8009f7a:	f1c8 0800 	rsb	r8, r8, #0
 8009f7e:	2d00      	cmp	r5, #0
 8009f80:	d14e      	bne.n	800a020 <_strtod_l+0x390>
 8009f82:	9908      	ldr	r1, [sp, #32]
 8009f84:	4308      	orrs	r0, r1
 8009f86:	f47f aebc 	bne.w	8009d02 <_strtod_l+0x72>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f47f aed4 	bne.w	8009d38 <_strtod_l+0xa8>
 8009f90:	2a69      	cmp	r2, #105	@ 0x69
 8009f92:	d028      	beq.n	8009fe6 <_strtod_l+0x356>
 8009f94:	dc25      	bgt.n	8009fe2 <_strtod_l+0x352>
 8009f96:	2a49      	cmp	r2, #73	@ 0x49
 8009f98:	d025      	beq.n	8009fe6 <_strtod_l+0x356>
 8009f9a:	2a4e      	cmp	r2, #78	@ 0x4e
 8009f9c:	f47f aecc 	bne.w	8009d38 <_strtod_l+0xa8>
 8009fa0:	499a      	ldr	r1, [pc, #616]	@ (800a20c <_strtod_l+0x57c>)
 8009fa2:	a819      	add	r0, sp, #100	@ 0x64
 8009fa4:	f001 f9e0 	bl	800b368 <__match>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	f43f aec5 	beq.w	8009d38 <_strtod_l+0xa8>
 8009fae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b28      	cmp	r3, #40	@ 0x28
 8009fb4:	d12e      	bne.n	800a014 <_strtod_l+0x384>
 8009fb6:	4996      	ldr	r1, [pc, #600]	@ (800a210 <_strtod_l+0x580>)
 8009fb8:	aa1c      	add	r2, sp, #112	@ 0x70
 8009fba:	a819      	add	r0, sp, #100	@ 0x64
 8009fbc:	f001 f9e8 	bl	800b390 <__hexnan>
 8009fc0:	2805      	cmp	r0, #5
 8009fc2:	d127      	bne.n	800a014 <_strtod_l+0x384>
 8009fc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fc6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009fca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009fce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009fd2:	e696      	b.n	8009d02 <_strtod_l+0x72>
 8009fd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fd6:	fb08 2101 	mla	r1, r8, r1, r2
 8009fda:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009fde:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fe0:	e7b5      	b.n	8009f4e <_strtod_l+0x2be>
 8009fe2:	2a6e      	cmp	r2, #110	@ 0x6e
 8009fe4:	e7da      	b.n	8009f9c <_strtod_l+0x30c>
 8009fe6:	498b      	ldr	r1, [pc, #556]	@ (800a214 <_strtod_l+0x584>)
 8009fe8:	a819      	add	r0, sp, #100	@ 0x64
 8009fea:	f001 f9bd 	bl	800b368 <__match>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	f43f aea2 	beq.w	8009d38 <_strtod_l+0xa8>
 8009ff4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ff6:	4988      	ldr	r1, [pc, #544]	@ (800a218 <_strtod_l+0x588>)
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	a819      	add	r0, sp, #100	@ 0x64
 8009ffc:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ffe:	f001 f9b3 	bl	800b368 <__match>
 800a002:	b910      	cbnz	r0, 800a00a <_strtod_l+0x37a>
 800a004:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a006:	3301      	adds	r3, #1
 800a008:	9319      	str	r3, [sp, #100]	@ 0x64
 800a00a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a228 <_strtod_l+0x598>
 800a00e:	f04f 0a00 	mov.w	sl, #0
 800a012:	e676      	b.n	8009d02 <_strtod_l+0x72>
 800a014:	4881      	ldr	r0, [pc, #516]	@ (800a21c <_strtod_l+0x58c>)
 800a016:	f000 fee3 	bl	800ade0 <nan>
 800a01a:	ec5b ab10 	vmov	sl, fp, d0
 800a01e:	e670      	b.n	8009d02 <_strtod_l+0x72>
 800a020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a022:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a024:	eba8 0303 	sub.w	r3, r8, r3
 800a028:	f1b9 0f00 	cmp.w	r9, #0
 800a02c:	bf08      	it	eq
 800a02e:	46a9      	moveq	r9, r5
 800a030:	2d10      	cmp	r5, #16
 800a032:	9309      	str	r3, [sp, #36]	@ 0x24
 800a034:	462c      	mov	r4, r5
 800a036:	bfa8      	it	ge
 800a038:	2410      	movge	r4, #16
 800a03a:	f7f6 fa63 	bl	8000504 <__aeabi_ui2d>
 800a03e:	2d09      	cmp	r5, #9
 800a040:	4682      	mov	sl, r0
 800a042:	468b      	mov	fp, r1
 800a044:	dc13      	bgt.n	800a06e <_strtod_l+0x3de>
 800a046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f43f ae5a 	beq.w	8009d02 <_strtod_l+0x72>
 800a04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a050:	dd78      	ble.n	800a144 <_strtod_l+0x4b4>
 800a052:	2b16      	cmp	r3, #22
 800a054:	dc5f      	bgt.n	800a116 <_strtod_l+0x486>
 800a056:	4972      	ldr	r1, [pc, #456]	@ (800a220 <_strtod_l+0x590>)
 800a058:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a060:	4652      	mov	r2, sl
 800a062:	465b      	mov	r3, fp
 800a064:	f7f6 fac8 	bl	80005f8 <__aeabi_dmul>
 800a068:	4682      	mov	sl, r0
 800a06a:	468b      	mov	fp, r1
 800a06c:	e649      	b.n	8009d02 <_strtod_l+0x72>
 800a06e:	4b6c      	ldr	r3, [pc, #432]	@ (800a220 <_strtod_l+0x590>)
 800a070:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a074:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a078:	f7f6 fabe 	bl	80005f8 <__aeabi_dmul>
 800a07c:	4682      	mov	sl, r0
 800a07e:	4638      	mov	r0, r7
 800a080:	468b      	mov	fp, r1
 800a082:	f7f6 fa3f 	bl	8000504 <__aeabi_ui2d>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	4650      	mov	r0, sl
 800a08c:	4659      	mov	r1, fp
 800a08e:	f7f6 f8fd 	bl	800028c <__adddf3>
 800a092:	2d0f      	cmp	r5, #15
 800a094:	4682      	mov	sl, r0
 800a096:	468b      	mov	fp, r1
 800a098:	ddd5      	ble.n	800a046 <_strtod_l+0x3b6>
 800a09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a09c:	1b2c      	subs	r4, r5, r4
 800a09e:	441c      	add	r4, r3
 800a0a0:	2c00      	cmp	r4, #0
 800a0a2:	f340 8093 	ble.w	800a1cc <_strtod_l+0x53c>
 800a0a6:	f014 030f 	ands.w	r3, r4, #15
 800a0aa:	d00a      	beq.n	800a0c2 <_strtod_l+0x432>
 800a0ac:	495c      	ldr	r1, [pc, #368]	@ (800a220 <_strtod_l+0x590>)
 800a0ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0b2:	4652      	mov	r2, sl
 800a0b4:	465b      	mov	r3, fp
 800a0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ba:	f7f6 fa9d 	bl	80005f8 <__aeabi_dmul>
 800a0be:	4682      	mov	sl, r0
 800a0c0:	468b      	mov	fp, r1
 800a0c2:	f034 040f 	bics.w	r4, r4, #15
 800a0c6:	d073      	beq.n	800a1b0 <_strtod_l+0x520>
 800a0c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a0cc:	dd49      	ble.n	800a162 <_strtod_l+0x4d2>
 800a0ce:	2400      	movs	r4, #0
 800a0d0:	46a0      	mov	r8, r4
 800a0d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a0d4:	46a1      	mov	r9, r4
 800a0d6:	9a05      	ldr	r2, [sp, #20]
 800a0d8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a228 <_strtod_l+0x598>
 800a0dc:	2322      	movs	r3, #34	@ 0x22
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	f04f 0a00 	mov.w	sl, #0
 800a0e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f43f ae0b 	beq.w	8009d02 <_strtod_l+0x72>
 800a0ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0ee:	9805      	ldr	r0, [sp, #20]
 800a0f0:	f7ff f946 	bl	8009380 <_Bfree>
 800a0f4:	9805      	ldr	r0, [sp, #20]
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	f7ff f942 	bl	8009380 <_Bfree>
 800a0fc:	9805      	ldr	r0, [sp, #20]
 800a0fe:	4641      	mov	r1, r8
 800a100:	f7ff f93e 	bl	8009380 <_Bfree>
 800a104:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a106:	9805      	ldr	r0, [sp, #20]
 800a108:	f7ff f93a 	bl	8009380 <_Bfree>
 800a10c:	9805      	ldr	r0, [sp, #20]
 800a10e:	4621      	mov	r1, r4
 800a110:	f7ff f936 	bl	8009380 <_Bfree>
 800a114:	e5f5      	b.n	8009d02 <_strtod_l+0x72>
 800a116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a118:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a11c:	4293      	cmp	r3, r2
 800a11e:	dbbc      	blt.n	800a09a <_strtod_l+0x40a>
 800a120:	4c3f      	ldr	r4, [pc, #252]	@ (800a220 <_strtod_l+0x590>)
 800a122:	f1c5 050f 	rsb	r5, r5, #15
 800a126:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a12a:	4652      	mov	r2, sl
 800a12c:	465b      	mov	r3, fp
 800a12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a132:	f7f6 fa61 	bl	80005f8 <__aeabi_dmul>
 800a136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a138:	1b5d      	subs	r5, r3, r5
 800a13a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a13e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a142:	e78f      	b.n	800a064 <_strtod_l+0x3d4>
 800a144:	3316      	adds	r3, #22
 800a146:	dba8      	blt.n	800a09a <_strtod_l+0x40a>
 800a148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a14a:	eba3 0808 	sub.w	r8, r3, r8
 800a14e:	4b34      	ldr	r3, [pc, #208]	@ (800a220 <_strtod_l+0x590>)
 800a150:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a154:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a158:	4650      	mov	r0, sl
 800a15a:	4659      	mov	r1, fp
 800a15c:	f7f6 fb76 	bl	800084c <__aeabi_ddiv>
 800a160:	e782      	b.n	800a068 <_strtod_l+0x3d8>
 800a162:	2300      	movs	r3, #0
 800a164:	4f2f      	ldr	r7, [pc, #188]	@ (800a224 <_strtod_l+0x594>)
 800a166:	1124      	asrs	r4, r4, #4
 800a168:	4650      	mov	r0, sl
 800a16a:	4659      	mov	r1, fp
 800a16c:	461e      	mov	r6, r3
 800a16e:	2c01      	cmp	r4, #1
 800a170:	dc21      	bgt.n	800a1b6 <_strtod_l+0x526>
 800a172:	b10b      	cbz	r3, 800a178 <_strtod_l+0x4e8>
 800a174:	4682      	mov	sl, r0
 800a176:	468b      	mov	fp, r1
 800a178:	492a      	ldr	r1, [pc, #168]	@ (800a224 <_strtod_l+0x594>)
 800a17a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a17e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a182:	4652      	mov	r2, sl
 800a184:	465b      	mov	r3, fp
 800a186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a18a:	f7f6 fa35 	bl	80005f8 <__aeabi_dmul>
 800a18e:	4b26      	ldr	r3, [pc, #152]	@ (800a228 <_strtod_l+0x598>)
 800a190:	460a      	mov	r2, r1
 800a192:	400b      	ands	r3, r1
 800a194:	4925      	ldr	r1, [pc, #148]	@ (800a22c <_strtod_l+0x59c>)
 800a196:	428b      	cmp	r3, r1
 800a198:	4682      	mov	sl, r0
 800a19a:	d898      	bhi.n	800a0ce <_strtod_l+0x43e>
 800a19c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a1a0:	428b      	cmp	r3, r1
 800a1a2:	bf86      	itte	hi
 800a1a4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a230 <_strtod_l+0x5a0>
 800a1a8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a1ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9308      	str	r3, [sp, #32]
 800a1b4:	e076      	b.n	800a2a4 <_strtod_l+0x614>
 800a1b6:	07e2      	lsls	r2, r4, #31
 800a1b8:	d504      	bpl.n	800a1c4 <_strtod_l+0x534>
 800a1ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1be:	f7f6 fa1b 	bl	80005f8 <__aeabi_dmul>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	3601      	adds	r6, #1
 800a1c6:	1064      	asrs	r4, r4, #1
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	e7d0      	b.n	800a16e <_strtod_l+0x4de>
 800a1cc:	d0f0      	beq.n	800a1b0 <_strtod_l+0x520>
 800a1ce:	4264      	negs	r4, r4
 800a1d0:	f014 020f 	ands.w	r2, r4, #15
 800a1d4:	d00a      	beq.n	800a1ec <_strtod_l+0x55c>
 800a1d6:	4b12      	ldr	r3, [pc, #72]	@ (800a220 <_strtod_l+0x590>)
 800a1d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f7f6 fb32 	bl	800084c <__aeabi_ddiv>
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	468b      	mov	fp, r1
 800a1ec:	1124      	asrs	r4, r4, #4
 800a1ee:	d0df      	beq.n	800a1b0 <_strtod_l+0x520>
 800a1f0:	2c1f      	cmp	r4, #31
 800a1f2:	dd1f      	ble.n	800a234 <_strtod_l+0x5a4>
 800a1f4:	2400      	movs	r4, #0
 800a1f6:	46a0      	mov	r8, r4
 800a1f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a1fa:	46a1      	mov	r9, r4
 800a1fc:	9a05      	ldr	r2, [sp, #20]
 800a1fe:	2322      	movs	r3, #34	@ 0x22
 800a200:	f04f 0a00 	mov.w	sl, #0
 800a204:	f04f 0b00 	mov.w	fp, #0
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	e76b      	b.n	800a0e4 <_strtod_l+0x454>
 800a20c:	0800c0e1 	.word	0x0800c0e1
 800a210:	0800c3a8 	.word	0x0800c3a8
 800a214:	0800c0d9 	.word	0x0800c0d9
 800a218:	0800c110 	.word	0x0800c110
 800a21c:	0800c249 	.word	0x0800c249
 800a220:	0800c2e0 	.word	0x0800c2e0
 800a224:	0800c2b8 	.word	0x0800c2b8
 800a228:	7ff00000 	.word	0x7ff00000
 800a22c:	7ca00000 	.word	0x7ca00000
 800a230:	7fefffff 	.word	0x7fefffff
 800a234:	f014 0310 	ands.w	r3, r4, #16
 800a238:	bf18      	it	ne
 800a23a:	236a      	movne	r3, #106	@ 0x6a
 800a23c:	4ea9      	ldr	r6, [pc, #676]	@ (800a4e4 <_strtod_l+0x854>)
 800a23e:	9308      	str	r3, [sp, #32]
 800a240:	4650      	mov	r0, sl
 800a242:	4659      	mov	r1, fp
 800a244:	2300      	movs	r3, #0
 800a246:	07e7      	lsls	r7, r4, #31
 800a248:	d504      	bpl.n	800a254 <_strtod_l+0x5c4>
 800a24a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a24e:	f7f6 f9d3 	bl	80005f8 <__aeabi_dmul>
 800a252:	2301      	movs	r3, #1
 800a254:	1064      	asrs	r4, r4, #1
 800a256:	f106 0608 	add.w	r6, r6, #8
 800a25a:	d1f4      	bne.n	800a246 <_strtod_l+0x5b6>
 800a25c:	b10b      	cbz	r3, 800a262 <_strtod_l+0x5d2>
 800a25e:	4682      	mov	sl, r0
 800a260:	468b      	mov	fp, r1
 800a262:	9b08      	ldr	r3, [sp, #32]
 800a264:	b1b3      	cbz	r3, 800a294 <_strtod_l+0x604>
 800a266:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a26a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a26e:	2b00      	cmp	r3, #0
 800a270:	4659      	mov	r1, fp
 800a272:	dd0f      	ble.n	800a294 <_strtod_l+0x604>
 800a274:	2b1f      	cmp	r3, #31
 800a276:	dd56      	ble.n	800a326 <_strtod_l+0x696>
 800a278:	2b34      	cmp	r3, #52	@ 0x34
 800a27a:	bfde      	ittt	le
 800a27c:	f04f 33ff 	movle.w	r3, #4294967295
 800a280:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a284:	4093      	lslle	r3, r2
 800a286:	f04f 0a00 	mov.w	sl, #0
 800a28a:	bfcc      	ite	gt
 800a28c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a290:	ea03 0b01 	andle.w	fp, r3, r1
 800a294:	2200      	movs	r2, #0
 800a296:	2300      	movs	r3, #0
 800a298:	4650      	mov	r0, sl
 800a29a:	4659      	mov	r1, fp
 800a29c:	f7f6 fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d1a7      	bne.n	800a1f4 <_strtod_l+0x564>
 800a2a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a2aa:	9805      	ldr	r0, [sp, #20]
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	464a      	mov	r2, r9
 800a2b0:	f7ff f8ce 	bl	8009450 <__s2b>
 800a2b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f43f af09 	beq.w	800a0ce <_strtod_l+0x43e>
 800a2bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2c0:	2a00      	cmp	r2, #0
 800a2c2:	eba3 0308 	sub.w	r3, r3, r8
 800a2c6:	bfa8      	it	ge
 800a2c8:	2300      	movge	r3, #0
 800a2ca:	9312      	str	r3, [sp, #72]	@ 0x48
 800a2cc:	2400      	movs	r4, #0
 800a2ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a2d2:	9316      	str	r3, [sp, #88]	@ 0x58
 800a2d4:	46a0      	mov	r8, r4
 800a2d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2d8:	9805      	ldr	r0, [sp, #20]
 800a2da:	6859      	ldr	r1, [r3, #4]
 800a2dc:	f7ff f810 	bl	8009300 <_Balloc>
 800a2e0:	4681      	mov	r9, r0
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	f43f aef7 	beq.w	800a0d6 <_strtod_l+0x446>
 800a2e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2ea:	691a      	ldr	r2, [r3, #16]
 800a2ec:	3202      	adds	r2, #2
 800a2ee:	f103 010c 	add.w	r1, r3, #12
 800a2f2:	0092      	lsls	r2, r2, #2
 800a2f4:	300c      	adds	r0, #12
 800a2f6:	f7fe f896 	bl	8008426 <memcpy>
 800a2fa:	ec4b ab10 	vmov	d0, sl, fp
 800a2fe:	9805      	ldr	r0, [sp, #20]
 800a300:	aa1c      	add	r2, sp, #112	@ 0x70
 800a302:	a91b      	add	r1, sp, #108	@ 0x6c
 800a304:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a308:	f7ff fbd6 	bl	8009ab8 <__d2b>
 800a30c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a30e:	2800      	cmp	r0, #0
 800a310:	f43f aee1 	beq.w	800a0d6 <_strtod_l+0x446>
 800a314:	9805      	ldr	r0, [sp, #20]
 800a316:	2101      	movs	r1, #1
 800a318:	f7ff f930 	bl	800957c <__i2b>
 800a31c:	4680      	mov	r8, r0
 800a31e:	b948      	cbnz	r0, 800a334 <_strtod_l+0x6a4>
 800a320:	f04f 0800 	mov.w	r8, #0
 800a324:	e6d7      	b.n	800a0d6 <_strtod_l+0x446>
 800a326:	f04f 32ff 	mov.w	r2, #4294967295
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	ea03 0a0a 	and.w	sl, r3, sl
 800a332:	e7af      	b.n	800a294 <_strtod_l+0x604>
 800a334:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a336:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a338:	2d00      	cmp	r5, #0
 800a33a:	bfab      	itete	ge
 800a33c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a33e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a340:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a342:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a344:	bfac      	ite	ge
 800a346:	18ef      	addge	r7, r5, r3
 800a348:	1b5e      	sublt	r6, r3, r5
 800a34a:	9b08      	ldr	r3, [sp, #32]
 800a34c:	1aed      	subs	r5, r5, r3
 800a34e:	4415      	add	r5, r2
 800a350:	4b65      	ldr	r3, [pc, #404]	@ (800a4e8 <_strtod_l+0x858>)
 800a352:	3d01      	subs	r5, #1
 800a354:	429d      	cmp	r5, r3
 800a356:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a35a:	da50      	bge.n	800a3fe <_strtod_l+0x76e>
 800a35c:	1b5b      	subs	r3, r3, r5
 800a35e:	2b1f      	cmp	r3, #31
 800a360:	eba2 0203 	sub.w	r2, r2, r3
 800a364:	f04f 0101 	mov.w	r1, #1
 800a368:	dc3d      	bgt.n	800a3e6 <_strtod_l+0x756>
 800a36a:	fa01 f303 	lsl.w	r3, r1, r3
 800a36e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a370:	2300      	movs	r3, #0
 800a372:	9310      	str	r3, [sp, #64]	@ 0x40
 800a374:	18bd      	adds	r5, r7, r2
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	42af      	cmp	r7, r5
 800a37a:	4416      	add	r6, r2
 800a37c:	441e      	add	r6, r3
 800a37e:	463b      	mov	r3, r7
 800a380:	bfa8      	it	ge
 800a382:	462b      	movge	r3, r5
 800a384:	42b3      	cmp	r3, r6
 800a386:	bfa8      	it	ge
 800a388:	4633      	movge	r3, r6
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	bfc2      	ittt	gt
 800a38e:	1aed      	subgt	r5, r5, r3
 800a390:	1af6      	subgt	r6, r6, r3
 800a392:	1aff      	subgt	r7, r7, r3
 800a394:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a396:	2b00      	cmp	r3, #0
 800a398:	dd16      	ble.n	800a3c8 <_strtod_l+0x738>
 800a39a:	4641      	mov	r1, r8
 800a39c:	9805      	ldr	r0, [sp, #20]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7ff f9a4 	bl	80096ec <__pow5mult>
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d0ba      	beq.n	800a320 <_strtod_l+0x690>
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3ae:	9805      	ldr	r0, [sp, #20]
 800a3b0:	f7ff f8fa 	bl	80095a8 <__multiply>
 800a3b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	f43f ae8d 	beq.w	800a0d6 <_strtod_l+0x446>
 800a3bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3be:	9805      	ldr	r0, [sp, #20]
 800a3c0:	f7fe ffde 	bl	8009380 <_Bfree>
 800a3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	dc1d      	bgt.n	800a408 <_strtod_l+0x778>
 800a3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	dd23      	ble.n	800a41a <_strtod_l+0x78a>
 800a3d2:	4649      	mov	r1, r9
 800a3d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a3d6:	9805      	ldr	r0, [sp, #20]
 800a3d8:	f7ff f988 	bl	80096ec <__pow5mult>
 800a3dc:	4681      	mov	r9, r0
 800a3de:	b9e0      	cbnz	r0, 800a41a <_strtod_l+0x78a>
 800a3e0:	f04f 0900 	mov.w	r9, #0
 800a3e4:	e677      	b.n	800a0d6 <_strtod_l+0x446>
 800a3e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a3ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a3ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a3f2:	35e2      	adds	r5, #226	@ 0xe2
 800a3f4:	fa01 f305 	lsl.w	r3, r1, r5
 800a3f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a3fc:	e7ba      	b.n	800a374 <_strtod_l+0x6e4>
 800a3fe:	2300      	movs	r3, #0
 800a400:	9310      	str	r3, [sp, #64]	@ 0x40
 800a402:	2301      	movs	r3, #1
 800a404:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a406:	e7b5      	b.n	800a374 <_strtod_l+0x6e4>
 800a408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a40a:	9805      	ldr	r0, [sp, #20]
 800a40c:	462a      	mov	r2, r5
 800a40e:	f7ff f9c7 	bl	80097a0 <__lshift>
 800a412:	901a      	str	r0, [sp, #104]	@ 0x68
 800a414:	2800      	cmp	r0, #0
 800a416:	d1d9      	bne.n	800a3cc <_strtod_l+0x73c>
 800a418:	e65d      	b.n	800a0d6 <_strtod_l+0x446>
 800a41a:	2e00      	cmp	r6, #0
 800a41c:	dd07      	ble.n	800a42e <_strtod_l+0x79e>
 800a41e:	4649      	mov	r1, r9
 800a420:	9805      	ldr	r0, [sp, #20]
 800a422:	4632      	mov	r2, r6
 800a424:	f7ff f9bc 	bl	80097a0 <__lshift>
 800a428:	4681      	mov	r9, r0
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0d8      	beq.n	800a3e0 <_strtod_l+0x750>
 800a42e:	2f00      	cmp	r7, #0
 800a430:	dd08      	ble.n	800a444 <_strtod_l+0x7b4>
 800a432:	4641      	mov	r1, r8
 800a434:	9805      	ldr	r0, [sp, #20]
 800a436:	463a      	mov	r2, r7
 800a438:	f7ff f9b2 	bl	80097a0 <__lshift>
 800a43c:	4680      	mov	r8, r0
 800a43e:	2800      	cmp	r0, #0
 800a440:	f43f ae49 	beq.w	800a0d6 <_strtod_l+0x446>
 800a444:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a446:	9805      	ldr	r0, [sp, #20]
 800a448:	464a      	mov	r2, r9
 800a44a:	f7ff fa31 	bl	80098b0 <__mdiff>
 800a44e:	4604      	mov	r4, r0
 800a450:	2800      	cmp	r0, #0
 800a452:	f43f ae40 	beq.w	800a0d6 <_strtod_l+0x446>
 800a456:	68c3      	ldr	r3, [r0, #12]
 800a458:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a45a:	2300      	movs	r3, #0
 800a45c:	60c3      	str	r3, [r0, #12]
 800a45e:	4641      	mov	r1, r8
 800a460:	f7ff fa0a 	bl	8009878 <__mcmp>
 800a464:	2800      	cmp	r0, #0
 800a466:	da45      	bge.n	800a4f4 <_strtod_l+0x864>
 800a468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a46a:	ea53 030a 	orrs.w	r3, r3, sl
 800a46e:	d16b      	bne.n	800a548 <_strtod_l+0x8b8>
 800a470:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a474:	2b00      	cmp	r3, #0
 800a476:	d167      	bne.n	800a548 <_strtod_l+0x8b8>
 800a478:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a47c:	0d1b      	lsrs	r3, r3, #20
 800a47e:	051b      	lsls	r3, r3, #20
 800a480:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a484:	d960      	bls.n	800a548 <_strtod_l+0x8b8>
 800a486:	6963      	ldr	r3, [r4, #20]
 800a488:	b913      	cbnz	r3, 800a490 <_strtod_l+0x800>
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	dd5b      	ble.n	800a548 <_strtod_l+0x8b8>
 800a490:	4621      	mov	r1, r4
 800a492:	2201      	movs	r2, #1
 800a494:	9805      	ldr	r0, [sp, #20]
 800a496:	f7ff f983 	bl	80097a0 <__lshift>
 800a49a:	4641      	mov	r1, r8
 800a49c:	4604      	mov	r4, r0
 800a49e:	f7ff f9eb 	bl	8009878 <__mcmp>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	dd50      	ble.n	800a548 <_strtod_l+0x8b8>
 800a4a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4aa:	9a08      	ldr	r2, [sp, #32]
 800a4ac:	0d1b      	lsrs	r3, r3, #20
 800a4ae:	051b      	lsls	r3, r3, #20
 800a4b0:	2a00      	cmp	r2, #0
 800a4b2:	d06a      	beq.n	800a58a <_strtod_l+0x8fa>
 800a4b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4b8:	d867      	bhi.n	800a58a <_strtod_l+0x8fa>
 800a4ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a4be:	f67f ae9d 	bls.w	800a1fc <_strtod_l+0x56c>
 800a4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ec <_strtod_l+0x85c>)
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	4659      	mov	r1, fp
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f7f6 f895 	bl	80005f8 <__aeabi_dmul>
 800a4ce:	4b08      	ldr	r3, [pc, #32]	@ (800a4f0 <_strtod_l+0x860>)
 800a4d0:	400b      	ands	r3, r1
 800a4d2:	4682      	mov	sl, r0
 800a4d4:	468b      	mov	fp, r1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f47f ae08 	bne.w	800a0ec <_strtod_l+0x45c>
 800a4dc:	9a05      	ldr	r2, [sp, #20]
 800a4de:	2322      	movs	r3, #34	@ 0x22
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	e603      	b.n	800a0ec <_strtod_l+0x45c>
 800a4e4:	0800c3d0 	.word	0x0800c3d0
 800a4e8:	fffffc02 	.word	0xfffffc02
 800a4ec:	39500000 	.word	0x39500000
 800a4f0:	7ff00000 	.word	0x7ff00000
 800a4f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a4f8:	d165      	bne.n	800a5c6 <_strtod_l+0x936>
 800a4fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a4fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a500:	b35a      	cbz	r2, 800a55a <_strtod_l+0x8ca>
 800a502:	4a9f      	ldr	r2, [pc, #636]	@ (800a780 <_strtod_l+0xaf0>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d12b      	bne.n	800a560 <_strtod_l+0x8d0>
 800a508:	9b08      	ldr	r3, [sp, #32]
 800a50a:	4651      	mov	r1, sl
 800a50c:	b303      	cbz	r3, 800a550 <_strtod_l+0x8c0>
 800a50e:	4b9d      	ldr	r3, [pc, #628]	@ (800a784 <_strtod_l+0xaf4>)
 800a510:	465a      	mov	r2, fp
 800a512:	4013      	ands	r3, r2
 800a514:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a518:	f04f 32ff 	mov.w	r2, #4294967295
 800a51c:	d81b      	bhi.n	800a556 <_strtod_l+0x8c6>
 800a51e:	0d1b      	lsrs	r3, r3, #20
 800a520:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a524:	fa02 f303 	lsl.w	r3, r2, r3
 800a528:	4299      	cmp	r1, r3
 800a52a:	d119      	bne.n	800a560 <_strtod_l+0x8d0>
 800a52c:	4b96      	ldr	r3, [pc, #600]	@ (800a788 <_strtod_l+0xaf8>)
 800a52e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a530:	429a      	cmp	r2, r3
 800a532:	d102      	bne.n	800a53a <_strtod_l+0x8aa>
 800a534:	3101      	adds	r1, #1
 800a536:	f43f adce 	beq.w	800a0d6 <_strtod_l+0x446>
 800a53a:	4b92      	ldr	r3, [pc, #584]	@ (800a784 <_strtod_l+0xaf4>)
 800a53c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a53e:	401a      	ands	r2, r3
 800a540:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a544:	f04f 0a00 	mov.w	sl, #0
 800a548:	9b08      	ldr	r3, [sp, #32]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1b9      	bne.n	800a4c2 <_strtod_l+0x832>
 800a54e:	e5cd      	b.n	800a0ec <_strtod_l+0x45c>
 800a550:	f04f 33ff 	mov.w	r3, #4294967295
 800a554:	e7e8      	b.n	800a528 <_strtod_l+0x898>
 800a556:	4613      	mov	r3, r2
 800a558:	e7e6      	b.n	800a528 <_strtod_l+0x898>
 800a55a:	ea53 030a 	orrs.w	r3, r3, sl
 800a55e:	d0a2      	beq.n	800a4a6 <_strtod_l+0x816>
 800a560:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a562:	b1db      	cbz	r3, 800a59c <_strtod_l+0x90c>
 800a564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a566:	4213      	tst	r3, r2
 800a568:	d0ee      	beq.n	800a548 <_strtod_l+0x8b8>
 800a56a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a56c:	9a08      	ldr	r2, [sp, #32]
 800a56e:	4650      	mov	r0, sl
 800a570:	4659      	mov	r1, fp
 800a572:	b1bb      	cbz	r3, 800a5a4 <_strtod_l+0x914>
 800a574:	f7ff fb6e 	bl	8009c54 <sulp>
 800a578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a57c:	ec53 2b10 	vmov	r2, r3, d0
 800a580:	f7f5 fe84 	bl	800028c <__adddf3>
 800a584:	4682      	mov	sl, r0
 800a586:	468b      	mov	fp, r1
 800a588:	e7de      	b.n	800a548 <_strtod_l+0x8b8>
 800a58a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a58e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a592:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a596:	f04f 3aff 	mov.w	sl, #4294967295
 800a59a:	e7d5      	b.n	800a548 <_strtod_l+0x8b8>
 800a59c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a59e:	ea13 0f0a 	tst.w	r3, sl
 800a5a2:	e7e1      	b.n	800a568 <_strtod_l+0x8d8>
 800a5a4:	f7ff fb56 	bl	8009c54 <sulp>
 800a5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5ac:	ec53 2b10 	vmov	r2, r3, d0
 800a5b0:	f7f5 fe6a 	bl	8000288 <__aeabi_dsub>
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	468b      	mov	fp, r1
 800a5bc:	f7f6 fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d0c1      	beq.n	800a548 <_strtod_l+0x8b8>
 800a5c4:	e61a      	b.n	800a1fc <_strtod_l+0x56c>
 800a5c6:	4641      	mov	r1, r8
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f7ff facd 	bl	8009b68 <__ratio>
 800a5ce:	ec57 6b10 	vmov	r6, r7, d0
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7f6 fa88 	bl	8000af0 <__aeabi_dcmple>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d06f      	beq.n	800a6c4 <_strtod_l+0xa34>
 800a5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d17a      	bne.n	800a6e0 <_strtod_l+0xa50>
 800a5ea:	f1ba 0f00 	cmp.w	sl, #0
 800a5ee:	d158      	bne.n	800a6a2 <_strtod_l+0xa12>
 800a5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d15a      	bne.n	800a6b0 <_strtod_l+0xa20>
 800a5fa:	4b64      	ldr	r3, [pc, #400]	@ (800a78c <_strtod_l+0xafc>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4630      	mov	r0, r6
 800a600:	4639      	mov	r1, r7
 800a602:	f7f6 fa6b 	bl	8000adc <__aeabi_dcmplt>
 800a606:	2800      	cmp	r0, #0
 800a608:	d159      	bne.n	800a6be <_strtod_l+0xa2e>
 800a60a:	4630      	mov	r0, r6
 800a60c:	4639      	mov	r1, r7
 800a60e:	4b60      	ldr	r3, [pc, #384]	@ (800a790 <_strtod_l+0xb00>)
 800a610:	2200      	movs	r2, #0
 800a612:	f7f5 fff1 	bl	80005f8 <__aeabi_dmul>
 800a616:	4606      	mov	r6, r0
 800a618:	460f      	mov	r7, r1
 800a61a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a61e:	9606      	str	r6, [sp, #24]
 800a620:	9307      	str	r3, [sp, #28]
 800a622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a626:	4d57      	ldr	r5, [pc, #348]	@ (800a784 <_strtod_l+0xaf4>)
 800a628:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a62e:	401d      	ands	r5, r3
 800a630:	4b58      	ldr	r3, [pc, #352]	@ (800a794 <_strtod_l+0xb04>)
 800a632:	429d      	cmp	r5, r3
 800a634:	f040 80b2 	bne.w	800a79c <_strtod_l+0xb0c>
 800a638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a63a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a63e:	ec4b ab10 	vmov	d0, sl, fp
 800a642:	f7ff f9c9 	bl	80099d8 <__ulp>
 800a646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a64a:	ec51 0b10 	vmov	r0, r1, d0
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	4652      	mov	r2, sl
 800a654:	465b      	mov	r3, fp
 800a656:	f7f5 fe19 	bl	800028c <__adddf3>
 800a65a:	460b      	mov	r3, r1
 800a65c:	4949      	ldr	r1, [pc, #292]	@ (800a784 <_strtod_l+0xaf4>)
 800a65e:	4a4e      	ldr	r2, [pc, #312]	@ (800a798 <_strtod_l+0xb08>)
 800a660:	4019      	ands	r1, r3
 800a662:	4291      	cmp	r1, r2
 800a664:	4682      	mov	sl, r0
 800a666:	d942      	bls.n	800a6ee <_strtod_l+0xa5e>
 800a668:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a66a:	4b47      	ldr	r3, [pc, #284]	@ (800a788 <_strtod_l+0xaf8>)
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d103      	bne.n	800a678 <_strtod_l+0x9e8>
 800a670:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a672:	3301      	adds	r3, #1
 800a674:	f43f ad2f 	beq.w	800a0d6 <_strtod_l+0x446>
 800a678:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a788 <_strtod_l+0xaf8>
 800a67c:	f04f 3aff 	mov.w	sl, #4294967295
 800a680:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a682:	9805      	ldr	r0, [sp, #20]
 800a684:	f7fe fe7c 	bl	8009380 <_Bfree>
 800a688:	9805      	ldr	r0, [sp, #20]
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7fe fe78 	bl	8009380 <_Bfree>
 800a690:	9805      	ldr	r0, [sp, #20]
 800a692:	4641      	mov	r1, r8
 800a694:	f7fe fe74 	bl	8009380 <_Bfree>
 800a698:	9805      	ldr	r0, [sp, #20]
 800a69a:	4621      	mov	r1, r4
 800a69c:	f7fe fe70 	bl	8009380 <_Bfree>
 800a6a0:	e619      	b.n	800a2d6 <_strtod_l+0x646>
 800a6a2:	f1ba 0f01 	cmp.w	sl, #1
 800a6a6:	d103      	bne.n	800a6b0 <_strtod_l+0xa20>
 800a6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f43f ada6 	beq.w	800a1fc <_strtod_l+0x56c>
 800a6b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a760 <_strtod_l+0xad0>
 800a6b4:	4f35      	ldr	r7, [pc, #212]	@ (800a78c <_strtod_l+0xafc>)
 800a6b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	e7b1      	b.n	800a622 <_strtod_l+0x992>
 800a6be:	4f34      	ldr	r7, [pc, #208]	@ (800a790 <_strtod_l+0xb00>)
 800a6c0:	2600      	movs	r6, #0
 800a6c2:	e7aa      	b.n	800a61a <_strtod_l+0x98a>
 800a6c4:	4b32      	ldr	r3, [pc, #200]	@ (800a790 <_strtod_l+0xb00>)
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f7f5 ff94 	bl	80005f8 <__aeabi_dmul>
 800a6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d09f      	beq.n	800a61a <_strtod_l+0x98a>
 800a6da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a6de:	e7a0      	b.n	800a622 <_strtod_l+0x992>
 800a6e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a768 <_strtod_l+0xad8>
 800a6e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6e8:	ec57 6b17 	vmov	r6, r7, d7
 800a6ec:	e799      	b.n	800a622 <_strtod_l+0x992>
 800a6ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a6f2:	9b08      	ldr	r3, [sp, #32]
 800a6f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1c1      	bne.n	800a680 <_strtod_l+0x9f0>
 800a6fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a700:	0d1b      	lsrs	r3, r3, #20
 800a702:	051b      	lsls	r3, r3, #20
 800a704:	429d      	cmp	r5, r3
 800a706:	d1bb      	bne.n	800a680 <_strtod_l+0x9f0>
 800a708:	4630      	mov	r0, r6
 800a70a:	4639      	mov	r1, r7
 800a70c:	f7f6 fad4 	bl	8000cb8 <__aeabi_d2lz>
 800a710:	f7f5 ff44 	bl	800059c <__aeabi_l2d>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4630      	mov	r0, r6
 800a71a:	4639      	mov	r1, r7
 800a71c:	f7f5 fdb4 	bl	8000288 <__aeabi_dsub>
 800a720:	460b      	mov	r3, r1
 800a722:	4602      	mov	r2, r0
 800a724:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a728:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a72e:	ea46 060a 	orr.w	r6, r6, sl
 800a732:	431e      	orrs	r6, r3
 800a734:	d06f      	beq.n	800a816 <_strtod_l+0xb86>
 800a736:	a30e      	add	r3, pc, #56	@ (adr r3, 800a770 <_strtod_l+0xae0>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f7f6 f9ce 	bl	8000adc <__aeabi_dcmplt>
 800a740:	2800      	cmp	r0, #0
 800a742:	f47f acd3 	bne.w	800a0ec <_strtod_l+0x45c>
 800a746:	a30c      	add	r3, pc, #48	@ (adr r3, 800a778 <_strtod_l+0xae8>)
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a750:	f7f6 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 800a754:	2800      	cmp	r0, #0
 800a756:	d093      	beq.n	800a680 <_strtod_l+0x9f0>
 800a758:	e4c8      	b.n	800a0ec <_strtod_l+0x45c>
 800a75a:	bf00      	nop
 800a75c:	f3af 8000 	nop.w
 800a760:	00000000 	.word	0x00000000
 800a764:	bff00000 	.word	0xbff00000
 800a768:	00000000 	.word	0x00000000
 800a76c:	3ff00000 	.word	0x3ff00000
 800a770:	94a03595 	.word	0x94a03595
 800a774:	3fdfffff 	.word	0x3fdfffff
 800a778:	35afe535 	.word	0x35afe535
 800a77c:	3fe00000 	.word	0x3fe00000
 800a780:	000fffff 	.word	0x000fffff
 800a784:	7ff00000 	.word	0x7ff00000
 800a788:	7fefffff 	.word	0x7fefffff
 800a78c:	3ff00000 	.word	0x3ff00000
 800a790:	3fe00000 	.word	0x3fe00000
 800a794:	7fe00000 	.word	0x7fe00000
 800a798:	7c9fffff 	.word	0x7c9fffff
 800a79c:	9b08      	ldr	r3, [sp, #32]
 800a79e:	b323      	cbz	r3, 800a7ea <_strtod_l+0xb5a>
 800a7a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a7a4:	d821      	bhi.n	800a7ea <_strtod_l+0xb5a>
 800a7a6:	a328      	add	r3, pc, #160	@ (adr r3, 800a848 <_strtod_l+0xbb8>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	f7f6 f99e 	bl	8000af0 <__aeabi_dcmple>
 800a7b4:	b1a0      	cbz	r0, 800a7e0 <_strtod_l+0xb50>
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7f6 f9f5 	bl	8000ba8 <__aeabi_d2uiz>
 800a7be:	2801      	cmp	r0, #1
 800a7c0:	bf38      	it	cc
 800a7c2:	2001      	movcc	r0, #1
 800a7c4:	f7f5 fe9e 	bl	8000504 <__aeabi_ui2d>
 800a7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460f      	mov	r7, r1
 800a7ce:	b9fb      	cbnz	r3, 800a810 <_strtod_l+0xb80>
 800a7d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a7d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a7dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a7e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a7e6:	1b5b      	subs	r3, r3, r5
 800a7e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a7ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a7f2:	f7ff f8f1 	bl	80099d8 <__ulp>
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	ec53 2b10 	vmov	r2, r3, d0
 800a7fc:	4659      	mov	r1, fp
 800a7fe:	f7f5 fefb 	bl	80005f8 <__aeabi_dmul>
 800a802:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a806:	f7f5 fd41 	bl	800028c <__adddf3>
 800a80a:	4682      	mov	sl, r0
 800a80c:	468b      	mov	fp, r1
 800a80e:	e770      	b.n	800a6f2 <_strtod_l+0xa62>
 800a810:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a814:	e7e0      	b.n	800a7d8 <_strtod_l+0xb48>
 800a816:	a30e      	add	r3, pc, #56	@ (adr r3, 800a850 <_strtod_l+0xbc0>)
 800a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81c:	f7f6 f95e 	bl	8000adc <__aeabi_dcmplt>
 800a820:	e798      	b.n	800a754 <_strtod_l+0xac4>
 800a822:	2300      	movs	r3, #0
 800a824:	930e      	str	r3, [sp, #56]	@ 0x38
 800a826:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	f7ff ba6d 	b.w	8009d0a <_strtod_l+0x7a>
 800a830:	2a65      	cmp	r2, #101	@ 0x65
 800a832:	f43f ab68 	beq.w	8009f06 <_strtod_l+0x276>
 800a836:	2a45      	cmp	r2, #69	@ 0x45
 800a838:	f43f ab65 	beq.w	8009f06 <_strtod_l+0x276>
 800a83c:	2301      	movs	r3, #1
 800a83e:	f7ff bba0 	b.w	8009f82 <_strtod_l+0x2f2>
 800a842:	bf00      	nop
 800a844:	f3af 8000 	nop.w
 800a848:	ffc00000 	.word	0xffc00000
 800a84c:	41dfffff 	.word	0x41dfffff
 800a850:	94a03595 	.word	0x94a03595
 800a854:	3fcfffff 	.word	0x3fcfffff

0800a858 <_strtod_r>:
 800a858:	4b01      	ldr	r3, [pc, #4]	@ (800a860 <_strtod_r+0x8>)
 800a85a:	f7ff ba19 	b.w	8009c90 <_strtod_l>
 800a85e:	bf00      	nop
 800a860:	20000c4c 	.word	0x20000c4c

0800a864 <_strtol_l.isra.0>:
 800a864:	2b24      	cmp	r3, #36	@ 0x24
 800a866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86a:	4686      	mov	lr, r0
 800a86c:	4690      	mov	r8, r2
 800a86e:	d801      	bhi.n	800a874 <_strtol_l.isra.0+0x10>
 800a870:	2b01      	cmp	r3, #1
 800a872:	d106      	bne.n	800a882 <_strtol_l.isra.0+0x1e>
 800a874:	f7fd fdaa 	bl	80083cc <__errno>
 800a878:	2316      	movs	r3, #22
 800a87a:	6003      	str	r3, [r0, #0]
 800a87c:	2000      	movs	r0, #0
 800a87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a882:	4834      	ldr	r0, [pc, #208]	@ (800a954 <_strtol_l.isra.0+0xf0>)
 800a884:	460d      	mov	r5, r1
 800a886:	462a      	mov	r2, r5
 800a888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a88c:	5d06      	ldrb	r6, [r0, r4]
 800a88e:	f016 0608 	ands.w	r6, r6, #8
 800a892:	d1f8      	bne.n	800a886 <_strtol_l.isra.0+0x22>
 800a894:	2c2d      	cmp	r4, #45	@ 0x2d
 800a896:	d110      	bne.n	800a8ba <_strtol_l.isra.0+0x56>
 800a898:	782c      	ldrb	r4, [r5, #0]
 800a89a:	2601      	movs	r6, #1
 800a89c:	1c95      	adds	r5, r2, #2
 800a89e:	f033 0210 	bics.w	r2, r3, #16
 800a8a2:	d115      	bne.n	800a8d0 <_strtol_l.isra.0+0x6c>
 800a8a4:	2c30      	cmp	r4, #48	@ 0x30
 800a8a6:	d10d      	bne.n	800a8c4 <_strtol_l.isra.0+0x60>
 800a8a8:	782a      	ldrb	r2, [r5, #0]
 800a8aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a8ae:	2a58      	cmp	r2, #88	@ 0x58
 800a8b0:	d108      	bne.n	800a8c4 <_strtol_l.isra.0+0x60>
 800a8b2:	786c      	ldrb	r4, [r5, #1]
 800a8b4:	3502      	adds	r5, #2
 800a8b6:	2310      	movs	r3, #16
 800a8b8:	e00a      	b.n	800a8d0 <_strtol_l.isra.0+0x6c>
 800a8ba:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8bc:	bf04      	itt	eq
 800a8be:	782c      	ldrbeq	r4, [r5, #0]
 800a8c0:	1c95      	addeq	r5, r2, #2
 800a8c2:	e7ec      	b.n	800a89e <_strtol_l.isra.0+0x3a>
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1f6      	bne.n	800a8b6 <_strtol_l.isra.0+0x52>
 800a8c8:	2c30      	cmp	r4, #48	@ 0x30
 800a8ca:	bf14      	ite	ne
 800a8cc:	230a      	movne	r3, #10
 800a8ce:	2308      	moveq	r3, #8
 800a8d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a8d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a8d8:	2200      	movs	r2, #0
 800a8da:	fbbc f9f3 	udiv	r9, ip, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a8e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a8e8:	2f09      	cmp	r7, #9
 800a8ea:	d80f      	bhi.n	800a90c <_strtol_l.isra.0+0xa8>
 800a8ec:	463c      	mov	r4, r7
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	dd1b      	ble.n	800a92a <_strtol_l.isra.0+0xc6>
 800a8f2:	1c57      	adds	r7, r2, #1
 800a8f4:	d007      	beq.n	800a906 <_strtol_l.isra.0+0xa2>
 800a8f6:	4581      	cmp	r9, r0
 800a8f8:	d314      	bcc.n	800a924 <_strtol_l.isra.0+0xc0>
 800a8fa:	d101      	bne.n	800a900 <_strtol_l.isra.0+0x9c>
 800a8fc:	45a2      	cmp	sl, r4
 800a8fe:	db11      	blt.n	800a924 <_strtol_l.isra.0+0xc0>
 800a900:	fb00 4003 	mla	r0, r0, r3, r4
 800a904:	2201      	movs	r2, #1
 800a906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a90a:	e7eb      	b.n	800a8e4 <_strtol_l.isra.0+0x80>
 800a90c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a910:	2f19      	cmp	r7, #25
 800a912:	d801      	bhi.n	800a918 <_strtol_l.isra.0+0xb4>
 800a914:	3c37      	subs	r4, #55	@ 0x37
 800a916:	e7ea      	b.n	800a8ee <_strtol_l.isra.0+0x8a>
 800a918:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a91c:	2f19      	cmp	r7, #25
 800a91e:	d804      	bhi.n	800a92a <_strtol_l.isra.0+0xc6>
 800a920:	3c57      	subs	r4, #87	@ 0x57
 800a922:	e7e4      	b.n	800a8ee <_strtol_l.isra.0+0x8a>
 800a924:	f04f 32ff 	mov.w	r2, #4294967295
 800a928:	e7ed      	b.n	800a906 <_strtol_l.isra.0+0xa2>
 800a92a:	1c53      	adds	r3, r2, #1
 800a92c:	d108      	bne.n	800a940 <_strtol_l.isra.0+0xdc>
 800a92e:	2322      	movs	r3, #34	@ 0x22
 800a930:	f8ce 3000 	str.w	r3, [lr]
 800a934:	4660      	mov	r0, ip
 800a936:	f1b8 0f00 	cmp.w	r8, #0
 800a93a:	d0a0      	beq.n	800a87e <_strtol_l.isra.0+0x1a>
 800a93c:	1e69      	subs	r1, r5, #1
 800a93e:	e006      	b.n	800a94e <_strtol_l.isra.0+0xea>
 800a940:	b106      	cbz	r6, 800a944 <_strtol_l.isra.0+0xe0>
 800a942:	4240      	negs	r0, r0
 800a944:	f1b8 0f00 	cmp.w	r8, #0
 800a948:	d099      	beq.n	800a87e <_strtol_l.isra.0+0x1a>
 800a94a:	2a00      	cmp	r2, #0
 800a94c:	d1f6      	bne.n	800a93c <_strtol_l.isra.0+0xd8>
 800a94e:	f8c8 1000 	str.w	r1, [r8]
 800a952:	e794      	b.n	800a87e <_strtol_l.isra.0+0x1a>
 800a954:	0800c3f9 	.word	0x0800c3f9

0800a958 <_strtol_r>:
 800a958:	f7ff bf84 	b.w	800a864 <_strtol_l.isra.0>

0800a95c <__ssputs_r>:
 800a95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a960:	688e      	ldr	r6, [r1, #8]
 800a962:	461f      	mov	r7, r3
 800a964:	42be      	cmp	r6, r7
 800a966:	680b      	ldr	r3, [r1, #0]
 800a968:	4682      	mov	sl, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	4690      	mov	r8, r2
 800a96e:	d82d      	bhi.n	800a9cc <__ssputs_r+0x70>
 800a970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a978:	d026      	beq.n	800a9c8 <__ssputs_r+0x6c>
 800a97a:	6965      	ldr	r5, [r4, #20]
 800a97c:	6909      	ldr	r1, [r1, #16]
 800a97e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a982:	eba3 0901 	sub.w	r9, r3, r1
 800a986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a98a:	1c7b      	adds	r3, r7, #1
 800a98c:	444b      	add	r3, r9
 800a98e:	106d      	asrs	r5, r5, #1
 800a990:	429d      	cmp	r5, r3
 800a992:	bf38      	it	cc
 800a994:	461d      	movcc	r5, r3
 800a996:	0553      	lsls	r3, r2, #21
 800a998:	d527      	bpl.n	800a9ea <__ssputs_r+0x8e>
 800a99a:	4629      	mov	r1, r5
 800a99c:	f7fe fc24 	bl	80091e8 <_malloc_r>
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	b360      	cbz	r0, 800a9fe <__ssputs_r+0xa2>
 800a9a4:	6921      	ldr	r1, [r4, #16]
 800a9a6:	464a      	mov	r2, r9
 800a9a8:	f7fd fd3d 	bl	8008426 <memcpy>
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9b6:	81a3      	strh	r3, [r4, #12]
 800a9b8:	6126      	str	r6, [r4, #16]
 800a9ba:	6165      	str	r5, [r4, #20]
 800a9bc:	444e      	add	r6, r9
 800a9be:	eba5 0509 	sub.w	r5, r5, r9
 800a9c2:	6026      	str	r6, [r4, #0]
 800a9c4:	60a5      	str	r5, [r4, #8]
 800a9c6:	463e      	mov	r6, r7
 800a9c8:	42be      	cmp	r6, r7
 800a9ca:	d900      	bls.n	800a9ce <__ssputs_r+0x72>
 800a9cc:	463e      	mov	r6, r7
 800a9ce:	6820      	ldr	r0, [r4, #0]
 800a9d0:	4632      	mov	r2, r6
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	f000 f9c6 	bl	800ad64 <memmove>
 800a9d8:	68a3      	ldr	r3, [r4, #8]
 800a9da:	1b9b      	subs	r3, r3, r6
 800a9dc:	60a3      	str	r3, [r4, #8]
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	4433      	add	r3, r6
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	f000 fd7d 	bl	800b4ea <_realloc_r>
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d1e0      	bne.n	800a9b8 <__ssputs_r+0x5c>
 800a9f6:	6921      	ldr	r1, [r4, #16]
 800a9f8:	4650      	mov	r0, sl
 800a9fa:	f7fe fb81 	bl	8009100 <_free_r>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	f8ca 3000 	str.w	r3, [sl]
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	e7e9      	b.n	800a9e6 <__ssputs_r+0x8a>
	...

0800aa14 <_svfiprintf_r>:
 800aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	4698      	mov	r8, r3
 800aa1a:	898b      	ldrh	r3, [r1, #12]
 800aa1c:	061b      	lsls	r3, r3, #24
 800aa1e:	b09d      	sub	sp, #116	@ 0x74
 800aa20:	4607      	mov	r7, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	4614      	mov	r4, r2
 800aa26:	d510      	bpl.n	800aa4a <_svfiprintf_r+0x36>
 800aa28:	690b      	ldr	r3, [r1, #16]
 800aa2a:	b973      	cbnz	r3, 800aa4a <_svfiprintf_r+0x36>
 800aa2c:	2140      	movs	r1, #64	@ 0x40
 800aa2e:	f7fe fbdb 	bl	80091e8 <_malloc_r>
 800aa32:	6028      	str	r0, [r5, #0]
 800aa34:	6128      	str	r0, [r5, #16]
 800aa36:	b930      	cbnz	r0, 800aa46 <_svfiprintf_r+0x32>
 800aa38:	230c      	movs	r3, #12
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa40:	b01d      	add	sp, #116	@ 0x74
 800aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa46:	2340      	movs	r3, #64	@ 0x40
 800aa48:	616b      	str	r3, [r5, #20]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa4e:	2320      	movs	r3, #32
 800aa50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa54:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa58:	2330      	movs	r3, #48	@ 0x30
 800aa5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800abf8 <_svfiprintf_r+0x1e4>
 800aa5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa62:	f04f 0901 	mov.w	r9, #1
 800aa66:	4623      	mov	r3, r4
 800aa68:	469a      	mov	sl, r3
 800aa6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa6e:	b10a      	cbz	r2, 800aa74 <_svfiprintf_r+0x60>
 800aa70:	2a25      	cmp	r2, #37	@ 0x25
 800aa72:	d1f9      	bne.n	800aa68 <_svfiprintf_r+0x54>
 800aa74:	ebba 0b04 	subs.w	fp, sl, r4
 800aa78:	d00b      	beq.n	800aa92 <_svfiprintf_r+0x7e>
 800aa7a:	465b      	mov	r3, fp
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4638      	mov	r0, r7
 800aa82:	f7ff ff6b 	bl	800a95c <__ssputs_r>
 800aa86:	3001      	adds	r0, #1
 800aa88:	f000 80a7 	beq.w	800abda <_svfiprintf_r+0x1c6>
 800aa8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa8e:	445a      	add	r2, fp
 800aa90:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa92:	f89a 3000 	ldrb.w	r3, [sl]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 809f 	beq.w	800abda <_svfiprintf_r+0x1c6>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa6:	f10a 0a01 	add.w	sl, sl, #1
 800aaaa:	9304      	str	r3, [sp, #16]
 800aaac:	9307      	str	r3, [sp, #28]
 800aaae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aab2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aab4:	4654      	mov	r4, sl
 800aab6:	2205      	movs	r2, #5
 800aab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aabc:	484e      	ldr	r0, [pc, #312]	@ (800abf8 <_svfiprintf_r+0x1e4>)
 800aabe:	f7f5 fb87 	bl	80001d0 <memchr>
 800aac2:	9a04      	ldr	r2, [sp, #16]
 800aac4:	b9d8      	cbnz	r0, 800aafe <_svfiprintf_r+0xea>
 800aac6:	06d0      	lsls	r0, r2, #27
 800aac8:	bf44      	itt	mi
 800aaca:	2320      	movmi	r3, #32
 800aacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aad0:	0711      	lsls	r1, r2, #28
 800aad2:	bf44      	itt	mi
 800aad4:	232b      	movmi	r3, #43	@ 0x2b
 800aad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aada:	f89a 3000 	ldrb.w	r3, [sl]
 800aade:	2b2a      	cmp	r3, #42	@ 0x2a
 800aae0:	d015      	beq.n	800ab0e <_svfiprintf_r+0xfa>
 800aae2:	9a07      	ldr	r2, [sp, #28]
 800aae4:	4654      	mov	r4, sl
 800aae6:	2000      	movs	r0, #0
 800aae8:	f04f 0c0a 	mov.w	ip, #10
 800aaec:	4621      	mov	r1, r4
 800aaee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf2:	3b30      	subs	r3, #48	@ 0x30
 800aaf4:	2b09      	cmp	r3, #9
 800aaf6:	d94b      	bls.n	800ab90 <_svfiprintf_r+0x17c>
 800aaf8:	b1b0      	cbz	r0, 800ab28 <_svfiprintf_r+0x114>
 800aafa:	9207      	str	r2, [sp, #28]
 800aafc:	e014      	b.n	800ab28 <_svfiprintf_r+0x114>
 800aafe:	eba0 0308 	sub.w	r3, r0, r8
 800ab02:	fa09 f303 	lsl.w	r3, r9, r3
 800ab06:	4313      	orrs	r3, r2
 800ab08:	9304      	str	r3, [sp, #16]
 800ab0a:	46a2      	mov	sl, r4
 800ab0c:	e7d2      	b.n	800aab4 <_svfiprintf_r+0xa0>
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	1d19      	adds	r1, r3, #4
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	9103      	str	r1, [sp, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfbb      	ittet	lt
 800ab1a:	425b      	neglt	r3, r3
 800ab1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab20:	9307      	strge	r3, [sp, #28]
 800ab22:	9307      	strlt	r3, [sp, #28]
 800ab24:	bfb8      	it	lt
 800ab26:	9204      	strlt	r2, [sp, #16]
 800ab28:	7823      	ldrb	r3, [r4, #0]
 800ab2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab2c:	d10a      	bne.n	800ab44 <_svfiprintf_r+0x130>
 800ab2e:	7863      	ldrb	r3, [r4, #1]
 800ab30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab32:	d132      	bne.n	800ab9a <_svfiprintf_r+0x186>
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	1d1a      	adds	r2, r3, #4
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	9203      	str	r2, [sp, #12]
 800ab3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab40:	3402      	adds	r4, #2
 800ab42:	9305      	str	r3, [sp, #20]
 800ab44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac08 <_svfiprintf_r+0x1f4>
 800ab48:	7821      	ldrb	r1, [r4, #0]
 800ab4a:	2203      	movs	r2, #3
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	f7f5 fb3f 	bl	80001d0 <memchr>
 800ab52:	b138      	cbz	r0, 800ab64 <_svfiprintf_r+0x150>
 800ab54:	9b04      	ldr	r3, [sp, #16]
 800ab56:	eba0 000a 	sub.w	r0, r0, sl
 800ab5a:	2240      	movs	r2, #64	@ 0x40
 800ab5c:	4082      	lsls	r2, r0
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	3401      	adds	r4, #1
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab68:	4824      	ldr	r0, [pc, #144]	@ (800abfc <_svfiprintf_r+0x1e8>)
 800ab6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab6e:	2206      	movs	r2, #6
 800ab70:	f7f5 fb2e 	bl	80001d0 <memchr>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d036      	beq.n	800abe6 <_svfiprintf_r+0x1d2>
 800ab78:	4b21      	ldr	r3, [pc, #132]	@ (800ac00 <_svfiprintf_r+0x1ec>)
 800ab7a:	bb1b      	cbnz	r3, 800abc4 <_svfiprintf_r+0x1b0>
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	3307      	adds	r3, #7
 800ab80:	f023 0307 	bic.w	r3, r3, #7
 800ab84:	3308      	adds	r3, #8
 800ab86:	9303      	str	r3, [sp, #12]
 800ab88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab8a:	4433      	add	r3, r6
 800ab8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab8e:	e76a      	b.n	800aa66 <_svfiprintf_r+0x52>
 800ab90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab94:	460c      	mov	r4, r1
 800ab96:	2001      	movs	r0, #1
 800ab98:	e7a8      	b.n	800aaec <_svfiprintf_r+0xd8>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	3401      	adds	r4, #1
 800ab9e:	9305      	str	r3, [sp, #20]
 800aba0:	4619      	mov	r1, r3
 800aba2:	f04f 0c0a 	mov.w	ip, #10
 800aba6:	4620      	mov	r0, r4
 800aba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abac:	3a30      	subs	r2, #48	@ 0x30
 800abae:	2a09      	cmp	r2, #9
 800abb0:	d903      	bls.n	800abba <_svfiprintf_r+0x1a6>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0c6      	beq.n	800ab44 <_svfiprintf_r+0x130>
 800abb6:	9105      	str	r1, [sp, #20]
 800abb8:	e7c4      	b.n	800ab44 <_svfiprintf_r+0x130>
 800abba:	fb0c 2101 	mla	r1, ip, r1, r2
 800abbe:	4604      	mov	r4, r0
 800abc0:	2301      	movs	r3, #1
 800abc2:	e7f0      	b.n	800aba6 <_svfiprintf_r+0x192>
 800abc4:	ab03      	add	r3, sp, #12
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	462a      	mov	r2, r5
 800abca:	4b0e      	ldr	r3, [pc, #56]	@ (800ac04 <_svfiprintf_r+0x1f0>)
 800abcc:	a904      	add	r1, sp, #16
 800abce:	4638      	mov	r0, r7
 800abd0:	f7fc fc88 	bl	80074e4 <_printf_float>
 800abd4:	1c42      	adds	r2, r0, #1
 800abd6:	4606      	mov	r6, r0
 800abd8:	d1d6      	bne.n	800ab88 <_svfiprintf_r+0x174>
 800abda:	89ab      	ldrh	r3, [r5, #12]
 800abdc:	065b      	lsls	r3, r3, #25
 800abde:	f53f af2d 	bmi.w	800aa3c <_svfiprintf_r+0x28>
 800abe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abe4:	e72c      	b.n	800aa40 <_svfiprintf_r+0x2c>
 800abe6:	ab03      	add	r3, sp, #12
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	462a      	mov	r2, r5
 800abec:	4b05      	ldr	r3, [pc, #20]	@ (800ac04 <_svfiprintf_r+0x1f0>)
 800abee:	a904      	add	r1, sp, #16
 800abf0:	4638      	mov	r0, r7
 800abf2:	f7fc ff0f 	bl	8007a14 <_printf_i>
 800abf6:	e7ed      	b.n	800abd4 <_svfiprintf_r+0x1c0>
 800abf8:	0800c1f5 	.word	0x0800c1f5
 800abfc:	0800c1ff 	.word	0x0800c1ff
 800ac00:	080074e5 	.word	0x080074e5
 800ac04:	0800a95d 	.word	0x0800a95d
 800ac08:	0800c1fb 	.word	0x0800c1fb

0800ac0c <__sflush_r>:
 800ac0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac14:	0716      	lsls	r6, r2, #28
 800ac16:	4605      	mov	r5, r0
 800ac18:	460c      	mov	r4, r1
 800ac1a:	d454      	bmi.n	800acc6 <__sflush_r+0xba>
 800ac1c:	684b      	ldr	r3, [r1, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	dc02      	bgt.n	800ac28 <__sflush_r+0x1c>
 800ac22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dd48      	ble.n	800acba <__sflush_r+0xae>
 800ac28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d045      	beq.n	800acba <__sflush_r+0xae>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac34:	682f      	ldr	r7, [r5, #0]
 800ac36:	6a21      	ldr	r1, [r4, #32]
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	d030      	beq.n	800ac9e <__sflush_r+0x92>
 800ac3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	0759      	lsls	r1, r3, #29
 800ac42:	d505      	bpl.n	800ac50 <__sflush_r+0x44>
 800ac44:	6863      	ldr	r3, [r4, #4]
 800ac46:	1ad2      	subs	r2, r2, r3
 800ac48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac4a:	b10b      	cbz	r3, 800ac50 <__sflush_r+0x44>
 800ac4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	2300      	movs	r3, #0
 800ac52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac54:	6a21      	ldr	r1, [r4, #32]
 800ac56:	4628      	mov	r0, r5
 800ac58:	47b0      	blx	r6
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	d106      	bne.n	800ac6e <__sflush_r+0x62>
 800ac60:	6829      	ldr	r1, [r5, #0]
 800ac62:	291d      	cmp	r1, #29
 800ac64:	d82b      	bhi.n	800acbe <__sflush_r+0xb2>
 800ac66:	4a2a      	ldr	r2, [pc, #168]	@ (800ad10 <__sflush_r+0x104>)
 800ac68:	40ca      	lsrs	r2, r1
 800ac6a:	07d6      	lsls	r6, r2, #31
 800ac6c:	d527      	bpl.n	800acbe <__sflush_r+0xb2>
 800ac6e:	2200      	movs	r2, #0
 800ac70:	6062      	str	r2, [r4, #4]
 800ac72:	04d9      	lsls	r1, r3, #19
 800ac74:	6922      	ldr	r2, [r4, #16]
 800ac76:	6022      	str	r2, [r4, #0]
 800ac78:	d504      	bpl.n	800ac84 <__sflush_r+0x78>
 800ac7a:	1c42      	adds	r2, r0, #1
 800ac7c:	d101      	bne.n	800ac82 <__sflush_r+0x76>
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	b903      	cbnz	r3, 800ac84 <__sflush_r+0x78>
 800ac82:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac86:	602f      	str	r7, [r5, #0]
 800ac88:	b1b9      	cbz	r1, 800acba <__sflush_r+0xae>
 800ac8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac8e:	4299      	cmp	r1, r3
 800ac90:	d002      	beq.n	800ac98 <__sflush_r+0x8c>
 800ac92:	4628      	mov	r0, r5
 800ac94:	f7fe fa34 	bl	8009100 <_free_r>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac9c:	e00d      	b.n	800acba <__sflush_r+0xae>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	4628      	mov	r0, r5
 800aca2:	47b0      	blx	r6
 800aca4:	4602      	mov	r2, r0
 800aca6:	1c50      	adds	r0, r2, #1
 800aca8:	d1c9      	bne.n	800ac3e <__sflush_r+0x32>
 800acaa:	682b      	ldr	r3, [r5, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d0c6      	beq.n	800ac3e <__sflush_r+0x32>
 800acb0:	2b1d      	cmp	r3, #29
 800acb2:	d001      	beq.n	800acb8 <__sflush_r+0xac>
 800acb4:	2b16      	cmp	r3, #22
 800acb6:	d11e      	bne.n	800acf6 <__sflush_r+0xea>
 800acb8:	602f      	str	r7, [r5, #0]
 800acba:	2000      	movs	r0, #0
 800acbc:	e022      	b.n	800ad04 <__sflush_r+0xf8>
 800acbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acc2:	b21b      	sxth	r3, r3
 800acc4:	e01b      	b.n	800acfe <__sflush_r+0xf2>
 800acc6:	690f      	ldr	r7, [r1, #16]
 800acc8:	2f00      	cmp	r7, #0
 800acca:	d0f6      	beq.n	800acba <__sflush_r+0xae>
 800accc:	0793      	lsls	r3, r2, #30
 800acce:	680e      	ldr	r6, [r1, #0]
 800acd0:	bf08      	it	eq
 800acd2:	694b      	ldreq	r3, [r1, #20]
 800acd4:	600f      	str	r7, [r1, #0]
 800acd6:	bf18      	it	ne
 800acd8:	2300      	movne	r3, #0
 800acda:	eba6 0807 	sub.w	r8, r6, r7
 800acde:	608b      	str	r3, [r1, #8]
 800ace0:	f1b8 0f00 	cmp.w	r8, #0
 800ace4:	dde9      	ble.n	800acba <__sflush_r+0xae>
 800ace6:	6a21      	ldr	r1, [r4, #32]
 800ace8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acea:	4643      	mov	r3, r8
 800acec:	463a      	mov	r2, r7
 800acee:	4628      	mov	r0, r5
 800acf0:	47b0      	blx	r6
 800acf2:	2800      	cmp	r0, #0
 800acf4:	dc08      	bgt.n	800ad08 <__sflush_r+0xfc>
 800acf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad08:	4407      	add	r7, r0
 800ad0a:	eba8 0800 	sub.w	r8, r8, r0
 800ad0e:	e7e7      	b.n	800ace0 <__sflush_r+0xd4>
 800ad10:	20400001 	.word	0x20400001

0800ad14 <_fflush_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	690b      	ldr	r3, [r1, #16]
 800ad18:	4605      	mov	r5, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	b913      	cbnz	r3, 800ad24 <_fflush_r+0x10>
 800ad1e:	2500      	movs	r5, #0
 800ad20:	4628      	mov	r0, r5
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	b118      	cbz	r0, 800ad2e <_fflush_r+0x1a>
 800ad26:	6a03      	ldr	r3, [r0, #32]
 800ad28:	b90b      	cbnz	r3, 800ad2e <_fflush_r+0x1a>
 800ad2a:	f7fd fa2b 	bl	8008184 <__sinit>
 800ad2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0f3      	beq.n	800ad1e <_fflush_r+0xa>
 800ad36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad38:	07d0      	lsls	r0, r2, #31
 800ad3a:	d404      	bmi.n	800ad46 <_fflush_r+0x32>
 800ad3c:	0599      	lsls	r1, r3, #22
 800ad3e:	d402      	bmi.n	800ad46 <_fflush_r+0x32>
 800ad40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad42:	f7fd fb6e 	bl	8008422 <__retarget_lock_acquire_recursive>
 800ad46:	4628      	mov	r0, r5
 800ad48:	4621      	mov	r1, r4
 800ad4a:	f7ff ff5f 	bl	800ac0c <__sflush_r>
 800ad4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad50:	07da      	lsls	r2, r3, #31
 800ad52:	4605      	mov	r5, r0
 800ad54:	d4e4      	bmi.n	800ad20 <_fflush_r+0xc>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	059b      	lsls	r3, r3, #22
 800ad5a:	d4e1      	bmi.n	800ad20 <_fflush_r+0xc>
 800ad5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad5e:	f7fd fb61 	bl	8008424 <__retarget_lock_release_recursive>
 800ad62:	e7dd      	b.n	800ad20 <_fflush_r+0xc>

0800ad64 <memmove>:
 800ad64:	4288      	cmp	r0, r1
 800ad66:	b510      	push	{r4, lr}
 800ad68:	eb01 0402 	add.w	r4, r1, r2
 800ad6c:	d902      	bls.n	800ad74 <memmove+0x10>
 800ad6e:	4284      	cmp	r4, r0
 800ad70:	4623      	mov	r3, r4
 800ad72:	d807      	bhi.n	800ad84 <memmove+0x20>
 800ad74:	1e43      	subs	r3, r0, #1
 800ad76:	42a1      	cmp	r1, r4
 800ad78:	d008      	beq.n	800ad8c <memmove+0x28>
 800ad7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad82:	e7f8      	b.n	800ad76 <memmove+0x12>
 800ad84:	4402      	add	r2, r0
 800ad86:	4601      	mov	r1, r0
 800ad88:	428a      	cmp	r2, r1
 800ad8a:	d100      	bne.n	800ad8e <memmove+0x2a>
 800ad8c:	bd10      	pop	{r4, pc}
 800ad8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad96:	e7f7      	b.n	800ad88 <memmove+0x24>

0800ad98 <strncmp>:
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	b16a      	cbz	r2, 800adb8 <strncmp+0x20>
 800ad9c:	3901      	subs	r1, #1
 800ad9e:	1884      	adds	r4, r0, r2
 800ada0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ada4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d103      	bne.n	800adb4 <strncmp+0x1c>
 800adac:	42a0      	cmp	r0, r4
 800adae:	d001      	beq.n	800adb4 <strncmp+0x1c>
 800adb0:	2a00      	cmp	r2, #0
 800adb2:	d1f5      	bne.n	800ada0 <strncmp+0x8>
 800adb4:	1ad0      	subs	r0, r2, r3
 800adb6:	bd10      	pop	{r4, pc}
 800adb8:	4610      	mov	r0, r2
 800adba:	e7fc      	b.n	800adb6 <strncmp+0x1e>

0800adbc <_sbrk_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4d06      	ldr	r5, [pc, #24]	@ (800add8 <_sbrk_r+0x1c>)
 800adc0:	2300      	movs	r3, #0
 800adc2:	4604      	mov	r4, r0
 800adc4:	4608      	mov	r0, r1
 800adc6:	602b      	str	r3, [r5, #0]
 800adc8:	f7f7 fb12 	bl	80023f0 <_sbrk>
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	d102      	bne.n	800add6 <_sbrk_r+0x1a>
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	b103      	cbz	r3, 800add6 <_sbrk_r+0x1a>
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	bd38      	pop	{r3, r4, r5, pc}
 800add8:	200022f0 	.word	0x200022f0
 800addc:	00000000 	.word	0x00000000

0800ade0 <nan>:
 800ade0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ade8 <nan+0x8>
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	00000000 	.word	0x00000000
 800adec:	7ff80000 	.word	0x7ff80000

0800adf0 <__assert_func>:
 800adf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adf2:	4614      	mov	r4, r2
 800adf4:	461a      	mov	r2, r3
 800adf6:	4b09      	ldr	r3, [pc, #36]	@ (800ae1c <__assert_func+0x2c>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4605      	mov	r5, r0
 800adfc:	68d8      	ldr	r0, [r3, #12]
 800adfe:	b14c      	cbz	r4, 800ae14 <__assert_func+0x24>
 800ae00:	4b07      	ldr	r3, [pc, #28]	@ (800ae20 <__assert_func+0x30>)
 800ae02:	9100      	str	r1, [sp, #0]
 800ae04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae08:	4906      	ldr	r1, [pc, #24]	@ (800ae24 <__assert_func+0x34>)
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	f000 fba8 	bl	800b560 <fiprintf>
 800ae10:	f000 fbb8 	bl	800b584 <abort>
 800ae14:	4b04      	ldr	r3, [pc, #16]	@ (800ae28 <__assert_func+0x38>)
 800ae16:	461c      	mov	r4, r3
 800ae18:	e7f3      	b.n	800ae02 <__assert_func+0x12>
 800ae1a:	bf00      	nop
 800ae1c:	20000bfc 	.word	0x20000bfc
 800ae20:	0800c20e 	.word	0x0800c20e
 800ae24:	0800c21b 	.word	0x0800c21b
 800ae28:	0800c249 	.word	0x0800c249

0800ae2c <_calloc_r>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	fba1 5402 	umull	r5, r4, r1, r2
 800ae32:	b934      	cbnz	r4, 800ae42 <_calloc_r+0x16>
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7fe f9d7 	bl	80091e8 <_malloc_r>
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	b928      	cbnz	r0, 800ae4a <_calloc_r+0x1e>
 800ae3e:	4630      	mov	r0, r6
 800ae40:	bd70      	pop	{r4, r5, r6, pc}
 800ae42:	220c      	movs	r2, #12
 800ae44:	6002      	str	r2, [r0, #0]
 800ae46:	2600      	movs	r6, #0
 800ae48:	e7f9      	b.n	800ae3e <_calloc_r+0x12>
 800ae4a:	462a      	mov	r2, r5
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	f7fd fa6a 	bl	8008326 <memset>
 800ae52:	e7f4      	b.n	800ae3e <_calloc_r+0x12>

0800ae54 <rshift>:
 800ae54:	6903      	ldr	r3, [r0, #16]
 800ae56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae62:	f100 0414 	add.w	r4, r0, #20
 800ae66:	dd45      	ble.n	800aef4 <rshift+0xa0>
 800ae68:	f011 011f 	ands.w	r1, r1, #31
 800ae6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae74:	d10c      	bne.n	800ae90 <rshift+0x3c>
 800ae76:	f100 0710 	add.w	r7, r0, #16
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	42b1      	cmp	r1, r6
 800ae7e:	d334      	bcc.n	800aeea <rshift+0x96>
 800ae80:	1a9b      	subs	r3, r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	1eea      	subs	r2, r5, #3
 800ae86:	4296      	cmp	r6, r2
 800ae88:	bf38      	it	cc
 800ae8a:	2300      	movcc	r3, #0
 800ae8c:	4423      	add	r3, r4
 800ae8e:	e015      	b.n	800aebc <rshift+0x68>
 800ae90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae94:	f1c1 0820 	rsb	r8, r1, #32
 800ae98:	40cf      	lsrs	r7, r1
 800ae9a:	f105 0e04 	add.w	lr, r5, #4
 800ae9e:	46a1      	mov	r9, r4
 800aea0:	4576      	cmp	r6, lr
 800aea2:	46f4      	mov	ip, lr
 800aea4:	d815      	bhi.n	800aed2 <rshift+0x7e>
 800aea6:	1a9a      	subs	r2, r3, r2
 800aea8:	0092      	lsls	r2, r2, #2
 800aeaa:	3a04      	subs	r2, #4
 800aeac:	3501      	adds	r5, #1
 800aeae:	42ae      	cmp	r6, r5
 800aeb0:	bf38      	it	cc
 800aeb2:	2200      	movcc	r2, #0
 800aeb4:	18a3      	adds	r3, r4, r2
 800aeb6:	50a7      	str	r7, [r4, r2]
 800aeb8:	b107      	cbz	r7, 800aebc <rshift+0x68>
 800aeba:	3304      	adds	r3, #4
 800aebc:	1b1a      	subs	r2, r3, r4
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aec4:	bf08      	it	eq
 800aec6:	2300      	moveq	r3, #0
 800aec8:	6102      	str	r2, [r0, #16]
 800aeca:	bf08      	it	eq
 800aecc:	6143      	streq	r3, [r0, #20]
 800aece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aed2:	f8dc c000 	ldr.w	ip, [ip]
 800aed6:	fa0c fc08 	lsl.w	ip, ip, r8
 800aeda:	ea4c 0707 	orr.w	r7, ip, r7
 800aede:	f849 7b04 	str.w	r7, [r9], #4
 800aee2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aee6:	40cf      	lsrs	r7, r1
 800aee8:	e7da      	b.n	800aea0 <rshift+0x4c>
 800aeea:	f851 cb04 	ldr.w	ip, [r1], #4
 800aeee:	f847 cf04 	str.w	ip, [r7, #4]!
 800aef2:	e7c3      	b.n	800ae7c <rshift+0x28>
 800aef4:	4623      	mov	r3, r4
 800aef6:	e7e1      	b.n	800aebc <rshift+0x68>

0800aef8 <__hexdig_fun>:
 800aef8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aefc:	2b09      	cmp	r3, #9
 800aefe:	d802      	bhi.n	800af06 <__hexdig_fun+0xe>
 800af00:	3820      	subs	r0, #32
 800af02:	b2c0      	uxtb	r0, r0
 800af04:	4770      	bx	lr
 800af06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af0a:	2b05      	cmp	r3, #5
 800af0c:	d801      	bhi.n	800af12 <__hexdig_fun+0x1a>
 800af0e:	3847      	subs	r0, #71	@ 0x47
 800af10:	e7f7      	b.n	800af02 <__hexdig_fun+0xa>
 800af12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af16:	2b05      	cmp	r3, #5
 800af18:	d801      	bhi.n	800af1e <__hexdig_fun+0x26>
 800af1a:	3827      	subs	r0, #39	@ 0x27
 800af1c:	e7f1      	b.n	800af02 <__hexdig_fun+0xa>
 800af1e:	2000      	movs	r0, #0
 800af20:	4770      	bx	lr
	...

0800af24 <__gethex>:
 800af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	b085      	sub	sp, #20
 800af2a:	468a      	mov	sl, r1
 800af2c:	9302      	str	r3, [sp, #8]
 800af2e:	680b      	ldr	r3, [r1, #0]
 800af30:	9001      	str	r0, [sp, #4]
 800af32:	4690      	mov	r8, r2
 800af34:	1c9c      	adds	r4, r3, #2
 800af36:	46a1      	mov	r9, r4
 800af38:	f814 0b01 	ldrb.w	r0, [r4], #1
 800af3c:	2830      	cmp	r0, #48	@ 0x30
 800af3e:	d0fa      	beq.n	800af36 <__gethex+0x12>
 800af40:	eba9 0303 	sub.w	r3, r9, r3
 800af44:	f1a3 0b02 	sub.w	fp, r3, #2
 800af48:	f7ff ffd6 	bl	800aef8 <__hexdig_fun>
 800af4c:	4605      	mov	r5, r0
 800af4e:	2800      	cmp	r0, #0
 800af50:	d168      	bne.n	800b024 <__gethex+0x100>
 800af52:	49a0      	ldr	r1, [pc, #640]	@ (800b1d4 <__gethex+0x2b0>)
 800af54:	2201      	movs	r2, #1
 800af56:	4648      	mov	r0, r9
 800af58:	f7ff ff1e 	bl	800ad98 <strncmp>
 800af5c:	4607      	mov	r7, r0
 800af5e:	2800      	cmp	r0, #0
 800af60:	d167      	bne.n	800b032 <__gethex+0x10e>
 800af62:	f899 0001 	ldrb.w	r0, [r9, #1]
 800af66:	4626      	mov	r6, r4
 800af68:	f7ff ffc6 	bl	800aef8 <__hexdig_fun>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d062      	beq.n	800b036 <__gethex+0x112>
 800af70:	4623      	mov	r3, r4
 800af72:	7818      	ldrb	r0, [r3, #0]
 800af74:	2830      	cmp	r0, #48	@ 0x30
 800af76:	4699      	mov	r9, r3
 800af78:	f103 0301 	add.w	r3, r3, #1
 800af7c:	d0f9      	beq.n	800af72 <__gethex+0x4e>
 800af7e:	f7ff ffbb 	bl	800aef8 <__hexdig_fun>
 800af82:	fab0 f580 	clz	r5, r0
 800af86:	096d      	lsrs	r5, r5, #5
 800af88:	f04f 0b01 	mov.w	fp, #1
 800af8c:	464a      	mov	r2, r9
 800af8e:	4616      	mov	r6, r2
 800af90:	3201      	adds	r2, #1
 800af92:	7830      	ldrb	r0, [r6, #0]
 800af94:	f7ff ffb0 	bl	800aef8 <__hexdig_fun>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d1f8      	bne.n	800af8e <__gethex+0x6a>
 800af9c:	498d      	ldr	r1, [pc, #564]	@ (800b1d4 <__gethex+0x2b0>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff fef9 	bl	800ad98 <strncmp>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d13f      	bne.n	800b02a <__gethex+0x106>
 800afaa:	b944      	cbnz	r4, 800afbe <__gethex+0x9a>
 800afac:	1c74      	adds	r4, r6, #1
 800afae:	4622      	mov	r2, r4
 800afb0:	4616      	mov	r6, r2
 800afb2:	3201      	adds	r2, #1
 800afb4:	7830      	ldrb	r0, [r6, #0]
 800afb6:	f7ff ff9f 	bl	800aef8 <__hexdig_fun>
 800afba:	2800      	cmp	r0, #0
 800afbc:	d1f8      	bne.n	800afb0 <__gethex+0x8c>
 800afbe:	1ba4      	subs	r4, r4, r6
 800afc0:	00a7      	lsls	r7, r4, #2
 800afc2:	7833      	ldrb	r3, [r6, #0]
 800afc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800afc8:	2b50      	cmp	r3, #80	@ 0x50
 800afca:	d13e      	bne.n	800b04a <__gethex+0x126>
 800afcc:	7873      	ldrb	r3, [r6, #1]
 800afce:	2b2b      	cmp	r3, #43	@ 0x2b
 800afd0:	d033      	beq.n	800b03a <__gethex+0x116>
 800afd2:	2b2d      	cmp	r3, #45	@ 0x2d
 800afd4:	d034      	beq.n	800b040 <__gethex+0x11c>
 800afd6:	1c71      	adds	r1, r6, #1
 800afd8:	2400      	movs	r4, #0
 800afda:	7808      	ldrb	r0, [r1, #0]
 800afdc:	f7ff ff8c 	bl	800aef8 <__hexdig_fun>
 800afe0:	1e43      	subs	r3, r0, #1
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b18      	cmp	r3, #24
 800afe6:	d830      	bhi.n	800b04a <__gethex+0x126>
 800afe8:	f1a0 0210 	sub.w	r2, r0, #16
 800afec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aff0:	f7ff ff82 	bl	800aef8 <__hexdig_fun>
 800aff4:	f100 3cff 	add.w	ip, r0, #4294967295
 800aff8:	fa5f fc8c 	uxtb.w	ip, ip
 800affc:	f1bc 0f18 	cmp.w	ip, #24
 800b000:	f04f 030a 	mov.w	r3, #10
 800b004:	d91e      	bls.n	800b044 <__gethex+0x120>
 800b006:	b104      	cbz	r4, 800b00a <__gethex+0xe6>
 800b008:	4252      	negs	r2, r2
 800b00a:	4417      	add	r7, r2
 800b00c:	f8ca 1000 	str.w	r1, [sl]
 800b010:	b1ed      	cbz	r5, 800b04e <__gethex+0x12a>
 800b012:	f1bb 0f00 	cmp.w	fp, #0
 800b016:	bf0c      	ite	eq
 800b018:	2506      	moveq	r5, #6
 800b01a:	2500      	movne	r5, #0
 800b01c:	4628      	mov	r0, r5
 800b01e:	b005      	add	sp, #20
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b024:	2500      	movs	r5, #0
 800b026:	462c      	mov	r4, r5
 800b028:	e7b0      	b.n	800af8c <__gethex+0x68>
 800b02a:	2c00      	cmp	r4, #0
 800b02c:	d1c7      	bne.n	800afbe <__gethex+0x9a>
 800b02e:	4627      	mov	r7, r4
 800b030:	e7c7      	b.n	800afc2 <__gethex+0x9e>
 800b032:	464e      	mov	r6, r9
 800b034:	462f      	mov	r7, r5
 800b036:	2501      	movs	r5, #1
 800b038:	e7c3      	b.n	800afc2 <__gethex+0x9e>
 800b03a:	2400      	movs	r4, #0
 800b03c:	1cb1      	adds	r1, r6, #2
 800b03e:	e7cc      	b.n	800afda <__gethex+0xb6>
 800b040:	2401      	movs	r4, #1
 800b042:	e7fb      	b.n	800b03c <__gethex+0x118>
 800b044:	fb03 0002 	mla	r0, r3, r2, r0
 800b048:	e7ce      	b.n	800afe8 <__gethex+0xc4>
 800b04a:	4631      	mov	r1, r6
 800b04c:	e7de      	b.n	800b00c <__gethex+0xe8>
 800b04e:	eba6 0309 	sub.w	r3, r6, r9
 800b052:	3b01      	subs	r3, #1
 800b054:	4629      	mov	r1, r5
 800b056:	2b07      	cmp	r3, #7
 800b058:	dc0a      	bgt.n	800b070 <__gethex+0x14c>
 800b05a:	9801      	ldr	r0, [sp, #4]
 800b05c:	f7fe f950 	bl	8009300 <_Balloc>
 800b060:	4604      	mov	r4, r0
 800b062:	b940      	cbnz	r0, 800b076 <__gethex+0x152>
 800b064:	4b5c      	ldr	r3, [pc, #368]	@ (800b1d8 <__gethex+0x2b4>)
 800b066:	4602      	mov	r2, r0
 800b068:	21e4      	movs	r1, #228	@ 0xe4
 800b06a:	485c      	ldr	r0, [pc, #368]	@ (800b1dc <__gethex+0x2b8>)
 800b06c:	f7ff fec0 	bl	800adf0 <__assert_func>
 800b070:	3101      	adds	r1, #1
 800b072:	105b      	asrs	r3, r3, #1
 800b074:	e7ef      	b.n	800b056 <__gethex+0x132>
 800b076:	f100 0a14 	add.w	sl, r0, #20
 800b07a:	2300      	movs	r3, #0
 800b07c:	4655      	mov	r5, sl
 800b07e:	469b      	mov	fp, r3
 800b080:	45b1      	cmp	r9, r6
 800b082:	d337      	bcc.n	800b0f4 <__gethex+0x1d0>
 800b084:	f845 bb04 	str.w	fp, [r5], #4
 800b088:	eba5 050a 	sub.w	r5, r5, sl
 800b08c:	10ad      	asrs	r5, r5, #2
 800b08e:	6125      	str	r5, [r4, #16]
 800b090:	4658      	mov	r0, fp
 800b092:	f7fe fa27 	bl	80094e4 <__hi0bits>
 800b096:	016d      	lsls	r5, r5, #5
 800b098:	f8d8 6000 	ldr.w	r6, [r8]
 800b09c:	1a2d      	subs	r5, r5, r0
 800b09e:	42b5      	cmp	r5, r6
 800b0a0:	dd54      	ble.n	800b14c <__gethex+0x228>
 800b0a2:	1bad      	subs	r5, r5, r6
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7fe fdb3 	bl	8009c12 <__any_on>
 800b0ac:	4681      	mov	r9, r0
 800b0ae:	b178      	cbz	r0, 800b0d0 <__gethex+0x1ac>
 800b0b0:	1e6b      	subs	r3, r5, #1
 800b0b2:	1159      	asrs	r1, r3, #5
 800b0b4:	f003 021f 	and.w	r2, r3, #31
 800b0b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b0bc:	f04f 0901 	mov.w	r9, #1
 800b0c0:	fa09 f202 	lsl.w	r2, r9, r2
 800b0c4:	420a      	tst	r2, r1
 800b0c6:	d003      	beq.n	800b0d0 <__gethex+0x1ac>
 800b0c8:	454b      	cmp	r3, r9
 800b0ca:	dc36      	bgt.n	800b13a <__gethex+0x216>
 800b0cc:	f04f 0902 	mov.w	r9, #2
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7ff febe 	bl	800ae54 <rshift>
 800b0d8:	442f      	add	r7, r5
 800b0da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0de:	42bb      	cmp	r3, r7
 800b0e0:	da42      	bge.n	800b168 <__gethex+0x244>
 800b0e2:	9801      	ldr	r0, [sp, #4]
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	f7fe f94b 	bl	8009380 <_Bfree>
 800b0ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	25a3      	movs	r5, #163	@ 0xa3
 800b0f2:	e793      	b.n	800b01c <__gethex+0xf8>
 800b0f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b0f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b0fa:	d012      	beq.n	800b122 <__gethex+0x1fe>
 800b0fc:	2b20      	cmp	r3, #32
 800b0fe:	d104      	bne.n	800b10a <__gethex+0x1e6>
 800b100:	f845 bb04 	str.w	fp, [r5], #4
 800b104:	f04f 0b00 	mov.w	fp, #0
 800b108:	465b      	mov	r3, fp
 800b10a:	7830      	ldrb	r0, [r6, #0]
 800b10c:	9303      	str	r3, [sp, #12]
 800b10e:	f7ff fef3 	bl	800aef8 <__hexdig_fun>
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	f000 000f 	and.w	r0, r0, #15
 800b118:	4098      	lsls	r0, r3
 800b11a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b11e:	3304      	adds	r3, #4
 800b120:	e7ae      	b.n	800b080 <__gethex+0x15c>
 800b122:	45b1      	cmp	r9, r6
 800b124:	d8ea      	bhi.n	800b0fc <__gethex+0x1d8>
 800b126:	492b      	ldr	r1, [pc, #172]	@ (800b1d4 <__gethex+0x2b0>)
 800b128:	9303      	str	r3, [sp, #12]
 800b12a:	2201      	movs	r2, #1
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff fe33 	bl	800ad98 <strncmp>
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	2800      	cmp	r0, #0
 800b136:	d1e1      	bne.n	800b0fc <__gethex+0x1d8>
 800b138:	e7a2      	b.n	800b080 <__gethex+0x15c>
 800b13a:	1ea9      	subs	r1, r5, #2
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7fe fd68 	bl	8009c12 <__any_on>
 800b142:	2800      	cmp	r0, #0
 800b144:	d0c2      	beq.n	800b0cc <__gethex+0x1a8>
 800b146:	f04f 0903 	mov.w	r9, #3
 800b14a:	e7c1      	b.n	800b0d0 <__gethex+0x1ac>
 800b14c:	da09      	bge.n	800b162 <__gethex+0x23e>
 800b14e:	1b75      	subs	r5, r6, r5
 800b150:	4621      	mov	r1, r4
 800b152:	9801      	ldr	r0, [sp, #4]
 800b154:	462a      	mov	r2, r5
 800b156:	f7fe fb23 	bl	80097a0 <__lshift>
 800b15a:	1b7f      	subs	r7, r7, r5
 800b15c:	4604      	mov	r4, r0
 800b15e:	f100 0a14 	add.w	sl, r0, #20
 800b162:	f04f 0900 	mov.w	r9, #0
 800b166:	e7b8      	b.n	800b0da <__gethex+0x1b6>
 800b168:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b16c:	42bd      	cmp	r5, r7
 800b16e:	dd6f      	ble.n	800b250 <__gethex+0x32c>
 800b170:	1bed      	subs	r5, r5, r7
 800b172:	42ae      	cmp	r6, r5
 800b174:	dc34      	bgt.n	800b1e0 <__gethex+0x2bc>
 800b176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d022      	beq.n	800b1c4 <__gethex+0x2a0>
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d024      	beq.n	800b1cc <__gethex+0x2a8>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d115      	bne.n	800b1b2 <__gethex+0x28e>
 800b186:	42ae      	cmp	r6, r5
 800b188:	d113      	bne.n	800b1b2 <__gethex+0x28e>
 800b18a:	2e01      	cmp	r6, #1
 800b18c:	d10b      	bne.n	800b1a6 <__gethex+0x282>
 800b18e:	9a02      	ldr	r2, [sp, #8]
 800b190:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	2301      	movs	r3, #1
 800b198:	6123      	str	r3, [r4, #16]
 800b19a:	f8ca 3000 	str.w	r3, [sl]
 800b19e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1a0:	2562      	movs	r5, #98	@ 0x62
 800b1a2:	601c      	str	r4, [r3, #0]
 800b1a4:	e73a      	b.n	800b01c <__gethex+0xf8>
 800b1a6:	1e71      	subs	r1, r6, #1
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f7fe fd32 	bl	8009c12 <__any_on>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d1ed      	bne.n	800b18e <__gethex+0x26a>
 800b1b2:	9801      	ldr	r0, [sp, #4]
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	f7fe f8e3 	bl	8009380 <_Bfree>
 800b1ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1bc:	2300      	movs	r3, #0
 800b1be:	6013      	str	r3, [r2, #0]
 800b1c0:	2550      	movs	r5, #80	@ 0x50
 800b1c2:	e72b      	b.n	800b01c <__gethex+0xf8>
 800b1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1f3      	bne.n	800b1b2 <__gethex+0x28e>
 800b1ca:	e7e0      	b.n	800b18e <__gethex+0x26a>
 800b1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1dd      	bne.n	800b18e <__gethex+0x26a>
 800b1d2:	e7ee      	b.n	800b1b2 <__gethex+0x28e>
 800b1d4:	0800c1f3 	.word	0x0800c1f3
 800b1d8:	0800c189 	.word	0x0800c189
 800b1dc:	0800c24a 	.word	0x0800c24a
 800b1e0:	1e6f      	subs	r7, r5, #1
 800b1e2:	f1b9 0f00 	cmp.w	r9, #0
 800b1e6:	d130      	bne.n	800b24a <__gethex+0x326>
 800b1e8:	b127      	cbz	r7, 800b1f4 <__gethex+0x2d0>
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f7fe fd10 	bl	8009c12 <__any_on>
 800b1f2:	4681      	mov	r9, r0
 800b1f4:	117a      	asrs	r2, r7, #5
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b1fc:	f007 071f 	and.w	r7, r7, #31
 800b200:	40bb      	lsls	r3, r7
 800b202:	4213      	tst	r3, r2
 800b204:	4629      	mov	r1, r5
 800b206:	4620      	mov	r0, r4
 800b208:	bf18      	it	ne
 800b20a:	f049 0902 	orrne.w	r9, r9, #2
 800b20e:	f7ff fe21 	bl	800ae54 <rshift>
 800b212:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b216:	1b76      	subs	r6, r6, r5
 800b218:	2502      	movs	r5, #2
 800b21a:	f1b9 0f00 	cmp.w	r9, #0
 800b21e:	d047      	beq.n	800b2b0 <__gethex+0x38c>
 800b220:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b224:	2b02      	cmp	r3, #2
 800b226:	d015      	beq.n	800b254 <__gethex+0x330>
 800b228:	2b03      	cmp	r3, #3
 800b22a:	d017      	beq.n	800b25c <__gethex+0x338>
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d109      	bne.n	800b244 <__gethex+0x320>
 800b230:	f019 0f02 	tst.w	r9, #2
 800b234:	d006      	beq.n	800b244 <__gethex+0x320>
 800b236:	f8da 3000 	ldr.w	r3, [sl]
 800b23a:	ea49 0903 	orr.w	r9, r9, r3
 800b23e:	f019 0f01 	tst.w	r9, #1
 800b242:	d10e      	bne.n	800b262 <__gethex+0x33e>
 800b244:	f045 0510 	orr.w	r5, r5, #16
 800b248:	e032      	b.n	800b2b0 <__gethex+0x38c>
 800b24a:	f04f 0901 	mov.w	r9, #1
 800b24e:	e7d1      	b.n	800b1f4 <__gethex+0x2d0>
 800b250:	2501      	movs	r5, #1
 800b252:	e7e2      	b.n	800b21a <__gethex+0x2f6>
 800b254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b256:	f1c3 0301 	rsb	r3, r3, #1
 800b25a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d0f0      	beq.n	800b244 <__gethex+0x320>
 800b262:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b266:	f104 0314 	add.w	r3, r4, #20
 800b26a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b26e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b272:	f04f 0c00 	mov.w	ip, #0
 800b276:	4618      	mov	r0, r3
 800b278:	f853 2b04 	ldr.w	r2, [r3], #4
 800b27c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b280:	d01b      	beq.n	800b2ba <__gethex+0x396>
 800b282:	3201      	adds	r2, #1
 800b284:	6002      	str	r2, [r0, #0]
 800b286:	2d02      	cmp	r5, #2
 800b288:	f104 0314 	add.w	r3, r4, #20
 800b28c:	d13c      	bne.n	800b308 <__gethex+0x3e4>
 800b28e:	f8d8 2000 	ldr.w	r2, [r8]
 800b292:	3a01      	subs	r2, #1
 800b294:	42b2      	cmp	r2, r6
 800b296:	d109      	bne.n	800b2ac <__gethex+0x388>
 800b298:	1171      	asrs	r1, r6, #5
 800b29a:	2201      	movs	r2, #1
 800b29c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2a0:	f006 061f 	and.w	r6, r6, #31
 800b2a4:	fa02 f606 	lsl.w	r6, r2, r6
 800b2a8:	421e      	tst	r6, r3
 800b2aa:	d13a      	bne.n	800b322 <__gethex+0x3fe>
 800b2ac:	f045 0520 	orr.w	r5, r5, #32
 800b2b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2b2:	601c      	str	r4, [r3, #0]
 800b2b4:	9b02      	ldr	r3, [sp, #8]
 800b2b6:	601f      	str	r7, [r3, #0]
 800b2b8:	e6b0      	b.n	800b01c <__gethex+0xf8>
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2c0:	d8d9      	bhi.n	800b276 <__gethex+0x352>
 800b2c2:	68a3      	ldr	r3, [r4, #8]
 800b2c4:	459b      	cmp	fp, r3
 800b2c6:	db17      	blt.n	800b2f8 <__gethex+0x3d4>
 800b2c8:	6861      	ldr	r1, [r4, #4]
 800b2ca:	9801      	ldr	r0, [sp, #4]
 800b2cc:	3101      	adds	r1, #1
 800b2ce:	f7fe f817 	bl	8009300 <_Balloc>
 800b2d2:	4681      	mov	r9, r0
 800b2d4:	b918      	cbnz	r0, 800b2de <__gethex+0x3ba>
 800b2d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b340 <__gethex+0x41c>)
 800b2d8:	4602      	mov	r2, r0
 800b2da:	2184      	movs	r1, #132	@ 0x84
 800b2dc:	e6c5      	b.n	800b06a <__gethex+0x146>
 800b2de:	6922      	ldr	r2, [r4, #16]
 800b2e0:	3202      	adds	r2, #2
 800b2e2:	f104 010c 	add.w	r1, r4, #12
 800b2e6:	0092      	lsls	r2, r2, #2
 800b2e8:	300c      	adds	r0, #12
 800b2ea:	f7fd f89c 	bl	8008426 <memcpy>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	9801      	ldr	r0, [sp, #4]
 800b2f2:	f7fe f845 	bl	8009380 <_Bfree>
 800b2f6:	464c      	mov	r4, r9
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b300:	6122      	str	r2, [r4, #16]
 800b302:	2201      	movs	r2, #1
 800b304:	615a      	str	r2, [r3, #20]
 800b306:	e7be      	b.n	800b286 <__gethex+0x362>
 800b308:	6922      	ldr	r2, [r4, #16]
 800b30a:	455a      	cmp	r2, fp
 800b30c:	dd0b      	ble.n	800b326 <__gethex+0x402>
 800b30e:	2101      	movs	r1, #1
 800b310:	4620      	mov	r0, r4
 800b312:	f7ff fd9f 	bl	800ae54 <rshift>
 800b316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b31a:	3701      	adds	r7, #1
 800b31c:	42bb      	cmp	r3, r7
 800b31e:	f6ff aee0 	blt.w	800b0e2 <__gethex+0x1be>
 800b322:	2501      	movs	r5, #1
 800b324:	e7c2      	b.n	800b2ac <__gethex+0x388>
 800b326:	f016 061f 	ands.w	r6, r6, #31
 800b32a:	d0fa      	beq.n	800b322 <__gethex+0x3fe>
 800b32c:	4453      	add	r3, sl
 800b32e:	f1c6 0620 	rsb	r6, r6, #32
 800b332:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b336:	f7fe f8d5 	bl	80094e4 <__hi0bits>
 800b33a:	42b0      	cmp	r0, r6
 800b33c:	dbe7      	blt.n	800b30e <__gethex+0x3ea>
 800b33e:	e7f0      	b.n	800b322 <__gethex+0x3fe>
 800b340:	0800c189 	.word	0x0800c189

0800b344 <L_shift>:
 800b344:	f1c2 0208 	rsb	r2, r2, #8
 800b348:	0092      	lsls	r2, r2, #2
 800b34a:	b570      	push	{r4, r5, r6, lr}
 800b34c:	f1c2 0620 	rsb	r6, r2, #32
 800b350:	6843      	ldr	r3, [r0, #4]
 800b352:	6804      	ldr	r4, [r0, #0]
 800b354:	fa03 f506 	lsl.w	r5, r3, r6
 800b358:	432c      	orrs	r4, r5
 800b35a:	40d3      	lsrs	r3, r2
 800b35c:	6004      	str	r4, [r0, #0]
 800b35e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b362:	4288      	cmp	r0, r1
 800b364:	d3f4      	bcc.n	800b350 <L_shift+0xc>
 800b366:	bd70      	pop	{r4, r5, r6, pc}

0800b368 <__match>:
 800b368:	b530      	push	{r4, r5, lr}
 800b36a:	6803      	ldr	r3, [r0, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b372:	b914      	cbnz	r4, 800b37a <__match+0x12>
 800b374:	6003      	str	r3, [r0, #0]
 800b376:	2001      	movs	r0, #1
 800b378:	bd30      	pop	{r4, r5, pc}
 800b37a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b37e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b382:	2d19      	cmp	r5, #25
 800b384:	bf98      	it	ls
 800b386:	3220      	addls	r2, #32
 800b388:	42a2      	cmp	r2, r4
 800b38a:	d0f0      	beq.n	800b36e <__match+0x6>
 800b38c:	2000      	movs	r0, #0
 800b38e:	e7f3      	b.n	800b378 <__match+0x10>

0800b390 <__hexnan>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	680b      	ldr	r3, [r1, #0]
 800b396:	6801      	ldr	r1, [r0, #0]
 800b398:	115e      	asrs	r6, r3, #5
 800b39a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b39e:	f013 031f 	ands.w	r3, r3, #31
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	bf18      	it	ne
 800b3a6:	3604      	addne	r6, #4
 800b3a8:	2500      	movs	r5, #0
 800b3aa:	1f37      	subs	r7, r6, #4
 800b3ac:	4682      	mov	sl, r0
 800b3ae:	4690      	mov	r8, r2
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3b6:	46b9      	mov	r9, r7
 800b3b8:	463c      	mov	r4, r7
 800b3ba:	9502      	str	r5, [sp, #8]
 800b3bc:	46ab      	mov	fp, r5
 800b3be:	784a      	ldrb	r2, [r1, #1]
 800b3c0:	1c4b      	adds	r3, r1, #1
 800b3c2:	9303      	str	r3, [sp, #12]
 800b3c4:	b342      	cbz	r2, 800b418 <__hexnan+0x88>
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	9105      	str	r1, [sp, #20]
 800b3ca:	9204      	str	r2, [sp, #16]
 800b3cc:	f7ff fd94 	bl	800aef8 <__hexdig_fun>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d151      	bne.n	800b478 <__hexnan+0xe8>
 800b3d4:	9a04      	ldr	r2, [sp, #16]
 800b3d6:	9905      	ldr	r1, [sp, #20]
 800b3d8:	2a20      	cmp	r2, #32
 800b3da:	d818      	bhi.n	800b40e <__hexnan+0x7e>
 800b3dc:	9b02      	ldr	r3, [sp, #8]
 800b3de:	459b      	cmp	fp, r3
 800b3e0:	dd13      	ble.n	800b40a <__hexnan+0x7a>
 800b3e2:	454c      	cmp	r4, r9
 800b3e4:	d206      	bcs.n	800b3f4 <__hexnan+0x64>
 800b3e6:	2d07      	cmp	r5, #7
 800b3e8:	dc04      	bgt.n	800b3f4 <__hexnan+0x64>
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	4649      	mov	r1, r9
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f7ff ffa8 	bl	800b344 <L_shift>
 800b3f4:	4544      	cmp	r4, r8
 800b3f6:	d952      	bls.n	800b49e <__hexnan+0x10e>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f1a4 0904 	sub.w	r9, r4, #4
 800b3fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b402:	f8cd b008 	str.w	fp, [sp, #8]
 800b406:	464c      	mov	r4, r9
 800b408:	461d      	mov	r5, r3
 800b40a:	9903      	ldr	r1, [sp, #12]
 800b40c:	e7d7      	b.n	800b3be <__hexnan+0x2e>
 800b40e:	2a29      	cmp	r2, #41	@ 0x29
 800b410:	d157      	bne.n	800b4c2 <__hexnan+0x132>
 800b412:	3102      	adds	r1, #2
 800b414:	f8ca 1000 	str.w	r1, [sl]
 800b418:	f1bb 0f00 	cmp.w	fp, #0
 800b41c:	d051      	beq.n	800b4c2 <__hexnan+0x132>
 800b41e:	454c      	cmp	r4, r9
 800b420:	d206      	bcs.n	800b430 <__hexnan+0xa0>
 800b422:	2d07      	cmp	r5, #7
 800b424:	dc04      	bgt.n	800b430 <__hexnan+0xa0>
 800b426:	462a      	mov	r2, r5
 800b428:	4649      	mov	r1, r9
 800b42a:	4620      	mov	r0, r4
 800b42c:	f7ff ff8a 	bl	800b344 <L_shift>
 800b430:	4544      	cmp	r4, r8
 800b432:	d936      	bls.n	800b4a2 <__hexnan+0x112>
 800b434:	f1a8 0204 	sub.w	r2, r8, #4
 800b438:	4623      	mov	r3, r4
 800b43a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b43e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b442:	429f      	cmp	r7, r3
 800b444:	d2f9      	bcs.n	800b43a <__hexnan+0xaa>
 800b446:	1b3b      	subs	r3, r7, r4
 800b448:	f023 0303 	bic.w	r3, r3, #3
 800b44c:	3304      	adds	r3, #4
 800b44e:	3401      	adds	r4, #1
 800b450:	3e03      	subs	r6, #3
 800b452:	42b4      	cmp	r4, r6
 800b454:	bf88      	it	hi
 800b456:	2304      	movhi	r3, #4
 800b458:	4443      	add	r3, r8
 800b45a:	2200      	movs	r2, #0
 800b45c:	f843 2b04 	str.w	r2, [r3], #4
 800b460:	429f      	cmp	r7, r3
 800b462:	d2fb      	bcs.n	800b45c <__hexnan+0xcc>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	b91b      	cbnz	r3, 800b470 <__hexnan+0xe0>
 800b468:	4547      	cmp	r7, r8
 800b46a:	d128      	bne.n	800b4be <__hexnan+0x12e>
 800b46c:	2301      	movs	r3, #1
 800b46e:	603b      	str	r3, [r7, #0]
 800b470:	2005      	movs	r0, #5
 800b472:	b007      	add	sp, #28
 800b474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b478:	3501      	adds	r5, #1
 800b47a:	2d08      	cmp	r5, #8
 800b47c:	f10b 0b01 	add.w	fp, fp, #1
 800b480:	dd06      	ble.n	800b490 <__hexnan+0x100>
 800b482:	4544      	cmp	r4, r8
 800b484:	d9c1      	bls.n	800b40a <__hexnan+0x7a>
 800b486:	2300      	movs	r3, #0
 800b488:	f844 3c04 	str.w	r3, [r4, #-4]
 800b48c:	2501      	movs	r5, #1
 800b48e:	3c04      	subs	r4, #4
 800b490:	6822      	ldr	r2, [r4, #0]
 800b492:	f000 000f 	and.w	r0, r0, #15
 800b496:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b49a:	6020      	str	r0, [r4, #0]
 800b49c:	e7b5      	b.n	800b40a <__hexnan+0x7a>
 800b49e:	2508      	movs	r5, #8
 800b4a0:	e7b3      	b.n	800b40a <__hexnan+0x7a>
 800b4a2:	9b01      	ldr	r3, [sp, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0dd      	beq.n	800b464 <__hexnan+0xd4>
 800b4a8:	f1c3 0320 	rsb	r3, r3, #32
 800b4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b0:	40da      	lsrs	r2, r3
 800b4b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b4bc:	e7d2      	b.n	800b464 <__hexnan+0xd4>
 800b4be:	3f04      	subs	r7, #4
 800b4c0:	e7d0      	b.n	800b464 <__hexnan+0xd4>
 800b4c2:	2004      	movs	r0, #4
 800b4c4:	e7d5      	b.n	800b472 <__hexnan+0xe2>

0800b4c6 <__ascii_mbtowc>:
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	b901      	cbnz	r1, 800b4cc <__ascii_mbtowc+0x6>
 800b4ca:	a901      	add	r1, sp, #4
 800b4cc:	b142      	cbz	r2, 800b4e0 <__ascii_mbtowc+0x1a>
 800b4ce:	b14b      	cbz	r3, 800b4e4 <__ascii_mbtowc+0x1e>
 800b4d0:	7813      	ldrb	r3, [r2, #0]
 800b4d2:	600b      	str	r3, [r1, #0]
 800b4d4:	7812      	ldrb	r2, [r2, #0]
 800b4d6:	1e10      	subs	r0, r2, #0
 800b4d8:	bf18      	it	ne
 800b4da:	2001      	movne	r0, #1
 800b4dc:	b002      	add	sp, #8
 800b4de:	4770      	bx	lr
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	e7fb      	b.n	800b4dc <__ascii_mbtowc+0x16>
 800b4e4:	f06f 0001 	mvn.w	r0, #1
 800b4e8:	e7f8      	b.n	800b4dc <__ascii_mbtowc+0x16>

0800b4ea <_realloc_r>:
 800b4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ee:	4607      	mov	r7, r0
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	b921      	cbnz	r1, 800b500 <_realloc_r+0x16>
 800b4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fa:	4611      	mov	r1, r2
 800b4fc:	f7fd be74 	b.w	80091e8 <_malloc_r>
 800b500:	b92a      	cbnz	r2, 800b50e <_realloc_r+0x24>
 800b502:	f7fd fdfd 	bl	8009100 <_free_r>
 800b506:	4625      	mov	r5, r4
 800b508:	4628      	mov	r0, r5
 800b50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b50e:	f000 f840 	bl	800b592 <_malloc_usable_size_r>
 800b512:	4284      	cmp	r4, r0
 800b514:	4606      	mov	r6, r0
 800b516:	d802      	bhi.n	800b51e <_realloc_r+0x34>
 800b518:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b51c:	d8f4      	bhi.n	800b508 <_realloc_r+0x1e>
 800b51e:	4621      	mov	r1, r4
 800b520:	4638      	mov	r0, r7
 800b522:	f7fd fe61 	bl	80091e8 <_malloc_r>
 800b526:	4680      	mov	r8, r0
 800b528:	b908      	cbnz	r0, 800b52e <_realloc_r+0x44>
 800b52a:	4645      	mov	r5, r8
 800b52c:	e7ec      	b.n	800b508 <_realloc_r+0x1e>
 800b52e:	42b4      	cmp	r4, r6
 800b530:	4622      	mov	r2, r4
 800b532:	4629      	mov	r1, r5
 800b534:	bf28      	it	cs
 800b536:	4632      	movcs	r2, r6
 800b538:	f7fc ff75 	bl	8008426 <memcpy>
 800b53c:	4629      	mov	r1, r5
 800b53e:	4638      	mov	r0, r7
 800b540:	f7fd fdde 	bl	8009100 <_free_r>
 800b544:	e7f1      	b.n	800b52a <_realloc_r+0x40>

0800b546 <__ascii_wctomb>:
 800b546:	4603      	mov	r3, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	b141      	cbz	r1, 800b55e <__ascii_wctomb+0x18>
 800b54c:	2aff      	cmp	r2, #255	@ 0xff
 800b54e:	d904      	bls.n	800b55a <__ascii_wctomb+0x14>
 800b550:	228a      	movs	r2, #138	@ 0x8a
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	f04f 30ff 	mov.w	r0, #4294967295
 800b558:	4770      	bx	lr
 800b55a:	700a      	strb	r2, [r1, #0]
 800b55c:	2001      	movs	r0, #1
 800b55e:	4770      	bx	lr

0800b560 <fiprintf>:
 800b560:	b40e      	push	{r1, r2, r3}
 800b562:	b503      	push	{r0, r1, lr}
 800b564:	4601      	mov	r1, r0
 800b566:	ab03      	add	r3, sp, #12
 800b568:	4805      	ldr	r0, [pc, #20]	@ (800b580 <fiprintf+0x20>)
 800b56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b56e:	6800      	ldr	r0, [r0, #0]
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	f000 f83f 	bl	800b5f4 <_vfiprintf_r>
 800b576:	b002      	add	sp, #8
 800b578:	f85d eb04 	ldr.w	lr, [sp], #4
 800b57c:	b003      	add	sp, #12
 800b57e:	4770      	bx	lr
 800b580:	20000bfc 	.word	0x20000bfc

0800b584 <abort>:
 800b584:	b508      	push	{r3, lr}
 800b586:	2006      	movs	r0, #6
 800b588:	f000 fa08 	bl	800b99c <raise>
 800b58c:	2001      	movs	r0, #1
 800b58e:	f7f6 feb7 	bl	8002300 <_exit>

0800b592 <_malloc_usable_size_r>:
 800b592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b596:	1f18      	subs	r0, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	bfbc      	itt	lt
 800b59c:	580b      	ldrlt	r3, [r1, r0]
 800b59e:	18c0      	addlt	r0, r0, r3
 800b5a0:	4770      	bx	lr

0800b5a2 <__sfputc_r>:
 800b5a2:	6893      	ldr	r3, [r2, #8]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	b410      	push	{r4}
 800b5aa:	6093      	str	r3, [r2, #8]
 800b5ac:	da08      	bge.n	800b5c0 <__sfputc_r+0x1e>
 800b5ae:	6994      	ldr	r4, [r2, #24]
 800b5b0:	42a3      	cmp	r3, r4
 800b5b2:	db01      	blt.n	800b5b8 <__sfputc_r+0x16>
 800b5b4:	290a      	cmp	r1, #10
 800b5b6:	d103      	bne.n	800b5c0 <__sfputc_r+0x1e>
 800b5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5bc:	f000 b932 	b.w	800b824 <__swbuf_r>
 800b5c0:	6813      	ldr	r3, [r2, #0]
 800b5c2:	1c58      	adds	r0, r3, #1
 800b5c4:	6010      	str	r0, [r2, #0]
 800b5c6:	7019      	strb	r1, [r3, #0]
 800b5c8:	4608      	mov	r0, r1
 800b5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <__sfputs_r>:
 800b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	460f      	mov	r7, r1
 800b5d6:	4614      	mov	r4, r2
 800b5d8:	18d5      	adds	r5, r2, r3
 800b5da:	42ac      	cmp	r4, r5
 800b5dc:	d101      	bne.n	800b5e2 <__sfputs_r+0x12>
 800b5de:	2000      	movs	r0, #0
 800b5e0:	e007      	b.n	800b5f2 <__sfputs_r+0x22>
 800b5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e6:	463a      	mov	r2, r7
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f7ff ffda 	bl	800b5a2 <__sfputc_r>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	d1f3      	bne.n	800b5da <__sfputs_r+0xa>
 800b5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5f4 <_vfiprintf_r>:
 800b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	460d      	mov	r5, r1
 800b5fa:	b09d      	sub	sp, #116	@ 0x74
 800b5fc:	4614      	mov	r4, r2
 800b5fe:	4698      	mov	r8, r3
 800b600:	4606      	mov	r6, r0
 800b602:	b118      	cbz	r0, 800b60c <_vfiprintf_r+0x18>
 800b604:	6a03      	ldr	r3, [r0, #32]
 800b606:	b90b      	cbnz	r3, 800b60c <_vfiprintf_r+0x18>
 800b608:	f7fc fdbc 	bl	8008184 <__sinit>
 800b60c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b60e:	07d9      	lsls	r1, r3, #31
 800b610:	d405      	bmi.n	800b61e <_vfiprintf_r+0x2a>
 800b612:	89ab      	ldrh	r3, [r5, #12]
 800b614:	059a      	lsls	r2, r3, #22
 800b616:	d402      	bmi.n	800b61e <_vfiprintf_r+0x2a>
 800b618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b61a:	f7fc ff02 	bl	8008422 <__retarget_lock_acquire_recursive>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	071b      	lsls	r3, r3, #28
 800b622:	d501      	bpl.n	800b628 <_vfiprintf_r+0x34>
 800b624:	692b      	ldr	r3, [r5, #16]
 800b626:	b99b      	cbnz	r3, 800b650 <_vfiprintf_r+0x5c>
 800b628:	4629      	mov	r1, r5
 800b62a:	4630      	mov	r0, r6
 800b62c:	f000 f938 	bl	800b8a0 <__swsetup_r>
 800b630:	b170      	cbz	r0, 800b650 <_vfiprintf_r+0x5c>
 800b632:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b634:	07dc      	lsls	r4, r3, #31
 800b636:	d504      	bpl.n	800b642 <_vfiprintf_r+0x4e>
 800b638:	f04f 30ff 	mov.w	r0, #4294967295
 800b63c:	b01d      	add	sp, #116	@ 0x74
 800b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b642:	89ab      	ldrh	r3, [r5, #12]
 800b644:	0598      	lsls	r0, r3, #22
 800b646:	d4f7      	bmi.n	800b638 <_vfiprintf_r+0x44>
 800b648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b64a:	f7fc feeb 	bl	8008424 <__retarget_lock_release_recursive>
 800b64e:	e7f3      	b.n	800b638 <_vfiprintf_r+0x44>
 800b650:	2300      	movs	r3, #0
 800b652:	9309      	str	r3, [sp, #36]	@ 0x24
 800b654:	2320      	movs	r3, #32
 800b656:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b65a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b65e:	2330      	movs	r3, #48	@ 0x30
 800b660:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b810 <_vfiprintf_r+0x21c>
 800b664:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b668:	f04f 0901 	mov.w	r9, #1
 800b66c:	4623      	mov	r3, r4
 800b66e:	469a      	mov	sl, r3
 800b670:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b674:	b10a      	cbz	r2, 800b67a <_vfiprintf_r+0x86>
 800b676:	2a25      	cmp	r2, #37	@ 0x25
 800b678:	d1f9      	bne.n	800b66e <_vfiprintf_r+0x7a>
 800b67a:	ebba 0b04 	subs.w	fp, sl, r4
 800b67e:	d00b      	beq.n	800b698 <_vfiprintf_r+0xa4>
 800b680:	465b      	mov	r3, fp
 800b682:	4622      	mov	r2, r4
 800b684:	4629      	mov	r1, r5
 800b686:	4630      	mov	r0, r6
 800b688:	f7ff ffa2 	bl	800b5d0 <__sfputs_r>
 800b68c:	3001      	adds	r0, #1
 800b68e:	f000 80a7 	beq.w	800b7e0 <_vfiprintf_r+0x1ec>
 800b692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b694:	445a      	add	r2, fp
 800b696:	9209      	str	r2, [sp, #36]	@ 0x24
 800b698:	f89a 3000 	ldrb.w	r3, [sl]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 809f 	beq.w	800b7e0 <_vfiprintf_r+0x1ec>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ac:	f10a 0a01 	add.w	sl, sl, #1
 800b6b0:	9304      	str	r3, [sp, #16]
 800b6b2:	9307      	str	r3, [sp, #28]
 800b6b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6ba:	4654      	mov	r4, sl
 800b6bc:	2205      	movs	r2, #5
 800b6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c2:	4853      	ldr	r0, [pc, #332]	@ (800b810 <_vfiprintf_r+0x21c>)
 800b6c4:	f7f4 fd84 	bl	80001d0 <memchr>
 800b6c8:	9a04      	ldr	r2, [sp, #16]
 800b6ca:	b9d8      	cbnz	r0, 800b704 <_vfiprintf_r+0x110>
 800b6cc:	06d1      	lsls	r1, r2, #27
 800b6ce:	bf44      	itt	mi
 800b6d0:	2320      	movmi	r3, #32
 800b6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6d6:	0713      	lsls	r3, r2, #28
 800b6d8:	bf44      	itt	mi
 800b6da:	232b      	movmi	r3, #43	@ 0x2b
 800b6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6e6:	d015      	beq.n	800b714 <_vfiprintf_r+0x120>
 800b6e8:	9a07      	ldr	r2, [sp, #28]
 800b6ea:	4654      	mov	r4, sl
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f04f 0c0a 	mov.w	ip, #10
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f8:	3b30      	subs	r3, #48	@ 0x30
 800b6fa:	2b09      	cmp	r3, #9
 800b6fc:	d94b      	bls.n	800b796 <_vfiprintf_r+0x1a2>
 800b6fe:	b1b0      	cbz	r0, 800b72e <_vfiprintf_r+0x13a>
 800b700:	9207      	str	r2, [sp, #28]
 800b702:	e014      	b.n	800b72e <_vfiprintf_r+0x13a>
 800b704:	eba0 0308 	sub.w	r3, r0, r8
 800b708:	fa09 f303 	lsl.w	r3, r9, r3
 800b70c:	4313      	orrs	r3, r2
 800b70e:	9304      	str	r3, [sp, #16]
 800b710:	46a2      	mov	sl, r4
 800b712:	e7d2      	b.n	800b6ba <_vfiprintf_r+0xc6>
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	1d19      	adds	r1, r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	9103      	str	r1, [sp, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bfbb      	ittet	lt
 800b720:	425b      	neglt	r3, r3
 800b722:	f042 0202 	orrlt.w	r2, r2, #2
 800b726:	9307      	strge	r3, [sp, #28]
 800b728:	9307      	strlt	r3, [sp, #28]
 800b72a:	bfb8      	it	lt
 800b72c:	9204      	strlt	r2, [sp, #16]
 800b72e:	7823      	ldrb	r3, [r4, #0]
 800b730:	2b2e      	cmp	r3, #46	@ 0x2e
 800b732:	d10a      	bne.n	800b74a <_vfiprintf_r+0x156>
 800b734:	7863      	ldrb	r3, [r4, #1]
 800b736:	2b2a      	cmp	r3, #42	@ 0x2a
 800b738:	d132      	bne.n	800b7a0 <_vfiprintf_r+0x1ac>
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	1d1a      	adds	r2, r3, #4
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	9203      	str	r2, [sp, #12]
 800b742:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b746:	3402      	adds	r4, #2
 800b748:	9305      	str	r3, [sp, #20]
 800b74a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b820 <_vfiprintf_r+0x22c>
 800b74e:	7821      	ldrb	r1, [r4, #0]
 800b750:	2203      	movs	r2, #3
 800b752:	4650      	mov	r0, sl
 800b754:	f7f4 fd3c 	bl	80001d0 <memchr>
 800b758:	b138      	cbz	r0, 800b76a <_vfiprintf_r+0x176>
 800b75a:	9b04      	ldr	r3, [sp, #16]
 800b75c:	eba0 000a 	sub.w	r0, r0, sl
 800b760:	2240      	movs	r2, #64	@ 0x40
 800b762:	4082      	lsls	r2, r0
 800b764:	4313      	orrs	r3, r2
 800b766:	3401      	adds	r4, #1
 800b768:	9304      	str	r3, [sp, #16]
 800b76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76e:	4829      	ldr	r0, [pc, #164]	@ (800b814 <_vfiprintf_r+0x220>)
 800b770:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b774:	2206      	movs	r2, #6
 800b776:	f7f4 fd2b 	bl	80001d0 <memchr>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d03f      	beq.n	800b7fe <_vfiprintf_r+0x20a>
 800b77e:	4b26      	ldr	r3, [pc, #152]	@ (800b818 <_vfiprintf_r+0x224>)
 800b780:	bb1b      	cbnz	r3, 800b7ca <_vfiprintf_r+0x1d6>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	3307      	adds	r3, #7
 800b786:	f023 0307 	bic.w	r3, r3, #7
 800b78a:	3308      	adds	r3, #8
 800b78c:	9303      	str	r3, [sp, #12]
 800b78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b790:	443b      	add	r3, r7
 800b792:	9309      	str	r3, [sp, #36]	@ 0x24
 800b794:	e76a      	b.n	800b66c <_vfiprintf_r+0x78>
 800b796:	fb0c 3202 	mla	r2, ip, r2, r3
 800b79a:	460c      	mov	r4, r1
 800b79c:	2001      	movs	r0, #1
 800b79e:	e7a8      	b.n	800b6f2 <_vfiprintf_r+0xfe>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	3401      	adds	r4, #1
 800b7a4:	9305      	str	r3, [sp, #20]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f04f 0c0a 	mov.w	ip, #10
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b2:	3a30      	subs	r2, #48	@ 0x30
 800b7b4:	2a09      	cmp	r2, #9
 800b7b6:	d903      	bls.n	800b7c0 <_vfiprintf_r+0x1cc>
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d0c6      	beq.n	800b74a <_vfiprintf_r+0x156>
 800b7bc:	9105      	str	r1, [sp, #20]
 800b7be:	e7c4      	b.n	800b74a <_vfiprintf_r+0x156>
 800b7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e7f0      	b.n	800b7ac <_vfiprintf_r+0x1b8>
 800b7ca:	ab03      	add	r3, sp, #12
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	462a      	mov	r2, r5
 800b7d0:	4b12      	ldr	r3, [pc, #72]	@ (800b81c <_vfiprintf_r+0x228>)
 800b7d2:	a904      	add	r1, sp, #16
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f7fb fe85 	bl	80074e4 <_printf_float>
 800b7da:	4607      	mov	r7, r0
 800b7dc:	1c78      	adds	r0, r7, #1
 800b7de:	d1d6      	bne.n	800b78e <_vfiprintf_r+0x19a>
 800b7e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7e2:	07d9      	lsls	r1, r3, #31
 800b7e4:	d405      	bmi.n	800b7f2 <_vfiprintf_r+0x1fe>
 800b7e6:	89ab      	ldrh	r3, [r5, #12]
 800b7e8:	059a      	lsls	r2, r3, #22
 800b7ea:	d402      	bmi.n	800b7f2 <_vfiprintf_r+0x1fe>
 800b7ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7ee:	f7fc fe19 	bl	8008424 <__retarget_lock_release_recursive>
 800b7f2:	89ab      	ldrh	r3, [r5, #12]
 800b7f4:	065b      	lsls	r3, r3, #25
 800b7f6:	f53f af1f 	bmi.w	800b638 <_vfiprintf_r+0x44>
 800b7fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7fc:	e71e      	b.n	800b63c <_vfiprintf_r+0x48>
 800b7fe:	ab03      	add	r3, sp, #12
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	462a      	mov	r2, r5
 800b804:	4b05      	ldr	r3, [pc, #20]	@ (800b81c <_vfiprintf_r+0x228>)
 800b806:	a904      	add	r1, sp, #16
 800b808:	4630      	mov	r0, r6
 800b80a:	f7fc f903 	bl	8007a14 <_printf_i>
 800b80e:	e7e4      	b.n	800b7da <_vfiprintf_r+0x1e6>
 800b810:	0800c1f5 	.word	0x0800c1f5
 800b814:	0800c1ff 	.word	0x0800c1ff
 800b818:	080074e5 	.word	0x080074e5
 800b81c:	0800b5d1 	.word	0x0800b5d1
 800b820:	0800c1fb 	.word	0x0800c1fb

0800b824 <__swbuf_r>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	460e      	mov	r6, r1
 800b828:	4614      	mov	r4, r2
 800b82a:	4605      	mov	r5, r0
 800b82c:	b118      	cbz	r0, 800b836 <__swbuf_r+0x12>
 800b82e:	6a03      	ldr	r3, [r0, #32]
 800b830:	b90b      	cbnz	r3, 800b836 <__swbuf_r+0x12>
 800b832:	f7fc fca7 	bl	8008184 <__sinit>
 800b836:	69a3      	ldr	r3, [r4, #24]
 800b838:	60a3      	str	r3, [r4, #8]
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	071a      	lsls	r2, r3, #28
 800b83e:	d501      	bpl.n	800b844 <__swbuf_r+0x20>
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	b943      	cbnz	r3, 800b856 <__swbuf_r+0x32>
 800b844:	4621      	mov	r1, r4
 800b846:	4628      	mov	r0, r5
 800b848:	f000 f82a 	bl	800b8a0 <__swsetup_r>
 800b84c:	b118      	cbz	r0, 800b856 <__swbuf_r+0x32>
 800b84e:	f04f 37ff 	mov.w	r7, #4294967295
 800b852:	4638      	mov	r0, r7
 800b854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	6922      	ldr	r2, [r4, #16]
 800b85a:	1a98      	subs	r0, r3, r2
 800b85c:	6963      	ldr	r3, [r4, #20]
 800b85e:	b2f6      	uxtb	r6, r6
 800b860:	4283      	cmp	r3, r0
 800b862:	4637      	mov	r7, r6
 800b864:	dc05      	bgt.n	800b872 <__swbuf_r+0x4e>
 800b866:	4621      	mov	r1, r4
 800b868:	4628      	mov	r0, r5
 800b86a:	f7ff fa53 	bl	800ad14 <_fflush_r>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d1ed      	bne.n	800b84e <__swbuf_r+0x2a>
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	3b01      	subs	r3, #1
 800b876:	60a3      	str	r3, [r4, #8]
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	6022      	str	r2, [r4, #0]
 800b87e:	701e      	strb	r6, [r3, #0]
 800b880:	6962      	ldr	r2, [r4, #20]
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	429a      	cmp	r2, r3
 800b886:	d004      	beq.n	800b892 <__swbuf_r+0x6e>
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	07db      	lsls	r3, r3, #31
 800b88c:	d5e1      	bpl.n	800b852 <__swbuf_r+0x2e>
 800b88e:	2e0a      	cmp	r6, #10
 800b890:	d1df      	bne.n	800b852 <__swbuf_r+0x2e>
 800b892:	4621      	mov	r1, r4
 800b894:	4628      	mov	r0, r5
 800b896:	f7ff fa3d 	bl	800ad14 <_fflush_r>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d0d9      	beq.n	800b852 <__swbuf_r+0x2e>
 800b89e:	e7d6      	b.n	800b84e <__swbuf_r+0x2a>

0800b8a0 <__swsetup_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4b29      	ldr	r3, [pc, #164]	@ (800b948 <__swsetup_r+0xa8>)
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	6818      	ldr	r0, [r3, #0]
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	b118      	cbz	r0, 800b8b4 <__swsetup_r+0x14>
 800b8ac:	6a03      	ldr	r3, [r0, #32]
 800b8ae:	b90b      	cbnz	r3, 800b8b4 <__swsetup_r+0x14>
 800b8b0:	f7fc fc68 	bl	8008184 <__sinit>
 800b8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b8:	0719      	lsls	r1, r3, #28
 800b8ba:	d422      	bmi.n	800b902 <__swsetup_r+0x62>
 800b8bc:	06da      	lsls	r2, r3, #27
 800b8be:	d407      	bmi.n	800b8d0 <__swsetup_r+0x30>
 800b8c0:	2209      	movs	r2, #9
 800b8c2:	602a      	str	r2, [r5, #0]
 800b8c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	e033      	b.n	800b938 <__swsetup_r+0x98>
 800b8d0:	0758      	lsls	r0, r3, #29
 800b8d2:	d512      	bpl.n	800b8fa <__swsetup_r+0x5a>
 800b8d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8d6:	b141      	cbz	r1, 800b8ea <__swsetup_r+0x4a>
 800b8d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8dc:	4299      	cmp	r1, r3
 800b8de:	d002      	beq.n	800b8e6 <__swsetup_r+0x46>
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f7fd fc0d 	bl	8009100 <_free_r>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6063      	str	r3, [r4, #4]
 800b8f6:	6923      	ldr	r3, [r4, #16]
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	f043 0308 	orr.w	r3, r3, #8
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	6923      	ldr	r3, [r4, #16]
 800b904:	b94b      	cbnz	r3, 800b91a <__swsetup_r+0x7a>
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b90c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b910:	d003      	beq.n	800b91a <__swsetup_r+0x7a>
 800b912:	4621      	mov	r1, r4
 800b914:	4628      	mov	r0, r5
 800b916:	f000 f883 	bl	800ba20 <__smakebuf_r>
 800b91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91e:	f013 0201 	ands.w	r2, r3, #1
 800b922:	d00a      	beq.n	800b93a <__swsetup_r+0x9a>
 800b924:	2200      	movs	r2, #0
 800b926:	60a2      	str	r2, [r4, #8]
 800b928:	6962      	ldr	r2, [r4, #20]
 800b92a:	4252      	negs	r2, r2
 800b92c:	61a2      	str	r2, [r4, #24]
 800b92e:	6922      	ldr	r2, [r4, #16]
 800b930:	b942      	cbnz	r2, 800b944 <__swsetup_r+0xa4>
 800b932:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b936:	d1c5      	bne.n	800b8c4 <__swsetup_r+0x24>
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	0799      	lsls	r1, r3, #30
 800b93c:	bf58      	it	pl
 800b93e:	6962      	ldrpl	r2, [r4, #20]
 800b940:	60a2      	str	r2, [r4, #8]
 800b942:	e7f4      	b.n	800b92e <__swsetup_r+0x8e>
 800b944:	2000      	movs	r0, #0
 800b946:	e7f7      	b.n	800b938 <__swsetup_r+0x98>
 800b948:	20000bfc 	.word	0x20000bfc

0800b94c <_raise_r>:
 800b94c:	291f      	cmp	r1, #31
 800b94e:	b538      	push	{r3, r4, r5, lr}
 800b950:	4605      	mov	r5, r0
 800b952:	460c      	mov	r4, r1
 800b954:	d904      	bls.n	800b960 <_raise_r+0x14>
 800b956:	2316      	movs	r3, #22
 800b958:	6003      	str	r3, [r0, #0]
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b962:	b112      	cbz	r2, 800b96a <_raise_r+0x1e>
 800b964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b968:	b94b      	cbnz	r3, 800b97e <_raise_r+0x32>
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 f830 	bl	800b9d0 <_getpid_r>
 800b970:	4622      	mov	r2, r4
 800b972:	4601      	mov	r1, r0
 800b974:	4628      	mov	r0, r5
 800b976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b97a:	f000 b817 	b.w	800b9ac <_kill_r>
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d00a      	beq.n	800b998 <_raise_r+0x4c>
 800b982:	1c59      	adds	r1, r3, #1
 800b984:	d103      	bne.n	800b98e <_raise_r+0x42>
 800b986:	2316      	movs	r3, #22
 800b988:	6003      	str	r3, [r0, #0]
 800b98a:	2001      	movs	r0, #1
 800b98c:	e7e7      	b.n	800b95e <_raise_r+0x12>
 800b98e:	2100      	movs	r1, #0
 800b990:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b994:	4620      	mov	r0, r4
 800b996:	4798      	blx	r3
 800b998:	2000      	movs	r0, #0
 800b99a:	e7e0      	b.n	800b95e <_raise_r+0x12>

0800b99c <raise>:
 800b99c:	4b02      	ldr	r3, [pc, #8]	@ (800b9a8 <raise+0xc>)
 800b99e:	4601      	mov	r1, r0
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f7ff bfd3 	b.w	800b94c <_raise_r>
 800b9a6:	bf00      	nop
 800b9a8:	20000bfc 	.word	0x20000bfc

0800b9ac <_kill_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4d07      	ldr	r5, [pc, #28]	@ (800b9cc <_kill_r+0x20>)
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4608      	mov	r0, r1
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	f7f6 fc91 	bl	80022e0 <_kill>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	d102      	bne.n	800b9c8 <_kill_r+0x1c>
 800b9c2:	682b      	ldr	r3, [r5, #0]
 800b9c4:	b103      	cbz	r3, 800b9c8 <_kill_r+0x1c>
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	200022f0 	.word	0x200022f0

0800b9d0 <_getpid_r>:
 800b9d0:	f7f6 bc7e 	b.w	80022d0 <_getpid>

0800b9d4 <__swhatbuf_r>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	b096      	sub	sp, #88	@ 0x58
 800b9e0:	4615      	mov	r5, r2
 800b9e2:	461e      	mov	r6, r3
 800b9e4:	da0d      	bge.n	800ba02 <__swhatbuf_r+0x2e>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9ec:	f04f 0100 	mov.w	r1, #0
 800b9f0:	bf14      	ite	ne
 800b9f2:	2340      	movne	r3, #64	@ 0x40
 800b9f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	6031      	str	r1, [r6, #0]
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	b016      	add	sp, #88	@ 0x58
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	466a      	mov	r2, sp
 800ba04:	f000 f848 	bl	800ba98 <_fstat_r>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	dbec      	blt.n	800b9e6 <__swhatbuf_r+0x12>
 800ba0c:	9901      	ldr	r1, [sp, #4]
 800ba0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba16:	4259      	negs	r1, r3
 800ba18:	4159      	adcs	r1, r3
 800ba1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba1e:	e7eb      	b.n	800b9f8 <__swhatbuf_r+0x24>

0800ba20 <__smakebuf_r>:
 800ba20:	898b      	ldrh	r3, [r1, #12]
 800ba22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba24:	079d      	lsls	r5, r3, #30
 800ba26:	4606      	mov	r6, r0
 800ba28:	460c      	mov	r4, r1
 800ba2a:	d507      	bpl.n	800ba3c <__smakebuf_r+0x1c>
 800ba2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	2301      	movs	r3, #1
 800ba36:	6163      	str	r3, [r4, #20]
 800ba38:	b003      	add	sp, #12
 800ba3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba3c:	ab01      	add	r3, sp, #4
 800ba3e:	466a      	mov	r2, sp
 800ba40:	f7ff ffc8 	bl	800b9d4 <__swhatbuf_r>
 800ba44:	9f00      	ldr	r7, [sp, #0]
 800ba46:	4605      	mov	r5, r0
 800ba48:	4639      	mov	r1, r7
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7fd fbcc 	bl	80091e8 <_malloc_r>
 800ba50:	b948      	cbnz	r0, 800ba66 <__smakebuf_r+0x46>
 800ba52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba56:	059a      	lsls	r2, r3, #22
 800ba58:	d4ee      	bmi.n	800ba38 <__smakebuf_r+0x18>
 800ba5a:	f023 0303 	bic.w	r3, r3, #3
 800ba5e:	f043 0302 	orr.w	r3, r3, #2
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	e7e2      	b.n	800ba2c <__smakebuf_r+0xc>
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	6020      	str	r0, [r4, #0]
 800ba6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba6e:	81a3      	strh	r3, [r4, #12]
 800ba70:	9b01      	ldr	r3, [sp, #4]
 800ba72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba76:	b15b      	cbz	r3, 800ba90 <__smakebuf_r+0x70>
 800ba78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f000 f81d 	bl	800babc <_isatty_r>
 800ba82:	b128      	cbz	r0, 800ba90 <__smakebuf_r+0x70>
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	f043 0301 	orr.w	r3, r3, #1
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	431d      	orrs	r5, r3
 800ba94:	81a5      	strh	r5, [r4, #12]
 800ba96:	e7cf      	b.n	800ba38 <__smakebuf_r+0x18>

0800ba98 <_fstat_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d07      	ldr	r5, [pc, #28]	@ (800bab8 <_fstat_r+0x20>)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	602b      	str	r3, [r5, #0]
 800baa6:	f7f6 fc7b 	bl	80023a0 <_fstat>
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	d102      	bne.n	800bab4 <_fstat_r+0x1c>
 800baae:	682b      	ldr	r3, [r5, #0]
 800bab0:	b103      	cbz	r3, 800bab4 <_fstat_r+0x1c>
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	bd38      	pop	{r3, r4, r5, pc}
 800bab6:	bf00      	nop
 800bab8:	200022f0 	.word	0x200022f0

0800babc <_isatty_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d06      	ldr	r5, [pc, #24]	@ (800bad8 <_isatty_r+0x1c>)
 800bac0:	2300      	movs	r3, #0
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f6 fc7a 	bl	80023c0 <_isatty>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_isatty_r+0x1a>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_isatty_r+0x1a>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	200022f0 	.word	0x200022f0
 800badc:	00000000 	.word	0x00000000

0800bae0 <log10>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	ed2d 8b02 	vpush	{d8}
 800bae6:	ec55 4b10 	vmov	r4, r5, d0
 800baea:	f000 f839 	bl	800bb60 <__ieee754_log10>
 800baee:	4622      	mov	r2, r4
 800baf0:	462b      	mov	r3, r5
 800baf2:	4620      	mov	r0, r4
 800baf4:	4629      	mov	r1, r5
 800baf6:	eeb0 8a40 	vmov.f32	s16, s0
 800bafa:	eef0 8a60 	vmov.f32	s17, s1
 800bafe:	f7f5 f815 	bl	8000b2c <__aeabi_dcmpun>
 800bb02:	b998      	cbnz	r0, 800bb2c <log10+0x4c>
 800bb04:	2200      	movs	r2, #0
 800bb06:	2300      	movs	r3, #0
 800bb08:	4620      	mov	r0, r4
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	f7f4 fff0 	bl	8000af0 <__aeabi_dcmple>
 800bb10:	b160      	cbz	r0, 800bb2c <log10+0x4c>
 800bb12:	2200      	movs	r2, #0
 800bb14:	2300      	movs	r3, #0
 800bb16:	4620      	mov	r0, r4
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7f4 ffd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb1e:	b160      	cbz	r0, 800bb3a <log10+0x5a>
 800bb20:	f7fc fc54 	bl	80083cc <__errno>
 800bb24:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800bb50 <log10+0x70>
 800bb28:	2322      	movs	r3, #34	@ 0x22
 800bb2a:	6003      	str	r3, [r0, #0]
 800bb2c:	eeb0 0a48 	vmov.f32	s0, s16
 800bb30:	eef0 0a68 	vmov.f32	s1, s17
 800bb34:	ecbd 8b02 	vpop	{d8}
 800bb38:	bd38      	pop	{r3, r4, r5, pc}
 800bb3a:	f7fc fc47 	bl	80083cc <__errno>
 800bb3e:	ecbd 8b02 	vpop	{d8}
 800bb42:	2321      	movs	r3, #33	@ 0x21
 800bb44:	6003      	str	r3, [r0, #0]
 800bb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb4a:	4803      	ldr	r0, [pc, #12]	@ (800bb58 <log10+0x78>)
 800bb4c:	f7ff b948 	b.w	800ade0 <nan>
 800bb50:	00000000 	.word	0x00000000
 800bb54:	fff00000 	.word	0xfff00000
 800bb58:	0800c249 	.word	0x0800c249
 800bb5c:	00000000 	.word	0x00000000

0800bb60 <__ieee754_log10>:
 800bb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb64:	ec55 4b10 	vmov	r4, r5, d0
 800bb68:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800bb6c:	ed2d 8b02 	vpush	{d8}
 800bb70:	462b      	mov	r3, r5
 800bb72:	da2e      	bge.n	800bbd2 <__ieee754_log10+0x72>
 800bb74:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bb78:	4322      	orrs	r2, r4
 800bb7a:	d10b      	bne.n	800bb94 <__ieee754_log10+0x34>
 800bb7c:	493a      	ldr	r1, [pc, #232]	@ (800bc68 <__ieee754_log10+0x108>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2300      	movs	r3, #0
 800bb82:	2000      	movs	r0, #0
 800bb84:	f7f4 fe62 	bl	800084c <__aeabi_ddiv>
 800bb88:	ecbd 8b02 	vpop	{d8}
 800bb8c:	ec41 0b10 	vmov	d0, r0, r1
 800bb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb94:	2d00      	cmp	r5, #0
 800bb96:	da07      	bge.n	800bba8 <__ieee754_log10+0x48>
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	f7f4 fb73 	bl	8000288 <__aeabi_dsub>
 800bba2:	2200      	movs	r2, #0
 800bba4:	2300      	movs	r3, #0
 800bba6:	e7ed      	b.n	800bb84 <__ieee754_log10+0x24>
 800bba8:	4b30      	ldr	r3, [pc, #192]	@ (800bc6c <__ieee754_log10+0x10c>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f7f4 fd22 	bl	80005f8 <__aeabi_dmul>
 800bbb4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800bbb8:	4604      	mov	r4, r0
 800bbba:	460d      	mov	r5, r1
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	492c      	ldr	r1, [pc, #176]	@ (800bc70 <__ieee754_log10+0x110>)
 800bbc0:	428b      	cmp	r3, r1
 800bbc2:	dd08      	ble.n	800bbd6 <__ieee754_log10+0x76>
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	4620      	mov	r0, r4
 800bbca:	4629      	mov	r1, r5
 800bbcc:	f7f4 fb5e 	bl	800028c <__adddf3>
 800bbd0:	e7da      	b.n	800bb88 <__ieee754_log10+0x28>
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	e7f3      	b.n	800bbbe <__ieee754_log10+0x5e>
 800bbd6:	1518      	asrs	r0, r3, #20
 800bbd8:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800bbdc:	4410      	add	r0, r2
 800bbde:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800bbe2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800bbe6:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800bbea:	f7f4 fc9b 	bl	8000524 <__aeabi_i2d>
 800bbee:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800bbf2:	3303      	adds	r3, #3
 800bbf4:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800bbf8:	a315      	add	r3, pc, #84	@ (adr r3, 800bc50 <__ieee754_log10+0xf0>)
 800bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfe:	ec45 4b18 	vmov	d8, r4, r5
 800bc02:	4606      	mov	r6, r0
 800bc04:	460f      	mov	r7, r1
 800bc06:	f7f4 fcf7 	bl	80005f8 <__aeabi_dmul>
 800bc0a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc0e:	eef0 0a68 	vmov.f32	s1, s17
 800bc12:	4604      	mov	r4, r0
 800bc14:	460d      	mov	r5, r1
 800bc16:	f000 f82f 	bl	800bc78 <__ieee754_log>
 800bc1a:	a30f      	add	r3, pc, #60	@ (adr r3, 800bc58 <__ieee754_log10+0xf8>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	ec51 0b10 	vmov	r0, r1, d0
 800bc24:	f7f4 fce8 	bl	80005f8 <__aeabi_dmul>
 800bc28:	4622      	mov	r2, r4
 800bc2a:	462b      	mov	r3, r5
 800bc2c:	f7f4 fb2e 	bl	800028c <__adddf3>
 800bc30:	a30b      	add	r3, pc, #44	@ (adr r3, 800bc60 <__ieee754_log10+0x100>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	4604      	mov	r4, r0
 800bc38:	460d      	mov	r5, r1
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 fcdb 	bl	80005f8 <__aeabi_dmul>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4620      	mov	r0, r4
 800bc48:	4629      	mov	r1, r5
 800bc4a:	e7bf      	b.n	800bbcc <__ieee754_log10+0x6c>
 800bc4c:	f3af 8000 	nop.w
 800bc50:	11f12b36 	.word	0x11f12b36
 800bc54:	3d59fef3 	.word	0x3d59fef3
 800bc58:	1526e50e 	.word	0x1526e50e
 800bc5c:	3fdbcb7b 	.word	0x3fdbcb7b
 800bc60:	509f6000 	.word	0x509f6000
 800bc64:	3fd34413 	.word	0x3fd34413
 800bc68:	c3500000 	.word	0xc3500000
 800bc6c:	43500000 	.word	0x43500000
 800bc70:	7fefffff 	.word	0x7fefffff
 800bc74:	00000000 	.word	0x00000000

0800bc78 <__ieee754_log>:
 800bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	ec51 0b10 	vmov	r0, r1, d0
 800bc80:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800bc84:	b087      	sub	sp, #28
 800bc86:	460d      	mov	r5, r1
 800bc88:	da26      	bge.n	800bcd8 <__ieee754_log+0x60>
 800bc8a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bc8e:	4303      	orrs	r3, r0
 800bc90:	4602      	mov	r2, r0
 800bc92:	d10a      	bne.n	800bcaa <__ieee754_log+0x32>
 800bc94:	49ce      	ldr	r1, [pc, #824]	@ (800bfd0 <__ieee754_log+0x358>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	2300      	movs	r3, #0
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f7f4 fdd6 	bl	800084c <__aeabi_ddiv>
 800bca0:	ec41 0b10 	vmov	d0, r0, r1
 800bca4:	b007      	add	sp, #28
 800bca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcaa:	2900      	cmp	r1, #0
 800bcac:	da05      	bge.n	800bcba <__ieee754_log+0x42>
 800bcae:	460b      	mov	r3, r1
 800bcb0:	f7f4 faea 	bl	8000288 <__aeabi_dsub>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e7f0      	b.n	800bc9c <__ieee754_log+0x24>
 800bcba:	4bc6      	ldr	r3, [pc, #792]	@ (800bfd4 <__ieee754_log+0x35c>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f7f4 fc9b 	bl	80005f8 <__aeabi_dmul>
 800bcc2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	4ac3      	ldr	r2, [pc, #780]	@ (800bfd8 <__ieee754_log+0x360>)
 800bcca:	4295      	cmp	r5, r2
 800bccc:	dd06      	ble.n	800bcdc <__ieee754_log+0x64>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	f7f4 fadb 	bl	800028c <__adddf3>
 800bcd6:	e7e3      	b.n	800bca0 <__ieee754_log+0x28>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e7f5      	b.n	800bcc8 <__ieee754_log+0x50>
 800bcdc:	152c      	asrs	r4, r5, #20
 800bcde:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800bce2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bce6:	441c      	add	r4, r3
 800bce8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800bcec:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800bcf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bcf4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800bcf8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800bcfc:	ea42 0105 	orr.w	r1, r2, r5
 800bd00:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800bd04:	2200      	movs	r2, #0
 800bd06:	4bb5      	ldr	r3, [pc, #724]	@ (800bfdc <__ieee754_log+0x364>)
 800bd08:	f7f4 fabe 	bl	8000288 <__aeabi_dsub>
 800bd0c:	1cab      	adds	r3, r5, #2
 800bd0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	4682      	mov	sl, r0
 800bd16:	468b      	mov	fp, r1
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	dc53      	bgt.n	800bdc6 <__ieee754_log+0x14e>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f7f4 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd24:	b1d0      	cbz	r0, 800bd5c <__ieee754_log+0xe4>
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	f000 8120 	beq.w	800bf6c <__ieee754_log+0x2f4>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f7f4 fbf9 	bl	8000524 <__aeabi_i2d>
 800bd32:	a391      	add	r3, pc, #580	@ (adr r3, 800bf78 <__ieee754_log+0x300>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	4606      	mov	r6, r0
 800bd3a:	460f      	mov	r7, r1
 800bd3c:	f7f4 fc5c 	bl	80005f8 <__aeabi_dmul>
 800bd40:	a38f      	add	r3, pc, #572	@ (adr r3, 800bf80 <__ieee754_log+0x308>)
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	4604      	mov	r4, r0
 800bd48:	460d      	mov	r5, r1
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f7f4 fc53 	bl	80005f8 <__aeabi_dmul>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4620      	mov	r0, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	e7ba      	b.n	800bcd2 <__ieee754_log+0x5a>
 800bd5c:	a38a      	add	r3, pc, #552	@ (adr r3, 800bf88 <__ieee754_log+0x310>)
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	4650      	mov	r0, sl
 800bd64:	4659      	mov	r1, fp
 800bd66:	f7f4 fc47 	bl	80005f8 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	2000      	movs	r0, #0
 800bd70:	499b      	ldr	r1, [pc, #620]	@ (800bfe0 <__ieee754_log+0x368>)
 800bd72:	f7f4 fa89 	bl	8000288 <__aeabi_dsub>
 800bd76:	4652      	mov	r2, sl
 800bd78:	4606      	mov	r6, r0
 800bd7a:	460f      	mov	r7, r1
 800bd7c:	465b      	mov	r3, fp
 800bd7e:	4650      	mov	r0, sl
 800bd80:	4659      	mov	r1, fp
 800bd82:	f7f4 fc39 	bl	80005f8 <__aeabi_dmul>
 800bd86:	4602      	mov	r2, r0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	4606      	mov	r6, r0
 800bd94:	460f      	mov	r7, r1
 800bd96:	b914      	cbnz	r4, 800bd9e <__ieee754_log+0x126>
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	e0a0      	b.n	800bee0 <__ieee754_log+0x268>
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f7f4 fbc0 	bl	8000524 <__aeabi_i2d>
 800bda4:	a374      	add	r3, pc, #464	@ (adr r3, 800bf78 <__ieee754_log+0x300>)
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	4680      	mov	r8, r0
 800bdac:	4689      	mov	r9, r1
 800bdae:	f7f4 fc23 	bl	80005f8 <__aeabi_dmul>
 800bdb2:	a373      	add	r3, pc, #460	@ (adr r3, 800bf80 <__ieee754_log+0x308>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	4604      	mov	r4, r0
 800bdba:	460d      	mov	r5, r1
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	f7f4 fc1a 	bl	80005f8 <__aeabi_dmul>
 800bdc4:	e0a5      	b.n	800bf12 <__ieee754_log+0x29a>
 800bdc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bdca:	f7f4 fa5f 	bl	800028c <__adddf3>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	4659      	mov	r1, fp
 800bdd6:	f7f4 fd39 	bl	800084c <__aeabi_ddiv>
 800bdda:	e9cd 0100 	strd	r0, r1, [sp]
 800bdde:	4620      	mov	r0, r4
 800bde0:	f7f4 fba0 	bl	8000524 <__aeabi_i2d>
 800bde4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bde8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdec:	4610      	mov	r0, r2
 800bdee:	4619      	mov	r1, r3
 800bdf0:	f7f4 fc02 	bl	80005f8 <__aeabi_dmul>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	a363      	add	r3, pc, #396	@ (adr r3, 800bf90 <__ieee754_log+0x318>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	4680      	mov	r8, r0
 800be08:	4689      	mov	r9, r1
 800be0a:	f7f4 fbf5 	bl	80005f8 <__aeabi_dmul>
 800be0e:	a362      	add	r3, pc, #392	@ (adr r3, 800bf98 <__ieee754_log+0x320>)
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f7f4 fa3a 	bl	800028c <__adddf3>
 800be18:	4642      	mov	r2, r8
 800be1a:	464b      	mov	r3, r9
 800be1c:	f7f4 fbec 	bl	80005f8 <__aeabi_dmul>
 800be20:	a35f      	add	r3, pc, #380	@ (adr r3, 800bfa0 <__ieee754_log+0x328>)
 800be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be26:	f7f4 fa31 	bl	800028c <__adddf3>
 800be2a:	4642      	mov	r2, r8
 800be2c:	464b      	mov	r3, r9
 800be2e:	f7f4 fbe3 	bl	80005f8 <__aeabi_dmul>
 800be32:	a35d      	add	r3, pc, #372	@ (adr r3, 800bfa8 <__ieee754_log+0x330>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f7f4 fa28 	bl	800028c <__adddf3>
 800be3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be40:	f7f4 fbda 	bl	80005f8 <__aeabi_dmul>
 800be44:	a35a      	add	r3, pc, #360	@ (adr r3, 800bfb0 <__ieee754_log+0x338>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be4e:	4640      	mov	r0, r8
 800be50:	4649      	mov	r1, r9
 800be52:	f7f4 fbd1 	bl	80005f8 <__aeabi_dmul>
 800be56:	a358      	add	r3, pc, #352	@ (adr r3, 800bfb8 <__ieee754_log+0x340>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f7f4 fa16 	bl	800028c <__adddf3>
 800be60:	4642      	mov	r2, r8
 800be62:	464b      	mov	r3, r9
 800be64:	f7f4 fbc8 	bl	80005f8 <__aeabi_dmul>
 800be68:	a355      	add	r3, pc, #340	@ (adr r3, 800bfc0 <__ieee754_log+0x348>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f7f4 fa0d 	bl	800028c <__adddf3>
 800be72:	4642      	mov	r2, r8
 800be74:	464b      	mov	r3, r9
 800be76:	f7f4 fbbf 	bl	80005f8 <__aeabi_dmul>
 800be7a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800be86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be8a:	f7f4 f9ff 	bl	800028c <__adddf3>
 800be8e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800be92:	3551      	adds	r5, #81	@ 0x51
 800be94:	4335      	orrs	r5, r6
 800be96:	2d00      	cmp	r5, #0
 800be98:	4680      	mov	r8, r0
 800be9a:	4689      	mov	r9, r1
 800be9c:	dd48      	ble.n	800bf30 <__ieee754_log+0x2b8>
 800be9e:	4b50      	ldr	r3, [pc, #320]	@ (800bfe0 <__ieee754_log+0x368>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	4650      	mov	r0, sl
 800bea4:	4659      	mov	r1, fp
 800bea6:	f7f4 fba7 	bl	80005f8 <__aeabi_dmul>
 800beaa:	4652      	mov	r2, sl
 800beac:	465b      	mov	r3, fp
 800beae:	f7f4 fba3 	bl	80005f8 <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4606      	mov	r6, r0
 800beb8:	460f      	mov	r7, r1
 800beba:	4640      	mov	r0, r8
 800bebc:	4649      	mov	r1, r9
 800bebe:	f7f4 f9e5 	bl	800028c <__adddf3>
 800bec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bec6:	f7f4 fb97 	bl	80005f8 <__aeabi_dmul>
 800beca:	4680      	mov	r8, r0
 800becc:	4689      	mov	r9, r1
 800bece:	b964      	cbnz	r4, 800beea <__ieee754_log+0x272>
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4630      	mov	r0, r6
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 f9d6 	bl	8000288 <__aeabi_dsub>
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	4650      	mov	r0, sl
 800bee2:	4659      	mov	r1, fp
 800bee4:	f7f4 f9d0 	bl	8000288 <__aeabi_dsub>
 800bee8:	e6da      	b.n	800bca0 <__ieee754_log+0x28>
 800beea:	a323      	add	r3, pc, #140	@ (adr r3, 800bf78 <__ieee754_log+0x300>)
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bef4:	f7f4 fb80 	bl	80005f8 <__aeabi_dmul>
 800bef8:	a321      	add	r3, pc, #132	@ (adr r3, 800bf80 <__ieee754_log+0x308>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf06:	f7f4 fb77 	bl	80005f8 <__aeabi_dmul>
 800bf0a:	4642      	mov	r2, r8
 800bf0c:	464b      	mov	r3, r9
 800bf0e:	f7f4 f9bd 	bl	800028c <__adddf3>
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	4630      	mov	r0, r6
 800bf18:	4639      	mov	r1, r7
 800bf1a:	f7f4 f9b5 	bl	8000288 <__aeabi_dsub>
 800bf1e:	4652      	mov	r2, sl
 800bf20:	465b      	mov	r3, fp
 800bf22:	f7f4 f9b1 	bl	8000288 <__aeabi_dsub>
 800bf26:	4602      	mov	r2, r0
 800bf28:	460b      	mov	r3, r1
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	e7d9      	b.n	800bee4 <__ieee754_log+0x26c>
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	4650      	mov	r0, sl
 800bf36:	4659      	mov	r1, fp
 800bf38:	f7f4 f9a6 	bl	8000288 <__aeabi_dsub>
 800bf3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf40:	f7f4 fb5a 	bl	80005f8 <__aeabi_dmul>
 800bf44:	4606      	mov	r6, r0
 800bf46:	460f      	mov	r7, r1
 800bf48:	2c00      	cmp	r4, #0
 800bf4a:	f43f af25 	beq.w	800bd98 <__ieee754_log+0x120>
 800bf4e:	a30a      	add	r3, pc, #40	@ (adr r3, 800bf78 <__ieee754_log+0x300>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf58:	f7f4 fb4e 	bl	80005f8 <__aeabi_dmul>
 800bf5c:	a308      	add	r3, pc, #32	@ (adr r3, 800bf80 <__ieee754_log+0x308>)
 800bf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf62:	4604      	mov	r4, r0
 800bf64:	460d      	mov	r5, r1
 800bf66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf6a:	e729      	b.n	800bdc0 <__ieee754_log+0x148>
 800bf6c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800bfc8 <__ieee754_log+0x350>
 800bf70:	e698      	b.n	800bca4 <__ieee754_log+0x2c>
 800bf72:	bf00      	nop
 800bf74:	f3af 8000 	nop.w
 800bf78:	fee00000 	.word	0xfee00000
 800bf7c:	3fe62e42 	.word	0x3fe62e42
 800bf80:	35793c76 	.word	0x35793c76
 800bf84:	3dea39ef 	.word	0x3dea39ef
 800bf88:	55555555 	.word	0x55555555
 800bf8c:	3fd55555 	.word	0x3fd55555
 800bf90:	df3e5244 	.word	0xdf3e5244
 800bf94:	3fc2f112 	.word	0x3fc2f112
 800bf98:	96cb03de 	.word	0x96cb03de
 800bf9c:	3fc74664 	.word	0x3fc74664
 800bfa0:	94229359 	.word	0x94229359
 800bfa4:	3fd24924 	.word	0x3fd24924
 800bfa8:	55555593 	.word	0x55555593
 800bfac:	3fe55555 	.word	0x3fe55555
 800bfb0:	d078c69f 	.word	0xd078c69f
 800bfb4:	3fc39a09 	.word	0x3fc39a09
 800bfb8:	1d8e78af 	.word	0x1d8e78af
 800bfbc:	3fcc71c5 	.word	0x3fcc71c5
 800bfc0:	9997fa04 	.word	0x9997fa04
 800bfc4:	3fd99999 	.word	0x3fd99999
	...
 800bfd0:	c3500000 	.word	0xc3500000
 800bfd4:	43500000 	.word	0x43500000
 800bfd8:	7fefffff 	.word	0x7fefffff
 800bfdc:	3ff00000 	.word	0x3ff00000
 800bfe0:	3fe00000 	.word	0x3fe00000

0800bfe4 <_init>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	bf00      	nop
 800bfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfea:	bc08      	pop	{r3}
 800bfec:	469e      	mov	lr, r3
 800bfee:	4770      	bx	lr

0800bff0 <_fini>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	bf00      	nop
 800bff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bff6:	bc08      	pop	{r3}
 800bff8:	469e      	mov	lr, r3
 800bffa:	4770      	bx	lr
