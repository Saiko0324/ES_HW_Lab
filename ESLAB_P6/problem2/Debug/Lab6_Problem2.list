
Lab6_Problem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a564  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800a6f4  0800a6f4  0000b6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a858  0800a858  0000c06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a858  0800a858  0000b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a860  0800a860  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a860  0800a860  0000b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a864  0800a864  0000b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a868  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  2000006c  0800a8d4  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b90  0800a8d4  0000cb90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027104  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f43  00000000  00000000  000331a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002600  00000000  00000000  000380e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001da4  00000000  00000000  0003a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e0a6  00000000  00000000  0003c48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b072  00000000  00000000  0006a532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c609  00000000  00000000  000955a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b1bad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acb0  00000000  00000000  001b1bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001bc8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6dc 	.word	0x0800a6dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a6dc 	.word	0x0800a6dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	200000dc 	.word	0x200000dc

080005d0 <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <__NVIC_SetVector+0x34>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	3310      	adds	r3, #16
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
      HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000610:	1d39      	adds	r1, r7, #4
 8000612:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000616:	2201      	movs	r2, #1
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <__io_putchar+0x20>)
 800061a:	f005 fe23 	bl	8006264 <HAL_UART_Transmit>
      return ch;
 800061e:	687b      	ldr	r3, [r7, #4]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000410 	.word	0x20000410

0800062c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <HAL_ADC_MspInit+0x38>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d10b      	bne.n	8000656 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_ADC_MspInit+0x3c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <HAL_ADC_MspInit+0x3c>)
 8000644:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <HAL_ADC_MspInit+0x3c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
    }

}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	50040000 	.word	0x50040000
 8000668:	40021000 	.word	0x40021000

0800066c <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <ADC1_Init+0xf8>)
 8000690:	4a35      	ldr	r2, [pc, #212]	@ (8000768 <ADC1_Init+0xfc>)
 8000692:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000694:	4b33      	ldr	r3, [pc, #204]	@ (8000764 <ADC1_Init+0xf8>)
 8000696:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800069a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069c:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <ADC1_Init+0xf8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a2:	4b30      	ldr	r3, [pc, #192]	@ (8000764 <ADC1_Init+0xf8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <ADC1_Init+0xf8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <ADC1_Init+0xf8>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <ADC1_Init+0xf8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <ADC1_Init+0xf8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <ADC1_Init+0xf8>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c6:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <ADC1_Init+0xf8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80006ce:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <ADC1_Init+0xf8>)
 80006d0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <ADC1_Init+0xf8>)
 80006d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80006de:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <ADC1_Init+0xf8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <ADC1_Init+0xf8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <ADC1_Init+0xf8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	481b      	ldr	r0, [pc, #108]	@ (8000764 <ADC1_Init+0xf8>)
 80006f6:	f001 fc1b 	bl	8001f30 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <ADC1_Init+0x98>
    {
        Error_Handler();
 8000700:	f000 fd9a 	bl	8001238 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000704:	217f      	movs	r1, #127	@ 0x7f
 8000706:	4817      	ldr	r0, [pc, #92]	@ (8000764 <ADC1_Init+0xf8>)
 8000708:	f002 fbe6 	bl	8002ed8 <HAL_ADCEx_Calibration_Start>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <ADC1_Init+0xaa>
    {
        Error_Handler();
 8000712:	f000 fd91 	bl	8001238 <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4810      	ldr	r0, [pc, #64]	@ (8000764 <ADC1_Init+0xf8>)
 8000722:	f002 fc39 	bl	8002f98 <HAL_ADCEx_MultiModeConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <ADC1_Init+0xc4>
    {
        Error_Handler();
 800072c:	f000 fd84 	bl	8001238 <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <ADC1_Init+0x100>)
 8000732:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2306      	movs	r3, #6
 8000736:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073c:	237f      	movs	r3, #127	@ 0x7f
 800073e:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000740:	2304      	movs	r3, #4
 8000742:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <ADC1_Init+0xf8>)
 800074e:	f001 fe05 	bl	800235c <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <ADC1_Init+0xf0>
    {
        Error_Handler();
 8000758:	f000 fd6e 	bl	8001238 <Error_Handler>
    }

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	@ 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000a5c 	.word	0x20000a5c
 8000768:	50040000 	.word	0x50040000
 800076c:	c7520000 	.word	0xc7520000

08000770 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) // DMA interrupt handler function
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    // Process second half of buffer (sample_buffer[128] to [255])
    // Send a marker value to indicate bottom half start

	int i;
    osStatus status = osMessagePut(dmaQueueHandle, 0xB000, 0); // 'B' for Bottom half marker
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <HAL_ADC_ConvCpltCallback+0x58>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8000782:	4618      	mov	r0, r3
 8000784:	f006 fe30 	bl	80073e8 <osMessagePut>
 8000788:	60b8      	str	r0, [r7, #8]
    if (status != osOK) {
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <HAL_ADC_ConvCpltCallback+0x28>
        printf("Failed to put test message: %d\r\n", status);
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	480e      	ldr	r0, [pc, #56]	@ (80007cc <HAL_ADC_ConvCpltCallback+0x5c>)
 8000794:	f009 f8ca 	bl	800992c <iprintf>
    }

    for (i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; i++) {
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e00c      	b.n	80007b8 <HAL_ADC_ConvCpltCallback+0x48>
        // Put each sample into the queue
        osMessagePut(dmaQueueHandle, (uint32_t)sample_buffer[i], 0);
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <HAL_ADC_ConvCpltCallback+0x58>)
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <HAL_ADC_ConvCpltCallback+0x60>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f006 fe1b 	bl	80073e8 <osMessagePut>
    for (i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; i++) {
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2bff      	cmp	r3, #255	@ 0xff
 80007bc:	ddef      	ble.n	800079e <HAL_ADC_ConvCpltCallback+0x2e>
    }
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000a0c 	.word	0x20000a0c
 80007cc:	0800a6f4 	.word	0x0800a6f4
 80007d0:	20000b08 	.word	0x20000b08

080007d4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
//    Process first half of buffer (sample_buffer[0] to [127])
//    Send a marker value to indicate top half start

	int i;
    osStatus status = osMessagePut(dmaQueueHandle, 0xA000, 0); // 'A' for Top half marker
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fdfe 	bl	80073e8 <osMessagePut>
 80007ec:	60b8      	str	r0, [r7, #8]
	if (status != osOK) {
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <HAL_ADC_ConvHalfCpltCallback+0x28>
		printf("Failed to put test message: %d\r\n", status);
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80007f8:	f009 f898 	bl	800992c <iprintf>
	}

    for (i = 0; i < SAMPLE_BUFFER_SIZE/2; i++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	e00c      	b.n	800081c <HAL_ADC_ConvHalfCpltCallback+0x48>
        // Put each sample into the queue
        osMessagePut(dmaQueueHandle, (uint32_t)sample_buffer[i], 0);
 8000802:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000804:	6818      	ldr	r0, [r3, #0]
 8000806:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	f006 fde9 	bl	80073e8 <osMessagePut>
    for (i = 0; i < SAMPLE_BUFFER_SIZE/2; i++) {
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000820:	ddef      	ble.n	8000802 <HAL_ADC_ConvHalfCpltCallback+0x2e>
    }
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000a0c 	.word	0x20000a0c
 8000830:	0800a6f4 	.word	0x0800a6f4
 8000834:	20000b08 	.word	0x20000b08

08000838 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <DMA1_Channel1_IRQHandler+0x20>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68da      	ldr	r2, [r3, #12]
 8000842:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <DMA1_Channel1_IRQHandler+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f042 0202 	orr.w	r2, r2, #2
 800084a:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <DMA1_Channel1_IRQHandler+0x24>)
 800084e:	f002 ff89 	bl	8003764 <HAL_DMA_IRQHandler>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000a5c 	.word	0x20000a5c
 800085c:	20000ac0 	.word	0x20000ac0

08000860 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <ADC1_DMA1CH1_init+0x94>)
 8000868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800086a:	4a22      	ldr	r2, [pc, #136]	@ (80008f4 <ADC1_DMA1CH1_init+0x94>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6493      	str	r3, [r2, #72]	@ 0x48
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <ADC1_DMA1CH1_init+0x94>)
 8000874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 800087e:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 8000880:	4a1e      	ldr	r2, [pc, #120]	@ (80008fc <ADC1_DMA1CH1_init+0x9c>)
 8000882:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 8000898:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800089c:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 80008a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008a4:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 80008a8:	2220      	movs	r2, #32
 80008aa:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_LOW; // modified
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 80008b2:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 80008b4:	f002 fe3e 	bl	8003534 <HAL_DMA_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <ADC1_DMA1CH1_init+0x62>
    {
        Error_Handler();
 80008be:	f000 fcbb 	bl	8001238 <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <ADC1_DMA1CH1_init+0xa0>)
 80008c4:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 80008c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <ADC1_DMA1CH1_init+0x98>)
 80008ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <ADC1_DMA1CH1_init+0xa0>)
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 80008ce:	f7ff fecd 	bl	800066c <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <ADC1_DMA1CH1_init+0xa4>)
 80008d4:	4619      	mov	r1, r3
 80008d6:	200b      	movs	r0, #11
 80008d8:	f7ff fe7a 	bl	80005d0 <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0); // modified
 80008dc:	2200      	movs	r2, #0
 80008de:	2106      	movs	r1, #6
 80008e0:	200b      	movs	r0, #11
 80008e2:	f002 fce4 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008e6:	200b      	movs	r0, #11
 80008e8:	f002 fcfd 	bl	80032e6 <HAL_NVIC_EnableIRQ>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000
 80008f8:	20000ac0 	.word	0x20000ac0
 80008fc:	40020008 	.word	0x40020008
 8000900:	20000a5c 	.word	0x20000a5c
 8000904:	08000839 	.word	0x08000839

08000908 <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_TIM_Base_MspInit+0x38>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10b      	bne.n	8000932 <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_TIM_Base_MspInit+0x3c>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091e:	4a09      	ldr	r2, [pc, #36]	@ (8000944 <HAL_TIM_Base_MspInit+0x3c>)
 8000920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000924:	6613      	str	r3, [r2, #96]	@ 0x60
 8000926:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <HAL_TIM_Base_MspInit+0x3c>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40012c00 	.word	0x40012c00
 8000944:	40021000 	.word	0x40021000

08000948 <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <TIM1_Init+0x98>)
 8000968:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <TIM1_Init+0x9c>)
 800096a:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 999;
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <TIM1_Init+0x98>)
 800096e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000972:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <TIM1_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 999;
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <TIM1_Init+0x98>)
 800097c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000980:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <TIM1_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <TIM1_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <TIM1_Init+0x98>)
 8000990:	f005 f8c1 	bl	8005b16 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <TIM1_Init+0x56>
    {
        Error_Handler();
 800099a:	f000 fc4d 	bl	8001238 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <TIM1_Init+0x98>)
 80009ac:	f005 f97a 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <TIM1_Init+0x72>
    {
        Error_Handler();
 80009b6:	f000 fc3f 	bl	8001238 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009ba:	2320      	movs	r3, #32
 80009bc:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <TIM1_Init+0x98>)
 80009c8:	f005 fb76 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <TIM1_Init+0x8e>
    {
        Error_Handler();
 80009d2:	f000 fc31 	bl	8001238 <Error_Handler>
    }
}
 80009d6:	bf00      	nop
 80009d8:	3720      	adds	r7, #32
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000a10 	.word	0x20000a10
 80009e4:	40012c00 	.word	0x40012c00

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b092      	sub	sp, #72	@ 0x48
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f001 f80a 	bl	8001a06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f2:	f000 f86b 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f6:	f000 fa33 	bl	8000e60 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80009fa:	f000 f8c9 	bl	8000b90 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80009fe:	f000 f8ff 	bl	8000c00 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000a02:	f000 f93b 	bl	8000c7c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000a06:	f000 f95f 	bl	8000cc8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000a0a:	f000 f99b 	bl	8000d44 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000a0e:	f000 f9c9 	bl	8000da4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a12:	f000 f9f7 	bl	8000e04 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  TIM1_Init();
 8000a16:	f7ff ff97 	bl	8000948 <TIM1_Init>
  ADC1_DMA1CH1_init();
 8000a1a:	f7ff ff21 	bl	8000860 <ADC1_DMA1CH1_init>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sample_buffer[0], SAMPLE_BUFFER_SIZE);
 8000a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a22:	4920      	ldr	r1, [pc, #128]	@ (8000aa4 <main+0xbc>)
 8000a24:	4820      	ldr	r0, [pc, #128]	@ (8000aa8 <main+0xc0>)
 8000a26:	f001 fbd3 	bl	80021d0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8000a2a:	4820      	ldr	r0, [pc, #128]	@ (8000aac <main+0xc4>)
 8000a2c:	f005 f8ca 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of dmaQueue */
  osMessageQDef(dmaQueue, 512, uint16_t);
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <main+0xc8>)
 8000a32:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  dmaQueueHandle = osMessageCreate(osMessageQ(dmaQueue), NULL);
 8000a3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 fca8 	bl	8007398 <osMessageCreate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <main+0xcc>)
 8000a4c:	6013      	str	r3, [r2, #0]
  printf("Initialized queue.\n");
 8000a4e:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <main+0xd0>)
 8000a50:	f008 ffd4 	bl	80099fc <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <main+0xd4>)
 8000a56:	f107 041c 	add.w	r4, r7, #28
 8000a5a:	461d      	mov	r5, r3
 8000a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 fc32 	bl	80072d8 <osThreadCreate>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <main+0xd8>)
 8000a78:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPrint */
  osThreadDef(TaskPrint, StartTaskPrint, osPriorityHigh, 0, 128);
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <main+0xdc>)
 8000a7c:	463c      	mov	r4, r7
 8000a7e:	461d      	mov	r5, r3
 8000a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPrintHandle = osThreadCreate(osThread(TaskPrint), NULL);
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f006 fc21 	bl	80072d8 <osThreadCreate>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac8 <main+0xe0>)
 8000a9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a9c:	f006 fc15 	bl	80072ca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <main+0xb8>
 8000aa4:	20000b08 	.word	0x20000b08
 8000aa8:	20000a5c 	.word	0x20000a5c
 8000aac:	20000a10 	.word	0x20000a10
 8000ab0:	0800a72c 	.word	0x0800a72c
 8000ab4:	20000a0c 	.word	0x20000a0c
 8000ab8:	0800a718 	.word	0x0800a718
 8000abc:	0800a748 	.word	0x0800a748
 8000ac0:	20000a04 	.word	0x20000a04
 8000ac4:	0800a770 	.word	0x0800a770
 8000ac8:	20000a08 	.word	0x20000a08

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b096      	sub	sp, #88	@ 0x58
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2244      	movs	r2, #68	@ 0x44
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f009 f86e 	bl	8009bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000af2:	f003 fb7f 	bl	80041f4 <HAL_PWREx_ControlVoltageScaling>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000afc:	f000 fb9c 	bl	8001238 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b00:	f003 fb5a 	bl	80041b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <SystemClock_Config+0xc0>)
 8000b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b0a:	4a20      	ldr	r2, [pc, #128]	@ (8000b8c <SystemClock_Config+0xc0>)
 8000b0c:	f023 0318 	bic.w	r3, r3, #24
 8000b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b14:	2314      	movs	r3, #20
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b24:	2360      	movs	r3, #96	@ 0x60
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b34:	2328      	movs	r3, #40	@ 0x28
 8000b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b38:	2307      	movs	r3, #7
 8000b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fc75 	bl	8004438 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b54:	f000 fb70 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2104      	movs	r1, #4
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 f83d 	bl	8004bf0 <HAL_RCC_ClockConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b7c:	f000 fb5c 	bl	8001238 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b80:	f004 fd44 	bl	800560c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b84:	bf00      	nop
 8000b86:	3758      	adds	r7, #88	@ 0x58
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000b96:	4a19      	ldr	r2, [pc, #100]	@ (8000bfc <MX_DFSDM1_Init+0x6c>)
 8000b98:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000bba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bbe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <MX_DFSDM1_Init+0x68>)
 8000be6:	f002 fb99 	bl	800331c <HAL_DFSDM_ChannelInit>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000bf0:	f000 fb22 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200002dc 	.word	0x200002dc
 8000bfc:	40016020 	.word	0x40016020

08000c00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c06:	4a1c      	ldr	r2, [pc, #112]	@ (8000c78 <MX_I2C2_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c0c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000c10:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c30:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c3c:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c3e:	f003 f856 	bl	8003cee <HAL_I2C_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c48:	f000 faf6 	bl	8001238 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4809      	ldr	r0, [pc, #36]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c50:	f003 f8e8 	bl	8003e24 <HAL_I2CEx_ConfigAnalogFilter>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c5a:	f000 faed 	bl	8001238 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <MX_I2C2_Init+0x74>)
 8000c62:	f003 f92a 	bl	8003eba <HAL_I2CEx_ConfigDigitalFilter>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c6c:	f000 fae4 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000314 	.word	0x20000314
 8000c78:	40005800 	.word	0x40005800

08000c7c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c82:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <MX_QUADSPI_Init+0x48>)
 8000c84:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c94:	2210      	movs	r2, #16
 8000c96:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c9a:	2217      	movs	r2, #23
 8000c9c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000cac:	f003 fb08 	bl	80042c0 <HAL_QSPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cb6:	f000 fabf 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000368 	.word	0x20000368
 8000cc4:	a0001000 	.word	0xa0001000

08000cc8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000cce:	4a1c      	ldr	r2, [pc, #112]	@ (8000d40 <MX_SPI3_Init+0x78>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000cd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000ce2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ce6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cfa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000d16:	2207      	movs	r2, #7
 8000d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000d22:	2208      	movs	r2, #8
 8000d24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_SPI3_Init+0x74>)
 8000d28:	f004 fe52 	bl	80059d0 <HAL_SPI_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f000 fa81 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200003ac 	.word	0x200003ac
 8000d40:	40003c00 	.word	0x40003c00

08000d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	@ (8000da0 <MX_USART1_UART_Init+0x5c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d88:	f005 fa1e 	bl	80061c8 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 fa51 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000410 	.word	0x20000410
 8000da0:	40013800 	.word	0x40013800

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000daa:	4a15      	ldr	r2, [pc, #84]	@ (8000e00 <MX_USART3_UART_Init+0x5c>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_USART3_UART_Init+0x58>)
 8000de8:	f005 f9ee 	bl	80061c8 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 fa21 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000498 	.word	0x20000498
 8000e00:	40004800 	.word	0x40004800

08000e04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e12:	2206      	movs	r2, #6
 8000e14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e48:	f003 f883 	bl	8003f52 <HAL_PCD_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e52:	f000 f9f1 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000520 	.word	0x20000520

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e76:	4bbd      	ldr	r3, [pc, #756]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4abc      	ldr	r2, [pc, #752]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4bba      	ldr	r3, [pc, #744]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4bb7      	ldr	r3, [pc, #732]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4ab6      	ldr	r2, [pc, #728]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4bb4      	ldr	r3, [pc, #720]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4bb1      	ldr	r3, [pc, #708]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4ab0      	ldr	r2, [pc, #704]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4bae      	ldr	r3, [pc, #696]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4bab      	ldr	r3, [pc, #684]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4aaa      	ldr	r2, [pc, #680]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4ba8      	ldr	r3, [pc, #672]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4ba5      	ldr	r3, [pc, #660]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4aa4      	ldr	r2, [pc, #656]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4ba2      	ldr	r3, [pc, #648]	@ (800116c <MX_GPIO_Init+0x30c>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000ef4:	489e      	ldr	r0, [pc, #632]	@ (8001170 <MX_GPIO_Init+0x310>)
 8000ef6:	f002 febf 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f002 feb8 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000f0e:	4899      	ldr	r0, [pc, #612]	@ (8001174 <MX_GPIO_Init+0x314>)
 8000f10:	f002 feb2 	bl	8003c78 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000f1a:	4897      	ldr	r0, [pc, #604]	@ (8001178 <MX_GPIO_Init+0x318>)
 8000f1c:	f002 feac 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f26:	4894      	ldr	r0, [pc, #592]	@ (8001178 <MX_GPIO_Init+0x318>)
 8000f28:	f002 fea6 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000f32:	4892      	ldr	r0, [pc, #584]	@ (800117c <MX_GPIO_Init+0x31c>)
 8000f34:	f002 fea0 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	488d      	ldr	r0, [pc, #564]	@ (8001174 <MX_GPIO_Init+0x314>)
 8000f3e:	f002 fe9b 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2101      	movs	r1, #1
 8000f46:	488a      	ldr	r0, [pc, #552]	@ (8001170 <MX_GPIO_Init+0x310>)
 8000f48:	f002 fe96 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f4c:	f240 1315 	movw	r3, #277	@ 0x115
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4882      	ldr	r0, [pc, #520]	@ (8001170 <MX_GPIO_Init+0x310>)
 8000f66:	f002 fcdd 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f6a:	236a      	movs	r3, #106	@ 0x6a
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	487c      	ldr	r0, [pc, #496]	@ (8001170 <MX_GPIO_Init+0x310>)
 8000f80:	f002 fcd0 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000f84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f8a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4878      	ldr	r0, [pc, #480]	@ (800117c <MX_GPIO_Init+0x31c>)
 8000f9c:	f002 fcc2 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fa0:	233f      	movs	r3, #63	@ 0x3f
 8000fa2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fa4:	230b      	movs	r3, #11
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4872      	ldr	r0, [pc, #456]	@ (800117c <MX_GPIO_Init+0x31c>)
 8000fb4:	f002 fcb6 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd6:	f002 fca5 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000fda:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff6:	f002 fc95 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100a:	2301      	movs	r3, #1
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f002 fc84 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800101c:	2310      	movs	r3, #16
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001020:	230b      	movs	r3, #11
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f002 fc77 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001036:	23e0      	movs	r3, #224	@ 0xe0
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001046:	2305      	movs	r3, #5
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001054:	f002 fc66 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001058:	2301      	movs	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4841      	ldr	r0, [pc, #260]	@ (8001174 <MX_GPIO_Init+0x314>)
 800106e:	f002 fc59 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001072:	2302      	movs	r3, #2
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001076:	230b      	movs	r3, #11
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	483b      	ldr	r0, [pc, #236]	@ (8001174 <MX_GPIO_Init+0x314>)
 8001086:	f002 fc4d 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800108a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800108e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4834      	ldr	r0, [pc, #208]	@ (8001174 <MX_GPIO_Init+0x314>)
 80010a4:	f002 fc3e 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80010a8:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80010ac:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	482e      	ldr	r0, [pc, #184]	@ (8001178 <MX_GPIO_Init+0x318>)
 80010c0:	f002 fc30 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80010c4:	f243 0381 	movw	r3, #12417	@ 0x3081
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4826      	ldr	r0, [pc, #152]	@ (8001178 <MX_GPIO_Init+0x318>)
 80010de:	f002 fc21 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80010e2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4820      	ldr	r0, [pc, #128]	@ (800117c <MX_GPIO_Init+0x31c>)
 80010fc:	f002 fc12 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001100:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4819      	ldr	r0, [pc, #100]	@ (800117c <MX_GPIO_Init+0x31c>)
 8001118:	f002 fc04 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800111c:	2302      	movs	r3, #2
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112c:	2305      	movs	r3, #5
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4810      	ldr	r0, [pc, #64]	@ (8001178 <MX_GPIO_Init+0x318>)
 8001138:	f002 fbf4 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800113c:	2378      	movs	r3, #120	@ 0x78
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114c:	2307      	movs	r3, #7
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <MX_GPIO_Init+0x318>)
 8001158:	f002 fbe4 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800115c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	e00a      	b.n	8001180 <MX_GPIO_Init+0x320>
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	48001000 	.word	0x48001000
 8001174:	48000400 	.word	0x48000400
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48000800 	.word	0x48000800
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001186:	2304      	movs	r3, #4
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <MX_GPIO_Init+0x360>)
 8001192:	f002 fbc7 	bl	8003924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2105      	movs	r1, #5
 800119a:	2017      	movs	r0, #23
 800119c:	f002 f887 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011a0:	2017      	movs	r0, #23
 80011a2:	f002 f8a0 	bl	80032e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2105      	movs	r1, #5
 80011aa:	2028      	movs	r0, #40	@ 0x28
 80011ac:	f002 f87f 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b0:	2028      	movs	r0, #40	@ 0x28
 80011b2:	f002 f898 	bl	80032e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	@ 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	48000400 	.word	0x48000400

080011c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

    /* Infinite loop */
    for(;;)
    {
//      printf("Default\n");
      osDelay(1000);
 80011cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011d0:	f006 f8ce 	bl	8007370 <osDelay>
 80011d4:	e7fa      	b.n	80011cc <StartDefaultTask+0x8>
	...

080011d8 <StartTaskPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPrint */
void StartTaskPrint(void const * argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	    uint16_t receivedAdcValue;

	    /* Infinite loop */
	    for(;;)
	    {
	        event = osMessageGet(dmaQueueHandle, osWaitForever);
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <StartTaskPrint+0x50>)
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 f93b 	bl	8007468 <osMessageGet>
	        if (event.status == osEventMessage)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	d1f3      	bne.n	80011e0 <StartTaskPrint+0x8>
	        {
	            receivedAdcValue = (uint16_t)event.value.v;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	82fb      	strh	r3, [r7, #22]
	            // Check if this is a marker value
	            if (receivedAdcValue == 0xA000) {
 80011fc:	8afb      	ldrh	r3, [r7, #22]
 80011fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8001202:	d103      	bne.n	800120c <StartTaskPrint+0x34>
	                printf("\r\n----- BUFFER TOP HALF -----\r\n");
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <StartTaskPrint+0x54>)
 8001206:	f008 fbf9 	bl	80099fc <puts>
 800120a:	e7e9      	b.n	80011e0 <StartTaskPrint+0x8>
	            }
	            else if (receivedAdcValue == 0xB000) {
 800120c:	8afb      	ldrh	r3, [r7, #22]
 800120e:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 8001212:	d103      	bne.n	800121c <StartTaskPrint+0x44>
	                printf("\r\n----- BUFFER BOTTOM HALF -----\r\n");
 8001214:	4806      	ldr	r0, [pc, #24]	@ (8001230 <StartTaskPrint+0x58>)
 8001216:	f008 fbf1 	bl	80099fc <puts>
 800121a:	e7e1      	b.n	80011e0 <StartTaskPrint+0x8>
	            }
	            else {
	                // Regular ADC value, print with buffer half indicator
	                printf("%d ", receivedAdcValue);
 800121c:	8afb      	ldrh	r3, [r7, #22]
 800121e:	4619      	mov	r1, r3
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <StartTaskPrint+0x5c>)
 8001222:	f008 fb83 	bl	800992c <iprintf>
	        event = osMessageGet(dmaQueueHandle, osWaitForever);
 8001226:	e7db      	b.n	80011e0 <StartTaskPrint+0x8>
 8001228:	20000a0c 	.word	0x20000a0c
 800122c:	0800a78c 	.word	0x0800a78c
 8001230:	0800a7ac 	.word	0x0800a7ac
 8001234:	0800a7d0 	.word	0x0800a7d0

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <HAL_MspInit+0x4c>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	4a10      	ldr	r2, [pc, #64]	@ (8001290 <HAL_MspInit+0x4c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6613      	str	r3, [r2, #96]	@ 0x60
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_MspInit+0x4c>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_MspInit+0x4c>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_MspInit+0x4c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	6593      	str	r3, [r2, #88]	@ 0x58
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_MspInit+0x4c>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	210f      	movs	r1, #15
 800127e:	f06f 0001 	mvn.w	r0, #1
 8001282:	f002 f814 	bl	80032ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0ac      	sub	sp, #176	@ 0xb0
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2288      	movs	r2, #136	@ 0x88
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f008 fc81 	bl	8009bbc <memset>
  if(DFSDM1_Init == 0)
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d142      	bne.n	8001348 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80012c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 feb0 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80012de:	f7ff ffab 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fa:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a15      	ldr	r2, [pc, #84]	@ (8001354 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001312:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800132c:	2306      	movs	r3, #6
 800132e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001332:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	@ (8001358 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800133a:	f002 faf3 	bl	8003924 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	4a02      	ldr	r2, [pc, #8]	@ (8001350 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001346:	6013      	str	r3, [r2, #0]
  }

}
 8001348:	bf00      	nop
 800134a:	37b0      	adds	r7, #176	@ 0xb0
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000d08 	.word	0x20000d08
 8001354:	40021000 	.word	0x40021000
 8001358:	48001000 	.word	0x48001000

0800135c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0ac      	sub	sp, #176	@ 0xb0
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2288      	movs	r2, #136	@ 0x88
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f008 fc1d 	bl	8009bbc <memset>
  if(hi2c->Instance==I2C2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a21      	ldr	r2, [pc, #132]	@ (800140c <HAL_I2C_MspInit+0xb0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d13b      	bne.n	8001404 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fe4d 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013a4:	f7ff ff48 	bl	8001238 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <HAL_I2C_MspInit+0xb4>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	4a18      	ldr	r2, [pc, #96]	@ (8001410 <HAL_I2C_MspInit+0xb4>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b4:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <HAL_I2C_MspInit+0xb4>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80013c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	2312      	movs	r3, #18
 80013ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013da:	2304      	movs	r3, #4
 80013dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013e4:	4619      	mov	r1, r3
 80013e6:	480b      	ldr	r0, [pc, #44]	@ (8001414 <HAL_I2C_MspInit+0xb8>)
 80013e8:	f002 fa9c 	bl	8003924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_I2C_MspInit+0xb4>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f0:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_I2C_MspInit+0xb4>)
 80013f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_I2C_MspInit+0xb4>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001404:	bf00      	nop
 8001406:	37b0      	adds	r7, #176	@ 0xb0
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40005800 	.word	0x40005800
 8001410:	40021000 	.word	0x40021000
 8001414:	48000400 	.word	0x48000400

08001418 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <HAL_QSPI_MspInit+0x7c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d128      	bne.n	800148c <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_QSPI_MspInit+0x80>)
 800143c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800143e:	4a16      	ldr	r2, [pc, #88]	@ (8001498 <HAL_QSPI_MspInit+0x80>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001444:	6513      	str	r3, [r2, #80]	@ 0x50
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <HAL_QSPI_MspInit+0x80>)
 8001448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800144a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_QSPI_MspInit+0x80>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <HAL_QSPI_MspInit+0x80>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_QSPI_MspInit+0x80>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800146a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800146e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800147c:	230a      	movs	r3, #10
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <HAL_QSPI_MspInit+0x84>)
 8001488:	f002 fa4c 	bl	8003924 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	@ 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	a0001000 	.word	0xa0001000
 8001498:	40021000 	.word	0x40021000
 800149c:	48001000 	.word	0x48001000

080014a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a17      	ldr	r2, [pc, #92]	@ (800151c <HAL_SPI_MspInit+0x7c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d128      	bne.n	8001514 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_SPI_MspInit+0x80>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	4a16      	ldr	r2, [pc, #88]	@ (8001520 <HAL_SPI_MspInit+0x80>)
 80014c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <HAL_SPI_MspInit+0x80>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_SPI_MspInit+0x80>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a10      	ldr	r2, [pc, #64]	@ (8001520 <HAL_SPI_MspInit+0x80>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <HAL_SPI_MspInit+0x80>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001504:	2306      	movs	r3, #6
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <HAL_SPI_MspInit+0x84>)
 8001510:	f002 fa08 	bl	8003924 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	@ 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40003c00 	.word	0x40003c00
 8001520:	40021000 	.word	0x40021000
 8001524:	48000800 	.word	0x48000800

08001528 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ae      	sub	sp, #184	@ 0xb8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	2288      	movs	r2, #136	@ 0x88
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f008 fb37 	bl	8009bbc <memset>
  if(huart->Instance==USART1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a42      	ldr	r2, [pc, #264]	@ (800165c <HAL_UART_MspInit+0x134>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d13b      	bne.n	80015d0 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001558:	2301      	movs	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800155c:	2300      	movs	r3, #0
 800155e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4618      	mov	r0, r3
 8001566:	f003 fd67 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001570:	f7ff fe62 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001574:	4b3a      	ldr	r3, [pc, #232]	@ (8001660 <HAL_UART_MspInit+0x138>)
 8001576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001578:	4a39      	ldr	r2, [pc, #228]	@ (8001660 <HAL_UART_MspInit+0x138>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001580:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <HAL_UART_MspInit+0x138>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <HAL_UART_MspInit+0x138>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	4a33      	ldr	r2, [pc, #204]	@ (8001660 <HAL_UART_MspInit+0x138>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001598:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_UART_MspInit+0x138>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80015a4:	23c0      	movs	r3, #192	@ 0xc0
 80015a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015bc:	2307      	movs	r3, #7
 80015be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4826      	ldr	r0, [pc, #152]	@ (8001664 <HAL_UART_MspInit+0x13c>)
 80015ca:	f002 f9ab 	bl	8003924 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ce:	e040      	b.n	8001652 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a24      	ldr	r2, [pc, #144]	@ (8001668 <HAL_UART_MspInit+0x140>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d13b      	bne.n	8001652 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015da:	2304      	movs	r3, #4
 80015dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015de:	2300      	movs	r3, #0
 80015e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fd26 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80015f2:	f7ff fe21 	bl	8001238 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_UART_MspInit+0x138>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	4a19      	ldr	r2, [pc, #100]	@ (8001660 <HAL_UART_MspInit+0x138>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001600:	6593      	str	r3, [r2, #88]	@ 0x58
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <HAL_UART_MspInit+0x138>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <HAL_UART_MspInit+0x138>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a13      	ldr	r2, [pc, #76]	@ (8001660 <HAL_UART_MspInit+0x138>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_UART_MspInit+0x138>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001626:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800162a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001640:	2307      	movs	r3, #7
 8001642:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001646:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800164a:	4619      	mov	r1, r3
 800164c:	4807      	ldr	r0, [pc, #28]	@ (800166c <HAL_UART_MspInit+0x144>)
 800164e:	f002 f969 	bl	8003924 <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	37b8      	adds	r7, #184	@ 0xb8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40013800 	.word	0x40013800
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400
 8001668:	40004800 	.word	0x40004800
 800166c:	48000c00 	.word	0x48000c00

08001670 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0ac      	sub	sp, #176	@ 0xb0
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2288      	movs	r2, #136	@ 0x88
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f008 fa93 	bl	8009bbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800169e:	d17c      	bne.n	800179a <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80016aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016b6:	2318      	movs	r3, #24
 80016b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016ba:	2307      	movs	r3, #7
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016be:	2302      	movs	r3, #2
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016c6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fcb1 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80016dc:	f7ff fdac 	bl	8001238 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b30      	ldr	r3, [pc, #192]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	4a2f      	ldr	r2, [pc, #188]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ec:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80016f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001716:	f002 f905 	bl	8003924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800171a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800171e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001734:	230a      	movs	r3, #10
 8001736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001744:	f002 f8ee 	bl	8003924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 800174e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d114      	bne.n	8001796 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001770:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 8001772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001776:	6593      	str	r3, [r2, #88]	@ 0x58
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001784:	f002 fd8c 	bl	80042a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <HAL_PCD_MspInit+0x134>)
 800178e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001794:	e001      	b.n	800179a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001796:	f002 fd83 	bl	80042a0 <HAL_PWREx_EnableVddUSB>
}
 800179a:	bf00      	nop
 800179c:	37b0      	adds	r7, #176	@ 0xb0
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <NMI_Handler+0x4>

080017b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <MemManage_Handler+0x4>

080017c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <UsageFault_Handler+0x4>

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f000 f965 	bl	8001ab0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017e6:	f007 fa95 	bl	8008d14 <xTaskGetSchedulerState>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d001      	beq.n	80017f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017f0:	f007 fd5a 	bl	80092a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80017fc:	2020      	movs	r0, #32
 80017fe:	f002 fa53 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001802:	2040      	movs	r0, #64	@ 0x40
 8001804:	f002 fa50 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001808:	2080      	movs	r0, #128	@ 0x80
 800180a:	f002 fa4d 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800180e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001812:	f002 fa49 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}

0800181a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800181e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001822:	f002 fa41 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001826:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800182a:	f002 fa3d 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800182e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001832:	f002 fa39 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001836:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800183a:	f002 fa35 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800183e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001842:	f002 fa31 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}

0800184a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e00a      	b.n	8001872 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800185c:	f3af 8000 	nop.w
 8001860:	4601      	mov	r1, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	60ba      	str	r2, [r7, #8]
 8001868:	b2ca      	uxtb	r2, r1
 800186a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	dbf0      	blt.n	800185c <_read+0x12>
  }

  return len;
 800187a:	687b      	ldr	r3, [r7, #4]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e009      	b.n	80018aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	60ba      	str	r2, [r7, #8]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe feb2 	bl	8000608 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbf1      	blt.n	8001896 <_write+0x12>
  }
  return len;
 80018b2:	687b      	ldr	r3, [r7, #4]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_close>:

int _close(int file)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e4:	605a      	str	r2, [r3, #4]
  return 0;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_isatty>:

int _isatty(int file)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	@ (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f008 f980 	bl	8009c58 <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	220c      	movs	r2, #12
 800195c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20018000 	.word	0x20018000
 8001984:	00000400 	.word	0x00000400
 8001988:	20000d0c 	.word	0x20000d0c
 800198c:	20001b90 	.word	0x20001b90

08001990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <SystemInit+0x20>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <SystemInit+0x20>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b8:	f7ff ffea 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	@ (80019f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a00 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f008 f93f 	bl	8009c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019e6:	f7fe ffff 	bl	80009e8 <main>

080019ea <LoopForever>:

LoopForever:
    b LoopForever
 80019ea:	e7fe      	b.n	80019ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019f8:	0800a868 	.word	0x0800a868
  ldr r2, =_sbss
 80019fc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a00:	20001b90 	.word	0x20001b90

08001a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC1_2_IRQHandler>

08001a06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f001 fc41 	bl	8003298 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a16:	200f      	movs	r0, #15
 8001a18:	f000 f80e 	bl	8001a38 <HAL_InitTick>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	e001      	b.n	8001a2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a28:	f7ff fc0c 	bl	8001244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_InitTick+0x6c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_InitTick+0x70>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <HAL_InitTick+0x6c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fc4d 	bl	8003302 <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d809      	bhi.n	8001a88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f001 fc17 	bl	80032ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a80:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <HAL_InitTick+0x74>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e007      	b.n	8001a98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e004      	b.n	8001a98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e001      	b.n	8001a98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000d10 	.word	0x20000d10

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000d10 	.word	0x20000d10

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008

08001b38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3360      	adds	r3, #96	@ 0x60
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <LL_ADC_SetOffset+0x44>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bd8:	bf00      	nop
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	03fff000 	.word	0x03fff000

08001be8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3360      	adds	r3, #96	@ 0x60
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3360      	adds	r3, #96	@ 0x60
 8001c24:	461a      	mov	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c3e:	bf00      	nop
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3330      	adds	r3, #48	@ 0x30
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	4413      	add	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	211f      	movs	r1, #31
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	f003 011f 	and.w	r1, r3, #31
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3314      	adds	r3, #20
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	0e5b      	lsrs	r3, r3, #25
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	0d1b      	lsrs	r3, r3, #20
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2107      	movs	r1, #7
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	0d1b      	lsrs	r3, r3, #20
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0318 	and.w	r3, r3, #24
 8001d42:	4908      	ldr	r1, [pc, #32]	@ (8001d64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d44:	40d9      	lsrs	r1, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	400b      	ands	r3, r1
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	0007ffff 	.word	0x0007ffff

08001d68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 031f 	and.w	r3, r3, #31
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6093      	str	r3, [r2, #8]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dbc:	d101      	bne.n	8001dc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001de0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001de4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e0c:	d101      	bne.n	8001e12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e34:	f043 0201 	orr.w	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e5c:	f043 0202 	orr.w	r2, r3, #2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <LL_ADC_IsEnabled+0x18>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <LL_ADC_IsEnabled+0x1a>
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_IsDisableOngoing+0x18>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_IsDisableOngoing+0x1a>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed0:	f043 0204 	orr.w	r2, r3, #4
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d101      	bne.n	8001efc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d101      	bne.n	8001f22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b089      	sub	sp, #36	@ 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e130      	b.n	80021ac <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7fe fb67 	bl	800062c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff19 	bl	8001da8 <LL_ADC_IsDeepPowerDownEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff feff 	bl	8001d84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff34 	bl	8001df8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff18 	bl	8001dd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fa0:	4b84      	ldr	r3, [pc, #528]	@ (80021b4 <HAL_ADC_Init+0x284>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	4a84      	ldr	r2, [pc, #528]	@ (80021b8 <HAL_ADC_Init+0x288>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	3301      	adds	r3, #1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fb4:	e002      	b.n	8001fbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f9      	bne.n	8001fb6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff16 	bl	8001df8 <LL_ADC_IsInternalRegulatorEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff76 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 8001ff8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 80c9 	bne.w	800219a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 80c5 	bne.w	800219a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002014:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002018:	f043 0202 	orr.w	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff23 	bl	8001e70 <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d115      	bne.n	800205c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002030:	4862      	ldr	r0, [pc, #392]	@ (80021bc <HAL_ADC_Init+0x28c>)
 8002032:	f7ff ff1d 	bl	8001e70 <LL_ADC_IsEnabled>
 8002036:	4604      	mov	r4, r0
 8002038:	4861      	ldr	r0, [pc, #388]	@ (80021c0 <HAL_ADC_Init+0x290>)
 800203a:	f7ff ff19 	bl	8001e70 <LL_ADC_IsEnabled>
 800203e:	4603      	mov	r3, r0
 8002040:	431c      	orrs	r4, r3
 8002042:	4860      	ldr	r0, [pc, #384]	@ (80021c4 <HAL_ADC_Init+0x294>)
 8002044:	f7ff ff14 	bl	8001e70 <LL_ADC_IsEnabled>
 8002048:	4603      	mov	r3, r0
 800204a:	4323      	orrs	r3, r4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4619      	mov	r1, r3
 8002056:	485c      	ldr	r0, [pc, #368]	@ (80021c8 <HAL_ADC_Init+0x298>)
 8002058:	f7ff fd6e 	bl	8001b38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7e5b      	ldrb	r3, [r3, #25]
 8002060:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002066:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800206c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002072:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d106      	bne.n	8002098 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	3b01      	subs	r3, #1
 8002090:	045b      	lsls	r3, r3, #17
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4b44      	ldr	r3, [pc, #272]	@ (80021cc <HAL_ADC_Init+0x29c>)
 80020bc:	4013      	ands	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff1c 	bl	8001f0a <LL_ADC_INJ_IsConversionOngoing>
 80020d2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d13d      	bne.n	8002156 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d13a      	bne.n	8002156 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020ec:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020fc:	f023 0302 	bic.w	r3, r3, #2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	69b9      	ldr	r1, [r7, #24]
 8002106:	430b      	orrs	r3, r1
 8002108:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002110:	2b01      	cmp	r3, #1
 8002112:	d118      	bne.n	8002146 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800211e:	f023 0304 	bic.w	r3, r3, #4
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002130:	4311      	orrs	r1, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002136:	430a      	orrs	r2, r1
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	611a      	str	r2, [r3, #16]
 8002144:	e007      	b.n	8002156 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10c      	bne.n	8002178 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	f023 010f 	bic.w	r1, r3, #15
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30
 8002176:	e007      	b.n	8002188 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 020f 	bic.w	r2, r2, #15
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	f023 0303 	bic.w	r3, r3, #3
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	@ 0x54
 8002198:	e007      	b.n	80021aa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3724      	adds	r7, #36	@ 0x24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	20000000 	.word	0x20000000
 80021b8:	053e2d63 	.word	0x053e2d63
 80021bc:	50040000 	.word	0x50040000
 80021c0:	50040100 	.word	0x50040100
 80021c4:	50040200 	.word	0x50040200
 80021c8:	50040300 	.word	0x50040300
 80021cc:	fff0c007 	.word	0xfff0c007

080021d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021dc:	4853      	ldr	r0, [pc, #332]	@ (800232c <HAL_ADC_Start_DMA+0x15c>)
 80021de:	f7ff fdc3 	bl	8001d68 <LL_ADC_GetMultimode>
 80021e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe7b 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 8093 	bne.w	800231c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_Start_DMA+0x34>
 8002200:	2302      	movs	r3, #2
 8002202:	e08e      	b.n	8002322 <HAL_ADC_Start_DMA+0x152>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a47      	ldr	r2, [pc, #284]	@ (8002330 <HAL_ADC_Start_DMA+0x160>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d008      	beq.n	8002228 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d002      	beq.n	8002228 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b09      	cmp	r3, #9
 8002226:	d172      	bne.n	800230e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fc89 	bl	8002b40 <ADC_Enable>
 800222e:	4603      	mov	r3, r0
 8002230:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002232:	7dfb      	ldrb	r3, [r7, #23]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d165      	bne.n	8002304 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a38      	ldr	r2, [pc, #224]	@ (8002334 <HAL_ADC_Start_DMA+0x164>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d002      	beq.n	800225c <HAL_ADC_Start_DMA+0x8c>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	e000      	b.n	800225e <HAL_ADC_Start_DMA+0x8e>
 800225c:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <HAL_ADC_Start_DMA+0x168>)
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	4293      	cmp	r3, r2
 8002264:	d002      	beq.n	800226c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	f023 0206 	bic.w	r2, r3, #6
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002290:	e002      	b.n	8002298 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229c:	4a27      	ldr	r2, [pc, #156]	@ (800233c <HAL_ADC_Start_DMA+0x16c>)
 800229e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a4:	4a26      	ldr	r2, [pc, #152]	@ (8002340 <HAL_ADC_Start_DMA+0x170>)
 80022a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ac:	4a25      	ldr	r2, [pc, #148]	@ (8002344 <HAL_ADC_Start_DMA+0x174>)
 80022ae:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	221c      	movs	r2, #28
 80022b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0210 	orr.w	r2, r2, #16
 80022ce:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3340      	adds	r3, #64	@ 0x40
 80022ea:	4619      	mov	r1, r3
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f001 f9d8 	bl	80036a4 <HAL_DMA_Start_IT>
 80022f4:	4603      	mov	r3, r0
 80022f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fddd 	bl	8001ebc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002302:	e00d      	b.n	8002320 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800230c:	e008      	b.n	8002320 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800231a:	e001      	b.n	8002320 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800231c:	2302      	movs	r3, #2
 800231e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002320:	7dfb      	ldrb	r3, [r7, #23]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	50040300 	.word	0x50040300
 8002330:	50040200 	.word	0x50040200
 8002334:	50040100 	.word	0x50040100
 8002338:	50040000 	.word	0x50040000
 800233c:	08002d0b 	.word	0x08002d0b
 8002340:	08002de3 	.word	0x08002de3
 8002344:	08002dff 	.word	0x08002dff

08002348 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b0b6      	sub	sp, #216	@ 0xd8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_ADC_ConfigChannel+0x22>
 800237a:	2302      	movs	r3, #2
 800237c:	e3c9      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x7b6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fdaa 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 83aa 	bne.w	8002aec <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d824      	bhi.n	80023f2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	3b02      	subs	r3, #2
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d81b      	bhi.n	80023ea <HAL_ADC_ConfigChannel+0x8e>
 80023b2:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <HAL_ADC_ConfigChannel+0x5c>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023d1 	.word	0x080023d1
 80023c0:	080023d9 	.word	0x080023d9
 80023c4:	080023e1 	.word	0x080023e1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023c8:	230c      	movs	r3, #12
 80023ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023ce:	e010      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80023d0:	2312      	movs	r3, #18
 80023d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023d6:	e00c      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023d8:	2318      	movs	r3, #24
 80023da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023de:	e008      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80023ea:	2306      	movs	r3, #6
 80023ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023f0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002400:	f7ff fc36 	bl	8001c70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fd6b 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 800240e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fd77 	bl	8001f0a <LL_ADC_INJ_IsConversionOngoing>
 800241c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 81a4 	bne.w	8002772 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800242a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 819f 	bne.w	8002772 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6819      	ldr	r1, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	461a      	mov	r2, r3
 8002442:	f7ff fc41 	bl	8001cc8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00a      	beq.n	800247e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6919      	ldr	r1, [r3, #16]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002478:	f7ff fb92 	bl	8001ba0 <LL_ADC_SetOffset>
 800247c:	e179      	b.n	8002772 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fbaf 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x14e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fba4 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	e01e      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x18c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fb99 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e004      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80024dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x1a4>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	e018      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1d6>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800251c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e004      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002532:	429a      	cmp	r2, r3
 8002534:	d106      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb68 	bl	8001c14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fb4c 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x214>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fb41 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	f003 021f 	and.w	r2, r3, #31
 800256e:	e01e      	b.n	80025ae <HAL_ADC_ConfigChannel+0x252>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fb36 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800258e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e004      	b.n	80025ac <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80025a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x26a>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	e018      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x29c>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80025da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e004      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80025ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d106      	bne.n	800260a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2200      	movs	r2, #0
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fb05 	bl	8001c14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2102      	movs	r1, #2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fae9 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x2da>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2102      	movs	r1, #2
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fade 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	0e9b      	lsrs	r3, r3, #26
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	e01e      	b.n	8002674 <HAL_ADC_ConfigChannel+0x318>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2102      	movs	r1, #2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fad3 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002658:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800265c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002664:	2320      	movs	r3, #32
 8002666:	e004      	b.n	8002672 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002668:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_ADC_ConfigChannel+0x330>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	e014      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x35a>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800269a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800269c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e004      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80026ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d106      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	2102      	movs	r1, #2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff faa6 	bl	8001c14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2103      	movs	r1, #3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fa8a 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2103      	movs	r1, #3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fa7f 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	0e9b      	lsrs	r3, r3, #26
 80026ee:	f003 021f 	and.w	r2, r3, #31
 80026f2:	e017      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3c8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2103      	movs	r1, #3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fa74 	bl	8001be8 <LL_ADC_GetOffsetChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800270c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800270e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002716:	2320      	movs	r3, #32
 8002718:	e003      	b.n	8002722 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800271a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_ADC_ConfigChannel+0x3e0>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	e011      	b.n	8002760 <HAL_ADC_ConfigChannel+0x404>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800274a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800274c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800274e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e003      	b.n	8002760 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002760:	429a      	cmp	r2, r3
 8002762:	d106      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2200      	movs	r2, #0
 800276a:	2103      	movs	r1, #3
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fa51 	bl	8001c14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fb7a 	bl	8001e70 <LL_ADC_IsEnabled>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8140 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	461a      	mov	r2, r3
 8002792:	f7ff fac5 	bl	8001d20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a8f      	ldr	r2, [pc, #572]	@ (80029d8 <HAL_ADC_ConfigChannel+0x67c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	f040 8131 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10b      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x46e>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	3301      	adds	r3, #1
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2b09      	cmp	r3, #9
 80027c0:	bf94      	ite	ls
 80027c2:	2301      	movls	r3, #1
 80027c4:	2300      	movhi	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	e019      	b.n	80027fe <HAL_ADC_ConfigChannel+0x4a2>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80027e2:	2320      	movs	r3, #32
 80027e4:	e003      	b.n	80027ee <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80027e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2b09      	cmp	r3, #9
 80027f6:	bf94      	ite	ls
 80027f8:	2301      	movls	r3, #1
 80027fa:	2300      	movhi	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d079      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280a:	2b00      	cmp	r3, #0
 800280c:	d107      	bne.n	800281e <HAL_ADC_ConfigChannel+0x4c2>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	0e9b      	lsrs	r3, r3, #26
 8002814:	3301      	adds	r3, #1
 8002816:	069b      	lsls	r3, r3, #26
 8002818:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281c:	e015      	b.n	800284a <HAL_ADC_ConfigChannel+0x4ee>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800282c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800282e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002836:	2320      	movs	r3, #32
 8002838:	e003      	b.n	8002842 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800283a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	3301      	adds	r3, #1
 8002844:	069b      	lsls	r3, r3, #26
 8002846:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_ADC_ConfigChannel+0x50e>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0e9b      	lsrs	r3, r3, #26
 800285c:	3301      	adds	r3, #1
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	e017      	b.n	800289a <HAL_ADC_ConfigChannel+0x53e>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800287c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3301      	adds	r3, #1
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	ea42 0103 	orr.w	r1, r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x564>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	051b      	lsls	r3, r3, #20
 80028be:	e018      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x596>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e003      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80028dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 021f 	and.w	r2, r3, #31
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f2:	430b      	orrs	r3, r1
 80028f4:	e081      	b.n	80029fa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x5b6>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	3301      	adds	r3, #1
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002910:	e015      	b.n	800293e <HAL_ADC_ConfigChannel+0x5e2>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800292e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	069b      	lsls	r3, r3, #26
 800293a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_ADC_ConfigChannel+0x602>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	0e9b      	lsrs	r3, r3, #26
 8002950:	3301      	adds	r3, #1
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	2101      	movs	r1, #1
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	e017      	b.n	800298e <HAL_ADC_ConfigChannel+0x632>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	61bb      	str	r3, [r7, #24]
  return result;
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	ea42 0103 	orr.w	r1, r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x65e>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0e9b      	lsrs	r3, r3, #26
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 021f 	and.w	r2, r3, #31
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	3b1e      	subs	r3, #30
 80029b2:	051b      	lsls	r3, r3, #20
 80029b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029b8:	e01e      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x69c>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	60fb      	str	r3, [r7, #12]
  return result;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e006      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x688>
 80029d6:	bf00      	nop
 80029d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 021f 	and.w	r2, r3, #31
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	3b1e      	subs	r3, #30
 80029f2:	051b      	lsls	r3, r3, #20
 80029f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7ff f962 	bl	8001cc8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <HAL_ADC_ConfigChannel+0x7c0>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d07a      	beq.n	8002b06 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a10:	4843      	ldr	r0, [pc, #268]	@ (8002b20 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a12:	f7ff f8b7 	bl	8001b84 <LL_ADC_GetCommonPathInternalCh>
 8002a16:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a41      	ldr	r2, [pc, #260]	@ (8002b24 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d12c      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d126      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3c      	ldr	r2, [pc, #240]	@ (8002b28 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x6e8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b2c <HAL_ADC_ConfigChannel+0x7d0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d15d      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4834      	ldr	r0, [pc, #208]	@ (8002b20 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a50:	f7ff f885 	bl	8001b5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a54:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	4a36      	ldr	r2, [pc, #216]	@ (8002b34 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a6e:	e002      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f9      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a7c:	e040      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2d      	ldr	r2, [pc, #180]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d118      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d112      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a23      	ldr	r2, [pc, #140]	@ (8002b28 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x74c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <HAL_ADC_ConfigChannel+0x7d0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d12d      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	481b      	ldr	r0, [pc, #108]	@ (8002b20 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ab4:	f7ff f853 	bl	8001b5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ab8:	e024      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_ADC_ConfigChannel+0x7e0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d120      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11a      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d115      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ade:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	480e      	ldr	r0, [pc, #56]	@ (8002b20 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ae6:	f7ff f83a 	bl	8001b5e <LL_ADC_SetCommonPathInternalCh>
 8002aea:	e00c      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002afe:	e002      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b00:	bf00      	nop
 8002b02:	e000      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	37d8      	adds	r7, #216	@ 0xd8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	80080000 	.word	0x80080000
 8002b20:	50040300 	.word	0x50040300
 8002b24:	c7520000 	.word	0xc7520000
 8002b28:	50040000 	.word	0x50040000
 8002b2c:	50040200 	.word	0x50040200
 8002b30:	20000000 	.word	0x20000000
 8002b34:	053e2d63 	.word	0x053e2d63
 8002b38:	cb840000 	.word	0xcb840000
 8002b3c:	80000001 	.word	0x80000001

08002b40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff f98d 	bl	8001e70 <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d169      	bne.n	8002c30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	4b36      	ldr	r3, [pc, #216]	@ (8002c3c <ADC_Enable+0xfc>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f043 0210 	orr.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e055      	b.n	8002c32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f948 	bl	8001e20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b90:	482b      	ldr	r0, [pc, #172]	@ (8002c40 <ADC_Enable+0x100>)
 8002b92:	f7fe fff7 	bl	8001b84 <LL_ADC_GetCommonPathInternalCh>
 8002b96:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba0:	4b28      	ldr	r3, [pc, #160]	@ (8002c44 <ADC_Enable+0x104>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	4a28      	ldr	r2, [pc, #160]	@ (8002c48 <ADC_Enable+0x108>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bba:	e002      	b.n	8002bc2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f9      	bne.n	8002bbc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe ff86 	bl	8001ad8 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bce:	e028      	b.n	8002c22 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f94b 	bl	8001e70 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f91b 	bl	8001e20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bea:	f7fe ff75 	bl	8001ad8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d914      	bls.n	8002c22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d00d      	beq.n	8002c22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d1cf      	bne.n	8002bd0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	8000003f 	.word	0x8000003f
 8002c40:	50040300 	.word	0x50040300
 8002c44:	20000000 	.word	0x20000000
 8002c48:	053e2d63 	.word	0x053e2d63

08002c4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f91c 	bl	8001e96 <LL_ADC_IsDisableOngoing>
 8002c5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f903 	bl	8001e70 <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d047      	beq.n	8002d00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d144      	bne.n	8002d00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030d 	and.w	r3, r3, #13
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10c      	bne.n	8002c9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff f8dd 	bl	8001e48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2203      	movs	r2, #3
 8002c94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c96:	f7fe ff1f 	bl	8001ad8 <HAL_GetTick>
 8002c9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c9c:	e029      	b.n	8002cf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e023      	b.n	8002d02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cba:	f7fe ff0d 	bl	8001ad8 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d914      	bls.n	8002cf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e007      	b.n	8002d02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1dc      	bne.n	8002cba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d14b      	bne.n	8002dbc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d021      	beq.n	8002d82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe ff81 	bl	8001c4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d032      	beq.n	8002db4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d12b      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d80:	e018      	b.n	8002db4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d111      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7fd fcdb 	bl	8000770 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dba:	e00e      	b.n	8002dda <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fabd 	bl	8002348 <HAL_ADC_ErrorCallback>
}
 8002dce:	e004      	b.n	8002dda <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7fd fcef 	bl	80007d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f043 0204 	orr.w	r2, r3, #4
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fa8f 	bl	8002348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <LL_ADC_IsEnabled>:
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <LL_ADC_IsEnabled+0x18>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <LL_ADC_IsEnabled+0x1a>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_StartCalibration>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002e6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_IsCalibrationOnGoing>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e9e:	d101      	bne.n	8002ea4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d101      	bne.n	8002eca <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e04d      	b.n	8002f90 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fea5 	bl	8002c4c <ADC_Disable>
 8002f02:	4603      	mov	r3, r0
 8002f04:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d136      	bne.n	8002f7a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f14:	f023 0302 	bic.w	r3, r3, #2
 8002f18:	f043 0202 	orr.w	r2, r3, #2
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff96 	bl	8002e58 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f2c:	e014      	b.n	8002f58 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002f3a:	d30d      	bcc.n	8002f58 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f40:	f023 0312 	bic.w	r3, r3, #18
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e01b      	b.n	8002f90 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff94 	bl	8002e8a <LL_ADC_IsCalibrationOnGoing>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e2      	bne.n	8002f2e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	f023 0303 	bic.w	r3, r3, #3
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f78:	e005      	b.n	8002f86 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	f043 0210 	orr.w	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b09f      	sub	sp, #124	@ 0x7c
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e093      	b.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a47      	ldr	r2, [pc, #284]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d102      	bne.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fd0:	4b46      	ldr	r3, [pc, #280]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	e001      	b.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e072      	b.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff59 	bl	8002eb2 <LL_ADC_REG_IsConversionOngoing>
 8003000:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff53 	bl	8002eb2 <LL_ADC_REG_IsConversionOngoing>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d154      	bne.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003014:	2b00      	cmp	r3, #0
 8003016:	d151      	bne.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003018:	4b35      	ldr	r3, [pc, #212]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800301a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d02c      	beq.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003036:	035b      	lsls	r3, r3, #13
 8003038:	430b      	orrs	r3, r1
 800303a:	431a      	orrs	r2, r3
 800303c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800303e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003040:	4829      	ldr	r0, [pc, #164]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003042:	f7ff fef6 	bl	8002e32 <LL_ADC_IsEnabled>
 8003046:	4604      	mov	r4, r0
 8003048:	4828      	ldr	r0, [pc, #160]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800304a:	f7ff fef2 	bl	8002e32 <LL_ADC_IsEnabled>
 800304e:	4603      	mov	r3, r0
 8003050:	431c      	orrs	r4, r3
 8003052:	4828      	ldr	r0, [pc, #160]	@ (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003054:	f7ff feed 	bl	8002e32 <LL_ADC_IsEnabled>
 8003058:	4603      	mov	r3, r0
 800305a:	4323      	orrs	r3, r4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d137      	bne.n	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003068:	f023 030f 	bic.w	r3, r3, #15
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	6811      	ldr	r1, [r2, #0]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	6892      	ldr	r2, [r2, #8]
 8003074:	430a      	orrs	r2, r1
 8003076:	431a      	orrs	r2, r3
 8003078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800307a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800307c:	e028      	b.n	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800307e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003088:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800308a:	4817      	ldr	r0, [pc, #92]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800308c:	f7ff fed1 	bl	8002e32 <LL_ADC_IsEnabled>
 8003090:	4604      	mov	r4, r0
 8003092:	4816      	ldr	r0, [pc, #88]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003094:	f7ff fecd 	bl	8002e32 <LL_ADC_IsEnabled>
 8003098:	4603      	mov	r3, r0
 800309a:	431c      	orrs	r4, r3
 800309c:	4815      	ldr	r0, [pc, #84]	@ (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800309e:	f7ff fec8 	bl	8002e32 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4323      	orrs	r3, r4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d112      	bne.n	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030b2:	f023 030f 	bic.w	r3, r3, #15
 80030b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030ba:	e009      	b.n	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80030ce:	e000      	b.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030da:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80030de:	4618      	mov	r0, r3
 80030e0:	377c      	adds	r7, #124	@ 0x7c
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	50040000 	.word	0x50040000
 80030ec:	50040100 	.word	0x50040100
 80030f0:	50040300 	.word	0x50040300
 80030f4:	50040200 	.word	0x50040200

080030f8 <__NVIC_SetPriorityGrouping>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003120:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312a:	4a04      	ldr	r2, [pc, #16]	@ (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	60d3      	str	r3, [r2, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_GetPriorityGrouping>:
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003144:	4b04      	ldr	r3, [pc, #16]	@ (8003158 <__NVIC_GetPriorityGrouping+0x18>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0307 	and.w	r3, r3, #7
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_EnableIRQ>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db0b      	blt.n	8003186 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	@ (8003194 <__NVIC_EnableIRQ+0x38>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	@ (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	@ (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	@ 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	@ 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003264:	d301      	bcc.n	800326a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326a:	4a0a      	ldr	r2, [pc, #40]	@ (8003294 <SysTick_Config+0x40>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003272:	210f      	movs	r1, #15
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f7ff ff8e 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800327c:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <SysTick_Config+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003282:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <SysTick_Config+0x40>)
 8003284:	2207      	movs	r2, #7
 8003286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff29 	bl	80030f8 <__NVIC_SetPriorityGrouping>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032c0:	f7ff ff3e 	bl	8003140 <__NVIC_GetPriorityGrouping>
 80032c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7ff ff8e 	bl	80031ec <NVIC_EncodePriority>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff5d 	bl	8003198 <__NVIC_SetPriority>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff31 	bl	800315c <__NVIC_EnableIRQ>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffa2 	bl	8003254 <SysTick_Config>
 8003310:	4603      	mov	r3, r0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0ac      	b.n	8003488 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f8b2 	bl	800349c <DFSDM_GetChannelFromInstance>
 8003338:	4603      	mov	r3, r0
 800333a:	4a55      	ldr	r2, [pc, #340]	@ (8003490 <HAL_DFSDM_ChannelInit+0x174>)
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e09f      	b.n	8003488 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fd ffa3 	bl	8001294 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800334e:	4b51      	ldr	r3, [pc, #324]	@ (8003494 <HAL_DFSDM_ChannelInit+0x178>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a4f      	ldr	r2, [pc, #316]	@ (8003494 <HAL_DFSDM_ChannelInit+0x178>)
 8003356:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003358:	4b4e      	ldr	r3, [pc, #312]	@ (8003494 <HAL_DFSDM_ChannelInit+0x178>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d125      	bne.n	80033ac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003360:	4b4d      	ldr	r3, [pc, #308]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a4c      	ldr	r2, [pc, #304]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003366:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800336a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800336c:	4b4a      	ldr	r3, [pc, #296]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4948      	ldr	r1, [pc, #288]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800337a:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a46      	ldr	r2, [pc, #280]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003380:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003384:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	791b      	ldrb	r3, [r3, #4]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800338e:	4b42      	ldr	r3, [pc, #264]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	3b01      	subs	r3, #1
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	493f      	ldr	r1, [pc, #252]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80033a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 80033a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033aa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80033ba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033ca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033d0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 020f 	bic.w	r2, r2, #15
 80033e8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003410:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6899      	ldr	r1, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 0207 	and.w	r2, r2, #7
 800343c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003468:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f810 	bl	800349c <DFSDM_GetChannelFromInstance>
 800347c:	4602      	mov	r2, r0
 800347e:	4904      	ldr	r1, [pc, #16]	@ (8003490 <HAL_DFSDM_ChannelInit+0x174>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000d18 	.word	0x20000d18
 8003494:	20000d14 	.word	0x20000d14
 8003498:	40016000 	.word	0x40016000

0800349c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <DFSDM_GetChannelFromInstance+0x7c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d102      	bne.n	80034b2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e02b      	b.n	800350a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a19      	ldr	r2, [pc, #100]	@ (800351c <DFSDM_GetChannelFromInstance+0x80>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d102      	bne.n	80034c0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e024      	b.n	800350a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <DFSDM_GetChannelFromInstance+0x84>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d102      	bne.n	80034ce <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80034c8:	2302      	movs	r3, #2
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e01d      	b.n	800350a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <DFSDM_GetChannelFromInstance+0x88>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d102      	bne.n	80034dc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80034d6:	2304      	movs	r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e016      	b.n	800350a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a12      	ldr	r2, [pc, #72]	@ (8003528 <DFSDM_GetChannelFromInstance+0x8c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d102      	bne.n	80034ea <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80034e4:	2305      	movs	r3, #5
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e00f      	b.n	800350a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a0f      	ldr	r2, [pc, #60]	@ (800352c <DFSDM_GetChannelFromInstance+0x90>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d102      	bne.n	80034f8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80034f2:	2306      	movs	r3, #6
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e008      	b.n	800350a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <DFSDM_GetChannelFromInstance+0x94>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d102      	bne.n	8003506 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003500:	2307      	movs	r3, #7
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e001      	b.n	800350a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003506:	2303      	movs	r3, #3
 8003508:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40016000 	.word	0x40016000
 800351c:	40016020 	.word	0x40016020
 8003520:	40016040 	.word	0x40016040
 8003524:	40016080 	.word	0x40016080
 8003528:	400160a0 	.word	0x400160a0
 800352c:	400160c0 	.word	0x400160c0
 8003530:	400160e0 	.word	0x400160e0

08003534 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e098      	b.n	8003678 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	4b4d      	ldr	r3, [pc, #308]	@ (8003684 <HAL_DMA_Init+0x150>)
 800354e:	429a      	cmp	r2, r3
 8003550:	d80f      	bhi.n	8003572 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	4b4b      	ldr	r3, [pc, #300]	@ (8003688 <HAL_DMA_Init+0x154>)
 800355a:	4413      	add	r3, r2
 800355c:	4a4b      	ldr	r2, [pc, #300]	@ (800368c <HAL_DMA_Init+0x158>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	009a      	lsls	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a48      	ldr	r2, [pc, #288]	@ (8003690 <HAL_DMA_Init+0x15c>)
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003570:	e00e      	b.n	8003590 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b46      	ldr	r3, [pc, #280]	@ (8003694 <HAL_DMA_Init+0x160>)
 800357a:	4413      	add	r3, r2
 800357c:	4a43      	ldr	r2, [pc, #268]	@ (800368c <HAL_DMA_Init+0x158>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a42      	ldr	r2, [pc, #264]	@ (8003698 <HAL_DMA_Init+0x164>)
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ea:	d039      	beq.n	8003660 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	4a27      	ldr	r2, [pc, #156]	@ (8003690 <HAL_DMA_Init+0x15c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d11a      	bne.n	800362c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035f6:	4b29      	ldr	r3, [pc, #164]	@ (800369c <HAL_DMA_Init+0x168>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	f003 031c 	and.w	r3, r3, #28
 8003602:	210f      	movs	r1, #15
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	4924      	ldr	r1, [pc, #144]	@ (800369c <HAL_DMA_Init+0x168>)
 800360c:	4013      	ands	r3, r2
 800360e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003610:	4b22      	ldr	r3, [pc, #136]	@ (800369c <HAL_DMA_Init+0x168>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	f003 031c 	and.w	r3, r3, #28
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	491d      	ldr	r1, [pc, #116]	@ (800369c <HAL_DMA_Init+0x168>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
 800362a:	e019      	b.n	8003660 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800362c:	4b1c      	ldr	r3, [pc, #112]	@ (80036a0 <HAL_DMA_Init+0x16c>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003634:	f003 031c 	and.w	r3, r3, #28
 8003638:	210f      	movs	r1, #15
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	4917      	ldr	r1, [pc, #92]	@ (80036a0 <HAL_DMA_Init+0x16c>)
 8003642:	4013      	ands	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <HAL_DMA_Init+0x16c>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	f003 031c 	and.w	r3, r3, #28
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	4911      	ldr	r1, [pc, #68]	@ (80036a0 <HAL_DMA_Init+0x16c>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40020407 	.word	0x40020407
 8003688:	bffdfff8 	.word	0xbffdfff8
 800368c:	cccccccd 	.word	0xcccccccd
 8003690:	40020000 	.word	0x40020000
 8003694:	bffdfbf8 	.word	0xbffdfbf8
 8003698:	40020400 	.word	0x40020400
 800369c:	400200a8 	.word	0x400200a8
 80036a0:	400204a8 	.word	0x400204a8

080036a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Start_IT+0x20>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e04b      	b.n	800375c <HAL_DMA_Start_IT+0xb8>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d13a      	bne.n	800374e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f8e0 	bl	80038c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 020e 	orr.w	r2, r2, #14
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00f      	b.n	800373c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0204 	bic.w	r2, r2, #4
 800372a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 020a 	orr.w	r2, r2, #10
 800373a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e005      	b.n	800375a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003756:	2302      	movs	r3, #2
 8003758:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003780:	f003 031c 	and.w	r3, r3, #28
 8003784:	2204      	movs	r2, #4
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d026      	beq.n	80037de <HAL_DMA_IRQHandler+0x7a>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d021      	beq.n	80037de <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0204 	bic.w	r2, r2, #4
 80037b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037bc:	f003 021c 	and.w	r2, r3, #28
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	2104      	movs	r1, #4
 80037c6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d071      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037dc:	e06c      	b.n	80038b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	f003 031c 	and.w	r3, r3, #28
 80037e6:	2202      	movs	r2, #2
 80037e8:	409a      	lsls	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02e      	beq.n	8003850 <HAL_DMA_IRQHandler+0xec>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d029      	beq.n	8003850 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 020a 	bic.w	r2, r2, #10
 8003818:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	f003 021c 	and.w	r2, r3, #28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2102      	movs	r1, #2
 8003830:	fa01 f202 	lsl.w	r2, r1, r2
 8003834:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d038      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800384e:	e033      	b.n	80038b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003854:	f003 031c 	and.w	r3, r3, #28
 8003858:	2208      	movs	r2, #8
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02a      	beq.n	80038ba <HAL_DMA_IRQHandler+0x156>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d025      	beq.n	80038ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 020e 	bic.w	r2, r2, #14
 800387c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f003 021c 	and.w	r2, r3, #28
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2101      	movs	r1, #1
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
}
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	f003 021c 	and.w	r2, r3, #28
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f202 	lsl.w	r2, r1, r2
 80038e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d108      	bne.n	8003906 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003904:	e007      	b.n	8003916 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	60da      	str	r2, [r3, #12]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003932:	e17f      	b.n	8003c34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8171 	beq.w	8003c2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d005      	beq.n	8003964 <HAL_GPIO_Init+0x40>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d130      	bne.n	80039c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800399a:	2201      	movs	r2, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0201 	and.w	r2, r3, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d118      	bne.n	8003a04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039d8:	2201      	movs	r2, #1
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	08db      	lsrs	r3, r3, #3
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d017      	beq.n	8003a40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d123      	bne.n	8003a94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	220f      	movs	r2, #15
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	08da      	lsrs	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3208      	adds	r2, #8
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80ac 	beq.w	8003c2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8003c54 <HAL_GPIO_Init+0x330>)
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ada:	4a5e      	ldr	r2, [pc, #376]	@ (8003c54 <HAL_GPIO_Init+0x330>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c54 <HAL_GPIO_Init+0x330>)
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003aee:	4a5a      	ldr	r2, [pc, #360]	@ (8003c58 <HAL_GPIO_Init+0x334>)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	3302      	adds	r3, #2
 8003af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	220f      	movs	r2, #15
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b18:	d025      	beq.n	8003b66 <HAL_GPIO_Init+0x242>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c5c <HAL_GPIO_Init+0x338>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01f      	beq.n	8003b62 <HAL_GPIO_Init+0x23e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4e      	ldr	r2, [pc, #312]	@ (8003c60 <HAL_GPIO_Init+0x33c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0x23a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003c64 <HAL_GPIO_Init+0x340>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x236>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4c      	ldr	r2, [pc, #304]	@ (8003c68 <HAL_GPIO_Init+0x344>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x232>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c6c <HAL_GPIO_Init+0x348>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x22e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4a      	ldr	r2, [pc, #296]	@ (8003c70 <HAL_GPIO_Init+0x34c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x22a>
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	e00c      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b4e:	2307      	movs	r3, #7
 8003b50:	e00a      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b52:	2305      	movs	r3, #5
 8003b54:	e008      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b56:	2304      	movs	r3, #4
 8003b58:	e006      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e004      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e002      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_GPIO_Init+0x244>
 8003b66:	2300      	movs	r3, #0
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	f002 0203 	and.w	r2, r2, #3
 8003b6e:	0092      	lsls	r2, r2, #2
 8003b70:	4093      	lsls	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b78:	4937      	ldr	r1, [pc, #220]	@ (8003c58 <HAL_GPIO_Init+0x334>)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b86:	4b3b      	ldr	r3, [pc, #236]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003baa:	4a32      	ldr	r2, [pc, #200]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bb0:	4b30      	ldr	r3, [pc, #192]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bd4:	4a27      	ldr	r2, [pc, #156]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bda:	4b26      	ldr	r3, [pc, #152]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c28:	4a12      	ldr	r2, [pc, #72]	@ (8003c74 <HAL_GPIO_Init+0x350>)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f47f ae78 	bne.w	8003934 <HAL_GPIO_Init+0x10>
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	48000400 	.word	0x48000400
 8003c60:	48000800 	.word	0x48000800
 8003c64:	48000c00 	.word	0x48000c00
 8003c68:	48001000 	.word	0x48001000
 8003c6c:	48001400 	.word	0x48001400
 8003c70:	48001800 	.word	0x48001800
 8003c74:	40010400 	.word	0x40010400

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c94:	e002      	b.n	8003c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cbe:	4a05      	ldr	r2, [pc, #20]	@ (8003cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f806 	bl	8003cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e08d      	b.n	8003e1c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7fd fb21 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2224      	movs	r2, #36	@ 0x24
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d107      	bne.n	8003d68 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	e006      	b.n	8003d76 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d108      	bne.n	8003d90 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e007      	b.n	8003da0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69d9      	ldr	r1, [r3, #28]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d138      	bne.n	8003eac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e032      	b.n	8003eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	@ 0x24
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e000      	b.n	8003eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003eac:	2302      	movs	r3, #2
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d139      	bne.n	8003f44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e033      	b.n	8003f46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2224      	movs	r2, #36	@ 0x24
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af02      	add	r7, sp, #8
 8003f58:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e101      	b.n	8004168 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fd fb79 	bl	8001670 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2203      	movs	r2, #3
 8003f82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 fef1 	bl	8006d78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7c1a      	ldrb	r2, [r3, #16]
 8003f9e:	f88d 2000 	strb.w	r2, [sp]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fa6:	f002 feba 	bl	8006d1e <USB_CoreInit>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0d5      	b.n	8004168 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f002 fee9 	bl	8006d9a <USB_SetCurrentMode>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0c6      	b.n	8004168 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
 8003fde:	e04a      	b.n	8004076 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	3315      	adds	r3, #21
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	3314      	adds	r3, #20
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004008:	7bfa      	ldrb	r2, [r7, #15]
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	b298      	uxth	r0, r3
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	332e      	adds	r3, #46	@ 0x2e
 800401c:	4602      	mov	r2, r0
 800401e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	3318      	adds	r3, #24
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	331c      	adds	r3, #28
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	3320      	adds	r3, #32
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	3324      	adds	r3, #36	@ 0x24
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	3301      	adds	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	791b      	ldrb	r3, [r3, #4]
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	429a      	cmp	r2, r3
 800407e:	d3af      	bcc.n	8003fe0 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e044      	b.n	8004110 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040b2:	7bfa      	ldrb	r2, [r7, #15]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	3301      	adds	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	791b      	ldrb	r3, [r3, #4]
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	429a      	cmp	r2, r3
 8004118:	d3b5      	bcc.n	8004086 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7c1a      	ldrb	r2, [r3, #16]
 8004122:	f88d 2000 	strb.w	r2, [sp]
 8004126:	3304      	adds	r3, #4
 8004128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412a:	f002 fe83 	bl	8006e34 <USB_DevInit>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e013      	b.n	8004168 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7b1b      	ldrb	r3, [r3, #12]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f80a 	bl	8004170 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f003 f828 	bl	80071b6 <USB_DevDisconnect>

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	f043 0303 	orr.w	r3, r3, #3
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041bc:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a04      	ldr	r2, [pc, #16]	@ (80041d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041c6:	6013      	str	r3, [r2, #0]
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40007000 	.word	0x40007000

080041d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041dc:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40007000 	.word	0x40007000

080041f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004202:	d130      	bne.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004204:	4b23      	ldr	r3, [pc, #140]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800420c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004210:	d038      	beq.n	8004284 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004212:	4b20      	ldr	r3, [pc, #128]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800421a:	4a1e      	ldr	r2, [pc, #120]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004220:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004222:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2232      	movs	r2, #50	@ 0x32
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	4a1b      	ldr	r2, [pc, #108]	@ (800429c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	0c9b      	lsrs	r3, r3, #18
 8004234:	3301      	adds	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004238:	e002      	b.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b01      	subs	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004240:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424c:	d102      	bne.n	8004254 <HAL_PWREx_ControlVoltageScaling+0x60>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f2      	bne.n	800423a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004254:	4b0f      	ldr	r3, [pc, #60]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004260:	d110      	bne.n	8004284 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e00f      	b.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004266:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004272:	d007      	beq.n	8004284 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004274:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800427c:	4a05      	ldr	r2, [pc, #20]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800427e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004282:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40007000 	.word	0x40007000
 8004298:	20000000 	.word	0x20000000
 800429c:	431bde83 	.word	0x431bde83

080042a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a04      	ldr	r2, [pc, #16]	@ (80042bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80042aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ae:	6053      	str	r3, [r2, #4]
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40007000 	.word	0x40007000

080042c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80042c8:	f7fd fc06 	bl	8001ad8 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e063      	b.n	80043a0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fd f893 	bl	8001418 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80042f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f858 	bl	80043ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	3b01      	subs	r3, #1
 800430c:	021a      	lsls	r2, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	2120      	movs	r1, #32
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f850 	bl	80043c8 <QSPI_WaitFlagStateUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800432c:	7afb      	ldrb	r3, [r7, #11]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d131      	bne.n	8004396 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800433c:	f023 0310 	bic.w	r3, r3, #16
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6852      	ldr	r2, [r2, #4]
 8004344:	0611      	lsls	r1, r2, #24
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68d2      	ldr	r2, [r2, #12]
 800434a:	4311      	orrs	r1, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	430b      	orrs	r3, r1
 8004352:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	4b13      	ldr	r3, [pc, #76]	@ (80043a8 <HAL_QSPI_Init+0xe8>)
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6912      	ldr	r2, [r2, #16]
 8004362:	0411      	lsls	r1, r2, #16
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6952      	ldr	r2, [r2, #20]
 8004368:	4311      	orrs	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6992      	ldr	r2, [r2, #24]
 800436e:	4311      	orrs	r1, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	430b      	orrs	r3, r1
 8004376:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800439e:	7afb      	ldrb	r3, [r7, #11]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	ffe0f8fe 	.word	0xffe0f8fe

080043ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043d8:	e01a      	b.n	8004410 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d016      	beq.n	8004410 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fd fb79 	bl	8001ad8 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2204      	movs	r2, #4
 80043fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e00e      	b.n	800442e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	429a      	cmp	r2, r3
 800442a:	d1d6      	bne.n	80043da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e3ca      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444a:	4b97      	ldr	r3, [pc, #604]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004454:	4b94      	ldr	r3, [pc, #592]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80e4 	beq.w	8004634 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <HAL_RCC_OscConfig+0x4a>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	f040 808b 	bne.w	8004590 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 8087 	bne.w	8004590 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004482:	4b89      	ldr	r3, [pc, #548]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_RCC_OscConfig+0x62>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e3a2      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	4b82      	ldr	r3, [pc, #520]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <HAL_RCC_OscConfig+0x7c>
 80044aa:	4b7f      	ldr	r3, [pc, #508]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044b2:	e005      	b.n	80044c0 <HAL_RCC_OscConfig+0x88>
 80044b4:	4b7c      	ldr	r3, [pc, #496]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80044b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d223      	bcs.n	800450c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fd55 	bl	8004f78 <RCC_SetFlashLatencyFromMSIRange>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e383      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044d8:	4b73      	ldr	r3, [pc, #460]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a72      	ldr	r2, [pc, #456]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80044de:	f043 0308 	orr.w	r3, r3, #8
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b70      	ldr	r3, [pc, #448]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	496d      	ldr	r1, [pc, #436]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f6:	4b6c      	ldr	r3, [pc, #432]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	4968      	ldr	r1, [pc, #416]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004506:	4313      	orrs	r3, r2
 8004508:	604b      	str	r3, [r1, #4]
 800450a:	e025      	b.n	8004558 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800450c:	4b66      	ldr	r3, [pc, #408]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a65      	ldr	r2, [pc, #404]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004512:	f043 0308 	orr.w	r3, r3, #8
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b63      	ldr	r3, [pc, #396]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4960      	ldr	r1, [pc, #384]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452a:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	495b      	ldr	r1, [pc, #364]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fd15 	bl	8004f78 <RCC_SetFlashLatencyFromMSIRange>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e343      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004558:	f000 fc4a 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b52      	ldr	r3, [pc, #328]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	4950      	ldr	r1, [pc, #320]	@ (80046ac <HAL_RCC_OscConfig+0x274>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
 8004574:	4a4e      	ldr	r2, [pc, #312]	@ (80046b0 <HAL_RCC_OscConfig+0x278>)
 8004576:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004578:	4b4e      	ldr	r3, [pc, #312]	@ (80046b4 <HAL_RCC_OscConfig+0x27c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fd fa5b 	bl	8001a38 <HAL_InitTick>
 8004582:	4603      	mov	r3, r0
 8004584:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d052      	beq.n	8004632 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	e327      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d032      	beq.n	80045fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004598:	4b43      	ldr	r3, [pc, #268]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a42      	ldr	r2, [pc, #264]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045a4:	f7fd fa98 	bl	8001ad8 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ac:	f7fd fa94 	bl	8001ad8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e310      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045be:	4b3a      	ldr	r3, [pc, #232]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ca:	4b37      	ldr	r3, [pc, #220]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a36      	ldr	r2, [pc, #216]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80045d0:	f043 0308 	orr.w	r3, r3, #8
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b34      	ldr	r3, [pc, #208]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	4931      	ldr	r1, [pc, #196]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045e8:	4b2f      	ldr	r3, [pc, #188]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	492c      	ldr	r1, [pc, #176]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
 80045fc:	e01a      	b.n	8004634 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045fe:	4b2a      	ldr	r3, [pc, #168]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a29      	ldr	r2, [pc, #164]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800460a:	f7fd fa65 	bl	8001ad8 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004612:	f7fd fa61 	bl	8001ad8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e2dd      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004624:	4b20      	ldr	r3, [pc, #128]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <HAL_RCC_OscConfig+0x1da>
 8004630:	e000      	b.n	8004634 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004632:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d074      	beq.n	800472a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b08      	cmp	r3, #8
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x21a>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b0c      	cmp	r3, #12
 800464a:	d10e      	bne.n	800466a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d10b      	bne.n	800466a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004652:	4b15      	ldr	r3, [pc, #84]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d064      	beq.n	8004728 <HAL_RCC_OscConfig+0x2f0>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d160      	bne.n	8004728 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e2ba      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x24a>
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a0b      	ldr	r2, [pc, #44]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e026      	b.n	80046d0 <HAL_RCC_OscConfig+0x298>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800468a:	d115      	bne.n	80046b8 <HAL_RCC_OscConfig+0x280>
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a05      	ldr	r2, [pc, #20]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004692:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	4b03      	ldr	r3, [pc, #12]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a02      	ldr	r2, [pc, #8]	@ (80046a8 <HAL_RCC_OscConfig+0x270>)
 800469e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	e014      	b.n	80046d0 <HAL_RCC_OscConfig+0x298>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	0800a7dc 	.word	0x0800a7dc
 80046b0:	20000000 	.word	0x20000000
 80046b4:	20000004 	.word	0x20000004
 80046b8:	4ba0      	ldr	r3, [pc, #640]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a9f      	ldr	r2, [pc, #636]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80046be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	4b9d      	ldr	r3, [pc, #628]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a9c      	ldr	r2, [pc, #624]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80046ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d013      	beq.n	8004700 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd f9fe 	bl	8001ad8 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fd f9fa 	bl	8001ad8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	@ 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e276      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f2:	4b92      	ldr	r3, [pc, #584]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x2a8>
 80046fe:	e014      	b.n	800472a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd f9ea 	bl	8001ad8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004708:	f7fd f9e6 	bl	8001ad8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	@ 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e262      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800471a:	4b88      	ldr	r3, [pc, #544]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x2d0>
 8004726:	e000      	b.n	800472a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d060      	beq.n	80047f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b04      	cmp	r3, #4
 800473a:	d005      	beq.n	8004748 <HAL_RCC_OscConfig+0x310>
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b0c      	cmp	r3, #12
 8004740:	d119      	bne.n	8004776 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d116      	bne.n	8004776 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004748:	4b7c      	ldr	r3, [pc, #496]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_OscConfig+0x328>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e23f      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004760:	4b76      	ldr	r3, [pc, #472]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	4973      	ldr	r1, [pc, #460]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004774:	e040      	b.n	80047f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d023      	beq.n	80047c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800477e:	4b6f      	ldr	r3, [pc, #444]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6e      	ldr	r2, [pc, #440]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fd f9a5 	bl	8001ad8 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004792:	f7fd f9a1 	bl	8001ad8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e21d      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a4:	4b65      	ldr	r3, [pc, #404]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b0:	4b62      	ldr	r3, [pc, #392]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	061b      	lsls	r3, r3, #24
 80047be:	495f      	ldr	r1, [pc, #380]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
 80047c4:	e018      	b.n	80047f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c6:	4b5d      	ldr	r3, [pc, #372]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a5c      	ldr	r2, [pc, #368]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80047cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd f981 	bl	8001ad8 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047da:	f7fd f97d 	bl	8001ad8 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e1f9      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047ec:	4b53      	ldr	r3, [pc, #332]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d03c      	beq.n	800487e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01c      	beq.n	8004846 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480c:	4b4b      	ldr	r3, [pc, #300]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 800480e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004812:	4a4a      	ldr	r2, [pc, #296]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd f95c 	bl	8001ad8 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004824:	f7fd f958 	bl	8001ad8 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e1d4      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004836:	4b41      	ldr	r3, [pc, #260]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ef      	beq.n	8004824 <HAL_RCC_OscConfig+0x3ec>
 8004844:	e01b      	b.n	800487e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004846:	4b3d      	ldr	r3, [pc, #244]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800484c:	4a3b      	ldr	r2, [pc, #236]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd f93f 	bl	8001ad8 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485e:	f7fd f93b 	bl	8001ad8 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e1b7      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004870:	4b32      	ldr	r3, [pc, #200]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1ef      	bne.n	800485e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80a6 	beq.w	80049d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488c:	2300      	movs	r3, #0
 800488e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004890:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10d      	bne.n	80048b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	4b27      	ldr	r3, [pc, #156]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	4a26      	ldr	r2, [pc, #152]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a8:	4b24      	ldr	r3, [pc, #144]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b4:	2301      	movs	r3, #1
 80048b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048b8:	4b21      	ldr	r3, [pc, #132]	@ (8004940 <HAL_RCC_OscConfig+0x508>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d118      	bne.n	80048f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004940 <HAL_RCC_OscConfig+0x508>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <HAL_RCC_OscConfig+0x508>)
 80048ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d0:	f7fd f902 	bl	8001ad8 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d8:	f7fd f8fe 	bl	8001ad8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e17a      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ea:	4b15      	ldr	r3, [pc, #84]	@ (8004940 <HAL_RCC_OscConfig+0x508>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d108      	bne.n	8004910 <HAL_RCC_OscConfig+0x4d8>
 80048fe:	4b0f      	ldr	r3, [pc, #60]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004904:	4a0d      	ldr	r2, [pc, #52]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800490e:	e029      	b.n	8004964 <HAL_RCC_OscConfig+0x52c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b05      	cmp	r3, #5
 8004916:	d115      	bne.n	8004944 <HAL_RCC_OscConfig+0x50c>
 8004918:	4b08      	ldr	r3, [pc, #32]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	4a07      	ldr	r2, [pc, #28]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004920:	f043 0304 	orr.w	r3, r3, #4
 8004924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004928:	4b04      	ldr	r3, [pc, #16]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492e:	4a03      	ldr	r2, [pc, #12]	@ (800493c <HAL_RCC_OscConfig+0x504>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004938:	e014      	b.n	8004964 <HAL_RCC_OscConfig+0x52c>
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
 8004940:	40007000 	.word	0x40007000
 8004944:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	4a9b      	ldr	r2, [pc, #620]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004954:	4b98      	ldr	r3, [pc, #608]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495a:	4a97      	ldr	r2, [pc, #604]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 800495c:	f023 0304 	bic.w	r3, r3, #4
 8004960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d016      	beq.n	800499a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fd f8b4 	bl	8001ad8 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fd f8b0 	bl	8001ad8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e12a      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498a:	4b8b      	ldr	r3, [pc, #556]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0ed      	beq.n	8004974 <HAL_RCC_OscConfig+0x53c>
 8004998:	e015      	b.n	80049c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7fd f89d 	bl	8001ad8 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049a0:	e00a      	b.n	80049b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7fd f899 	bl	8001ad8 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e113      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049b8:	4b7f      	ldr	r3, [pc, #508]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ed      	bne.n	80049a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c6:	7ffb      	ldrb	r3, [r7, #31]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049cc:	4b7a      	ldr	r3, [pc, #488]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d0:	4a79      	ldr	r2, [pc, #484]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 80049d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80fe 	beq.w	8004bde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	f040 80d0 	bne.w	8004b8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049ec:	4b72      	ldr	r3, [pc, #456]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 0203 	and.w	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d130      	bne.n	8004a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d127      	bne.n	8004a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d11f      	bne.n	8004a62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a2c:	2a07      	cmp	r2, #7
 8004a2e:	bf14      	ite	ne
 8004a30:	2201      	movne	r2, #1
 8004a32:	2200      	moveq	r2, #0
 8004a34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d113      	bne.n	8004a62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	3b01      	subs	r3, #1
 8004a48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d109      	bne.n	8004a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d06e      	beq.n	8004b40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	d069      	beq.n	8004b3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a68:	4b53      	ldr	r3, [pc, #332]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a74:	4b50      	ldr	r3, [pc, #320]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0ad      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a84:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a4b      	ldr	r2, [pc, #300]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a90:	f7fd f822 	bl	8001ad8 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fd f81e 	bl	8001ad8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e09a      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aaa:	4b43      	ldr	r3, [pc, #268]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab6:	4b40      	ldr	r3, [pc, #256]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	4b40      	ldr	r3, [pc, #256]	@ (8004bbc <HAL_RCC_OscConfig+0x784>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ac6:	3a01      	subs	r2, #1
 8004ac8:	0112      	lsls	r2, r2, #4
 8004aca:	4311      	orrs	r1, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ad0:	0212      	lsls	r2, r2, #8
 8004ad2:	4311      	orrs	r1, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ad8:	0852      	lsrs	r2, r2, #1
 8004ada:	3a01      	subs	r2, #1
 8004adc:	0552      	lsls	r2, r2, #21
 8004ade:	4311      	orrs	r1, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ae4:	0852      	lsrs	r2, r2, #1
 8004ae6:	3a01      	subs	r2, #1
 8004ae8:	0652      	lsls	r2, r2, #25
 8004aea:	4311      	orrs	r1, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004af0:	0912      	lsrs	r2, r2, #4
 8004af2:	0452      	lsls	r2, r2, #17
 8004af4:	430a      	orrs	r2, r1
 8004af6:	4930      	ldr	r1, [pc, #192]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004afc:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b08:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b14:	f7fc ffe0 	bl	8001ad8 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fc ffdc 	bl	8001ad8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e058      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2e:	4b22      	ldr	r3, [pc, #136]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b3a:	e050      	b.n	8004bde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e04f      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b40:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d148      	bne.n	8004bde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a19      	ldr	r2, [pc, #100]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b58:	4b17      	ldr	r3, [pc, #92]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a16      	ldr	r2, [pc, #88]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b64:	f7fc ffb8 	bl	8001ad8 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fc ffb4 	bl	8001ad8 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e030      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x734>
 8004b8a:	e028      	b.n	8004bde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	d023      	beq.n	8004bda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b92:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a08      	ldr	r2, [pc, #32]	@ (8004bb8 <HAL_RCC_OscConfig+0x780>)
 8004b98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fc ff9b 	bl	8001ad8 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba4:	e00c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fc ff97 	bl	8001ad8 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d905      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e013      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc0:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <HAL_RCC_OscConfig+0x7b0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ec      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <HAL_RCC_OscConfig+0x7b0>)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	4905      	ldr	r1, [pc, #20]	@ (8004be8 <HAL_RCC_OscConfig+0x7b0>)
 8004bd2:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <HAL_RCC_OscConfig+0x7b4>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60cb      	str	r3, [r1, #12]
 8004bd8:	e001      	b.n	8004bde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	feeefffc 	.word	0xfeeefffc

08004bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0e7      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b75      	ldr	r3, [pc, #468]	@ (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d910      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b72      	ldr	r3, [pc, #456]	@ (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 0207 	bic.w	r2, r3, #7
 8004c1a:	4970      	ldr	r1, [pc, #448]	@ (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b6e      	ldr	r3, [pc, #440]	@ (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0cf      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d010      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	4b66      	ldr	r3, [pc, #408]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d908      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	4b63      	ldr	r3, [pc, #396]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4960      	ldr	r1, [pc, #384]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d04c      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c76:	4b5a      	ldr	r3, [pc, #360]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d121      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0a6      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c8e:	4b54      	ldr	r3, [pc, #336]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d115      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e09a      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e08e      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e086      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc6:	4b46      	ldr	r3, [pc, #280]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f023 0203 	bic.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4943      	ldr	r1, [pc, #268]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd8:	f7fc fefe 	bl	8001ad8 <HAL_GetTick>
 8004cdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce0:	f7fc fefa 	bl	8001ad8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e06e      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 020c 	and.w	r2, r3, #12
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d1eb      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	4b31      	ldr	r3, [pc, #196]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d208      	bcs.n	8004d36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d24:	4b2e      	ldr	r3, [pc, #184]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	492b      	ldr	r1, [pc, #172]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d36:	4b29      	ldr	r3, [pc, #164]	@ (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d210      	bcs.n	8004d66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d44:	4b25      	ldr	r3, [pc, #148]	@ (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 0207 	bic.w	r2, r3, #7
 8004d4c:	4923      	ldr	r1, [pc, #140]	@ (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d54:	4b21      	ldr	r3, [pc, #132]	@ (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e036      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d72:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	4918      	ldr	r1, [pc, #96]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d90:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4910      	ldr	r1, [pc, #64]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004da4:	f000 f824 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	490b      	ldr	r1, [pc, #44]	@ (8004de4 <HAL_RCC_ClockConfig+0x1f4>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	4a09      	ldr	r2, [pc, #36]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f8>)
 8004dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dc4:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <HAL_RCC_ClockConfig+0x1fc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fc fe35 	bl	8001a38 <HAL_InitTick>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40022000 	.word	0x40022000
 8004de0:	40021000 	.word	0x40021000
 8004de4:	0800a7dc 	.word	0x0800a7dc
 8004de8:	20000000 	.word	0x20000000
 8004dec:	20000004 	.word	0x20000004

08004df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	@ 0x24
 8004df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e08:	4b3b      	ldr	r3, [pc, #236]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x34>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d121      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d11e      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e24:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e30:	4b31      	ldr	r3, [pc, #196]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e005      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e40:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e60:	e00a      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d102      	bne.n	8004e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e68:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e004      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e74:	4b23      	ldr	r3, [pc, #140]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d134      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d003      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0xac>
 8004e94:	e005      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e96:	4b1a      	ldr	r3, [pc, #104]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e98:	617b      	str	r3, [r7, #20]
      break;
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e9c:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e9e:	617b      	str	r3, [r7, #20]
      break;
 8004ea0:	e002      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	617b      	str	r3, [r7, #20]
      break;
 8004ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea8:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eb6:	4b10      	ldr	r3, [pc, #64]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	fb03 f202 	mul.w	r2, r3, r2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	0e5b      	lsrs	r3, r3, #25
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	3301      	adds	r3, #1
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3724      	adds	r7, #36	@ 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0800a7f4 	.word	0x0800a7f4
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	007a1200 	.word	0x007a1200

08004f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000000 	.word	0x20000000

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4904      	ldr	r1, [pc, #16]	@ (8004f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000
 8004f48:	0800a7ec 	.word	0x0800a7ec

08004f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f50:	f7ff ffda 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0adb      	lsrs	r3, r3, #11
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4904      	ldr	r1, [pc, #16]	@ (8004f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	0800a7ec 	.word	0x0800a7ec

08004f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f84:	4b2a      	ldr	r3, [pc, #168]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f90:	f7ff f922 	bl	80041d8 <HAL_PWREx_GetVoltageRange>
 8004f94:	6178      	str	r0, [r7, #20]
 8004f96:	e014      	b.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f98:	4b25      	ldr	r3, [pc, #148]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9c:	4a24      	ldr	r2, [pc, #144]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fa4:	4b22      	ldr	r3, [pc, #136]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb0:	f7ff f912 	bl	80041d8 <HAL_PWREx_GetVoltageRange>
 8004fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fba:	4a1d      	ldr	r2, [pc, #116]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc8:	d10b      	bne.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b80      	cmp	r3, #128	@ 0x80
 8004fce:	d919      	bls.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004fd4:	d902      	bls.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e013      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fdc:	2301      	movs	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e010      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b80      	cmp	r3, #128	@ 0x80
 8004fe6:	d902      	bls.n	8004fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fe8:	2303      	movs	r3, #3
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e00a      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b80      	cmp	r3, #128	@ 0x80
 8004ff2:	d102      	bne.n	8004ffa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e004      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b70      	cmp	r3, #112	@ 0x70
 8004ffe:	d101      	bne.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005000:	2301      	movs	r3, #1
 8005002:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005004:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 0207 	bic.w	r2, r3, #7
 800500c:	4909      	ldr	r1, [pc, #36]	@ (8005034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005014:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	40022000 	.word	0x40022000

08005038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005040:	2300      	movs	r3, #0
 8005042:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005044:	2300      	movs	r3, #0
 8005046:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005050:	2b00      	cmp	r3, #0
 8005052:	d041      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005058:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800505c:	d02a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800505e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005062:	d824      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005064:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005068:	d008      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800506a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800506e:	d81e      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005074:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005078:	d010      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800507a:	e018      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800507c:	4b86      	ldr	r3, [pc, #536]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a85      	ldr	r2, [pc, #532]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005086:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005088:	e015      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f000 facb 	bl	800562c <RCCEx_PLLSAI1_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800509a:	e00c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3320      	adds	r3, #32
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fbb6 	bl	8005814 <RCCEx_PLLSAI2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	74fb      	strb	r3, [r7, #19]
      break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80050b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050bc:	4b76      	ldr	r3, [pc, #472]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050ca:	4973      	ldr	r1, [pc, #460]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80050d2:	e001      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d041      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050ec:	d02a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80050ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050f2:	d824      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050f8:	d008      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050fe:	d81e      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005108:	d010      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800510a:	e018      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800510c:	4b62      	ldr	r3, [pc, #392]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a61      	ldr	r2, [pc, #388]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005116:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005118:	e015      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fa83 	bl	800562c <RCCEx_PLLSAI1_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800512a:	e00c      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3320      	adds	r3, #32
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fb6e 	bl	8005814 <RCCEx_PLLSAI2_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800513c:	e003      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	74fb      	strb	r3, [r7, #19]
      break;
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800514c:	4b52      	ldr	r3, [pc, #328]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005152:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800515a:	494f      	ldr	r1, [pc, #316]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005162:	e001      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a0 	beq.w	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800517a:	4b47      	ldr	r3, [pc, #284]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00d      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005190:	4b41      	ldr	r3, [pc, #260]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005194:	4a40      	ldr	r2, [pc, #256]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800519a:	6593      	str	r3, [r2, #88]	@ 0x58
 800519c:	4b3e      	ldr	r3, [pc, #248]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a8:	2301      	movs	r3, #1
 80051aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ac:	4b3b      	ldr	r3, [pc, #236]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3a      	ldr	r2, [pc, #232]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051b8:	f7fc fc8e 	bl	8001ad8 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051be:	e009      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c0:	f7fc fc8a 	bl	8001ad8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d902      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	74fb      	strb	r3, [r7, #19]
        break;
 80051d2:	e005      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051d4:	4b31      	ldr	r3, [pc, #196]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0ef      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d15c      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01f      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	429a      	cmp	r2, r3
 8005202:	d019      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005204:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800520e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005210:	4b21      	ldr	r3, [pc, #132]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005216:	4a20      	ldr	r2, [pc, #128]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800521c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005220:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	4a1c      	ldr	r2, [pc, #112]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800522c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005230:	4a19      	ldr	r2, [pc, #100]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fc fc49 	bl	8001ad8 <HAL_GetTick>
 8005246:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005248:	e00b      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524a:	f7fc fc45 	bl	8001ad8 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005258:	4293      	cmp	r3, r2
 800525a:	d902      	bls.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	74fb      	strb	r3, [r7, #19]
            break;
 8005260:	e006      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ec      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10c      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005276:	4b08      	ldr	r3, [pc, #32]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005286:	4904      	ldr	r1, [pc, #16]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800528e:	e009      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	74bb      	strb	r3, [r7, #18]
 8005294:	e006      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7cfb      	ldrb	r3, [r7, #19]
 80052a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052a4:	7c7b      	ldrb	r3, [r7, #17]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d105      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052aa:	4b9e      	ldr	r3, [pc, #632]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ae:	4a9d      	ldr	r2, [pc, #628]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052c2:	4b98      	ldr	r3, [pc, #608]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c8:	f023 0203 	bic.w	r2, r3, #3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	4994      	ldr	r1, [pc, #592]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052e4:	4b8f      	ldr	r3, [pc, #572]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f023 020c 	bic.w	r2, r3, #12
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f2:	498c      	ldr	r1, [pc, #560]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005306:	4b87      	ldr	r3, [pc, #540]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005314:	4983      	ldr	r1, [pc, #524]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005328:	4b7e      	ldr	r3, [pc, #504]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005336:	497b      	ldr	r1, [pc, #492]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800534a:	4b76      	ldr	r3, [pc, #472]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005358:	4972      	ldr	r1, [pc, #456]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800536c:	4b6d      	ldr	r3, [pc, #436]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537a:	496a      	ldr	r1, [pc, #424]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800538e:	4b65      	ldr	r3, [pc, #404]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539c:	4961      	ldr	r1, [pc, #388]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053be:	4959      	ldr	r1, [pc, #356]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d2:	4b54      	ldr	r3, [pc, #336]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e0:	4950      	ldr	r1, [pc, #320]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005402:	4948      	ldr	r1, [pc, #288]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005416:	4b43      	ldr	r3, [pc, #268]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005424:	493f      	ldr	r1, [pc, #252]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d028      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005438:	4b3a      	ldr	r3, [pc, #232]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005446:	4937      	ldr	r1, [pc, #220]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005456:	d106      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005458:	4b32      	ldr	r3, [pc, #200]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a31      	ldr	r2, [pc, #196]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005462:	60d3      	str	r3, [r2, #12]
 8005464:	e011      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800546a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800546e:	d10c      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	2101      	movs	r1, #1
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f8d8 	bl	800562c <RCCEx_PLLSAI1_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005486:	7cfb      	ldrb	r3, [r7, #19]
 8005488:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d028      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005496:	4b23      	ldr	r3, [pc, #140]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a4:	491f      	ldr	r1, [pc, #124]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b4:	d106      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054c0:	60d3      	str	r3, [r2, #12]
 80054c2:	e011      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2101      	movs	r1, #1
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f8a9 	bl	800562c <RCCEx_PLLSAI1_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054de:	7cfb      	ldrb	r3, [r7, #19]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02b      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005502:	4908      	ldr	r1, [pc, #32]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005512:	d109      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b03      	ldr	r3, [pc, #12]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a02      	ldr	r2, [pc, #8]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
 8005520:	e014      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800552c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	2101      	movs	r1, #1
 8005538:	4618      	mov	r0, r3
 800553a:	f000 f877 	bl	800562c <RCCEx_PLLSAI1_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005542:	7cfb      	ldrb	r3, [r7, #19]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02f      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005558:	4b2b      	ldr	r3, [pc, #172]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005566:	4928      	ldr	r1, [pc, #160]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005576:	d10d      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	2102      	movs	r1, #2
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f854 	bl	800562c <RCCEx_PLLSAI1_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d014      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	74bb      	strb	r3, [r7, #18]
 8005592:	e011      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800559c:	d10c      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3320      	adds	r3, #32
 80055a2:	2102      	movs	r1, #2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 f935 	bl	8005814 <RCCEx_PLLSAI2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ae:	7cfb      	ldrb	r3, [r7, #19]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055b4:	7cfb      	ldrb	r3, [r7, #19]
 80055b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055c4:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055d2:	490d      	ldr	r1, [pc, #52]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055e6:	4b08      	ldr	r3, [pc, #32]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f6:	4904      	ldr	r1, [pc, #16]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000

0800560c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005610:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a04      	ldr	r2, [pc, #16]	@ (8005628 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005616:	f043 0304 	orr.w	r3, r3, #4
 800561a:	6013      	str	r3, [r2, #0]
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000

0800562c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800563a:	4b75      	ldr	r3, [pc, #468]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d018      	beq.n	8005678 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005646:	4b72      	ldr	r3, [pc, #456]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0203 	and.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d10d      	bne.n	8005672 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
       ||
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800565e:	4b6c      	ldr	r3, [pc, #432]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	091b      	lsrs	r3, r3, #4
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
       ||
 800566e:	429a      	cmp	r2, r3
 8005670:	d047      	beq.n	8005702 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	e044      	b.n	8005702 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d018      	beq.n	80056b2 <RCCEx_PLLSAI1_Config+0x86>
 8005680:	2b03      	cmp	r3, #3
 8005682:	d825      	bhi.n	80056d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005684:	2b01      	cmp	r3, #1
 8005686:	d002      	beq.n	800568e <RCCEx_PLLSAI1_Config+0x62>
 8005688:	2b02      	cmp	r3, #2
 800568a:	d009      	beq.n	80056a0 <RCCEx_PLLSAI1_Config+0x74>
 800568c:	e020      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800568e:	4b60      	ldr	r3, [pc, #384]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d11d      	bne.n	80056d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569e:	e01a      	b.n	80056d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d116      	bne.n	80056da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b0:	e013      	b.n	80056da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056b2:	4b57      	ldr	r3, [pc, #348]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10f      	bne.n	80056de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056be:	4b54      	ldr	r3, [pc, #336]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056ce:	e006      	b.n	80056de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
      break;
 80056d4:	e004      	b.n	80056e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056d6:	bf00      	nop
 80056d8:	e002      	b.n	80056e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056de:	bf00      	nop
    }

    if(status == HAL_OK)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10d      	bne.n	8005702 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6819      	ldr	r1, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	430b      	orrs	r3, r1
 80056fc:	4944      	ldr	r1, [pc, #272]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d17d      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005708:	4b41      	ldr	r3, [pc, #260]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a40      	ldr	r2, [pc, #256]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005714:	f7fc f9e0 	bl	8001ad8 <HAL_GetTick>
 8005718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800571a:	e009      	b.n	8005730 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800571c:	f7fc f9dc 	bl	8001ad8 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d902      	bls.n	8005730 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	73fb      	strb	r3, [r7, #15]
        break;
 800572e:	e005      	b.n	800573c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005730:	4b37      	ldr	r3, [pc, #220]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ef      	bne.n	800571c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d160      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d111      	bne.n	800576c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005748:	4b31      	ldr	r3, [pc, #196]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6892      	ldr	r2, [r2, #8]
 8005758:	0211      	lsls	r1, r2, #8
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68d2      	ldr	r2, [r2, #12]
 800575e:	0912      	lsrs	r2, r2, #4
 8005760:	0452      	lsls	r2, r2, #17
 8005762:	430a      	orrs	r2, r1
 8005764:	492a      	ldr	r1, [pc, #168]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005766:	4313      	orrs	r3, r2
 8005768:	610b      	str	r3, [r1, #16]
 800576a:	e027      	b.n	80057bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d112      	bne.n	8005798 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005772:	4b27      	ldr	r3, [pc, #156]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800577a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6892      	ldr	r2, [r2, #8]
 8005782:	0211      	lsls	r1, r2, #8
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6912      	ldr	r2, [r2, #16]
 8005788:	0852      	lsrs	r2, r2, #1
 800578a:	3a01      	subs	r2, #1
 800578c:	0552      	lsls	r2, r2, #21
 800578e:	430a      	orrs	r2, r1
 8005790:	491f      	ldr	r1, [pc, #124]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005792:	4313      	orrs	r3, r2
 8005794:	610b      	str	r3, [r1, #16]
 8005796:	e011      	b.n	80057bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005798:	4b1d      	ldr	r3, [pc, #116]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6892      	ldr	r2, [r2, #8]
 80057a8:	0211      	lsls	r1, r2, #8
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6952      	ldr	r2, [r2, #20]
 80057ae:	0852      	lsrs	r2, r2, #1
 80057b0:	3a01      	subs	r2, #1
 80057b2:	0652      	lsls	r2, r2, #25
 80057b4:	430a      	orrs	r2, r1
 80057b6:	4916      	ldr	r1, [pc, #88]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057bc:	4b14      	ldr	r3, [pc, #80]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a13      	ldr	r2, [pc, #76]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fc f986 	bl	8001ad8 <HAL_GetTick>
 80057cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057ce:	e009      	b.n	80057e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d0:	f7fc f982 	bl	8001ad8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d902      	bls.n	80057e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	73fb      	strb	r3, [r7, #15]
          break;
 80057e2:	e005      	b.n	80057f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ef      	beq.n	80057d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057f6:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	4904      	ldr	r1, [pc, #16]	@ (8005810 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005800:	4313      	orrs	r3, r2
 8005802:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005804:	7bfb      	ldrb	r3, [r7, #15]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40021000 	.word	0x40021000

08005814 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005822:	4b6a      	ldr	r3, [pc, #424]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d018      	beq.n	8005860 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800582e:	4b67      	ldr	r3, [pc, #412]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0203 	and.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d10d      	bne.n	800585a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
       ||
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005846:	4b61      	ldr	r3, [pc, #388]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
       ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d047      	beq.n	80058ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	e044      	b.n	80058ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d018      	beq.n	800589a <RCCEx_PLLSAI2_Config+0x86>
 8005868:	2b03      	cmp	r3, #3
 800586a:	d825      	bhi.n	80058b8 <RCCEx_PLLSAI2_Config+0xa4>
 800586c:	2b01      	cmp	r3, #1
 800586e:	d002      	beq.n	8005876 <RCCEx_PLLSAI2_Config+0x62>
 8005870:	2b02      	cmp	r3, #2
 8005872:	d009      	beq.n	8005888 <RCCEx_PLLSAI2_Config+0x74>
 8005874:	e020      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005876:	4b55      	ldr	r3, [pc, #340]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d11d      	bne.n	80058be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005886:	e01a      	b.n	80058be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005888:	4b50      	ldr	r3, [pc, #320]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005890:	2b00      	cmp	r3, #0
 8005892:	d116      	bne.n	80058c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005898:	e013      	b.n	80058c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800589a:	4b4c      	ldr	r3, [pc, #304]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058a6:	4b49      	ldr	r3, [pc, #292]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058b6:	e006      	b.n	80058c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	e004      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058be:	bf00      	nop
 80058c0:	e002      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10d      	bne.n	80058ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058ce:	4b3f      	ldr	r3, [pc, #252]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6819      	ldr	r1, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	3b01      	subs	r3, #1
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	430b      	orrs	r3, r1
 80058e4:	4939      	ldr	r1, [pc, #228]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d167      	bne.n	80059c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058f0:	4b36      	ldr	r3, [pc, #216]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a35      	ldr	r2, [pc, #212]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fc:	f7fc f8ec 	bl	8001ad8 <HAL_GetTick>
 8005900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005902:	e009      	b.n	8005918 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005904:	f7fc f8e8 	bl	8001ad8 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d902      	bls.n	8005918 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	73fb      	strb	r3, [r7, #15]
        break;
 8005916:	e005      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005918:	4b2c      	ldr	r3, [pc, #176]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1ef      	bne.n	8005904 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d14a      	bne.n	80059c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d111      	bne.n	8005954 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005930:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6892      	ldr	r2, [r2, #8]
 8005940:	0211      	lsls	r1, r2, #8
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	68d2      	ldr	r2, [r2, #12]
 8005946:	0912      	lsrs	r2, r2, #4
 8005948:	0452      	lsls	r2, r2, #17
 800594a:	430a      	orrs	r2, r1
 800594c:	491f      	ldr	r1, [pc, #124]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800594e:	4313      	orrs	r3, r2
 8005950:	614b      	str	r3, [r1, #20]
 8005952:	e011      	b.n	8005978 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005954:	4b1d      	ldr	r3, [pc, #116]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800595c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6892      	ldr	r2, [r2, #8]
 8005964:	0211      	lsls	r1, r2, #8
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6912      	ldr	r2, [r2, #16]
 800596a:	0852      	lsrs	r2, r2, #1
 800596c:	3a01      	subs	r2, #1
 800596e:	0652      	lsls	r2, r2, #25
 8005970:	430a      	orrs	r2, r1
 8005972:	4916      	ldr	r1, [pc, #88]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005978:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a13      	ldr	r2, [pc, #76]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800597e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fc f8a8 	bl	8001ad8 <HAL_GetTick>
 8005988:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800598a:	e009      	b.n	80059a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800598c:	f7fc f8a4 	bl	8001ad8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d902      	bls.n	80059a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	73fb      	strb	r3, [r7, #15]
          break;
 800599e:	e005      	b.n	80059ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059a0:	4b0a      	ldr	r3, [pc, #40]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ef      	beq.n	800598c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059b2:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	4904      	ldr	r1, [pc, #16]	@ (80059cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000

080059d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e095      	b.n	8005b0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d108      	bne.n	80059fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059f2:	d009      	beq.n	8005a08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	61da      	str	r2, [r3, #28]
 80059fa:	e005      	b.n	8005a08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fb fd3c 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a48:	d902      	bls.n	8005a50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e002      	b.n	8005a56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a5e:	d007      	beq.n	8005a70 <HAL_SPI_Init+0xa0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab2:	ea42 0103 	orr.w	r1, r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	f003 0204 	and.w	r2, r3, #4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005aec:	ea42 0103 	orr.w	r1, r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e049      	b.n	8005bbc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7fa fee3 	bl	8000908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f000 f96f 	bl	8005e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d001      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e04f      	b.n	8005c7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a23      	ldr	r2, [pc, #140]	@ (8005c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01d      	beq.n	8005c3a <HAL_TIM_Base_Start_IT+0x76>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c06:	d018      	beq.n	8005c3a <HAL_TIM_Base_Start_IT+0x76>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_TIM_Base_Start_IT+0x76>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1e      	ldr	r2, [pc, #120]	@ (8005c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00e      	beq.n	8005c3a <HAL_TIM_Base_Start_IT+0x76>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1c      	ldr	r2, [pc, #112]	@ (8005c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_TIM_Base_Start_IT+0x76>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_TIM_Base_Start_IT+0x76>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a19      	ldr	r2, [pc, #100]	@ (8005c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d115      	bne.n	8005c66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	4b17      	ldr	r3, [pc, #92]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d015      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0xb4>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c52:	d011      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c64:	e008      	b.n	8005c78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	e000      	b.n	8005c7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40013400 	.word	0x40013400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	00010007 	.word	0x00010007

08005ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e0b6      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x18a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cfc:	d03e      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0xd8>
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d02:	f200 8087 	bhi.w	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0a:	f000 8086 	beq.w	8005e1a <HAL_TIM_ConfigClockSource+0x176>
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d12:	d87f      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d14:	2b70      	cmp	r3, #112	@ 0x70
 8005d16:	d01a      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0xaa>
 8005d18:	2b70      	cmp	r3, #112	@ 0x70
 8005d1a:	d87b      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d1c:	2b60      	cmp	r3, #96	@ 0x60
 8005d1e:	d050      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x11e>
 8005d20:	2b60      	cmp	r3, #96	@ 0x60
 8005d22:	d877      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d24:	2b50      	cmp	r3, #80	@ 0x50
 8005d26:	d03c      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xfe>
 8005d28:	2b50      	cmp	r3, #80	@ 0x50
 8005d2a:	d873      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d2c:	2b40      	cmp	r3, #64	@ 0x40
 8005d2e:	d058      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x13e>
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d86f      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d34:	2b30      	cmp	r3, #48	@ 0x30
 8005d36:	d064      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15e>
 8005d38:	2b30      	cmp	r3, #48	@ 0x30
 8005d3a:	d86b      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d060      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15e>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d867      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d05c      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15e>
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d05a      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15e>
 8005d4c:	e062      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d5e:	f000 f98b 	bl	8006078 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	609a      	str	r2, [r3, #8]
      break;
 8005d7a:	e04f      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d8c:	f000 f974 	bl	8006078 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d9e:	609a      	str	r2, [r3, #8]
      break;
 8005da0:	e03c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 f8e8 	bl	8005f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2150      	movs	r1, #80	@ 0x50
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f941 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005dc0:	e02c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f000 f907 	bl	8005fe2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2160      	movs	r1, #96	@ 0x60
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f931 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005de0:	e01c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dee:	461a      	mov	r2, r3
 8005df0:	f000 f8c8 	bl	8005f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2140      	movs	r1, #64	@ 0x40
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f921 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005e00:	e00c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f000 f918 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005e12:	e003      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e000      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a46      	ldr	r2, [pc, #280]	@ (8005f64 <TIM_Base_SetConfig+0x12c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e56:	d00f      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a43      	ldr	r2, [pc, #268]	@ (8005f68 <TIM_Base_SetConfig+0x130>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a42      	ldr	r2, [pc, #264]	@ (8005f6c <TIM_Base_SetConfig+0x134>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a41      	ldr	r2, [pc, #260]	@ (8005f70 <TIM_Base_SetConfig+0x138>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a40      	ldr	r2, [pc, #256]	@ (8005f74 <TIM_Base_SetConfig+0x13c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d108      	bne.n	8005e8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a35      	ldr	r2, [pc, #212]	@ (8005f64 <TIM_Base_SetConfig+0x12c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d01f      	beq.n	8005ed2 <TIM_Base_SetConfig+0x9a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e98:	d01b      	beq.n	8005ed2 <TIM_Base_SetConfig+0x9a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a32      	ldr	r2, [pc, #200]	@ (8005f68 <TIM_Base_SetConfig+0x130>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d017      	beq.n	8005ed2 <TIM_Base_SetConfig+0x9a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a31      	ldr	r2, [pc, #196]	@ (8005f6c <TIM_Base_SetConfig+0x134>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <TIM_Base_SetConfig+0x9a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a30      	ldr	r2, [pc, #192]	@ (8005f70 <TIM_Base_SetConfig+0x138>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00f      	beq.n	8005ed2 <TIM_Base_SetConfig+0x9a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8005f74 <TIM_Base_SetConfig+0x13c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00b      	beq.n	8005ed2 <TIM_Base_SetConfig+0x9a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8005f78 <TIM_Base_SetConfig+0x140>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_Base_SetConfig+0x9a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8005f7c <TIM_Base_SetConfig+0x144>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_Base_SetConfig+0x9a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8005f80 <TIM_Base_SetConfig+0x148>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d108      	bne.n	8005ee4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a16      	ldr	r2, [pc, #88]	@ (8005f64 <TIM_Base_SetConfig+0x12c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0xf8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a18      	ldr	r2, [pc, #96]	@ (8005f74 <TIM_Base_SetConfig+0x13c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0xf8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a17      	ldr	r2, [pc, #92]	@ (8005f78 <TIM_Base_SetConfig+0x140>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0xf8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a16      	ldr	r2, [pc, #88]	@ (8005f7c <TIM_Base_SetConfig+0x144>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0xf8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	@ (8005f80 <TIM_Base_SetConfig+0x148>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d103      	bne.n	8005f38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d105      	bne.n	8005f56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	611a      	str	r2, [r3, #16]
  }
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0201 	bic.w	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 030a 	bic.w	r3, r3, #10
 8005fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	621a      	str	r2, [r3, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b087      	sub	sp, #28
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f023 0210 	bic.w	r2, r3, #16
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800600c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	031b      	lsls	r3, r3, #12
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800601e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	f043 0307 	orr.w	r3, r3, #7
 8006064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	609a      	str	r2, [r3, #8]
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	431a      	orrs	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e068      	b.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2e      	ldr	r2, [pc, #184]	@ (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2d      	ldr	r2, [pc, #180]	@ (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800610a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1e      	ldr	r2, [pc, #120]	@ (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01d      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006142:	d018      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1a      	ldr	r2, [pc, #104]	@ (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a18      	ldr	r2, [pc, #96]	@ (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a13      	ldr	r2, [pc, #76]	@ (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a14      	ldr	r2, [pc, #80]	@ (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10c      	bne.n	8006190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800617c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	4313      	orrs	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40014000 	.word	0x40014000

080061c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e040      	b.n	800625c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb f99c 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2224      	movs	r2, #36	@ 0x24
 80061f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fb6a 	bl	80068e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8af 	bl	8006378 <UART_SetConfig>
 800621a:	4603      	mov	r3, r0
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e01b      	b.n	800625c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fbe9 	bl	8006a2c <UART_CheckIdleState>
 800625a:	4603      	mov	r3, r0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	@ 0x28
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4613      	mov	r3, r2
 8006272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006278:	2b20      	cmp	r3, #32
 800627a:	d177      	bne.n	800636c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_UART_Transmit+0x24>
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e070      	b.n	800636e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2221      	movs	r2, #33	@ 0x21
 8006298:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800629a:	f7fb fc1d 	bl	8001ad8 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b8:	d108      	bne.n	80062cc <HAL_UART_Transmit+0x68>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	e003      	b.n	80062d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062d4:	e02f      	b.n	8006336 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	2180      	movs	r1, #128	@ 0x80
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 fc4b 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e03b      	b.n	800636e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10b      	bne.n	8006314 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	881a      	ldrh	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006308:	b292      	uxth	r2, r2
 800630a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	3302      	adds	r3, #2
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	e007      	b.n	8006324 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	781a      	ldrb	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	3301      	adds	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1c9      	bne.n	80062d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	2140      	movs	r1, #64	@ 0x40
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fc15 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e005      	b.n	800636e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	e000      	b.n	800636e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800636c:	2302      	movs	r3, #2
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800637c:	b08a      	sub	sp, #40	@ 0x28
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	431a      	orrs	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	431a      	orrs	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	4313      	orrs	r3, r2
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4ba4      	ldr	r3, [pc, #656]	@ (8006638 <UART_SetConfig+0x2c0>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a99      	ldr	r2, [pc, #612]	@ (800663c <UART_SetConfig+0x2c4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	4313      	orrs	r3, r2
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f4:	430a      	orrs	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a90      	ldr	r2, [pc, #576]	@ (8006640 <UART_SetConfig+0x2c8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d126      	bne.n	8006450 <UART_SetConfig+0xd8>
 8006402:	4b90      	ldr	r3, [pc, #576]	@ (8006644 <UART_SetConfig+0x2cc>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	2b03      	cmp	r3, #3
 800640e:	d81b      	bhi.n	8006448 <UART_SetConfig+0xd0>
 8006410:	a201      	add	r2, pc, #4	@ (adr r2, 8006418 <UART_SetConfig+0xa0>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006429 	.word	0x08006429
 800641c:	08006439 	.word	0x08006439
 8006420:	08006431 	.word	0x08006431
 8006424:	08006441 	.word	0x08006441
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800642e:	e116      	b.n	800665e <UART_SetConfig+0x2e6>
 8006430:	2302      	movs	r3, #2
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006436:	e112      	b.n	800665e <UART_SetConfig+0x2e6>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800643e:	e10e      	b.n	800665e <UART_SetConfig+0x2e6>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006446:	e10a      	b.n	800665e <UART_SetConfig+0x2e6>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644e:	e106      	b.n	800665e <UART_SetConfig+0x2e6>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7c      	ldr	r2, [pc, #496]	@ (8006648 <UART_SetConfig+0x2d0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d138      	bne.n	80064cc <UART_SetConfig+0x154>
 800645a:	4b7a      	ldr	r3, [pc, #488]	@ (8006644 <UART_SetConfig+0x2cc>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b0c      	cmp	r3, #12
 8006466:	d82d      	bhi.n	80064c4 <UART_SetConfig+0x14c>
 8006468:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <UART_SetConfig+0xf8>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	080064a5 	.word	0x080064a5
 8006474:	080064c5 	.word	0x080064c5
 8006478:	080064c5 	.word	0x080064c5
 800647c:	080064c5 	.word	0x080064c5
 8006480:	080064b5 	.word	0x080064b5
 8006484:	080064c5 	.word	0x080064c5
 8006488:	080064c5 	.word	0x080064c5
 800648c:	080064c5 	.word	0x080064c5
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064c5 	.word	0x080064c5
 8006498:	080064c5 	.word	0x080064c5
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064aa:	e0d8      	b.n	800665e <UART_SetConfig+0x2e6>
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b2:	e0d4      	b.n	800665e <UART_SetConfig+0x2e6>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ba:	e0d0      	b.n	800665e <UART_SetConfig+0x2e6>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c2:	e0cc      	b.n	800665e <UART_SetConfig+0x2e6>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ca:	e0c8      	b.n	800665e <UART_SetConfig+0x2e6>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a5e      	ldr	r2, [pc, #376]	@ (800664c <UART_SetConfig+0x2d4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d125      	bne.n	8006522 <UART_SetConfig+0x1aa>
 80064d6:	4b5b      	ldr	r3, [pc, #364]	@ (8006644 <UART_SetConfig+0x2cc>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064e0:	2b30      	cmp	r3, #48	@ 0x30
 80064e2:	d016      	beq.n	8006512 <UART_SetConfig+0x19a>
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d818      	bhi.n	800651a <UART_SetConfig+0x1a2>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d00a      	beq.n	8006502 <UART_SetConfig+0x18a>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d814      	bhi.n	800651a <UART_SetConfig+0x1a2>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <UART_SetConfig+0x182>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d008      	beq.n	800650a <UART_SetConfig+0x192>
 80064f8:	e00f      	b.n	800651a <UART_SetConfig+0x1a2>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006500:	e0ad      	b.n	800665e <UART_SetConfig+0x2e6>
 8006502:	2302      	movs	r3, #2
 8006504:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006508:	e0a9      	b.n	800665e <UART_SetConfig+0x2e6>
 800650a:	2304      	movs	r3, #4
 800650c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006510:	e0a5      	b.n	800665e <UART_SetConfig+0x2e6>
 8006512:	2308      	movs	r3, #8
 8006514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006518:	e0a1      	b.n	800665e <UART_SetConfig+0x2e6>
 800651a:	2310      	movs	r3, #16
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006520:	e09d      	b.n	800665e <UART_SetConfig+0x2e6>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a4a      	ldr	r2, [pc, #296]	@ (8006650 <UART_SetConfig+0x2d8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d125      	bne.n	8006578 <UART_SetConfig+0x200>
 800652c:	4b45      	ldr	r3, [pc, #276]	@ (8006644 <UART_SetConfig+0x2cc>)
 800652e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006532:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006536:	2bc0      	cmp	r3, #192	@ 0xc0
 8006538:	d016      	beq.n	8006568 <UART_SetConfig+0x1f0>
 800653a:	2bc0      	cmp	r3, #192	@ 0xc0
 800653c:	d818      	bhi.n	8006570 <UART_SetConfig+0x1f8>
 800653e:	2b80      	cmp	r3, #128	@ 0x80
 8006540:	d00a      	beq.n	8006558 <UART_SetConfig+0x1e0>
 8006542:	2b80      	cmp	r3, #128	@ 0x80
 8006544:	d814      	bhi.n	8006570 <UART_SetConfig+0x1f8>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <UART_SetConfig+0x1d8>
 800654a:	2b40      	cmp	r3, #64	@ 0x40
 800654c:	d008      	beq.n	8006560 <UART_SetConfig+0x1e8>
 800654e:	e00f      	b.n	8006570 <UART_SetConfig+0x1f8>
 8006550:	2300      	movs	r3, #0
 8006552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006556:	e082      	b.n	800665e <UART_SetConfig+0x2e6>
 8006558:	2302      	movs	r3, #2
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655e:	e07e      	b.n	800665e <UART_SetConfig+0x2e6>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006566:	e07a      	b.n	800665e <UART_SetConfig+0x2e6>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656e:	e076      	b.n	800665e <UART_SetConfig+0x2e6>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e072      	b.n	800665e <UART_SetConfig+0x2e6>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a35      	ldr	r2, [pc, #212]	@ (8006654 <UART_SetConfig+0x2dc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d12a      	bne.n	80065d8 <UART_SetConfig+0x260>
 8006582:	4b30      	ldr	r3, [pc, #192]	@ (8006644 <UART_SetConfig+0x2cc>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800658c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006590:	d01a      	beq.n	80065c8 <UART_SetConfig+0x250>
 8006592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006596:	d81b      	bhi.n	80065d0 <UART_SetConfig+0x258>
 8006598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800659c:	d00c      	beq.n	80065b8 <UART_SetConfig+0x240>
 800659e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a2:	d815      	bhi.n	80065d0 <UART_SetConfig+0x258>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <UART_SetConfig+0x238>
 80065a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ac:	d008      	beq.n	80065c0 <UART_SetConfig+0x248>
 80065ae:	e00f      	b.n	80065d0 <UART_SetConfig+0x258>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b6:	e052      	b.n	800665e <UART_SetConfig+0x2e6>
 80065b8:	2302      	movs	r3, #2
 80065ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065be:	e04e      	b.n	800665e <UART_SetConfig+0x2e6>
 80065c0:	2304      	movs	r3, #4
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c6:	e04a      	b.n	800665e <UART_SetConfig+0x2e6>
 80065c8:	2308      	movs	r3, #8
 80065ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ce:	e046      	b.n	800665e <UART_SetConfig+0x2e6>
 80065d0:	2310      	movs	r3, #16
 80065d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d6:	e042      	b.n	800665e <UART_SetConfig+0x2e6>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a17      	ldr	r2, [pc, #92]	@ (800663c <UART_SetConfig+0x2c4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d13a      	bne.n	8006658 <UART_SetConfig+0x2e0>
 80065e2:	4b18      	ldr	r3, [pc, #96]	@ (8006644 <UART_SetConfig+0x2cc>)
 80065e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065f0:	d01a      	beq.n	8006628 <UART_SetConfig+0x2b0>
 80065f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065f6:	d81b      	bhi.n	8006630 <UART_SetConfig+0x2b8>
 80065f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065fc:	d00c      	beq.n	8006618 <UART_SetConfig+0x2a0>
 80065fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006602:	d815      	bhi.n	8006630 <UART_SetConfig+0x2b8>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <UART_SetConfig+0x298>
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660c:	d008      	beq.n	8006620 <UART_SetConfig+0x2a8>
 800660e:	e00f      	b.n	8006630 <UART_SetConfig+0x2b8>
 8006610:	2300      	movs	r3, #0
 8006612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006616:	e022      	b.n	800665e <UART_SetConfig+0x2e6>
 8006618:	2302      	movs	r3, #2
 800661a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800661e:	e01e      	b.n	800665e <UART_SetConfig+0x2e6>
 8006620:	2304      	movs	r3, #4
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006626:	e01a      	b.n	800665e <UART_SetConfig+0x2e6>
 8006628:	2308      	movs	r3, #8
 800662a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662e:	e016      	b.n	800665e <UART_SetConfig+0x2e6>
 8006630:	2310      	movs	r3, #16
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006636:	e012      	b.n	800665e <UART_SetConfig+0x2e6>
 8006638:	efff69f3 	.word	0xefff69f3
 800663c:	40008000 	.word	0x40008000
 8006640:	40013800 	.word	0x40013800
 8006644:	40021000 	.word	0x40021000
 8006648:	40004400 	.word	0x40004400
 800664c:	40004800 	.word	0x40004800
 8006650:	40004c00 	.word	0x40004c00
 8006654:	40005000 	.word	0x40005000
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a9f      	ldr	r2, [pc, #636]	@ (80068e0 <UART_SetConfig+0x568>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d17a      	bne.n	800675e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006668:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800666c:	2b08      	cmp	r3, #8
 800666e:	d824      	bhi.n	80066ba <UART_SetConfig+0x342>
 8006670:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <UART_SetConfig+0x300>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066bb 	.word	0x080066bb
 8006680:	080066a5 	.word	0x080066a5
 8006684:	080066bb 	.word	0x080066bb
 8006688:	080066ab 	.word	0x080066ab
 800668c:	080066bb 	.word	0x080066bb
 8006690:	080066bb 	.word	0x080066bb
 8006694:	080066bb 	.word	0x080066bb
 8006698:	080066b3 	.word	0x080066b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669c:	f7fe fc40 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80066a0:	61f8      	str	r0, [r7, #28]
        break;
 80066a2:	e010      	b.n	80066c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a4:	4b8f      	ldr	r3, [pc, #572]	@ (80068e4 <UART_SetConfig+0x56c>)
 80066a6:	61fb      	str	r3, [r7, #28]
        break;
 80066a8:	e00d      	b.n	80066c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066aa:	f7fe fba1 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 80066ae:	61f8      	str	r0, [r7, #28]
        break;
 80066b0:	e009      	b.n	80066c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066b6:	61fb      	str	r3, [r7, #28]
        break;
 80066b8:	e005      	b.n	80066c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80fb 	beq.w	80068c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	4413      	add	r3, r2
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d305      	bcc.n	80066ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d903      	bls.n	80066f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066f0:	e0e8      	b.n	80068c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2200      	movs	r2, #0
 80066f6:	461c      	mov	r4, r3
 80066f8:	4615      	mov	r5, r2
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	022b      	lsls	r3, r5, #8
 8006704:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006708:	0222      	lsls	r2, r4, #8
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	6849      	ldr	r1, [r1, #4]
 800670e:	0849      	lsrs	r1, r1, #1
 8006710:	2000      	movs	r0, #0
 8006712:	4688      	mov	r8, r1
 8006714:	4681      	mov	r9, r0
 8006716:	eb12 0a08 	adds.w	sl, r2, r8
 800671a:	eb43 0b09 	adc.w	fp, r3, r9
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	603b      	str	r3, [r7, #0]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672c:	4650      	mov	r0, sl
 800672e:	4659      	mov	r1, fp
 8006730:	f7f9 fd9e 	bl	8000270 <__aeabi_uldivmod>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4613      	mov	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006742:	d308      	bcc.n	8006756 <UART_SetConfig+0x3de>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800674a:	d204      	bcs.n	8006756 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	60da      	str	r2, [r3, #12]
 8006754:	e0b6      	b.n	80068c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800675c:	e0b2      	b.n	80068c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006766:	d15e      	bne.n	8006826 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006768:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800676c:	2b08      	cmp	r3, #8
 800676e:	d828      	bhi.n	80067c2 <UART_SetConfig+0x44a>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <UART_SetConfig+0x400>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	0800679d 	.word	0x0800679d
 800677c:	080067a5 	.word	0x080067a5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	080067c3 	.word	0x080067c3
 8006788:	080067b3 	.word	0x080067b3
 800678c:	080067c3 	.word	0x080067c3
 8006790:	080067c3 	.word	0x080067c3
 8006794:	080067c3 	.word	0x080067c3
 8006798:	080067bb 	.word	0x080067bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fe fbc0 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80067a0:	61f8      	str	r0, [r7, #28]
        break;
 80067a2:	e014      	b.n	80067ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a4:	f7fe fbd2 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 80067a8:	61f8      	str	r0, [r7, #28]
        break;
 80067aa:	e010      	b.n	80067ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ac:	4b4d      	ldr	r3, [pc, #308]	@ (80068e4 <UART_SetConfig+0x56c>)
 80067ae:	61fb      	str	r3, [r7, #28]
        break;
 80067b0:	e00d      	b.n	80067ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b2:	f7fe fb1d 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 80067b6:	61f8      	str	r0, [r7, #28]
        break;
 80067b8:	e009      	b.n	80067ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067be:	61fb      	str	r3, [r7, #28]
        break;
 80067c0:	e005      	b.n	80067ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d077      	beq.n	80068c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	005a      	lsls	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	085b      	lsrs	r3, r3, #1
 80067de:	441a      	add	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b0f      	cmp	r3, #15
 80067ee:	d916      	bls.n	800681e <UART_SetConfig+0x4a6>
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f6:	d212      	bcs.n	800681e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f023 030f 	bic.w	r3, r3, #15
 8006800:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	b29b      	uxth	r3, r3
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	b29a      	uxth	r2, r3
 800680e:	8afb      	ldrh	r3, [r7, #22]
 8006810:	4313      	orrs	r3, r2
 8006812:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	8afa      	ldrh	r2, [r7, #22]
 800681a:	60da      	str	r2, [r3, #12]
 800681c:	e052      	b.n	80068c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006824:	e04e      	b.n	80068c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006826:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800682a:	2b08      	cmp	r3, #8
 800682c:	d827      	bhi.n	800687e <UART_SetConfig+0x506>
 800682e:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <UART_SetConfig+0x4bc>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006859 	.word	0x08006859
 8006838:	08006861 	.word	0x08006861
 800683c:	08006869 	.word	0x08006869
 8006840:	0800687f 	.word	0x0800687f
 8006844:	0800686f 	.word	0x0800686f
 8006848:	0800687f 	.word	0x0800687f
 800684c:	0800687f 	.word	0x0800687f
 8006850:	0800687f 	.word	0x0800687f
 8006854:	08006877 	.word	0x08006877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006858:	f7fe fb62 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 800685c:	61f8      	str	r0, [r7, #28]
        break;
 800685e:	e014      	b.n	800688a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006860:	f7fe fb74 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 8006864:	61f8      	str	r0, [r7, #28]
        break;
 8006866:	e010      	b.n	800688a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006868:	4b1e      	ldr	r3, [pc, #120]	@ (80068e4 <UART_SetConfig+0x56c>)
 800686a:	61fb      	str	r3, [r7, #28]
        break;
 800686c:	e00d      	b.n	800688a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800686e:	f7fe fabf 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8006872:	61f8      	str	r0, [r7, #28]
        break;
 8006874:	e009      	b.n	800688a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800687a:	61fb      	str	r3, [r7, #28]
        break;
 800687c:	e005      	b.n	800688a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006888:	bf00      	nop
    }

    if (pclk != 0U)
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d019      	beq.n	80068c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	085a      	lsrs	r2, r3, #1
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	441a      	add	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2b0f      	cmp	r3, #15
 80068a8:	d909      	bls.n	80068be <UART_SetConfig+0x546>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b0:	d205      	bcs.n	80068be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	60da      	str	r2, [r3, #12]
 80068bc:	e002      	b.n	80068c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3728      	adds	r7, #40	@ 0x28
 80068d8:	46bd      	mov	sp, r7
 80068da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068de:	bf00      	nop
 80068e0:	40008000 	.word	0x40008000
 80068e4:	00f42400 	.word	0x00f42400

080068e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01a      	beq.n	80069fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069e6:	d10a      	bne.n	80069fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b098      	sub	sp, #96	@ 0x60
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a3c:	f7fb f84c 	bl	8001ad8 <HAL_GetTick>
 8006a40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d12e      	bne.n	8006aae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f88c 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d021      	beq.n	8006aae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e6      	bne.n	8006a6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e062      	b.n	8006b74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d149      	bne.n	8006b50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f856 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d03c      	beq.n	8006b50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b28:	61fa      	str	r2, [r7, #28]
 8006b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	69b9      	ldr	r1, [r7, #24]
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	617b      	str	r3, [r7, #20]
   return(result);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e5      	bne.n	8006b08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e011      	b.n	8006b74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3758      	adds	r7, #88	@ 0x58
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8c:	e04f      	b.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d04b      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b96:	f7fa ff9f 	bl	8001ad8 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <UART_WaitOnFlagUntilTimeout+0x30>
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e04e      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d037      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b80      	cmp	r3, #128	@ 0x80
 8006bc2:	d034      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b40      	cmp	r3, #64	@ 0x40
 8006bc8:	d031      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d110      	bne.n	8006bfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f838 	bl	8006c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2208      	movs	r2, #8
 8006bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e029      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c08:	d111      	bne.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f81e 	bl	8006c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e00f      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4013      	ands	r3, r2
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	bf0c      	ite	eq
 8006c3e:	2301      	moveq	r3, #1
 8006c40:	2300      	movne	r3, #0
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d0a0      	beq.n	8006b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b095      	sub	sp, #84	@ 0x54
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e6      	bne.n	8006c5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d118      	bne.n	8006cfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6979      	ldr	r1, [r7, #20]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e6      	bne.n	8006ccc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d12:	bf00      	nop
 8006d14:	3754      	adds	r7, #84	@ 0x54
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d1e:	b084      	sub	sp, #16
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	f107 001c 	add.w	r0, r7, #28
 8006d2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fa69 	bl	8007214 <USB_CoreReset>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006d46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d5a:	e005      	b.n	8006d68 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d74:	b004      	add	sp, #16
 8006d76:	4770      	bx	lr

08006d78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f023 0201 	bic.w	r2, r3, #1
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d115      	bne.n	8006de8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dc8:	200a      	movs	r0, #10
 8006dca:	f7fa fe91 	bl	8001af0 <HAL_Delay>
      ms += 10U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	330a      	adds	r3, #10
 8006dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa0f 	bl	80071f8 <USB_GetMode>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d01e      	beq.n	8006e1e <USB_SetCurrentMode+0x84>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006de4:	d9f0      	bls.n	8006dc8 <USB_SetCurrentMode+0x2e>
 8006de6:	e01a      	b.n	8006e1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d115      	bne.n	8006e1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dfa:	200a      	movs	r0, #10
 8006dfc:	f7fa fe78 	bl	8001af0 <HAL_Delay>
      ms += 10U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	330a      	adds	r3, #10
 8006e04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f9f6 	bl	80071f8 <USB_GetMode>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <USB_SetCurrentMode+0x84>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e16:	d9f0      	bls.n	8006dfa <USB_SetCurrentMode+0x60>
 8006e18:	e001      	b.n	8006e1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e005      	b.n	8006e2a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e22:	d101      	bne.n	8006e28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e000      	b.n	8006e2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e34:	b084      	sub	sp, #16
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	e009      	b.n	8006e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3340      	adds	r3, #64	@ 0x40
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	2200      	movs	r2, #0
 8006e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3301      	adds	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2b0e      	cmp	r3, #14
 8006e6c:	d9f2      	bls.n	8006e54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d11c      	bne.n	8006eb0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e84:	f043 0302 	orr.w	r3, r3, #2
 8006e88:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e005      	b.n	8006ebc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ec8:	2103      	movs	r1, #3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f95a 	bl	8007184 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ed0:	2110      	movs	r1, #16
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f8f6 	bl	80070c4 <USB_FlushTxFifo>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f920 	bl	8007128 <USB_FlushRxFifo>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef8:	461a      	mov	r2, r3
 8006efa:	2300      	movs	r3, #0
 8006efc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f04:	461a      	mov	r2, r3
 8006f06:	2300      	movs	r3, #0
 8006f08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f10:	461a      	mov	r2, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	e043      	b.n	8006fa4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f32:	d118      	bne.n	8006f66 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f46:	461a      	mov	r2, r3
 8006f48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	e013      	b.n	8006f78 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	e008      	b.n	8006f78 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f72:	461a      	mov	r2, r3
 8006f74:	2300      	movs	r3, #0
 8006f76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	461a      	mov	r2, r3
 8006f86:	2300      	movs	r3, #0
 8006f88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f96:	461a      	mov	r2, r3
 8006f98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fa8:	461a      	mov	r2, r3
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d3b5      	bcc.n	8006f1c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	e043      	b.n	800703e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fcc:	d118      	bne.n	8007000 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	e013      	b.n	8007012 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e008      	b.n	8007012 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700c:	461a      	mov	r2, r3
 800700e:	2300      	movs	r3, #0
 8007010:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007030:	461a      	mov	r2, r3
 8007032:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007042:	461a      	mov	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4293      	cmp	r3, r2
 8007048:	d3b5      	bcc.n	8006fb6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800705c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800706a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f043 0210 	orr.w	r2, r3, #16
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	4b10      	ldr	r3, [pc, #64]	@ (80070c0 <USB_DevInit+0x28c>)
 800707e:	4313      	orrs	r3, r2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007084:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f043 0208 	orr.w	r2, r3, #8
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007098:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800709c:	2b01      	cmp	r3, #1
 800709e:	d107      	bne.n	80070b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070a8:	f043 0304 	orr.w	r3, r3, #4
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070bc:	b004      	add	sp, #16
 80070be:	4770      	bx	lr
 80070c0:	803c3800 	.word	0x803c3800

080070c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3301      	adds	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070de:	d901      	bls.n	80070e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e01b      	b.n	800711c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	daf2      	bge.n	80070d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	019b      	lsls	r3, r3, #6
 80070f4:	f043 0220 	orr.w	r2, r3, #32
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007108:	d901      	bls.n	800710e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e006      	b.n	800711c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b20      	cmp	r3, #32
 8007118:	d0f0      	beq.n	80070fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007140:	d901      	bls.n	8007146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e018      	b.n	8007178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	daf2      	bge.n	8007134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2210      	movs	r2, #16
 8007156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3301      	adds	r3, #1
 800715c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007164:	d901      	bls.n	800716a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e006      	b.n	8007178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0310 	and.w	r3, r3, #16
 8007172:	2b10      	cmp	r3, #16
 8007174:	d0f0      	beq.n	8007158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071a4:	4313      	orrs	r3, r2
 80071a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071e4:	f043 0302 	orr.w	r3, r3, #2
 80071e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	f003 0301 	and.w	r3, r3, #1
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800722c:	d901      	bls.n	8007232 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e01b      	b.n	800726a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	daf2      	bge.n	8007220 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f043 0201 	orr.w	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007256:	d901      	bls.n	800725c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e006      	b.n	800726a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b01      	cmp	r3, #1
 8007266:	d0f0      	beq.n	800724a <USB_CoreReset+0x36>

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	4603      	mov	r3, r0
 800727e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007288:	2b84      	cmp	r3, #132	@ 0x84
 800728a:	d005      	beq.n	8007298 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800728c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	3303      	adds	r3, #3
 8007296:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007298:	68fb      	ldr	r3, [r7, #12]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ac:	f3ef 8305 	mrs	r3, IPSR
 80072b0:	607b      	str	r3, [r7, #4]
  return(result);
 80072b2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80072ce:	f001 f917 	bl	8008500 <vTaskStartScheduler>
  
  return osOK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80072d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072da:	b089      	sub	sp, #36	@ 0x24
 80072dc:	af04      	add	r7, sp, #16
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d020      	beq.n	800732c <osThreadCreate+0x54>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d01c      	beq.n	800732c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685c      	ldr	r4, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691e      	ldr	r6, [r3, #16]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff ffb6 	bl	8007276 <makeFreeRtosPriority>
 800730a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007314:	9202      	str	r2, [sp, #8]
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	9100      	str	r1, [sp, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	4632      	mov	r2, r6
 800731e:	4629      	mov	r1, r5
 8007320:	4620      	mov	r0, r4
 8007322:	f000 ff1f 	bl	8008164 <xTaskCreateStatic>
 8007326:	4603      	mov	r3, r0
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e01c      	b.n	8007366 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685c      	ldr	r4, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007338:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff98 	bl	8007276 <makeFreeRtosPriority>
 8007346:	4602      	mov	r2, r0
 8007348:	f107 030c 	add.w	r3, r7, #12
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	9200      	str	r2, [sp, #0]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	4632      	mov	r2, r6
 8007354:	4629      	mov	r1, r5
 8007356:	4620      	mov	r0, r4
 8007358:	f000 ff64 	bl	8008224 <xTaskCreate>
 800735c:	4603      	mov	r3, r0
 800735e:	2b01      	cmp	r3, #1
 8007360:	d001      	beq.n	8007366 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007366:	68fb      	ldr	r3, [r7, #12]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007370 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <osDelay+0x16>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	e000      	b.n	8007388 <osDelay+0x18>
 8007386:	2301      	movs	r3, #1
 8007388:	4618      	mov	r0, r3
 800738a:	f001 f883 	bl	8008494 <vTaskDelay>
  
  return osOK;
 800738e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b085      	sub	sp, #20
 800739c:	af02      	add	r7, sp, #8
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d011      	beq.n	80073ce <osMessageCreate+0x36>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00d      	beq.n	80073ce <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6859      	ldr	r1, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2400      	movs	r4, #0
 80073c4:	9400      	str	r4, [sp, #0]
 80073c6:	f000 f9e1 	bl	800778c <xQueueGenericCreateStatic>
 80073ca:	4603      	mov	r3, r0
 80073cc:	e008      	b.n	80073e0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	4619      	mov	r1, r3
 80073da:	f000 fa54 	bl	8007886 <xQueueGenericCreate>
 80073de:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd90      	pop	{r4, r7, pc}

080073e8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <osMessagePut+0x1e>
    ticks = 1;
 8007402:	2301      	movs	r3, #1
 8007404:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007406:	f7ff ff4e 	bl	80072a6 <inHandlerMode>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d018      	beq.n	8007442 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007410:	f107 0210 	add.w	r2, r7, #16
 8007414:	f107 0108 	add.w	r1, r7, #8
 8007418:	2300      	movs	r3, #0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fb90 	bl	8007b40 <xQueueGenericSendFromISR>
 8007420:	4603      	mov	r3, r0
 8007422:	2b01      	cmp	r3, #1
 8007424:	d001      	beq.n	800742a <osMessagePut+0x42>
      return osErrorOS;
 8007426:	23ff      	movs	r3, #255	@ 0xff
 8007428:	e018      	b.n	800745c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d014      	beq.n	800745a <osMessagePut+0x72>
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <osMessagePut+0x7c>)
 8007432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	e00b      	b.n	800745a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007442:	f107 0108 	add.w	r1, r7, #8
 8007446:	2300      	movs	r3, #0
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 fa76 	bl	800793c <xQueueGenericSend>
 8007450:	4603      	mov	r3, r0
 8007452:	2b01      	cmp	r3, #1
 8007454:	d001      	beq.n	800745a <osMessagePut+0x72>
      return osErrorOS;
 8007456:	23ff      	movs	r3, #255	@ 0xff
 8007458:	e000      	b.n	800745c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b08b      	sub	sp, #44	@ 0x2c
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	617b      	str	r3, [r7, #20]
    return event;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	461c      	mov	r4, r3
 800748a:	f107 0314 	add.w	r3, r7, #20
 800748e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007496:	e054      	b.n	8007542 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007498:	2300      	movs	r3, #0
 800749a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a6:	d103      	bne.n	80074b0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80074a8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ae:	e009      	b.n	80074c4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d006      	beq.n	80074c4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <osMessageGet+0x5c>
      ticks = 1;
 80074c0:	2301      	movs	r3, #1
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80074c4:	f7ff feef 	bl	80072a6 <inHandlerMode>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01c      	beq.n	8007508 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80074ce:	f107 0220 	add.w	r2, r7, #32
 80074d2:	f107 0314 	add.w	r3, r7, #20
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	68b8      	ldr	r0, [r7, #8]
 80074dc:	f000 fcb0 	bl	8007e40 <xQueueReceiveFromISR>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d102      	bne.n	80074ec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80074e6:	2310      	movs	r3, #16
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e001      	b.n	80074f0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01d      	beq.n	8007532 <osMessageGet+0xca>
 80074f6:	4b15      	ldr	r3, [pc, #84]	@ (800754c <osMessageGet+0xe4>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	e014      	b.n	8007532 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	3304      	adds	r3, #4
 800750e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007510:	4619      	mov	r1, r3
 8007512:	68b8      	ldr	r0, [r7, #8]
 8007514:	f000 fbb2 	bl	8007c7c <xQueueReceive>
 8007518:	4603      	mov	r3, r0
 800751a:	2b01      	cmp	r3, #1
 800751c:	d102      	bne.n	8007524 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800751e:	2310      	movs	r3, #16
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	e006      	b.n	8007532 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <osMessageGet+0xc6>
 800752a:	2300      	movs	r3, #0
 800752c:	e000      	b.n	8007530 <osMessageGet+0xc8>
 800752e:	2340      	movs	r3, #64	@ 0x40
 8007530:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	461c      	mov	r4, r3
 8007536:	f107 0314 	add.w	r3, r7, #20
 800753a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800753e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	372c      	adds	r7, #44	@ 0x2c
 8007546:	46bd      	mov	sp, r7
 8007548:	bd90      	pop	{r4, r7, pc}
 800754a:	bf00      	nop
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f103 0208 	add.w	r2, r3, #8
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f04f 32ff 	mov.w	r2, #4294967295
 8007568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f103 0208 	add.w	r2, r3, #8
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f103 0208 	add.w	r2, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d103      	bne.n	8007612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e00c      	b.n	800762c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3308      	adds	r3, #8
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	e002      	b.n	8007620 <vListInsert+0x2e>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	429a      	cmp	r2, r3
 800762a:	d2f6      	bcs.n	800761a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6892      	ldr	r2, [r2, #8]
 800767a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6852      	ldr	r2, [r2, #4]
 8007684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d103      	bne.n	8007698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	1e5a      	subs	r2, r3, #1
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10b      	bne.n	80076e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076de:	bf00      	nop
 80076e0:	bf00      	nop
 80076e2:	e7fd      	b.n	80076e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076e4:	f001 fd50 	bl	8009188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f0:	68f9      	ldr	r1, [r7, #12]
 80076f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80076f4:	fb01 f303 	mul.w	r3, r1, r3
 80076f8:	441a      	add	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007714:	3b01      	subs	r3, #1
 8007716:	68f9      	ldr	r1, [r7, #12]
 8007718:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800771a:	fb01 f303 	mul.w	r3, r1, r3
 800771e:	441a      	add	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	22ff      	movs	r2, #255	@ 0xff
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	22ff      	movs	r2, #255	@ 0xff
 8007730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d114      	bne.n	8007764 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01a      	beq.n	8007778 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3310      	adds	r3, #16
 8007746:	4618      	mov	r0, r3
 8007748:	f001 f924 	bl	8008994 <xTaskRemoveFromEventList>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d012      	beq.n	8007778 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007752:	4b0d      	ldr	r3, [pc, #52]	@ (8007788 <xQueueGenericReset+0xd0>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	e009      	b.n	8007778 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3310      	adds	r3, #16
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fef1 	bl	8007550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3324      	adds	r3, #36	@ 0x24
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff feec 	bl	8007550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007778:	f001 fd38 	bl	80091ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800777c:	2301      	movs	r3, #1
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08e      	sub	sp, #56	@ 0x38
 8007790:	af02      	add	r7, sp, #8
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077b2:	bf00      	nop
 80077b4:	bf00      	nop
 80077b6:	e7fd      	b.n	80077b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10b      	bne.n	80077d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <xQueueGenericCreateStatic+0x56>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <xQueueGenericCreateStatic+0x5a>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <xQueueGenericCreateStatic+0x5c>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	623b      	str	r3, [r7, #32]
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <xQueueGenericCreateStatic+0x84>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <xQueueGenericCreateStatic+0x88>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <xQueueGenericCreateStatic+0x8a>
 8007814:	2300      	movs	r3, #0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	61fb      	str	r3, [r7, #28]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007832:	2348      	movs	r3, #72	@ 0x48
 8007834:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b48      	cmp	r3, #72	@ 0x48
 800783a:	d00b      	beq.n	8007854 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	61bb      	str	r3, [r7, #24]
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007854:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00d      	beq.n	800787c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007868:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800786c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	4613      	mov	r3, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f840 	bl	80078fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800787e:	4618      	mov	r0, r3
 8007880:	3730      	adds	r7, #48	@ 0x30
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007886:	b580      	push	{r7, lr}
 8007888:	b08a      	sub	sp, #40	@ 0x28
 800788a:	af02      	add	r7, sp, #8
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	4613      	mov	r3, r2
 8007892:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	613b      	str	r3, [r7, #16]
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	fb02 f303 	mul.w	r3, r2, r3
 80078ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	3348      	adds	r3, #72	@ 0x48
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fd83 	bl	80093cc <pvPortMalloc>
 80078c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d011      	beq.n	80078f2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	3348      	adds	r3, #72	@ 0x48
 80078d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078e0:	79fa      	ldrb	r2, [r7, #7]
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4613      	mov	r3, r2
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f805 	bl	80078fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078f2:	69bb      	ldr	r3, [r7, #24]
	}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3720      	adds	r7, #32
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	e002      	b.n	800791e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800792a:	2101      	movs	r1, #1
 800792c:	69b8      	ldr	r0, [r7, #24]
 800792e:	f7ff fec3 	bl	80076b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007932:	bf00      	nop
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08e      	sub	sp, #56	@ 0x38
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800794a:	2300      	movs	r3, #0
 800794c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10b      	bne.n	8007970 <xQueueGenericSend+0x34>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800796a:	bf00      	nop
 800796c:	bf00      	nop
 800796e:	e7fd      	b.n	800796c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <xQueueGenericSend+0x42>
 8007976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <xQueueGenericSend+0x46>
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <xQueueGenericSend+0x48>
 8007982:	2300      	movs	r3, #0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <xQueueGenericSend+0x64>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d103      	bne.n	80079ae <xQueueGenericSend+0x72>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <xQueueGenericSend+0x76>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <xQueueGenericSend+0x78>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10b      	bne.n	80079d0 <xQueueGenericSend+0x94>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	623b      	str	r3, [r7, #32]
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079d0:	f001 f9a0 	bl	8008d14 <xTaskGetSchedulerState>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <xQueueGenericSend+0xa4>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <xQueueGenericSend+0xa8>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e000      	b.n	80079e6 <xQueueGenericSend+0xaa>
 80079e4:	2300      	movs	r3, #0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <xQueueGenericSend+0xc6>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	61fb      	str	r3, [r7, #28]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a02:	f001 fbc1 	bl	8009188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d302      	bcc.n	8007a18 <xQueueGenericSend+0xdc>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d129      	bne.n	8007a6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a1e:	f000 fa91 	bl	8007f44 <prvCopyDataToQueue>
 8007a22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d010      	beq.n	8007a4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2e:	3324      	adds	r3, #36	@ 0x24
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 ffaf 	bl	8008994 <xTaskRemoveFromEventList>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d013      	beq.n	8007a64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8007b3c <xQueueGenericSend+0x200>)
 8007a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	e00a      	b.n	8007a64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d007      	beq.n	8007a64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a54:	4b39      	ldr	r3, [pc, #228]	@ (8007b3c <xQueueGenericSend+0x200>)
 8007a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a64:	f001 fbc2 	bl	80091ec <vPortExitCritical>
				return pdPASS;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e063      	b.n	8007b34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a72:	f001 fbbb 	bl	80091ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e05c      	b.n	8007b34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a80:	f107 0314 	add.w	r3, r7, #20
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 ffe9 	bl	8008a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a8e:	f001 fbad 	bl	80091ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a92:	f000 fd97 	bl	80085c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a96:	f001 fb77 	bl	8009188 <vPortEnterCritical>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d103      	bne.n	8007ab0 <xQueueGenericSend+0x174>
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ab6:	b25b      	sxtb	r3, r3
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d103      	bne.n	8007ac6 <xQueueGenericSend+0x18a>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ac6:	f001 fb91 	bl	80091ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007aca:	1d3a      	adds	r2, r7, #4
 8007acc:	f107 0314 	add.w	r3, r7, #20
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 ffd8 	bl	8008a88 <xTaskCheckForTimeOut>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d124      	bne.n	8007b28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ade:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ae0:	f000 fb28 	bl	8008134 <prvIsQueueFull>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d018      	beq.n	8007b1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	3310      	adds	r3, #16
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 ff28 	bl	8008948 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007af8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007afa:	f000 fab3 	bl	8008064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007afe:	f000 fd6f 	bl	80085e0 <xTaskResumeAll>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f47f af7c 	bne.w	8007a02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b3c <xQueueGenericSend+0x200>)
 8007b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	e772      	b.n	8007a02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b1e:	f000 faa1 	bl	8008064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b22:	f000 fd5d 	bl	80085e0 <xTaskResumeAll>
 8007b26:	e76c      	b.n	8007a02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b2a:	f000 fa9b 	bl	8008064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b2e:	f000 fd57 	bl	80085e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3738      	adds	r7, #56	@ 0x38
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	e000ed04 	.word	0xe000ed04

08007b40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b090      	sub	sp, #64	@ 0x40
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10b      	bne.n	8007b70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b6a:	bf00      	nop
 8007b6c:	bf00      	nop
 8007b6e:	e7fd      	b.n	8007b6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <xQueueGenericSendFromISR+0x3e>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <xQueueGenericSendFromISR+0x42>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <xQueueGenericSendFromISR+0x44>
 8007b82:	2300      	movs	r3, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10b      	bne.n	8007ba0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d103      	bne.n	8007bae <xQueueGenericSendFromISR+0x6e>
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <xQueueGenericSendFromISR+0x72>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <xQueueGenericSendFromISR+0x74>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10b      	bne.n	8007bd0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	623b      	str	r3, [r7, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	e7fd      	b.n	8007bcc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bd0:	f001 fbba 	bl	8009348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bd4:	f3ef 8211 	mrs	r2, BASEPRI
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	61fa      	str	r2, [r7, #28]
 8007bea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007bec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <xQueueGenericSendFromISR+0xc2>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d12f      	bne.n	8007c62 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c18:	f000 f994 	bl	8007f44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c1c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d112      	bne.n	8007c4c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d016      	beq.n	8007c5c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c30:	3324      	adds	r3, #36	@ 0x24
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 feae 	bl	8008994 <xTaskRemoveFromEventList>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e007      	b.n	8007c5c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c50:	3301      	adds	r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	b25a      	sxtb	r2, r3
 8007c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007c60:	e001      	b.n	8007c66 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c68:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3740      	adds	r7, #64	@ 0x40
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08c      	sub	sp, #48	@ 0x30
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10b      	bne.n	8007cae <xQueueReceive+0x32>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	623b      	str	r3, [r7, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <xQueueReceive+0x40>
 8007cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <xQueueReceive+0x44>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <xQueueReceive+0x46>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10b      	bne.n	8007cde <xQueueReceive+0x62>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	61fb      	str	r3, [r7, #28]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cde:	f001 f819 	bl	8008d14 <xTaskGetSchedulerState>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d102      	bne.n	8007cee <xQueueReceive+0x72>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <xQueueReceive+0x76>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e000      	b.n	8007cf4 <xQueueReceive+0x78>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <xQueueReceive+0x94>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	61bb      	str	r3, [r7, #24]
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	e7fd      	b.n	8007d0c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d10:	f001 fa3a 	bl	8009188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01f      	beq.n	8007d60 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d24:	f000 f978 	bl	8008018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	1e5a      	subs	r2, r3, #1
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00f      	beq.n	8007d58 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3a:	3310      	adds	r3, #16
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fe29 	bl	8008994 <xTaskRemoveFromEventList>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d48:	4b3c      	ldr	r3, [pc, #240]	@ (8007e3c <xQueueReceive+0x1c0>)
 8007d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d58:	f001 fa48 	bl	80091ec <vPortExitCritical>
				return pdPASS;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e069      	b.n	8007e34 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d103      	bne.n	8007d6e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d66:	f001 fa41 	bl	80091ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e062      	b.n	8007e34 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d74:	f107 0310 	add.w	r3, r7, #16
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fe6f 	bl	8008a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d82:	f001 fa33 	bl	80091ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d86:	f000 fc1d 	bl	80085c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d8a:	f001 f9fd 	bl	8009188 <vPortEnterCritical>
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9a:	d103      	bne.n	8007da4 <xQueueReceive+0x128>
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007daa:	b25b      	sxtb	r3, r3
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d103      	bne.n	8007dba <xQueueReceive+0x13e>
 8007db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dba:	f001 fa17 	bl	80091ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dbe:	1d3a      	adds	r2, r7, #4
 8007dc0:	f107 0310 	add.w	r3, r7, #16
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fe5e 	bl	8008a88 <xTaskCheckForTimeOut>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d123      	bne.n	8007e1a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dd4:	f000 f998 	bl	8008108 <prvIsQueueEmpty>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d017      	beq.n	8007e0e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	3324      	adds	r3, #36	@ 0x24
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fdae 	bl	8008948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dee:	f000 f939 	bl	8008064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007df2:	f000 fbf5 	bl	80085e0 <xTaskResumeAll>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d189      	bne.n	8007d10 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8007e3c <xQueueReceive+0x1c0>)
 8007dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	e780      	b.n	8007d10 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e10:	f000 f928 	bl	8008064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e14:	f000 fbe4 	bl	80085e0 <xTaskResumeAll>
 8007e18:	e77a      	b.n	8007d10 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e1c:	f000 f922 	bl	8008064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e20:	f000 fbde 	bl	80085e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e26:	f000 f96f 	bl	8008108 <prvIsQueueEmpty>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f43f af6f 	beq.w	8007d10 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3730      	adds	r7, #48	@ 0x30
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	e000ed04 	.word	0xe000ed04

08007e40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08e      	sub	sp, #56	@ 0x38
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	623b      	str	r3, [r7, #32]
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	e7fd      	b.n	8007e6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d103      	bne.n	8007e7c <xQueueReceiveFromISR+0x3c>
 8007e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <xQueueReceiveFromISR+0x40>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <xQueueReceiveFromISR+0x42>
 8007e80:	2300      	movs	r3, #0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10b      	bne.n	8007e9e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	61fb      	str	r3, [r7, #28]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e9e:	f001 fa53 	bl	8009348 <vPortValidateInterruptPriority>
	__asm volatile
 8007ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	61ba      	str	r2, [r7, #24]
 8007eb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007eba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02f      	beq.n	8007f2a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ed8:	f000 f89e 	bl	8008018 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	1e5a      	subs	r2, r3, #1
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ee4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d112      	bne.n	8007f14 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d016      	beq.n	8007f24 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	3310      	adds	r3, #16
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fd4a 	bl	8008994 <xTaskRemoveFromEventList>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00e      	beq.n	8007f24 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00b      	beq.n	8007f24 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	e007      	b.n	8007f24 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f18:	3301      	adds	r3, #1
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	b25a      	sxtb	r2, r3
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007f24:	2301      	movs	r3, #1
 8007f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f28:	e001      	b.n	8007f2e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f383 8811 	msr	BASEPRI, r3
}
 8007f38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3738      	adds	r7, #56	@ 0x38
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10d      	bne.n	8007f7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d14d      	bne.n	8008006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 feee 	bl	8008d50 <xTaskPriorityDisinherit>
 8007f74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	609a      	str	r2, [r3, #8]
 8007f7c:	e043      	b.n	8008006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d119      	bne.n	8007fb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6858      	ldr	r0, [r3, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	f001 fe8f 	bl	8009cb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d32b      	bcc.n	8008006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	e026      	b.n	8008006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68d8      	ldr	r0, [r3, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	f001 fe75 	bl	8009cb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d207      	bcs.n	8007ff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fec:	425b      	negs	r3, r3
 8007fee:	441a      	add	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d105      	bne.n	8008006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	3b01      	subs	r3, #1
 8008004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800800e:	697b      	ldr	r3, [r7, #20]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d018      	beq.n	800805c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008032:	441a      	add	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	d303      	bcc.n	800804c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68d9      	ldr	r1, [r3, #12]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008054:	461a      	mov	r2, r3
 8008056:	6838      	ldr	r0, [r7, #0]
 8008058:	f001 fe2b 	bl	8009cb2 <memcpy>
	}
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800806c:	f001 f88c 	bl	8009188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008078:	e011      	b.n	800809e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d012      	beq.n	80080a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3324      	adds	r3, #36	@ 0x24
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fc84 	bl	8008994 <xTaskRemoveFromEventList>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008092:	f000 fd5d 	bl	8008b50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	3b01      	subs	r3, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800809e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dce9      	bgt.n	800807a <prvUnlockQueue+0x16>
 80080a6:	e000      	b.n	80080aa <prvUnlockQueue+0x46>
					break;
 80080a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	22ff      	movs	r2, #255	@ 0xff
 80080ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080b2:	f001 f89b 	bl	80091ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080b6:	f001 f867 	bl	8009188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080c2:	e011      	b.n	80080e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d012      	beq.n	80080f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3310      	adds	r3, #16
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fc5f 	bl	8008994 <xTaskRemoveFromEventList>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080dc:	f000 fd38 	bl	8008b50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dce9      	bgt.n	80080c4 <prvUnlockQueue+0x60>
 80080f0:	e000      	b.n	80080f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	22ff      	movs	r2, #255	@ 0xff
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80080fc:	f001 f876 	bl	80091ec <vPortExitCritical>
}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008110:	f001 f83a 	bl	8009188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e001      	b.n	8008126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008126:	f001 f861 	bl	80091ec <vPortExitCritical>

	return xReturn;
 800812a:	68fb      	ldr	r3, [r7, #12]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800813c:	f001 f824 	bl	8009188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008148:	429a      	cmp	r2, r3
 800814a:	d102      	bne.n	8008152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	e001      	b.n	8008156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008156:	f001 f849 	bl	80091ec <vPortExitCritical>

	return xReturn;
 800815a:	68fb      	ldr	r3, [r7, #12]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08e      	sub	sp, #56	@ 0x38
 8008168:	af04      	add	r7, sp, #16
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10b      	bne.n	8008190 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	623b      	str	r3, [r7, #32]
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	e7fd      	b.n	800818c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	61fb      	str	r3, [r7, #28]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081ae:	2354      	movs	r3, #84	@ 0x54
 80081b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b54      	cmp	r3, #84	@ 0x54
 80081b6:	d00b      	beq.n	80081d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	61bb      	str	r3, [r7, #24]
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01e      	beq.n	8008216 <xTaskCreateStatic+0xb2>
 80081d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01b      	beq.n	8008216 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80081f0:	2300      	movs	r3, #0
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	9302      	str	r3, [sp, #8]
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 f850 	bl	80082ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800820e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008210:	f000 f8d6 	bl	80083c0 <prvAddNewTaskToReadyList>
 8008214:	e001      	b.n	800821a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800821a:	697b      	ldr	r3, [r7, #20]
	}
 800821c:	4618      	mov	r0, r3
 800821e:	3728      	adds	r7, #40	@ 0x28
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08c      	sub	sp, #48	@ 0x30
 8008228:	af04      	add	r7, sp, #16
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	4613      	mov	r3, r2
 8008232:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4618      	mov	r0, r3
 800823a:	f001 f8c7 	bl	80093cc <pvPortMalloc>
 800823e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00e      	beq.n	8008264 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008246:	2054      	movs	r0, #84	@ 0x54
 8008248:	f001 f8c0 	bl	80093cc <pvPortMalloc>
 800824c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	631a      	str	r2, [r3, #48]	@ 0x30
 800825a:	e005      	b.n	8008268 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800825c:	6978      	ldr	r0, [r7, #20]
 800825e:	f001 f983 	bl	8009568 <vPortFree>
 8008262:	e001      	b.n	8008268 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d017      	beq.n	800829e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008276:	88fa      	ldrh	r2, [r7, #6]
 8008278:	2300      	movs	r3, #0
 800827a:	9303      	str	r3, [sp, #12]
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	9302      	str	r3, [sp, #8]
 8008280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	68b9      	ldr	r1, [r7, #8]
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f80e 	bl	80082ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008292:	69f8      	ldr	r0, [r7, #28]
 8008294:	f000 f894 	bl	80083c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008298:	2301      	movs	r3, #1
 800829a:	61bb      	str	r3, [r7, #24]
 800829c:	e002      	b.n	80082a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800829e:	f04f 33ff 	mov.w	r3, #4294967295
 80082a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082a4:	69bb      	ldr	r3, [r7, #24]
	}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b088      	sub	sp, #32
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80082c6:	3b01      	subs	r3, #1
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f023 0307 	bic.w	r3, r3, #7
 80082d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	617b      	str	r3, [r7, #20]
}
 80082f2:	bf00      	nop
 80082f4:	bf00      	nop
 80082f6:	e7fd      	b.n	80082f4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d01f      	beq.n	800833e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]
 8008302:	e012      	b.n	800832a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	4413      	add	r3, r2
 800830a:	7819      	ldrb	r1, [r3, #0]
 800830c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	3334      	adds	r3, #52	@ 0x34
 8008314:	460a      	mov	r2, r1
 8008316:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d006      	beq.n	8008332 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	3301      	adds	r3, #1
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	2b0f      	cmp	r3, #15
 800832e:	d9e9      	bls.n	8008304 <prvInitialiseNewTask+0x56>
 8008330:	e000      	b.n	8008334 <prvInitialiseNewTask+0x86>
			{
				break;
 8008332:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800833c:	e003      	b.n	8008346 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	2b06      	cmp	r3, #6
 800834a:	d901      	bls.n	8008350 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800834c:	2306      	movs	r3, #6
 800834e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008354:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800835a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800835c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835e:	2200      	movs	r2, #0
 8008360:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008364:	3304      	adds	r3, #4
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff f912 	bl	8007590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	3318      	adds	r3, #24
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff f90d 	bl	8007590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800837a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800837c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837e:	f1c3 0207 	rsb	r2, r3, #7
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800838a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	2200      	movs	r2, #0
 8008390:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	68f9      	ldr	r1, [r7, #12]
 800839e:	69b8      	ldr	r0, [r7, #24]
 80083a0:	f000 fdc4 	bl	8008f2c <pxPortInitialiseStack>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083b6:	bf00      	nop
 80083b8:	3720      	adds	r7, #32
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083c8:	f000 fede 	bl	8009188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008478 <prvAddNewTaskToReadyList+0xb8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3301      	adds	r3, #1
 80083d2:	4a29      	ldr	r2, [pc, #164]	@ (8008478 <prvAddNewTaskToReadyList+0xb8>)
 80083d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80083d6:	4b29      	ldr	r3, [pc, #164]	@ (800847c <prvAddNewTaskToReadyList+0xbc>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083de:	4a27      	ldr	r2, [pc, #156]	@ (800847c <prvAddNewTaskToReadyList+0xbc>)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083e4:	4b24      	ldr	r3, [pc, #144]	@ (8008478 <prvAddNewTaskToReadyList+0xb8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d110      	bne.n	800840e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083ec:	f000 fbd4 	bl	8008b98 <prvInitialiseTaskLists>
 80083f0:	e00d      	b.n	800840e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083f2:	4b23      	ldr	r3, [pc, #140]	@ (8008480 <prvAddNewTaskToReadyList+0xc0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083fa:	4b20      	ldr	r3, [pc, #128]	@ (800847c <prvAddNewTaskToReadyList+0xbc>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008404:	429a      	cmp	r2, r3
 8008406:	d802      	bhi.n	800840e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008408:	4a1c      	ldr	r2, [pc, #112]	@ (800847c <prvAddNewTaskToReadyList+0xbc>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800840e:	4b1d      	ldr	r3, [pc, #116]	@ (8008484 <prvAddNewTaskToReadyList+0xc4>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3301      	adds	r3, #1
 8008414:	4a1b      	ldr	r2, [pc, #108]	@ (8008484 <prvAddNewTaskToReadyList+0xc4>)
 8008416:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841c:	2201      	movs	r2, #1
 800841e:	409a      	lsls	r2, r3
 8008420:	4b19      	ldr	r3, [pc, #100]	@ (8008488 <prvAddNewTaskToReadyList+0xc8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4313      	orrs	r3, r2
 8008426:	4a18      	ldr	r2, [pc, #96]	@ (8008488 <prvAddNewTaskToReadyList+0xc8>)
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4a15      	ldr	r2, [pc, #84]	@ (800848c <prvAddNewTaskToReadyList+0xcc>)
 8008438:	441a      	add	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f7ff f8b2 	bl	80075aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008446:	f000 fed1 	bl	80091ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800844a:	4b0d      	ldr	r3, [pc, #52]	@ (8008480 <prvAddNewTaskToReadyList+0xc0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00e      	beq.n	8008470 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008452:	4b0a      	ldr	r3, [pc, #40]	@ (800847c <prvAddNewTaskToReadyList+0xbc>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845c:	429a      	cmp	r2, r3
 800845e:	d207      	bcs.n	8008470 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008460:	4b0b      	ldr	r3, [pc, #44]	@ (8008490 <prvAddNewTaskToReadyList+0xd0>)
 8008462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000e38 	.word	0x20000e38
 800847c:	20000d38 	.word	0x20000d38
 8008480:	20000e44 	.word	0x20000e44
 8008484:	20000e54 	.word	0x20000e54
 8008488:	20000e40 	.word	0x20000e40
 800848c:	20000d3c 	.word	0x20000d3c
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d018      	beq.n	80084d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084a6:	4b14      	ldr	r3, [pc, #80]	@ (80084f8 <vTaskDelay+0x64>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <vTaskDelay+0x32>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60bb      	str	r3, [r7, #8]
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	e7fd      	b.n	80084c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80084c6:	f000 f87d 	bl	80085c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80084ca:	2100      	movs	r1, #0
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fcc7 	bl	8008e60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80084d2:	f000 f885 	bl	80085e0 <xTaskResumeAll>
 80084d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d107      	bne.n	80084ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80084de:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <vTaskDelay+0x68>)
 80084e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000e60 	.word	0x20000e60
 80084fc:	e000ed04 	.word	0xe000ed04

08008500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08a      	sub	sp, #40	@ 0x28
 8008504:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800850e:	463a      	mov	r2, r7
 8008510:	1d39      	adds	r1, r7, #4
 8008512:	f107 0308 	add.w	r3, r7, #8
 8008516:	4618      	mov	r0, r3
 8008518:	f7f8 f840 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	9202      	str	r2, [sp, #8]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	2300      	movs	r3, #0
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	460a      	mov	r2, r1
 800852e:	491f      	ldr	r1, [pc, #124]	@ (80085ac <vTaskStartScheduler+0xac>)
 8008530:	481f      	ldr	r0, [pc, #124]	@ (80085b0 <vTaskStartScheduler+0xb0>)
 8008532:	f7ff fe17 	bl	8008164 <xTaskCreateStatic>
 8008536:	4603      	mov	r3, r0
 8008538:	4a1e      	ldr	r2, [pc, #120]	@ (80085b4 <vTaskStartScheduler+0xb4>)
 800853a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800853c:	4b1d      	ldr	r3, [pc, #116]	@ (80085b4 <vTaskStartScheduler+0xb4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008544:	2301      	movs	r3, #1
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	e001      	b.n	800854e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d116      	bne.n	8008582 <vTaskStartScheduler+0x82>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	613b      	str	r3, [r7, #16]
}
 8008566:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008568:	4b13      	ldr	r3, [pc, #76]	@ (80085b8 <vTaskStartScheduler+0xb8>)
 800856a:	f04f 32ff 	mov.w	r2, #4294967295
 800856e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008570:	4b12      	ldr	r3, [pc, #72]	@ (80085bc <vTaskStartScheduler+0xbc>)
 8008572:	2201      	movs	r2, #1
 8008574:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008576:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <vTaskStartScheduler+0xc0>)
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800857c:	f000 fd60 	bl	8009040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008580:	e00f      	b.n	80085a2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d10b      	bne.n	80085a2 <vTaskStartScheduler+0xa2>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	60fb      	str	r3, [r7, #12]
}
 800859c:	bf00      	nop
 800859e:	bf00      	nop
 80085a0:	e7fd      	b.n	800859e <vTaskStartScheduler+0x9e>
}
 80085a2:	bf00      	nop
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	0800a7d4 	.word	0x0800a7d4
 80085b0:	08008b69 	.word	0x08008b69
 80085b4:	20000e5c 	.word	0x20000e5c
 80085b8:	20000e58 	.word	0x20000e58
 80085bc:	20000e44 	.word	0x20000e44
 80085c0:	20000e3c 	.word	0x20000e3c

080085c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085c8:	4b04      	ldr	r3, [pc, #16]	@ (80085dc <vTaskSuspendAll+0x18>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3301      	adds	r3, #1
 80085ce:	4a03      	ldr	r2, [pc, #12]	@ (80085dc <vTaskSuspendAll+0x18>)
 80085d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085d2:	bf00      	nop
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	20000e60 	.word	0x20000e60

080085e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085ee:	4b42      	ldr	r3, [pc, #264]	@ (80086f8 <xTaskResumeAll+0x118>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10b      	bne.n	800860e <xTaskResumeAll+0x2e>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	603b      	str	r3, [r7, #0]
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800860e:	f000 fdbb 	bl	8009188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008612:	4b39      	ldr	r3, [pc, #228]	@ (80086f8 <xTaskResumeAll+0x118>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3b01      	subs	r3, #1
 8008618:	4a37      	ldr	r2, [pc, #220]	@ (80086f8 <xTaskResumeAll+0x118>)
 800861a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800861c:	4b36      	ldr	r3, [pc, #216]	@ (80086f8 <xTaskResumeAll+0x118>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d161      	bne.n	80086e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008624:	4b35      	ldr	r3, [pc, #212]	@ (80086fc <xTaskResumeAll+0x11c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d05d      	beq.n	80086e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800862c:	e02e      	b.n	800868c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862e:	4b34      	ldr	r3, [pc, #208]	@ (8008700 <xTaskResumeAll+0x120>)
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3318      	adds	r3, #24
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff f812 	bl	8007664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3304      	adds	r3, #4
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff f80d 	bl	8007664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864e:	2201      	movs	r2, #1
 8008650:	409a      	lsls	r2, r3
 8008652:	4b2c      	ldr	r3, [pc, #176]	@ (8008704 <xTaskResumeAll+0x124>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4313      	orrs	r3, r2
 8008658:	4a2a      	ldr	r2, [pc, #168]	@ (8008704 <xTaskResumeAll+0x124>)
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008660:	4613      	mov	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4a27      	ldr	r2, [pc, #156]	@ (8008708 <xTaskResumeAll+0x128>)
 800866a:	441a      	add	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3304      	adds	r3, #4
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7fe ff99 	bl	80075aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800867c:	4b23      	ldr	r3, [pc, #140]	@ (800870c <xTaskResumeAll+0x12c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008682:	429a      	cmp	r2, r3
 8008684:	d302      	bcc.n	800868c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008686:	4b22      	ldr	r3, [pc, #136]	@ (8008710 <xTaskResumeAll+0x130>)
 8008688:	2201      	movs	r2, #1
 800868a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800868c:	4b1c      	ldr	r3, [pc, #112]	@ (8008700 <xTaskResumeAll+0x120>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1cc      	bne.n	800862e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800869a:	f000 fb1b 	bl	8008cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800869e:	4b1d      	ldr	r3, [pc, #116]	@ (8008714 <xTaskResumeAll+0x134>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d010      	beq.n	80086cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086aa:	f000 f837 	bl	800871c <xTaskIncrementTick>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80086b4:	4b16      	ldr	r3, [pc, #88]	@ (8008710 <xTaskResumeAll+0x130>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3b01      	subs	r3, #1
 80086be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f1      	bne.n	80086aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80086c6:	4b13      	ldr	r3, [pc, #76]	@ (8008714 <xTaskResumeAll+0x134>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <xTaskResumeAll+0x130>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d009      	beq.n	80086e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086d4:	2301      	movs	r3, #1
 80086d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008718 <xTaskResumeAll+0x138>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086e8:	f000 fd80 	bl	80091ec <vPortExitCritical>

	return xAlreadyYielded;
 80086ec:	68bb      	ldr	r3, [r7, #8]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000e60 	.word	0x20000e60
 80086fc:	20000e38 	.word	0x20000e38
 8008700:	20000df8 	.word	0x20000df8
 8008704:	20000e40 	.word	0x20000e40
 8008708:	20000d3c 	.word	0x20000d3c
 800870c:	20000d38 	.word	0x20000d38
 8008710:	20000e4c 	.word	0x20000e4c
 8008714:	20000e48 	.word	0x20000e48
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008726:	4b4f      	ldr	r3, [pc, #316]	@ (8008864 <xTaskIncrementTick+0x148>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	f040 808f 	bne.w	800884e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008730:	4b4d      	ldr	r3, [pc, #308]	@ (8008868 <xTaskIncrementTick+0x14c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008738:	4a4b      	ldr	r2, [pc, #300]	@ (8008868 <xTaskIncrementTick+0x14c>)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d121      	bne.n	8008788 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008744:	4b49      	ldr	r3, [pc, #292]	@ (800886c <xTaskIncrementTick+0x150>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <xTaskIncrementTick+0x4a>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	603b      	str	r3, [r7, #0]
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	e7fd      	b.n	8008762 <xTaskIncrementTick+0x46>
 8008766:	4b41      	ldr	r3, [pc, #260]	@ (800886c <xTaskIncrementTick+0x150>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	4b40      	ldr	r3, [pc, #256]	@ (8008870 <xTaskIncrementTick+0x154>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a3e      	ldr	r2, [pc, #248]	@ (800886c <xTaskIncrementTick+0x150>)
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	4a3e      	ldr	r2, [pc, #248]	@ (8008870 <xTaskIncrementTick+0x154>)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	4b3e      	ldr	r3, [pc, #248]	@ (8008874 <xTaskIncrementTick+0x158>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3301      	adds	r3, #1
 8008780:	4a3c      	ldr	r2, [pc, #240]	@ (8008874 <xTaskIncrementTick+0x158>)
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	f000 faa6 	bl	8008cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008788:	4b3b      	ldr	r3, [pc, #236]	@ (8008878 <xTaskIncrementTick+0x15c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	429a      	cmp	r2, r3
 8008790:	d348      	bcc.n	8008824 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008792:	4b36      	ldr	r3, [pc, #216]	@ (800886c <xTaskIncrementTick+0x150>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879c:	4b36      	ldr	r3, [pc, #216]	@ (8008878 <xTaskIncrementTick+0x15c>)
 800879e:	f04f 32ff 	mov.w	r2, #4294967295
 80087a2:	601a      	str	r2, [r3, #0]
					break;
 80087a4:	e03e      	b.n	8008824 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a6:	4b31      	ldr	r3, [pc, #196]	@ (800886c <xTaskIncrementTick+0x150>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d203      	bcs.n	80087c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087be:	4a2e      	ldr	r2, [pc, #184]	@ (8008878 <xTaskIncrementTick+0x15c>)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087c4:	e02e      	b.n	8008824 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	3304      	adds	r3, #4
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe ff4a 	bl	8007664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	3318      	adds	r3, #24
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fe ff41 	bl	8007664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e6:	2201      	movs	r2, #1
 80087e8:	409a      	lsls	r2, r3
 80087ea:	4b24      	ldr	r3, [pc, #144]	@ (800887c <xTaskIncrementTick+0x160>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	4a22      	ldr	r2, [pc, #136]	@ (800887c <xTaskIncrementTick+0x160>)
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4a1f      	ldr	r2, [pc, #124]	@ (8008880 <xTaskIncrementTick+0x164>)
 8008802:	441a      	add	r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	3304      	adds	r3, #4
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f7fe fecd 	bl	80075aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008814:	4b1b      	ldr	r3, [pc, #108]	@ (8008884 <xTaskIncrementTick+0x168>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	429a      	cmp	r2, r3
 800881c:	d3b9      	bcc.n	8008792 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800881e:	2301      	movs	r3, #1
 8008820:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008822:	e7b6      	b.n	8008792 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008824:	4b17      	ldr	r3, [pc, #92]	@ (8008884 <xTaskIncrementTick+0x168>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882a:	4915      	ldr	r1, [pc, #84]	@ (8008880 <xTaskIncrementTick+0x164>)
 800882c:	4613      	mov	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d901      	bls.n	8008840 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800883c:	2301      	movs	r3, #1
 800883e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008840:	4b11      	ldr	r3, [pc, #68]	@ (8008888 <xTaskIncrementTick+0x16c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d007      	beq.n	8008858 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008848:	2301      	movs	r3, #1
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	e004      	b.n	8008858 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800884e:	4b0f      	ldr	r3, [pc, #60]	@ (800888c <xTaskIncrementTick+0x170>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	4a0d      	ldr	r2, [pc, #52]	@ (800888c <xTaskIncrementTick+0x170>)
 8008856:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008858:	697b      	ldr	r3, [r7, #20]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20000e60 	.word	0x20000e60
 8008868:	20000e3c 	.word	0x20000e3c
 800886c:	20000df0 	.word	0x20000df0
 8008870:	20000df4 	.word	0x20000df4
 8008874:	20000e50 	.word	0x20000e50
 8008878:	20000e58 	.word	0x20000e58
 800887c:	20000e40 	.word	0x20000e40
 8008880:	20000d3c 	.word	0x20000d3c
 8008884:	20000d38 	.word	0x20000d38
 8008888:	20000e4c 	.word	0x20000e4c
 800888c:	20000e48 	.word	0x20000e48

08008890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008896:	4b27      	ldr	r3, [pc, #156]	@ (8008934 <vTaskSwitchContext+0xa4>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800889e:	4b26      	ldr	r3, [pc, #152]	@ (8008938 <vTaskSwitchContext+0xa8>)
 80088a0:	2201      	movs	r2, #1
 80088a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088a4:	e040      	b.n	8008928 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80088a6:	4b24      	ldr	r3, [pc, #144]	@ (8008938 <vTaskSwitchContext+0xa8>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ac:	4b23      	ldr	r3, [pc, #140]	@ (800893c <vTaskSwitchContext+0xac>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	fab3 f383 	clz	r3, r3
 80088b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80088ba:	7afb      	ldrb	r3, [r7, #11]
 80088bc:	f1c3 031f 	rsb	r3, r3, #31
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	491f      	ldr	r1, [pc, #124]	@ (8008940 <vTaskSwitchContext+0xb0>)
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10b      	bne.n	80088ee <vTaskSwitchContext+0x5e>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	607b      	str	r3, [r7, #4]
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	e7fd      	b.n	80088ea <vTaskSwitchContext+0x5a>
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4a11      	ldr	r2, [pc, #68]	@ (8008940 <vTaskSwitchContext+0xb0>)
 80088fa:	4413      	add	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	605a      	str	r2, [r3, #4]
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	3308      	adds	r3, #8
 8008910:	429a      	cmp	r2, r3
 8008912:	d104      	bne.n	800891e <vTaskSwitchContext+0x8e>
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	605a      	str	r2, [r3, #4]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	4a07      	ldr	r2, [pc, #28]	@ (8008944 <vTaskSwitchContext+0xb4>)
 8008926:	6013      	str	r3, [r2, #0]
}
 8008928:	bf00      	nop
 800892a:	371c      	adds	r7, #28
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	20000e60 	.word	0x20000e60
 8008938:	20000e4c 	.word	0x20000e4c
 800893c:	20000e40 	.word	0x20000e40
 8008940:	20000d3c 	.word	0x20000d3c
 8008944:	20000d38 	.word	0x20000d38

08008948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	60fb      	str	r3, [r7, #12]
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	e7fd      	b.n	800896c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008970:	4b07      	ldr	r3, [pc, #28]	@ (8008990 <vTaskPlaceOnEventList+0x48>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3318      	adds	r3, #24
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fe fe3a 	bl	80075f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800897e:	2101      	movs	r1, #1
 8008980:	6838      	ldr	r0, [r7, #0]
 8008982:	f000 fa6d 	bl	8008e60 <prvAddCurrentTaskToDelayedList>
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000d38 	.word	0x20000d38

08008994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10b      	bne.n	80089c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	60fb      	str	r3, [r7, #12]
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	3318      	adds	r3, #24
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe fe4c 	bl	8007664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a44 <xTaskRemoveFromEventList+0xb0>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d11c      	bne.n	8008a0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	3304      	adds	r3, #4
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fe fe43 	bl	8007664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e2:	2201      	movs	r2, #1
 80089e4:	409a      	lsls	r2, r3
 80089e6:	4b18      	ldr	r3, [pc, #96]	@ (8008a48 <xTaskRemoveFromEventList+0xb4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	4a16      	ldr	r2, [pc, #88]	@ (8008a48 <xTaskRemoveFromEventList+0xb4>)
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4a13      	ldr	r2, [pc, #76]	@ (8008a4c <xTaskRemoveFromEventList+0xb8>)
 80089fe:	441a      	add	r2, r3
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f7fe fdcf 	bl	80075aa <vListInsertEnd>
 8008a0c:	e005      	b.n	8008a1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	3318      	adds	r3, #24
 8008a12:	4619      	mov	r1, r3
 8008a14:	480e      	ldr	r0, [pc, #56]	@ (8008a50 <xTaskRemoveFromEventList+0xbc>)
 8008a16:	f7fe fdc8 	bl	80075aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a54 <xTaskRemoveFromEventList+0xc0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d905      	bls.n	8008a34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a58 <xTaskRemoveFromEventList+0xc4>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e001      	b.n	8008a38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a38:	697b      	ldr	r3, [r7, #20]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000e60 	.word	0x20000e60
 8008a48:	20000e40 	.word	0x20000e40
 8008a4c:	20000d3c 	.word	0x20000d3c
 8008a50:	20000df8 	.word	0x20000df8
 8008a54:	20000d38 	.word	0x20000d38
 8008a58:	20000e4c 	.word	0x20000e4c

08008a5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a64:	4b06      	ldr	r3, [pc, #24]	@ (8008a80 <vTaskInternalSetTimeOutState+0x24>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a6c:	4b05      	ldr	r3, [pc, #20]	@ (8008a84 <vTaskInternalSetTimeOutState+0x28>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	605a      	str	r2, [r3, #4]
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	20000e50 	.word	0x20000e50
 8008a84:	20000e3c 	.word	0x20000e3c

08008a88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10b      	bne.n	8008ab0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	613b      	str	r3, [r7, #16]
}
 8008aaa:	bf00      	nop
 8008aac:	bf00      	nop
 8008aae:	e7fd      	b.n	8008aac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10b      	bne.n	8008ace <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	60fb      	str	r3, [r7, #12]
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	e7fd      	b.n	8008aca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ace:	f000 fb5b 	bl	8009188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <xTaskCheckForTimeOut+0xc0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d102      	bne.n	8008af2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008aec:	2300      	movs	r3, #0
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	e023      	b.n	8008b3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	4b15      	ldr	r3, [pc, #84]	@ (8008b4c <xTaskCheckForTimeOut+0xc4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d007      	beq.n	8008b0e <xTaskCheckForTimeOut+0x86>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d302      	bcc.n	8008b0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	e015      	b.n	8008b3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d20b      	bcs.n	8008b30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	1ad2      	subs	r2, r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff ff99 	bl	8008a5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61fb      	str	r3, [r7, #28]
 8008b2e:	e004      	b.n	8008b3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b3a:	f000 fb57 	bl	80091ec <vPortExitCritical>

	return xReturn;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3720      	adds	r7, #32
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000e3c 	.word	0x20000e3c
 8008b4c:	20000e50 	.word	0x20000e50

08008b50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b54:	4b03      	ldr	r3, [pc, #12]	@ (8008b64 <vTaskMissedYield+0x14>)
 8008b56:	2201      	movs	r2, #1
 8008b58:	601a      	str	r2, [r3, #0]
}
 8008b5a:	bf00      	nop
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20000e4c 	.word	0x20000e4c

08008b68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b70:	f000 f852 	bl	8008c18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b74:	4b06      	ldr	r3, [pc, #24]	@ (8008b90 <prvIdleTask+0x28>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d9f9      	bls.n	8008b70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b7c:	4b05      	ldr	r3, [pc, #20]	@ (8008b94 <prvIdleTask+0x2c>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b8c:	e7f0      	b.n	8008b70 <prvIdleTask+0x8>
 8008b8e:	bf00      	nop
 8008b90:	20000d3c 	.word	0x20000d3c
 8008b94:	e000ed04 	.word	0xe000ed04

08008b98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	607b      	str	r3, [r7, #4]
 8008ba2:	e00c      	b.n	8008bbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4a12      	ldr	r2, [pc, #72]	@ (8008bf8 <prvInitialiseTaskLists+0x60>)
 8008bb0:	4413      	add	r3, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fccc 	bl	8007550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b06      	cmp	r3, #6
 8008bc2:	d9ef      	bls.n	8008ba4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bc4:	480d      	ldr	r0, [pc, #52]	@ (8008bfc <prvInitialiseTaskLists+0x64>)
 8008bc6:	f7fe fcc3 	bl	8007550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bca:	480d      	ldr	r0, [pc, #52]	@ (8008c00 <prvInitialiseTaskLists+0x68>)
 8008bcc:	f7fe fcc0 	bl	8007550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bd0:	480c      	ldr	r0, [pc, #48]	@ (8008c04 <prvInitialiseTaskLists+0x6c>)
 8008bd2:	f7fe fcbd 	bl	8007550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bd6:	480c      	ldr	r0, [pc, #48]	@ (8008c08 <prvInitialiseTaskLists+0x70>)
 8008bd8:	f7fe fcba 	bl	8007550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008bdc:	480b      	ldr	r0, [pc, #44]	@ (8008c0c <prvInitialiseTaskLists+0x74>)
 8008bde:	f7fe fcb7 	bl	8007550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008be2:	4b0b      	ldr	r3, [pc, #44]	@ (8008c10 <prvInitialiseTaskLists+0x78>)
 8008be4:	4a05      	ldr	r2, [pc, #20]	@ (8008bfc <prvInitialiseTaskLists+0x64>)
 8008be6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008be8:	4b0a      	ldr	r3, [pc, #40]	@ (8008c14 <prvInitialiseTaskLists+0x7c>)
 8008bea:	4a05      	ldr	r2, [pc, #20]	@ (8008c00 <prvInitialiseTaskLists+0x68>)
 8008bec:	601a      	str	r2, [r3, #0]
}
 8008bee:	bf00      	nop
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000d3c 	.word	0x20000d3c
 8008bfc:	20000dc8 	.word	0x20000dc8
 8008c00:	20000ddc 	.word	0x20000ddc
 8008c04:	20000df8 	.word	0x20000df8
 8008c08:	20000e0c 	.word	0x20000e0c
 8008c0c:	20000e24 	.word	0x20000e24
 8008c10:	20000df0 	.word	0x20000df0
 8008c14:	20000df4 	.word	0x20000df4

08008c18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c1e:	e019      	b.n	8008c54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c20:	f000 fab2 	bl	8009188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c24:	4b10      	ldr	r3, [pc, #64]	@ (8008c68 <prvCheckTasksWaitingTermination+0x50>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe fd17 	bl	8007664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c36:	4b0d      	ldr	r3, [pc, #52]	@ (8008c6c <prvCheckTasksWaitingTermination+0x54>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008c6c <prvCheckTasksWaitingTermination+0x54>)
 8008c3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c40:	4b0b      	ldr	r3, [pc, #44]	@ (8008c70 <prvCheckTasksWaitingTermination+0x58>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	4a0a      	ldr	r2, [pc, #40]	@ (8008c70 <prvCheckTasksWaitingTermination+0x58>)
 8008c48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c4a:	f000 facf 	bl	80091ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f810 	bl	8008c74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c54:	4b06      	ldr	r3, [pc, #24]	@ (8008c70 <prvCheckTasksWaitingTermination+0x58>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e1      	bne.n	8008c20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c5c:	bf00      	nop
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000e0c 	.word	0x20000e0c
 8008c6c:	20000e38 	.word	0x20000e38
 8008c70:	20000e20 	.word	0x20000e20

08008c74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d108      	bne.n	8008c98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 fc6c 	bl	8009568 <vPortFree>
				vPortFree( pxTCB );
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fc69 	bl	8009568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c96:	e019      	b.n	8008ccc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d103      	bne.n	8008caa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fc60 	bl	8009568 <vPortFree>
	}
 8008ca8:	e010      	b.n	8008ccc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d00b      	beq.n	8008ccc <prvDeleteTCB+0x58>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	60fb      	str	r3, [r7, #12]
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	e7fd      	b.n	8008cc8 <prvDeleteTCB+0x54>
	}
 8008ccc:	bf00      	nop
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cda:	4b0c      	ldr	r3, [pc, #48]	@ (8008d0c <prvResetNextTaskUnblockTime+0x38>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d10 <prvResetNextTaskUnblockTime+0x3c>)
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cec:	e008      	b.n	8008d00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cee:	4b07      	ldr	r3, [pc, #28]	@ (8008d0c <prvResetNextTaskUnblockTime+0x38>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4a04      	ldr	r2, [pc, #16]	@ (8008d10 <prvResetNextTaskUnblockTime+0x3c>)
 8008cfe:	6013      	str	r3, [r2, #0]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20000df0 	.word	0x20000df0
 8008d10:	20000e58 	.word	0x20000e58

08008d14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d48 <xTaskGetSchedulerState+0x34>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d102      	bne.n	8008d28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d22:	2301      	movs	r3, #1
 8008d24:	607b      	str	r3, [r7, #4]
 8008d26:	e008      	b.n	8008d3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d28:	4b08      	ldr	r3, [pc, #32]	@ (8008d4c <xTaskGetSchedulerState+0x38>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d30:	2302      	movs	r3, #2
 8008d32:	607b      	str	r3, [r7, #4]
 8008d34:	e001      	b.n	8008d3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d36:	2300      	movs	r3, #0
 8008d38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d3a:	687b      	ldr	r3, [r7, #4]
	}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20000e44 	.word	0x20000e44
 8008d4c:	20000e60 	.word	0x20000e60

08008d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d070      	beq.n	8008e48 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d66:	4b3b      	ldr	r3, [pc, #236]	@ (8008e54 <xTaskPriorityDisinherit+0x104>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d00b      	beq.n	8008d88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
}
 8008d82:	bf00      	nop
 8008d84:	bf00      	nop
 8008d86:	e7fd      	b.n	8008d84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10b      	bne.n	8008da8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	60bb      	str	r3, [r7, #8]
}
 8008da2:	bf00      	nop
 8008da4:	bf00      	nop
 8008da6:	e7fd      	b.n	8008da4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dac:	1e5a      	subs	r2, r3, #1
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d044      	beq.n	8008e48 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d140      	bne.n	8008e48 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fc4a 	bl	8007664 <uxListRemove>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d115      	bne.n	8008e02 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dda:	491f      	ldr	r1, [pc, #124]	@ (8008e58 <xTaskPriorityDisinherit+0x108>)
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xTaskPriorityDisinherit+0xb2>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df0:	2201      	movs	r2, #1
 8008df2:	fa02 f303 	lsl.w	r3, r2, r3
 8008df6:	43da      	mvns	r2, r3
 8008df8:	4b18      	ldr	r3, [pc, #96]	@ (8008e5c <xTaskPriorityDisinherit+0x10c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	4a17      	ldr	r2, [pc, #92]	@ (8008e5c <xTaskPriorityDisinherit+0x10c>)
 8008e00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e0e:	f1c3 0207 	rsb	r2, r3, #7
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	409a      	lsls	r2, r3
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e5c <xTaskPriorityDisinherit+0x10c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	4a0d      	ldr	r2, [pc, #52]	@ (8008e5c <xTaskPriorityDisinherit+0x10c>)
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4a08      	ldr	r2, [pc, #32]	@ (8008e58 <xTaskPriorityDisinherit+0x108>)
 8008e36:	441a      	add	r2, r3
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f7fe fbb3 	bl	80075aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e44:	2301      	movs	r3, #1
 8008e46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e48:	697b      	ldr	r3, [r7, #20]
	}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20000d38 	.word	0x20000d38
 8008e58:	20000d3c 	.word	0x20000d3c
 8008e5c:	20000e40 	.word	0x20000e40

08008e60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e6a:	4b29      	ldr	r3, [pc, #164]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e70:	4b28      	ldr	r3, [pc, #160]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3304      	adds	r3, #4
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fbf4 	bl	8007664 <uxListRemove>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10b      	bne.n	8008e9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008e82:	4b24      	ldr	r3, [pc, #144]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e88:	2201      	movs	r2, #1
 8008e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8e:	43da      	mvns	r2, r3
 8008e90:	4b21      	ldr	r3, [pc, #132]	@ (8008f18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4013      	ands	r3, r2
 8008e96:	4a20      	ldr	r2, [pc, #128]	@ (8008f18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea0:	d10a      	bne.n	8008eb8 <prvAddCurrentTaskToDelayedList+0x58>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d007      	beq.n	8008eb8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3304      	adds	r3, #4
 8008eae:	4619      	mov	r1, r3
 8008eb0:	481a      	ldr	r0, [pc, #104]	@ (8008f1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008eb2:	f7fe fb7a 	bl	80075aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eb6:	e026      	b.n	8008f06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ec0:	4b14      	ldr	r3, [pc, #80]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d209      	bcs.n	8008ee4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed0:	4b13      	ldr	r3, [pc, #76]	@ (8008f20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	4619      	mov	r1, r3
 8008edc:	4610      	mov	r0, r2
 8008ede:	f7fe fb88 	bl	80075f2 <vListInsert>
}
 8008ee2:	e010      	b.n	8008f06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	f7fe fb7e 	bl	80075f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8008f28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d202      	bcs.n	8008f06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f00:	4a09      	ldr	r2, [pc, #36]	@ (8008f28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	6013      	str	r3, [r2, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000e3c 	.word	0x20000e3c
 8008f14:	20000d38 	.word	0x20000d38
 8008f18:	20000e40 	.word	0x20000e40
 8008f1c:	20000e24 	.word	0x20000e24
 8008f20:	20000df4 	.word	0x20000df4
 8008f24:	20000df0 	.word	0x20000df0
 8008f28:	20000e58 	.word	0x20000e58

08008f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3b04      	subs	r3, #4
 8008f3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3b04      	subs	r3, #4
 8008f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f023 0201 	bic.w	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8008f90 <pxPortInitialiseStack+0x64>)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3b14      	subs	r3, #20
 8008f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3b04      	subs	r3, #4
 8008f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f06f 0202 	mvn.w	r2, #2
 8008f7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3b20      	subs	r3, #32
 8008f80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f82:	68fb      	ldr	r3, [r7, #12]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	08008f95 	.word	0x08008f95

08008f94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f9e:	4b13      	ldr	r3, [pc, #76]	@ (8008fec <prvTaskExitError+0x58>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa6:	d00b      	beq.n	8008fc0 <prvTaskExitError+0x2c>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	60fb      	str	r3, [r7, #12]
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <prvTaskExitError+0x28>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	60bb      	str	r3, [r7, #8]
}
 8008fd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008fd4:	bf00      	nop
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0fc      	beq.n	8008fd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	2000000c 	.word	0x2000000c

08008ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ff0:	4b07      	ldr	r3, [pc, #28]	@ (8009010 <pxCurrentTCBConst2>)
 8008ff2:	6819      	ldr	r1, [r3, #0]
 8008ff4:	6808      	ldr	r0, [r1, #0]
 8008ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffa:	f380 8809 	msr	PSP, r0
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f04f 0000 	mov.w	r0, #0
 8009006:	f380 8811 	msr	BASEPRI, r0
 800900a:	4770      	bx	lr
 800900c:	f3af 8000 	nop.w

08009010 <pxCurrentTCBConst2>:
 8009010:	20000d38 	.word	0x20000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop

08009018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009018:	4808      	ldr	r0, [pc, #32]	@ (800903c <prvPortStartFirstTask+0x24>)
 800901a:	6800      	ldr	r0, [r0, #0]
 800901c:	6800      	ldr	r0, [r0, #0]
 800901e:	f380 8808 	msr	MSP, r0
 8009022:	f04f 0000 	mov.w	r0, #0
 8009026:	f380 8814 	msr	CONTROL, r0
 800902a:	b662      	cpsie	i
 800902c:	b661      	cpsie	f
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	df00      	svc	0
 8009038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800903a:	bf00      	nop
 800903c:	e000ed08 	.word	0xe000ed08

08009040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009046:	4b47      	ldr	r3, [pc, #284]	@ (8009164 <xPortStartScheduler+0x124>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a47      	ldr	r2, [pc, #284]	@ (8009168 <xPortStartScheduler+0x128>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d10b      	bne.n	8009068 <xPortStartScheduler+0x28>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	60fb      	str	r3, [r7, #12]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009068:	4b3e      	ldr	r3, [pc, #248]	@ (8009164 <xPortStartScheduler+0x124>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a3f      	ldr	r2, [pc, #252]	@ (800916c <xPortStartScheduler+0x12c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d10b      	bne.n	800908a <xPortStartScheduler+0x4a>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	613b      	str	r3, [r7, #16]
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	e7fd      	b.n	8009086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800908a:	4b39      	ldr	r3, [pc, #228]	@ (8009170 <xPortStartScheduler+0x130>)
 800908c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	22ff      	movs	r2, #255	@ 0xff
 800909a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	4b31      	ldr	r3, [pc, #196]	@ (8009174 <xPortStartScheduler+0x134>)
 80090b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090b2:	4b31      	ldr	r3, [pc, #196]	@ (8009178 <xPortStartScheduler+0x138>)
 80090b4:	2207      	movs	r2, #7
 80090b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090b8:	e009      	b.n	80090ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80090ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009178 <xPortStartScheduler+0x138>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3b01      	subs	r3, #1
 80090c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009178 <xPortStartScheduler+0x138>)
 80090c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d6:	2b80      	cmp	r3, #128	@ 0x80
 80090d8:	d0ef      	beq.n	80090ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090da:	4b27      	ldr	r3, [pc, #156]	@ (8009178 <xPortStartScheduler+0x138>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f1c3 0307 	rsb	r3, r3, #7
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d00b      	beq.n	80090fe <xPortStartScheduler+0xbe>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60bb      	str	r3, [r7, #8]
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009178 <xPortStartScheduler+0x138>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	4a1c      	ldr	r2, [pc, #112]	@ (8009178 <xPortStartScheduler+0x138>)
 8009106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009108:	4b1b      	ldr	r3, [pc, #108]	@ (8009178 <xPortStartScheduler+0x138>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009110:	4a19      	ldr	r2, [pc, #100]	@ (8009178 <xPortStartScheduler+0x138>)
 8009112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	b2da      	uxtb	r2, r3
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800911c:	4b17      	ldr	r3, [pc, #92]	@ (800917c <xPortStartScheduler+0x13c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a16      	ldr	r2, [pc, #88]	@ (800917c <xPortStartScheduler+0x13c>)
 8009122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009128:	4b14      	ldr	r3, [pc, #80]	@ (800917c <xPortStartScheduler+0x13c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a13      	ldr	r2, [pc, #76]	@ (800917c <xPortStartScheduler+0x13c>)
 800912e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009134:	f000 f8da 	bl	80092ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009138:	4b11      	ldr	r3, [pc, #68]	@ (8009180 <xPortStartScheduler+0x140>)
 800913a:	2200      	movs	r2, #0
 800913c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800913e:	f000 f8f9 	bl	8009334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009142:	4b10      	ldr	r3, [pc, #64]	@ (8009184 <xPortStartScheduler+0x144>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a0f      	ldr	r2, [pc, #60]	@ (8009184 <xPortStartScheduler+0x144>)
 8009148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800914c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800914e:	f7ff ff63 	bl	8009018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009152:	f7ff fb9d 	bl	8008890 <vTaskSwitchContext>
	prvTaskExitError();
 8009156:	f7ff ff1d 	bl	8008f94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	e000ed00 	.word	0xe000ed00
 8009168:	410fc271 	.word	0x410fc271
 800916c:	410fc270 	.word	0x410fc270
 8009170:	e000e400 	.word	0xe000e400
 8009174:	20000e64 	.word	0x20000e64
 8009178:	20000e68 	.word	0x20000e68
 800917c:	e000ed20 	.word	0xe000ed20
 8009180:	2000000c 	.word	0x2000000c
 8009184:	e000ef34 	.word	0xe000ef34

08009188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	607b      	str	r3, [r7, #4]
}
 80091a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091a2:	4b10      	ldr	r3, [pc, #64]	@ (80091e4 <vPortEnterCritical+0x5c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3301      	adds	r3, #1
 80091a8:	4a0e      	ldr	r2, [pc, #56]	@ (80091e4 <vPortEnterCritical+0x5c>)
 80091aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091ac:	4b0d      	ldr	r3, [pc, #52]	@ (80091e4 <vPortEnterCritical+0x5c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d110      	bne.n	80091d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091b4:	4b0c      	ldr	r3, [pc, #48]	@ (80091e8 <vPortEnterCritical+0x60>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00b      	beq.n	80091d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	603b      	str	r3, [r7, #0]
}
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	e7fd      	b.n	80091d2 <vPortEnterCritical+0x4a>
	}
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	2000000c 	.word	0x2000000c
 80091e8:	e000ed04 	.word	0xe000ed04

080091ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091f2:	4b12      	ldr	r3, [pc, #72]	@ (800923c <vPortExitCritical+0x50>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10b      	bne.n	8009212 <vPortExitCritical+0x26>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	607b      	str	r3, [r7, #4]
}
 800920c:	bf00      	nop
 800920e:	bf00      	nop
 8009210:	e7fd      	b.n	800920e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009212:	4b0a      	ldr	r3, [pc, #40]	@ (800923c <vPortExitCritical+0x50>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3b01      	subs	r3, #1
 8009218:	4a08      	ldr	r2, [pc, #32]	@ (800923c <vPortExitCritical+0x50>)
 800921a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800921c:	4b07      	ldr	r3, [pc, #28]	@ (800923c <vPortExitCritical+0x50>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d105      	bne.n	8009230 <vPortExitCritical+0x44>
 8009224:	2300      	movs	r3, #0
 8009226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f383 8811 	msr	BASEPRI, r3
}
 800922e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	2000000c 	.word	0x2000000c

08009240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009240:	f3ef 8009 	mrs	r0, PSP
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	4b15      	ldr	r3, [pc, #84]	@ (80092a0 <pxCurrentTCBConst>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	f01e 0f10 	tst.w	lr, #16
 8009250:	bf08      	it	eq
 8009252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	6010      	str	r0, [r2, #0]
 800925c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009264:	f380 8811 	msr	BASEPRI, r0
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f7ff fb0e 	bl	8008890 <vTaskSwitchContext>
 8009274:	f04f 0000 	mov.w	r0, #0
 8009278:	f380 8811 	msr	BASEPRI, r0
 800927c:	bc09      	pop	{r0, r3}
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	6808      	ldr	r0, [r1, #0]
 8009282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009286:	f01e 0f10 	tst.w	lr, #16
 800928a:	bf08      	it	eq
 800928c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009290:	f380 8809 	msr	PSP, r0
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	f3af 8000 	nop.w

080092a0 <pxCurrentTCBConst>:
 80092a0:	20000d38 	.word	0x20000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop

080092a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	607b      	str	r3, [r7, #4]
}
 80092c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092c2:	f7ff fa2b 	bl	800871c <xTaskIncrementTick>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092cc:	4b06      	ldr	r3, [pc, #24]	@ (80092e8 <xPortSysTickHandler+0x40>)
 80092ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	2300      	movs	r3, #0
 80092d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f383 8811 	msr	BASEPRI, r3
}
 80092de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	e000ed04 	.word	0xe000ed04

080092ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009320 <vPortSetupTimerInterrupt+0x34>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009324 <vPortSetupTimerInterrupt+0x38>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009328 <vPortSetupTimerInterrupt+0x3c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a0a      	ldr	r2, [pc, #40]	@ (800932c <vPortSetupTimerInterrupt+0x40>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	099b      	lsrs	r3, r3, #6
 8009308:	4a09      	ldr	r2, [pc, #36]	@ (8009330 <vPortSetupTimerInterrupt+0x44>)
 800930a:	3b01      	subs	r3, #1
 800930c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800930e:	4b04      	ldr	r3, [pc, #16]	@ (8009320 <vPortSetupTimerInterrupt+0x34>)
 8009310:	2207      	movs	r2, #7
 8009312:	601a      	str	r2, [r3, #0]
}
 8009314:	bf00      	nop
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	e000e010 	.word	0xe000e010
 8009324:	e000e018 	.word	0xe000e018
 8009328:	20000000 	.word	0x20000000
 800932c:	10624dd3 	.word	0x10624dd3
 8009330:	e000e014 	.word	0xe000e014

08009334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009344 <vPortEnableVFP+0x10>
 8009338:	6801      	ldr	r1, [r0, #0]
 800933a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800933e:	6001      	str	r1, [r0, #0]
 8009340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009342:	bf00      	nop
 8009344:	e000ed88 	.word	0xe000ed88

08009348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800934e:	f3ef 8305 	mrs	r3, IPSR
 8009352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b0f      	cmp	r3, #15
 8009358:	d915      	bls.n	8009386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800935a:	4a18      	ldr	r2, [pc, #96]	@ (80093bc <vPortValidateInterruptPriority+0x74>)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4413      	add	r3, r2
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009364:	4b16      	ldr	r3, [pc, #88]	@ (80093c0 <vPortValidateInterruptPriority+0x78>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	7afa      	ldrb	r2, [r7, #11]
 800936a:	429a      	cmp	r2, r3
 800936c:	d20b      	bcs.n	8009386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	607b      	str	r3, [r7, #4]
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	e7fd      	b.n	8009382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009386:	4b0f      	ldr	r3, [pc, #60]	@ (80093c4 <vPortValidateInterruptPriority+0x7c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800938e:	4b0e      	ldr	r3, [pc, #56]	@ (80093c8 <vPortValidateInterruptPriority+0x80>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	429a      	cmp	r2, r3
 8009394:	d90b      	bls.n	80093ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	603b      	str	r3, [r7, #0]
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <vPortValidateInterruptPriority+0x62>
	}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	e000e3f0 	.word	0xe000e3f0
 80093c0:	20000e64 	.word	0x20000e64
 80093c4:	e000ed0c 	.word	0xe000ed0c
 80093c8:	20000e68 	.word	0x20000e68

080093cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	@ 0x28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093d4:	2300      	movs	r3, #0
 80093d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093d8:	f7ff f8f4 	bl	80085c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009550 <pvPortMalloc+0x184>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093e4:	f000 f924 	bl	8009630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009554 <pvPortMalloc+0x188>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4013      	ands	r3, r2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f040 8095 	bne.w	8009520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01e      	beq.n	800943a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80093fc:	2208      	movs	r2, #8
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4413      	add	r3, r2
 8009402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	2b00      	cmp	r3, #0
 800940c:	d015      	beq.n	800943a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f023 0307 	bic.w	r3, r3, #7
 8009414:	3308      	adds	r3, #8
 8009416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00b      	beq.n	800943a <pvPortMalloc+0x6e>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	617b      	str	r3, [r7, #20]
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d06f      	beq.n	8009520 <pvPortMalloc+0x154>
 8009440:	4b45      	ldr	r3, [pc, #276]	@ (8009558 <pvPortMalloc+0x18c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	429a      	cmp	r2, r3
 8009448:	d86a      	bhi.n	8009520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800944a:	4b44      	ldr	r3, [pc, #272]	@ (800955c <pvPortMalloc+0x190>)
 800944c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800944e:	4b43      	ldr	r3, [pc, #268]	@ (800955c <pvPortMalloc+0x190>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009454:	e004      	b.n	8009460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d903      	bls.n	8009472 <pvPortMalloc+0xa6>
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f1      	bne.n	8009456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009472:	4b37      	ldr	r3, [pc, #220]	@ (8009550 <pvPortMalloc+0x184>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009478:	429a      	cmp	r2, r3
 800947a:	d051      	beq.n	8009520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2208      	movs	r2, #8
 8009482:	4413      	add	r3, r2
 8009484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	1ad2      	subs	r2, r2, r3
 8009496:	2308      	movs	r3, #8
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	429a      	cmp	r2, r3
 800949c:	d920      	bls.n	80094e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800949e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4413      	add	r3, r2
 80094a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00b      	beq.n	80094c8 <pvPortMalloc+0xfc>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	613b      	str	r3, [r7, #16]
}
 80094c2:	bf00      	nop
 80094c4:	bf00      	nop
 80094c6:	e7fd      	b.n	80094c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	1ad2      	subs	r2, r2, r3
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094da:	69b8      	ldr	r0, [r7, #24]
 80094dc:	f000 f90a 	bl	80096f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009558 <pvPortMalloc+0x18c>)
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009558 <pvPortMalloc+0x18c>)
 80094ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009558 <pvPortMalloc+0x18c>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009560 <pvPortMalloc+0x194>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d203      	bcs.n	8009502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094fa:	4b17      	ldr	r3, [pc, #92]	@ (8009558 <pvPortMalloc+0x18c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a18      	ldr	r2, [pc, #96]	@ (8009560 <pvPortMalloc+0x194>)
 8009500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	4b13      	ldr	r3, [pc, #76]	@ (8009554 <pvPortMalloc+0x188>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	431a      	orrs	r2, r3
 800950c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009516:	4b13      	ldr	r3, [pc, #76]	@ (8009564 <pvPortMalloc+0x198>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3301      	adds	r3, #1
 800951c:	4a11      	ldr	r2, [pc, #68]	@ (8009564 <pvPortMalloc+0x198>)
 800951e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009520:	f7ff f85e 	bl	80085e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00b      	beq.n	8009546 <pvPortMalloc+0x17a>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	60fb      	str	r3, [r7, #12]
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	e7fd      	b.n	8009542 <pvPortMalloc+0x176>
	return pvReturn;
 8009546:	69fb      	ldr	r3, [r7, #28]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3728      	adds	r7, #40	@ 0x28
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20001a2c 	.word	0x20001a2c
 8009554:	20001a40 	.word	0x20001a40
 8009558:	20001a30 	.word	0x20001a30
 800955c:	20001a24 	.word	0x20001a24
 8009560:	20001a34 	.word	0x20001a34
 8009564:	20001a38 	.word	0x20001a38

08009568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d04f      	beq.n	800961a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800957a:	2308      	movs	r3, #8
 800957c:	425b      	negs	r3, r3
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	4413      	add	r3, r2
 8009582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	4b25      	ldr	r3, [pc, #148]	@ (8009624 <vPortFree+0xbc>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4013      	ands	r3, r2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10b      	bne.n	80095ae <vPortFree+0x46>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	60fb      	str	r3, [r7, #12]
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	e7fd      	b.n	80095aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <vPortFree+0x66>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	60bb      	str	r3, [r7, #8]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	4b14      	ldr	r3, [pc, #80]	@ (8009624 <vPortFree+0xbc>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4013      	ands	r3, r2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01e      	beq.n	800961a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d11a      	bne.n	800961a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009624 <vPortFree+0xbc>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	43db      	mvns	r3, r3
 80095ee:	401a      	ands	r2, r3
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095f4:	f7fe ffe6 	bl	80085c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <vPortFree+0xc0>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4413      	add	r3, r2
 8009602:	4a09      	ldr	r2, [pc, #36]	@ (8009628 <vPortFree+0xc0>)
 8009604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009606:	6938      	ldr	r0, [r7, #16]
 8009608:	f000 f874 	bl	80096f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800960c:	4b07      	ldr	r3, [pc, #28]	@ (800962c <vPortFree+0xc4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3301      	adds	r3, #1
 8009612:	4a06      	ldr	r2, [pc, #24]	@ (800962c <vPortFree+0xc4>)
 8009614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009616:	f7fe ffe3 	bl	80085e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800961a:	bf00      	nop
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20001a40 	.word	0x20001a40
 8009628:	20001a30 	.word	0x20001a30
 800962c:	20001a3c 	.word	0x20001a3c

08009630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009636:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800963a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800963c:	4b27      	ldr	r3, [pc, #156]	@ (80096dc <prvHeapInit+0xac>)
 800963e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3307      	adds	r3, #7
 800964e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0307 	bic.w	r3, r3, #7
 8009656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	4a1f      	ldr	r2, [pc, #124]	@ (80096dc <prvHeapInit+0xac>)
 8009660:	4413      	add	r3, r2
 8009662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009668:	4a1d      	ldr	r2, [pc, #116]	@ (80096e0 <prvHeapInit+0xb0>)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800966e:	4b1c      	ldr	r3, [pc, #112]	@ (80096e0 <prvHeapInit+0xb0>)
 8009670:	2200      	movs	r2, #0
 8009672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	4413      	add	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800967c:	2208      	movs	r2, #8
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f023 0307 	bic.w	r3, r3, #7
 800968a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4a15      	ldr	r2, [pc, #84]	@ (80096e4 <prvHeapInit+0xb4>)
 8009690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009692:	4b14      	ldr	r3, [pc, #80]	@ (80096e4 <prvHeapInit+0xb4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800969a:	4b12      	ldr	r3, [pc, #72]	@ (80096e4 <prvHeapInit+0xb4>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	1ad2      	subs	r2, r2, r3
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096b0:	4b0c      	ldr	r3, [pc, #48]	@ (80096e4 <prvHeapInit+0xb4>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	4a0a      	ldr	r2, [pc, #40]	@ (80096e8 <prvHeapInit+0xb8>)
 80096be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	4a09      	ldr	r2, [pc, #36]	@ (80096ec <prvHeapInit+0xbc>)
 80096c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096c8:	4b09      	ldr	r3, [pc, #36]	@ (80096f0 <prvHeapInit+0xc0>)
 80096ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80096ce:	601a      	str	r2, [r3, #0]
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	20000e6c 	.word	0x20000e6c
 80096e0:	20001a24 	.word	0x20001a24
 80096e4:	20001a2c 	.word	0x20001a2c
 80096e8:	20001a34 	.word	0x20001a34
 80096ec:	20001a30 	.word	0x20001a30
 80096f0:	20001a40 	.word	0x20001a40

080096f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096fc:	4b28      	ldr	r3, [pc, #160]	@ (80097a0 <prvInsertBlockIntoFreeList+0xac>)
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e002      	b.n	8009708 <prvInsertBlockIntoFreeList+0x14>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	429a      	cmp	r2, r3
 8009710:	d8f7      	bhi.n	8009702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	4413      	add	r3, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d108      	bne.n	8009736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	441a      	add	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	441a      	add	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d118      	bne.n	800977c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	4b15      	ldr	r3, [pc, #84]	@ (80097a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d00d      	beq.n	8009772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	441a      	add	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	e008      	b.n	8009784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009772:	4b0c      	ldr	r3, [pc, #48]	@ (80097a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e003      	b.n	8009784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	429a      	cmp	r2, r3
 800978a:	d002      	beq.n	8009792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009792:	bf00      	nop
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20001a24 	.word	0x20001a24
 80097a4:	20001a2c 	.word	0x20001a2c

080097a8 <std>:
 80097a8:	2300      	movs	r3, #0
 80097aa:	b510      	push	{r4, lr}
 80097ac:	4604      	mov	r4, r0
 80097ae:	e9c0 3300 	strd	r3, r3, [r0]
 80097b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097b6:	6083      	str	r3, [r0, #8]
 80097b8:	8181      	strh	r1, [r0, #12]
 80097ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80097bc:	81c2      	strh	r2, [r0, #14]
 80097be:	6183      	str	r3, [r0, #24]
 80097c0:	4619      	mov	r1, r3
 80097c2:	2208      	movs	r2, #8
 80097c4:	305c      	adds	r0, #92	@ 0x5c
 80097c6:	f000 f9f9 	bl	8009bbc <memset>
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x58>)
 80097cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x5c>)
 80097d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009808 <std+0x60>)
 80097d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097d6:	4b0d      	ldr	r3, [pc, #52]	@ (800980c <std+0x64>)
 80097d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80097da:	4b0d      	ldr	r3, [pc, #52]	@ (8009810 <std+0x68>)
 80097dc:	6224      	str	r4, [r4, #32]
 80097de:	429c      	cmp	r4, r3
 80097e0:	d006      	beq.n	80097f0 <std+0x48>
 80097e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097e6:	4294      	cmp	r4, r2
 80097e8:	d002      	beq.n	80097f0 <std+0x48>
 80097ea:	33d0      	adds	r3, #208	@ 0xd0
 80097ec:	429c      	cmp	r4, r3
 80097ee:	d105      	bne.n	80097fc <std+0x54>
 80097f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f8:	f000 ba58 	b.w	8009cac <__retarget_lock_init_recursive>
 80097fc:	bd10      	pop	{r4, pc}
 80097fe:	bf00      	nop
 8009800:	08009a0d 	.word	0x08009a0d
 8009804:	08009a2f 	.word	0x08009a2f
 8009808:	08009a67 	.word	0x08009a67
 800980c:	08009a8b 	.word	0x08009a8b
 8009810:	20001a44 	.word	0x20001a44

08009814 <stdio_exit_handler>:
 8009814:	4a02      	ldr	r2, [pc, #8]	@ (8009820 <stdio_exit_handler+0xc>)
 8009816:	4903      	ldr	r1, [pc, #12]	@ (8009824 <stdio_exit_handler+0x10>)
 8009818:	4803      	ldr	r0, [pc, #12]	@ (8009828 <stdio_exit_handler+0x14>)
 800981a:	f000 b869 	b.w	80098f0 <_fwalk_sglue>
 800981e:	bf00      	nop
 8009820:	20000010 	.word	0x20000010
 8009824:	0800a565 	.word	0x0800a565
 8009828:	20000020 	.word	0x20000020

0800982c <cleanup_stdio>:
 800982c:	6841      	ldr	r1, [r0, #4]
 800982e:	4b0c      	ldr	r3, [pc, #48]	@ (8009860 <cleanup_stdio+0x34>)
 8009830:	4299      	cmp	r1, r3
 8009832:	b510      	push	{r4, lr}
 8009834:	4604      	mov	r4, r0
 8009836:	d001      	beq.n	800983c <cleanup_stdio+0x10>
 8009838:	f000 fe94 	bl	800a564 <_fflush_r>
 800983c:	68a1      	ldr	r1, [r4, #8]
 800983e:	4b09      	ldr	r3, [pc, #36]	@ (8009864 <cleanup_stdio+0x38>)
 8009840:	4299      	cmp	r1, r3
 8009842:	d002      	beq.n	800984a <cleanup_stdio+0x1e>
 8009844:	4620      	mov	r0, r4
 8009846:	f000 fe8d 	bl	800a564 <_fflush_r>
 800984a:	68e1      	ldr	r1, [r4, #12]
 800984c:	4b06      	ldr	r3, [pc, #24]	@ (8009868 <cleanup_stdio+0x3c>)
 800984e:	4299      	cmp	r1, r3
 8009850:	d004      	beq.n	800985c <cleanup_stdio+0x30>
 8009852:	4620      	mov	r0, r4
 8009854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009858:	f000 be84 	b.w	800a564 <_fflush_r>
 800985c:	bd10      	pop	{r4, pc}
 800985e:	bf00      	nop
 8009860:	20001a44 	.word	0x20001a44
 8009864:	20001aac 	.word	0x20001aac
 8009868:	20001b14 	.word	0x20001b14

0800986c <global_stdio_init.part.0>:
 800986c:	b510      	push	{r4, lr}
 800986e:	4b0b      	ldr	r3, [pc, #44]	@ (800989c <global_stdio_init.part.0+0x30>)
 8009870:	4c0b      	ldr	r4, [pc, #44]	@ (80098a0 <global_stdio_init.part.0+0x34>)
 8009872:	4a0c      	ldr	r2, [pc, #48]	@ (80098a4 <global_stdio_init.part.0+0x38>)
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	4620      	mov	r0, r4
 8009878:	2200      	movs	r2, #0
 800987a:	2104      	movs	r1, #4
 800987c:	f7ff ff94 	bl	80097a8 <std>
 8009880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009884:	2201      	movs	r2, #1
 8009886:	2109      	movs	r1, #9
 8009888:	f7ff ff8e 	bl	80097a8 <std>
 800988c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009890:	2202      	movs	r2, #2
 8009892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009896:	2112      	movs	r1, #18
 8009898:	f7ff bf86 	b.w	80097a8 <std>
 800989c:	20001b7c 	.word	0x20001b7c
 80098a0:	20001a44 	.word	0x20001a44
 80098a4:	08009815 	.word	0x08009815

080098a8 <__sfp_lock_acquire>:
 80098a8:	4801      	ldr	r0, [pc, #4]	@ (80098b0 <__sfp_lock_acquire+0x8>)
 80098aa:	f000 ba00 	b.w	8009cae <__retarget_lock_acquire_recursive>
 80098ae:	bf00      	nop
 80098b0:	20001b85 	.word	0x20001b85

080098b4 <__sfp_lock_release>:
 80098b4:	4801      	ldr	r0, [pc, #4]	@ (80098bc <__sfp_lock_release+0x8>)
 80098b6:	f000 b9fb 	b.w	8009cb0 <__retarget_lock_release_recursive>
 80098ba:	bf00      	nop
 80098bc:	20001b85 	.word	0x20001b85

080098c0 <__sinit>:
 80098c0:	b510      	push	{r4, lr}
 80098c2:	4604      	mov	r4, r0
 80098c4:	f7ff fff0 	bl	80098a8 <__sfp_lock_acquire>
 80098c8:	6a23      	ldr	r3, [r4, #32]
 80098ca:	b11b      	cbz	r3, 80098d4 <__sinit+0x14>
 80098cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d0:	f7ff bff0 	b.w	80098b4 <__sfp_lock_release>
 80098d4:	4b04      	ldr	r3, [pc, #16]	@ (80098e8 <__sinit+0x28>)
 80098d6:	6223      	str	r3, [r4, #32]
 80098d8:	4b04      	ldr	r3, [pc, #16]	@ (80098ec <__sinit+0x2c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f5      	bne.n	80098cc <__sinit+0xc>
 80098e0:	f7ff ffc4 	bl	800986c <global_stdio_init.part.0>
 80098e4:	e7f2      	b.n	80098cc <__sinit+0xc>
 80098e6:	bf00      	nop
 80098e8:	0800982d 	.word	0x0800982d
 80098ec:	20001b7c 	.word	0x20001b7c

080098f0 <_fwalk_sglue>:
 80098f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f4:	4607      	mov	r7, r0
 80098f6:	4688      	mov	r8, r1
 80098f8:	4614      	mov	r4, r2
 80098fa:	2600      	movs	r6, #0
 80098fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009900:	f1b9 0901 	subs.w	r9, r9, #1
 8009904:	d505      	bpl.n	8009912 <_fwalk_sglue+0x22>
 8009906:	6824      	ldr	r4, [r4, #0]
 8009908:	2c00      	cmp	r4, #0
 800990a:	d1f7      	bne.n	80098fc <_fwalk_sglue+0xc>
 800990c:	4630      	mov	r0, r6
 800990e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d907      	bls.n	8009928 <_fwalk_sglue+0x38>
 8009918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800991c:	3301      	adds	r3, #1
 800991e:	d003      	beq.n	8009928 <_fwalk_sglue+0x38>
 8009920:	4629      	mov	r1, r5
 8009922:	4638      	mov	r0, r7
 8009924:	47c0      	blx	r8
 8009926:	4306      	orrs	r6, r0
 8009928:	3568      	adds	r5, #104	@ 0x68
 800992a:	e7e9      	b.n	8009900 <_fwalk_sglue+0x10>

0800992c <iprintf>:
 800992c:	b40f      	push	{r0, r1, r2, r3}
 800992e:	b507      	push	{r0, r1, r2, lr}
 8009930:	4906      	ldr	r1, [pc, #24]	@ (800994c <iprintf+0x20>)
 8009932:	ab04      	add	r3, sp, #16
 8009934:	6808      	ldr	r0, [r1, #0]
 8009936:	f853 2b04 	ldr.w	r2, [r3], #4
 800993a:	6881      	ldr	r1, [r0, #8]
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	f000 fae9 	bl	8009f14 <_vfiprintf_r>
 8009942:	b003      	add	sp, #12
 8009944:	f85d eb04 	ldr.w	lr, [sp], #4
 8009948:	b004      	add	sp, #16
 800994a:	4770      	bx	lr
 800994c:	2000001c 	.word	0x2000001c

08009950 <_puts_r>:
 8009950:	6a03      	ldr	r3, [r0, #32]
 8009952:	b570      	push	{r4, r5, r6, lr}
 8009954:	6884      	ldr	r4, [r0, #8]
 8009956:	4605      	mov	r5, r0
 8009958:	460e      	mov	r6, r1
 800995a:	b90b      	cbnz	r3, 8009960 <_puts_r+0x10>
 800995c:	f7ff ffb0 	bl	80098c0 <__sinit>
 8009960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009962:	07db      	lsls	r3, r3, #31
 8009964:	d405      	bmi.n	8009972 <_puts_r+0x22>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	0598      	lsls	r0, r3, #22
 800996a:	d402      	bmi.n	8009972 <_puts_r+0x22>
 800996c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800996e:	f000 f99e 	bl	8009cae <__retarget_lock_acquire_recursive>
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	0719      	lsls	r1, r3, #28
 8009976:	d502      	bpl.n	800997e <_puts_r+0x2e>
 8009978:	6923      	ldr	r3, [r4, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d135      	bne.n	80099ea <_puts_r+0x9a>
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f000 f8c5 	bl	8009b10 <__swsetup_r>
 8009986:	b380      	cbz	r0, 80099ea <_puts_r+0x9a>
 8009988:	f04f 35ff 	mov.w	r5, #4294967295
 800998c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800998e:	07da      	lsls	r2, r3, #31
 8009990:	d405      	bmi.n	800999e <_puts_r+0x4e>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	059b      	lsls	r3, r3, #22
 8009996:	d402      	bmi.n	800999e <_puts_r+0x4e>
 8009998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800999a:	f000 f989 	bl	8009cb0 <__retarget_lock_release_recursive>
 800999e:	4628      	mov	r0, r5
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	da04      	bge.n	80099b0 <_puts_r+0x60>
 80099a6:	69a2      	ldr	r2, [r4, #24]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	dc17      	bgt.n	80099dc <_puts_r+0x8c>
 80099ac:	290a      	cmp	r1, #10
 80099ae:	d015      	beq.n	80099dc <_puts_r+0x8c>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	6022      	str	r2, [r4, #0]
 80099b6:	7019      	strb	r1, [r3, #0]
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099be:	3b01      	subs	r3, #1
 80099c0:	60a3      	str	r3, [r4, #8]
 80099c2:	2900      	cmp	r1, #0
 80099c4:	d1ed      	bne.n	80099a2 <_puts_r+0x52>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	da11      	bge.n	80099ee <_puts_r+0x9e>
 80099ca:	4622      	mov	r2, r4
 80099cc:	210a      	movs	r1, #10
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 f85f 	bl	8009a92 <__swbuf_r>
 80099d4:	3001      	adds	r0, #1
 80099d6:	d0d7      	beq.n	8009988 <_puts_r+0x38>
 80099d8:	250a      	movs	r5, #10
 80099da:	e7d7      	b.n	800998c <_puts_r+0x3c>
 80099dc:	4622      	mov	r2, r4
 80099de:	4628      	mov	r0, r5
 80099e0:	f000 f857 	bl	8009a92 <__swbuf_r>
 80099e4:	3001      	adds	r0, #1
 80099e6:	d1e7      	bne.n	80099b8 <_puts_r+0x68>
 80099e8:	e7ce      	b.n	8009988 <_puts_r+0x38>
 80099ea:	3e01      	subs	r6, #1
 80099ec:	e7e4      	b.n	80099b8 <_puts_r+0x68>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	6022      	str	r2, [r4, #0]
 80099f4:	220a      	movs	r2, #10
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	e7ee      	b.n	80099d8 <_puts_r+0x88>
	...

080099fc <puts>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	@ (8009a08 <puts+0xc>)
 80099fe:	4601      	mov	r1, r0
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	f7ff bfa5 	b.w	8009950 <_puts_r>
 8009a06:	bf00      	nop
 8009a08:	2000001c 	.word	0x2000001c

08009a0c <__sread>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	460c      	mov	r4, r1
 8009a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a14:	f000 f8fc 	bl	8009c10 <_read_r>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	bfab      	itete	ge
 8009a1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a20:	181b      	addge	r3, r3, r0
 8009a22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a26:	bfac      	ite	ge
 8009a28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a2a:	81a3      	strhlt	r3, [r4, #12]
 8009a2c:	bd10      	pop	{r4, pc}

08009a2e <__swrite>:
 8009a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a32:	461f      	mov	r7, r3
 8009a34:	898b      	ldrh	r3, [r1, #12]
 8009a36:	05db      	lsls	r3, r3, #23
 8009a38:	4605      	mov	r5, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	d505      	bpl.n	8009a4c <__swrite+0x1e>
 8009a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a44:	2302      	movs	r3, #2
 8009a46:	2200      	movs	r2, #0
 8009a48:	f000 f8d0 	bl	8009bec <_lseek_r>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	4632      	mov	r2, r6
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	f000 b8e7 	b.w	8009c34 <_write_r>

08009a66 <__sseek>:
 8009a66:	b510      	push	{r4, lr}
 8009a68:	460c      	mov	r4, r1
 8009a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6e:	f000 f8bd 	bl	8009bec <_lseek_r>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	bf15      	itete	ne
 8009a78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a82:	81a3      	strheq	r3, [r4, #12]
 8009a84:	bf18      	it	ne
 8009a86:	81a3      	strhne	r3, [r4, #12]
 8009a88:	bd10      	pop	{r4, pc}

08009a8a <__sclose>:
 8009a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8e:	f000 b89d 	b.w	8009bcc <_close_r>

08009a92 <__swbuf_r>:
 8009a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a94:	460e      	mov	r6, r1
 8009a96:	4614      	mov	r4, r2
 8009a98:	4605      	mov	r5, r0
 8009a9a:	b118      	cbz	r0, 8009aa4 <__swbuf_r+0x12>
 8009a9c:	6a03      	ldr	r3, [r0, #32]
 8009a9e:	b90b      	cbnz	r3, 8009aa4 <__swbuf_r+0x12>
 8009aa0:	f7ff ff0e 	bl	80098c0 <__sinit>
 8009aa4:	69a3      	ldr	r3, [r4, #24]
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	071a      	lsls	r2, r3, #28
 8009aac:	d501      	bpl.n	8009ab2 <__swbuf_r+0x20>
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	b943      	cbnz	r3, 8009ac4 <__swbuf_r+0x32>
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f000 f82b 	bl	8009b10 <__swsetup_r>
 8009aba:	b118      	cbz	r0, 8009ac4 <__swbuf_r+0x32>
 8009abc:	f04f 37ff 	mov.w	r7, #4294967295
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	6922      	ldr	r2, [r4, #16]
 8009ac8:	1a98      	subs	r0, r3, r2
 8009aca:	6963      	ldr	r3, [r4, #20]
 8009acc:	b2f6      	uxtb	r6, r6
 8009ace:	4283      	cmp	r3, r0
 8009ad0:	4637      	mov	r7, r6
 8009ad2:	dc05      	bgt.n	8009ae0 <__swbuf_r+0x4e>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f000 fd44 	bl	800a564 <_fflush_r>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d1ed      	bne.n	8009abc <__swbuf_r+0x2a>
 8009ae0:	68a3      	ldr	r3, [r4, #8]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	60a3      	str	r3, [r4, #8]
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	6022      	str	r2, [r4, #0]
 8009aec:	701e      	strb	r6, [r3, #0]
 8009aee:	6962      	ldr	r2, [r4, #20]
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d004      	beq.n	8009b00 <__swbuf_r+0x6e>
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	07db      	lsls	r3, r3, #31
 8009afa:	d5e1      	bpl.n	8009ac0 <__swbuf_r+0x2e>
 8009afc:	2e0a      	cmp	r6, #10
 8009afe:	d1df      	bne.n	8009ac0 <__swbuf_r+0x2e>
 8009b00:	4621      	mov	r1, r4
 8009b02:	4628      	mov	r0, r5
 8009b04:	f000 fd2e 	bl	800a564 <_fflush_r>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d0d9      	beq.n	8009ac0 <__swbuf_r+0x2e>
 8009b0c:	e7d6      	b.n	8009abc <__swbuf_r+0x2a>
	...

08009b10 <__swsetup_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4b29      	ldr	r3, [pc, #164]	@ (8009bb8 <__swsetup_r+0xa8>)
 8009b14:	4605      	mov	r5, r0
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	460c      	mov	r4, r1
 8009b1a:	b118      	cbz	r0, 8009b24 <__swsetup_r+0x14>
 8009b1c:	6a03      	ldr	r3, [r0, #32]
 8009b1e:	b90b      	cbnz	r3, 8009b24 <__swsetup_r+0x14>
 8009b20:	f7ff fece 	bl	80098c0 <__sinit>
 8009b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b28:	0719      	lsls	r1, r3, #28
 8009b2a:	d422      	bmi.n	8009b72 <__swsetup_r+0x62>
 8009b2c:	06da      	lsls	r2, r3, #27
 8009b2e:	d407      	bmi.n	8009b40 <__swsetup_r+0x30>
 8009b30:	2209      	movs	r2, #9
 8009b32:	602a      	str	r2, [r5, #0]
 8009b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	e033      	b.n	8009ba8 <__swsetup_r+0x98>
 8009b40:	0758      	lsls	r0, r3, #29
 8009b42:	d512      	bpl.n	8009b6a <__swsetup_r+0x5a>
 8009b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b46:	b141      	cbz	r1, 8009b5a <__swsetup_r+0x4a>
 8009b48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	d002      	beq.n	8009b56 <__swsetup_r+0x46>
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 f8bd 	bl	8009cd0 <_free_r>
 8009b56:	2300      	movs	r3, #0
 8009b58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b60:	81a3      	strh	r3, [r4, #12]
 8009b62:	2300      	movs	r3, #0
 8009b64:	6063      	str	r3, [r4, #4]
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f043 0308 	orr.w	r3, r3, #8
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	b94b      	cbnz	r3, 8009b8a <__swsetup_r+0x7a>
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b80:	d003      	beq.n	8009b8a <__swsetup_r+0x7a>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4628      	mov	r0, r5
 8009b86:	f000 fd3b 	bl	800a600 <__smakebuf_r>
 8009b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8e:	f013 0201 	ands.w	r2, r3, #1
 8009b92:	d00a      	beq.n	8009baa <__swsetup_r+0x9a>
 8009b94:	2200      	movs	r2, #0
 8009b96:	60a2      	str	r2, [r4, #8]
 8009b98:	6962      	ldr	r2, [r4, #20]
 8009b9a:	4252      	negs	r2, r2
 8009b9c:	61a2      	str	r2, [r4, #24]
 8009b9e:	6922      	ldr	r2, [r4, #16]
 8009ba0:	b942      	cbnz	r2, 8009bb4 <__swsetup_r+0xa4>
 8009ba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ba6:	d1c5      	bne.n	8009b34 <__swsetup_r+0x24>
 8009ba8:	bd38      	pop	{r3, r4, r5, pc}
 8009baa:	0799      	lsls	r1, r3, #30
 8009bac:	bf58      	it	pl
 8009bae:	6962      	ldrpl	r2, [r4, #20]
 8009bb0:	60a2      	str	r2, [r4, #8]
 8009bb2:	e7f4      	b.n	8009b9e <__swsetup_r+0x8e>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e7f7      	b.n	8009ba8 <__swsetup_r+0x98>
 8009bb8:	2000001c 	.word	0x2000001c

08009bbc <memset>:
 8009bbc:	4402      	add	r2, r0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d100      	bne.n	8009bc6 <memset+0xa>
 8009bc4:	4770      	bx	lr
 8009bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009bca:	e7f9      	b.n	8009bc0 <memset+0x4>

08009bcc <_close_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4d06      	ldr	r5, [pc, #24]	@ (8009be8 <_close_r+0x1c>)
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	602b      	str	r3, [r5, #0]
 8009bd8:	f7f7 fe70 	bl	80018bc <_close>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d102      	bne.n	8009be6 <_close_r+0x1a>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	b103      	cbz	r3, 8009be6 <_close_r+0x1a>
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	20001b80 	.word	0x20001b80

08009bec <_lseek_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d07      	ldr	r5, [pc, #28]	@ (8009c0c <_lseek_r+0x20>)
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	602a      	str	r2, [r5, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f7f7 fe85 	bl	800190a <_lseek>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d102      	bne.n	8009c0a <_lseek_r+0x1e>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	b103      	cbz	r3, 8009c0a <_lseek_r+0x1e>
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	20001b80 	.word	0x20001b80

08009c10 <_read_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d07      	ldr	r5, [pc, #28]	@ (8009c30 <_read_r+0x20>)
 8009c14:	4604      	mov	r4, r0
 8009c16:	4608      	mov	r0, r1
 8009c18:	4611      	mov	r1, r2
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	602a      	str	r2, [r5, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f7f7 fe13 	bl	800184a <_read>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d102      	bne.n	8009c2e <_read_r+0x1e>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	b103      	cbz	r3, 8009c2e <_read_r+0x1e>
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	20001b80 	.word	0x20001b80

08009c34 <_write_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d07      	ldr	r5, [pc, #28]	@ (8009c54 <_write_r+0x20>)
 8009c38:	4604      	mov	r4, r0
 8009c3a:	4608      	mov	r0, r1
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	2200      	movs	r2, #0
 8009c40:	602a      	str	r2, [r5, #0]
 8009c42:	461a      	mov	r2, r3
 8009c44:	f7f7 fe1e 	bl	8001884 <_write>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_write_r+0x1e>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_write_r+0x1e>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	20001b80 	.word	0x20001b80

08009c58 <__errno>:
 8009c58:	4b01      	ldr	r3, [pc, #4]	@ (8009c60 <__errno+0x8>)
 8009c5a:	6818      	ldr	r0, [r3, #0]
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	2000001c 	.word	0x2000001c

08009c64 <__libc_init_array>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	4d0d      	ldr	r5, [pc, #52]	@ (8009c9c <__libc_init_array+0x38>)
 8009c68:	4c0d      	ldr	r4, [pc, #52]	@ (8009ca0 <__libc_init_array+0x3c>)
 8009c6a:	1b64      	subs	r4, r4, r5
 8009c6c:	10a4      	asrs	r4, r4, #2
 8009c6e:	2600      	movs	r6, #0
 8009c70:	42a6      	cmp	r6, r4
 8009c72:	d109      	bne.n	8009c88 <__libc_init_array+0x24>
 8009c74:	4d0b      	ldr	r5, [pc, #44]	@ (8009ca4 <__libc_init_array+0x40>)
 8009c76:	4c0c      	ldr	r4, [pc, #48]	@ (8009ca8 <__libc_init_array+0x44>)
 8009c78:	f000 fd30 	bl	800a6dc <_init>
 8009c7c:	1b64      	subs	r4, r4, r5
 8009c7e:	10a4      	asrs	r4, r4, #2
 8009c80:	2600      	movs	r6, #0
 8009c82:	42a6      	cmp	r6, r4
 8009c84:	d105      	bne.n	8009c92 <__libc_init_array+0x2e>
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
 8009c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c8c:	4798      	blx	r3
 8009c8e:	3601      	adds	r6, #1
 8009c90:	e7ee      	b.n	8009c70 <__libc_init_array+0xc>
 8009c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c96:	4798      	blx	r3
 8009c98:	3601      	adds	r6, #1
 8009c9a:	e7f2      	b.n	8009c82 <__libc_init_array+0x1e>
 8009c9c:	0800a860 	.word	0x0800a860
 8009ca0:	0800a860 	.word	0x0800a860
 8009ca4:	0800a860 	.word	0x0800a860
 8009ca8:	0800a864 	.word	0x0800a864

08009cac <__retarget_lock_init_recursive>:
 8009cac:	4770      	bx	lr

08009cae <__retarget_lock_acquire_recursive>:
 8009cae:	4770      	bx	lr

08009cb0 <__retarget_lock_release_recursive>:
 8009cb0:	4770      	bx	lr

08009cb2 <memcpy>:
 8009cb2:	440a      	add	r2, r1
 8009cb4:	4291      	cmp	r1, r2
 8009cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cba:	d100      	bne.n	8009cbe <memcpy+0xc>
 8009cbc:	4770      	bx	lr
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cc8:	4291      	cmp	r1, r2
 8009cca:	d1f9      	bne.n	8009cc0 <memcpy+0xe>
 8009ccc:	bd10      	pop	{r4, pc}
	...

08009cd0 <_free_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	d041      	beq.n	8009d5c <_free_r+0x8c>
 8009cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cdc:	1f0c      	subs	r4, r1, #4
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bfb8      	it	lt
 8009ce2:	18e4      	addlt	r4, r4, r3
 8009ce4:	f000 f8e0 	bl	8009ea8 <__malloc_lock>
 8009ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d60 <_free_r+0x90>)
 8009cea:	6813      	ldr	r3, [r2, #0]
 8009cec:	b933      	cbnz	r3, 8009cfc <_free_r+0x2c>
 8009cee:	6063      	str	r3, [r4, #4]
 8009cf0:	6014      	str	r4, [r2, #0]
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cf8:	f000 b8dc 	b.w	8009eb4 <__malloc_unlock>
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	d908      	bls.n	8009d12 <_free_r+0x42>
 8009d00:	6820      	ldr	r0, [r4, #0]
 8009d02:	1821      	adds	r1, r4, r0
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf01      	itttt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	1809      	addeq	r1, r1, r0
 8009d0e:	6021      	streq	r1, [r4, #0]
 8009d10:	e7ed      	b.n	8009cee <_free_r+0x1e>
 8009d12:	461a      	mov	r2, r3
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	b10b      	cbz	r3, 8009d1c <_free_r+0x4c>
 8009d18:	42a3      	cmp	r3, r4
 8009d1a:	d9fa      	bls.n	8009d12 <_free_r+0x42>
 8009d1c:	6811      	ldr	r1, [r2, #0]
 8009d1e:	1850      	adds	r0, r2, r1
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	d10b      	bne.n	8009d3c <_free_r+0x6c>
 8009d24:	6820      	ldr	r0, [r4, #0]
 8009d26:	4401      	add	r1, r0
 8009d28:	1850      	adds	r0, r2, r1
 8009d2a:	4283      	cmp	r3, r0
 8009d2c:	6011      	str	r1, [r2, #0]
 8009d2e:	d1e0      	bne.n	8009cf2 <_free_r+0x22>
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	6053      	str	r3, [r2, #4]
 8009d36:	4408      	add	r0, r1
 8009d38:	6010      	str	r0, [r2, #0]
 8009d3a:	e7da      	b.n	8009cf2 <_free_r+0x22>
 8009d3c:	d902      	bls.n	8009d44 <_free_r+0x74>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	602b      	str	r3, [r5, #0]
 8009d42:	e7d6      	b.n	8009cf2 <_free_r+0x22>
 8009d44:	6820      	ldr	r0, [r4, #0]
 8009d46:	1821      	adds	r1, r4, r0
 8009d48:	428b      	cmp	r3, r1
 8009d4a:	bf04      	itt	eq
 8009d4c:	6819      	ldreq	r1, [r3, #0]
 8009d4e:	685b      	ldreq	r3, [r3, #4]
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	bf04      	itt	eq
 8009d54:	1809      	addeq	r1, r1, r0
 8009d56:	6021      	streq	r1, [r4, #0]
 8009d58:	6054      	str	r4, [r2, #4]
 8009d5a:	e7ca      	b.n	8009cf2 <_free_r+0x22>
 8009d5c:	bd38      	pop	{r3, r4, r5, pc}
 8009d5e:	bf00      	nop
 8009d60:	20001b8c 	.word	0x20001b8c

08009d64 <sbrk_aligned>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4e0f      	ldr	r6, [pc, #60]	@ (8009da4 <sbrk_aligned+0x40>)
 8009d68:	460c      	mov	r4, r1
 8009d6a:	6831      	ldr	r1, [r6, #0]
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	b911      	cbnz	r1, 8009d76 <sbrk_aligned+0x12>
 8009d70:	f000 fca4 	bl	800a6bc <_sbrk_r>
 8009d74:	6030      	str	r0, [r6, #0]
 8009d76:	4621      	mov	r1, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f000 fc9f 	bl	800a6bc <_sbrk_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	d103      	bne.n	8009d8a <sbrk_aligned+0x26>
 8009d82:	f04f 34ff 	mov.w	r4, #4294967295
 8009d86:	4620      	mov	r0, r4
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
 8009d8a:	1cc4      	adds	r4, r0, #3
 8009d8c:	f024 0403 	bic.w	r4, r4, #3
 8009d90:	42a0      	cmp	r0, r4
 8009d92:	d0f8      	beq.n	8009d86 <sbrk_aligned+0x22>
 8009d94:	1a21      	subs	r1, r4, r0
 8009d96:	4628      	mov	r0, r5
 8009d98:	f000 fc90 	bl	800a6bc <_sbrk_r>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d1f2      	bne.n	8009d86 <sbrk_aligned+0x22>
 8009da0:	e7ef      	b.n	8009d82 <sbrk_aligned+0x1e>
 8009da2:	bf00      	nop
 8009da4:	20001b88 	.word	0x20001b88

08009da8 <_malloc_r>:
 8009da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	1ccd      	adds	r5, r1, #3
 8009dae:	f025 0503 	bic.w	r5, r5, #3
 8009db2:	3508      	adds	r5, #8
 8009db4:	2d0c      	cmp	r5, #12
 8009db6:	bf38      	it	cc
 8009db8:	250c      	movcc	r5, #12
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	db01      	blt.n	8009dc4 <_malloc_r+0x1c>
 8009dc0:	42a9      	cmp	r1, r5
 8009dc2:	d904      	bls.n	8009dce <_malloc_r+0x26>
 8009dc4:	230c      	movs	r3, #12
 8009dc6:	6033      	str	r3, [r6, #0]
 8009dc8:	2000      	movs	r0, #0
 8009dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ea4 <_malloc_r+0xfc>
 8009dd2:	f000 f869 	bl	8009ea8 <__malloc_lock>
 8009dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8009dda:	461c      	mov	r4, r3
 8009ddc:	bb44      	cbnz	r4, 8009e30 <_malloc_r+0x88>
 8009dde:	4629      	mov	r1, r5
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff ffbf 	bl	8009d64 <sbrk_aligned>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	4604      	mov	r4, r0
 8009dea:	d158      	bne.n	8009e9e <_malloc_r+0xf6>
 8009dec:	f8d8 4000 	ldr.w	r4, [r8]
 8009df0:	4627      	mov	r7, r4
 8009df2:	2f00      	cmp	r7, #0
 8009df4:	d143      	bne.n	8009e7e <_malloc_r+0xd6>
 8009df6:	2c00      	cmp	r4, #0
 8009df8:	d04b      	beq.n	8009e92 <_malloc_r+0xea>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	4630      	mov	r0, r6
 8009e00:	eb04 0903 	add.w	r9, r4, r3
 8009e04:	f000 fc5a 	bl	800a6bc <_sbrk_r>
 8009e08:	4581      	cmp	r9, r0
 8009e0a:	d142      	bne.n	8009e92 <_malloc_r+0xea>
 8009e0c:	6821      	ldr	r1, [r4, #0]
 8009e0e:	1a6d      	subs	r5, r5, r1
 8009e10:	4629      	mov	r1, r5
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7ff ffa6 	bl	8009d64 <sbrk_aligned>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d03a      	beq.n	8009e92 <_malloc_r+0xea>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	442b      	add	r3, r5
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	f8d8 3000 	ldr.w	r3, [r8]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	bb62      	cbnz	r2, 8009e84 <_malloc_r+0xdc>
 8009e2a:	f8c8 7000 	str.w	r7, [r8]
 8009e2e:	e00f      	b.n	8009e50 <_malloc_r+0xa8>
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	1b52      	subs	r2, r2, r5
 8009e34:	d420      	bmi.n	8009e78 <_malloc_r+0xd0>
 8009e36:	2a0b      	cmp	r2, #11
 8009e38:	d917      	bls.n	8009e6a <_malloc_r+0xc2>
 8009e3a:	1961      	adds	r1, r4, r5
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	6025      	str	r5, [r4, #0]
 8009e40:	bf18      	it	ne
 8009e42:	6059      	strne	r1, [r3, #4]
 8009e44:	6863      	ldr	r3, [r4, #4]
 8009e46:	bf08      	it	eq
 8009e48:	f8c8 1000 	streq.w	r1, [r8]
 8009e4c:	5162      	str	r2, [r4, r5]
 8009e4e:	604b      	str	r3, [r1, #4]
 8009e50:	4630      	mov	r0, r6
 8009e52:	f000 f82f 	bl	8009eb4 <__malloc_unlock>
 8009e56:	f104 000b 	add.w	r0, r4, #11
 8009e5a:	1d23      	adds	r3, r4, #4
 8009e5c:	f020 0007 	bic.w	r0, r0, #7
 8009e60:	1ac2      	subs	r2, r0, r3
 8009e62:	bf1c      	itt	ne
 8009e64:	1a1b      	subne	r3, r3, r0
 8009e66:	50a3      	strne	r3, [r4, r2]
 8009e68:	e7af      	b.n	8009dca <_malloc_r+0x22>
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	bf0c      	ite	eq
 8009e70:	f8c8 2000 	streq.w	r2, [r8]
 8009e74:	605a      	strne	r2, [r3, #4]
 8009e76:	e7eb      	b.n	8009e50 <_malloc_r+0xa8>
 8009e78:	4623      	mov	r3, r4
 8009e7a:	6864      	ldr	r4, [r4, #4]
 8009e7c:	e7ae      	b.n	8009ddc <_malloc_r+0x34>
 8009e7e:	463c      	mov	r4, r7
 8009e80:	687f      	ldr	r7, [r7, #4]
 8009e82:	e7b6      	b.n	8009df2 <_malloc_r+0x4a>
 8009e84:	461a      	mov	r2, r3
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	d1fb      	bne.n	8009e84 <_malloc_r+0xdc>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	6053      	str	r3, [r2, #4]
 8009e90:	e7de      	b.n	8009e50 <_malloc_r+0xa8>
 8009e92:	230c      	movs	r3, #12
 8009e94:	6033      	str	r3, [r6, #0]
 8009e96:	4630      	mov	r0, r6
 8009e98:	f000 f80c 	bl	8009eb4 <__malloc_unlock>
 8009e9c:	e794      	b.n	8009dc8 <_malloc_r+0x20>
 8009e9e:	6005      	str	r5, [r0, #0]
 8009ea0:	e7d6      	b.n	8009e50 <_malloc_r+0xa8>
 8009ea2:	bf00      	nop
 8009ea4:	20001b8c 	.word	0x20001b8c

08009ea8 <__malloc_lock>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	@ (8009eb0 <__malloc_lock+0x8>)
 8009eaa:	f7ff bf00 	b.w	8009cae <__retarget_lock_acquire_recursive>
 8009eae:	bf00      	nop
 8009eb0:	20001b84 	.word	0x20001b84

08009eb4 <__malloc_unlock>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	@ (8009ebc <__malloc_unlock+0x8>)
 8009eb6:	f7ff befb 	b.w	8009cb0 <__retarget_lock_release_recursive>
 8009eba:	bf00      	nop
 8009ebc:	20001b84 	.word	0x20001b84

08009ec0 <__sfputc_r>:
 8009ec0:	6893      	ldr	r3, [r2, #8]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	b410      	push	{r4}
 8009ec8:	6093      	str	r3, [r2, #8]
 8009eca:	da08      	bge.n	8009ede <__sfputc_r+0x1e>
 8009ecc:	6994      	ldr	r4, [r2, #24]
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	db01      	blt.n	8009ed6 <__sfputc_r+0x16>
 8009ed2:	290a      	cmp	r1, #10
 8009ed4:	d103      	bne.n	8009ede <__sfputc_r+0x1e>
 8009ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eda:	f7ff bdda 	b.w	8009a92 <__swbuf_r>
 8009ede:	6813      	ldr	r3, [r2, #0]
 8009ee0:	1c58      	adds	r0, r3, #1
 8009ee2:	6010      	str	r0, [r2, #0]
 8009ee4:	7019      	strb	r1, [r3, #0]
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <__sfputs_r>:
 8009eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	460f      	mov	r7, r1
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	18d5      	adds	r5, r2, r3
 8009ef8:	42ac      	cmp	r4, r5
 8009efa:	d101      	bne.n	8009f00 <__sfputs_r+0x12>
 8009efc:	2000      	movs	r0, #0
 8009efe:	e007      	b.n	8009f10 <__sfputs_r+0x22>
 8009f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f04:	463a      	mov	r2, r7
 8009f06:	4630      	mov	r0, r6
 8009f08:	f7ff ffda 	bl	8009ec0 <__sfputc_r>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d1f3      	bne.n	8009ef8 <__sfputs_r+0xa>
 8009f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f14 <_vfiprintf_r>:
 8009f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	460d      	mov	r5, r1
 8009f1a:	b09d      	sub	sp, #116	@ 0x74
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	4698      	mov	r8, r3
 8009f20:	4606      	mov	r6, r0
 8009f22:	b118      	cbz	r0, 8009f2c <_vfiprintf_r+0x18>
 8009f24:	6a03      	ldr	r3, [r0, #32]
 8009f26:	b90b      	cbnz	r3, 8009f2c <_vfiprintf_r+0x18>
 8009f28:	f7ff fcca 	bl	80098c0 <__sinit>
 8009f2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f2e:	07d9      	lsls	r1, r3, #31
 8009f30:	d405      	bmi.n	8009f3e <_vfiprintf_r+0x2a>
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	059a      	lsls	r2, r3, #22
 8009f36:	d402      	bmi.n	8009f3e <_vfiprintf_r+0x2a>
 8009f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f3a:	f7ff feb8 	bl	8009cae <__retarget_lock_acquire_recursive>
 8009f3e:	89ab      	ldrh	r3, [r5, #12]
 8009f40:	071b      	lsls	r3, r3, #28
 8009f42:	d501      	bpl.n	8009f48 <_vfiprintf_r+0x34>
 8009f44:	692b      	ldr	r3, [r5, #16]
 8009f46:	b99b      	cbnz	r3, 8009f70 <_vfiprintf_r+0x5c>
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7ff fde0 	bl	8009b10 <__swsetup_r>
 8009f50:	b170      	cbz	r0, 8009f70 <_vfiprintf_r+0x5c>
 8009f52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f54:	07dc      	lsls	r4, r3, #31
 8009f56:	d504      	bpl.n	8009f62 <_vfiprintf_r+0x4e>
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	b01d      	add	sp, #116	@ 0x74
 8009f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f62:	89ab      	ldrh	r3, [r5, #12]
 8009f64:	0598      	lsls	r0, r3, #22
 8009f66:	d4f7      	bmi.n	8009f58 <_vfiprintf_r+0x44>
 8009f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f6a:	f7ff fea1 	bl	8009cb0 <__retarget_lock_release_recursive>
 8009f6e:	e7f3      	b.n	8009f58 <_vfiprintf_r+0x44>
 8009f70:	2300      	movs	r3, #0
 8009f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f74:	2320      	movs	r3, #32
 8009f76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f7e:	2330      	movs	r3, #48	@ 0x30
 8009f80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a130 <_vfiprintf_r+0x21c>
 8009f84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f88:	f04f 0901 	mov.w	r9, #1
 8009f8c:	4623      	mov	r3, r4
 8009f8e:	469a      	mov	sl, r3
 8009f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f94:	b10a      	cbz	r2, 8009f9a <_vfiprintf_r+0x86>
 8009f96:	2a25      	cmp	r2, #37	@ 0x25
 8009f98:	d1f9      	bne.n	8009f8e <_vfiprintf_r+0x7a>
 8009f9a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f9e:	d00b      	beq.n	8009fb8 <_vfiprintf_r+0xa4>
 8009fa0:	465b      	mov	r3, fp
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f7ff ffa1 	bl	8009eee <__sfputs_r>
 8009fac:	3001      	adds	r0, #1
 8009fae:	f000 80a7 	beq.w	800a100 <_vfiprintf_r+0x1ec>
 8009fb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fb4:	445a      	add	r2, fp
 8009fb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 809f 	beq.w	800a100 <_vfiprintf_r+0x1ec>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fcc:	f10a 0a01 	add.w	sl, sl, #1
 8009fd0:	9304      	str	r3, [sp, #16]
 8009fd2:	9307      	str	r3, [sp, #28]
 8009fd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fda:	4654      	mov	r4, sl
 8009fdc:	2205      	movs	r2, #5
 8009fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe2:	4853      	ldr	r0, [pc, #332]	@ (800a130 <_vfiprintf_r+0x21c>)
 8009fe4:	f7f6 f8f4 	bl	80001d0 <memchr>
 8009fe8:	9a04      	ldr	r2, [sp, #16]
 8009fea:	b9d8      	cbnz	r0, 800a024 <_vfiprintf_r+0x110>
 8009fec:	06d1      	lsls	r1, r2, #27
 8009fee:	bf44      	itt	mi
 8009ff0:	2320      	movmi	r3, #32
 8009ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff6:	0713      	lsls	r3, r2, #28
 8009ff8:	bf44      	itt	mi
 8009ffa:	232b      	movmi	r3, #43	@ 0x2b
 8009ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a000:	f89a 3000 	ldrb.w	r3, [sl]
 800a004:	2b2a      	cmp	r3, #42	@ 0x2a
 800a006:	d015      	beq.n	800a034 <_vfiprintf_r+0x120>
 800a008:	9a07      	ldr	r2, [sp, #28]
 800a00a:	4654      	mov	r4, sl
 800a00c:	2000      	movs	r0, #0
 800a00e:	f04f 0c0a 	mov.w	ip, #10
 800a012:	4621      	mov	r1, r4
 800a014:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a018:	3b30      	subs	r3, #48	@ 0x30
 800a01a:	2b09      	cmp	r3, #9
 800a01c:	d94b      	bls.n	800a0b6 <_vfiprintf_r+0x1a2>
 800a01e:	b1b0      	cbz	r0, 800a04e <_vfiprintf_r+0x13a>
 800a020:	9207      	str	r2, [sp, #28]
 800a022:	e014      	b.n	800a04e <_vfiprintf_r+0x13a>
 800a024:	eba0 0308 	sub.w	r3, r0, r8
 800a028:	fa09 f303 	lsl.w	r3, r9, r3
 800a02c:	4313      	orrs	r3, r2
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	46a2      	mov	sl, r4
 800a032:	e7d2      	b.n	8009fda <_vfiprintf_r+0xc6>
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	1d19      	adds	r1, r3, #4
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	9103      	str	r1, [sp, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	bfbb      	ittet	lt
 800a040:	425b      	neglt	r3, r3
 800a042:	f042 0202 	orrlt.w	r2, r2, #2
 800a046:	9307      	strge	r3, [sp, #28]
 800a048:	9307      	strlt	r3, [sp, #28]
 800a04a:	bfb8      	it	lt
 800a04c:	9204      	strlt	r2, [sp, #16]
 800a04e:	7823      	ldrb	r3, [r4, #0]
 800a050:	2b2e      	cmp	r3, #46	@ 0x2e
 800a052:	d10a      	bne.n	800a06a <_vfiprintf_r+0x156>
 800a054:	7863      	ldrb	r3, [r4, #1]
 800a056:	2b2a      	cmp	r3, #42	@ 0x2a
 800a058:	d132      	bne.n	800a0c0 <_vfiprintf_r+0x1ac>
 800a05a:	9b03      	ldr	r3, [sp, #12]
 800a05c:	1d1a      	adds	r2, r3, #4
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	9203      	str	r2, [sp, #12]
 800a062:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a066:	3402      	adds	r4, #2
 800a068:	9305      	str	r3, [sp, #20]
 800a06a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a140 <_vfiprintf_r+0x22c>
 800a06e:	7821      	ldrb	r1, [r4, #0]
 800a070:	2203      	movs	r2, #3
 800a072:	4650      	mov	r0, sl
 800a074:	f7f6 f8ac 	bl	80001d0 <memchr>
 800a078:	b138      	cbz	r0, 800a08a <_vfiprintf_r+0x176>
 800a07a:	9b04      	ldr	r3, [sp, #16]
 800a07c:	eba0 000a 	sub.w	r0, r0, sl
 800a080:	2240      	movs	r2, #64	@ 0x40
 800a082:	4082      	lsls	r2, r0
 800a084:	4313      	orrs	r3, r2
 800a086:	3401      	adds	r4, #1
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08e:	4829      	ldr	r0, [pc, #164]	@ (800a134 <_vfiprintf_r+0x220>)
 800a090:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a094:	2206      	movs	r2, #6
 800a096:	f7f6 f89b 	bl	80001d0 <memchr>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d03f      	beq.n	800a11e <_vfiprintf_r+0x20a>
 800a09e:	4b26      	ldr	r3, [pc, #152]	@ (800a138 <_vfiprintf_r+0x224>)
 800a0a0:	bb1b      	cbnz	r3, 800a0ea <_vfiprintf_r+0x1d6>
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	3307      	adds	r3, #7
 800a0a6:	f023 0307 	bic.w	r3, r3, #7
 800a0aa:	3308      	adds	r3, #8
 800a0ac:	9303      	str	r3, [sp, #12]
 800a0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b0:	443b      	add	r3, r7
 800a0b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0b4:	e76a      	b.n	8009f8c <_vfiprintf_r+0x78>
 800a0b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	2001      	movs	r0, #1
 800a0be:	e7a8      	b.n	800a012 <_vfiprintf_r+0xfe>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	3401      	adds	r4, #1
 800a0c4:	9305      	str	r3, [sp, #20]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	f04f 0c0a 	mov.w	ip, #10
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0d2:	3a30      	subs	r2, #48	@ 0x30
 800a0d4:	2a09      	cmp	r2, #9
 800a0d6:	d903      	bls.n	800a0e0 <_vfiprintf_r+0x1cc>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0c6      	beq.n	800a06a <_vfiprintf_r+0x156>
 800a0dc:	9105      	str	r1, [sp, #20]
 800a0de:	e7c4      	b.n	800a06a <_vfiprintf_r+0x156>
 800a0e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e7f0      	b.n	800a0cc <_vfiprintf_r+0x1b8>
 800a0ea:	ab03      	add	r3, sp, #12
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	462a      	mov	r2, r5
 800a0f0:	4b12      	ldr	r3, [pc, #72]	@ (800a13c <_vfiprintf_r+0x228>)
 800a0f2:	a904      	add	r1, sp, #16
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f3af 8000 	nop.w
 800a0fa:	4607      	mov	r7, r0
 800a0fc:	1c78      	adds	r0, r7, #1
 800a0fe:	d1d6      	bne.n	800a0ae <_vfiprintf_r+0x19a>
 800a100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a102:	07d9      	lsls	r1, r3, #31
 800a104:	d405      	bmi.n	800a112 <_vfiprintf_r+0x1fe>
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	059a      	lsls	r2, r3, #22
 800a10a:	d402      	bmi.n	800a112 <_vfiprintf_r+0x1fe>
 800a10c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a10e:	f7ff fdcf 	bl	8009cb0 <__retarget_lock_release_recursive>
 800a112:	89ab      	ldrh	r3, [r5, #12]
 800a114:	065b      	lsls	r3, r3, #25
 800a116:	f53f af1f 	bmi.w	8009f58 <_vfiprintf_r+0x44>
 800a11a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a11c:	e71e      	b.n	8009f5c <_vfiprintf_r+0x48>
 800a11e:	ab03      	add	r3, sp, #12
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	462a      	mov	r2, r5
 800a124:	4b05      	ldr	r3, [pc, #20]	@ (800a13c <_vfiprintf_r+0x228>)
 800a126:	a904      	add	r1, sp, #16
 800a128:	4630      	mov	r0, r6
 800a12a:	f000 f879 	bl	800a220 <_printf_i>
 800a12e:	e7e4      	b.n	800a0fa <_vfiprintf_r+0x1e6>
 800a130:	0800a824 	.word	0x0800a824
 800a134:	0800a82e 	.word	0x0800a82e
 800a138:	00000000 	.word	0x00000000
 800a13c:	08009eef 	.word	0x08009eef
 800a140:	0800a82a 	.word	0x0800a82a

0800a144 <_printf_common>:
 800a144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a148:	4616      	mov	r6, r2
 800a14a:	4698      	mov	r8, r3
 800a14c:	688a      	ldr	r2, [r1, #8]
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a154:	4293      	cmp	r3, r2
 800a156:	bfb8      	it	lt
 800a158:	4613      	movlt	r3, r2
 800a15a:	6033      	str	r3, [r6, #0]
 800a15c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a160:	4607      	mov	r7, r0
 800a162:	460c      	mov	r4, r1
 800a164:	b10a      	cbz	r2, 800a16a <_printf_common+0x26>
 800a166:	3301      	adds	r3, #1
 800a168:	6033      	str	r3, [r6, #0]
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	0699      	lsls	r1, r3, #26
 800a16e:	bf42      	ittt	mi
 800a170:	6833      	ldrmi	r3, [r6, #0]
 800a172:	3302      	addmi	r3, #2
 800a174:	6033      	strmi	r3, [r6, #0]
 800a176:	6825      	ldr	r5, [r4, #0]
 800a178:	f015 0506 	ands.w	r5, r5, #6
 800a17c:	d106      	bne.n	800a18c <_printf_common+0x48>
 800a17e:	f104 0a19 	add.w	sl, r4, #25
 800a182:	68e3      	ldr	r3, [r4, #12]
 800a184:	6832      	ldr	r2, [r6, #0]
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	42ab      	cmp	r3, r5
 800a18a:	dc26      	bgt.n	800a1da <_printf_common+0x96>
 800a18c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a190:	6822      	ldr	r2, [r4, #0]
 800a192:	3b00      	subs	r3, #0
 800a194:	bf18      	it	ne
 800a196:	2301      	movne	r3, #1
 800a198:	0692      	lsls	r2, r2, #26
 800a19a:	d42b      	bmi.n	800a1f4 <_printf_common+0xb0>
 800a19c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1a0:	4641      	mov	r1, r8
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	47c8      	blx	r9
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	d01e      	beq.n	800a1e8 <_printf_common+0xa4>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	f003 0306 	and.w	r3, r3, #6
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	bf02      	ittt	eq
 800a1b6:	68e5      	ldreq	r5, [r4, #12]
 800a1b8:	6833      	ldreq	r3, [r6, #0]
 800a1ba:	1aed      	subeq	r5, r5, r3
 800a1bc:	68a3      	ldr	r3, [r4, #8]
 800a1be:	bf0c      	ite	eq
 800a1c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c4:	2500      	movne	r5, #0
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	bfc4      	itt	gt
 800a1ca:	1a9b      	subgt	r3, r3, r2
 800a1cc:	18ed      	addgt	r5, r5, r3
 800a1ce:	2600      	movs	r6, #0
 800a1d0:	341a      	adds	r4, #26
 800a1d2:	42b5      	cmp	r5, r6
 800a1d4:	d11a      	bne.n	800a20c <_printf_common+0xc8>
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	e008      	b.n	800a1ec <_printf_common+0xa8>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4652      	mov	r2, sl
 800a1de:	4641      	mov	r1, r8
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	47c8      	blx	r9
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d103      	bne.n	800a1f0 <_printf_common+0xac>
 800a1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	e7c6      	b.n	800a182 <_printf_common+0x3e>
 800a1f4:	18e1      	adds	r1, r4, r3
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	2030      	movs	r0, #48	@ 0x30
 800a1fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1fe:	4422      	add	r2, r4
 800a200:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a204:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a208:	3302      	adds	r3, #2
 800a20a:	e7c7      	b.n	800a19c <_printf_common+0x58>
 800a20c:	2301      	movs	r3, #1
 800a20e:	4622      	mov	r2, r4
 800a210:	4641      	mov	r1, r8
 800a212:	4638      	mov	r0, r7
 800a214:	47c8      	blx	r9
 800a216:	3001      	adds	r0, #1
 800a218:	d0e6      	beq.n	800a1e8 <_printf_common+0xa4>
 800a21a:	3601      	adds	r6, #1
 800a21c:	e7d9      	b.n	800a1d2 <_printf_common+0x8e>
	...

0800a220 <_printf_i>:
 800a220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	7e0f      	ldrb	r7, [r1, #24]
 800a226:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a228:	2f78      	cmp	r7, #120	@ 0x78
 800a22a:	4691      	mov	r9, r2
 800a22c:	4680      	mov	r8, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	469a      	mov	sl, r3
 800a232:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a236:	d807      	bhi.n	800a248 <_printf_i+0x28>
 800a238:	2f62      	cmp	r7, #98	@ 0x62
 800a23a:	d80a      	bhi.n	800a252 <_printf_i+0x32>
 800a23c:	2f00      	cmp	r7, #0
 800a23e:	f000 80d1 	beq.w	800a3e4 <_printf_i+0x1c4>
 800a242:	2f58      	cmp	r7, #88	@ 0x58
 800a244:	f000 80b8 	beq.w	800a3b8 <_printf_i+0x198>
 800a248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a24c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a250:	e03a      	b.n	800a2c8 <_printf_i+0xa8>
 800a252:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a256:	2b15      	cmp	r3, #21
 800a258:	d8f6      	bhi.n	800a248 <_printf_i+0x28>
 800a25a:	a101      	add	r1, pc, #4	@ (adr r1, 800a260 <_printf_i+0x40>)
 800a25c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a260:	0800a2b9 	.word	0x0800a2b9
 800a264:	0800a2cd 	.word	0x0800a2cd
 800a268:	0800a249 	.word	0x0800a249
 800a26c:	0800a249 	.word	0x0800a249
 800a270:	0800a249 	.word	0x0800a249
 800a274:	0800a249 	.word	0x0800a249
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a249 	.word	0x0800a249
 800a280:	0800a249 	.word	0x0800a249
 800a284:	0800a249 	.word	0x0800a249
 800a288:	0800a249 	.word	0x0800a249
 800a28c:	0800a3cb 	.word	0x0800a3cb
 800a290:	0800a2f7 	.word	0x0800a2f7
 800a294:	0800a385 	.word	0x0800a385
 800a298:	0800a249 	.word	0x0800a249
 800a29c:	0800a249 	.word	0x0800a249
 800a2a0:	0800a3ed 	.word	0x0800a3ed
 800a2a4:	0800a249 	.word	0x0800a249
 800a2a8:	0800a2f7 	.word	0x0800a2f7
 800a2ac:	0800a249 	.word	0x0800a249
 800a2b0:	0800a249 	.word	0x0800a249
 800a2b4:	0800a38d 	.word	0x0800a38d
 800a2b8:	6833      	ldr	r3, [r6, #0]
 800a2ba:	1d1a      	adds	r2, r3, #4
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6032      	str	r2, [r6, #0]
 800a2c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e09c      	b.n	800a406 <_printf_i+0x1e6>
 800a2cc:	6833      	ldr	r3, [r6, #0]
 800a2ce:	6820      	ldr	r0, [r4, #0]
 800a2d0:	1d19      	adds	r1, r3, #4
 800a2d2:	6031      	str	r1, [r6, #0]
 800a2d4:	0606      	lsls	r6, r0, #24
 800a2d6:	d501      	bpl.n	800a2dc <_printf_i+0xbc>
 800a2d8:	681d      	ldr	r5, [r3, #0]
 800a2da:	e003      	b.n	800a2e4 <_printf_i+0xc4>
 800a2dc:	0645      	lsls	r5, r0, #25
 800a2de:	d5fb      	bpl.n	800a2d8 <_printf_i+0xb8>
 800a2e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2e4:	2d00      	cmp	r5, #0
 800a2e6:	da03      	bge.n	800a2f0 <_printf_i+0xd0>
 800a2e8:	232d      	movs	r3, #45	@ 0x2d
 800a2ea:	426d      	negs	r5, r5
 800a2ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2f0:	4858      	ldr	r0, [pc, #352]	@ (800a454 <_printf_i+0x234>)
 800a2f2:	230a      	movs	r3, #10
 800a2f4:	e011      	b.n	800a31a <_printf_i+0xfa>
 800a2f6:	6821      	ldr	r1, [r4, #0]
 800a2f8:	6833      	ldr	r3, [r6, #0]
 800a2fa:	0608      	lsls	r0, r1, #24
 800a2fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a300:	d402      	bmi.n	800a308 <_printf_i+0xe8>
 800a302:	0649      	lsls	r1, r1, #25
 800a304:	bf48      	it	mi
 800a306:	b2ad      	uxthmi	r5, r5
 800a308:	2f6f      	cmp	r7, #111	@ 0x6f
 800a30a:	4852      	ldr	r0, [pc, #328]	@ (800a454 <_printf_i+0x234>)
 800a30c:	6033      	str	r3, [r6, #0]
 800a30e:	bf14      	ite	ne
 800a310:	230a      	movne	r3, #10
 800a312:	2308      	moveq	r3, #8
 800a314:	2100      	movs	r1, #0
 800a316:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a31a:	6866      	ldr	r6, [r4, #4]
 800a31c:	60a6      	str	r6, [r4, #8]
 800a31e:	2e00      	cmp	r6, #0
 800a320:	db05      	blt.n	800a32e <_printf_i+0x10e>
 800a322:	6821      	ldr	r1, [r4, #0]
 800a324:	432e      	orrs	r6, r5
 800a326:	f021 0104 	bic.w	r1, r1, #4
 800a32a:	6021      	str	r1, [r4, #0]
 800a32c:	d04b      	beq.n	800a3c6 <_printf_i+0x1a6>
 800a32e:	4616      	mov	r6, r2
 800a330:	fbb5 f1f3 	udiv	r1, r5, r3
 800a334:	fb03 5711 	mls	r7, r3, r1, r5
 800a338:	5dc7      	ldrb	r7, [r0, r7]
 800a33a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a33e:	462f      	mov	r7, r5
 800a340:	42bb      	cmp	r3, r7
 800a342:	460d      	mov	r5, r1
 800a344:	d9f4      	bls.n	800a330 <_printf_i+0x110>
 800a346:	2b08      	cmp	r3, #8
 800a348:	d10b      	bne.n	800a362 <_printf_i+0x142>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	07df      	lsls	r7, r3, #31
 800a34e:	d508      	bpl.n	800a362 <_printf_i+0x142>
 800a350:	6923      	ldr	r3, [r4, #16]
 800a352:	6861      	ldr	r1, [r4, #4]
 800a354:	4299      	cmp	r1, r3
 800a356:	bfde      	ittt	le
 800a358:	2330      	movle	r3, #48	@ 0x30
 800a35a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a35e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a362:	1b92      	subs	r2, r2, r6
 800a364:	6122      	str	r2, [r4, #16]
 800a366:	f8cd a000 	str.w	sl, [sp]
 800a36a:	464b      	mov	r3, r9
 800a36c:	aa03      	add	r2, sp, #12
 800a36e:	4621      	mov	r1, r4
 800a370:	4640      	mov	r0, r8
 800a372:	f7ff fee7 	bl	800a144 <_printf_common>
 800a376:	3001      	adds	r0, #1
 800a378:	d14a      	bne.n	800a410 <_printf_i+0x1f0>
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	b004      	add	sp, #16
 800a380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	f043 0320 	orr.w	r3, r3, #32
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	4832      	ldr	r0, [pc, #200]	@ (800a458 <_printf_i+0x238>)
 800a38e:	2778      	movs	r7, #120	@ 0x78
 800a390:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	6831      	ldr	r1, [r6, #0]
 800a398:	061f      	lsls	r7, r3, #24
 800a39a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a39e:	d402      	bmi.n	800a3a6 <_printf_i+0x186>
 800a3a0:	065f      	lsls	r7, r3, #25
 800a3a2:	bf48      	it	mi
 800a3a4:	b2ad      	uxthmi	r5, r5
 800a3a6:	6031      	str	r1, [r6, #0]
 800a3a8:	07d9      	lsls	r1, r3, #31
 800a3aa:	bf44      	itt	mi
 800a3ac:	f043 0320 	orrmi.w	r3, r3, #32
 800a3b0:	6023      	strmi	r3, [r4, #0]
 800a3b2:	b11d      	cbz	r5, 800a3bc <_printf_i+0x19c>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	e7ad      	b.n	800a314 <_printf_i+0xf4>
 800a3b8:	4826      	ldr	r0, [pc, #152]	@ (800a454 <_printf_i+0x234>)
 800a3ba:	e7e9      	b.n	800a390 <_printf_i+0x170>
 800a3bc:	6823      	ldr	r3, [r4, #0]
 800a3be:	f023 0320 	bic.w	r3, r3, #32
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	e7f6      	b.n	800a3b4 <_printf_i+0x194>
 800a3c6:	4616      	mov	r6, r2
 800a3c8:	e7bd      	b.n	800a346 <_printf_i+0x126>
 800a3ca:	6833      	ldr	r3, [r6, #0]
 800a3cc:	6825      	ldr	r5, [r4, #0]
 800a3ce:	6961      	ldr	r1, [r4, #20]
 800a3d0:	1d18      	adds	r0, r3, #4
 800a3d2:	6030      	str	r0, [r6, #0]
 800a3d4:	062e      	lsls	r6, r5, #24
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	d501      	bpl.n	800a3de <_printf_i+0x1be>
 800a3da:	6019      	str	r1, [r3, #0]
 800a3dc:	e002      	b.n	800a3e4 <_printf_i+0x1c4>
 800a3de:	0668      	lsls	r0, r5, #25
 800a3e0:	d5fb      	bpl.n	800a3da <_printf_i+0x1ba>
 800a3e2:	8019      	strh	r1, [r3, #0]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	6123      	str	r3, [r4, #16]
 800a3e8:	4616      	mov	r6, r2
 800a3ea:	e7bc      	b.n	800a366 <_printf_i+0x146>
 800a3ec:	6833      	ldr	r3, [r6, #0]
 800a3ee:	1d1a      	adds	r2, r3, #4
 800a3f0:	6032      	str	r2, [r6, #0]
 800a3f2:	681e      	ldr	r6, [r3, #0]
 800a3f4:	6862      	ldr	r2, [r4, #4]
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	f7f5 fee9 	bl	80001d0 <memchr>
 800a3fe:	b108      	cbz	r0, 800a404 <_printf_i+0x1e4>
 800a400:	1b80      	subs	r0, r0, r6
 800a402:	6060      	str	r0, [r4, #4]
 800a404:	6863      	ldr	r3, [r4, #4]
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	2300      	movs	r3, #0
 800a40a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a40e:	e7aa      	b.n	800a366 <_printf_i+0x146>
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	4632      	mov	r2, r6
 800a414:	4649      	mov	r1, r9
 800a416:	4640      	mov	r0, r8
 800a418:	47d0      	blx	sl
 800a41a:	3001      	adds	r0, #1
 800a41c:	d0ad      	beq.n	800a37a <_printf_i+0x15a>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	079b      	lsls	r3, r3, #30
 800a422:	d413      	bmi.n	800a44c <_printf_i+0x22c>
 800a424:	68e0      	ldr	r0, [r4, #12]
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	4298      	cmp	r0, r3
 800a42a:	bfb8      	it	lt
 800a42c:	4618      	movlt	r0, r3
 800a42e:	e7a6      	b.n	800a37e <_printf_i+0x15e>
 800a430:	2301      	movs	r3, #1
 800a432:	4632      	mov	r2, r6
 800a434:	4649      	mov	r1, r9
 800a436:	4640      	mov	r0, r8
 800a438:	47d0      	blx	sl
 800a43a:	3001      	adds	r0, #1
 800a43c:	d09d      	beq.n	800a37a <_printf_i+0x15a>
 800a43e:	3501      	adds	r5, #1
 800a440:	68e3      	ldr	r3, [r4, #12]
 800a442:	9903      	ldr	r1, [sp, #12]
 800a444:	1a5b      	subs	r3, r3, r1
 800a446:	42ab      	cmp	r3, r5
 800a448:	dcf2      	bgt.n	800a430 <_printf_i+0x210>
 800a44a:	e7eb      	b.n	800a424 <_printf_i+0x204>
 800a44c:	2500      	movs	r5, #0
 800a44e:	f104 0619 	add.w	r6, r4, #25
 800a452:	e7f5      	b.n	800a440 <_printf_i+0x220>
 800a454:	0800a835 	.word	0x0800a835
 800a458:	0800a846 	.word	0x0800a846

0800a45c <__sflush_r>:
 800a45c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a464:	0716      	lsls	r6, r2, #28
 800a466:	4605      	mov	r5, r0
 800a468:	460c      	mov	r4, r1
 800a46a:	d454      	bmi.n	800a516 <__sflush_r+0xba>
 800a46c:	684b      	ldr	r3, [r1, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dc02      	bgt.n	800a478 <__sflush_r+0x1c>
 800a472:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	dd48      	ble.n	800a50a <__sflush_r+0xae>
 800a478:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a47a:	2e00      	cmp	r6, #0
 800a47c:	d045      	beq.n	800a50a <__sflush_r+0xae>
 800a47e:	2300      	movs	r3, #0
 800a480:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a484:	682f      	ldr	r7, [r5, #0]
 800a486:	6a21      	ldr	r1, [r4, #32]
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	d030      	beq.n	800a4ee <__sflush_r+0x92>
 800a48c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	0759      	lsls	r1, r3, #29
 800a492:	d505      	bpl.n	800a4a0 <__sflush_r+0x44>
 800a494:	6863      	ldr	r3, [r4, #4]
 800a496:	1ad2      	subs	r2, r2, r3
 800a498:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a49a:	b10b      	cbz	r3, 800a4a0 <__sflush_r+0x44>
 800a49c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a49e:	1ad2      	subs	r2, r2, r3
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4a4:	6a21      	ldr	r1, [r4, #32]
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b0      	blx	r6
 800a4aa:	1c43      	adds	r3, r0, #1
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	d106      	bne.n	800a4be <__sflush_r+0x62>
 800a4b0:	6829      	ldr	r1, [r5, #0]
 800a4b2:	291d      	cmp	r1, #29
 800a4b4:	d82b      	bhi.n	800a50e <__sflush_r+0xb2>
 800a4b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a560 <__sflush_r+0x104>)
 800a4b8:	40ca      	lsrs	r2, r1
 800a4ba:	07d6      	lsls	r6, r2, #31
 800a4bc:	d527      	bpl.n	800a50e <__sflush_r+0xb2>
 800a4be:	2200      	movs	r2, #0
 800a4c0:	6062      	str	r2, [r4, #4]
 800a4c2:	04d9      	lsls	r1, r3, #19
 800a4c4:	6922      	ldr	r2, [r4, #16]
 800a4c6:	6022      	str	r2, [r4, #0]
 800a4c8:	d504      	bpl.n	800a4d4 <__sflush_r+0x78>
 800a4ca:	1c42      	adds	r2, r0, #1
 800a4cc:	d101      	bne.n	800a4d2 <__sflush_r+0x76>
 800a4ce:	682b      	ldr	r3, [r5, #0]
 800a4d0:	b903      	cbnz	r3, 800a4d4 <__sflush_r+0x78>
 800a4d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4d6:	602f      	str	r7, [r5, #0]
 800a4d8:	b1b9      	cbz	r1, 800a50a <__sflush_r+0xae>
 800a4da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	d002      	beq.n	800a4e8 <__sflush_r+0x8c>
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f7ff fbf4 	bl	8009cd0 <_free_r>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4ec:	e00d      	b.n	800a50a <__sflush_r+0xae>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	47b0      	blx	r6
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	1c50      	adds	r0, r2, #1
 800a4f8:	d1c9      	bne.n	800a48e <__sflush_r+0x32>
 800a4fa:	682b      	ldr	r3, [r5, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0c6      	beq.n	800a48e <__sflush_r+0x32>
 800a500:	2b1d      	cmp	r3, #29
 800a502:	d001      	beq.n	800a508 <__sflush_r+0xac>
 800a504:	2b16      	cmp	r3, #22
 800a506:	d11e      	bne.n	800a546 <__sflush_r+0xea>
 800a508:	602f      	str	r7, [r5, #0]
 800a50a:	2000      	movs	r0, #0
 800a50c:	e022      	b.n	800a554 <__sflush_r+0xf8>
 800a50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a512:	b21b      	sxth	r3, r3
 800a514:	e01b      	b.n	800a54e <__sflush_r+0xf2>
 800a516:	690f      	ldr	r7, [r1, #16]
 800a518:	2f00      	cmp	r7, #0
 800a51a:	d0f6      	beq.n	800a50a <__sflush_r+0xae>
 800a51c:	0793      	lsls	r3, r2, #30
 800a51e:	680e      	ldr	r6, [r1, #0]
 800a520:	bf08      	it	eq
 800a522:	694b      	ldreq	r3, [r1, #20]
 800a524:	600f      	str	r7, [r1, #0]
 800a526:	bf18      	it	ne
 800a528:	2300      	movne	r3, #0
 800a52a:	eba6 0807 	sub.w	r8, r6, r7
 800a52e:	608b      	str	r3, [r1, #8]
 800a530:	f1b8 0f00 	cmp.w	r8, #0
 800a534:	dde9      	ble.n	800a50a <__sflush_r+0xae>
 800a536:	6a21      	ldr	r1, [r4, #32]
 800a538:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a53a:	4643      	mov	r3, r8
 800a53c:	463a      	mov	r2, r7
 800a53e:	4628      	mov	r0, r5
 800a540:	47b0      	blx	r6
 800a542:	2800      	cmp	r0, #0
 800a544:	dc08      	bgt.n	800a558 <__sflush_r+0xfc>
 800a546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a54e:	81a3      	strh	r3, [r4, #12]
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a558:	4407      	add	r7, r0
 800a55a:	eba8 0800 	sub.w	r8, r8, r0
 800a55e:	e7e7      	b.n	800a530 <__sflush_r+0xd4>
 800a560:	20400001 	.word	0x20400001

0800a564 <_fflush_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	690b      	ldr	r3, [r1, #16]
 800a568:	4605      	mov	r5, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	b913      	cbnz	r3, 800a574 <_fflush_r+0x10>
 800a56e:	2500      	movs	r5, #0
 800a570:	4628      	mov	r0, r5
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	b118      	cbz	r0, 800a57e <_fflush_r+0x1a>
 800a576:	6a03      	ldr	r3, [r0, #32]
 800a578:	b90b      	cbnz	r3, 800a57e <_fflush_r+0x1a>
 800a57a:	f7ff f9a1 	bl	80098c0 <__sinit>
 800a57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0f3      	beq.n	800a56e <_fflush_r+0xa>
 800a586:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a588:	07d0      	lsls	r0, r2, #31
 800a58a:	d404      	bmi.n	800a596 <_fflush_r+0x32>
 800a58c:	0599      	lsls	r1, r3, #22
 800a58e:	d402      	bmi.n	800a596 <_fflush_r+0x32>
 800a590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a592:	f7ff fb8c 	bl	8009cae <__retarget_lock_acquire_recursive>
 800a596:	4628      	mov	r0, r5
 800a598:	4621      	mov	r1, r4
 800a59a:	f7ff ff5f 	bl	800a45c <__sflush_r>
 800a59e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5a0:	07da      	lsls	r2, r3, #31
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	d4e4      	bmi.n	800a570 <_fflush_r+0xc>
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	059b      	lsls	r3, r3, #22
 800a5aa:	d4e1      	bmi.n	800a570 <_fflush_r+0xc>
 800a5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ae:	f7ff fb7f 	bl	8009cb0 <__retarget_lock_release_recursive>
 800a5b2:	e7dd      	b.n	800a570 <_fflush_r+0xc>

0800a5b4 <__swhatbuf_r>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5bc:	2900      	cmp	r1, #0
 800a5be:	b096      	sub	sp, #88	@ 0x58
 800a5c0:	4615      	mov	r5, r2
 800a5c2:	461e      	mov	r6, r3
 800a5c4:	da0d      	bge.n	800a5e2 <__swhatbuf_r+0x2e>
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5cc:	f04f 0100 	mov.w	r1, #0
 800a5d0:	bf14      	ite	ne
 800a5d2:	2340      	movne	r3, #64	@ 0x40
 800a5d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5d8:	2000      	movs	r0, #0
 800a5da:	6031      	str	r1, [r6, #0]
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	b016      	add	sp, #88	@ 0x58
 800a5e0:	bd70      	pop	{r4, r5, r6, pc}
 800a5e2:	466a      	mov	r2, sp
 800a5e4:	f000 f848 	bl	800a678 <_fstat_r>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	dbec      	blt.n	800a5c6 <__swhatbuf_r+0x12>
 800a5ec:	9901      	ldr	r1, [sp, #4]
 800a5ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5f6:	4259      	negs	r1, r3
 800a5f8:	4159      	adcs	r1, r3
 800a5fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5fe:	e7eb      	b.n	800a5d8 <__swhatbuf_r+0x24>

0800a600 <__smakebuf_r>:
 800a600:	898b      	ldrh	r3, [r1, #12]
 800a602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a604:	079d      	lsls	r5, r3, #30
 800a606:	4606      	mov	r6, r0
 800a608:	460c      	mov	r4, r1
 800a60a:	d507      	bpl.n	800a61c <__smakebuf_r+0x1c>
 800a60c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	2301      	movs	r3, #1
 800a616:	6163      	str	r3, [r4, #20]
 800a618:	b003      	add	sp, #12
 800a61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a61c:	ab01      	add	r3, sp, #4
 800a61e:	466a      	mov	r2, sp
 800a620:	f7ff ffc8 	bl	800a5b4 <__swhatbuf_r>
 800a624:	9f00      	ldr	r7, [sp, #0]
 800a626:	4605      	mov	r5, r0
 800a628:	4639      	mov	r1, r7
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7ff fbbc 	bl	8009da8 <_malloc_r>
 800a630:	b948      	cbnz	r0, 800a646 <__smakebuf_r+0x46>
 800a632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a636:	059a      	lsls	r2, r3, #22
 800a638:	d4ee      	bmi.n	800a618 <__smakebuf_r+0x18>
 800a63a:	f023 0303 	bic.w	r3, r3, #3
 800a63e:	f043 0302 	orr.w	r3, r3, #2
 800a642:	81a3      	strh	r3, [r4, #12]
 800a644:	e7e2      	b.n	800a60c <__smakebuf_r+0xc>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	6020      	str	r0, [r4, #0]
 800a64a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	9b01      	ldr	r3, [sp, #4]
 800a652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a656:	b15b      	cbz	r3, 800a670 <__smakebuf_r+0x70>
 800a658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a65c:	4630      	mov	r0, r6
 800a65e:	f000 f81d 	bl	800a69c <_isatty_r>
 800a662:	b128      	cbz	r0, 800a670 <__smakebuf_r+0x70>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f023 0303 	bic.w	r3, r3, #3
 800a66a:	f043 0301 	orr.w	r3, r3, #1
 800a66e:	81a3      	strh	r3, [r4, #12]
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	431d      	orrs	r5, r3
 800a674:	81a5      	strh	r5, [r4, #12]
 800a676:	e7cf      	b.n	800a618 <__smakebuf_r+0x18>

0800a678 <_fstat_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d07      	ldr	r5, [pc, #28]	@ (800a698 <_fstat_r+0x20>)
 800a67c:	2300      	movs	r3, #0
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	4611      	mov	r1, r2
 800a684:	602b      	str	r3, [r5, #0]
 800a686:	f7f7 f925 	bl	80018d4 <_fstat>
 800a68a:	1c43      	adds	r3, r0, #1
 800a68c:	d102      	bne.n	800a694 <_fstat_r+0x1c>
 800a68e:	682b      	ldr	r3, [r5, #0]
 800a690:	b103      	cbz	r3, 800a694 <_fstat_r+0x1c>
 800a692:	6023      	str	r3, [r4, #0]
 800a694:	bd38      	pop	{r3, r4, r5, pc}
 800a696:	bf00      	nop
 800a698:	20001b80 	.word	0x20001b80

0800a69c <_isatty_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d06      	ldr	r5, [pc, #24]	@ (800a6b8 <_isatty_r+0x1c>)
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	f7f7 f924 	bl	80018f4 <_isatty>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_isatty_r+0x1a>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_isatty_r+0x1a>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	20001b80 	.word	0x20001b80

0800a6bc <_sbrk_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d06      	ldr	r5, [pc, #24]	@ (800a6d8 <_sbrk_r+0x1c>)
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	602b      	str	r3, [r5, #0]
 800a6c8:	f7f7 f92c 	bl	8001924 <_sbrk>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_sbrk_r+0x1a>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_sbrk_r+0x1a>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20001b80 	.word	0x20001b80

0800a6dc <_init>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr

0800a6e8 <_fini>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	bf00      	nop
 800a6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	469e      	mov	lr, r3
 800a6f2:	4770      	bx	lr
