
Lab6_Problem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a62c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800a7bc  0800a7bc  0000b7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a938  0800a938  0000c06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a938  0800a938  0000b938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a940  0800a940  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a940  0800a940  0000b940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a944  0800a944  0000b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a948  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  2000006c  0800a9b4  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b90  0800a9b4  0000cb90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002711c  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f44  00000000  00000000  000331b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002600  00000000  00000000  00038100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001da6  00000000  00000000  0003a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e0a6  00000000  00000000  0003c4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b0ad  00000000  00000000  0006a54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c609  00000000  00000000  000955f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b1c02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad1c  00000000  00000000  001b1c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001bc964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7a4 	.word	0x0800a7a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a7a4 	.word	0x0800a7a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	200000dc 	.word	0x200000dc

080005d0 <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <__NVIC_SetVector+0x34>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	3310      	adds	r3, #16
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
      HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000610:	1d39      	adds	r1, r7, #4
 8000612:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000616:	2201      	movs	r2, #1
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <__io_putchar+0x20>)
 800061a:	f005 fe49 	bl	80062b0 <HAL_UART_Transmit>
      return ch;
 800061e:	687b      	ldr	r3, [r7, #4]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000410 	.word	0x20000410

0800062c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <HAL_ADC_MspInit+0x38>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d10b      	bne.n	8000656 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_ADC_MspInit+0x3c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <HAL_ADC_MspInit+0x3c>)
 8000644:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <HAL_ADC_MspInit+0x3c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
    }

}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	50040000 	.word	0x50040000
 8000668:	40021000 	.word	0x40021000

0800066c <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <ADC1_Init+0xf8>)
 8000690:	4a35      	ldr	r2, [pc, #212]	@ (8000768 <ADC1_Init+0xfc>)
 8000692:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000694:	4b33      	ldr	r3, [pc, #204]	@ (8000764 <ADC1_Init+0xf8>)
 8000696:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800069a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069c:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <ADC1_Init+0xf8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a2:	4b30      	ldr	r3, [pc, #192]	@ (8000764 <ADC1_Init+0xf8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <ADC1_Init+0xf8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <ADC1_Init+0xf8>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <ADC1_Init+0xf8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <ADC1_Init+0xf8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <ADC1_Init+0xf8>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c6:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <ADC1_Init+0xf8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80006ce:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <ADC1_Init+0xf8>)
 80006d0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <ADC1_Init+0xf8>)
 80006d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80006de:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <ADC1_Init+0xf8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <ADC1_Init+0xf8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <ADC1_Init+0xf8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	481b      	ldr	r0, [pc, #108]	@ (8000764 <ADC1_Init+0xf8>)
 80006f6:	f001 fc41 	bl	8001f7c <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <ADC1_Init+0x98>
    {
        Error_Handler();
 8000700:	f000 fdc0 	bl	8001284 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000704:	217f      	movs	r1, #127	@ 0x7f
 8000706:	4817      	ldr	r0, [pc, #92]	@ (8000764 <ADC1_Init+0xf8>)
 8000708:	f002 fc0c 	bl	8002f24 <HAL_ADCEx_Calibration_Start>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <ADC1_Init+0xaa>
    {
        Error_Handler();
 8000712:	f000 fdb7 	bl	8001284 <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4810      	ldr	r0, [pc, #64]	@ (8000764 <ADC1_Init+0xf8>)
 8000722:	f002 fc5f 	bl	8002fe4 <HAL_ADCEx_MultiModeConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <ADC1_Init+0xc4>
    {
        Error_Handler();
 800072c:	f000 fdaa 	bl	8001284 <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <ADC1_Init+0x100>)
 8000732:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2306      	movs	r3, #6
 8000736:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073c:	237f      	movs	r3, #127	@ 0x7f
 800073e:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000740:	2304      	movs	r3, #4
 8000742:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <ADC1_Init+0xf8>)
 800074e:	f001 fe2b 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <ADC1_Init+0xf0>
    {
        Error_Handler();
 8000758:	f000 fd94 	bl	8001284 <Error_Handler>
    }

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	@ 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000a5c 	.word	0x20000a5c
 8000768:	50040000 	.word	0x50040000
 800076c:	c7520000 	.word	0xc7520000

08000770 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) // DMA interrupt handler function
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

	int i;

	for(i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; i++){
 8000778:	2380      	movs	r3, #128	@ 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e00a      	b.n	8000794 <HAL_ADC_ConvCpltCallback+0x24>
		printf("#%d ", sample_buffer[i]);
 800077e:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000786:	4619      	mov	r1, r3
 8000788:	4816      	ldr	r0, [pc, #88]	@ (80007e4 <HAL_ADC_ConvCpltCallback+0x74>)
 800078a:	f009 f8f7 	bl	800997c <iprintf>
	for(i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; i++){
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2bff      	cmp	r3, #255	@ 0xff
 8000798:	ddf1      	ble.n	800077e <HAL_ADC_ConvCpltCallback+0xe>
	}
	printf("\n");
 800079a:	200a      	movs	r0, #10
 800079c:	f009 f900 	bl	80099a0 <putchar>
//        printf("Failed to put test message: %d\r\n", status);
//    } else {
//        printf("Test message put successfully\r\n");
//    }

    for (int i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; i++) {
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	e014      	b.n	80007d0 <HAL_ADC_ConvCpltCallback+0x60>
        // Put each sample into the queue
        osMessagePut(dmaQueueHandle, (uint32_t)sample_buffer[i], 0);
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <HAL_ADC_ConvCpltCallback+0x78>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <HAL_ADC_ConvCpltCallback+0x70>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b2:	2200      	movs	r2, #0
 80007b4:	4619      	mov	r1, r3
 80007b6:	f006 fe3d 	bl	8007434 <osMessagePut>
        printf("%d ", sample_buffer[i]);
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <HAL_ADC_ConvCpltCallback+0x70>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c2:	4619      	mov	r1, r3
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <HAL_ADC_ConvCpltCallback+0x7c>)
 80007c6:	f009 f8d9 	bl	800997c <iprintf>
    for (int i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; i++) {
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	3301      	adds	r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2bff      	cmp	r3, #255	@ 0xff
 80007d4:	dde7      	ble.n	80007a6 <HAL_ADC_ConvCpltCallback+0x36>
    }
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000b08 	.word	0x20000b08
 80007e4:	0800a7bc 	.word	0x0800a7bc
 80007e8:	20000a0c 	.word	0x20000a0c
 80007ec:	0800a7c4 	.word	0x0800a7c4

080007f0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	int i;

	for(i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++){
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e00a      	b.n	8000814 <HAL_ADC_ConvHalfCpltCallback+0x24>
		printf("#%d ", sample_buffer[i]);
 80007fe:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000806:	4619      	mov	r1, r3
 8000808:	4812      	ldr	r0, [pc, #72]	@ (8000854 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 800080a:	f009 f8b7 	bl	800997c <iprintf>
	for(i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++){
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b7f      	cmp	r3, #127	@ 0x7f
 8000818:	ddf1      	ble.n	80007fe <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
	printf("\n");
 800081a:	200a      	movs	r0, #10
 800081c:	f009 f8c0 	bl	80099a0 <putchar>
//            printf("Failed to put test message: %d\r\n", status);
//        } else {
//            printf("Test message put successfully\r\n");
//        }

    for (int i = 0; i < SAMPLE_BUFFER_SIZE/2; i++) {
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	e00c      	b.n	8000840 <HAL_ADC_ConvHalfCpltCallback+0x50>
        // Put each sample into the queue
        osMessagePut(dmaQueueHandle, (uint32_t)sample_buffer[i], 0);
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	4a09      	ldr	r2, [pc, #36]	@ (8000850 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	f006 fdfd 	bl	8007434 <osMessagePut>
    for (int i = 0; i < SAMPLE_BUFFER_SIZE/2; i++) {
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b7f      	cmp	r3, #127	@ 0x7f
 8000844:	ddef      	ble.n	8000826 <HAL_ADC_ConvHalfCpltCallback+0x36>
    }
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000b08 	.word	0x20000b08
 8000854:	0800a7bc 	.word	0x0800a7bc
 8000858:	20000a0c 	.word	0x20000a0c

0800085c <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <DMA1_Channel1_IRQHandler+0x20>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68da      	ldr	r2, [r3, #12]
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <DMA1_Channel1_IRQHandler+0x20>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f042 0202 	orr.w	r2, r2, #2
 800086e:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 8000870:	4803      	ldr	r0, [pc, #12]	@ (8000880 <DMA1_Channel1_IRQHandler+0x24>)
 8000872:	f002 ff9d 	bl	80037b0 <HAL_DMA_IRQHandler>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000a5c 	.word	0x20000a5c
 8000880:	20000ac0 	.word	0x20000ac0

08000884 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	4b24      	ldr	r3, [pc, #144]	@ (800091c <ADC1_DMA1CH1_init+0x98>)
 800088c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <ADC1_DMA1CH1_init+0x98>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6493      	str	r3, [r2, #72]	@ 0x48
 8000896:	4b21      	ldr	r3, [pc, #132]	@ (800091c <ADC1_DMA1CH1_init+0x98>)
 8000898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000924 <ADC1_DMA1CH1_init+0xa0>)
 80008a6:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008b6:	2280      	movs	r2, #128	@ 0x80
 80008b8:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008c0:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008c8:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008cc:	2220      	movs	r2, #32
 80008ce:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d6:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 80008d8:	4811      	ldr	r0, [pc, #68]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008da:	f002 fe51 	bl	8003580 <HAL_DMA_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 80008e4:	f000 fcce 	bl	8001284 <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <ADC1_DMA1CH1_init+0xa4>)
 80008ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <ADC1_DMA1CH1_init+0x9c>)
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <ADC1_DMA1CH1_init+0xa4>)
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 80008f4:	f7ff feba 	bl	800066c <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <ADC1_DMA1CH1_init+0xa8>)
 80008fa:	4619      	mov	r1, r3
 80008fc:	200b      	movs	r0, #11
 80008fe:	f7ff fe67 	bl	80005d0 <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200b      	movs	r0, #11
 8000908:	f002 fcf7 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090c:	200b      	movs	r0, #11
 800090e:	f002 fd10 	bl	8003332 <HAL_NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	20000ac0 	.word	0x20000ac0
 8000924:	40020008 	.word	0x40020008
 8000928:	20000a5c 	.word	0x20000a5c
 800092c:	0800085d 	.word	0x0800085d

08000930 <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <HAL_TIM_Base_MspInit+0x38>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d10b      	bne.n	800095a <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_TIM_Base_MspInit+0x3c>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000946:	4a09      	ldr	r2, [pc, #36]	@ (800096c <HAL_TIM_Base_MspInit+0x3c>)
 8000948:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800094c:	6613      	str	r3, [r2, #96]	@ 0x60
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <HAL_TIM_Base_MspInit+0x3c>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    }
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40012c00 	.word	0x40012c00
 800096c:	40021000 	.word	0x40021000

08000970 <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <TIM1_Init+0x98>)
 8000990:	4a1e      	ldr	r2, [pc, #120]	@ (8000a0c <TIM1_Init+0x9c>)
 8000992:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 400 - 1;
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <TIM1_Init+0x98>)
 8000996:	f240 128f 	movw	r2, #399	@ 0x18f
 800099a:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <TIM1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <TIM1_Init+0x98>)
 80009a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009a8:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <TIM1_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <TIM1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b6:	4814      	ldr	r0, [pc, #80]	@ (8000a08 <TIM1_Init+0x98>)
 80009b8:	f005 f8d3 	bl	8005b62 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <TIM1_Init+0x56>
    {
        Error_Handler();
 80009c2:	f000 fc5f 	bl	8001284 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ca:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <TIM1_Init+0x98>)
 80009d4:	f005 f98c 	bl	8005cf0 <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <TIM1_Init+0x72>
    {
        Error_Handler();
 80009de:	f000 fc51 	bl	8001284 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009e2:	2320      	movs	r3, #32
 80009e4:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <TIM1_Init+0x98>)
 80009f0:	f005 fb88 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <TIM1_Init+0x8e>
    {
        Error_Handler();
 80009fa:	f000 fc43 	bl	8001284 <Error_Handler>
    }
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000a10 	.word	0x20000a10
 8000a0c:	40012c00 	.word	0x40012c00

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b092      	sub	sp, #72	@ 0x48
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f001 f81c 	bl	8001a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f86b 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 fa33 	bl	8000e88 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000a22:	f000 f8c9 	bl	8000bb8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000a26:	f000 f8ff 	bl	8000c28 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000a2a:	f000 f93b 	bl	8000ca4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000a2e:	f000 f95f 	bl	8000cf0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000a32:	f000 f99b 	bl	8000d6c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000a36:	f000 f9c9 	bl	8000dcc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a3a:	f000 f9f7 	bl	8000e2c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("hello\n");
 8000a3e:	4823      	ldr	r0, [pc, #140]	@ (8000acc <main+0xbc>)
 8000a40:	f009 f80c 	bl	8009a5c <puts>
  TIM1_Init();
 8000a44:	f7ff ff94 	bl	8000970 <TIM1_Init>
  ADC1_DMA1CH1_init();
 8000a48:	f7ff ff1c 	bl	8000884 <ADC1_DMA1CH1_init>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sample_buffer[0], SAMPLE_BUFFER_SIZE);
 8000a4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a50:	491f      	ldr	r1, [pc, #124]	@ (8000ad0 <main+0xc0>)
 8000a52:	4820      	ldr	r0, [pc, #128]	@ (8000ad4 <main+0xc4>)
 8000a54:	f001 fbe2 	bl	800221c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8000a58:	481f      	ldr	r0, [pc, #124]	@ (8000ad8 <main+0xc8>)
 8000a5a:	f005 f8d9 	bl	8005c10 <HAL_TIM_Base_Start_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of dmaQueue */
  osMessageQDef(dmaQueue, 512, uint16_t);
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <main+0xcc>)
 8000a60:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  dmaQueueHandle = osMessageCreate(osMessageQ(dmaQueue), NULL);
 8000a6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 fcb7 	bl	80073e4 <osMessageCreate>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a19      	ldr	r2, [pc, #100]	@ (8000ae0 <main+0xd0>)
 8000a7a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <main+0xd4>)
 8000a7e:	f107 041c 	add.w	r4, r7, #28
 8000a82:	461d      	mov	r5, r3
 8000a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f006 fc44 	bl	8007324 <osThreadCreate>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <main+0xd8>)
 8000aa0:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPrint */
  osThreadDef(TaskPrint, StartTaskPrint, osPriorityHigh, 0, 512);
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <main+0xdc>)
 8000aa4:	463c      	mov	r4, r7
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPrintHandle = osThreadCreate(osThread(TaskPrint), NULL);
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f006 fc33 	bl	8007324 <osThreadCreate>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8000af0 <main+0xe0>)
 8000ac2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ac4:	f006 fc27 	bl	8007316 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <main+0xb8>
 8000acc:	0800a7c8 	.word	0x0800a7c8
 8000ad0:	20000b08 	.word	0x20000b08
 8000ad4:	20000a5c 	.word	0x20000a5c
 8000ad8:	20000a10 	.word	0x20000a10
 8000adc:	0800a7d0 	.word	0x0800a7d0
 8000ae0:	20000a0c 	.word	0x20000a0c
 8000ae4:	0800a7ec 	.word	0x0800a7ec
 8000ae8:	20000a04 	.word	0x20000a04
 8000aec:	0800a814 	.word	0x0800a814
 8000af0:	20000a08 	.word	0x20000a08

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b096      	sub	sp, #88	@ 0x58
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2244      	movs	r2, #68	@ 0x44
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f009 f88a 	bl	8009c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b1a:	f003 fb91 	bl	8004240 <HAL_PWREx_ControlVoltageScaling>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b24:	f000 fbae 	bl	8001284 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b28:	f003 fb6c 	bl	8004204 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b2c:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <SystemClock_Config+0xc0>)
 8000b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b32:	4a20      	ldr	r2, [pc, #128]	@ (8000bb4 <SystemClock_Config+0xc0>)
 8000b34:	f023 0318 	bic.w	r3, r3, #24
 8000b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b3c:	2314      	movs	r3, #20
 8000b3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b4c:	2360      	movs	r3, #96	@ 0x60
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b50:	2302      	movs	r3, #2
 8000b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b54:	2301      	movs	r3, #1
 8000b56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b5c:	2328      	movs	r3, #40	@ 0x28
 8000b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b60:	2307      	movs	r3, #7
 8000b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fc87 	bl	8004484 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 fb82 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2303      	movs	r3, #3
 8000b86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	2104      	movs	r1, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 f84f 	bl	8004c3c <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ba4:	f000 fb6e 	bl	8001284 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ba8:	f004 fd56 	bl	8005658 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bac:	bf00      	nop
 8000bae:	3758      	adds	r7, #88	@ 0x58
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bbe:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <MX_DFSDM1_Init+0x6c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000be2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000be6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_DFSDM1_Init+0x68>)
 8000c0e:	f002 fbab 	bl	8003368 <HAL_DFSDM_ChannelInit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c18:	f000 fb34 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200002dc 	.word	0x200002dc
 8000c24:	40016020 	.word	0x40016020

08000c28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <MX_I2C2_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c34:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000c38:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c58:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c64:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c66:	f003 f868 	bl	8003d3a <HAL_I2C_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c70:	f000 fb08 	bl	8001284 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c78:	f003 f8fa 	bl	8003e70 <HAL_I2CEx_ConfigAnalogFilter>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c82:	f000 faff 	bl	8001284 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <MX_I2C2_Init+0x74>)
 8000c8a:	f003 f93c 	bl	8003f06 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c94:	f000 faf6 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000314 	.word	0x20000314
 8000ca0:	40005800 	.word	0x40005800

08000ca4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_QUADSPI_Init+0x44>)
 8000caa:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <MX_QUADSPI_Init+0x48>)
 8000cac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_QUADSPI_Init+0x44>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_QUADSPI_Init+0x44>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_QUADSPI_Init+0x44>)
 8000cbc:	2210      	movs	r2, #16
 8000cbe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_QUADSPI_Init+0x44>)
 8000cc2:	2217      	movs	r2, #23
 8000cc4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_QUADSPI_Init+0x44>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_QUADSPI_Init+0x44>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_QUADSPI_Init+0x44>)
 8000cd4:	f003 fb1a 	bl	800430c <HAL_QSPI_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cde:	f000 fad1 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000368 	.word	0x20000368
 8000cec:	a0001000 	.word	0xa0001000

08000cf0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <MX_SPI3_Init+0x78>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000cfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d0a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d3e:	2207      	movs	r2, #7
 8000d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_SPI3_Init+0x74>)
 8000d50:	f004 fe64 	bl	8005a1c <HAL_SPI_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d5a:	f000 fa93 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200003ac 	.word	0x200003ac
 8000d68:	40003c00 	.word	0x40003c00

08000d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	@ (8000dc8 <MX_USART1_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000db0:	f005 fa30 	bl	8006214 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 fa63 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000410 	.word	0x20000410
 8000dc8:	40013800 	.word	0x40013800

08000dcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <MX_USART3_UART_Init+0x5c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e10:	f005 fa00 	bl	8006214 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 fa33 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000498 	.word	0x20000498
 8000e28:	40004800 	.word	0x40004800

08000e2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3a:	2206      	movs	r2, #6
 8000e3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e70:	f003 f895 	bl	8003f9e <HAL_PCD_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e7a:	f000 fa03 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000520 	.word	0x20000520

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9e:	4bbd      	ldr	r3, [pc, #756]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4abc      	ldr	r2, [pc, #752]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000ea4:	f043 0310 	orr.w	r3, r3, #16
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4bba      	ldr	r3, [pc, #744]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4bb7      	ldr	r3, [pc, #732]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4ab6      	ldr	r2, [pc, #728]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4bb4      	ldr	r3, [pc, #720]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4bb1      	ldr	r3, [pc, #708]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4ab0      	ldr	r2, [pc, #704]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4bae      	ldr	r3, [pc, #696]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4bab      	ldr	r3, [pc, #684]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4aaa      	ldr	r2, [pc, #680]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4ba8      	ldr	r3, [pc, #672]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efe:	4ba5      	ldr	r3, [pc, #660]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4aa4      	ldr	r2, [pc, #656]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4ba2      	ldr	r3, [pc, #648]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000f1c:	489e      	ldr	r0, [pc, #632]	@ (8001198 <MX_GPIO_Init+0x310>)
 8000f1e:	f002 fed1 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2c:	f002 feca 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f30:	2200      	movs	r2, #0
 8000f32:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000f36:	4899      	ldr	r0, [pc, #612]	@ (800119c <MX_GPIO_Init+0x314>)
 8000f38:	f002 fec4 	bl	8003cc4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000f42:	4897      	ldr	r0, [pc, #604]	@ (80011a0 <MX_GPIO_Init+0x318>)
 8000f44:	f002 febe 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f4e:	4894      	ldr	r0, [pc, #592]	@ (80011a0 <MX_GPIO_Init+0x318>)
 8000f50:	f002 feb8 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000f5a:	4892      	ldr	r0, [pc, #584]	@ (80011a4 <MX_GPIO_Init+0x31c>)
 8000f5c:	f002 feb2 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2120      	movs	r1, #32
 8000f64:	488d      	ldr	r0, [pc, #564]	@ (800119c <MX_GPIO_Init+0x314>)
 8000f66:	f002 fead 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	488a      	ldr	r0, [pc, #552]	@ (8001198 <MX_GPIO_Init+0x310>)
 8000f70:	f002 fea8 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f74:	f240 1315 	movw	r3, #277	@ 0x115
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4882      	ldr	r0, [pc, #520]	@ (8001198 <MX_GPIO_Init+0x310>)
 8000f8e:	f002 fcef 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f92:	236a      	movs	r3, #106	@ 0x6a
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	487c      	ldr	r0, [pc, #496]	@ (8001198 <MX_GPIO_Init+0x310>)
 8000fa8:	f002 fce2 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4878      	ldr	r0, [pc, #480]	@ (80011a4 <MX_GPIO_Init+0x31c>)
 8000fc4:	f002 fcd4 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fc8:	233f      	movs	r3, #63	@ 0x3f
 8000fca:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4872      	ldr	r0, [pc, #456]	@ (80011a4 <MX_GPIO_Init+0x31c>)
 8000fdc:	f002 fcc8 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffe:	f002 fcb7 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001002:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101e:	f002 fca7 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001022:	2308      	movs	r3, #8
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f002 fc96 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001044:	2310      	movs	r3, #16
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001048:	230b      	movs	r3, #11
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105a:	f002 fc89 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800105e:	23e0      	movs	r3, #224	@ 0xe0
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800106e:	2305      	movs	r3, #5
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107c:	f002 fc78 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001084:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4841      	ldr	r0, [pc, #260]	@ (800119c <MX_GPIO_Init+0x314>)
 8001096:	f002 fc6b 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800109a:	2302      	movs	r3, #2
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800109e:	230b      	movs	r3, #11
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	483b      	ldr	r0, [pc, #236]	@ (800119c <MX_GPIO_Init+0x314>)
 80010ae:	f002 fc5f 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010b2:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80010b6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4834      	ldr	r0, [pc, #208]	@ (800119c <MX_GPIO_Init+0x314>)
 80010cc:	f002 fc50 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80010d0:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80010d4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	482e      	ldr	r0, [pc, #184]	@ (80011a0 <MX_GPIO_Init+0x318>)
 80010e8:	f002 fc42 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80010ec:	f243 0381 	movw	r3, #12417	@ 0x3081
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4826      	ldr	r0, [pc, #152]	@ (80011a0 <MX_GPIO_Init+0x318>)
 8001106:	f002 fc33 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800110a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4820      	ldr	r0, [pc, #128]	@ (80011a4 <MX_GPIO_Init+0x31c>)
 8001124:	f002 fc24 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001128:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4819      	ldr	r0, [pc, #100]	@ (80011a4 <MX_GPIO_Init+0x31c>)
 8001140:	f002 fc16 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001144:	2302      	movs	r3, #2
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001154:	2305      	movs	r3, #5
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4810      	ldr	r0, [pc, #64]	@ (80011a0 <MX_GPIO_Init+0x318>)
 8001160:	f002 fc06 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001164:	2378      	movs	r3, #120	@ 0x78
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001174:	2307      	movs	r3, #7
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <MX_GPIO_Init+0x318>)
 8001180:	f002 fbf6 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001184:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118a:	2312      	movs	r3, #18
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	e00a      	b.n	80011a8 <MX_GPIO_Init+0x320>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	48001000 	.word	0x48001000
 800119c:	48000400 	.word	0x48000400
 80011a0:	48000c00 	.word	0x48000c00
 80011a4:	48000800 	.word	0x48000800
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ae:	2304      	movs	r3, #4
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <MX_GPIO_Init+0x360>)
 80011ba:	f002 fbd9 	bl	8003970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2105      	movs	r1, #5
 80011c2:	2017      	movs	r0, #23
 80011c4:	f002 f899 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011c8:	2017      	movs	r0, #23
 80011ca:	f002 f8b2 	bl	8003332 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2105      	movs	r1, #5
 80011d2:	2028      	movs	r0, #40	@ 0x28
 80011d4:	f002 f891 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011d8:	2028      	movs	r0, #40	@ 0x28
 80011da:	f002 f8aa 	bl	8003332 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	@ 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	48000400 	.word	0x48000400

080011ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f006 f8e1 	bl	80073bc <osDelay>
 80011fa:	e7fb      	b.n	80011f4 <StartDefaultTask+0x8>

080011fc <StartTaskPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPrint */
void StartTaskPrint(void const * argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartTaskPrint */
    osEvent event;
    uint16_t receivedAdcValue;
    printf("asd1\n");
 8001204:	4817      	ldr	r0, [pc, #92]	@ (8001264 <StartTaskPrint+0x68>)
 8001206:	f008 fc29 	bl	8009a5c <puts>
    /* Infinite loop */
    for(;;)
    {
    	printf("asd\n");
 800120a:	4817      	ldr	r0, [pc, #92]	@ (8001268 <StartTaskPrint+0x6c>)
 800120c:	f008 fc26 	bl	8009a5c <puts>
        // Wait indefinitely until a message is received from the dmaQueueHandle
        event = osMessageGet(dmaQueueHandle, osWaitForever);
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <StartTaskPrint+0x70>)
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	4618      	mov	r0, r3
 800121e:	f006 f949 	bl	80074b4 <osMessageGet>
        printf("got message\n");
 8001222:	4813      	ldr	r0, [pc, #76]	@ (8001270 <StartTaskPrint+0x74>)
 8001224:	f008 fc1a 	bl	8009a5c <puts>
        if (event.status == osEventMessage)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b10      	cmp	r3, #16
 800122c:	d1ed      	bne.n	800120a <StartTaskPrint+0xe>
        {
            receivedAdcValue = (uint16_t)event.value.v;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	82fb      	strh	r3, [r7, #22]
            printf("got message2\n");
 8001232:	4810      	ldr	r0, [pc, #64]	@ (8001274 <StartTaskPrint+0x78>)
 8001234:	f008 fc12 	bl	8009a5c <puts>
            // Check if this is a marker value
            if (receivedAdcValue == 0xA000) {
 8001238:	8afb      	ldrh	r3, [r7, #22]
 800123a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800123e:	d103      	bne.n	8001248 <StartTaskPrint+0x4c>
                printf("\r\n----- BUFFER TOP HALF -----\r\n");
 8001240:	480d      	ldr	r0, [pc, #52]	@ (8001278 <StartTaskPrint+0x7c>)
 8001242:	f008 fc0b 	bl	8009a5c <puts>
 8001246:	e7e0      	b.n	800120a <StartTaskPrint+0xe>
            }
            else if (receivedAdcValue == 0xB000) {
 8001248:	8afb      	ldrh	r3, [r7, #22]
 800124a:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 800124e:	d103      	bne.n	8001258 <StartTaskPrint+0x5c>
                printf("\r\n----- BUFFER BOTTOM HALF -----\r\n");
 8001250:	480a      	ldr	r0, [pc, #40]	@ (800127c <StartTaskPrint+0x80>)
 8001252:	f008 fc03 	bl	8009a5c <puts>
 8001256:	e7d8      	b.n	800120a <StartTaskPrint+0xe>
            }
            else {
                // Regular ADC value, print with buffer half indicator
                printf("Temp Sensor ADC : %d\r\n", receivedAdcValue);
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4619      	mov	r1, r3
 800125c:	4808      	ldr	r0, [pc, #32]	@ (8001280 <StartTaskPrint+0x84>)
 800125e:	f008 fb8d 	bl	800997c <iprintf>
    	printf("asd\n");
 8001262:	e7d2      	b.n	800120a <StartTaskPrint+0xe>
 8001264:	0800a830 	.word	0x0800a830
 8001268:	0800a838 	.word	0x0800a838
 800126c:	20000a0c 	.word	0x20000a0c
 8001270:	0800a83c 	.word	0x0800a83c
 8001274:	0800a848 	.word	0x0800a848
 8001278:	0800a858 	.word	0x0800a858
 800127c:	0800a878 	.word	0x0800a878
 8001280:	0800a89c 	.word	0x0800a89c

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <Error_Handler+0x8>

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_MspInit+0x4c>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <HAL_MspInit+0x4c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_MspInit+0x4c>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_MspInit+0x4c>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_MspInit+0x4c>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	210f      	movs	r1, #15
 80012ca:	f06f 0001 	mvn.w	r0, #1
 80012ce:	f002 f814 	bl	80032fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ac      	sub	sp, #176	@ 0xb0
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2288      	movs	r2, #136	@ 0x88
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f008 fc8b 	bl	8009c1c <memset>
  if(DFSDM1_Init == 0)
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d142      	bne.n	8001394 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800130e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001312:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4618      	mov	r0, r3
 8001320:	f003 feb0 	bl	8005084 <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800132a:	f7ff ffab 	bl	8001284 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001334:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001338:	6613      	str	r3, [r2, #96]	@ 0x60
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a15      	ldr	r2, [pc, #84]	@ (80013a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800134c:	f043 0310 	orr.w	r3, r3, #16
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800135e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001378:	2306      	movs	r3, #6
 800137a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001386:	f002 faf3 	bl	8003970 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	4a02      	ldr	r2, [pc, #8]	@ (800139c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001392:	6013      	str	r3, [r2, #0]
  }

}
 8001394:	bf00      	nop
 8001396:	37b0      	adds	r7, #176	@ 0xb0
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000d08 	.word	0x20000d08
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48001000 	.word	0x48001000

080013a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0ac      	sub	sp, #176	@ 0xb0
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2288      	movs	r2, #136	@ 0x88
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f008 fc27 	bl	8009c1c <memset>
  if(hi2c->Instance==I2C2)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <HAL_I2C_MspInit+0xb0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d13b      	bne.n	8001450 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013dc:	2300      	movs	r3, #0
 80013de:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fe4d 	bl	8005084 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013f0:	f7ff ff48 	bl	8001284 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_I2C_MspInit+0xb4>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f8:	4a18      	ldr	r2, [pc, #96]	@ (800145c <HAL_I2C_MspInit+0xb4>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_I2C_MspInit+0xb4>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800140c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141a:	2301      	movs	r3, #1
 800141c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001426:	2304      	movs	r3, #4
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001430:	4619      	mov	r1, r3
 8001432:	480b      	ldr	r0, [pc, #44]	@ (8001460 <HAL_I2C_MspInit+0xb8>)
 8001434:	f002 fa9c 	bl	8003970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <HAL_I2C_MspInit+0xb4>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	4a07      	ldr	r2, [pc, #28]	@ (800145c <HAL_I2C_MspInit+0xb4>)
 800143e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001442:	6593      	str	r3, [r2, #88]	@ 0x58
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_I2C_MspInit+0xb4>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001450:	bf00      	nop
 8001452:	37b0      	adds	r7, #176	@ 0xb0
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40005800 	.word	0x40005800
 800145c:	40021000 	.word	0x40021000
 8001460:	48000400 	.word	0x48000400

08001464 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <HAL_QSPI_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d128      	bne.n	80014d8 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <HAL_QSPI_MspInit+0x80>)
 8001488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800148a:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <HAL_QSPI_MspInit+0x80>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001490:	6513      	str	r3, [r2, #80]	@ 0x50
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <HAL_QSPI_MspInit+0x80>)
 8001494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_QSPI_MspInit+0x80>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <HAL_QSPI_MspInit+0x80>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_QSPI_MspInit+0x80>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80014b6:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80014ba:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014c8:	230a      	movs	r3, #10
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <HAL_QSPI_MspInit+0x84>)
 80014d4:	f002 fa4c 	bl	8003970 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	a0001000 	.word	0xa0001000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48001000 	.word	0x48001000

080014ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <HAL_SPI_MspInit+0x7c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d128      	bne.n	8001560 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800150e:	4b17      	ldr	r3, [pc, #92]	@ (800156c <HAL_SPI_MspInit+0x80>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	4a16      	ldr	r2, [pc, #88]	@ (800156c <HAL_SPI_MspInit+0x80>)
 8001514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001518:	6593      	str	r3, [r2, #88]	@ 0x58
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <HAL_SPI_MspInit+0x80>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_SPI_MspInit+0x80>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	4a10      	ldr	r2, [pc, #64]	@ (800156c <HAL_SPI_MspInit+0x80>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <HAL_SPI_MspInit+0x80>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800153e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001550:	2306      	movs	r3, #6
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <HAL_SPI_MspInit+0x84>)
 800155c:	f002 fa08 	bl	8003970 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	@ 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40003c00 	.word	0x40003c00
 800156c:	40021000 	.word	0x40021000
 8001570:	48000800 	.word	0x48000800

08001574 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ae      	sub	sp, #184	@ 0xb8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2288      	movs	r2, #136	@ 0x88
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f008 fb41 	bl	8009c1c <memset>
  if(huart->Instance==USART1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a42      	ldr	r2, [pc, #264]	@ (80016a8 <HAL_UART_MspInit+0x134>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d13b      	bne.n	800161c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015a8:	2300      	movs	r3, #0
 80015aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fd67 	bl	8005084 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015bc:	f7ff fe62 	bl	8001284 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015c0:	4b3a      	ldr	r3, [pc, #232]	@ (80016ac <HAL_UART_MspInit+0x138>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c4:	4a39      	ldr	r2, [pc, #228]	@ (80016ac <HAL_UART_MspInit+0x138>)
 80015c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80015cc:	4b37      	ldr	r3, [pc, #220]	@ (80016ac <HAL_UART_MspInit+0x138>)
 80015ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <HAL_UART_MspInit+0x138>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	4a33      	ldr	r2, [pc, #204]	@ (80016ac <HAL_UART_MspInit+0x138>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e4:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <HAL_UART_MspInit+0x138>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80015f0:	23c0      	movs	r3, #192	@ 0xc0
 80015f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001612:	4619      	mov	r1, r3
 8001614:	4826      	ldr	r0, [pc, #152]	@ (80016b0 <HAL_UART_MspInit+0x13c>)
 8001616:	f002 f9ab 	bl	8003970 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800161a:	e040      	b.n	800169e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a24      	ldr	r2, [pc, #144]	@ (80016b4 <HAL_UART_MspInit+0x140>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d13b      	bne.n	800169e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001626:	2304      	movs	r3, #4
 8001628:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800162a:	2300      	movs	r3, #0
 800162c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fd26 	bl	8005084 <HAL_RCCEx_PeriphCLKConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800163e:	f7ff fe21 	bl	8001284 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_UART_MspInit+0x138>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001646:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <HAL_UART_MspInit+0x138>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164c:	6593      	str	r3, [r2, #88]	@ 0x58
 800164e:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <HAL_UART_MspInit+0x138>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_UART_MspInit+0x138>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	4a13      	ldr	r2, [pc, #76]	@ (80016ac <HAL_UART_MspInit+0x138>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_UART_MspInit+0x138>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001672:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800168c:	2307      	movs	r3, #7
 800168e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001692:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001696:	4619      	mov	r1, r3
 8001698:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <HAL_UART_MspInit+0x144>)
 800169a:	f002 f969 	bl	8003970 <HAL_GPIO_Init>
}
 800169e:	bf00      	nop
 80016a0:	37b8      	adds	r7, #184	@ 0xb8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000400 	.word	0x48000400
 80016b4:	40004800 	.word	0x40004800
 80016b8:	48000c00 	.word	0x48000c00

080016bc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0ac      	sub	sp, #176	@ 0xb0
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2288      	movs	r2, #136	@ 0x88
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f008 fa9d 	bl	8009c1c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ea:	d17c      	bne.n	80017e6 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80016f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001702:	2318      	movs	r3, #24
 8001704:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001706:	2307      	movs	r3, #7
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800170a:	2302      	movs	r3, #2
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800170e:	2302      	movs	r3, #2
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001712:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001716:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fcb1 	bl	8005084 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001728:	f7ff fdac 	bl	8001284 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	4a2f      	ldr	r2, [pc, #188]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001762:	f002 f905 	bl	8003970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001766:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800176a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001780:	230a      	movs	r3, #10
 8001782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001790:	f002 f8ee 	bl	8003970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001798:	4a15      	ldr	r2, [pc, #84]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 800179a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800179e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ac:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d114      	bne.n	80017e2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	4a0c      	ldr	r2, [pc, #48]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80017d0:	f002 fd8c 	bl	80042ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d8:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <HAL_PCD_MspInit+0x134>)
 80017da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017de:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80017e0:	e001      	b.n	80017e6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80017e2:	f002 fd83 	bl	80042ec <HAL_PWREx_EnableVddUSB>
}
 80017e6:	bf00      	nop
 80017e8:	37b0      	adds	r7, #176	@ 0xb0
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <NMI_Handler+0x4>

080017fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <MemManage_Handler+0x4>

0800180c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <UsageFault_Handler+0x4>

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182e:	f000 f965 	bl	8001afc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001832:	f007 fa95 	bl	8008d60 <xTaskGetSchedulerState>
 8001836:	4603      	mov	r3, r0
 8001838:	2b01      	cmp	r3, #1
 800183a:	d001      	beq.n	8001840 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800183c:	f007 fd5c 	bl	80092f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001848:	2020      	movs	r0, #32
 800184a:	f002 fa53 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800184e:	2040      	movs	r0, #64	@ 0x40
 8001850:	f002 fa50 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001854:	2080      	movs	r0, #128	@ 0x80
 8001856:	f002 fa4d 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800185a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800185e:	f002 fa49 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}

08001866 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800186a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800186e:	f002 fa41 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001872:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001876:	f002 fa3d 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800187a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800187e:	f002 fa39 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001882:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001886:	f002 fa35 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800188a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800188e:	f002 fa31 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}

08001896 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e00a      	b.n	80018be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a8:	f3af 8000 	nop.w
 80018ac:	4601      	mov	r1, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	60ba      	str	r2, [r7, #8]
 80018b4:	b2ca      	uxtb	r2, r1
 80018b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbf0      	blt.n	80018a8 <_read+0x12>
  }

  return len;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e009      	b.n	80018f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	60ba      	str	r2, [r7, #8]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe8c 	bl	8000608 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbf1      	blt.n	80018e2 <_write+0x12>
  }
  return len;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_close>:

int _close(int file)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001930:	605a      	str	r2, [r3, #4]
  return 0;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_isatty>:

int _isatty(int file)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001948:	2301      	movs	r3, #1
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f008 f98a 	bl	8009cb8 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20018000 	.word	0x20018000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20000d0c 	.word	0x20000d0c
 80019d8:	20001b90 	.word	0x20001b90

080019dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff ffea 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	@ (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	@ (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f008 f949 	bl	8009cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7fe ffed 	bl	8000a10 <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a44:	0800a948 	.word	0x0800a948
  ldr r2, =_sbss
 8001a48:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a4c:	20001b90 	.word	0x20001b90

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>

08001a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f001 fc41 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f80e 	bl	8001a84 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	e001      	b.n	8001a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a74:	f7ff fc0c 	bl	8001290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <HAL_InitTick+0x6c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d023      	beq.n	8001ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_InitTick+0x70>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_InitTick+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fc4d 	bl	800334e <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10f      	bne.n	8001ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d809      	bhi.n	8001ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f001 fc17 	bl	80032fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001acc:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <HAL_InitTick+0x74>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e004      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e001      	b.n	8001ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000d10 	.word	0x20000d10

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	@ (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000d10 	.word	0x20000d10

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008

08001b84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3360      	adds	r3, #96	@ 0x60
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <LL_ADC_SetOffset+0x44>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c24:	bf00      	nop
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	03fff000 	.word	0x03fff000

08001c34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3360      	adds	r3, #96	@ 0x60
 8001c42:	461a      	mov	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3360      	adds	r3, #96	@ 0x60
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3330      	adds	r3, #48	@ 0x30
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	4413      	add	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	211f      	movs	r1, #31
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	f003 011f 	and.w	r1, r3, #31
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	431a      	orrs	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3314      	adds	r3, #20
 8001d24:	461a      	mov	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	0e5b      	lsrs	r3, r3, #25
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	0d1b      	lsrs	r3, r3, #20
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2107      	movs	r1, #7
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	0d1b      	lsrs	r3, r3, #20
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d5e:	bf00      	nop
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0318 	and.w	r3, r3, #24
 8001d8e:	4908      	ldr	r1, [pc, #32]	@ (8001db0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d90:	40d9      	lsrs	r1, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	400b      	ands	r3, r1
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	0007ffff 	.word	0x0007ffff

08001db4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001de0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6093      	str	r3, [r2, #8]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e08:	d101      	bne.n	8001e0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e58:	d101      	bne.n	8001e5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ea4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ea8:	f043 0202 	orr.w	r2, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <LL_ADC_IsEnabled+0x18>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <LL_ADC_IsEnabled+0x1a>
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d101      	bne.n	8001efa <LL_ADC_IsDisableOngoing+0x18>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <LL_ADC_IsDisableOngoing+0x1a>
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d101      	bne.n	8001f48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d101      	bne.n	8001f6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e130      	b.n	80021f8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7fe fb41 	bl	800062c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff19 	bl	8001df4 <LL_ADC_IsDeepPowerDownEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff feff 	bl	8001dd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff34 	bl	8001e44 <LL_ADC_IsInternalRegulatorEnabled>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d115      	bne.n	800200e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff18 	bl	8001e1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fec:	4b84      	ldr	r3, [pc, #528]	@ (8002200 <HAL_ADC_Init+0x284>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	4a84      	ldr	r2, [pc, #528]	@ (8002204 <HAL_ADC_Init+0x288>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002000:	e002      	b.n	8002008 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3b01      	subs	r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f9      	bne.n	8002002 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff16 	bl	8001e44 <LL_ADC_IsInternalRegulatorEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff76 	bl	8001f30 <LL_ADC_REG_IsConversionOngoing>
 8002044:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80c9 	bne.w	80021e6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 80c5 	bne.w	80021e6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002060:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002064:	f043 0202 	orr.w	r2, r3, #2
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff23 	bl	8001ebc <LL_ADC_IsEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d115      	bne.n	80020a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800207c:	4862      	ldr	r0, [pc, #392]	@ (8002208 <HAL_ADC_Init+0x28c>)
 800207e:	f7ff ff1d 	bl	8001ebc <LL_ADC_IsEnabled>
 8002082:	4604      	mov	r4, r0
 8002084:	4861      	ldr	r0, [pc, #388]	@ (800220c <HAL_ADC_Init+0x290>)
 8002086:	f7ff ff19 	bl	8001ebc <LL_ADC_IsEnabled>
 800208a:	4603      	mov	r3, r0
 800208c:	431c      	orrs	r4, r3
 800208e:	4860      	ldr	r0, [pc, #384]	@ (8002210 <HAL_ADC_Init+0x294>)
 8002090:	f7ff ff14 	bl	8001ebc <LL_ADC_IsEnabled>
 8002094:	4603      	mov	r3, r0
 8002096:	4323      	orrs	r3, r4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4619      	mov	r1, r3
 80020a2:	485c      	ldr	r0, [pc, #368]	@ (8002214 <HAL_ADC_Init+0x298>)
 80020a4:	f7ff fd6e 	bl	8001b84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7e5b      	ldrb	r3, [r3, #25]
 80020ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d106      	bne.n	80020e4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	045b      	lsls	r3, r3, #17
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <HAL_ADC_Init+0x29c>)
 8002108:	4013      	ands	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	430b      	orrs	r3, r1
 8002112:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff1c 	bl	8001f56 <LL_ADC_INJ_IsConversionOngoing>
 800211e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d13d      	bne.n	80021a2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d13a      	bne.n	80021a2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002130:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002138:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002148:	f023 0302 	bic.w	r3, r3, #2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	69b9      	ldr	r1, [r7, #24]
 8002152:	430b      	orrs	r3, r1
 8002154:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800215c:	2b01      	cmp	r3, #1
 800215e:	d118      	bne.n	8002192 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002182:	430a      	orrs	r2, r1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	e007      	b.n	80021a2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10c      	bne.n	80021c4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b0:	f023 010f 	bic.w	r1, r3, #15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80021c2:	e007      	b.n	80021d4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 020f 	bic.w	r2, r2, #15
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	f023 0303 	bic.w	r3, r3, #3
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80021e4:	e007      	b.n	80021f6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3724      	adds	r7, #36	@ 0x24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd90      	pop	{r4, r7, pc}
 8002200:	20000000 	.word	0x20000000
 8002204:	053e2d63 	.word	0x053e2d63
 8002208:	50040000 	.word	0x50040000
 800220c:	50040100 	.word	0x50040100
 8002210:	50040200 	.word	0x50040200
 8002214:	50040300 	.word	0x50040300
 8002218:	fff0c007 	.word	0xfff0c007

0800221c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002228:	4853      	ldr	r0, [pc, #332]	@ (8002378 <HAL_ADC_Start_DMA+0x15c>)
 800222a:	f7ff fdc3 	bl	8001db4 <LL_ADC_GetMultimode>
 800222e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fe7b 	bl	8001f30 <LL_ADC_REG_IsConversionOngoing>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 8093 	bne.w	8002368 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_ADC_Start_DMA+0x34>
 800224c:	2302      	movs	r3, #2
 800224e:	e08e      	b.n	800236e <HAL_ADC_Start_DMA+0x152>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a47      	ldr	r2, [pc, #284]	@ (800237c <HAL_ADC_Start_DMA+0x160>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d008      	beq.n	8002274 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d002      	beq.n	8002274 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b09      	cmp	r3, #9
 8002272:	d172      	bne.n	800235a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fc89 	bl	8002b8c <ADC_Enable>
 800227a:	4603      	mov	r3, r0
 800227c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d165      	bne.n	8002350 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a38      	ldr	r2, [pc, #224]	@ (8002380 <HAL_ADC_Start_DMA+0x164>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d002      	beq.n	80022a8 <HAL_ADC_Start_DMA+0x8c>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e000      	b.n	80022aa <HAL_ADC_Start_DMA+0x8e>
 80022a8:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <HAL_ADC_Start_DMA+0x168>)
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d002      	beq.n	80022b8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d4:	f023 0206 	bic.w	r2, r3, #6
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	659a      	str	r2, [r3, #88]	@ 0x58
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e8:	4a27      	ldr	r2, [pc, #156]	@ (8002388 <HAL_ADC_Start_DMA+0x16c>)
 80022ea:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f0:	4a26      	ldr	r2, [pc, #152]	@ (800238c <HAL_ADC_Start_DMA+0x170>)
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	4a25      	ldr	r2, [pc, #148]	@ (8002390 <HAL_ADC_Start_DMA+0x174>)
 80022fa:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	221c      	movs	r2, #28
 8002302:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0210 	orr.w	r2, r2, #16
 800231a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3340      	adds	r3, #64	@ 0x40
 8002336:	4619      	mov	r1, r3
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f001 f9d8 	bl	80036f0 <HAL_DMA_Start_IT>
 8002340:	4603      	mov	r3, r0
 8002342:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fddd 	bl	8001f08 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800234e:	e00d      	b.n	800236c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002358:	e008      	b.n	800236c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002366:	e001      	b.n	800236c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002368:	2302      	movs	r3, #2
 800236a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800236c:	7dfb      	ldrb	r3, [r7, #23]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	50040300 	.word	0x50040300
 800237c:	50040200 	.word	0x50040200
 8002380:	50040100 	.word	0x50040100
 8002384:	50040000 	.word	0x50040000
 8002388:	08002d57 	.word	0x08002d57
 800238c:	08002e2f 	.word	0x08002e2f
 8002390:	08002e4b 	.word	0x08002e4b

08002394 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0b6      	sub	sp, #216	@ 0xd8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x22>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e3c9      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x7b6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fdaa 	bl	8001f30 <LL_ADC_REG_IsConversionOngoing>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 83aa 	bne.w	8002b38 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d824      	bhi.n	800243e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	3b02      	subs	r3, #2
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d81b      	bhi.n	8002436 <HAL_ADC_ConfigChannel+0x8e>
 80023fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002404 <HAL_ADC_ConfigChannel+0x5c>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002415 	.word	0x08002415
 8002408:	0800241d 	.word	0x0800241d
 800240c:	08002425 	.word	0x08002425
 8002410:	0800242d 	.word	0x0800242d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002414:	230c      	movs	r3, #12
 8002416:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800241a:	e010      	b.n	800243e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800241c:	2312      	movs	r3, #18
 800241e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002422:	e00c      	b.n	800243e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002424:	2318      	movs	r3, #24
 8002426:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800242a:	e008      	b.n	800243e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800242c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002436:	2306      	movs	r3, #6
 8002438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800243c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800244c:	f7ff fc36 	bl	8001cbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fd6b 	bl	8001f30 <LL_ADC_REG_IsConversionOngoing>
 800245a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fd77 	bl	8001f56 <LL_ADC_INJ_IsConversionOngoing>
 8002468:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800246c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 81a4 	bne.w	80027be <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 819f 	bne.w	80027be <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	461a      	mov	r2, r3
 800248e:	f7ff fc41 	bl	8001d14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d00a      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6919      	ldr	r1, [r3, #16]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024c4:	f7ff fb92 	bl	8001bec <LL_ADC_SetOffset>
 80024c8:	e179      	b.n	80027be <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fbaf 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x14e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fba4 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	e01e      	b.n	8002534 <HAL_ADC_ConfigChannel+0x18c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fb99 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800251c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e004      	b.n	8002532 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002528:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1a4>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	e018      	b.n	800257e <HAL_ADC_ConfigChannel+0x1d6>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e004      	b.n	800257e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800257e:	429a      	cmp	r2, r3
 8002580:	d106      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fb68 	bl	8001c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fb4c 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x214>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2101      	movs	r1, #1
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fb41 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 021f 	and.w	r2, r3, #31
 80025ba:	e01e      	b.n	80025fa <HAL_ADC_ConfigChannel+0x252>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fb36 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80025da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80025e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e004      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80025ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x26a>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	e018      	b.n	8002644 <HAL_ADC_ConfigChannel+0x29c>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002626:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800262a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800262e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e004      	b.n	8002644 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800263a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002644:	429a      	cmp	r2, r3
 8002646:	d106      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	2101      	movs	r1, #1
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fb05 	bl	8001c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2102      	movs	r1, #2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fae9 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x2da>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2102      	movs	r1, #2
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fade 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	e01e      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x318>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2102      	movs	r1, #2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fad3 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80026a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80026a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e004      	b.n	80026be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80026b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x330>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	e014      	b.n	8002702 <HAL_ADC_ConfigChannel+0x35a>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e004      	b.n	8002702 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80026f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002702:	429a      	cmp	r2, r3
 8002704:	d106      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	2102      	movs	r1, #2
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff faa6 	bl	8001c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2103      	movs	r1, #3
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fa8a 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x398>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2103      	movs	r1, #3
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fa7f 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	e017      	b.n	8002770 <HAL_ADC_ConfigChannel+0x3c8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2103      	movs	r1, #3
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fa74 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800275a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800275c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x3e0>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	e011      	b.n	80027ac <HAL_ADC_ConfigChannel+0x404>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002798:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800279a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80027a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2103      	movs	r1, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fa51 	bl	8001c60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fb7a 	bl	8001ebc <LL_ADC_IsEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 8140 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	461a      	mov	r2, r3
 80027de:	f7ff fac5 	bl	8001d6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002a24 <HAL_ADC_ConfigChannel+0x67c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	f040 8131 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x46e>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0e9b      	lsrs	r3, r3, #26
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b09      	cmp	r3, #9
 800280c:	bf94      	ite	ls
 800280e:	2301      	movls	r3, #1
 8002810:	2300      	movhi	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	e019      	b.n	800284a <HAL_ADC_ConfigChannel+0x4a2>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002826:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e003      	b.n	800283a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2b09      	cmp	r3, #9
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284a:	2b00      	cmp	r3, #0
 800284c:	d079      	beq.n	8002942 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_ADC_ConfigChannel+0x4c2>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	3301      	adds	r3, #1
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002868:	e015      	b.n	8002896 <HAL_ADC_ConfigChannel+0x4ee>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800287a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800287c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3301      	adds	r3, #1
 8002890:	069b      	lsls	r3, r3, #26
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x50e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	e017      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x53e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e003      	b.n	80028da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80028d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	ea42 0103 	orr.w	r1, r2, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <HAL_ADC_ConfigChannel+0x564>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	051b      	lsls	r3, r3, #20
 800290a:	e018      	b.n	800293e <HAL_ADC_ConfigChannel+0x596>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002924:	2320      	movs	r3, #32
 8002926:	e003      	b.n	8002930 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800293e:	430b      	orrs	r3, r1
 8002940:	e081      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <HAL_ADC_ConfigChannel+0x5b6>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	3301      	adds	r3, #1
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800295c:	e015      	b.n	800298a <HAL_ADC_ConfigChannel+0x5e2>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800297a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	069b      	lsls	r3, r3, #26
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x602>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	3301      	adds	r3, #1
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	e017      	b.n	80029da <HAL_ADC_ConfigChannel+0x632>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	61bb      	str	r3, [r7, #24]
  return result;
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e003      	b.n	80029ce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	ea42 0103 	orr.w	r1, r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x65e>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	051b      	lsls	r3, r3, #20
 8002a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a04:	e01e      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x69c>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	60fb      	str	r3, [r7, #12]
  return result;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	e006      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x688>
 8002a22:	bf00      	nop
 8002a24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b1e      	subs	r3, #30
 8002a3e:	051b      	lsls	r3, r3, #20
 8002a40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7ff f962 	bl	8001d14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b44      	ldr	r3, [pc, #272]	@ (8002b68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d07a      	beq.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5c:	4843      	ldr	r0, [pc, #268]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a5e:	f7ff f8b7 	bl	8001bd0 <LL_ADC_GetCommonPathInternalCh>
 8002a62:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a41      	ldr	r2, [pc, #260]	@ (8002b70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d12c      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d126      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a3c      	ldr	r2, [pc, #240]	@ (8002b74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x6e8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d15d      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4834      	ldr	r0, [pc, #208]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a9c:	f7ff f885 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aa0:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <HAL_ADC_ConfigChannel+0x7d4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002aba:	e002      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f9      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac8:	e040      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2d      	ldr	r2, [pc, #180]	@ (8002b84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d118      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d112      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	@ (8002b74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0x74c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d12d      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afc:	4619      	mov	r1, r3
 8002afe:	481b      	ldr	r0, [pc, #108]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002b00:	f7ff f853 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b04:	e024      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d120      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11a      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d115      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480e      	ldr	r0, [pc, #56]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002b32:	f7ff f83a 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
 8002b36:	e00c      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b4a:	e002      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4c:	bf00      	nop
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	37d8      	adds	r7, #216	@ 0xd8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	80080000 	.word	0x80080000
 8002b6c:	50040300 	.word	0x50040300
 8002b70:	c7520000 	.word	0xc7520000
 8002b74:	50040000 	.word	0x50040000
 8002b78:	50040200 	.word	0x50040200
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	053e2d63 	.word	0x053e2d63
 8002b84:	cb840000 	.word	0xcb840000
 8002b88:	80000001 	.word	0x80000001

08002b8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff f98d 	bl	8001ebc <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d169      	bne.n	8002c7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b36      	ldr	r3, [pc, #216]	@ (8002c88 <ADC_Enable+0xfc>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00d      	beq.n	8002bd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0210 	orr.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e055      	b.n	8002c7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f948 	bl	8001e6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bdc:	482b      	ldr	r0, [pc, #172]	@ (8002c8c <ADC_Enable+0x100>)
 8002bde:	f7fe fff7 	bl	8001bd0 <LL_ADC_GetCommonPathInternalCh>
 8002be2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002be4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bec:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <ADC_Enable+0x104>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	4a28      	ldr	r2, [pc, #160]	@ (8002c94 <ADC_Enable+0x108>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c06:	e002      	b.n	8002c0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f9      	bne.n	8002c08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c14:	f7fe ff86 	bl	8001b24 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c1a:	e028      	b.n	8002c6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f94b 	bl	8001ebc <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f91b 	bl	8001e6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c36:	f7fe ff75 	bl	8001b24 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d914      	bls.n	8002c6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d00d      	beq.n	8002c6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e007      	b.n	8002c7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d1cf      	bne.n	8002c1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	8000003f 	.word	0x8000003f
 8002c8c:	50040300 	.word	0x50040300
 8002c90:	20000000 	.word	0x20000000
 8002c94:	053e2d63 	.word	0x053e2d63

08002c98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f91c 	bl	8001ee2 <LL_ADC_IsDisableOngoing>
 8002caa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f903 	bl	8001ebc <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d047      	beq.n	8002d4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d144      	bne.n	8002d4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030d 	and.w	r3, r3, #13
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10c      	bne.n	8002cea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f8dd 	bl	8001e94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce2:	f7fe ff1f 	bl	8001b24 <HAL_GetTick>
 8002ce6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce8:	e029      	b.n	8002d3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e023      	b.n	8002d4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d06:	f7fe ff0d 	bl	8001b24 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d914      	bls.n	8002d3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	f043 0210 	orr.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e007      	b.n	8002d4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1dc      	bne.n	8002d06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d14b      	bne.n	8002e08 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d021      	beq.n	8002dce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe ff81 	bl	8001c96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d032      	beq.n	8002e00 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d12b      	bne.n	8002e00 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d11f      	bne.n	8002e00 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54
 8002dcc:	e018      	b.n	8002e00 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d111      	bne.n	8002e00 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7fd fcb5 	bl	8000770 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e06:	e00e      	b.n	8002e26 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff fabd 	bl	8002394 <HAL_ADC_ErrorCallback>
}
 8002e1a:	e004      	b.n	8002e26 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7fd fcd7 	bl	80007f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff fa8f 	bl	8002394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <LL_ADC_IsEnabled>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_IsEnabled+0x18>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_IsEnabled+0x1a>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_StartCalibration>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002eb6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eea:	d101      	bne.n	8002ef0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_ADC_REG_IsConversionOngoing>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d101      	bne.n	8002f16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e04d      	b.n	8002fdc <HAL_ADCEx_Calibration_Start+0xb8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fea5 	bl	8002c98 <ADC_Disable>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d136      	bne.n	8002fc6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f60:	f023 0302 	bic.w	r3, r3, #2
 8002f64:	f043 0202 	orr.w	r2, r3, #2
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6839      	ldr	r1, [r7, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff96 	bl	8002ea4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f78:	e014      	b.n	8002fa4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002f86:	d30d      	bcc.n	8002fa4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	f023 0312 	bic.w	r3, r3, #18
 8002f90:	f043 0210 	orr.w	r2, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e01b      	b.n	8002fdc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff94 	bl	8002ed6 <LL_ADC_IsCalibrationOnGoing>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e2      	bne.n	8002f7a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	f023 0303 	bic.w	r3, r3, #3
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fc4:	e005      	b.n	8002fd2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	f043 0210 	orr.w	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b09f      	sub	sp, #124	@ 0x7c
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e093      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800300a:	2300      	movs	r3, #0
 800300c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800300e:	2300      	movs	r3, #0
 8003010:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a47      	ldr	r2, [pc, #284]	@ (8003134 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d102      	bne.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800301c:	4b46      	ldr	r3, [pc, #280]	@ (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	e001      	b.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e072      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff59 	bl	8002efe <LL_ADC_REG_IsConversionOngoing>
 800304c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff53 	bl	8002efe <LL_ADC_REG_IsConversionOngoing>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d154      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800305e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003060:	2b00      	cmp	r3, #0
 8003062:	d151      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003064:	4b35      	ldr	r3, [pc, #212]	@ (800313c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003066:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d02c      	beq.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003082:	035b      	lsls	r3, r3, #13
 8003084:	430b      	orrs	r3, r1
 8003086:	431a      	orrs	r2, r3
 8003088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800308a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800308c:	4829      	ldr	r0, [pc, #164]	@ (8003134 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800308e:	f7ff fef6 	bl	8002e7e <LL_ADC_IsEnabled>
 8003092:	4604      	mov	r4, r0
 8003094:	4828      	ldr	r0, [pc, #160]	@ (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003096:	f7ff fef2 	bl	8002e7e <LL_ADC_IsEnabled>
 800309a:	4603      	mov	r3, r0
 800309c:	431c      	orrs	r4, r3
 800309e:	4828      	ldr	r0, [pc, #160]	@ (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030a0:	f7ff feed 	bl	8002e7e <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4323      	orrs	r3, r4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d137      	bne.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030b4:	f023 030f 	bic.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	6811      	ldr	r1, [r2, #0]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	6892      	ldr	r2, [r2, #8]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030c8:	e028      	b.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d6:	4817      	ldr	r0, [pc, #92]	@ (8003134 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030d8:	f7ff fed1 	bl	8002e7e <LL_ADC_IsEnabled>
 80030dc:	4604      	mov	r4, r0
 80030de:	4816      	ldr	r0, [pc, #88]	@ (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030e0:	f7ff fecd 	bl	8002e7e <LL_ADC_IsEnabled>
 80030e4:	4603      	mov	r3, r0
 80030e6:	431c      	orrs	r4, r3
 80030e8:	4815      	ldr	r0, [pc, #84]	@ (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030ea:	f7ff fec8 	bl	8002e7e <LL_ADC_IsEnabled>
 80030ee:	4603      	mov	r3, r0
 80030f0:	4323      	orrs	r3, r4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d112      	bne.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030fe:	f023 030f 	bic.w	r3, r3, #15
 8003102:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003104:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003106:	e009      	b.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800311a:	e000      	b.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800311c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003126:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800312a:	4618      	mov	r0, r3
 800312c:	377c      	adds	r7, #124	@ 0x7c
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	bf00      	nop
 8003134:	50040000 	.word	0x50040000
 8003138:	50040100 	.word	0x50040100
 800313c:	50040300 	.word	0x50040300
 8003140:	50040200 	.word	0x50040200

08003144 <__NVIC_SetPriorityGrouping>:
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003154:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800316c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003176:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	60d3      	str	r3, [r2, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_GetPriorityGrouping>:
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003190:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 0307 	and.w	r3, r3, #7
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_EnableIRQ>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db0b      	blt.n	80031d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	4907      	ldr	r1, [pc, #28]	@ (80031e0 <__NVIC_EnableIRQ+0x38>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2001      	movs	r0, #1
 80031ca:	fa00 f202 	lsl.w	r2, r0, r2
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	@ (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	@ (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	@ 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	@ 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	@ (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f7ff ff8e 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff29 	bl	8003144 <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff3e 	bl	800318c <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff8e 	bl	8003238 <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5d 	bl	80031e4 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff31 	bl	80031a8 <__NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffa2 	bl	80032a0 <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0ac      	b.n	80034d4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f8b2 	bl	80034e8 <DFSDM_GetChannelFromInstance>
 8003384:	4603      	mov	r3, r0
 8003386:	4a55      	ldr	r2, [pc, #340]	@ (80034dc <HAL_DFSDM_ChannelInit+0x174>)
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e09f      	b.n	80034d4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7fd ffa3 	bl	80012e0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800339a:	4b51      	ldr	r3, [pc, #324]	@ (80034e0 <HAL_DFSDM_ChannelInit+0x178>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a4f      	ldr	r2, [pc, #316]	@ (80034e0 <HAL_DFSDM_ChannelInit+0x178>)
 80033a2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80033a4:	4b4e      	ldr	r3, [pc, #312]	@ (80034e0 <HAL_DFSDM_ChannelInit+0x178>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d125      	bne.n	80033f8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a4c      	ldr	r2, [pc, #304]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033b6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80033b8:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4948      	ldr	r1, [pc, #288]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033cc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80033d0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	791b      	ldrb	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d108      	bne.n	80033ec <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80033da:	4b42      	ldr	r3, [pc, #264]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	493f      	ldr	r1, [pc, #252]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80033ec:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a3c      	ldr	r2, [pc, #240]	@ (80034e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033f6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003406:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003416:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800341c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 020f 	bic.w	r2, r2, #15
 8003434:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800345c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f002 0207 	and.w	r2, r2, #7
 8003488:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034b4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f810 	bl	80034e8 <DFSDM_GetChannelFromInstance>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4904      	ldr	r1, [pc, #16]	@ (80034dc <HAL_DFSDM_ChannelInit+0x174>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000d18 	.word	0x20000d18
 80034e0:	20000d14 	.word	0x20000d14
 80034e4:	40016000 	.word	0x40016000

080034e8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <DFSDM_GetChannelFromInstance+0x7c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d102      	bne.n	80034fe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e02b      	b.n	8003556 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a19      	ldr	r2, [pc, #100]	@ (8003568 <DFSDM_GetChannelFromInstance+0x80>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d102      	bne.n	800350c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e024      	b.n	8003556 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a17      	ldr	r2, [pc, #92]	@ (800356c <DFSDM_GetChannelFromInstance+0x84>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d102      	bne.n	800351a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003514:	2302      	movs	r3, #2
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e01d      	b.n	8003556 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a14      	ldr	r2, [pc, #80]	@ (8003570 <DFSDM_GetChannelFromInstance+0x88>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d102      	bne.n	8003528 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003522:	2304      	movs	r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e016      	b.n	8003556 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a12      	ldr	r2, [pc, #72]	@ (8003574 <DFSDM_GetChannelFromInstance+0x8c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d102      	bne.n	8003536 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003530:	2305      	movs	r3, #5
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e00f      	b.n	8003556 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a0f      	ldr	r2, [pc, #60]	@ (8003578 <DFSDM_GetChannelFromInstance+0x90>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d102      	bne.n	8003544 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800353e:	2306      	movs	r3, #6
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e008      	b.n	8003556 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0d      	ldr	r2, [pc, #52]	@ (800357c <DFSDM_GetChannelFromInstance+0x94>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d102      	bne.n	8003552 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800354c:	2307      	movs	r3, #7
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e001      	b.n	8003556 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003552:	2303      	movs	r3, #3
 8003554:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40016000 	.word	0x40016000
 8003568:	40016020 	.word	0x40016020
 800356c:	40016040 	.word	0x40016040
 8003570:	40016080 	.word	0x40016080
 8003574:	400160a0 	.word	0x400160a0
 8003578:	400160c0 	.word	0x400160c0
 800357c:	400160e0 	.word	0x400160e0

08003580 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e098      	b.n	80036c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b4d      	ldr	r3, [pc, #308]	@ (80036d0 <HAL_DMA_Init+0x150>)
 800359a:	429a      	cmp	r2, r3
 800359c:	d80f      	bhi.n	80035be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b4b      	ldr	r3, [pc, #300]	@ (80036d4 <HAL_DMA_Init+0x154>)
 80035a6:	4413      	add	r3, r2
 80035a8:	4a4b      	ldr	r2, [pc, #300]	@ (80036d8 <HAL_DMA_Init+0x158>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	009a      	lsls	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a48      	ldr	r2, [pc, #288]	@ (80036dc <HAL_DMA_Init+0x15c>)
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80035bc:	e00e      	b.n	80035dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b46      	ldr	r3, [pc, #280]	@ (80036e0 <HAL_DMA_Init+0x160>)
 80035c6:	4413      	add	r3, r2
 80035c8:	4a43      	ldr	r2, [pc, #268]	@ (80036d8 <HAL_DMA_Init+0x158>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	009a      	lsls	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a42      	ldr	r2, [pc, #264]	@ (80036e4 <HAL_DMA_Init+0x164>)
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003636:	d039      	beq.n	80036ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	4a27      	ldr	r2, [pc, #156]	@ (80036dc <HAL_DMA_Init+0x15c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d11a      	bne.n	8003678 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003642:	4b29      	ldr	r3, [pc, #164]	@ (80036e8 <HAL_DMA_Init+0x168>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f003 031c 	and.w	r3, r3, #28
 800364e:	210f      	movs	r1, #15
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	4924      	ldr	r1, [pc, #144]	@ (80036e8 <HAL_DMA_Init+0x168>)
 8003658:	4013      	ands	r3, r2
 800365a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800365c:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <HAL_DMA_Init+0x168>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003668:	f003 031c 	and.w	r3, r3, #28
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	491d      	ldr	r1, [pc, #116]	@ (80036e8 <HAL_DMA_Init+0x168>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
 8003676:	e019      	b.n	80036ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003678:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <HAL_DMA_Init+0x16c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003680:	f003 031c 	and.w	r3, r3, #28
 8003684:	210f      	movs	r1, #15
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	4917      	ldr	r1, [pc, #92]	@ (80036ec <HAL_DMA_Init+0x16c>)
 800368e:	4013      	ands	r3, r2
 8003690:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_DMA_Init+0x16c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f003 031c 	and.w	r3, r3, #28
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	4911      	ldr	r1, [pc, #68]	@ (80036ec <HAL_DMA_Init+0x16c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40020407 	.word	0x40020407
 80036d4:	bffdfff8 	.word	0xbffdfff8
 80036d8:	cccccccd 	.word	0xcccccccd
 80036dc:	40020000 	.word	0x40020000
 80036e0:	bffdfbf8 	.word	0xbffdfbf8
 80036e4:	40020400 	.word	0x40020400
 80036e8:	400200a8 	.word	0x400200a8
 80036ec:	400204a8 	.word	0x400204a8

080036f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Start_IT+0x20>
 800370c:	2302      	movs	r3, #2
 800370e:	e04b      	b.n	80037a8 <HAL_DMA_Start_IT+0xb8>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d13a      	bne.n	800379a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f8e0 	bl	800390e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 020e 	orr.w	r2, r2, #14
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e00f      	b.n	8003788 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0204 	bic.w	r2, r2, #4
 8003776:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 020a 	orr.w	r2, r2, #10
 8003786:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e005      	b.n	80037a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037cc:	f003 031c 	and.w	r3, r3, #28
 80037d0:	2204      	movs	r2, #4
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d026      	beq.n	800382a <HAL_DMA_IRQHandler+0x7a>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d021      	beq.n	800382a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003808:	f003 021c 	and.w	r2, r3, #28
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	2104      	movs	r1, #4
 8003812:	fa01 f202 	lsl.w	r2, r1, r2
 8003816:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	2b00      	cmp	r3, #0
 800381e:	d071      	beq.n	8003904 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003828:	e06c      	b.n	8003904 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	f003 031c 	and.w	r3, r3, #28
 8003832:	2202      	movs	r2, #2
 8003834:	409a      	lsls	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02e      	beq.n	800389c <HAL_DMA_IRQHandler+0xec>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d029      	beq.n	800389c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 020a 	bic.w	r2, r2, #10
 8003864:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	f003 021c 	and.w	r2, r3, #28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2102      	movs	r1, #2
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d038      	beq.n	8003904 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800389a:	e033      	b.n	8003904 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a0:	f003 031c 	and.w	r3, r3, #28
 80038a4:	2208      	movs	r2, #8
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d02a      	beq.n	8003906 <HAL_DMA_IRQHandler+0x156>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d025      	beq.n	8003906 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 020e 	bic.w	r2, r2, #14
 80038c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	f003 021c 	and.w	r2, r3, #28
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	2101      	movs	r1, #1
 80038d8:	fa01 f202 	lsl.w	r2, r1, r2
 80038dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003904:	bf00      	nop
 8003906:	bf00      	nop
}
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003920:	f003 021c 	and.w	r2, r3, #28
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b10      	cmp	r3, #16
 800393e:	d108      	bne.n	8003952 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003950:	e007      	b.n	8003962 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	60da      	str	r2, [r3, #12]
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397e:	e17f      	b.n	8003c80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	2101      	movs	r1, #1
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8171 	beq.w	8003c7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d005      	beq.n	80039b0 <HAL_GPIO_Init+0x40>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d130      	bne.n	8003a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	2203      	movs	r2, #3
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039e6:	2201      	movs	r2, #1
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	f003 0201 	and.w	r2, r3, #1
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d118      	bne.n	8003a50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a24:	2201      	movs	r2, #1
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	08db      	lsrs	r3, r3, #3
 8003a3a:	f003 0201 	and.w	r2, r3, #1
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d017      	beq.n	8003a8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d123      	bne.n	8003ae0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	08da      	lsrs	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3208      	adds	r2, #8
 8003aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	220f      	movs	r2, #15
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	08da      	lsrs	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3208      	adds	r2, #8
 8003ada:	6939      	ldr	r1, [r7, #16]
 8003adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0203 	and.w	r2, r3, #3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80ac 	beq.w	8003c7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b22:	4b5f      	ldr	r3, [pc, #380]	@ (8003ca0 <HAL_GPIO_Init+0x330>)
 8003b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b26:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca0 <HAL_GPIO_Init+0x330>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca0 <HAL_GPIO_Init+0x330>)
 8003b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b3a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ca4 <HAL_GPIO_Init+0x334>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b64:	d025      	beq.n	8003bb2 <HAL_GPIO_Init+0x242>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4f      	ldr	r2, [pc, #316]	@ (8003ca8 <HAL_GPIO_Init+0x338>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <HAL_GPIO_Init+0x23e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4e      	ldr	r2, [pc, #312]	@ (8003cac <HAL_GPIO_Init+0x33c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d019      	beq.n	8003baa <HAL_GPIO_Init+0x23a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4d      	ldr	r2, [pc, #308]	@ (8003cb0 <HAL_GPIO_Init+0x340>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_GPIO_Init+0x236>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4c      	ldr	r2, [pc, #304]	@ (8003cb4 <HAL_GPIO_Init+0x344>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00d      	beq.n	8003ba2 <HAL_GPIO_Init+0x232>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	@ (8003cb8 <HAL_GPIO_Init+0x348>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <HAL_GPIO_Init+0x22e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4a      	ldr	r2, [pc, #296]	@ (8003cbc <HAL_GPIO_Init+0x34c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_GPIO_Init+0x22a>
 8003b96:	2306      	movs	r3, #6
 8003b98:	e00c      	b.n	8003bb4 <HAL_GPIO_Init+0x244>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00a      	b.n	8003bb4 <HAL_GPIO_Init+0x244>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e008      	b.n	8003bb4 <HAL_GPIO_Init+0x244>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x244>
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e004      	b.n	8003bb4 <HAL_GPIO_Init+0x244>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_Init+0x244>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x244>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	f002 0203 	and.w	r2, r2, #3
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bc4:	4937      	ldr	r1, [pc, #220]	@ (8003ca4 <HAL_GPIO_Init+0x334>)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc0 <HAL_GPIO_Init+0x350>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bf6:	4a32      	ldr	r2, [pc, #200]	@ (8003cc0 <HAL_GPIO_Init+0x350>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bfc:	4b30      	ldr	r3, [pc, #192]	@ (8003cc0 <HAL_GPIO_Init+0x350>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c20:	4a27      	ldr	r2, [pc, #156]	@ (8003cc0 <HAL_GPIO_Init+0x350>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c26:	4b26      	ldr	r3, [pc, #152]	@ (8003cc0 <HAL_GPIO_Init+0x350>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc0 <HAL_GPIO_Init+0x350>)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c50:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <HAL_GPIO_Init+0x350>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c74:	4a12      	ldr	r2, [pc, #72]	@ (8003cc0 <HAL_GPIO_Init+0x350>)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f47f ae78 	bne.w	8003980 <HAL_GPIO_Init+0x10>
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	48000400 	.word	0x48000400
 8003cac:	48000800 	.word	0x48000800
 8003cb0:	48000c00 	.word	0x48000c00
 8003cb4:	48001000 	.word	0x48001000
 8003cb8:	48001400 	.word	0x48001400
 8003cbc:	48001800 	.word	0x48001800
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd4:	787b      	ldrb	r3, [r7, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ce0:	e002      	b.n	8003ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cfe:	4b08      	ldr	r3, [pc, #32]	@ (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d0a:	4a05      	ldr	r2, [pc, #20]	@ (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f806 	bl	8003d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40010400 	.word	0x40010400

08003d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e08d      	b.n	8003e68 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fb21 	bl	80013a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2224      	movs	r2, #36	@ 0x24
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	e006      	b.n	8003dc2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003dc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d108      	bne.n	8003ddc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	e007      	b.n	8003dec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dfe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69d9      	ldr	r1, [r3, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d138      	bne.n	8003ef8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e032      	b.n	8003efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2224      	movs	r2, #36	@ 0x24
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d139      	bne.n	8003f90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e033      	b.n	8003f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2224      	movs	r2, #36	@ 0x24
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af02      	add	r7, sp, #8
 8003fa4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e101      	b.n	80041b4 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7fd fb79 	bl	80016bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f002 fef1 	bl	8006dc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7c1a      	ldrb	r2, [r3, #16]
 8003fea:	f88d 2000 	strb.w	r2, [sp]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff2:	f002 feba 	bl	8006d6a <USB_CoreInit>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0d5      	b.n	80041b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f002 fee9 	bl	8006de6 <USB_SetCurrentMode>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0c6      	b.n	80041b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e04a      	b.n	80040c2 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800402c:	7bfa      	ldrb	r2, [r7, #15]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	3315      	adds	r3, #21
 800403c:	2201      	movs	r2, #1
 800403e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	3314      	adds	r3, #20
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	b298      	uxth	r0, r3
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	332e      	adds	r3, #46	@ 0x2e
 8004068:	4602      	mov	r2, r0
 800406a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	3318      	adds	r3, #24
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	331c      	adds	r3, #28
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	3320      	adds	r3, #32
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3324      	adds	r3, #36	@ 0x24
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	3301      	adds	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	791b      	ldrb	r3, [r3, #4]
 80040c6:	7bfa      	ldrb	r2, [r7, #15]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3af      	bcc.n	800402c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e044      	b.n	800415c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	3301      	adds	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	791b      	ldrb	r3, [r3, #4]
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	429a      	cmp	r2, r3
 8004164:	d3b5      	bcc.n	80040d2 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7c1a      	ldrb	r2, [r3, #16]
 800416e:	f88d 2000 	strb.w	r2, [sp]
 8004172:	3304      	adds	r3, #4
 8004174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004176:	f002 fe83 	bl	8006e80 <USB_DevInit>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e013      	b.n	80041b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	7b1b      	ldrb	r3, [r3, #12]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d102      	bne.n	80041a8 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f80a 	bl	80041bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 f828 	bl	8007202 <USB_DevDisconnect>

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	f043 0303 	orr.w	r3, r3, #3
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a04      	ldr	r2, [pc, #16]	@ (8004220 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40007000 	.word	0x40007000

08004224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004228:	4b04      	ldr	r3, [pc, #16]	@ (800423c <HAL_PWREx_GetVoltageRange+0x18>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40007000 	.word	0x40007000

08004240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800424e:	d130      	bne.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004250:	4b23      	ldr	r3, [pc, #140]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800425c:	d038      	beq.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800425e:	4b20      	ldr	r3, [pc, #128]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004266:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004268:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800426e:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2232      	movs	r2, #50	@ 0x32
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0c9b      	lsrs	r3, r3, #18
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004284:	e002      	b.n	800428c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3b01      	subs	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004298:	d102      	bne.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f2      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a0:	4b0f      	ldr	r3, [pc, #60]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ac:	d110      	bne.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b2:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042be:	d007      	beq.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042c0:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042c8:	4a05      	ldr	r2, [pc, #20]	@ (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40007000 	.word	0x40007000
 80042e4:	20000000 	.word	0x20000000
 80042e8:	431bde83 	.word	0x431bde83

080042ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_PWREx_EnableVddUSB+0x1c>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a04      	ldr	r2, [pc, #16]	@ (8004308 <HAL_PWREx_EnableVddUSB+0x1c>)
 80042f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042fa:	6053      	str	r3, [r2, #4]
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40007000 	.word	0x40007000

0800430c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004314:	f7fd fc06 	bl	8001b24 <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e063      	b.n	80043ec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fd f893 	bl	8001464 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800433e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f858 	bl	80043f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	021a      	lsls	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	2120      	movs	r1, #32
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f850 	bl	8004414 <QSPI_WaitFlagStateUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d131      	bne.n	80043e2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004388:	f023 0310 	bic.w	r3, r3, #16
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6852      	ldr	r2, [r2, #4]
 8004390:	0611      	lsls	r1, r2, #24
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68d2      	ldr	r2, [r2, #12]
 8004396:	4311      	orrs	r1, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	430b      	orrs	r3, r1
 800439e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4b13      	ldr	r3, [pc, #76]	@ (80043f4 <HAL_QSPI_Init+0xe8>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6912      	ldr	r2, [r2, #16]
 80043ae:	0411      	lsls	r1, r2, #16
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6952      	ldr	r2, [r2, #20]
 80043b4:	4311      	orrs	r1, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6992      	ldr	r2, [r2, #24]
 80043ba:	4311      	orrs	r1, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80043ea:	7afb      	ldrb	r3, [r7, #11]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	ffe0f8fe 	.word	0xffe0f8fe

080043f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004424:	e01a      	b.n	800445c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d016      	beq.n	800445c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fd fb79 	bl	8001b24 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2204      	movs	r2, #4
 8004448:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e00e      	b.n	800447a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf14      	ite	ne
 800446a:	2301      	movne	r3, #1
 800446c:	2300      	moveq	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d1d6      	bne.n	8004426 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e3ca      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004496:	4b97      	ldr	r3, [pc, #604]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a0:	4b94      	ldr	r3, [pc, #592]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80e4 	beq.w	8004680 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_RCC_OscConfig+0x4a>
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b0c      	cmp	r3, #12
 80044c2:	f040 808b 	bne.w	80045dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 8087 	bne.w	80045dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ce:	4b89      	ldr	r3, [pc, #548]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e3a2      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	4b82      	ldr	r3, [pc, #520]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <HAL_RCC_OscConfig+0x7c>
 80044f6:	4b7f      	ldr	r3, [pc, #508]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044fe:	e005      	b.n	800450c <HAL_RCC_OscConfig+0x88>
 8004500:	4b7c      	ldr	r3, [pc, #496]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800450c:	4293      	cmp	r3, r2
 800450e:	d223      	bcs.n	8004558 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fd55 	bl	8004fc4 <RCC_SetFlashLatencyFromMSIRange>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e383      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004524:	4b73      	ldr	r3, [pc, #460]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a72      	ldr	r2, [pc, #456]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 800452a:	f043 0308 	orr.w	r3, r3, #8
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b70      	ldr	r3, [pc, #448]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	496d      	ldr	r1, [pc, #436]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004542:	4b6c      	ldr	r3, [pc, #432]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	4968      	ldr	r1, [pc, #416]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
 8004556:	e025      	b.n	80045a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004558:	4b66      	ldr	r3, [pc, #408]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a65      	ldr	r2, [pc, #404]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 800455e:	f043 0308 	orr.w	r3, r3, #8
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b63      	ldr	r3, [pc, #396]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4960      	ldr	r1, [pc, #384]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004576:	4b5f      	ldr	r3, [pc, #380]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	495b      	ldr	r1, [pc, #364]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004586:	4313      	orrs	r3, r2
 8004588:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fd15 	bl	8004fc4 <RCC_SetFlashLatencyFromMSIRange>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e343      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045a4:	f000 fc4a 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b52      	ldr	r3, [pc, #328]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	4950      	ldr	r1, [pc, #320]	@ (80046f8 <HAL_RCC_OscConfig+0x274>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	4a4e      	ldr	r2, [pc, #312]	@ (80046fc <HAL_RCC_OscConfig+0x278>)
 80045c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004700 <HAL_RCC_OscConfig+0x27c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fd fa5b 	bl	8001a84 <HAL_InitTick>
 80045ce:	4603      	mov	r3, r0
 80045d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d052      	beq.n	800467e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	e327      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d032      	beq.n	800464a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045e4:	4b43      	ldr	r3, [pc, #268]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a42      	ldr	r2, [pc, #264]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045f0:	f7fd fa98 	bl	8001b24 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045f8:	f7fd fa94 	bl	8001b24 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e310      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800460a:	4b3a      	ldr	r3, [pc, #232]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004616:	4b37      	ldr	r3, [pc, #220]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a36      	ldr	r2, [pc, #216]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 800461c:	f043 0308 	orr.w	r3, r3, #8
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b34      	ldr	r3, [pc, #208]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4931      	ldr	r1, [pc, #196]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004634:	4b2f      	ldr	r3, [pc, #188]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	492c      	ldr	r1, [pc, #176]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
 8004648:	e01a      	b.n	8004680 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800464a:	4b2a      	ldr	r3, [pc, #168]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a29      	ldr	r2, [pc, #164]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004656:	f7fd fa65 	bl	8001b24 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800465e:	f7fd fa61 	bl	8001b24 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e2dd      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004670:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x1da>
 800467c:	e000      	b.n	8004680 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800467e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d074      	beq.n	8004776 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b08      	cmp	r3, #8
 8004690:	d005      	beq.n	800469e <HAL_RCC_OscConfig+0x21a>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d10e      	bne.n	80046b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d10b      	bne.n	80046b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469e:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d064      	beq.n	8004774 <HAL_RCC_OscConfig+0x2f0>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d160      	bne.n	8004774 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e2ba      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x24a>
 80046c0:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a0b      	ldr	r2, [pc, #44]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	e026      	b.n	800471c <HAL_RCC_OscConfig+0x298>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046d6:	d115      	bne.n	8004704 <HAL_RCC_OscConfig+0x280>
 80046d8:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a05      	ldr	r2, [pc, #20]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b03      	ldr	r3, [pc, #12]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a02      	ldr	r2, [pc, #8]	@ (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e014      	b.n	800471c <HAL_RCC_OscConfig+0x298>
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	0800a8bc 	.word	0x0800a8bc
 80046fc:	20000000 	.word	0x20000000
 8004700:	20000004 	.word	0x20000004
 8004704:	4ba0      	ldr	r3, [pc, #640]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a9f      	ldr	r2, [pc, #636]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b9d      	ldr	r3, [pc, #628]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a9c      	ldr	r2, [pc, #624]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd f9fe 	bl	8001b24 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd f9fa 	bl	8001b24 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e276      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473e:	4b92      	ldr	r3, [pc, #584]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x2a8>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd f9ea 	bl	8001b24 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd f9e6 	bl	8001b24 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e262      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004766:	4b88      	ldr	r3, [pc, #544]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x2d0>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d060      	beq.n	8004844 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d005      	beq.n	8004794 <HAL_RCC_OscConfig+0x310>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d119      	bne.n	80047c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d116      	bne.n	80047c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004794:	4b7c      	ldr	r3, [pc, #496]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_OscConfig+0x328>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e23f      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	4b76      	ldr	r3, [pc, #472]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	4973      	ldr	r1, [pc, #460]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c0:	e040      	b.n	8004844 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d023      	beq.n	8004812 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fd f9a5 	bl	8001b24 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047de:	f7fd f9a1 	bl	8001b24 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e21d      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f0:	4b65      	ldr	r3, [pc, #404]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b62      	ldr	r3, [pc, #392]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	495f      	ldr	r1, [pc, #380]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
 8004810:	e018      	b.n	8004844 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004812:	4b5d      	ldr	r3, [pc, #372]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a5c      	ldr	r2, [pc, #368]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800481c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481e:	f7fd f981 	bl	8001b24 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004826:	f7fd f97d 	bl	8001b24 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e1f9      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004838:	4b53      	ldr	r3, [pc, #332]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d03c      	beq.n	80048ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01c      	beq.n	8004892 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004858:	4b4b      	ldr	r3, [pc, #300]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 800485a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800485e:	4a4a      	ldr	r2, [pc, #296]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fd f95c 	bl	8001b24 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004870:	f7fd f958 	bl	8001b24 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1d4      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004882:	4b41      	ldr	r3, [pc, #260]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ef      	beq.n	8004870 <HAL_RCC_OscConfig+0x3ec>
 8004890:	e01b      	b.n	80048ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004892:	4b3d      	ldr	r3, [pc, #244]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004898:	4a3b      	ldr	r2, [pc, #236]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fd f93f 	bl	8001b24 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048aa:	f7fd f93b 	bl	8001b24 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e1b7      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048bc:	4b32      	ldr	r3, [pc, #200]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80048be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1ef      	bne.n	80048aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80a6 	beq.w	8004a24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d8:	2300      	movs	r3, #0
 80048da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e8:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ec:	4a26      	ldr	r2, [pc, #152]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048f4:	4b24      	ldr	r3, [pc, #144]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004900:	2301      	movs	r3, #1
 8004902:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004904:	4b21      	ldr	r3, [pc, #132]	@ (800498c <HAL_RCC_OscConfig+0x508>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d118      	bne.n	8004942 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004910:	4b1e      	ldr	r3, [pc, #120]	@ (800498c <HAL_RCC_OscConfig+0x508>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <HAL_RCC_OscConfig+0x508>)
 8004916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491c:	f7fd f902 	bl	8001b24 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004924:	f7fd f8fe 	bl	8001b24 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e17a      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004936:	4b15      	ldr	r3, [pc, #84]	@ (800498c <HAL_RCC_OscConfig+0x508>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d108      	bne.n	800495c <HAL_RCC_OscConfig+0x4d8>
 800494a:	4b0f      	ldr	r3, [pc, #60]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004950:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800495a:	e029      	b.n	80049b0 <HAL_RCC_OscConfig+0x52c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b05      	cmp	r3, #5
 8004962:	d115      	bne.n	8004990 <HAL_RCC_OscConfig+0x50c>
 8004964:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	4a07      	ldr	r2, [pc, #28]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 800496c:	f043 0304 	orr.w	r3, r3, #4
 8004970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004974:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	4a03      	ldr	r2, [pc, #12]	@ (8004988 <HAL_RCC_OscConfig+0x504>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004984:	e014      	b.n	80049b0 <HAL_RCC_OscConfig+0x52c>
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000
 800498c:	40007000 	.word	0x40007000
 8004990:	4b9c      	ldr	r3, [pc, #624]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004996:	4a9b      	ldr	r2, [pc, #620]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049a0:	4b98      	ldr	r3, [pc, #608]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	4a97      	ldr	r2, [pc, #604]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d016      	beq.n	80049e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd f8b4 	bl	8001b24 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fd f8b0 	bl	8001b24 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e12a      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d6:	4b8b      	ldr	r3, [pc, #556]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ed      	beq.n	80049c0 <HAL_RCC_OscConfig+0x53c>
 80049e4:	e015      	b.n	8004a12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e6:	f7fd f89d 	bl	8001b24 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fd f899 	bl	8001b24 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e113      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a04:	4b7f      	ldr	r3, [pc, #508]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1ed      	bne.n	80049ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a12:	7ffb      	ldrb	r3, [r7, #31]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d105      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a18:	4b7a      	ldr	r3, [pc, #488]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1c:	4a79      	ldr	r2, [pc, #484]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a22:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80fe 	beq.w	8004c2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	f040 80d0 	bne.w	8004bd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a38:	4b72      	ldr	r3, [pc, #456]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0203 	and.w	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d130      	bne.n	8004aae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	3b01      	subs	r3, #1
 8004a58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d127      	bne.n	8004aae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d11f      	bne.n	8004aae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a78:	2a07      	cmp	r2, #7
 8004a7a:	bf14      	ite	ne
 8004a7c:	2201      	movne	r2, #1
 8004a7e:	2200      	moveq	r2, #0
 8004a80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d113      	bne.n	8004aae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	3b01      	subs	r3, #1
 8004a94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d109      	bne.n	8004aae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d06e      	beq.n	8004b8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d069      	beq.n	8004b88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ab4:	4b53      	ldr	r3, [pc, #332]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ac0:	4b50      	ldr	r3, [pc, #320]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0ad      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004adc:	f7fd f822 	bl	8001b24 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fd f81e 	bl	8001b24 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e09a      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af6:	4b43      	ldr	r3, [pc, #268]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b02:	4b40      	ldr	r3, [pc, #256]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	4b40      	ldr	r3, [pc, #256]	@ (8004c08 <HAL_RCC_OscConfig+0x784>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b12:	3a01      	subs	r2, #1
 8004b14:	0112      	lsls	r2, r2, #4
 8004b16:	4311      	orrs	r1, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b1c:	0212      	lsls	r2, r2, #8
 8004b1e:	4311      	orrs	r1, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b24:	0852      	lsrs	r2, r2, #1
 8004b26:	3a01      	subs	r2, #1
 8004b28:	0552      	lsls	r2, r2, #21
 8004b2a:	4311      	orrs	r1, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b30:	0852      	lsrs	r2, r2, #1
 8004b32:	3a01      	subs	r2, #1
 8004b34:	0652      	lsls	r2, r2, #25
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b3c:	0912      	lsrs	r2, r2, #4
 8004b3e:	0452      	lsls	r2, r2, #17
 8004b40:	430a      	orrs	r2, r1
 8004b42:	4930      	ldr	r1, [pc, #192]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b48:	4b2e      	ldr	r3, [pc, #184]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b54:	4b2b      	ldr	r3, [pc, #172]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a2a      	ldr	r2, [pc, #168]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b60:	f7fc ffe0 	bl	8001b24 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fc ffdc 	bl	8001b24 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e058      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7a:	4b22      	ldr	r3, [pc, #136]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b86:	e050      	b.n	8004c2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e04f      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d148      	bne.n	8004c2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b98:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba4:	4b17      	ldr	r3, [pc, #92]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a16      	ldr	r2, [pc, #88]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bb0:	f7fc ffb8 	bl	8001b24 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fc ffb4 	bl	8001b24 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e030      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bca:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x734>
 8004bd6:	e028      	b.n	8004c2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d023      	beq.n	8004c26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a08      	ldr	r2, [pc, #32]	@ (8004c04 <HAL_RCC_OscConfig+0x780>)
 8004be4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fc ff9b 	bl	8001b24 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf0:	e00c      	b.n	8004c0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf2:	f7fc ff97 	bl	8001b24 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d905      	bls.n	8004c0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e013      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
 8004c04:	40021000 	.word	0x40021000
 8004c08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <HAL_RCC_OscConfig+0x7b0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ec      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c18:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <HAL_RCC_OscConfig+0x7b0>)
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	4905      	ldr	r1, [pc, #20]	@ (8004c34 <HAL_RCC_OscConfig+0x7b0>)
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_RCC_OscConfig+0x7b4>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	60cb      	str	r3, [r1, #12]
 8004c24:	e001      	b.n	8004c2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	feeefffc 	.word	0xfeeefffc

08004c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0e7      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c50:	4b75      	ldr	r3, [pc, #468]	@ (8004e28 <HAL_RCC_ClockConfig+0x1ec>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d910      	bls.n	8004c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b72      	ldr	r3, [pc, #456]	@ (8004e28 <HAL_RCC_ClockConfig+0x1ec>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 0207 	bic.w	r2, r3, #7
 8004c66:	4970      	ldr	r1, [pc, #448]	@ (8004e28 <HAL_RCC_ClockConfig+0x1ec>)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8004e28 <HAL_RCC_ClockConfig+0x1ec>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0cf      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	4b66      	ldr	r3, [pc, #408]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d908      	bls.n	8004cae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9c:	4b63      	ldr	r3, [pc, #396]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4960      	ldr	r1, [pc, #384]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d04c      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc2:	4b5a      	ldr	r3, [pc, #360]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d121      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0a6      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cda:	4b54      	ldr	r3, [pc, #336]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d115      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e09a      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d107      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e08e      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d02:	4b4a      	ldr	r3, [pc, #296]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e086      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d12:	4b46      	ldr	r3, [pc, #280]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f023 0203 	bic.w	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4943      	ldr	r1, [pc, #268]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d24:	f7fc fefe 	bl	8001b24 <HAL_GetTick>
 8004d28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2c:	f7fc fefa 	bl	8001b24 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e06e      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d42:	4b3a      	ldr	r3, [pc, #232]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 020c 	and.w	r2, r3, #12
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d1eb      	bne.n	8004d2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d010      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	4b31      	ldr	r3, [pc, #196]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d208      	bcs.n	8004d82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d70:	4b2e      	ldr	r3, [pc, #184]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	492b      	ldr	r1, [pc, #172]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d82:	4b29      	ldr	r3, [pc, #164]	@ (8004e28 <HAL_RCC_ClockConfig+0x1ec>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d210      	bcs.n	8004db2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d90:	4b25      	ldr	r3, [pc, #148]	@ (8004e28 <HAL_RCC_ClockConfig+0x1ec>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 0207 	bic.w	r2, r3, #7
 8004d98:	4923      	ldr	r1, [pc, #140]	@ (8004e28 <HAL_RCC_ClockConfig+0x1ec>)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da0:	4b21      	ldr	r3, [pc, #132]	@ (8004e28 <HAL_RCC_ClockConfig+0x1ec>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d001      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e036      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	4918      	ldr	r1, [pc, #96]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d009      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ddc:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4910      	ldr	r1, [pc, #64]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004df0:	f000 f824 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f0>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	490b      	ldr	r1, [pc, #44]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f4>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0c:	4a09      	ldr	r2, [pc, #36]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f8>)
 8004e0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <HAL_RCC_ClockConfig+0x1fc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fc fe35 	bl	8001a84 <HAL_InitTick>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40022000 	.word	0x40022000
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	0800a8bc 	.word	0x0800a8bc
 8004e34:	20000000 	.word	0x20000000
 8004e38:	20000004 	.word	0x20000004

08004e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b089      	sub	sp, #36	@ 0x24
 8004e40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e54:	4b3b      	ldr	r3, [pc, #236]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x34>
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d121      	bne.n	8004eae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d11e      	bne.n	8004eae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e70:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e7c:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e005      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e98:	4a2b      	ldr	r2, [pc, #172]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10d      	bne.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d102      	bne.n	8004eba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eb4:	4b25      	ldr	r3, [pc, #148]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e004      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ec0:	4b23      	ldr	r3, [pc, #140]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ec2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b0c      	cmp	r3, #12
 8004ec8:	d134      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eca:	4b1e      	ldr	r3, [pc, #120]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ee0:	e005      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ee4:	617b      	str	r3, [r7, #20]
      break;
 8004ee6:	e005      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ee8:	4b19      	ldr	r3, [pc, #100]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8004eea:	617b      	str	r3, [r7, #20]
      break;
 8004eec:	e002      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	617b      	str	r3, [r7, #20]
      break;
 8004ef2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ef4:	4b13      	ldr	r3, [pc, #76]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	3301      	adds	r3, #1
 8004f00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f02:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	fb03 f202 	mul.w	r2, r3, r2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	0e5b      	lsrs	r3, r3, #25
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	3301      	adds	r3, #1
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f34:	69bb      	ldr	r3, [r7, #24]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3724      	adds	r7, #36	@ 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000
 8004f48:	0800a8d4 	.word	0x0800a8d4
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	007a1200 	.word	0x007a1200

08004f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000000 	.word	0x20000000

08004f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f70:	f7ff fff0 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b06      	ldr	r3, [pc, #24]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4904      	ldr	r1, [pc, #16]	@ (8004f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40021000 	.word	0x40021000
 8004f94:	0800a8cc 	.word	0x0800a8cc

08004f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f9c:	f7ff ffda 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	0adb      	lsrs	r3, r3, #11
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	4904      	ldr	r1, [pc, #16]	@ (8004fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	0800a8cc 	.word	0x0800a8cc

08004fc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800507c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fdc:	f7ff f922 	bl	8004224 <HAL_PWREx_GetVoltageRange>
 8004fe0:	6178      	str	r0, [r7, #20]
 8004fe2:	e014      	b.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b25      	ldr	r3, [pc, #148]	@ (800507c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe8:	4a24      	ldr	r2, [pc, #144]	@ (800507c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff0:	4b22      	ldr	r3, [pc, #136]	@ (800507c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ffc:	f7ff f912 	bl	8004224 <HAL_PWREx_GetVoltageRange>
 8005000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005002:	4b1e      	ldr	r3, [pc, #120]	@ (800507c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005006:	4a1d      	ldr	r2, [pc, #116]	@ (800507c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005014:	d10b      	bne.n	800502e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b80      	cmp	r3, #128	@ 0x80
 800501a:	d919      	bls.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005020:	d902      	bls.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005022:	2302      	movs	r3, #2
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	e013      	b.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005028:	2301      	movs	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	e010      	b.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b80      	cmp	r3, #128	@ 0x80
 8005032:	d902      	bls.n	800503a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005034:	2303      	movs	r3, #3
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	e00a      	b.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b80      	cmp	r3, #128	@ 0x80
 800503e:	d102      	bne.n	8005046 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005040:	2302      	movs	r3, #2
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	e004      	b.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b70      	cmp	r3, #112	@ 0x70
 800504a:	d101      	bne.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800504c:	2301      	movs	r3, #1
 800504e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f023 0207 	bic.w	r2, r3, #7
 8005058:	4909      	ldr	r1, [pc, #36]	@ (8005080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005060:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	429a      	cmp	r2, r3
 800506c:	d001      	beq.n	8005072 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	40022000 	.word	0x40022000

08005084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800508c:	2300      	movs	r3, #0
 800508e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005090:	2300      	movs	r3, #0
 8005092:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800509c:	2b00      	cmp	r3, #0
 800509e:	d041      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050a8:	d02a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050ae:	d824      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050b4:	d008      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050ba:	d81e      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c4:	d010      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050c6:	e018      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050c8:	4b86      	ldr	r3, [pc, #536]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a85      	ldr	r2, [pc, #532]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050d4:	e015      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 facb 	bl	8005678 <RCCEx_PLLSAI1_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050e6:	e00c      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3320      	adds	r3, #32
 80050ec:	2100      	movs	r1, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fbb6 	bl	8005860 <RCCEx_PLLSAI2_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050f8:	e003      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	74fb      	strb	r3, [r7, #19]
      break;
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005102:	7cfb      	ldrb	r3, [r7, #19]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005108:	4b76      	ldr	r3, [pc, #472]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005116:	4973      	ldr	r1, [pc, #460]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800511e:	e001      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d041      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005134:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005138:	d02a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800513a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800513e:	d824      	bhi.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005140:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005144:	d008      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005146:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800514a:	d81e      	bhi.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005154:	d010      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005156:	e018      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005158:	4b62      	ldr	r3, [pc, #392]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a61      	ldr	r2, [pc, #388]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005162:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005164:	e015      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3304      	adds	r3, #4
 800516a:	2100      	movs	r1, #0
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fa83 	bl	8005678 <RCCEx_PLLSAI1_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005176:	e00c      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3320      	adds	r3, #32
 800517c:	2100      	movs	r1, #0
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fb6e 	bl	8005860 <RCCEx_PLLSAI2_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005188:	e003      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	74fb      	strb	r3, [r7, #19]
      break;
 800518e:	e000      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005192:	7cfb      	ldrb	r3, [r7, #19]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005198:	4b52      	ldr	r3, [pc, #328]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051a6:	494f      	ldr	r1, [pc, #316]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051ae:	e001      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80a0 	beq.w	8005302 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c2:	2300      	movs	r3, #0
 80051c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051c6:	4b47      	ldr	r3, [pc, #284]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051dc:	4b41      	ldr	r3, [pc, #260]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	4a40      	ldr	r2, [pc, #256]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e8:	4b3e      	ldr	r3, [pc, #248]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f4:	2301      	movs	r3, #1
 80051f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f8:	4b3b      	ldr	r3, [pc, #236]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3a      	ldr	r2, [pc, #232]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005202:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005204:	f7fc fc8e 	bl	8001b24 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800520a:	e009      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520c:	f7fc fc8a 	bl	8001b24 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d902      	bls.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	74fb      	strb	r3, [r7, #19]
        break;
 800521e:	e005      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005220:	4b31      	ldr	r3, [pc, #196]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ef      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d15c      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005232:	4b2c      	ldr	r3, [pc, #176]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01f      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d019      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005250:	4b24      	ldr	r3, [pc, #144]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800525c:	4b21      	ldr	r3, [pc, #132]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005262:	4a20      	ldr	r2, [pc, #128]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800526c:	4b1d      	ldr	r3, [pc, #116]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005272:	4a1c      	ldr	r2, [pc, #112]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800527c:	4a19      	ldr	r2, [pc, #100]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d016      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528e:	f7fc fc49 	bl	8001b24 <HAL_GetTick>
 8005292:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005294:	e00b      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005296:	f7fc fc45 	bl	8001b24 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d902      	bls.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	74fb      	strb	r3, [r7, #19]
            break;
 80052ac:	e006      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ae:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0ec      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c2:	4b08      	ldr	r3, [pc, #32]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052d2:	4904      	ldr	r1, [pc, #16]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052da:	e009      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	74bb      	strb	r3, [r7, #18]
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f0:	7c7b      	ldrb	r3, [r7, #17]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d105      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f6:	4b9e      	ldr	r3, [pc, #632]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	4a9d      	ldr	r2, [pc, #628]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005300:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800530e:	4b98      	ldr	r3, [pc, #608]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005314:	f023 0203 	bic.w	r2, r3, #3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531c:	4994      	ldr	r1, [pc, #592]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005330:	4b8f      	ldr	r3, [pc, #572]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005336:	f023 020c 	bic.w	r2, r3, #12
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533e:	498c      	ldr	r1, [pc, #560]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005352:	4b87      	ldr	r3, [pc, #540]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005358:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005360:	4983      	ldr	r1, [pc, #524]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005374:	4b7e      	ldr	r3, [pc, #504]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005382:	497b      	ldr	r1, [pc, #492]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005396:	4b76      	ldr	r3, [pc, #472]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a4:	4972      	ldr	r1, [pc, #456]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053b8:	4b6d      	ldr	r3, [pc, #436]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c6:	496a      	ldr	r1, [pc, #424]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053da:	4b65      	ldr	r3, [pc, #404]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e8:	4961      	ldr	r1, [pc, #388]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540a:	4959      	ldr	r1, [pc, #356]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800541e:	4b54      	ldr	r3, [pc, #336]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005424:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542c:	4950      	ldr	r1, [pc, #320]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005440:	4b4b      	ldr	r3, [pc, #300]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005446:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544e:	4948      	ldr	r1, [pc, #288]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005462:	4b43      	ldr	r3, [pc, #268]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005468:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005470:	493f      	ldr	r1, [pc, #252]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d028      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005484:	4b3a      	ldr	r3, [pc, #232]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005492:	4937      	ldr	r1, [pc, #220]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800549e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054a2:	d106      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a4:	4b32      	ldr	r3, [pc, #200]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a31      	ldr	r2, [pc, #196]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ae:	60d3      	str	r3, [r2, #12]
 80054b0:	e011      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054ba:	d10c      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f8d8 	bl	8005678 <RCCEx_PLLSAI1_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054cc:	7cfb      	ldrb	r3, [r7, #19]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d028      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054e2:	4b23      	ldr	r3, [pc, #140]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f0:	491f      	ldr	r1, [pc, #124]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005500:	d106      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005502:	4b1b      	ldr	r3, [pc, #108]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	4a1a      	ldr	r2, [pc, #104]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800550c:	60d3      	str	r3, [r2, #12]
 800550e:	e011      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005518:	d10c      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	2101      	movs	r1, #1
 8005520:	4618      	mov	r0, r3
 8005522:	f000 f8a9 	bl	8005678 <RCCEx_PLLSAI1_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d02b      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554e:	4908      	ldr	r1, [pc, #32]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800555a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800555e:	d109      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005560:	4b03      	ldr	r3, [pc, #12]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4a02      	ldr	r2, [pc, #8]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800556a:	60d3      	str	r3, [r2, #12]
 800556c:	e014      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800556e:	bf00      	nop
 8005570:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800557c:	d10c      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	2101      	movs	r1, #1
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f877 	bl	8005678 <RCCEx_PLLSAI1_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02f      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055b2:	4928      	ldr	r1, [pc, #160]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055c2:	d10d      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	2102      	movs	r1, #2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f854 	bl	8005678 <RCCEx_PLLSAI1_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d014      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	74bb      	strb	r3, [r7, #18]
 80055de:	e011      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3320      	adds	r3, #32
 80055ee:	2102      	movs	r1, #2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f935 	bl	8005860 <RCCEx_PLLSAI2_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005610:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005616:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800561e:	490d      	ldr	r1, [pc, #52]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005632:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005638:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005642:	4904      	ldr	r1, [pc, #16]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800564a:	7cbb      	ldrb	r3, [r7, #18]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000

08005658 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a04      	ldr	r2, [pc, #16]	@ (8005674 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005662:	f043 0304 	orr.w	r3, r3, #4
 8005666:	6013      	str	r3, [r2, #0]
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000

08005678 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005686:	4b75      	ldr	r3, [pc, #468]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005692:	4b72      	ldr	r3, [pc, #456]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0203 	and.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d10d      	bne.n	80056be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
       ||
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056aa:	4b6c      	ldr	r3, [pc, #432]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
       ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d047      	beq.n	800574e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	e044      	b.n	800574e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d018      	beq.n	80056fe <RCCEx_PLLSAI1_Config+0x86>
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d825      	bhi.n	800571c <RCCEx_PLLSAI1_Config+0xa4>
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d002      	beq.n	80056da <RCCEx_PLLSAI1_Config+0x62>
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d009      	beq.n	80056ec <RCCEx_PLLSAI1_Config+0x74>
 80056d8:	e020      	b.n	800571c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056da:	4b60      	ldr	r3, [pc, #384]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d11d      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ea:	e01a      	b.n	8005722 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056ec:	4b5b      	ldr	r3, [pc, #364]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d116      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fc:	e013      	b.n	8005726 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056fe:	4b57      	ldr	r3, [pc, #348]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10f      	bne.n	800572a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800570a:	4b54      	ldr	r3, [pc, #336]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800571a:	e006      	b.n	800572a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
      break;
 8005720:	e004      	b.n	800572c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800572a:	bf00      	nop
    }

    if(status == HAL_OK)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10d      	bne.n	800574e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005732:	4b4a      	ldr	r3, [pc, #296]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	3b01      	subs	r3, #1
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	430b      	orrs	r3, r1
 8005748:	4944      	ldr	r1, [pc, #272]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d17d      	bne.n	8005850 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005754:	4b41      	ldr	r3, [pc, #260]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a40      	ldr	r2, [pc, #256]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 800575a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800575e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005760:	f7fc f9e0 	bl	8001b24 <HAL_GetTick>
 8005764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005766:	e009      	b.n	800577c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005768:	f7fc f9dc 	bl	8001b24 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d902      	bls.n	800577c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	73fb      	strb	r3, [r7, #15]
        break;
 800577a:	e005      	b.n	8005788 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800577c:	4b37      	ldr	r3, [pc, #220]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ef      	bne.n	8005768 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d160      	bne.n	8005850 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d111      	bne.n	80057b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005794:	4b31      	ldr	r3, [pc, #196]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800579c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	0211      	lsls	r1, r2, #8
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68d2      	ldr	r2, [r2, #12]
 80057aa:	0912      	lsrs	r2, r2, #4
 80057ac:	0452      	lsls	r2, r2, #17
 80057ae:	430a      	orrs	r2, r1
 80057b0:	492a      	ldr	r1, [pc, #168]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	610b      	str	r3, [r1, #16]
 80057b6:	e027      	b.n	8005808 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d112      	bne.n	80057e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057be:	4b27      	ldr	r3, [pc, #156]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80057c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6892      	ldr	r2, [r2, #8]
 80057ce:	0211      	lsls	r1, r2, #8
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6912      	ldr	r2, [r2, #16]
 80057d4:	0852      	lsrs	r2, r2, #1
 80057d6:	3a01      	subs	r2, #1
 80057d8:	0552      	lsls	r2, r2, #21
 80057da:	430a      	orrs	r2, r1
 80057dc:	491f      	ldr	r1, [pc, #124]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	610b      	str	r3, [r1, #16]
 80057e2:	e011      	b.n	8005808 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057e4:	4b1d      	ldr	r3, [pc, #116]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6892      	ldr	r2, [r2, #8]
 80057f4:	0211      	lsls	r1, r2, #8
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6952      	ldr	r2, [r2, #20]
 80057fa:	0852      	lsrs	r2, r2, #1
 80057fc:	3a01      	subs	r2, #1
 80057fe:	0652      	lsls	r2, r2, #25
 8005800:	430a      	orrs	r2, r1
 8005802:	4916      	ldr	r1, [pc, #88]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005804:	4313      	orrs	r3, r2
 8005806:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005808:	4b14      	ldr	r3, [pc, #80]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a13      	ldr	r2, [pc, #76]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 800580e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005812:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fc f986 	bl	8001b24 <HAL_GetTick>
 8005818:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800581a:	e009      	b.n	8005830 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800581c:	f7fc f982 	bl	8001b24 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d902      	bls.n	8005830 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	73fb      	strb	r3, [r7, #15]
          break;
 800582e:	e005      	b.n	800583c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005830:	4b0a      	ldr	r3, [pc, #40]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0ef      	beq.n	800581c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005842:	4b06      	ldr	r3, [pc, #24]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	4904      	ldr	r1, [pc, #16]	@ (800585c <RCCEx_PLLSAI1_Config+0x1e4>)
 800584c:	4313      	orrs	r3, r2
 800584e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40021000 	.word	0x40021000

08005860 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800586e:	4b6a      	ldr	r3, [pc, #424]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d018      	beq.n	80058ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800587a:	4b67      	ldr	r3, [pc, #412]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0203 	and.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d10d      	bne.n	80058a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
       ||
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005892:	4b61      	ldr	r3, [pc, #388]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
       ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d047      	beq.n	8005936 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
 80058aa:	e044      	b.n	8005936 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d018      	beq.n	80058e6 <RCCEx_PLLSAI2_Config+0x86>
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d825      	bhi.n	8005904 <RCCEx_PLLSAI2_Config+0xa4>
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d002      	beq.n	80058c2 <RCCEx_PLLSAI2_Config+0x62>
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d009      	beq.n	80058d4 <RCCEx_PLLSAI2_Config+0x74>
 80058c0:	e020      	b.n	8005904 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058c2:	4b55      	ldr	r3, [pc, #340]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d11d      	bne.n	800590a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d2:	e01a      	b.n	800590a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058d4:	4b50      	ldr	r3, [pc, #320]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d116      	bne.n	800590e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e4:	e013      	b.n	800590e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10f      	bne.n	8005912 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058f2:	4b49      	ldr	r3, [pc, #292]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005902:	e006      	b.n	8005912 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	73fb      	strb	r3, [r7, #15]
      break;
 8005908:	e004      	b.n	8005914 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800590a:	bf00      	nop
 800590c:	e002      	b.n	8005914 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005912:	bf00      	nop
    }

    if(status == HAL_OK)
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10d      	bne.n	8005936 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800591a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6819      	ldr	r1, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	3b01      	subs	r3, #1
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	430b      	orrs	r3, r1
 8005930:	4939      	ldr	r1, [pc, #228]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005932:	4313      	orrs	r3, r2
 8005934:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d167      	bne.n	8005a0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800593c:	4b36      	ldr	r3, [pc, #216]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a35      	ldr	r2, [pc, #212]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005948:	f7fc f8ec 	bl	8001b24 <HAL_GetTick>
 800594c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800594e:	e009      	b.n	8005964 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005950:	f7fc f8e8 	bl	8001b24 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d902      	bls.n	8005964 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	73fb      	strb	r3, [r7, #15]
        break;
 8005962:	e005      	b.n	8005970 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005964:	4b2c      	ldr	r3, [pc, #176]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1ef      	bne.n	8005950 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d14a      	bne.n	8005a0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d111      	bne.n	80059a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800597c:	4b26      	ldr	r3, [pc, #152]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6892      	ldr	r2, [r2, #8]
 800598c:	0211      	lsls	r1, r2, #8
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	68d2      	ldr	r2, [r2, #12]
 8005992:	0912      	lsrs	r2, r2, #4
 8005994:	0452      	lsls	r2, r2, #17
 8005996:	430a      	orrs	r2, r1
 8005998:	491f      	ldr	r1, [pc, #124]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800599a:	4313      	orrs	r3, r2
 800599c:	614b      	str	r3, [r1, #20]
 800599e:	e011      	b.n	80059c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6892      	ldr	r2, [r2, #8]
 80059b0:	0211      	lsls	r1, r2, #8
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6912      	ldr	r2, [r2, #16]
 80059b6:	0852      	lsrs	r2, r2, #1
 80059b8:	3a01      	subs	r2, #1
 80059ba:	0652      	lsls	r2, r2, #25
 80059bc:	430a      	orrs	r2, r1
 80059be:	4916      	ldr	r1, [pc, #88]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059c4:	4b14      	ldr	r3, [pc, #80]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a13      	ldr	r2, [pc, #76]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fc f8a8 	bl	8001b24 <HAL_GetTick>
 80059d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059d6:	e009      	b.n	80059ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059d8:	f7fc f8a4 	bl	8001b24 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d902      	bls.n	80059ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	73fb      	strb	r3, [r7, #15]
          break;
 80059ea:	e005      	b.n	80059f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ef      	beq.n	80059d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059fe:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	4904      	ldr	r1, [pc, #16]	@ (8005a18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000

08005a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e095      	b.n	8005b5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d108      	bne.n	8005a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a3e:	d009      	beq.n	8005a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	61da      	str	r2, [r3, #28]
 8005a46:	e005      	b.n	8005a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fb fd3c 	bl	80014ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a94:	d902      	bls.n	8005a9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e002      	b.n	8005aa2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005aa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005aaa:	d007      	beq.n	8005abc <HAL_SPI_Init+0xa0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ab4:	d002      	beq.n	8005abc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afe:	ea42 0103 	orr.w	r1, r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	0c1b      	lsrs	r3, r3, #16
 8005b18:	f003 0204 	and.w	r2, r3, #4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b38:	ea42 0103 	orr.w	r1, r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e049      	b.n	8005c08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fa fed1 	bl	8000930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f000 f96f 	bl	8005e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d001      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e04f      	b.n	8005cc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a23      	ldr	r2, [pc, #140]	@ (8005cd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x76>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c52:	d018      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x76>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x76>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1e      	ldr	r2, [pc, #120]	@ (8005cdc <HAL_TIM_Base_Start_IT+0xcc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x76>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x76>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x76>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a19      	ldr	r2, [pc, #100]	@ (8005ce8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d115      	bne.n	8005cb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	4b17      	ldr	r3, [pc, #92]	@ (8005cec <HAL_TIM_Base_Start_IT+0xdc>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b06      	cmp	r3, #6
 8005c96:	d015      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0xb4>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c9e:	d011      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb0:	e008      	b.n	8005cc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e000      	b.n	8005cc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40013400 	.word	0x40013400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	00010007 	.word	0x00010007

08005cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_TIM_ConfigClockSource+0x1c>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e0b6      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x18a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d48:	d03e      	beq.n	8005dc8 <HAL_TIM_ConfigClockSource+0xd8>
 8005d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d4e:	f200 8087 	bhi.w	8005e60 <HAL_TIM_ConfigClockSource+0x170>
 8005d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d56:	f000 8086 	beq.w	8005e66 <HAL_TIM_ConfigClockSource+0x176>
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5e:	d87f      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x170>
 8005d60:	2b70      	cmp	r3, #112	@ 0x70
 8005d62:	d01a      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0xaa>
 8005d64:	2b70      	cmp	r3, #112	@ 0x70
 8005d66:	d87b      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x170>
 8005d68:	2b60      	cmp	r3, #96	@ 0x60
 8005d6a:	d050      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x11e>
 8005d6c:	2b60      	cmp	r3, #96	@ 0x60
 8005d6e:	d877      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x170>
 8005d70:	2b50      	cmp	r3, #80	@ 0x50
 8005d72:	d03c      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0xfe>
 8005d74:	2b50      	cmp	r3, #80	@ 0x50
 8005d76:	d873      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x170>
 8005d78:	2b40      	cmp	r3, #64	@ 0x40
 8005d7a:	d058      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x13e>
 8005d7c:	2b40      	cmp	r3, #64	@ 0x40
 8005d7e:	d86f      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x170>
 8005d80:	2b30      	cmp	r3, #48	@ 0x30
 8005d82:	d064      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x15e>
 8005d84:	2b30      	cmp	r3, #48	@ 0x30
 8005d86:	d86b      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x170>
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d060      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x15e>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d867      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x170>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d05c      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x15e>
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d05a      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x15e>
 8005d98:	e062      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005daa:	f000 f98b 	bl	80060c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	609a      	str	r2, [r3, #8]
      break;
 8005dc6:	e04f      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dd8:	f000 f974 	bl	80060c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dea:	609a      	str	r2, [r3, #8]
      break;
 8005dec:	e03c      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f000 f8e8 	bl	8005fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2150      	movs	r1, #80	@ 0x50
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f941 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 8005e0c:	e02c      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f000 f907 	bl	800602e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2160      	movs	r1, #96	@ 0x60
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f931 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 8005e2c:	e01c      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f000 f8c8 	bl	8005fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2140      	movs	r1, #64	@ 0x40
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f921 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 8005e4c:	e00c      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f000 f918 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 8005e5e:	e003      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
      break;
 8005e64:	e000      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a46      	ldr	r2, [pc, #280]	@ (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a43      	ldr	r2, [pc, #268]	@ (8005fb4 <TIM_Base_SetConfig+0x130>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a42      	ldr	r2, [pc, #264]	@ (8005fb8 <TIM_Base_SetConfig+0x134>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a41      	ldr	r2, [pc, #260]	@ (8005fbc <TIM_Base_SetConfig+0x138>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a40      	ldr	r2, [pc, #256]	@ (8005fc0 <TIM_Base_SetConfig+0x13c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d108      	bne.n	8005ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a35      	ldr	r2, [pc, #212]	@ (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01f      	beq.n	8005f1e <TIM_Base_SetConfig+0x9a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee4:	d01b      	beq.n	8005f1e <TIM_Base_SetConfig+0x9a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a32      	ldr	r2, [pc, #200]	@ (8005fb4 <TIM_Base_SetConfig+0x130>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d017      	beq.n	8005f1e <TIM_Base_SetConfig+0x9a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a31      	ldr	r2, [pc, #196]	@ (8005fb8 <TIM_Base_SetConfig+0x134>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <TIM_Base_SetConfig+0x9a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a30      	ldr	r2, [pc, #192]	@ (8005fbc <TIM_Base_SetConfig+0x138>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00f      	beq.n	8005f1e <TIM_Base_SetConfig+0x9a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2f      	ldr	r2, [pc, #188]	@ (8005fc0 <TIM_Base_SetConfig+0x13c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <TIM_Base_SetConfig+0x9a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2e      	ldr	r2, [pc, #184]	@ (8005fc4 <TIM_Base_SetConfig+0x140>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <TIM_Base_SetConfig+0x9a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2d      	ldr	r2, [pc, #180]	@ (8005fc8 <TIM_Base_SetConfig+0x144>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_Base_SetConfig+0x9a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2c      	ldr	r2, [pc, #176]	@ (8005fcc <TIM_Base_SetConfig+0x148>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d108      	bne.n	8005f30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a16      	ldr	r2, [pc, #88]	@ (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00f      	beq.n	8005f7c <TIM_Base_SetConfig+0xf8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <TIM_Base_SetConfig+0x13c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <TIM_Base_SetConfig+0xf8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a17      	ldr	r2, [pc, #92]	@ (8005fc4 <TIM_Base_SetConfig+0x140>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_Base_SetConfig+0xf8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a16      	ldr	r2, [pc, #88]	@ (8005fc8 <TIM_Base_SetConfig+0x144>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_Base_SetConfig+0xf8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a15      	ldr	r2, [pc, #84]	@ (8005fcc <TIM_Base_SetConfig+0x148>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d103      	bne.n	8005f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d105      	bne.n	8005fa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f023 0201 	bic.w	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	611a      	str	r2, [r3, #16]
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40013400 	.word	0x40013400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800

08005fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f023 0201 	bic.w	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 030a 	bic.w	r3, r3, #10
 800600c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800602e:	b480      	push	{r7}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f023 0210 	bic.w	r2, r3, #16
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	031b      	lsls	r3, r3, #12
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800606a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f043 0307 	orr.w	r3, r3, #7
 80060b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	021a      	lsls	r2, r3, #8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	609a      	str	r2, [r3, #8]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006118:	2302      	movs	r3, #2
 800611a:	e068      	b.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2e      	ldr	r2, [pc, #184]	@ (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2d      	ldr	r2, [pc, #180]	@ (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d108      	bne.n	8006162 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006156:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006168:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1e      	ldr	r2, [pc, #120]	@ (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d01d      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618e:	d018      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a1b      	ldr	r2, [pc, #108]	@ (8006204 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1a      	ldr	r2, [pc, #104]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00e      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a18      	ldr	r2, [pc, #96]	@ (800620c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a13      	ldr	r2, [pc, #76]	@ (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d004      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a14      	ldr	r2, [pc, #80]	@ (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10c      	bne.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40013400 	.word	0x40013400
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40014000 	.word	0x40014000

08006214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e040      	b.n	80062a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fb f99c 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2224      	movs	r2, #36	@ 0x24
 8006240:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fb6a 	bl	8006934 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f8af 	bl	80063c4 <UART_SetConfig>
 8006266:	4603      	mov	r3, r0
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e01b      	b.n	80062a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800627e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800628e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fbe9 	bl	8006a78 <UART_CheckIdleState>
 80062a6:	4603      	mov	r3, r0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	@ 0x28
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d177      	bne.n	80063b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_UART_Transmit+0x24>
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e070      	b.n	80063ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2221      	movs	r2, #33	@ 0x21
 80062e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e6:	f7fb fc1d 	bl	8001b24 <HAL_GetTick>
 80062ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	88fa      	ldrh	r2, [r7, #6]
 80062f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006304:	d108      	bne.n	8006318 <HAL_UART_Transmit+0x68>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	e003      	b.n	8006320 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006320:	e02f      	b.n	8006382 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	@ 0x80
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fc4b 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e03b      	b.n	80063ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10b      	bne.n	8006360 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	881a      	ldrh	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006354:	b292      	uxth	r2, r2
 8006356:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	3302      	adds	r3, #2
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	e007      	b.n	8006370 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1c9      	bne.n	8006322 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	2140      	movs	r1, #64	@ 0x40
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fc15 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d004      	beq.n	80063ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e005      	b.n	80063ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e000      	b.n	80063ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80063b8:	2302      	movs	r3, #2
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c8:	b08a      	sub	sp, #40	@ 0x28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	431a      	orrs	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4ba4      	ldr	r3, [pc, #656]	@ (8006684 <UART_SetConfig+0x2c0>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a99      	ldr	r2, [pc, #612]	@ (8006688 <UART_SetConfig+0x2c4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642c:	4313      	orrs	r3, r2
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a90      	ldr	r2, [pc, #576]	@ (800668c <UART_SetConfig+0x2c8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d126      	bne.n	800649c <UART_SetConfig+0xd8>
 800644e:	4b90      	ldr	r3, [pc, #576]	@ (8006690 <UART_SetConfig+0x2cc>)
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	2b03      	cmp	r3, #3
 800645a:	d81b      	bhi.n	8006494 <UART_SetConfig+0xd0>
 800645c:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <UART_SetConfig+0xa0>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	08006475 	.word	0x08006475
 8006468:	08006485 	.word	0x08006485
 800646c:	0800647d 	.word	0x0800647d
 8006470:	0800648d 	.word	0x0800648d
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647a:	e116      	b.n	80066aa <UART_SetConfig+0x2e6>
 800647c:	2302      	movs	r3, #2
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e112      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006484:	2304      	movs	r3, #4
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648a:	e10e      	b.n	80066aa <UART_SetConfig+0x2e6>
 800648c:	2308      	movs	r3, #8
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006492:	e10a      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006494:	2310      	movs	r3, #16
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649a:	e106      	b.n	80066aa <UART_SetConfig+0x2e6>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a7c      	ldr	r2, [pc, #496]	@ (8006694 <UART_SetConfig+0x2d0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d138      	bne.n	8006518 <UART_SetConfig+0x154>
 80064a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006690 <UART_SetConfig+0x2cc>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ac:	f003 030c 	and.w	r3, r3, #12
 80064b0:	2b0c      	cmp	r3, #12
 80064b2:	d82d      	bhi.n	8006510 <UART_SetConfig+0x14c>
 80064b4:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <UART_SetConfig+0xf8>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	08006511 	.word	0x08006511
 80064c4:	08006511 	.word	0x08006511
 80064c8:	08006511 	.word	0x08006511
 80064cc:	08006501 	.word	0x08006501
 80064d0:	08006511 	.word	0x08006511
 80064d4:	08006511 	.word	0x08006511
 80064d8:	08006511 	.word	0x08006511
 80064dc:	080064f9 	.word	0x080064f9
 80064e0:	08006511 	.word	0x08006511
 80064e4:	08006511 	.word	0x08006511
 80064e8:	08006511 	.word	0x08006511
 80064ec:	08006509 	.word	0x08006509
 80064f0:	2300      	movs	r3, #0
 80064f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f6:	e0d8      	b.n	80066aa <UART_SetConfig+0x2e6>
 80064f8:	2302      	movs	r3, #2
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fe:	e0d4      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006500:	2304      	movs	r3, #4
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e0d0      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006508:	2308      	movs	r3, #8
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e0cc      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006510:	2310      	movs	r3, #16
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e0c8      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a5e      	ldr	r2, [pc, #376]	@ (8006698 <UART_SetConfig+0x2d4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d125      	bne.n	800656e <UART_SetConfig+0x1aa>
 8006522:	4b5b      	ldr	r3, [pc, #364]	@ (8006690 <UART_SetConfig+0x2cc>)
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006528:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800652c:	2b30      	cmp	r3, #48	@ 0x30
 800652e:	d016      	beq.n	800655e <UART_SetConfig+0x19a>
 8006530:	2b30      	cmp	r3, #48	@ 0x30
 8006532:	d818      	bhi.n	8006566 <UART_SetConfig+0x1a2>
 8006534:	2b20      	cmp	r3, #32
 8006536:	d00a      	beq.n	800654e <UART_SetConfig+0x18a>
 8006538:	2b20      	cmp	r3, #32
 800653a:	d814      	bhi.n	8006566 <UART_SetConfig+0x1a2>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <UART_SetConfig+0x182>
 8006540:	2b10      	cmp	r3, #16
 8006542:	d008      	beq.n	8006556 <UART_SetConfig+0x192>
 8006544:	e00f      	b.n	8006566 <UART_SetConfig+0x1a2>
 8006546:	2300      	movs	r3, #0
 8006548:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654c:	e0ad      	b.n	80066aa <UART_SetConfig+0x2e6>
 800654e:	2302      	movs	r3, #2
 8006550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006554:	e0a9      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006556:	2304      	movs	r3, #4
 8006558:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655c:	e0a5      	b.n	80066aa <UART_SetConfig+0x2e6>
 800655e:	2308      	movs	r3, #8
 8006560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006564:	e0a1      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006566:	2310      	movs	r3, #16
 8006568:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656c:	e09d      	b.n	80066aa <UART_SetConfig+0x2e6>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a4a      	ldr	r2, [pc, #296]	@ (800669c <UART_SetConfig+0x2d8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d125      	bne.n	80065c4 <UART_SetConfig+0x200>
 8006578:	4b45      	ldr	r3, [pc, #276]	@ (8006690 <UART_SetConfig+0x2cc>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006582:	2bc0      	cmp	r3, #192	@ 0xc0
 8006584:	d016      	beq.n	80065b4 <UART_SetConfig+0x1f0>
 8006586:	2bc0      	cmp	r3, #192	@ 0xc0
 8006588:	d818      	bhi.n	80065bc <UART_SetConfig+0x1f8>
 800658a:	2b80      	cmp	r3, #128	@ 0x80
 800658c:	d00a      	beq.n	80065a4 <UART_SetConfig+0x1e0>
 800658e:	2b80      	cmp	r3, #128	@ 0x80
 8006590:	d814      	bhi.n	80065bc <UART_SetConfig+0x1f8>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <UART_SetConfig+0x1d8>
 8006596:	2b40      	cmp	r3, #64	@ 0x40
 8006598:	d008      	beq.n	80065ac <UART_SetConfig+0x1e8>
 800659a:	e00f      	b.n	80065bc <UART_SetConfig+0x1f8>
 800659c:	2300      	movs	r3, #0
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a2:	e082      	b.n	80066aa <UART_SetConfig+0x2e6>
 80065a4:	2302      	movs	r3, #2
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065aa:	e07e      	b.n	80066aa <UART_SetConfig+0x2e6>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b2:	e07a      	b.n	80066aa <UART_SetConfig+0x2e6>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ba:	e076      	b.n	80066aa <UART_SetConfig+0x2e6>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c2:	e072      	b.n	80066aa <UART_SetConfig+0x2e6>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a35      	ldr	r2, [pc, #212]	@ (80066a0 <UART_SetConfig+0x2dc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d12a      	bne.n	8006624 <UART_SetConfig+0x260>
 80065ce:	4b30      	ldr	r3, [pc, #192]	@ (8006690 <UART_SetConfig+0x2cc>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065dc:	d01a      	beq.n	8006614 <UART_SetConfig+0x250>
 80065de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e2:	d81b      	bhi.n	800661c <UART_SetConfig+0x258>
 80065e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e8:	d00c      	beq.n	8006604 <UART_SetConfig+0x240>
 80065ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ee:	d815      	bhi.n	800661c <UART_SetConfig+0x258>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <UART_SetConfig+0x238>
 80065f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065f8:	d008      	beq.n	800660c <UART_SetConfig+0x248>
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x258>
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006602:	e052      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006604:	2302      	movs	r3, #2
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660a:	e04e      	b.n	80066aa <UART_SetConfig+0x2e6>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006612:	e04a      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800661a:	e046      	b.n	80066aa <UART_SetConfig+0x2e6>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006622:	e042      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a17      	ldr	r2, [pc, #92]	@ (8006688 <UART_SetConfig+0x2c4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d13a      	bne.n	80066a4 <UART_SetConfig+0x2e0>
 800662e:	4b18      	ldr	r3, [pc, #96]	@ (8006690 <UART_SetConfig+0x2cc>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006638:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800663c:	d01a      	beq.n	8006674 <UART_SetConfig+0x2b0>
 800663e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006642:	d81b      	bhi.n	800667c <UART_SetConfig+0x2b8>
 8006644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006648:	d00c      	beq.n	8006664 <UART_SetConfig+0x2a0>
 800664a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800664e:	d815      	bhi.n	800667c <UART_SetConfig+0x2b8>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <UART_SetConfig+0x298>
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006658:	d008      	beq.n	800666c <UART_SetConfig+0x2a8>
 800665a:	e00f      	b.n	800667c <UART_SetConfig+0x2b8>
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e022      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006664:	2302      	movs	r3, #2
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e01e      	b.n	80066aa <UART_SetConfig+0x2e6>
 800666c:	2304      	movs	r3, #4
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006672:	e01a      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006674:	2308      	movs	r3, #8
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800667a:	e016      	b.n	80066aa <UART_SetConfig+0x2e6>
 800667c:	2310      	movs	r3, #16
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006682:	e012      	b.n	80066aa <UART_SetConfig+0x2e6>
 8006684:	efff69f3 	.word	0xefff69f3
 8006688:	40008000 	.word	0x40008000
 800668c:	40013800 	.word	0x40013800
 8006690:	40021000 	.word	0x40021000
 8006694:	40004400 	.word	0x40004400
 8006698:	40004800 	.word	0x40004800
 800669c:	40004c00 	.word	0x40004c00
 80066a0:	40005000 	.word	0x40005000
 80066a4:	2310      	movs	r3, #16
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a9f      	ldr	r2, [pc, #636]	@ (800692c <UART_SetConfig+0x568>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d17a      	bne.n	80067aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d824      	bhi.n	8006706 <UART_SetConfig+0x342>
 80066bc:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <UART_SetConfig+0x300>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066e9 	.word	0x080066e9
 80066c8:	08006707 	.word	0x08006707
 80066cc:	080066f1 	.word	0x080066f1
 80066d0:	08006707 	.word	0x08006707
 80066d4:	080066f7 	.word	0x080066f7
 80066d8:	08006707 	.word	0x08006707
 80066dc:	08006707 	.word	0x08006707
 80066e0:	08006707 	.word	0x08006707
 80066e4:	080066ff 	.word	0x080066ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e8:	f7fe fc40 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 80066ec:	61f8      	str	r0, [r7, #28]
        break;
 80066ee:	e010      	b.n	8006712 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006930 <UART_SetConfig+0x56c>)
 80066f2:	61fb      	str	r3, [r7, #28]
        break;
 80066f4:	e00d      	b.n	8006712 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f6:	f7fe fba1 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 80066fa:	61f8      	str	r0, [r7, #28]
        break;
 80066fc:	e009      	b.n	8006712 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006702:	61fb      	str	r3, [r7, #28]
        break;
 8006704:	e005      	b.n	8006712 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006710:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80fb 	beq.w	8006910 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4413      	add	r3, r2
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	429a      	cmp	r2, r3
 8006728:	d305      	bcc.n	8006736 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	429a      	cmp	r2, r3
 8006734:	d903      	bls.n	800673e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800673c:	e0e8      	b.n	8006910 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2200      	movs	r2, #0
 8006742:	461c      	mov	r4, r3
 8006744:	4615      	mov	r5, r2
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	022b      	lsls	r3, r5, #8
 8006750:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006754:	0222      	lsls	r2, r4, #8
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6849      	ldr	r1, [r1, #4]
 800675a:	0849      	lsrs	r1, r1, #1
 800675c:	2000      	movs	r0, #0
 800675e:	4688      	mov	r8, r1
 8006760:	4681      	mov	r9, r0
 8006762:	eb12 0a08 	adds.w	sl, r2, r8
 8006766:	eb43 0b09 	adc.w	fp, r3, r9
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006778:	4650      	mov	r0, sl
 800677a:	4659      	mov	r1, fp
 800677c:	f7f9 fd78 	bl	8000270 <__aeabi_uldivmod>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4613      	mov	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800678e:	d308      	bcc.n	80067a2 <UART_SetConfig+0x3de>
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006796:	d204      	bcs.n	80067a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	60da      	str	r2, [r3, #12]
 80067a0:	e0b6      	b.n	8006910 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067a8:	e0b2      	b.n	8006910 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067b2:	d15e      	bne.n	8006872 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d828      	bhi.n	800680e <UART_SetConfig+0x44a>
 80067bc:	a201      	add	r2, pc, #4	@ (adr r2, 80067c4 <UART_SetConfig+0x400>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067e9 	.word	0x080067e9
 80067c8:	080067f1 	.word	0x080067f1
 80067cc:	080067f9 	.word	0x080067f9
 80067d0:	0800680f 	.word	0x0800680f
 80067d4:	080067ff 	.word	0x080067ff
 80067d8:	0800680f 	.word	0x0800680f
 80067dc:	0800680f 	.word	0x0800680f
 80067e0:	0800680f 	.word	0x0800680f
 80067e4:	08006807 	.word	0x08006807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e8:	f7fe fbc0 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 80067ec:	61f8      	str	r0, [r7, #28]
        break;
 80067ee:	e014      	b.n	800681a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f0:	f7fe fbd2 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 80067f4:	61f8      	str	r0, [r7, #28]
        break;
 80067f6:	e010      	b.n	800681a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006930 <UART_SetConfig+0x56c>)
 80067fa:	61fb      	str	r3, [r7, #28]
        break;
 80067fc:	e00d      	b.n	800681a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067fe:	f7fe fb1d 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8006802:	61f8      	str	r0, [r7, #28]
        break;
 8006804:	e009      	b.n	800681a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680a:	61fb      	str	r3, [r7, #28]
        break;
 800680c:	e005      	b.n	800681a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006818:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d077      	beq.n	8006910 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	005a      	lsls	r2, r3, #1
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	441a      	add	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b0f      	cmp	r3, #15
 800683a:	d916      	bls.n	800686a <UART_SetConfig+0x4a6>
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006842:	d212      	bcs.n	800686a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f023 030f 	bic.w	r3, r3, #15
 800684c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	b29a      	uxth	r2, r3
 800685a:	8afb      	ldrh	r3, [r7, #22]
 800685c:	4313      	orrs	r3, r2
 800685e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	8afa      	ldrh	r2, [r7, #22]
 8006866:	60da      	str	r2, [r3, #12]
 8006868:	e052      	b.n	8006910 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006870:	e04e      	b.n	8006910 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006872:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006876:	2b08      	cmp	r3, #8
 8006878:	d827      	bhi.n	80068ca <UART_SetConfig+0x506>
 800687a:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <UART_SetConfig+0x4bc>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068b5 	.word	0x080068b5
 800688c:	080068cb 	.word	0x080068cb
 8006890:	080068bb 	.word	0x080068bb
 8006894:	080068cb 	.word	0x080068cb
 8006898:	080068cb 	.word	0x080068cb
 800689c:	080068cb 	.word	0x080068cb
 80068a0:	080068c3 	.word	0x080068c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a4:	f7fe fb62 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 80068a8:	61f8      	str	r0, [r7, #28]
        break;
 80068aa:	e014      	b.n	80068d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ac:	f7fe fb74 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 80068b0:	61f8      	str	r0, [r7, #28]
        break;
 80068b2:	e010      	b.n	80068d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006930 <UART_SetConfig+0x56c>)
 80068b6:	61fb      	str	r3, [r7, #28]
        break;
 80068b8:	e00d      	b.n	80068d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ba:	f7fe fabf 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 80068be:	61f8      	str	r0, [r7, #28]
        break;
 80068c0:	e009      	b.n	80068d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c6:	61fb      	str	r3, [r7, #28]
        break;
 80068c8:	e005      	b.n	80068d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068d4:	bf00      	nop
    }

    if (pclk != 0U)
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d019      	beq.n	8006910 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	085a      	lsrs	r2, r3, #1
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	441a      	add	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b0f      	cmp	r3, #15
 80068f4:	d909      	bls.n	800690a <UART_SetConfig+0x546>
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068fc:	d205      	bcs.n	800690a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60da      	str	r2, [r3, #12]
 8006908:	e002      	b.n	8006910 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800691c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006920:	4618      	mov	r0, r3
 8006922:	3728      	adds	r7, #40	@ 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800692a:	bf00      	nop
 800692c:	40008000 	.word	0x40008000
 8006930:	00f42400 	.word	0x00f42400

08006934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01a      	beq.n	8006a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a32:	d10a      	bne.n	8006a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b098      	sub	sp, #96	@ 0x60
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a88:	f7fb f84c 	bl	8001b24 <HAL_GetTick>
 8006a8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d12e      	bne.n	8006afa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f88c 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d021      	beq.n	8006afa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e6      	bne.n	8006ab6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e062      	b.n	8006bc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d149      	bne.n	8006b9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b10:	2200      	movs	r2, #0
 8006b12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f856 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d03c      	beq.n	8006b9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b74:	61fa      	str	r2, [r7, #28]
 8006b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	617b      	str	r3, [r7, #20]
   return(result);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e5      	bne.n	8006b54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e011      	b.n	8006bc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3758      	adds	r7, #88	@ 0x58
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd8:	e04f      	b.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d04b      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be2:	f7fa ff9f 	bl	8001b24 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d302      	bcc.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e04e      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d037      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b80      	cmp	r3, #128	@ 0x80
 8006c0e:	d034      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b40      	cmp	r3, #64	@ 0x40
 8006c14:	d031      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d110      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f838 	bl	8006ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2208      	movs	r2, #8
 8006c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e029      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c54:	d111      	bne.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f81e 	bl	8006ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e00f      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4013      	ands	r3, r2
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	bf0c      	ite	eq
 8006c8a:	2301      	moveq	r3, #1
 8006c8c:	2300      	movne	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d0a0      	beq.n	8006bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b095      	sub	sp, #84	@ 0x54
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e6      	bne.n	8006caa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f023 0301 	bic.w	r3, r3, #1
 8006cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e5      	bne.n	8006cdc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d118      	bne.n	8006d4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f023 0310 	bic.w	r3, r3, #16
 8006d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6979      	ldr	r1, [r7, #20]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	613b      	str	r3, [r7, #16]
   return(result);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e6      	bne.n	8006d18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d5e:	bf00      	nop
 8006d60:	3754      	adds	r7, #84	@ 0x54
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	f107 001c 	add.w	r0, r7, #28
 8006d78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa69 	bl	8007260 <USB_CoreReset>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006d92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006da6:	e005      	b.n	8006db4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dc0:	b004      	add	sp, #16
 8006dc2:	4770      	bx	lr

08006dc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f023 0201 	bic.w	r2, r3, #1
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d115      	bne.n	8006e34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e14:	200a      	movs	r0, #10
 8006e16:	f7fa fe91 	bl	8001b3c <HAL_Delay>
      ms += 10U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	330a      	adds	r3, #10
 8006e1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa0f 	bl	8007244 <USB_GetMode>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d01e      	beq.n	8006e6a <USB_SetCurrentMode+0x84>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e30:	d9f0      	bls.n	8006e14 <USB_SetCurrentMode+0x2e>
 8006e32:	e01a      	b.n	8006e6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d115      	bne.n	8006e66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e46:	200a      	movs	r0, #10
 8006e48:	f7fa fe78 	bl	8001b3c <HAL_Delay>
      ms += 10U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	330a      	adds	r3, #10
 8006e50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9f6 	bl	8007244 <USB_GetMode>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <USB_SetCurrentMode+0x84>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e62:	d9f0      	bls.n	8006e46 <USB_SetCurrentMode+0x60>
 8006e64:	e001      	b.n	8006e6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e005      	b.n	8006e76 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e6e:	d101      	bne.n	8006e74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e80:	b084      	sub	sp, #16
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	e009      	b.n	8006eb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3340      	adds	r3, #64	@ 0x40
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	613b      	str	r3, [r7, #16]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b0e      	cmp	r3, #14
 8006eb8:	d9f2      	bls.n	8006ea0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006eba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d11c      	bne.n	8006efc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e005      	b.n	8006f08 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2300      	movs	r3, #0
 8006f12:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f14:	2103      	movs	r1, #3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f95a 	bl	80071d0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f1c:	2110      	movs	r1, #16
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f8f6 	bl	8007110 <USB_FlushTxFifo>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f920 	bl	8007174 <USB_FlushRxFifo>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f44:	461a      	mov	r2, r3
 8006f46:	2300      	movs	r3, #0
 8006f48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f50:	461a      	mov	r2, r3
 8006f52:	2300      	movs	r3, #0
 8006f54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f62:	2300      	movs	r3, #0
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	e043      	b.n	8006ff0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f7e:	d118      	bne.n	8006fb2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f92:	461a      	mov	r2, r3
 8006f94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	e013      	b.n	8006fc4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	e008      	b.n	8006fc4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fe8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3301      	adds	r3, #1
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d3b5      	bcc.n	8006f68 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	e043      	b.n	800708a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007018:	d118      	bne.n	800704c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800702c:	461a      	mov	r2, r3
 800702e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	e013      	b.n	800705e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007042:	461a      	mov	r2, r3
 8007044:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	e008      	b.n	800705e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007058:	461a      	mov	r2, r3
 800705a:	2300      	movs	r3, #0
 800705c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800706a:	461a      	mov	r2, r3
 800706c:	2300      	movs	r3, #0
 800706e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707c:	461a      	mov	r2, r3
 800707e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007082:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	3301      	adds	r3, #1
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800708e:	461a      	mov	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4293      	cmp	r3, r2
 8007094:	d3b5      	bcc.n	8007002 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80070b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f043 0210 	orr.w	r2, r3, #16
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	4b10      	ldr	r3, [pc, #64]	@ (800710c <USB_DevInit+0x28c>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f043 0208 	orr.w	r2, r3, #8
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d107      	bne.n	80070fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070f4:	f043 0304 	orr.w	r3, r3, #4
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007108:	b004      	add	sp, #16
 800710a:	4770      	bx	lr
 800710c:	803c3800 	.word	0x803c3800

08007110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800712a:	d901      	bls.n	8007130 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e01b      	b.n	8007168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	daf2      	bge.n	800711e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	019b      	lsls	r3, r3, #6
 8007140:	f043 0220 	orr.w	r2, r3, #32
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007154:	d901      	bls.n	800715a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e006      	b.n	8007168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b20      	cmp	r3, #32
 8007164:	d0f0      	beq.n	8007148 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3301      	adds	r3, #1
 8007184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800718c:	d901      	bls.n	8007192 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e018      	b.n	80071c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	daf2      	bge.n	8007180 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2210      	movs	r2, #16
 80071a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071b0:	d901      	bls.n	80071b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e006      	b.n	80071c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d0f0      	beq.n	80071a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071f0:	4313      	orrs	r3, r2
 80071f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800721c:	f023 0303 	bic.w	r3, r3, #3
 8007220:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007230:	f043 0302 	orr.w	r3, r3, #2
 8007234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	f003 0301 	and.w	r3, r3, #1
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007278:	d901      	bls.n	800727e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e01b      	b.n	80072b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	daf2      	bge.n	800726c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f043 0201 	orr.w	r2, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072a2:	d901      	bls.n	80072a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e006      	b.n	80072b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d0f0      	beq.n	8007296 <USB_CoreReset+0x36>

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	4603      	mov	r3, r0
 80072ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072d4:	2b84      	cmp	r3, #132	@ 0x84
 80072d6:	d005      	beq.n	80072e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80072d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	3303      	adds	r3, #3
 80072e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072e4:	68fb      	ldr	r3, [r7, #12]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072f8:	f3ef 8305 	mrs	r3, IPSR
 80072fc:	607b      	str	r3, [r7, #4]
  return(result);
 80072fe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007300:	2b00      	cmp	r3, #0
 8007302:	bf14      	ite	ne
 8007304:	2301      	movne	r3, #1
 8007306:	2300      	moveq	r3, #0
 8007308:	b2db      	uxtb	r3, r3
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800731a:	f001 f917 	bl	800854c <vTaskStartScheduler>
  
  return osOK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	bd80      	pop	{r7, pc}

08007324 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007326:	b089      	sub	sp, #36	@ 0x24
 8007328:	af04      	add	r7, sp, #16
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d020      	beq.n	8007378 <osThreadCreate+0x54>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01c      	beq.n	8007378 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685c      	ldr	r4, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691e      	ldr	r6, [r3, #16]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff ffb6 	bl	80072c2 <makeFreeRtosPriority>
 8007356:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007360:	9202      	str	r2, [sp, #8]
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	9100      	str	r1, [sp, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	4632      	mov	r2, r6
 800736a:	4629      	mov	r1, r5
 800736c:	4620      	mov	r0, r4
 800736e:	f000 ff1f 	bl	80081b0 <xTaskCreateStatic>
 8007372:	4603      	mov	r3, r0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	e01c      	b.n	80073b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685c      	ldr	r4, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007384:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff ff98 	bl	80072c2 <makeFreeRtosPriority>
 8007392:	4602      	mov	r2, r0
 8007394:	f107 030c 	add.w	r3, r7, #12
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	9200      	str	r2, [sp, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	4632      	mov	r2, r6
 80073a0:	4629      	mov	r1, r5
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 ff64 	bl	8008270 <xTaskCreate>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d001      	beq.n	80073b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	e000      	b.n	80073b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80073b2:	68fb      	ldr	r3, [r7, #12]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <osDelay+0x16>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	e000      	b.n	80073d4 <osDelay+0x18>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 f883 	bl	80084e0 <vTaskDelay>
  
  return osOK;
 80073da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80073e4:	b590      	push	{r4, r7, lr}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d011      	beq.n	800741a <osMessageCreate+0x36>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00d      	beq.n	800741a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6859      	ldr	r1, [r3, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	2400      	movs	r4, #0
 8007410:	9400      	str	r4, [sp, #0]
 8007412:	f000 f9e1 	bl	80077d8 <xQueueGenericCreateStatic>
 8007416:	4603      	mov	r3, r0
 8007418:	e008      	b.n	800742c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	4619      	mov	r1, r3
 8007426:	f000 fa54 	bl	80078d2 <xQueueGenericCreate>
 800742a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bd90      	pop	{r4, r7, pc}

08007434 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007440:	2300      	movs	r3, #0
 8007442:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <osMessagePut+0x1e>
    ticks = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007452:	f7ff ff4e 	bl	80072f2 <inHandlerMode>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d018      	beq.n	800748e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800745c:	f107 0210 	add.w	r2, r7, #16
 8007460:	f107 0108 	add.w	r1, r7, #8
 8007464:	2300      	movs	r3, #0
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fb90 	bl	8007b8c <xQueueGenericSendFromISR>
 800746c:	4603      	mov	r3, r0
 800746e:	2b01      	cmp	r3, #1
 8007470:	d001      	beq.n	8007476 <osMessagePut+0x42>
      return osErrorOS;
 8007472:	23ff      	movs	r3, #255	@ 0xff
 8007474:	e018      	b.n	80074a8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d014      	beq.n	80074a6 <osMessagePut+0x72>
 800747c:	4b0c      	ldr	r3, [pc, #48]	@ (80074b0 <osMessagePut+0x7c>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	e00b      	b.n	80074a6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800748e:	f107 0108 	add.w	r1, r7, #8
 8007492:	2300      	movs	r3, #0
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fa76 	bl	8007988 <xQueueGenericSend>
 800749c:	4603      	mov	r3, r0
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d001      	beq.n	80074a6 <osMessagePut+0x72>
      return osErrorOS;
 80074a2:	23ff      	movs	r3, #255	@ 0xff
 80074a4:	e000      	b.n	80074a8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80074b4:	b590      	push	{r4, r7, lr}
 80074b6:	b08b      	sub	sp, #44	@ 0x2c
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80074ce:	2380      	movs	r3, #128	@ 0x80
 80074d0:	617b      	str	r3, [r7, #20]
    return event;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	461c      	mov	r4, r3
 80074d6:	f107 0314 	add.w	r3, r7, #20
 80074da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074e2:	e054      	b.n	800758e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d103      	bne.n	80074fc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074fa:	e009      	b.n	8007510 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d006      	beq.n	8007510 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <osMessageGet+0x5c>
      ticks = 1;
 800750c:	2301      	movs	r3, #1
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007510:	f7ff feef 	bl	80072f2 <inHandlerMode>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01c      	beq.n	8007554 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800751a:	f107 0220 	add.w	r2, r7, #32
 800751e:	f107 0314 	add.w	r3, r7, #20
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	68b8      	ldr	r0, [r7, #8]
 8007528:	f000 fcb0 	bl	8007e8c <xQueueReceiveFromISR>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d102      	bne.n	8007538 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007532:	2310      	movs	r3, #16
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e001      	b.n	800753c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01d      	beq.n	800757e <osMessageGet+0xca>
 8007542:	4b15      	ldr	r3, [pc, #84]	@ (8007598 <osMessageGet+0xe4>)
 8007544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	e014      	b.n	800757e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007554:	f107 0314 	add.w	r3, r7, #20
 8007558:	3304      	adds	r3, #4
 800755a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800755c:	4619      	mov	r1, r3
 800755e:	68b8      	ldr	r0, [r7, #8]
 8007560:	f000 fbb2 	bl	8007cc8 <xQueueReceive>
 8007564:	4603      	mov	r3, r0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d102      	bne.n	8007570 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800756a:	2310      	movs	r3, #16
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	e006      	b.n	800757e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <osMessageGet+0xc6>
 8007576:	2300      	movs	r3, #0
 8007578:	e000      	b.n	800757c <osMessageGet+0xc8>
 800757a:	2340      	movs	r3, #64	@ 0x40
 800757c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	461c      	mov	r4, r3
 8007582:	f107 0314 	add.w	r3, r7, #20
 8007586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800758a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	372c      	adds	r7, #44	@ 0x2c
 8007592:	46bd      	mov	sp, r7
 8007594:	bd90      	pop	{r4, r7, pc}
 8007596:	bf00      	nop
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f103 0208 	add.w	r2, r3, #8
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f04f 32ff 	mov.w	r2, #4294967295
 80075b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f103 0208 	add.w	r2, r3, #8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f103 0208 	add.w	r2, r3, #8
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
}
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007654:	d103      	bne.n	800765e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e00c      	b.n	8007678 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3308      	adds	r3, #8
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e002      	b.n	800766c <vListInsert+0x2e>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	429a      	cmp	r2, r3
 8007676:	d2f6      	bcs.n	8007666 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6892      	ldr	r2, [r2, #8]
 80076c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6852      	ldr	r2, [r2, #4]
 80076d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d103      	bne.n	80076e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	1e5a      	subs	r2, r3, #1
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10b      	bne.n	8007730 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800772a:	bf00      	nop
 800772c:	bf00      	nop
 800772e:	e7fd      	b.n	800772c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007730:	f001 fd52 	bl	80091d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800773c:	68f9      	ldr	r1, [r7, #12]
 800773e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007760:	3b01      	subs	r3, #1
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	441a      	add	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	22ff      	movs	r2, #255	@ 0xff
 8007774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	22ff      	movs	r2, #255	@ 0xff
 800777c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d114      	bne.n	80077b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d01a      	beq.n	80077c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3310      	adds	r3, #16
 8007792:	4618      	mov	r0, r3
 8007794:	f001 f924 	bl	80089e0 <xTaskRemoveFromEventList>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d012      	beq.n	80077c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800779e:	4b0d      	ldr	r3, [pc, #52]	@ (80077d4 <xQueueGenericReset+0xd0>)
 80077a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	e009      	b.n	80077c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3310      	adds	r3, #16
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff fef1 	bl	800759c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3324      	adds	r3, #36	@ 0x24
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff feec 	bl	800759c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077c4:	f001 fd3a 	bl	800923c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077c8:	2301      	movs	r3, #1
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08e      	sub	sp, #56	@ 0x38
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <xQueueGenericCreateStatic+0x56>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <xQueueGenericCreateStatic+0x5a>
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <xQueueGenericCreateStatic+0x5c>
 8007832:	2300      	movs	r3, #0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10b      	bne.n	8007850 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	623b      	str	r3, [r7, #32]
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d102      	bne.n	800785c <xQueueGenericCreateStatic+0x84>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <xQueueGenericCreateStatic+0x88>
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <xQueueGenericCreateStatic+0x8a>
 8007860:	2300      	movs	r3, #0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	61fb      	str	r3, [r7, #28]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800787e:	2348      	movs	r3, #72	@ 0x48
 8007880:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b48      	cmp	r3, #72	@ 0x48
 8007886:	d00b      	beq.n	80078a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	61bb      	str	r3, [r7, #24]
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	e7fd      	b.n	800789c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80078a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00d      	beq.n	80078c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80078b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	4613      	mov	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f840 	bl	8007948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3730      	adds	r7, #48	@ 0x30
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b08a      	sub	sp, #40	@ 0x28
 80078d6:	af02      	add	r7, sp, #8
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	4613      	mov	r3, r2
 80078de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <xQueueGenericCreate+0x2c>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	613b      	str	r3, [r7, #16]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	fb02 f303 	mul.w	r3, r2, r3
 8007906:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3348      	adds	r3, #72	@ 0x48
 800790c:	4618      	mov	r0, r3
 800790e:	f001 fd85 	bl	800941c <pvPortMalloc>
 8007912:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d011      	beq.n	800793e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	3348      	adds	r3, #72	@ 0x48
 8007922:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800792c:	79fa      	ldrb	r2, [r7, #7]
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	4613      	mov	r3, r2
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f805 	bl	8007948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800793e:	69bb      	ldr	r3, [r7, #24]
	}
 8007940:	4618      	mov	r0, r3
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d103      	bne.n	8007964 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e002      	b.n	800796a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007976:	2101      	movs	r1, #1
 8007978:	69b8      	ldr	r0, [r7, #24]
 800797a:	f7ff fec3 	bl	8007704 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08e      	sub	sp, #56	@ 0x38
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007996:	2300      	movs	r3, #0
 8007998:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10b      	bne.n	80079bc <xQueueGenericSend+0x34>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	e7fd      	b.n	80079b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d103      	bne.n	80079ca <xQueueGenericSend+0x42>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <xQueueGenericSend+0x46>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e000      	b.n	80079d0 <xQueueGenericSend+0x48>
 80079ce:	2300      	movs	r3, #0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10b      	bne.n	80079ec <xQueueGenericSend+0x64>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079e6:	bf00      	nop
 80079e8:	bf00      	nop
 80079ea:	e7fd      	b.n	80079e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d103      	bne.n	80079fa <xQueueGenericSend+0x72>
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <xQueueGenericSend+0x76>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <xQueueGenericSend+0x78>
 80079fe:	2300      	movs	r3, #0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10b      	bne.n	8007a1c <xQueueGenericSend+0x94>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	623b      	str	r3, [r7, #32]
}
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	e7fd      	b.n	8007a18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a1c:	f001 f9a0 	bl	8008d60 <xTaskGetSchedulerState>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d102      	bne.n	8007a2c <xQueueGenericSend+0xa4>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <xQueueGenericSend+0xa8>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <xQueueGenericSend+0xaa>
 8007a30:	2300      	movs	r3, #0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <xQueueGenericSend+0xc6>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	61fb      	str	r3, [r7, #28]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a4e:	f001 fbc3 	bl	80091d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d302      	bcc.n	8007a64 <xQueueGenericSend+0xdc>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d129      	bne.n	8007ab8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a6a:	f000 fa91 	bl	8007f90 <prvCopyDataToQueue>
 8007a6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d010      	beq.n	8007a9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	3324      	adds	r3, #36	@ 0x24
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 ffaf 	bl	80089e0 <xTaskRemoveFromEventList>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d013      	beq.n	8007ab0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a88:	4b3f      	ldr	r3, [pc, #252]	@ (8007b88 <xQueueGenericSend+0x200>)
 8007a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	e00a      	b.n	8007ab0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007aa0:	4b39      	ldr	r3, [pc, #228]	@ (8007b88 <xQueueGenericSend+0x200>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ab0:	f001 fbc4 	bl	800923c <vPortExitCritical>
				return pdPASS;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e063      	b.n	8007b80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d103      	bne.n	8007ac6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007abe:	f001 fbbd 	bl	800923c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e05c      	b.n	8007b80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007acc:	f107 0314 	add.w	r3, r7, #20
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 ffe9 	bl	8008aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ada:	f001 fbaf 	bl	800923c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ade:	f000 fd97 	bl	8008610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ae2:	f001 fb79 	bl	80091d8 <vPortEnterCritical>
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d103      	bne.n	8007afc <xQueueGenericSend+0x174>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b02:	b25b      	sxtb	r3, r3
 8007b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b08:	d103      	bne.n	8007b12 <xQueueGenericSend+0x18a>
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b12:	f001 fb93 	bl	800923c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b16:	1d3a      	adds	r2, r7, #4
 8007b18:	f107 0314 	add.w	r3, r7, #20
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 ffd8 	bl	8008ad4 <xTaskCheckForTimeOut>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d124      	bne.n	8007b74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b2c:	f000 fb28 	bl	8008180 <prvIsQueueFull>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d018      	beq.n	8007b68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	3310      	adds	r3, #16
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 ff28 	bl	8008994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b46:	f000 fab3 	bl	80080b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b4a:	f000 fd6f 	bl	800862c <xTaskResumeAll>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f47f af7c 	bne.w	8007a4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007b56:	4b0c      	ldr	r3, [pc, #48]	@ (8007b88 <xQueueGenericSend+0x200>)
 8007b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	e772      	b.n	8007a4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b6a:	f000 faa1 	bl	80080b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b6e:	f000 fd5d 	bl	800862c <xTaskResumeAll>
 8007b72:	e76c      	b.n	8007a4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b76:	f000 fa9b 	bl	80080b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b7a:	f000 fd57 	bl	800862c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3738      	adds	r7, #56	@ 0x38
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	e000ed04 	.word	0xe000ed04

08007b8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b090      	sub	sp, #64	@ 0x40
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d103      	bne.n	8007bca <xQueueGenericSendFromISR+0x3e>
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <xQueueGenericSendFromISR+0x42>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <xQueueGenericSendFromISR+0x44>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10b      	bne.n	8007bec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	e7fd      	b.n	8007be8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d103      	bne.n	8007bfa <xQueueGenericSendFromISR+0x6e>
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <xQueueGenericSendFromISR+0x72>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <xQueueGenericSendFromISR+0x74>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10b      	bne.n	8007c1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	623b      	str	r3, [r7, #32]
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	e7fd      	b.n	8007c18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c1c:	f001 fbbc 	bl	8009398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c20:	f3ef 8211 	mrs	r2, BASEPRI
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	61fa      	str	r2, [r7, #28]
 8007c36:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d302      	bcc.n	8007c4e <xQueueGenericSendFromISR+0xc2>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d12f      	bne.n	8007cae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	68b9      	ldr	r1, [r7, #8]
 8007c62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c64:	f000 f994 	bl	8007f90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c70:	d112      	bne.n	8007c98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d016      	beq.n	8007ca8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7c:	3324      	adds	r3, #36	@ 0x24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 feae 	bl	80089e0 <xTaskRemoveFromEventList>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00e      	beq.n	8007ca8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	e007      	b.n	8007ca8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	b25a      	sxtb	r2, r3
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007cac:	e001      	b.n	8007cb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007cbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3740      	adds	r7, #64	@ 0x40
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08c      	sub	sp, #48	@ 0x30
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <xQueueReceive+0x32>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	623b      	str	r3, [r7, #32]
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	e7fd      	b.n	8007cf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <xQueueReceive+0x40>
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <xQueueReceive+0x44>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <xQueueReceive+0x46>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <xQueueReceive+0x62>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	61fb      	str	r3, [r7, #28]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d2a:	f001 f819 	bl	8008d60 <xTaskGetSchedulerState>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <xQueueReceive+0x72>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <xQueueReceive+0x76>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueReceive+0x78>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10b      	bne.n	8007d5c <xQueueReceive+0x94>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	61bb      	str	r3, [r7, #24]
}
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	e7fd      	b.n	8007d58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d5c:	f001 fa3c 	bl	80091d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01f      	beq.n	8007dac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d70:	f000 f978 	bl	8008064 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	1e5a      	subs	r2, r3, #1
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00f      	beq.n	8007da4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d86:	3310      	adds	r3, #16
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fe29 	bl	80089e0 <xTaskRemoveFromEventList>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d007      	beq.n	8007da4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d94:	4b3c      	ldr	r3, [pc, #240]	@ (8007e88 <xQueueReceive+0x1c0>)
 8007d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007da4:	f001 fa4a 	bl	800923c <vPortExitCritical>
				return pdPASS;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e069      	b.n	8007e80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d103      	bne.n	8007dba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007db2:	f001 fa43 	bl	800923c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e062      	b.n	8007e80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d106      	bne.n	8007dce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dc0:	f107 0310 	add.w	r3, r7, #16
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fe6f 	bl	8008aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dce:	f001 fa35 	bl	800923c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dd2:	f000 fc1d 	bl	8008610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dd6:	f001 f9ff 	bl	80091d8 <vPortEnterCritical>
 8007dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007de0:	b25b      	sxtb	r3, r3
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d103      	bne.n	8007df0 <xQueueReceive+0x128>
 8007de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007df6:	b25b      	sxtb	r3, r3
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d103      	bne.n	8007e06 <xQueueReceive+0x13e>
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e06:	f001 fa19 	bl	800923c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e0a:	1d3a      	adds	r2, r7, #4
 8007e0c:	f107 0310 	add.w	r3, r7, #16
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fe5e 	bl	8008ad4 <xTaskCheckForTimeOut>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d123      	bne.n	8007e66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e20:	f000 f998 	bl	8008154 <prvIsQueueEmpty>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d017      	beq.n	8007e5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	3324      	adds	r3, #36	@ 0x24
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fdae 	bl	8008994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e3a:	f000 f939 	bl	80080b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e3e:	f000 fbf5 	bl	800862c <xTaskResumeAll>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d189      	bne.n	8007d5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007e48:	4b0f      	ldr	r3, [pc, #60]	@ (8007e88 <xQueueReceive+0x1c0>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	e780      	b.n	8007d5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e5c:	f000 f928 	bl	80080b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e60:	f000 fbe4 	bl	800862c <xTaskResumeAll>
 8007e64:	e77a      	b.n	8007d5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e68:	f000 f922 	bl	80080b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e6c:	f000 fbde 	bl	800862c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e72:	f000 f96f 	bl	8008154 <prvIsQueueEmpty>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f43f af6f 	beq.w	8007d5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3730      	adds	r7, #48	@ 0x30
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08e      	sub	sp, #56	@ 0x38
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10b      	bne.n	8007eba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	623b      	str	r3, [r7, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	e7fd      	b.n	8007eb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d103      	bne.n	8007ec8 <xQueueReceiveFromISR+0x3c>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <xQueueReceiveFromISR+0x40>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <xQueueReceiveFromISR+0x42>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10b      	bne.n	8007eea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	61fb      	str	r3, [r7, #28]
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop
 8007ee8:	e7fd      	b.n	8007ee6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eea:	f001 fa55 	bl	8009398 <vPortValidateInterruptPriority>
	__asm volatile
 8007eee:	f3ef 8211 	mrs	r2, BASEPRI
 8007ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	61ba      	str	r2, [r7, #24]
 8007f04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d02f      	beq.n	8007f76 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f24:	f000 f89e 	bl	8008064 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2a:	1e5a      	subs	r2, r3, #1
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d112      	bne.n	8007f60 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d016      	beq.n	8007f70 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	3310      	adds	r3, #16
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fd4a 	bl	80089e0 <xTaskRemoveFromEventList>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00e      	beq.n	8007f70 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00b      	beq.n	8007f70 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e007      	b.n	8007f70 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f64:	3301      	adds	r3, #1
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	b25a      	sxtb	r2, r3
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007f70:	2301      	movs	r3, #1
 8007f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f74:	e001      	b.n	8007f7a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f383 8811 	msr	BASEPRI, r3
}
 8007f84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3738      	adds	r7, #56	@ 0x38
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10d      	bne.n	8007fca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d14d      	bne.n	8008052 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 feee 	bl	8008d9c <xTaskPriorityDisinherit>
 8007fc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	e043      	b.n	8008052 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d119      	bne.n	8008004 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6858      	ldr	r0, [r3, #4]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	461a      	mov	r2, r3
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	f001 fe99 	bl	8009d12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe8:	441a      	add	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d32b      	bcc.n	8008052 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	e026      	b.n	8008052 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68d8      	ldr	r0, [r3, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800c:	461a      	mov	r2, r3
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	f001 fe7f 	bl	8009d12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801c:	425b      	negs	r3, r3
 800801e:	441a      	add	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d207      	bcs.n	8008040 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008038:	425b      	negs	r3, r3
 800803a:	441a      	add	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d105      	bne.n	8008052 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	3b01      	subs	r3, #1
 8008050:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800805a:	697b      	ldr	r3, [r7, #20]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	d018      	beq.n	80080a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807e:	441a      	add	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	429a      	cmp	r2, r3
 800808e:	d303      	bcc.n	8008098 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68d9      	ldr	r1, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a0:	461a      	mov	r2, r3
 80080a2:	6838      	ldr	r0, [r7, #0]
 80080a4:	f001 fe35 	bl	8009d12 <memcpy>
	}
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080b8:	f001 f88e 	bl	80091d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080c4:	e011      	b.n	80080ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d012      	beq.n	80080f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3324      	adds	r3, #36	@ 0x24
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fc84 	bl	80089e0 <xTaskRemoveFromEventList>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080de:	f000 fd5d 	bl	8008b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dce9      	bgt.n	80080c6 <prvUnlockQueue+0x16>
 80080f2:	e000      	b.n	80080f6 <prvUnlockQueue+0x46>
					break;
 80080f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	22ff      	movs	r2, #255	@ 0xff
 80080fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080fe:	f001 f89d 	bl	800923c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008102:	f001 f869 	bl	80091d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800810c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800810e:	e011      	b.n	8008134 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d012      	beq.n	800813e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3310      	adds	r3, #16
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fc5f 	bl	80089e0 <xTaskRemoveFromEventList>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008128:	f000 fd38 	bl	8008b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	3b01      	subs	r3, #1
 8008130:	b2db      	uxtb	r3, r3
 8008132:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dce9      	bgt.n	8008110 <prvUnlockQueue+0x60>
 800813c:	e000      	b.n	8008140 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800813e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	22ff      	movs	r2, #255	@ 0xff
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008148:	f001 f878 	bl	800923c <vPortExitCritical>
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800815c:	f001 f83c 	bl	80091d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008164:	2b00      	cmp	r3, #0
 8008166:	d102      	bne.n	800816e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008168:	2301      	movs	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	e001      	b.n	8008172 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008172:	f001 f863 	bl	800923c <vPortExitCritical>

	return xReturn;
 8008176:	68fb      	ldr	r3, [r7, #12]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008188:	f001 f826 	bl	80091d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008194:	429a      	cmp	r2, r3
 8008196:	d102      	bne.n	800819e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008198:	2301      	movs	r3, #1
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	e001      	b.n	80081a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081a2:	f001 f84b 	bl	800923c <vPortExitCritical>

	return xReturn;
 80081a6:	68fb      	ldr	r3, [r7, #12]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08e      	sub	sp, #56	@ 0x38
 80081b4:	af04      	add	r7, sp, #16
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10b      	bne.n	80081dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	623b      	str	r3, [r7, #32]
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	e7fd      	b.n	80081d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	61fb      	str	r3, [r7, #28]
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081fa:	2354      	movs	r3, #84	@ 0x54
 80081fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b54      	cmp	r3, #84	@ 0x54
 8008202:	d00b      	beq.n	800821c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61bb      	str	r3, [r7, #24]
}
 8008216:	bf00      	nop
 8008218:	bf00      	nop
 800821a:	e7fd      	b.n	8008218 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800821c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01e      	beq.n	8008262 <xTaskCreateStatic+0xb2>
 8008224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01b      	beq.n	8008262 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800822a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008232:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	2202      	movs	r2, #2
 8008238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800823c:	2300      	movs	r3, #0
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008242:	9302      	str	r3, [sp, #8]
 8008244:	f107 0314 	add.w	r3, r7, #20
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 f850 	bl	80082fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800825a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800825c:	f000 f8d6 	bl	800840c <prvAddNewTaskToReadyList>
 8008260:	e001      	b.n	8008266 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008266:	697b      	ldr	r3, [r7, #20]
	}
 8008268:	4618      	mov	r0, r3
 800826a:	3728      	adds	r7, #40	@ 0x28
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08c      	sub	sp, #48	@ 0x30
 8008274:	af04      	add	r7, sp, #16
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	4613      	mov	r3, r2
 800827e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008280:	88fb      	ldrh	r3, [r7, #6]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4618      	mov	r0, r3
 8008286:	f001 f8c9 	bl	800941c <pvPortMalloc>
 800828a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00e      	beq.n	80082b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008292:	2054      	movs	r0, #84	@ 0x54
 8008294:	f001 f8c2 	bl	800941c <pvPortMalloc>
 8008298:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80082a6:	e005      	b.n	80082b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082a8:	6978      	ldr	r0, [r7, #20]
 80082aa:	f001 f985 	bl	80095b8 <vPortFree>
 80082ae:	e001      	b.n	80082b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d017      	beq.n	80082ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082c2:	88fa      	ldrh	r2, [r7, #6]
 80082c4:	2300      	movs	r3, #0
 80082c6:	9303      	str	r3, [sp, #12]
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	9302      	str	r3, [sp, #8]
 80082cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f80e 	bl	80082fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082de:	69f8      	ldr	r0, [r7, #28]
 80082e0:	f000 f894 	bl	800840c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082e4:	2301      	movs	r3, #1
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	e002      	b.n	80082f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295
 80082ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082f0:	69bb      	ldr	r3, [r7, #24]
	}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b088      	sub	sp, #32
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008312:	3b01      	subs	r3, #1
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	617b      	str	r3, [r7, #20]
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d01f      	beq.n	800838a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e012      	b.n	8008376 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4413      	add	r3, r2
 8008356:	7819      	ldrb	r1, [r3, #0]
 8008358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	3334      	adds	r3, #52	@ 0x34
 8008360:	460a      	mov	r2, r1
 8008362:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d006      	beq.n	800837e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	3301      	adds	r3, #1
 8008374:	61fb      	str	r3, [r7, #28]
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	2b0f      	cmp	r3, #15
 800837a:	d9e9      	bls.n	8008350 <prvInitialiseNewTask+0x56>
 800837c:	e000      	b.n	8008380 <prvInitialiseNewTask+0x86>
			{
				break;
 800837e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008388:	e003      	b.n	8008392 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	2b06      	cmp	r3, #6
 8008396:	d901      	bls.n	800839c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008398:	2306      	movs	r3, #6
 800839a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083a6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80083a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083aa:	2200      	movs	r2, #0
 80083ac:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b0:	3304      	adds	r3, #4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff f912 	bl	80075dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	3318      	adds	r3, #24
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff f90d 	bl	80075dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ca:	f1c3 0207 	rsb	r2, r3, #7
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083da:	2200      	movs	r2, #0
 80083dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	68f9      	ldr	r1, [r7, #12]
 80083ea:	69b8      	ldr	r0, [r7, #24]
 80083ec:	f000 fdc4 	bl	8008f78 <pxPortInitialiseStack>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008402:	bf00      	nop
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008414:	f000 fee0 	bl	80091d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008418:	4b2a      	ldr	r3, [pc, #168]	@ (80084c4 <prvAddNewTaskToReadyList+0xb8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3301      	adds	r3, #1
 800841e:	4a29      	ldr	r2, [pc, #164]	@ (80084c4 <prvAddNewTaskToReadyList+0xb8>)
 8008420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008422:	4b29      	ldr	r3, [pc, #164]	@ (80084c8 <prvAddNewTaskToReadyList+0xbc>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d109      	bne.n	800843e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800842a:	4a27      	ldr	r2, [pc, #156]	@ (80084c8 <prvAddNewTaskToReadyList+0xbc>)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008430:	4b24      	ldr	r3, [pc, #144]	@ (80084c4 <prvAddNewTaskToReadyList+0xb8>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d110      	bne.n	800845a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008438:	f000 fbd4 	bl	8008be4 <prvInitialiseTaskLists>
 800843c:	e00d      	b.n	800845a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800843e:	4b23      	ldr	r3, [pc, #140]	@ (80084cc <prvAddNewTaskToReadyList+0xc0>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d109      	bne.n	800845a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008446:	4b20      	ldr	r3, [pc, #128]	@ (80084c8 <prvAddNewTaskToReadyList+0xbc>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008450:	429a      	cmp	r2, r3
 8008452:	d802      	bhi.n	800845a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008454:	4a1c      	ldr	r2, [pc, #112]	@ (80084c8 <prvAddNewTaskToReadyList+0xbc>)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800845a:	4b1d      	ldr	r3, [pc, #116]	@ (80084d0 <prvAddNewTaskToReadyList+0xc4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3301      	adds	r3, #1
 8008460:	4a1b      	ldr	r2, [pc, #108]	@ (80084d0 <prvAddNewTaskToReadyList+0xc4>)
 8008462:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008468:	2201      	movs	r2, #1
 800846a:	409a      	lsls	r2, r3
 800846c:	4b19      	ldr	r3, [pc, #100]	@ (80084d4 <prvAddNewTaskToReadyList+0xc8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4313      	orrs	r3, r2
 8008472:	4a18      	ldr	r2, [pc, #96]	@ (80084d4 <prvAddNewTaskToReadyList+0xc8>)
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4a15      	ldr	r2, [pc, #84]	@ (80084d8 <prvAddNewTaskToReadyList+0xcc>)
 8008484:	441a      	add	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3304      	adds	r3, #4
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f7ff f8b2 	bl	80075f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008492:	f000 fed3 	bl	800923c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <prvAddNewTaskToReadyList+0xc0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00e      	beq.n	80084bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800849e:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <prvAddNewTaskToReadyList+0xbc>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d207      	bcs.n	80084bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084ac:	4b0b      	ldr	r3, [pc, #44]	@ (80084dc <prvAddNewTaskToReadyList+0xd0>)
 80084ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000e38 	.word	0x20000e38
 80084c8:	20000d38 	.word	0x20000d38
 80084cc:	20000e44 	.word	0x20000e44
 80084d0:	20000e54 	.word	0x20000e54
 80084d4:	20000e40 	.word	0x20000e40
 80084d8:	20000d3c 	.word	0x20000d3c
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d018      	beq.n	8008524 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084f2:	4b14      	ldr	r3, [pc, #80]	@ (8008544 <vTaskDelay+0x64>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <vTaskDelay+0x32>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	60bb      	str	r3, [r7, #8]
}
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	e7fd      	b.n	800850e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008512:	f000 f87d 	bl	8008610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008516:	2100      	movs	r1, #0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fcc7 	bl	8008eac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800851e:	f000 f885 	bl	800862c <xTaskResumeAll>
 8008522:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d107      	bne.n	800853a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800852a:	4b07      	ldr	r3, [pc, #28]	@ (8008548 <vTaskDelay+0x68>)
 800852c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000e60 	.word	0x20000e60
 8008548:	e000ed04 	.word	0xe000ed04

0800854c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08a      	sub	sp, #40	@ 0x28
 8008550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008556:	2300      	movs	r3, #0
 8008558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800855a:	463a      	mov	r2, r7
 800855c:	1d39      	adds	r1, r7, #4
 800855e:	f107 0308 	add.w	r3, r7, #8
 8008562:	4618      	mov	r0, r3
 8008564:	f7f8 f81a 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	9202      	str	r2, [sp, #8]
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	2300      	movs	r3, #0
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	2300      	movs	r3, #0
 8008578:	460a      	mov	r2, r1
 800857a:	491f      	ldr	r1, [pc, #124]	@ (80085f8 <vTaskStartScheduler+0xac>)
 800857c:	481f      	ldr	r0, [pc, #124]	@ (80085fc <vTaskStartScheduler+0xb0>)
 800857e:	f7ff fe17 	bl	80081b0 <xTaskCreateStatic>
 8008582:	4603      	mov	r3, r0
 8008584:	4a1e      	ldr	r2, [pc, #120]	@ (8008600 <vTaskStartScheduler+0xb4>)
 8008586:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008588:	4b1d      	ldr	r3, [pc, #116]	@ (8008600 <vTaskStartScheduler+0xb4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008590:	2301      	movs	r3, #1
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e001      	b.n	800859a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d116      	bne.n	80085ce <vTaskStartScheduler+0x82>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085b4:	4b13      	ldr	r3, [pc, #76]	@ (8008604 <vTaskStartScheduler+0xb8>)
 80085b6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085bc:	4b12      	ldr	r3, [pc, #72]	@ (8008608 <vTaskStartScheduler+0xbc>)
 80085be:	2201      	movs	r2, #1
 80085c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085c2:	4b12      	ldr	r3, [pc, #72]	@ (800860c <vTaskStartScheduler+0xc0>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085c8:	f000 fd62 	bl	8009090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085cc:	e00f      	b.n	80085ee <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d10b      	bne.n	80085ee <vTaskStartScheduler+0xa2>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60fb      	str	r3, [r7, #12]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <vTaskStartScheduler+0x9e>
}
 80085ee:	bf00      	nop
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	0800a8b4 	.word	0x0800a8b4
 80085fc:	08008bb5 	.word	0x08008bb5
 8008600:	20000e5c 	.word	0x20000e5c
 8008604:	20000e58 	.word	0x20000e58
 8008608:	20000e44 	.word	0x20000e44
 800860c:	20000e3c 	.word	0x20000e3c

08008610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008614:	4b04      	ldr	r3, [pc, #16]	@ (8008628 <vTaskSuspendAll+0x18>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3301      	adds	r3, #1
 800861a:	4a03      	ldr	r2, [pc, #12]	@ (8008628 <vTaskSuspendAll+0x18>)
 800861c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800861e:	bf00      	nop
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	20000e60 	.word	0x20000e60

0800862c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008636:	2300      	movs	r3, #0
 8008638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800863a:	4b42      	ldr	r3, [pc, #264]	@ (8008744 <xTaskResumeAll+0x118>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10b      	bne.n	800865a <xTaskResumeAll+0x2e>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	603b      	str	r3, [r7, #0]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800865a:	f000 fdbd 	bl	80091d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800865e:	4b39      	ldr	r3, [pc, #228]	@ (8008744 <xTaskResumeAll+0x118>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3b01      	subs	r3, #1
 8008664:	4a37      	ldr	r2, [pc, #220]	@ (8008744 <xTaskResumeAll+0x118>)
 8008666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008668:	4b36      	ldr	r3, [pc, #216]	@ (8008744 <xTaskResumeAll+0x118>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d161      	bne.n	8008734 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008670:	4b35      	ldr	r3, [pc, #212]	@ (8008748 <xTaskResumeAll+0x11c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d05d      	beq.n	8008734 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008678:	e02e      	b.n	80086d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867a:	4b34      	ldr	r3, [pc, #208]	@ (800874c <xTaskResumeAll+0x120>)
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3318      	adds	r3, #24
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff f812 	bl	80076b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3304      	adds	r3, #4
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff f80d 	bl	80076b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869a:	2201      	movs	r2, #1
 800869c:	409a      	lsls	r2, r3
 800869e:	4b2c      	ldr	r3, [pc, #176]	@ (8008750 <xTaskResumeAll+0x124>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	4a2a      	ldr	r2, [pc, #168]	@ (8008750 <xTaskResumeAll+0x124>)
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4a27      	ldr	r2, [pc, #156]	@ (8008754 <xTaskResumeAll+0x128>)
 80086b6:	441a      	add	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3304      	adds	r3, #4
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f7fe ff99 	bl	80075f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c8:	4b23      	ldr	r3, [pc, #140]	@ (8008758 <xTaskResumeAll+0x12c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d302      	bcc.n	80086d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086d2:	4b22      	ldr	r3, [pc, #136]	@ (800875c <xTaskResumeAll+0x130>)
 80086d4:	2201      	movs	r2, #1
 80086d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086d8:	4b1c      	ldr	r3, [pc, #112]	@ (800874c <xTaskResumeAll+0x120>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1cc      	bne.n	800867a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086e6:	f000 fb1b 	bl	8008d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008760 <xTaskResumeAll+0x134>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d010      	beq.n	8008718 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086f6:	f000 f837 	bl	8008768 <xTaskIncrementTick>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008700:	4b16      	ldr	r3, [pc, #88]	@ (800875c <xTaskResumeAll+0x130>)
 8008702:	2201      	movs	r2, #1
 8008704:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3b01      	subs	r3, #1
 800870a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f1      	bne.n	80086f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008712:	4b13      	ldr	r3, [pc, #76]	@ (8008760 <xTaskResumeAll+0x134>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008718:	4b10      	ldr	r3, [pc, #64]	@ (800875c <xTaskResumeAll+0x130>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d009      	beq.n	8008734 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008720:	2301      	movs	r3, #1
 8008722:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008724:	4b0f      	ldr	r3, [pc, #60]	@ (8008764 <xTaskResumeAll+0x138>)
 8008726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008734:	f000 fd82 	bl	800923c <vPortExitCritical>

	return xAlreadyYielded;
 8008738:	68bb      	ldr	r3, [r7, #8]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000e60 	.word	0x20000e60
 8008748:	20000e38 	.word	0x20000e38
 800874c:	20000df8 	.word	0x20000df8
 8008750:	20000e40 	.word	0x20000e40
 8008754:	20000d3c 	.word	0x20000d3c
 8008758:	20000d38 	.word	0x20000d38
 800875c:	20000e4c 	.word	0x20000e4c
 8008760:	20000e48 	.word	0x20000e48
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008772:	4b4f      	ldr	r3, [pc, #316]	@ (80088b0 <xTaskIncrementTick+0x148>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f040 808f 	bne.w	800889a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800877c:	4b4d      	ldr	r3, [pc, #308]	@ (80088b4 <xTaskIncrementTick+0x14c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008784:	4a4b      	ldr	r2, [pc, #300]	@ (80088b4 <xTaskIncrementTick+0x14c>)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d121      	bne.n	80087d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008790:	4b49      	ldr	r3, [pc, #292]	@ (80088b8 <xTaskIncrementTick+0x150>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00b      	beq.n	80087b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	603b      	str	r3, [r7, #0]
}
 80087ac:	bf00      	nop
 80087ae:	bf00      	nop
 80087b0:	e7fd      	b.n	80087ae <xTaskIncrementTick+0x46>
 80087b2:	4b41      	ldr	r3, [pc, #260]	@ (80088b8 <xTaskIncrementTick+0x150>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	4b40      	ldr	r3, [pc, #256]	@ (80088bc <xTaskIncrementTick+0x154>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a3e      	ldr	r2, [pc, #248]	@ (80088b8 <xTaskIncrementTick+0x150>)
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	4a3e      	ldr	r2, [pc, #248]	@ (80088bc <xTaskIncrementTick+0x154>)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4b3e      	ldr	r3, [pc, #248]	@ (80088c0 <xTaskIncrementTick+0x158>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3301      	adds	r3, #1
 80087cc:	4a3c      	ldr	r2, [pc, #240]	@ (80088c0 <xTaskIncrementTick+0x158>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	f000 faa6 	bl	8008d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087d4:	4b3b      	ldr	r3, [pc, #236]	@ (80088c4 <xTaskIncrementTick+0x15c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d348      	bcc.n	8008870 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087de:	4b36      	ldr	r3, [pc, #216]	@ (80088b8 <xTaskIncrementTick+0x150>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e8:	4b36      	ldr	r3, [pc, #216]	@ (80088c4 <xTaskIncrementTick+0x15c>)
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	601a      	str	r2, [r3, #0]
					break;
 80087f0:	e03e      	b.n	8008870 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f2:	4b31      	ldr	r3, [pc, #196]	@ (80088b8 <xTaskIncrementTick+0x150>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	429a      	cmp	r2, r3
 8008808:	d203      	bcs.n	8008812 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800880a:	4a2e      	ldr	r2, [pc, #184]	@ (80088c4 <xTaskIncrementTick+0x15c>)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008810:	e02e      	b.n	8008870 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	3304      	adds	r3, #4
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe ff4a 	bl	80076b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	3318      	adds	r3, #24
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe ff41 	bl	80076b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008832:	2201      	movs	r2, #1
 8008834:	409a      	lsls	r2, r3
 8008836:	4b24      	ldr	r3, [pc, #144]	@ (80088c8 <xTaskIncrementTick+0x160>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4313      	orrs	r3, r2
 800883c:	4a22      	ldr	r2, [pc, #136]	@ (80088c8 <xTaskIncrementTick+0x160>)
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4a1f      	ldr	r2, [pc, #124]	@ (80088cc <xTaskIncrementTick+0x164>)
 800884e:	441a      	add	r2, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	3304      	adds	r3, #4
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f7fe fecd 	bl	80075f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008860:	4b1b      	ldr	r3, [pc, #108]	@ (80088d0 <xTaskIncrementTick+0x168>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008866:	429a      	cmp	r2, r3
 8008868:	d3b9      	bcc.n	80087de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800886a:	2301      	movs	r3, #1
 800886c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800886e:	e7b6      	b.n	80087de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008870:	4b17      	ldr	r3, [pc, #92]	@ (80088d0 <xTaskIncrementTick+0x168>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008876:	4915      	ldr	r1, [pc, #84]	@ (80088cc <xTaskIncrementTick+0x164>)
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d901      	bls.n	800888c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008888:	2301      	movs	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800888c:	4b11      	ldr	r3, [pc, #68]	@ (80088d4 <xTaskIncrementTick+0x16c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d007      	beq.n	80088a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008894:	2301      	movs	r3, #1
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	e004      	b.n	80088a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800889a:	4b0f      	ldr	r3, [pc, #60]	@ (80088d8 <xTaskIncrementTick+0x170>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3301      	adds	r3, #1
 80088a0:	4a0d      	ldr	r2, [pc, #52]	@ (80088d8 <xTaskIncrementTick+0x170>)
 80088a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088a4:	697b      	ldr	r3, [r7, #20]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20000e60 	.word	0x20000e60
 80088b4:	20000e3c 	.word	0x20000e3c
 80088b8:	20000df0 	.word	0x20000df0
 80088bc:	20000df4 	.word	0x20000df4
 80088c0:	20000e50 	.word	0x20000e50
 80088c4:	20000e58 	.word	0x20000e58
 80088c8:	20000e40 	.word	0x20000e40
 80088cc:	20000d3c 	.word	0x20000d3c
 80088d0:	20000d38 	.word	0x20000d38
 80088d4:	20000e4c 	.word	0x20000e4c
 80088d8:	20000e48 	.word	0x20000e48

080088dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088e2:	4b27      	ldr	r3, [pc, #156]	@ (8008980 <vTaskSwitchContext+0xa4>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088ea:	4b26      	ldr	r3, [pc, #152]	@ (8008984 <vTaskSwitchContext+0xa8>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088f0:	e040      	b.n	8008974 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80088f2:	4b24      	ldr	r3, [pc, #144]	@ (8008984 <vTaskSwitchContext+0xa8>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f8:	4b23      	ldr	r3, [pc, #140]	@ (8008988 <vTaskSwitchContext+0xac>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	fab3 f383 	clz	r3, r3
 8008904:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008906:	7afb      	ldrb	r3, [r7, #11]
 8008908:	f1c3 031f 	rsb	r3, r3, #31
 800890c:	617b      	str	r3, [r7, #20]
 800890e:	491f      	ldr	r1, [pc, #124]	@ (800898c <vTaskSwitchContext+0xb0>)
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	4613      	mov	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	440b      	add	r3, r1
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10b      	bne.n	800893a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	607b      	str	r3, [r7, #4]
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	e7fd      	b.n	8008936 <vTaskSwitchContext+0x5a>
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4a11      	ldr	r2, [pc, #68]	@ (800898c <vTaskSwitchContext+0xb0>)
 8008946:	4413      	add	r3, r2
 8008948:	613b      	str	r3, [r7, #16]
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	605a      	str	r2, [r3, #4]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	3308      	adds	r3, #8
 800895c:	429a      	cmp	r2, r3
 800895e:	d104      	bne.n	800896a <vTaskSwitchContext+0x8e>
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	605a      	str	r2, [r3, #4]
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	4a07      	ldr	r2, [pc, #28]	@ (8008990 <vTaskSwitchContext+0xb4>)
 8008972:	6013      	str	r3, [r2, #0]
}
 8008974:	bf00      	nop
 8008976:	371c      	adds	r7, #28
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	20000e60 	.word	0x20000e60
 8008984:	20000e4c 	.word	0x20000e4c
 8008988:	20000e40 	.word	0x20000e40
 800898c:	20000d3c 	.word	0x20000d3c
 8008990:	20000d38 	.word	0x20000d38

08008994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10b      	bne.n	80089bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60fb      	str	r3, [r7, #12]
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089bc:	4b07      	ldr	r3, [pc, #28]	@ (80089dc <vTaskPlaceOnEventList+0x48>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3318      	adds	r3, #24
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fe fe3a 	bl	800763e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089ca:	2101      	movs	r1, #1
 80089cc:	6838      	ldr	r0, [r7, #0]
 80089ce:	f000 fa6d 	bl	8008eac <prvAddCurrentTaskToDelayedList>
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000d38 	.word	0x20000d38

080089e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10b      	bne.n	8008a0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	60fb      	str	r3, [r7, #12]
}
 8008a08:	bf00      	nop
 8008a0a:	bf00      	nop
 8008a0c:	e7fd      	b.n	8008a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	3318      	adds	r3, #24
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fe4c 	bl	80076b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a18:	4b1d      	ldr	r3, [pc, #116]	@ (8008a90 <xTaskRemoveFromEventList+0xb0>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d11c      	bne.n	8008a5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe fe43 	bl	80076b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	2201      	movs	r2, #1
 8008a30:	409a      	lsls	r2, r3
 8008a32:	4b18      	ldr	r3, [pc, #96]	@ (8008a94 <xTaskRemoveFromEventList+0xb4>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	4a16      	ldr	r2, [pc, #88]	@ (8008a94 <xTaskRemoveFromEventList+0xb4>)
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4a13      	ldr	r2, [pc, #76]	@ (8008a98 <xTaskRemoveFromEventList+0xb8>)
 8008a4a:	441a      	add	r2, r3
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f7fe fdcf 	bl	80075f6 <vListInsertEnd>
 8008a58:	e005      	b.n	8008a66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3318      	adds	r3, #24
 8008a5e:	4619      	mov	r1, r3
 8008a60:	480e      	ldr	r0, [pc, #56]	@ (8008a9c <xTaskRemoveFromEventList+0xbc>)
 8008a62:	f7fe fdc8 	bl	80075f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa0 <xTaskRemoveFromEventList+0xc0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d905      	bls.n	8008a80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a78:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa4 <xTaskRemoveFromEventList+0xc4>)
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e001      	b.n	8008a84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a84:	697b      	ldr	r3, [r7, #20]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000e60 	.word	0x20000e60
 8008a94:	20000e40 	.word	0x20000e40
 8008a98:	20000d3c 	.word	0x20000d3c
 8008a9c:	20000df8 	.word	0x20000df8
 8008aa0:	20000d38 	.word	0x20000d38
 8008aa4:	20000e4c 	.word	0x20000e4c

08008aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <vTaskInternalSetTimeOutState+0x24>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ab8:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <vTaskInternalSetTimeOutState+0x28>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	605a      	str	r2, [r3, #4]
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20000e50 	.word	0x20000e50
 8008ad0:	20000e3c 	.word	0x20000e3c

08008ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	613b      	str	r3, [r7, #16]
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10b      	bne.n	8008b1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60fb      	str	r3, [r7, #12]
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	e7fd      	b.n	8008b16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b1a:	f000 fb5d 	bl	80091d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b94 <xTaskCheckForTimeOut+0xc0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b36:	d102      	bne.n	8008b3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	e023      	b.n	8008b86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4b15      	ldr	r3, [pc, #84]	@ (8008b98 <xTaskCheckForTimeOut+0xc4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d007      	beq.n	8008b5a <xTaskCheckForTimeOut+0x86>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d302      	bcc.n	8008b5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	61fb      	str	r3, [r7, #28]
 8008b58:	e015      	b.n	8008b86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d20b      	bcs.n	8008b7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	1ad2      	subs	r2, r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff ff99 	bl	8008aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	e004      	b.n	8008b86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b82:	2301      	movs	r3, #1
 8008b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b86:	f000 fb59 	bl	800923c <vPortExitCritical>

	return xReturn;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20000e3c 	.word	0x20000e3c
 8008b98:	20000e50 	.word	0x20000e50

08008b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ba0:	4b03      	ldr	r3, [pc, #12]	@ (8008bb0 <vTaskMissedYield+0x14>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]
}
 8008ba6:	bf00      	nop
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20000e4c 	.word	0x20000e4c

08008bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bbc:	f000 f852 	bl	8008c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bc0:	4b06      	ldr	r3, [pc, #24]	@ (8008bdc <prvIdleTask+0x28>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d9f9      	bls.n	8008bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bc8:	4b05      	ldr	r3, [pc, #20]	@ (8008be0 <prvIdleTask+0x2c>)
 8008bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bd8:	e7f0      	b.n	8008bbc <prvIdleTask+0x8>
 8008bda:	bf00      	nop
 8008bdc:	20000d3c 	.word	0x20000d3c
 8008be0:	e000ed04 	.word	0xe000ed04

08008be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bea:	2300      	movs	r3, #0
 8008bec:	607b      	str	r3, [r7, #4]
 8008bee:	e00c      	b.n	8008c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4a12      	ldr	r2, [pc, #72]	@ (8008c44 <prvInitialiseTaskLists+0x60>)
 8008bfc:	4413      	add	r3, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fccc 	bl	800759c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3301      	adds	r3, #1
 8008c08:	607b      	str	r3, [r7, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b06      	cmp	r3, #6
 8008c0e:	d9ef      	bls.n	8008bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c10:	480d      	ldr	r0, [pc, #52]	@ (8008c48 <prvInitialiseTaskLists+0x64>)
 8008c12:	f7fe fcc3 	bl	800759c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c16:	480d      	ldr	r0, [pc, #52]	@ (8008c4c <prvInitialiseTaskLists+0x68>)
 8008c18:	f7fe fcc0 	bl	800759c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c1c:	480c      	ldr	r0, [pc, #48]	@ (8008c50 <prvInitialiseTaskLists+0x6c>)
 8008c1e:	f7fe fcbd 	bl	800759c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c22:	480c      	ldr	r0, [pc, #48]	@ (8008c54 <prvInitialiseTaskLists+0x70>)
 8008c24:	f7fe fcba 	bl	800759c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c28:	480b      	ldr	r0, [pc, #44]	@ (8008c58 <prvInitialiseTaskLists+0x74>)
 8008c2a:	f7fe fcb7 	bl	800759c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c5c <prvInitialiseTaskLists+0x78>)
 8008c30:	4a05      	ldr	r2, [pc, #20]	@ (8008c48 <prvInitialiseTaskLists+0x64>)
 8008c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c34:	4b0a      	ldr	r3, [pc, #40]	@ (8008c60 <prvInitialiseTaskLists+0x7c>)
 8008c36:	4a05      	ldr	r2, [pc, #20]	@ (8008c4c <prvInitialiseTaskLists+0x68>)
 8008c38:	601a      	str	r2, [r3, #0]
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000d3c 	.word	0x20000d3c
 8008c48:	20000dc8 	.word	0x20000dc8
 8008c4c:	20000ddc 	.word	0x20000ddc
 8008c50:	20000df8 	.word	0x20000df8
 8008c54:	20000e0c 	.word	0x20000e0c
 8008c58:	20000e24 	.word	0x20000e24
 8008c5c:	20000df0 	.word	0x20000df0
 8008c60:	20000df4 	.word	0x20000df4

08008c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c6a:	e019      	b.n	8008ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c6c:	f000 fab4 	bl	80091d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c70:	4b10      	ldr	r3, [pc, #64]	@ (8008cb4 <prvCheckTasksWaitingTermination+0x50>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe fd17 	bl	80076b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c82:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb8 <prvCheckTasksWaitingTermination+0x54>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	4a0b      	ldr	r2, [pc, #44]	@ (8008cb8 <prvCheckTasksWaitingTermination+0x54>)
 8008c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008cbc <prvCheckTasksWaitingTermination+0x58>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	4a0a      	ldr	r2, [pc, #40]	@ (8008cbc <prvCheckTasksWaitingTermination+0x58>)
 8008c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c96:	f000 fad1 	bl	800923c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f810 	bl	8008cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca0:	4b06      	ldr	r3, [pc, #24]	@ (8008cbc <prvCheckTasksWaitingTermination+0x58>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e1      	bne.n	8008c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000e0c 	.word	0x20000e0c
 8008cb8:	20000e38 	.word	0x20000e38
 8008cbc:	20000e20 	.word	0x20000e20

08008cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d108      	bne.n	8008ce4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 fc6e 	bl	80095b8 <vPortFree>
				vPortFree( pxTCB );
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fc6b 	bl	80095b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ce2:	e019      	b.n	8008d18 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d103      	bne.n	8008cf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fc62 	bl	80095b8 <vPortFree>
	}
 8008cf4:	e010      	b.n	8008d18 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d00b      	beq.n	8008d18 <prvDeleteTCB+0x58>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	60fb      	str	r3, [r7, #12]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <prvDeleteTCB+0x54>
	}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d26:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <prvResetNextTaskUnblockTime+0x38>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d104      	bne.n	8008d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d30:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <prvResetNextTaskUnblockTime+0x3c>)
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295
 8008d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d38:	e008      	b.n	8008d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3a:	4b07      	ldr	r3, [pc, #28]	@ (8008d58 <prvResetNextTaskUnblockTime+0x38>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4a04      	ldr	r2, [pc, #16]	@ (8008d5c <prvResetNextTaskUnblockTime+0x3c>)
 8008d4a:	6013      	str	r3, [r2, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	20000df0 	.word	0x20000df0
 8008d5c:	20000e58 	.word	0x20000e58

08008d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d66:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <xTaskGetSchedulerState+0x34>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d102      	bne.n	8008d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	607b      	str	r3, [r7, #4]
 8008d72:	e008      	b.n	8008d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d74:	4b08      	ldr	r3, [pc, #32]	@ (8008d98 <xTaskGetSchedulerState+0x38>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d102      	bne.n	8008d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	607b      	str	r3, [r7, #4]
 8008d80:	e001      	b.n	8008d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d82:	2300      	movs	r3, #0
 8008d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d86:	687b      	ldr	r3, [r7, #4]
	}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	20000e44 	.word	0x20000e44
 8008d98:	20000e60 	.word	0x20000e60

08008d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d070      	beq.n	8008e94 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008db2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ea0 <xTaskPriorityDisinherit+0x104>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d00b      	beq.n	8008dd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	60fb      	str	r3, [r7, #12]
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	e7fd      	b.n	8008dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10b      	bne.n	8008df4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	60bb      	str	r3, [r7, #8]
}
 8008dee:	bf00      	nop
 8008df0:	bf00      	nop
 8008df2:	e7fd      	b.n	8008df0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d044      	beq.n	8008e94 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d140      	bne.n	8008e94 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fc4a 	bl	80076b0 <uxListRemove>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d115      	bne.n	8008e4e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e26:	491f      	ldr	r1, [pc, #124]	@ (8008ea4 <xTaskPriorityDisinherit+0x108>)
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <xTaskPriorityDisinherit+0xb2>
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e42:	43da      	mvns	r2, r3
 8008e44:	4b18      	ldr	r3, [pc, #96]	@ (8008ea8 <xTaskPriorityDisinherit+0x10c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	4a17      	ldr	r2, [pc, #92]	@ (8008ea8 <xTaskPriorityDisinherit+0x10c>)
 8008e4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5a:	f1c3 0207 	rsb	r2, r3, #7
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e66:	2201      	movs	r2, #1
 8008e68:	409a      	lsls	r2, r3
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea8 <xTaskPriorityDisinherit+0x10c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	4a0d      	ldr	r2, [pc, #52]	@ (8008ea8 <xTaskPriorityDisinherit+0x10c>)
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e78:	4613      	mov	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4a08      	ldr	r2, [pc, #32]	@ (8008ea4 <xTaskPriorityDisinherit+0x108>)
 8008e82:	441a      	add	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f7fe fbb3 	bl	80075f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e94:	697b      	ldr	r3, [r7, #20]
	}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000d38 	.word	0x20000d38
 8008ea4:	20000d3c 	.word	0x20000d3c
 8008ea8:	20000e40 	.word	0x20000e40

08008eac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008eb6:	4b29      	ldr	r3, [pc, #164]	@ (8008f5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ebc:	4b28      	ldr	r3, [pc, #160]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fbf4 	bl	80076b0 <uxListRemove>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008ece:	4b24      	ldr	r3, [pc, #144]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	43da      	mvns	r2, r3
 8008edc:	4b21      	ldr	r3, [pc, #132]	@ (8008f64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	4a20      	ldr	r2, [pc, #128]	@ (8008f64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ee4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eec:	d10a      	bne.n	8008f04 <prvAddCurrentTaskToDelayedList+0x58>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	481a      	ldr	r0, [pc, #104]	@ (8008f68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008efe:	f7fe fb7a 	bl	80075f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f02:	e026      	b.n	8008f52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4413      	add	r3, r2
 8008f0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f0c:	4b14      	ldr	r3, [pc, #80]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d209      	bcs.n	8008f30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f1c:	4b13      	ldr	r3, [pc, #76]	@ (8008f6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	4b0f      	ldr	r3, [pc, #60]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f7fe fb88 	bl	800763e <vListInsert>
}
 8008f2e:	e010      	b.n	8008f52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f30:	4b0f      	ldr	r3, [pc, #60]	@ (8008f70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	4b0a      	ldr	r3, [pc, #40]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f7fe fb7e 	bl	800763e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f42:	4b0c      	ldr	r3, [pc, #48]	@ (8008f74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d202      	bcs.n	8008f52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f4c:	4a09      	ldr	r2, [pc, #36]	@ (8008f74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6013      	str	r3, [r2, #0]
}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000e3c 	.word	0x20000e3c
 8008f60:	20000d38 	.word	0x20000d38
 8008f64:	20000e40 	.word	0x20000e40
 8008f68:	20000e24 	.word	0x20000e24
 8008f6c:	20000df4 	.word	0x20000df4
 8008f70:	20000df0 	.word	0x20000df0
 8008f74:	20000e58 	.word	0x20000e58

08008f78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3b04      	subs	r3, #4
 8008f88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3b04      	subs	r3, #4
 8008f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f023 0201 	bic.w	r2, r3, #1
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3b04      	subs	r3, #4
 8008fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8008fdc <pxPortInitialiseStack+0x64>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3b14      	subs	r3, #20
 8008fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f06f 0202 	mvn.w	r2, #2
 8008fc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3b20      	subs	r3, #32
 8008fcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fce:	68fb      	ldr	r3, [r7, #12]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	08008fe1 	.word	0x08008fe1

08008fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fea:	4b13      	ldr	r3, [pc, #76]	@ (8009038 <prvTaskExitError+0x58>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d00b      	beq.n	800900c <prvTaskExitError+0x2c>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	60fb      	str	r3, [r7, #12]
}
 8009006:	bf00      	nop
 8009008:	bf00      	nop
 800900a:	e7fd      	b.n	8009008 <prvTaskExitError+0x28>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009020:	bf00      	nop
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0fc      	beq.n	8009022 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	2000000c 	.word	0x2000000c
 800903c:	00000000 	.word	0x00000000

08009040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009040:	4b07      	ldr	r3, [pc, #28]	@ (8009060 <pxCurrentTCBConst2>)
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	6808      	ldr	r0, [r1, #0]
 8009046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	f380 8809 	msr	PSP, r0
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f04f 0000 	mov.w	r0, #0
 8009056:	f380 8811 	msr	BASEPRI, r0
 800905a:	4770      	bx	lr
 800905c:	f3af 8000 	nop.w

08009060 <pxCurrentTCBConst2>:
 8009060:	20000d38 	.word	0x20000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop

08009068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009068:	4808      	ldr	r0, [pc, #32]	@ (800908c <prvPortStartFirstTask+0x24>)
 800906a:	6800      	ldr	r0, [r0, #0]
 800906c:	6800      	ldr	r0, [r0, #0]
 800906e:	f380 8808 	msr	MSP, r0
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8814 	msr	CONTROL, r0
 800907a:	b662      	cpsie	i
 800907c:	b661      	cpsie	f
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	df00      	svc	0
 8009088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800908a:	bf00      	nop
 800908c:	e000ed08 	.word	0xe000ed08

08009090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009096:	4b47      	ldr	r3, [pc, #284]	@ (80091b4 <xPortStartScheduler+0x124>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a47      	ldr	r2, [pc, #284]	@ (80091b8 <xPortStartScheduler+0x128>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10b      	bne.n	80090b8 <xPortStartScheduler+0x28>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	60fb      	str	r3, [r7, #12]
}
 80090b2:	bf00      	nop
 80090b4:	bf00      	nop
 80090b6:	e7fd      	b.n	80090b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090b8:	4b3e      	ldr	r3, [pc, #248]	@ (80091b4 <xPortStartScheduler+0x124>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a3f      	ldr	r2, [pc, #252]	@ (80091bc <xPortStartScheduler+0x12c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d10b      	bne.n	80090da <xPortStartScheduler+0x4a>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	613b      	str	r3, [r7, #16]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090da:	4b39      	ldr	r3, [pc, #228]	@ (80091c0 <xPortStartScheduler+0x130>)
 80090dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	22ff      	movs	r2, #255	@ 0xff
 80090ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	4b31      	ldr	r3, [pc, #196]	@ (80091c4 <xPortStartScheduler+0x134>)
 8009100:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009102:	4b31      	ldr	r3, [pc, #196]	@ (80091c8 <xPortStartScheduler+0x138>)
 8009104:	2207      	movs	r2, #7
 8009106:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009108:	e009      	b.n	800911e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800910a:	4b2f      	ldr	r3, [pc, #188]	@ (80091c8 <xPortStartScheduler+0x138>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3b01      	subs	r3, #1
 8009110:	4a2d      	ldr	r2, [pc, #180]	@ (80091c8 <xPortStartScheduler+0x138>)
 8009112:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	b2db      	uxtb	r3, r3
 800911c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009126:	2b80      	cmp	r3, #128	@ 0x80
 8009128:	d0ef      	beq.n	800910a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800912a:	4b27      	ldr	r3, [pc, #156]	@ (80091c8 <xPortStartScheduler+0x138>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f1c3 0307 	rsb	r3, r3, #7
 8009132:	2b04      	cmp	r3, #4
 8009134:	d00b      	beq.n	800914e <xPortStartScheduler+0xbe>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	60bb      	str	r3, [r7, #8]
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	e7fd      	b.n	800914a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800914e:	4b1e      	ldr	r3, [pc, #120]	@ (80091c8 <xPortStartScheduler+0x138>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	4a1c      	ldr	r2, [pc, #112]	@ (80091c8 <xPortStartScheduler+0x138>)
 8009156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009158:	4b1b      	ldr	r3, [pc, #108]	@ (80091c8 <xPortStartScheduler+0x138>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009160:	4a19      	ldr	r2, [pc, #100]	@ (80091c8 <xPortStartScheduler+0x138>)
 8009162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	b2da      	uxtb	r2, r3
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800916c:	4b17      	ldr	r3, [pc, #92]	@ (80091cc <xPortStartScheduler+0x13c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a16      	ldr	r2, [pc, #88]	@ (80091cc <xPortStartScheduler+0x13c>)
 8009172:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009178:	4b14      	ldr	r3, [pc, #80]	@ (80091cc <xPortStartScheduler+0x13c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a13      	ldr	r2, [pc, #76]	@ (80091cc <xPortStartScheduler+0x13c>)
 800917e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009184:	f000 f8da 	bl	800933c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009188:	4b11      	ldr	r3, [pc, #68]	@ (80091d0 <xPortStartScheduler+0x140>)
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800918e:	f000 f8f9 	bl	8009384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009192:	4b10      	ldr	r3, [pc, #64]	@ (80091d4 <xPortStartScheduler+0x144>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a0f      	ldr	r2, [pc, #60]	@ (80091d4 <xPortStartScheduler+0x144>)
 8009198:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800919c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800919e:	f7ff ff63 	bl	8009068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091a2:	f7ff fb9b 	bl	80088dc <vTaskSwitchContext>
	prvTaskExitError();
 80091a6:	f7ff ff1b 	bl	8008fe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	e000ed00 	.word	0xe000ed00
 80091b8:	410fc271 	.word	0x410fc271
 80091bc:	410fc270 	.word	0x410fc270
 80091c0:	e000e400 	.word	0xe000e400
 80091c4:	20000e64 	.word	0x20000e64
 80091c8:	20000e68 	.word	0x20000e68
 80091cc:	e000ed20 	.word	0xe000ed20
 80091d0:	2000000c 	.word	0x2000000c
 80091d4:	e000ef34 	.word	0xe000ef34

080091d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
}
 80091f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091f2:	4b10      	ldr	r3, [pc, #64]	@ (8009234 <vPortEnterCritical+0x5c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009234 <vPortEnterCritical+0x5c>)
 80091fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <vPortEnterCritical+0x5c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d110      	bne.n	8009226 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009204:	4b0c      	ldr	r3, [pc, #48]	@ (8009238 <vPortEnterCritical+0x60>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00b      	beq.n	8009226 <vPortEnterCritical+0x4e>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	603b      	str	r3, [r7, #0]
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	e7fd      	b.n	8009222 <vPortEnterCritical+0x4a>
	}
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	2000000c 	.word	0x2000000c
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009242:	4b12      	ldr	r3, [pc, #72]	@ (800928c <vPortExitCritical+0x50>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10b      	bne.n	8009262 <vPortExitCritical+0x26>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	607b      	str	r3, [r7, #4]
}
 800925c:	bf00      	nop
 800925e:	bf00      	nop
 8009260:	e7fd      	b.n	800925e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009262:	4b0a      	ldr	r3, [pc, #40]	@ (800928c <vPortExitCritical+0x50>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3b01      	subs	r3, #1
 8009268:	4a08      	ldr	r2, [pc, #32]	@ (800928c <vPortExitCritical+0x50>)
 800926a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800926c:	4b07      	ldr	r3, [pc, #28]	@ (800928c <vPortExitCritical+0x50>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d105      	bne.n	8009280 <vPortExitCritical+0x44>
 8009274:	2300      	movs	r3, #0
 8009276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	f383 8811 	msr	BASEPRI, r3
}
 800927e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	2000000c 	.word	0x2000000c

08009290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009290:	f3ef 8009 	mrs	r0, PSP
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	4b15      	ldr	r3, [pc, #84]	@ (80092f0 <pxCurrentTCBConst>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	f01e 0f10 	tst.w	lr, #16
 80092a0:	bf08      	it	eq
 80092a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092aa:	6010      	str	r0, [r2, #0]
 80092ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80092b4:	f380 8811 	msr	BASEPRI, r0
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f7ff fb0c 	bl	80088dc <vTaskSwitchContext>
 80092c4:	f04f 0000 	mov.w	r0, #0
 80092c8:	f380 8811 	msr	BASEPRI, r0
 80092cc:	bc09      	pop	{r0, r3}
 80092ce:	6819      	ldr	r1, [r3, #0]
 80092d0:	6808      	ldr	r0, [r1, #0]
 80092d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d6:	f01e 0f10 	tst.w	lr, #16
 80092da:	bf08      	it	eq
 80092dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092e0:	f380 8809 	msr	PSP, r0
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	f3af 8000 	nop.w

080092f0 <pxCurrentTCBConst>:
 80092f0:	20000d38 	.word	0x20000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop

080092f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
}
 8009310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009312:	f7ff fa29 	bl	8008768 <xTaskIncrementTick>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800931c:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <xPortSysTickHandler+0x40>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	2300      	movs	r3, #0
 8009326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f383 8811 	msr	BASEPRI, r3
}
 800932e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009340:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <vPortSetupTimerInterrupt+0x34>)
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009346:	4b0b      	ldr	r3, [pc, #44]	@ (8009374 <vPortSetupTimerInterrupt+0x38>)
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800934c:	4b0a      	ldr	r3, [pc, #40]	@ (8009378 <vPortSetupTimerInterrupt+0x3c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a0a      	ldr	r2, [pc, #40]	@ (800937c <vPortSetupTimerInterrupt+0x40>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	099b      	lsrs	r3, r3, #6
 8009358:	4a09      	ldr	r2, [pc, #36]	@ (8009380 <vPortSetupTimerInterrupt+0x44>)
 800935a:	3b01      	subs	r3, #1
 800935c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800935e:	4b04      	ldr	r3, [pc, #16]	@ (8009370 <vPortSetupTimerInterrupt+0x34>)
 8009360:	2207      	movs	r2, #7
 8009362:	601a      	str	r2, [r3, #0]
}
 8009364:	bf00      	nop
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	e000e010 	.word	0xe000e010
 8009374:	e000e018 	.word	0xe000e018
 8009378:	20000000 	.word	0x20000000
 800937c:	10624dd3 	.word	0x10624dd3
 8009380:	e000e014 	.word	0xe000e014

08009384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009394 <vPortEnableVFP+0x10>
 8009388:	6801      	ldr	r1, [r0, #0]
 800938a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800938e:	6001      	str	r1, [r0, #0]
 8009390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009392:	bf00      	nop
 8009394:	e000ed88 	.word	0xe000ed88

08009398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800939e:	f3ef 8305 	mrs	r3, IPSR
 80093a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b0f      	cmp	r3, #15
 80093a8:	d915      	bls.n	80093d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093aa:	4a18      	ldr	r2, [pc, #96]	@ (800940c <vPortValidateInterruptPriority+0x74>)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093b4:	4b16      	ldr	r3, [pc, #88]	@ (8009410 <vPortValidateInterruptPriority+0x78>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	7afa      	ldrb	r2, [r7, #11]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d20b      	bcs.n	80093d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	607b      	str	r3, [r7, #4]
}
 80093d0:	bf00      	nop
 80093d2:	bf00      	nop
 80093d4:	e7fd      	b.n	80093d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009414 <vPortValidateInterruptPriority+0x7c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80093de:	4b0e      	ldr	r3, [pc, #56]	@ (8009418 <vPortValidateInterruptPriority+0x80>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d90b      	bls.n	80093fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	603b      	str	r3, [r7, #0]
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	e7fd      	b.n	80093fa <vPortValidateInterruptPriority+0x62>
	}
 80093fe:	bf00      	nop
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	e000e3f0 	.word	0xe000e3f0
 8009410:	20000e64 	.word	0x20000e64
 8009414:	e000ed0c 	.word	0xe000ed0c
 8009418:	20000e68 	.word	0x20000e68

0800941c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	@ 0x28
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009424:	2300      	movs	r3, #0
 8009426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009428:	f7ff f8f2 	bl	8008610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800942c:	4b5c      	ldr	r3, [pc, #368]	@ (80095a0 <pvPortMalloc+0x184>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009434:	f000 f924 	bl	8009680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009438:	4b5a      	ldr	r3, [pc, #360]	@ (80095a4 <pvPortMalloc+0x188>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4013      	ands	r3, r2
 8009440:	2b00      	cmp	r3, #0
 8009442:	f040 8095 	bne.w	8009570 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01e      	beq.n	800948a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800944c:	2208      	movs	r2, #8
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4413      	add	r3, r2
 8009452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	2b00      	cmp	r3, #0
 800945c:	d015      	beq.n	800948a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f023 0307 	bic.w	r3, r3, #7
 8009464:	3308      	adds	r3, #8
 8009466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <pvPortMalloc+0x6e>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	617b      	str	r3, [r7, #20]
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	e7fd      	b.n	8009486 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d06f      	beq.n	8009570 <pvPortMalloc+0x154>
 8009490:	4b45      	ldr	r3, [pc, #276]	@ (80095a8 <pvPortMalloc+0x18c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	429a      	cmp	r2, r3
 8009498:	d86a      	bhi.n	8009570 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800949a:	4b44      	ldr	r3, [pc, #272]	@ (80095ac <pvPortMalloc+0x190>)
 800949c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800949e:	4b43      	ldr	r3, [pc, #268]	@ (80095ac <pvPortMalloc+0x190>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094a4:	e004      	b.n	80094b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80094a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d903      	bls.n	80094c2 <pvPortMalloc+0xa6>
 80094ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1f1      	bne.n	80094a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094c2:	4b37      	ldr	r3, [pc, #220]	@ (80095a0 <pvPortMalloc+0x184>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d051      	beq.n	8009570 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2208      	movs	r2, #8
 80094d2:	4413      	add	r3, r2
 80094d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	1ad2      	subs	r2, r2, r3
 80094e6:	2308      	movs	r3, #8
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d920      	bls.n	8009530 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4413      	add	r3, r2
 80094f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <pvPortMalloc+0xfc>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	613b      	str	r3, [r7, #16]
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	e7fd      	b.n	8009514 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800952a:	69b8      	ldr	r0, [r7, #24]
 800952c:	f000 f90a 	bl	8009744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009530:	4b1d      	ldr	r3, [pc, #116]	@ (80095a8 <pvPortMalloc+0x18c>)
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	4a1b      	ldr	r2, [pc, #108]	@ (80095a8 <pvPortMalloc+0x18c>)
 800953c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800953e:	4b1a      	ldr	r3, [pc, #104]	@ (80095a8 <pvPortMalloc+0x18c>)
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	4b1b      	ldr	r3, [pc, #108]	@ (80095b0 <pvPortMalloc+0x194>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d203      	bcs.n	8009552 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800954a:	4b17      	ldr	r3, [pc, #92]	@ (80095a8 <pvPortMalloc+0x18c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a18      	ldr	r2, [pc, #96]	@ (80095b0 <pvPortMalloc+0x194>)
 8009550:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	4b13      	ldr	r3, [pc, #76]	@ (80095a4 <pvPortMalloc+0x188>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	431a      	orrs	r2, r3
 800955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009566:	4b13      	ldr	r3, [pc, #76]	@ (80095b4 <pvPortMalloc+0x198>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	4a11      	ldr	r2, [pc, #68]	@ (80095b4 <pvPortMalloc+0x198>)
 800956e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009570:	f7ff f85c 	bl	800862c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00b      	beq.n	8009596 <pvPortMalloc+0x17a>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	60fb      	str	r3, [r7, #12]
}
 8009590:	bf00      	nop
 8009592:	bf00      	nop
 8009594:	e7fd      	b.n	8009592 <pvPortMalloc+0x176>
	return pvReturn;
 8009596:	69fb      	ldr	r3, [r7, #28]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3728      	adds	r7, #40	@ 0x28
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20001a2c 	.word	0x20001a2c
 80095a4:	20001a40 	.word	0x20001a40
 80095a8:	20001a30 	.word	0x20001a30
 80095ac:	20001a24 	.word	0x20001a24
 80095b0:	20001a34 	.word	0x20001a34
 80095b4:	20001a38 	.word	0x20001a38

080095b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d04f      	beq.n	800966a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80095ca:	2308      	movs	r3, #8
 80095cc:	425b      	negs	r3, r3
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	4413      	add	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	4b25      	ldr	r3, [pc, #148]	@ (8009674 <vPortFree+0xbc>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10b      	bne.n	80095fe <vPortFree+0x46>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60fb      	str	r3, [r7, #12]
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	e7fd      	b.n	80095fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00b      	beq.n	800961e <vPortFree+0x66>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	60bb      	str	r3, [r7, #8]
}
 8009618:	bf00      	nop
 800961a:	bf00      	nop
 800961c:	e7fd      	b.n	800961a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	4b14      	ldr	r3, [pc, #80]	@ (8009674 <vPortFree+0xbc>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4013      	ands	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01e      	beq.n	800966a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d11a      	bne.n	800966a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	685a      	ldr	r2, [r3, #4]
 8009638:	4b0e      	ldr	r3, [pc, #56]	@ (8009674 <vPortFree+0xbc>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	43db      	mvns	r3, r3
 800963e:	401a      	ands	r2, r3
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009644:	f7fe ffe4 	bl	8008610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	4b0a      	ldr	r3, [pc, #40]	@ (8009678 <vPortFree+0xc0>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4413      	add	r3, r2
 8009652:	4a09      	ldr	r2, [pc, #36]	@ (8009678 <vPortFree+0xc0>)
 8009654:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009656:	6938      	ldr	r0, [r7, #16]
 8009658:	f000 f874 	bl	8009744 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800965c:	4b07      	ldr	r3, [pc, #28]	@ (800967c <vPortFree+0xc4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3301      	adds	r3, #1
 8009662:	4a06      	ldr	r2, [pc, #24]	@ (800967c <vPortFree+0xc4>)
 8009664:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009666:	f7fe ffe1 	bl	800862c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800966a:	bf00      	nop
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20001a40 	.word	0x20001a40
 8009678:	20001a30 	.word	0x20001a30
 800967c:	20001a3c 	.word	0x20001a3c

08009680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009686:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800968a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800968c:	4b27      	ldr	r3, [pc, #156]	@ (800972c <prvHeapInit+0xac>)
 800968e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00c      	beq.n	80096b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3307      	adds	r3, #7
 800969e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0307 	bic.w	r3, r3, #7
 80096a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	4a1f      	ldr	r2, [pc, #124]	@ (800972c <prvHeapInit+0xac>)
 80096b0:	4413      	add	r3, r2
 80096b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009730 <prvHeapInit+0xb0>)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096be:	4b1c      	ldr	r3, [pc, #112]	@ (8009730 <prvHeapInit+0xb0>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	4413      	add	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80096cc:	2208      	movs	r2, #8
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	1a9b      	subs	r3, r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0307 	bic.w	r3, r3, #7
 80096da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4a15      	ldr	r2, [pc, #84]	@ (8009734 <prvHeapInit+0xb4>)
 80096e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80096e2:	4b14      	ldr	r3, [pc, #80]	@ (8009734 <prvHeapInit+0xb4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2200      	movs	r2, #0
 80096e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80096ea:	4b12      	ldr	r3, [pc, #72]	@ (8009734 <prvHeapInit+0xb4>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2200      	movs	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	1ad2      	subs	r2, r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009700:	4b0c      	ldr	r3, [pc, #48]	@ (8009734 <prvHeapInit+0xb4>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	4a0a      	ldr	r2, [pc, #40]	@ (8009738 <prvHeapInit+0xb8>)
 800970e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	4a09      	ldr	r2, [pc, #36]	@ (800973c <prvHeapInit+0xbc>)
 8009716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009718:	4b09      	ldr	r3, [pc, #36]	@ (8009740 <prvHeapInit+0xc0>)
 800971a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800971e:	601a      	str	r2, [r3, #0]
}
 8009720:	bf00      	nop
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20000e6c 	.word	0x20000e6c
 8009730:	20001a24 	.word	0x20001a24
 8009734:	20001a2c 	.word	0x20001a2c
 8009738:	20001a34 	.word	0x20001a34
 800973c:	20001a30 	.word	0x20001a30
 8009740:	20001a40 	.word	0x20001a40

08009744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800974c:	4b28      	ldr	r3, [pc, #160]	@ (80097f0 <prvInsertBlockIntoFreeList+0xac>)
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	e002      	b.n	8009758 <prvInsertBlockIntoFreeList+0x14>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	d8f7      	bhi.n	8009752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4413      	add	r3, r2
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d108      	bne.n	8009786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	441a      	add	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	441a      	add	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d118      	bne.n	80097cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	4b15      	ldr	r3, [pc, #84]	@ (80097f4 <prvInsertBlockIntoFreeList+0xb0>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d00d      	beq.n	80097c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	441a      	add	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	e008      	b.n	80097d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097c2:	4b0c      	ldr	r3, [pc, #48]	@ (80097f4 <prvInsertBlockIntoFreeList+0xb0>)
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	e003      	b.n	80097d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d002      	beq.n	80097e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097e2:	bf00      	nop
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20001a24 	.word	0x20001a24
 80097f4:	20001a2c 	.word	0x20001a2c

080097f8 <std>:
 80097f8:	2300      	movs	r3, #0
 80097fa:	b510      	push	{r4, lr}
 80097fc:	4604      	mov	r4, r0
 80097fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009806:	6083      	str	r3, [r0, #8]
 8009808:	8181      	strh	r1, [r0, #12]
 800980a:	6643      	str	r3, [r0, #100]	@ 0x64
 800980c:	81c2      	strh	r2, [r0, #14]
 800980e:	6183      	str	r3, [r0, #24]
 8009810:	4619      	mov	r1, r3
 8009812:	2208      	movs	r2, #8
 8009814:	305c      	adds	r0, #92	@ 0x5c
 8009816:	f000 fa01 	bl	8009c1c <memset>
 800981a:	4b0d      	ldr	r3, [pc, #52]	@ (8009850 <std+0x58>)
 800981c:	6263      	str	r3, [r4, #36]	@ 0x24
 800981e:	4b0d      	ldr	r3, [pc, #52]	@ (8009854 <std+0x5c>)
 8009820:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009822:	4b0d      	ldr	r3, [pc, #52]	@ (8009858 <std+0x60>)
 8009824:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009826:	4b0d      	ldr	r3, [pc, #52]	@ (800985c <std+0x64>)
 8009828:	6323      	str	r3, [r4, #48]	@ 0x30
 800982a:	4b0d      	ldr	r3, [pc, #52]	@ (8009860 <std+0x68>)
 800982c:	6224      	str	r4, [r4, #32]
 800982e:	429c      	cmp	r4, r3
 8009830:	d006      	beq.n	8009840 <std+0x48>
 8009832:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009836:	4294      	cmp	r4, r2
 8009838:	d002      	beq.n	8009840 <std+0x48>
 800983a:	33d0      	adds	r3, #208	@ 0xd0
 800983c:	429c      	cmp	r4, r3
 800983e:	d105      	bne.n	800984c <std+0x54>
 8009840:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009848:	f000 ba60 	b.w	8009d0c <__retarget_lock_init_recursive>
 800984c:	bd10      	pop	{r4, pc}
 800984e:	bf00      	nop
 8009850:	08009a6d 	.word	0x08009a6d
 8009854:	08009a8f 	.word	0x08009a8f
 8009858:	08009ac7 	.word	0x08009ac7
 800985c:	08009aeb 	.word	0x08009aeb
 8009860:	20001a44 	.word	0x20001a44

08009864 <stdio_exit_handler>:
 8009864:	4a02      	ldr	r2, [pc, #8]	@ (8009870 <stdio_exit_handler+0xc>)
 8009866:	4903      	ldr	r1, [pc, #12]	@ (8009874 <stdio_exit_handler+0x10>)
 8009868:	4803      	ldr	r0, [pc, #12]	@ (8009878 <stdio_exit_handler+0x14>)
 800986a:	f000 b869 	b.w	8009940 <_fwalk_sglue>
 800986e:	bf00      	nop
 8009870:	20000010 	.word	0x20000010
 8009874:	0800a5c5 	.word	0x0800a5c5
 8009878:	20000020 	.word	0x20000020

0800987c <cleanup_stdio>:
 800987c:	6841      	ldr	r1, [r0, #4]
 800987e:	4b0c      	ldr	r3, [pc, #48]	@ (80098b0 <cleanup_stdio+0x34>)
 8009880:	4299      	cmp	r1, r3
 8009882:	b510      	push	{r4, lr}
 8009884:	4604      	mov	r4, r0
 8009886:	d001      	beq.n	800988c <cleanup_stdio+0x10>
 8009888:	f000 fe9c 	bl	800a5c4 <_fflush_r>
 800988c:	68a1      	ldr	r1, [r4, #8]
 800988e:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <cleanup_stdio+0x38>)
 8009890:	4299      	cmp	r1, r3
 8009892:	d002      	beq.n	800989a <cleanup_stdio+0x1e>
 8009894:	4620      	mov	r0, r4
 8009896:	f000 fe95 	bl	800a5c4 <_fflush_r>
 800989a:	68e1      	ldr	r1, [r4, #12]
 800989c:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <cleanup_stdio+0x3c>)
 800989e:	4299      	cmp	r1, r3
 80098a0:	d004      	beq.n	80098ac <cleanup_stdio+0x30>
 80098a2:	4620      	mov	r0, r4
 80098a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a8:	f000 be8c 	b.w	800a5c4 <_fflush_r>
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	bf00      	nop
 80098b0:	20001a44 	.word	0x20001a44
 80098b4:	20001aac 	.word	0x20001aac
 80098b8:	20001b14 	.word	0x20001b14

080098bc <global_stdio_init.part.0>:
 80098bc:	b510      	push	{r4, lr}
 80098be:	4b0b      	ldr	r3, [pc, #44]	@ (80098ec <global_stdio_init.part.0+0x30>)
 80098c0:	4c0b      	ldr	r4, [pc, #44]	@ (80098f0 <global_stdio_init.part.0+0x34>)
 80098c2:	4a0c      	ldr	r2, [pc, #48]	@ (80098f4 <global_stdio_init.part.0+0x38>)
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	4620      	mov	r0, r4
 80098c8:	2200      	movs	r2, #0
 80098ca:	2104      	movs	r1, #4
 80098cc:	f7ff ff94 	bl	80097f8 <std>
 80098d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098d4:	2201      	movs	r2, #1
 80098d6:	2109      	movs	r1, #9
 80098d8:	f7ff ff8e 	bl	80097f8 <std>
 80098dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098e0:	2202      	movs	r2, #2
 80098e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e6:	2112      	movs	r1, #18
 80098e8:	f7ff bf86 	b.w	80097f8 <std>
 80098ec:	20001b7c 	.word	0x20001b7c
 80098f0:	20001a44 	.word	0x20001a44
 80098f4:	08009865 	.word	0x08009865

080098f8 <__sfp_lock_acquire>:
 80098f8:	4801      	ldr	r0, [pc, #4]	@ (8009900 <__sfp_lock_acquire+0x8>)
 80098fa:	f000 ba08 	b.w	8009d0e <__retarget_lock_acquire_recursive>
 80098fe:	bf00      	nop
 8009900:	20001b85 	.word	0x20001b85

08009904 <__sfp_lock_release>:
 8009904:	4801      	ldr	r0, [pc, #4]	@ (800990c <__sfp_lock_release+0x8>)
 8009906:	f000 ba03 	b.w	8009d10 <__retarget_lock_release_recursive>
 800990a:	bf00      	nop
 800990c:	20001b85 	.word	0x20001b85

08009910 <__sinit>:
 8009910:	b510      	push	{r4, lr}
 8009912:	4604      	mov	r4, r0
 8009914:	f7ff fff0 	bl	80098f8 <__sfp_lock_acquire>
 8009918:	6a23      	ldr	r3, [r4, #32]
 800991a:	b11b      	cbz	r3, 8009924 <__sinit+0x14>
 800991c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009920:	f7ff bff0 	b.w	8009904 <__sfp_lock_release>
 8009924:	4b04      	ldr	r3, [pc, #16]	@ (8009938 <__sinit+0x28>)
 8009926:	6223      	str	r3, [r4, #32]
 8009928:	4b04      	ldr	r3, [pc, #16]	@ (800993c <__sinit+0x2c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1f5      	bne.n	800991c <__sinit+0xc>
 8009930:	f7ff ffc4 	bl	80098bc <global_stdio_init.part.0>
 8009934:	e7f2      	b.n	800991c <__sinit+0xc>
 8009936:	bf00      	nop
 8009938:	0800987d 	.word	0x0800987d
 800993c:	20001b7c 	.word	0x20001b7c

08009940 <_fwalk_sglue>:
 8009940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009944:	4607      	mov	r7, r0
 8009946:	4688      	mov	r8, r1
 8009948:	4614      	mov	r4, r2
 800994a:	2600      	movs	r6, #0
 800994c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009950:	f1b9 0901 	subs.w	r9, r9, #1
 8009954:	d505      	bpl.n	8009962 <_fwalk_sglue+0x22>
 8009956:	6824      	ldr	r4, [r4, #0]
 8009958:	2c00      	cmp	r4, #0
 800995a:	d1f7      	bne.n	800994c <_fwalk_sglue+0xc>
 800995c:	4630      	mov	r0, r6
 800995e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d907      	bls.n	8009978 <_fwalk_sglue+0x38>
 8009968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800996c:	3301      	adds	r3, #1
 800996e:	d003      	beq.n	8009978 <_fwalk_sglue+0x38>
 8009970:	4629      	mov	r1, r5
 8009972:	4638      	mov	r0, r7
 8009974:	47c0      	blx	r8
 8009976:	4306      	orrs	r6, r0
 8009978:	3568      	adds	r5, #104	@ 0x68
 800997a:	e7e9      	b.n	8009950 <_fwalk_sglue+0x10>

0800997c <iprintf>:
 800997c:	b40f      	push	{r0, r1, r2, r3}
 800997e:	b507      	push	{r0, r1, r2, lr}
 8009980:	4906      	ldr	r1, [pc, #24]	@ (800999c <iprintf+0x20>)
 8009982:	ab04      	add	r3, sp, #16
 8009984:	6808      	ldr	r0, [r1, #0]
 8009986:	f853 2b04 	ldr.w	r2, [r3], #4
 800998a:	6881      	ldr	r1, [r0, #8]
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	f000 faf1 	bl	8009f74 <_vfiprintf_r>
 8009992:	b003      	add	sp, #12
 8009994:	f85d eb04 	ldr.w	lr, [sp], #4
 8009998:	b004      	add	sp, #16
 800999a:	4770      	bx	lr
 800999c:	2000001c 	.word	0x2000001c

080099a0 <putchar>:
 80099a0:	4b02      	ldr	r3, [pc, #8]	@ (80099ac <putchar+0xc>)
 80099a2:	4601      	mov	r1, r0
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	6882      	ldr	r2, [r0, #8]
 80099a8:	f000 be96 	b.w	800a6d8 <_putc_r>
 80099ac:	2000001c 	.word	0x2000001c

080099b0 <_puts_r>:
 80099b0:	6a03      	ldr	r3, [r0, #32]
 80099b2:	b570      	push	{r4, r5, r6, lr}
 80099b4:	6884      	ldr	r4, [r0, #8]
 80099b6:	4605      	mov	r5, r0
 80099b8:	460e      	mov	r6, r1
 80099ba:	b90b      	cbnz	r3, 80099c0 <_puts_r+0x10>
 80099bc:	f7ff ffa8 	bl	8009910 <__sinit>
 80099c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099c2:	07db      	lsls	r3, r3, #31
 80099c4:	d405      	bmi.n	80099d2 <_puts_r+0x22>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	0598      	lsls	r0, r3, #22
 80099ca:	d402      	bmi.n	80099d2 <_puts_r+0x22>
 80099cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ce:	f000 f99e 	bl	8009d0e <__retarget_lock_acquire_recursive>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	0719      	lsls	r1, r3, #28
 80099d6:	d502      	bpl.n	80099de <_puts_r+0x2e>
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d135      	bne.n	8009a4a <_puts_r+0x9a>
 80099de:	4621      	mov	r1, r4
 80099e0:	4628      	mov	r0, r5
 80099e2:	f000 f8c5 	bl	8009b70 <__swsetup_r>
 80099e6:	b380      	cbz	r0, 8009a4a <_puts_r+0x9a>
 80099e8:	f04f 35ff 	mov.w	r5, #4294967295
 80099ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099ee:	07da      	lsls	r2, r3, #31
 80099f0:	d405      	bmi.n	80099fe <_puts_r+0x4e>
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	059b      	lsls	r3, r3, #22
 80099f6:	d402      	bmi.n	80099fe <_puts_r+0x4e>
 80099f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099fa:	f000 f989 	bl	8009d10 <__retarget_lock_release_recursive>
 80099fe:	4628      	mov	r0, r5
 8009a00:	bd70      	pop	{r4, r5, r6, pc}
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	da04      	bge.n	8009a10 <_puts_r+0x60>
 8009a06:	69a2      	ldr	r2, [r4, #24]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	dc17      	bgt.n	8009a3c <_puts_r+0x8c>
 8009a0c:	290a      	cmp	r1, #10
 8009a0e:	d015      	beq.n	8009a3c <_puts_r+0x8c>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	6022      	str	r2, [r4, #0]
 8009a16:	7019      	strb	r1, [r3, #0]
 8009a18:	68a3      	ldr	r3, [r4, #8]
 8009a1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	60a3      	str	r3, [r4, #8]
 8009a22:	2900      	cmp	r1, #0
 8009a24:	d1ed      	bne.n	8009a02 <_puts_r+0x52>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	da11      	bge.n	8009a4e <_puts_r+0x9e>
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	210a      	movs	r1, #10
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f000 f85f 	bl	8009af2 <__swbuf_r>
 8009a34:	3001      	adds	r0, #1
 8009a36:	d0d7      	beq.n	80099e8 <_puts_r+0x38>
 8009a38:	250a      	movs	r5, #10
 8009a3a:	e7d7      	b.n	80099ec <_puts_r+0x3c>
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f000 f857 	bl	8009af2 <__swbuf_r>
 8009a44:	3001      	adds	r0, #1
 8009a46:	d1e7      	bne.n	8009a18 <_puts_r+0x68>
 8009a48:	e7ce      	b.n	80099e8 <_puts_r+0x38>
 8009a4a:	3e01      	subs	r6, #1
 8009a4c:	e7e4      	b.n	8009a18 <_puts_r+0x68>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	6022      	str	r2, [r4, #0]
 8009a54:	220a      	movs	r2, #10
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	e7ee      	b.n	8009a38 <_puts_r+0x88>
	...

08009a5c <puts>:
 8009a5c:	4b02      	ldr	r3, [pc, #8]	@ (8009a68 <puts+0xc>)
 8009a5e:	4601      	mov	r1, r0
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	f7ff bfa5 	b.w	80099b0 <_puts_r>
 8009a66:	bf00      	nop
 8009a68:	2000001c 	.word	0x2000001c

08009a6c <__sread>:
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	460c      	mov	r4, r1
 8009a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a74:	f000 f8fc 	bl	8009c70 <_read_r>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	bfab      	itete	ge
 8009a7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a80:	181b      	addge	r3, r3, r0
 8009a82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a86:	bfac      	ite	ge
 8009a88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a8a:	81a3      	strhlt	r3, [r4, #12]
 8009a8c:	bd10      	pop	{r4, pc}

08009a8e <__swrite>:
 8009a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a92:	461f      	mov	r7, r3
 8009a94:	898b      	ldrh	r3, [r1, #12]
 8009a96:	05db      	lsls	r3, r3, #23
 8009a98:	4605      	mov	r5, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	4616      	mov	r6, r2
 8009a9e:	d505      	bpl.n	8009aac <__swrite+0x1e>
 8009aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f000 f8d0 	bl	8009c4c <_lseek_r>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	4632      	mov	r2, r6
 8009aba:	463b      	mov	r3, r7
 8009abc:	4628      	mov	r0, r5
 8009abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac2:	f000 b8e7 	b.w	8009c94 <_write_r>

08009ac6 <__sseek>:
 8009ac6:	b510      	push	{r4, lr}
 8009ac8:	460c      	mov	r4, r1
 8009aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ace:	f000 f8bd 	bl	8009c4c <_lseek_r>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	bf15      	itete	ne
 8009ad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ae2:	81a3      	strheq	r3, [r4, #12]
 8009ae4:	bf18      	it	ne
 8009ae6:	81a3      	strhne	r3, [r4, #12]
 8009ae8:	bd10      	pop	{r4, pc}

08009aea <__sclose>:
 8009aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aee:	f000 b89d 	b.w	8009c2c <_close_r>

08009af2 <__swbuf_r>:
 8009af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af4:	460e      	mov	r6, r1
 8009af6:	4614      	mov	r4, r2
 8009af8:	4605      	mov	r5, r0
 8009afa:	b118      	cbz	r0, 8009b04 <__swbuf_r+0x12>
 8009afc:	6a03      	ldr	r3, [r0, #32]
 8009afe:	b90b      	cbnz	r3, 8009b04 <__swbuf_r+0x12>
 8009b00:	f7ff ff06 	bl	8009910 <__sinit>
 8009b04:	69a3      	ldr	r3, [r4, #24]
 8009b06:	60a3      	str	r3, [r4, #8]
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	071a      	lsls	r2, r3, #28
 8009b0c:	d501      	bpl.n	8009b12 <__swbuf_r+0x20>
 8009b0e:	6923      	ldr	r3, [r4, #16]
 8009b10:	b943      	cbnz	r3, 8009b24 <__swbuf_r+0x32>
 8009b12:	4621      	mov	r1, r4
 8009b14:	4628      	mov	r0, r5
 8009b16:	f000 f82b 	bl	8009b70 <__swsetup_r>
 8009b1a:	b118      	cbz	r0, 8009b24 <__swbuf_r+0x32>
 8009b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8009b20:	4638      	mov	r0, r7
 8009b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	6922      	ldr	r2, [r4, #16]
 8009b28:	1a98      	subs	r0, r3, r2
 8009b2a:	6963      	ldr	r3, [r4, #20]
 8009b2c:	b2f6      	uxtb	r6, r6
 8009b2e:	4283      	cmp	r3, r0
 8009b30:	4637      	mov	r7, r6
 8009b32:	dc05      	bgt.n	8009b40 <__swbuf_r+0x4e>
 8009b34:	4621      	mov	r1, r4
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 fd44 	bl	800a5c4 <_fflush_r>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d1ed      	bne.n	8009b1c <__swbuf_r+0x2a>
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	60a3      	str	r3, [r4, #8]
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	6022      	str	r2, [r4, #0]
 8009b4c:	701e      	strb	r6, [r3, #0]
 8009b4e:	6962      	ldr	r2, [r4, #20]
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d004      	beq.n	8009b60 <__swbuf_r+0x6e>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	07db      	lsls	r3, r3, #31
 8009b5a:	d5e1      	bpl.n	8009b20 <__swbuf_r+0x2e>
 8009b5c:	2e0a      	cmp	r6, #10
 8009b5e:	d1df      	bne.n	8009b20 <__swbuf_r+0x2e>
 8009b60:	4621      	mov	r1, r4
 8009b62:	4628      	mov	r0, r5
 8009b64:	f000 fd2e 	bl	800a5c4 <_fflush_r>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d0d9      	beq.n	8009b20 <__swbuf_r+0x2e>
 8009b6c:	e7d6      	b.n	8009b1c <__swbuf_r+0x2a>
	...

08009b70 <__swsetup_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4b29      	ldr	r3, [pc, #164]	@ (8009c18 <__swsetup_r+0xa8>)
 8009b74:	4605      	mov	r5, r0
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	460c      	mov	r4, r1
 8009b7a:	b118      	cbz	r0, 8009b84 <__swsetup_r+0x14>
 8009b7c:	6a03      	ldr	r3, [r0, #32]
 8009b7e:	b90b      	cbnz	r3, 8009b84 <__swsetup_r+0x14>
 8009b80:	f7ff fec6 	bl	8009910 <__sinit>
 8009b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b88:	0719      	lsls	r1, r3, #28
 8009b8a:	d422      	bmi.n	8009bd2 <__swsetup_r+0x62>
 8009b8c:	06da      	lsls	r2, r3, #27
 8009b8e:	d407      	bmi.n	8009ba0 <__swsetup_r+0x30>
 8009b90:	2209      	movs	r2, #9
 8009b92:	602a      	str	r2, [r5, #0]
 8009b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	e033      	b.n	8009c08 <__swsetup_r+0x98>
 8009ba0:	0758      	lsls	r0, r3, #29
 8009ba2:	d512      	bpl.n	8009bca <__swsetup_r+0x5a>
 8009ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ba6:	b141      	cbz	r1, 8009bba <__swsetup_r+0x4a>
 8009ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bac:	4299      	cmp	r1, r3
 8009bae:	d002      	beq.n	8009bb6 <__swsetup_r+0x46>
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f000 f8bd 	bl	8009d30 <_free_r>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	6063      	str	r3, [r4, #4]
 8009bc6:	6923      	ldr	r3, [r4, #16]
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	f043 0308 	orr.w	r3, r3, #8
 8009bd0:	81a3      	strh	r3, [r4, #12]
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	b94b      	cbnz	r3, 8009bea <__swsetup_r+0x7a>
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009be0:	d003      	beq.n	8009bea <__swsetup_r+0x7a>
 8009be2:	4621      	mov	r1, r4
 8009be4:	4628      	mov	r0, r5
 8009be6:	f000 fd3b 	bl	800a660 <__smakebuf_r>
 8009bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bee:	f013 0201 	ands.w	r2, r3, #1
 8009bf2:	d00a      	beq.n	8009c0a <__swsetup_r+0x9a>
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	60a2      	str	r2, [r4, #8]
 8009bf8:	6962      	ldr	r2, [r4, #20]
 8009bfa:	4252      	negs	r2, r2
 8009bfc:	61a2      	str	r2, [r4, #24]
 8009bfe:	6922      	ldr	r2, [r4, #16]
 8009c00:	b942      	cbnz	r2, 8009c14 <__swsetup_r+0xa4>
 8009c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c06:	d1c5      	bne.n	8009b94 <__swsetup_r+0x24>
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
 8009c0a:	0799      	lsls	r1, r3, #30
 8009c0c:	bf58      	it	pl
 8009c0e:	6962      	ldrpl	r2, [r4, #20]
 8009c10:	60a2      	str	r2, [r4, #8]
 8009c12:	e7f4      	b.n	8009bfe <__swsetup_r+0x8e>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e7f7      	b.n	8009c08 <__swsetup_r+0x98>
 8009c18:	2000001c 	.word	0x2000001c

08009c1c <memset>:
 8009c1c:	4402      	add	r2, r0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d100      	bne.n	8009c26 <memset+0xa>
 8009c24:	4770      	bx	lr
 8009c26:	f803 1b01 	strb.w	r1, [r3], #1
 8009c2a:	e7f9      	b.n	8009c20 <memset+0x4>

08009c2c <_close_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d06      	ldr	r5, [pc, #24]	@ (8009c48 <_close_r+0x1c>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	602b      	str	r3, [r5, #0]
 8009c38:	f7f7 fe66 	bl	8001908 <_close>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	d102      	bne.n	8009c46 <_close_r+0x1a>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	b103      	cbz	r3, 8009c46 <_close_r+0x1a>
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
 8009c48:	20001b80 	.word	0x20001b80

08009c4c <_lseek_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4d07      	ldr	r5, [pc, #28]	@ (8009c6c <_lseek_r+0x20>)
 8009c50:	4604      	mov	r4, r0
 8009c52:	4608      	mov	r0, r1
 8009c54:	4611      	mov	r1, r2
 8009c56:	2200      	movs	r2, #0
 8009c58:	602a      	str	r2, [r5, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f7f7 fe7b 	bl	8001956 <_lseek>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_lseek_r+0x1e>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_lseek_r+0x1e>
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	20001b80 	.word	0x20001b80

08009c70 <_read_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d07      	ldr	r5, [pc, #28]	@ (8009c90 <_read_r+0x20>)
 8009c74:	4604      	mov	r4, r0
 8009c76:	4608      	mov	r0, r1
 8009c78:	4611      	mov	r1, r2
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	602a      	str	r2, [r5, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f7f7 fe09 	bl	8001896 <_read>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d102      	bne.n	8009c8e <_read_r+0x1e>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	b103      	cbz	r3, 8009c8e <_read_r+0x1e>
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	20001b80 	.word	0x20001b80

08009c94 <_write_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4d07      	ldr	r5, [pc, #28]	@ (8009cb4 <_write_r+0x20>)
 8009c98:	4604      	mov	r4, r0
 8009c9a:	4608      	mov	r0, r1
 8009c9c:	4611      	mov	r1, r2
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	602a      	str	r2, [r5, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	f7f7 fe14 	bl	80018d0 <_write>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d102      	bne.n	8009cb2 <_write_r+0x1e>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	b103      	cbz	r3, 8009cb2 <_write_r+0x1e>
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	20001b80 	.word	0x20001b80

08009cb8 <__errno>:
 8009cb8:	4b01      	ldr	r3, [pc, #4]	@ (8009cc0 <__errno+0x8>)
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	2000001c 	.word	0x2000001c

08009cc4 <__libc_init_array>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8009cfc <__libc_init_array+0x38>)
 8009cc8:	4c0d      	ldr	r4, [pc, #52]	@ (8009d00 <__libc_init_array+0x3c>)
 8009cca:	1b64      	subs	r4, r4, r5
 8009ccc:	10a4      	asrs	r4, r4, #2
 8009cce:	2600      	movs	r6, #0
 8009cd0:	42a6      	cmp	r6, r4
 8009cd2:	d109      	bne.n	8009ce8 <__libc_init_array+0x24>
 8009cd4:	4d0b      	ldr	r5, [pc, #44]	@ (8009d04 <__libc_init_array+0x40>)
 8009cd6:	4c0c      	ldr	r4, [pc, #48]	@ (8009d08 <__libc_init_array+0x44>)
 8009cd8:	f000 fd64 	bl	800a7a4 <_init>
 8009cdc:	1b64      	subs	r4, r4, r5
 8009cde:	10a4      	asrs	r4, r4, #2
 8009ce0:	2600      	movs	r6, #0
 8009ce2:	42a6      	cmp	r6, r4
 8009ce4:	d105      	bne.n	8009cf2 <__libc_init_array+0x2e>
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cec:	4798      	blx	r3
 8009cee:	3601      	adds	r6, #1
 8009cf0:	e7ee      	b.n	8009cd0 <__libc_init_array+0xc>
 8009cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf6:	4798      	blx	r3
 8009cf8:	3601      	adds	r6, #1
 8009cfa:	e7f2      	b.n	8009ce2 <__libc_init_array+0x1e>
 8009cfc:	0800a940 	.word	0x0800a940
 8009d00:	0800a940 	.word	0x0800a940
 8009d04:	0800a940 	.word	0x0800a940
 8009d08:	0800a944 	.word	0x0800a944

08009d0c <__retarget_lock_init_recursive>:
 8009d0c:	4770      	bx	lr

08009d0e <__retarget_lock_acquire_recursive>:
 8009d0e:	4770      	bx	lr

08009d10 <__retarget_lock_release_recursive>:
 8009d10:	4770      	bx	lr

08009d12 <memcpy>:
 8009d12:	440a      	add	r2, r1
 8009d14:	4291      	cmp	r1, r2
 8009d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d1a:	d100      	bne.n	8009d1e <memcpy+0xc>
 8009d1c:	4770      	bx	lr
 8009d1e:	b510      	push	{r4, lr}
 8009d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d28:	4291      	cmp	r1, r2
 8009d2a:	d1f9      	bne.n	8009d20 <memcpy+0xe>
 8009d2c:	bd10      	pop	{r4, pc}
	...

08009d30 <_free_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4605      	mov	r5, r0
 8009d34:	2900      	cmp	r1, #0
 8009d36:	d041      	beq.n	8009dbc <_free_r+0x8c>
 8009d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d3c:	1f0c      	subs	r4, r1, #4
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfb8      	it	lt
 8009d42:	18e4      	addlt	r4, r4, r3
 8009d44:	f000 f8e0 	bl	8009f08 <__malloc_lock>
 8009d48:	4a1d      	ldr	r2, [pc, #116]	@ (8009dc0 <_free_r+0x90>)
 8009d4a:	6813      	ldr	r3, [r2, #0]
 8009d4c:	b933      	cbnz	r3, 8009d5c <_free_r+0x2c>
 8009d4e:	6063      	str	r3, [r4, #4]
 8009d50:	6014      	str	r4, [r2, #0]
 8009d52:	4628      	mov	r0, r5
 8009d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d58:	f000 b8dc 	b.w	8009f14 <__malloc_unlock>
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	d908      	bls.n	8009d72 <_free_r+0x42>
 8009d60:	6820      	ldr	r0, [r4, #0]
 8009d62:	1821      	adds	r1, r4, r0
 8009d64:	428b      	cmp	r3, r1
 8009d66:	bf01      	itttt	eq
 8009d68:	6819      	ldreq	r1, [r3, #0]
 8009d6a:	685b      	ldreq	r3, [r3, #4]
 8009d6c:	1809      	addeq	r1, r1, r0
 8009d6e:	6021      	streq	r1, [r4, #0]
 8009d70:	e7ed      	b.n	8009d4e <_free_r+0x1e>
 8009d72:	461a      	mov	r2, r3
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	b10b      	cbz	r3, 8009d7c <_free_r+0x4c>
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	d9fa      	bls.n	8009d72 <_free_r+0x42>
 8009d7c:	6811      	ldr	r1, [r2, #0]
 8009d7e:	1850      	adds	r0, r2, r1
 8009d80:	42a0      	cmp	r0, r4
 8009d82:	d10b      	bne.n	8009d9c <_free_r+0x6c>
 8009d84:	6820      	ldr	r0, [r4, #0]
 8009d86:	4401      	add	r1, r0
 8009d88:	1850      	adds	r0, r2, r1
 8009d8a:	4283      	cmp	r3, r0
 8009d8c:	6011      	str	r1, [r2, #0]
 8009d8e:	d1e0      	bne.n	8009d52 <_free_r+0x22>
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	6053      	str	r3, [r2, #4]
 8009d96:	4408      	add	r0, r1
 8009d98:	6010      	str	r0, [r2, #0]
 8009d9a:	e7da      	b.n	8009d52 <_free_r+0x22>
 8009d9c:	d902      	bls.n	8009da4 <_free_r+0x74>
 8009d9e:	230c      	movs	r3, #12
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	e7d6      	b.n	8009d52 <_free_r+0x22>
 8009da4:	6820      	ldr	r0, [r4, #0]
 8009da6:	1821      	adds	r1, r4, r0
 8009da8:	428b      	cmp	r3, r1
 8009daa:	bf04      	itt	eq
 8009dac:	6819      	ldreq	r1, [r3, #0]
 8009dae:	685b      	ldreq	r3, [r3, #4]
 8009db0:	6063      	str	r3, [r4, #4]
 8009db2:	bf04      	itt	eq
 8009db4:	1809      	addeq	r1, r1, r0
 8009db6:	6021      	streq	r1, [r4, #0]
 8009db8:	6054      	str	r4, [r2, #4]
 8009dba:	e7ca      	b.n	8009d52 <_free_r+0x22>
 8009dbc:	bd38      	pop	{r3, r4, r5, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20001b8c 	.word	0x20001b8c

08009dc4 <sbrk_aligned>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8009e04 <sbrk_aligned+0x40>)
 8009dc8:	460c      	mov	r4, r1
 8009dca:	6831      	ldr	r1, [r6, #0]
 8009dcc:	4605      	mov	r5, r0
 8009dce:	b911      	cbnz	r1, 8009dd6 <sbrk_aligned+0x12>
 8009dd0:	f000 fcd8 	bl	800a784 <_sbrk_r>
 8009dd4:	6030      	str	r0, [r6, #0]
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f000 fcd3 	bl	800a784 <_sbrk_r>
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d103      	bne.n	8009dea <sbrk_aligned+0x26>
 8009de2:	f04f 34ff 	mov.w	r4, #4294967295
 8009de6:	4620      	mov	r0, r4
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	1cc4      	adds	r4, r0, #3
 8009dec:	f024 0403 	bic.w	r4, r4, #3
 8009df0:	42a0      	cmp	r0, r4
 8009df2:	d0f8      	beq.n	8009de6 <sbrk_aligned+0x22>
 8009df4:	1a21      	subs	r1, r4, r0
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 fcc4 	bl	800a784 <_sbrk_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d1f2      	bne.n	8009de6 <sbrk_aligned+0x22>
 8009e00:	e7ef      	b.n	8009de2 <sbrk_aligned+0x1e>
 8009e02:	bf00      	nop
 8009e04:	20001b88 	.word	0x20001b88

08009e08 <_malloc_r>:
 8009e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e0c:	1ccd      	adds	r5, r1, #3
 8009e0e:	f025 0503 	bic.w	r5, r5, #3
 8009e12:	3508      	adds	r5, #8
 8009e14:	2d0c      	cmp	r5, #12
 8009e16:	bf38      	it	cc
 8009e18:	250c      	movcc	r5, #12
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	db01      	blt.n	8009e24 <_malloc_r+0x1c>
 8009e20:	42a9      	cmp	r1, r5
 8009e22:	d904      	bls.n	8009e2e <_malloc_r+0x26>
 8009e24:	230c      	movs	r3, #12
 8009e26:	6033      	str	r3, [r6, #0]
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f04 <_malloc_r+0xfc>
 8009e32:	f000 f869 	bl	8009f08 <__malloc_lock>
 8009e36:	f8d8 3000 	ldr.w	r3, [r8]
 8009e3a:	461c      	mov	r4, r3
 8009e3c:	bb44      	cbnz	r4, 8009e90 <_malloc_r+0x88>
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4630      	mov	r0, r6
 8009e42:	f7ff ffbf 	bl	8009dc4 <sbrk_aligned>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	4604      	mov	r4, r0
 8009e4a:	d158      	bne.n	8009efe <_malloc_r+0xf6>
 8009e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e50:	4627      	mov	r7, r4
 8009e52:	2f00      	cmp	r7, #0
 8009e54:	d143      	bne.n	8009ede <_malloc_r+0xd6>
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	d04b      	beq.n	8009ef2 <_malloc_r+0xea>
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	4630      	mov	r0, r6
 8009e60:	eb04 0903 	add.w	r9, r4, r3
 8009e64:	f000 fc8e 	bl	800a784 <_sbrk_r>
 8009e68:	4581      	cmp	r9, r0
 8009e6a:	d142      	bne.n	8009ef2 <_malloc_r+0xea>
 8009e6c:	6821      	ldr	r1, [r4, #0]
 8009e6e:	1a6d      	subs	r5, r5, r1
 8009e70:	4629      	mov	r1, r5
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7ff ffa6 	bl	8009dc4 <sbrk_aligned>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d03a      	beq.n	8009ef2 <_malloc_r+0xea>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	442b      	add	r3, r5
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	f8d8 3000 	ldr.w	r3, [r8]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	bb62      	cbnz	r2, 8009ee4 <_malloc_r+0xdc>
 8009e8a:	f8c8 7000 	str.w	r7, [r8]
 8009e8e:	e00f      	b.n	8009eb0 <_malloc_r+0xa8>
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	1b52      	subs	r2, r2, r5
 8009e94:	d420      	bmi.n	8009ed8 <_malloc_r+0xd0>
 8009e96:	2a0b      	cmp	r2, #11
 8009e98:	d917      	bls.n	8009eca <_malloc_r+0xc2>
 8009e9a:	1961      	adds	r1, r4, r5
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	6025      	str	r5, [r4, #0]
 8009ea0:	bf18      	it	ne
 8009ea2:	6059      	strne	r1, [r3, #4]
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	bf08      	it	eq
 8009ea8:	f8c8 1000 	streq.w	r1, [r8]
 8009eac:	5162      	str	r2, [r4, r5]
 8009eae:	604b      	str	r3, [r1, #4]
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f000 f82f 	bl	8009f14 <__malloc_unlock>
 8009eb6:	f104 000b 	add.w	r0, r4, #11
 8009eba:	1d23      	adds	r3, r4, #4
 8009ebc:	f020 0007 	bic.w	r0, r0, #7
 8009ec0:	1ac2      	subs	r2, r0, r3
 8009ec2:	bf1c      	itt	ne
 8009ec4:	1a1b      	subne	r3, r3, r0
 8009ec6:	50a3      	strne	r3, [r4, r2]
 8009ec8:	e7af      	b.n	8009e2a <_malloc_r+0x22>
 8009eca:	6862      	ldr	r2, [r4, #4]
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	bf0c      	ite	eq
 8009ed0:	f8c8 2000 	streq.w	r2, [r8]
 8009ed4:	605a      	strne	r2, [r3, #4]
 8009ed6:	e7eb      	b.n	8009eb0 <_malloc_r+0xa8>
 8009ed8:	4623      	mov	r3, r4
 8009eda:	6864      	ldr	r4, [r4, #4]
 8009edc:	e7ae      	b.n	8009e3c <_malloc_r+0x34>
 8009ede:	463c      	mov	r4, r7
 8009ee0:	687f      	ldr	r7, [r7, #4]
 8009ee2:	e7b6      	b.n	8009e52 <_malloc_r+0x4a>
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d1fb      	bne.n	8009ee4 <_malloc_r+0xdc>
 8009eec:	2300      	movs	r3, #0
 8009eee:	6053      	str	r3, [r2, #4]
 8009ef0:	e7de      	b.n	8009eb0 <_malloc_r+0xa8>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6033      	str	r3, [r6, #0]
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f000 f80c 	bl	8009f14 <__malloc_unlock>
 8009efc:	e794      	b.n	8009e28 <_malloc_r+0x20>
 8009efe:	6005      	str	r5, [r0, #0]
 8009f00:	e7d6      	b.n	8009eb0 <_malloc_r+0xa8>
 8009f02:	bf00      	nop
 8009f04:	20001b8c 	.word	0x20001b8c

08009f08 <__malloc_lock>:
 8009f08:	4801      	ldr	r0, [pc, #4]	@ (8009f10 <__malloc_lock+0x8>)
 8009f0a:	f7ff bf00 	b.w	8009d0e <__retarget_lock_acquire_recursive>
 8009f0e:	bf00      	nop
 8009f10:	20001b84 	.word	0x20001b84

08009f14 <__malloc_unlock>:
 8009f14:	4801      	ldr	r0, [pc, #4]	@ (8009f1c <__malloc_unlock+0x8>)
 8009f16:	f7ff befb 	b.w	8009d10 <__retarget_lock_release_recursive>
 8009f1a:	bf00      	nop
 8009f1c:	20001b84 	.word	0x20001b84

08009f20 <__sfputc_r>:
 8009f20:	6893      	ldr	r3, [r2, #8]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	b410      	push	{r4}
 8009f28:	6093      	str	r3, [r2, #8]
 8009f2a:	da08      	bge.n	8009f3e <__sfputc_r+0x1e>
 8009f2c:	6994      	ldr	r4, [r2, #24]
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	db01      	blt.n	8009f36 <__sfputc_r+0x16>
 8009f32:	290a      	cmp	r1, #10
 8009f34:	d103      	bne.n	8009f3e <__sfputc_r+0x1e>
 8009f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f3a:	f7ff bdda 	b.w	8009af2 <__swbuf_r>
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	1c58      	adds	r0, r3, #1
 8009f42:	6010      	str	r0, [r2, #0]
 8009f44:	7019      	strb	r1, [r3, #0]
 8009f46:	4608      	mov	r0, r1
 8009f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <__sfputs_r>:
 8009f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f50:	4606      	mov	r6, r0
 8009f52:	460f      	mov	r7, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	18d5      	adds	r5, r2, r3
 8009f58:	42ac      	cmp	r4, r5
 8009f5a:	d101      	bne.n	8009f60 <__sfputs_r+0x12>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e007      	b.n	8009f70 <__sfputs_r+0x22>
 8009f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f64:	463a      	mov	r2, r7
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ffda 	bl	8009f20 <__sfputc_r>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d1f3      	bne.n	8009f58 <__sfputs_r+0xa>
 8009f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f74 <_vfiprintf_r>:
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	460d      	mov	r5, r1
 8009f7a:	b09d      	sub	sp, #116	@ 0x74
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	4698      	mov	r8, r3
 8009f80:	4606      	mov	r6, r0
 8009f82:	b118      	cbz	r0, 8009f8c <_vfiprintf_r+0x18>
 8009f84:	6a03      	ldr	r3, [r0, #32]
 8009f86:	b90b      	cbnz	r3, 8009f8c <_vfiprintf_r+0x18>
 8009f88:	f7ff fcc2 	bl	8009910 <__sinit>
 8009f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f8e:	07d9      	lsls	r1, r3, #31
 8009f90:	d405      	bmi.n	8009f9e <_vfiprintf_r+0x2a>
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	059a      	lsls	r2, r3, #22
 8009f96:	d402      	bmi.n	8009f9e <_vfiprintf_r+0x2a>
 8009f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f9a:	f7ff feb8 	bl	8009d0e <__retarget_lock_acquire_recursive>
 8009f9e:	89ab      	ldrh	r3, [r5, #12]
 8009fa0:	071b      	lsls	r3, r3, #28
 8009fa2:	d501      	bpl.n	8009fa8 <_vfiprintf_r+0x34>
 8009fa4:	692b      	ldr	r3, [r5, #16]
 8009fa6:	b99b      	cbnz	r3, 8009fd0 <_vfiprintf_r+0x5c>
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff fde0 	bl	8009b70 <__swsetup_r>
 8009fb0:	b170      	cbz	r0, 8009fd0 <_vfiprintf_r+0x5c>
 8009fb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fb4:	07dc      	lsls	r4, r3, #31
 8009fb6:	d504      	bpl.n	8009fc2 <_vfiprintf_r+0x4e>
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbc:	b01d      	add	sp, #116	@ 0x74
 8009fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc2:	89ab      	ldrh	r3, [r5, #12]
 8009fc4:	0598      	lsls	r0, r3, #22
 8009fc6:	d4f7      	bmi.n	8009fb8 <_vfiprintf_r+0x44>
 8009fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fca:	f7ff fea1 	bl	8009d10 <__retarget_lock_release_recursive>
 8009fce:	e7f3      	b.n	8009fb8 <_vfiprintf_r+0x44>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd4:	2320      	movs	r3, #32
 8009fd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fde:	2330      	movs	r3, #48	@ 0x30
 8009fe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a190 <_vfiprintf_r+0x21c>
 8009fe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fe8:	f04f 0901 	mov.w	r9, #1
 8009fec:	4623      	mov	r3, r4
 8009fee:	469a      	mov	sl, r3
 8009ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff4:	b10a      	cbz	r2, 8009ffa <_vfiprintf_r+0x86>
 8009ff6:	2a25      	cmp	r2, #37	@ 0x25
 8009ff8:	d1f9      	bne.n	8009fee <_vfiprintf_r+0x7a>
 8009ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8009ffe:	d00b      	beq.n	800a018 <_vfiprintf_r+0xa4>
 800a000:	465b      	mov	r3, fp
 800a002:	4622      	mov	r2, r4
 800a004:	4629      	mov	r1, r5
 800a006:	4630      	mov	r0, r6
 800a008:	f7ff ffa1 	bl	8009f4e <__sfputs_r>
 800a00c:	3001      	adds	r0, #1
 800a00e:	f000 80a7 	beq.w	800a160 <_vfiprintf_r+0x1ec>
 800a012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a014:	445a      	add	r2, fp
 800a016:	9209      	str	r2, [sp, #36]	@ 0x24
 800a018:	f89a 3000 	ldrb.w	r3, [sl]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 809f 	beq.w	800a160 <_vfiprintf_r+0x1ec>
 800a022:	2300      	movs	r3, #0
 800a024:	f04f 32ff 	mov.w	r2, #4294967295
 800a028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a02c:	f10a 0a01 	add.w	sl, sl, #1
 800a030:	9304      	str	r3, [sp, #16]
 800a032:	9307      	str	r3, [sp, #28]
 800a034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a038:	931a      	str	r3, [sp, #104]	@ 0x68
 800a03a:	4654      	mov	r4, sl
 800a03c:	2205      	movs	r2, #5
 800a03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a042:	4853      	ldr	r0, [pc, #332]	@ (800a190 <_vfiprintf_r+0x21c>)
 800a044:	f7f6 f8c4 	bl	80001d0 <memchr>
 800a048:	9a04      	ldr	r2, [sp, #16]
 800a04a:	b9d8      	cbnz	r0, 800a084 <_vfiprintf_r+0x110>
 800a04c:	06d1      	lsls	r1, r2, #27
 800a04e:	bf44      	itt	mi
 800a050:	2320      	movmi	r3, #32
 800a052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a056:	0713      	lsls	r3, r2, #28
 800a058:	bf44      	itt	mi
 800a05a:	232b      	movmi	r3, #43	@ 0x2b
 800a05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a060:	f89a 3000 	ldrb.w	r3, [sl]
 800a064:	2b2a      	cmp	r3, #42	@ 0x2a
 800a066:	d015      	beq.n	800a094 <_vfiprintf_r+0x120>
 800a068:	9a07      	ldr	r2, [sp, #28]
 800a06a:	4654      	mov	r4, sl
 800a06c:	2000      	movs	r0, #0
 800a06e:	f04f 0c0a 	mov.w	ip, #10
 800a072:	4621      	mov	r1, r4
 800a074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a078:	3b30      	subs	r3, #48	@ 0x30
 800a07a:	2b09      	cmp	r3, #9
 800a07c:	d94b      	bls.n	800a116 <_vfiprintf_r+0x1a2>
 800a07e:	b1b0      	cbz	r0, 800a0ae <_vfiprintf_r+0x13a>
 800a080:	9207      	str	r2, [sp, #28]
 800a082:	e014      	b.n	800a0ae <_vfiprintf_r+0x13a>
 800a084:	eba0 0308 	sub.w	r3, r0, r8
 800a088:	fa09 f303 	lsl.w	r3, r9, r3
 800a08c:	4313      	orrs	r3, r2
 800a08e:	9304      	str	r3, [sp, #16]
 800a090:	46a2      	mov	sl, r4
 800a092:	e7d2      	b.n	800a03a <_vfiprintf_r+0xc6>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	1d19      	adds	r1, r3, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	9103      	str	r1, [sp, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfbb      	ittet	lt
 800a0a0:	425b      	neglt	r3, r3
 800a0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a0a6:	9307      	strge	r3, [sp, #28]
 800a0a8:	9307      	strlt	r3, [sp, #28]
 800a0aa:	bfb8      	it	lt
 800a0ac:	9204      	strlt	r2, [sp, #16]
 800a0ae:	7823      	ldrb	r3, [r4, #0]
 800a0b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0b2:	d10a      	bne.n	800a0ca <_vfiprintf_r+0x156>
 800a0b4:	7863      	ldrb	r3, [r4, #1]
 800a0b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0b8:	d132      	bne.n	800a120 <_vfiprintf_r+0x1ac>
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	1d1a      	adds	r2, r3, #4
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	9203      	str	r2, [sp, #12]
 800a0c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0c6:	3402      	adds	r4, #2
 800a0c8:	9305      	str	r3, [sp, #20]
 800a0ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a1a0 <_vfiprintf_r+0x22c>
 800a0ce:	7821      	ldrb	r1, [r4, #0]
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	f7f6 f87c 	bl	80001d0 <memchr>
 800a0d8:	b138      	cbz	r0, 800a0ea <_vfiprintf_r+0x176>
 800a0da:	9b04      	ldr	r3, [sp, #16]
 800a0dc:	eba0 000a 	sub.w	r0, r0, sl
 800a0e0:	2240      	movs	r2, #64	@ 0x40
 800a0e2:	4082      	lsls	r2, r0
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	3401      	adds	r4, #1
 800a0e8:	9304      	str	r3, [sp, #16]
 800a0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ee:	4829      	ldr	r0, [pc, #164]	@ (800a194 <_vfiprintf_r+0x220>)
 800a0f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0f4:	2206      	movs	r2, #6
 800a0f6:	f7f6 f86b 	bl	80001d0 <memchr>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d03f      	beq.n	800a17e <_vfiprintf_r+0x20a>
 800a0fe:	4b26      	ldr	r3, [pc, #152]	@ (800a198 <_vfiprintf_r+0x224>)
 800a100:	bb1b      	cbnz	r3, 800a14a <_vfiprintf_r+0x1d6>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	3307      	adds	r3, #7
 800a106:	f023 0307 	bic.w	r3, r3, #7
 800a10a:	3308      	adds	r3, #8
 800a10c:	9303      	str	r3, [sp, #12]
 800a10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a110:	443b      	add	r3, r7
 800a112:	9309      	str	r3, [sp, #36]	@ 0x24
 800a114:	e76a      	b.n	8009fec <_vfiprintf_r+0x78>
 800a116:	fb0c 3202 	mla	r2, ip, r2, r3
 800a11a:	460c      	mov	r4, r1
 800a11c:	2001      	movs	r0, #1
 800a11e:	e7a8      	b.n	800a072 <_vfiprintf_r+0xfe>
 800a120:	2300      	movs	r3, #0
 800a122:	3401      	adds	r4, #1
 800a124:	9305      	str	r3, [sp, #20]
 800a126:	4619      	mov	r1, r3
 800a128:	f04f 0c0a 	mov.w	ip, #10
 800a12c:	4620      	mov	r0, r4
 800a12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a132:	3a30      	subs	r2, #48	@ 0x30
 800a134:	2a09      	cmp	r2, #9
 800a136:	d903      	bls.n	800a140 <_vfiprintf_r+0x1cc>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d0c6      	beq.n	800a0ca <_vfiprintf_r+0x156>
 800a13c:	9105      	str	r1, [sp, #20]
 800a13e:	e7c4      	b.n	800a0ca <_vfiprintf_r+0x156>
 800a140:	fb0c 2101 	mla	r1, ip, r1, r2
 800a144:	4604      	mov	r4, r0
 800a146:	2301      	movs	r3, #1
 800a148:	e7f0      	b.n	800a12c <_vfiprintf_r+0x1b8>
 800a14a:	ab03      	add	r3, sp, #12
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	462a      	mov	r2, r5
 800a150:	4b12      	ldr	r3, [pc, #72]	@ (800a19c <_vfiprintf_r+0x228>)
 800a152:	a904      	add	r1, sp, #16
 800a154:	4630      	mov	r0, r6
 800a156:	f3af 8000 	nop.w
 800a15a:	4607      	mov	r7, r0
 800a15c:	1c78      	adds	r0, r7, #1
 800a15e:	d1d6      	bne.n	800a10e <_vfiprintf_r+0x19a>
 800a160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a162:	07d9      	lsls	r1, r3, #31
 800a164:	d405      	bmi.n	800a172 <_vfiprintf_r+0x1fe>
 800a166:	89ab      	ldrh	r3, [r5, #12]
 800a168:	059a      	lsls	r2, r3, #22
 800a16a:	d402      	bmi.n	800a172 <_vfiprintf_r+0x1fe>
 800a16c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a16e:	f7ff fdcf 	bl	8009d10 <__retarget_lock_release_recursive>
 800a172:	89ab      	ldrh	r3, [r5, #12]
 800a174:	065b      	lsls	r3, r3, #25
 800a176:	f53f af1f 	bmi.w	8009fb8 <_vfiprintf_r+0x44>
 800a17a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a17c:	e71e      	b.n	8009fbc <_vfiprintf_r+0x48>
 800a17e:	ab03      	add	r3, sp, #12
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	462a      	mov	r2, r5
 800a184:	4b05      	ldr	r3, [pc, #20]	@ (800a19c <_vfiprintf_r+0x228>)
 800a186:	a904      	add	r1, sp, #16
 800a188:	4630      	mov	r0, r6
 800a18a:	f000 f879 	bl	800a280 <_printf_i>
 800a18e:	e7e4      	b.n	800a15a <_vfiprintf_r+0x1e6>
 800a190:	0800a904 	.word	0x0800a904
 800a194:	0800a90e 	.word	0x0800a90e
 800a198:	00000000 	.word	0x00000000
 800a19c:	08009f4f 	.word	0x08009f4f
 800a1a0:	0800a90a 	.word	0x0800a90a

0800a1a4 <_printf_common>:
 800a1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a8:	4616      	mov	r6, r2
 800a1aa:	4698      	mov	r8, r3
 800a1ac:	688a      	ldr	r2, [r1, #8]
 800a1ae:	690b      	ldr	r3, [r1, #16]
 800a1b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	bfb8      	it	lt
 800a1b8:	4613      	movlt	r3, r2
 800a1ba:	6033      	str	r3, [r6, #0]
 800a1bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	b10a      	cbz	r2, 800a1ca <_printf_common+0x26>
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	6033      	str	r3, [r6, #0]
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	0699      	lsls	r1, r3, #26
 800a1ce:	bf42      	ittt	mi
 800a1d0:	6833      	ldrmi	r3, [r6, #0]
 800a1d2:	3302      	addmi	r3, #2
 800a1d4:	6033      	strmi	r3, [r6, #0]
 800a1d6:	6825      	ldr	r5, [r4, #0]
 800a1d8:	f015 0506 	ands.w	r5, r5, #6
 800a1dc:	d106      	bne.n	800a1ec <_printf_common+0x48>
 800a1de:	f104 0a19 	add.w	sl, r4, #25
 800a1e2:	68e3      	ldr	r3, [r4, #12]
 800a1e4:	6832      	ldr	r2, [r6, #0]
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	dc26      	bgt.n	800a23a <_printf_common+0x96>
 800a1ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1f0:	6822      	ldr	r2, [r4, #0]
 800a1f2:	3b00      	subs	r3, #0
 800a1f4:	bf18      	it	ne
 800a1f6:	2301      	movne	r3, #1
 800a1f8:	0692      	lsls	r2, r2, #26
 800a1fa:	d42b      	bmi.n	800a254 <_printf_common+0xb0>
 800a1fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a200:	4641      	mov	r1, r8
 800a202:	4638      	mov	r0, r7
 800a204:	47c8      	blx	r9
 800a206:	3001      	adds	r0, #1
 800a208:	d01e      	beq.n	800a248 <_printf_common+0xa4>
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	6922      	ldr	r2, [r4, #16]
 800a20e:	f003 0306 	and.w	r3, r3, #6
 800a212:	2b04      	cmp	r3, #4
 800a214:	bf02      	ittt	eq
 800a216:	68e5      	ldreq	r5, [r4, #12]
 800a218:	6833      	ldreq	r3, [r6, #0]
 800a21a:	1aed      	subeq	r5, r5, r3
 800a21c:	68a3      	ldr	r3, [r4, #8]
 800a21e:	bf0c      	ite	eq
 800a220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a224:	2500      	movne	r5, #0
 800a226:	4293      	cmp	r3, r2
 800a228:	bfc4      	itt	gt
 800a22a:	1a9b      	subgt	r3, r3, r2
 800a22c:	18ed      	addgt	r5, r5, r3
 800a22e:	2600      	movs	r6, #0
 800a230:	341a      	adds	r4, #26
 800a232:	42b5      	cmp	r5, r6
 800a234:	d11a      	bne.n	800a26c <_printf_common+0xc8>
 800a236:	2000      	movs	r0, #0
 800a238:	e008      	b.n	800a24c <_printf_common+0xa8>
 800a23a:	2301      	movs	r3, #1
 800a23c:	4652      	mov	r2, sl
 800a23e:	4641      	mov	r1, r8
 800a240:	4638      	mov	r0, r7
 800a242:	47c8      	blx	r9
 800a244:	3001      	adds	r0, #1
 800a246:	d103      	bne.n	800a250 <_printf_common+0xac>
 800a248:	f04f 30ff 	mov.w	r0, #4294967295
 800a24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a250:	3501      	adds	r5, #1
 800a252:	e7c6      	b.n	800a1e2 <_printf_common+0x3e>
 800a254:	18e1      	adds	r1, r4, r3
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	2030      	movs	r0, #48	@ 0x30
 800a25a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a25e:	4422      	add	r2, r4
 800a260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a268:	3302      	adds	r3, #2
 800a26a:	e7c7      	b.n	800a1fc <_printf_common+0x58>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4622      	mov	r2, r4
 800a270:	4641      	mov	r1, r8
 800a272:	4638      	mov	r0, r7
 800a274:	47c8      	blx	r9
 800a276:	3001      	adds	r0, #1
 800a278:	d0e6      	beq.n	800a248 <_printf_common+0xa4>
 800a27a:	3601      	adds	r6, #1
 800a27c:	e7d9      	b.n	800a232 <_printf_common+0x8e>
	...

0800a280 <_printf_i>:
 800a280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a284:	7e0f      	ldrb	r7, [r1, #24]
 800a286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a288:	2f78      	cmp	r7, #120	@ 0x78
 800a28a:	4691      	mov	r9, r2
 800a28c:	4680      	mov	r8, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	469a      	mov	sl, r3
 800a292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a296:	d807      	bhi.n	800a2a8 <_printf_i+0x28>
 800a298:	2f62      	cmp	r7, #98	@ 0x62
 800a29a:	d80a      	bhi.n	800a2b2 <_printf_i+0x32>
 800a29c:	2f00      	cmp	r7, #0
 800a29e:	f000 80d1 	beq.w	800a444 <_printf_i+0x1c4>
 800a2a2:	2f58      	cmp	r7, #88	@ 0x58
 800a2a4:	f000 80b8 	beq.w	800a418 <_printf_i+0x198>
 800a2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2b0:	e03a      	b.n	800a328 <_printf_i+0xa8>
 800a2b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2b6:	2b15      	cmp	r3, #21
 800a2b8:	d8f6      	bhi.n	800a2a8 <_printf_i+0x28>
 800a2ba:	a101      	add	r1, pc, #4	@ (adr r1, 800a2c0 <_printf_i+0x40>)
 800a2bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2c0:	0800a319 	.word	0x0800a319
 800a2c4:	0800a32d 	.word	0x0800a32d
 800a2c8:	0800a2a9 	.word	0x0800a2a9
 800a2cc:	0800a2a9 	.word	0x0800a2a9
 800a2d0:	0800a2a9 	.word	0x0800a2a9
 800a2d4:	0800a2a9 	.word	0x0800a2a9
 800a2d8:	0800a32d 	.word	0x0800a32d
 800a2dc:	0800a2a9 	.word	0x0800a2a9
 800a2e0:	0800a2a9 	.word	0x0800a2a9
 800a2e4:	0800a2a9 	.word	0x0800a2a9
 800a2e8:	0800a2a9 	.word	0x0800a2a9
 800a2ec:	0800a42b 	.word	0x0800a42b
 800a2f0:	0800a357 	.word	0x0800a357
 800a2f4:	0800a3e5 	.word	0x0800a3e5
 800a2f8:	0800a2a9 	.word	0x0800a2a9
 800a2fc:	0800a2a9 	.word	0x0800a2a9
 800a300:	0800a44d 	.word	0x0800a44d
 800a304:	0800a2a9 	.word	0x0800a2a9
 800a308:	0800a357 	.word	0x0800a357
 800a30c:	0800a2a9 	.word	0x0800a2a9
 800a310:	0800a2a9 	.word	0x0800a2a9
 800a314:	0800a3ed 	.word	0x0800a3ed
 800a318:	6833      	ldr	r3, [r6, #0]
 800a31a:	1d1a      	adds	r2, r3, #4
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6032      	str	r2, [r6, #0]
 800a320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a328:	2301      	movs	r3, #1
 800a32a:	e09c      	b.n	800a466 <_printf_i+0x1e6>
 800a32c:	6833      	ldr	r3, [r6, #0]
 800a32e:	6820      	ldr	r0, [r4, #0]
 800a330:	1d19      	adds	r1, r3, #4
 800a332:	6031      	str	r1, [r6, #0]
 800a334:	0606      	lsls	r6, r0, #24
 800a336:	d501      	bpl.n	800a33c <_printf_i+0xbc>
 800a338:	681d      	ldr	r5, [r3, #0]
 800a33a:	e003      	b.n	800a344 <_printf_i+0xc4>
 800a33c:	0645      	lsls	r5, r0, #25
 800a33e:	d5fb      	bpl.n	800a338 <_printf_i+0xb8>
 800a340:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a344:	2d00      	cmp	r5, #0
 800a346:	da03      	bge.n	800a350 <_printf_i+0xd0>
 800a348:	232d      	movs	r3, #45	@ 0x2d
 800a34a:	426d      	negs	r5, r5
 800a34c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a350:	4858      	ldr	r0, [pc, #352]	@ (800a4b4 <_printf_i+0x234>)
 800a352:	230a      	movs	r3, #10
 800a354:	e011      	b.n	800a37a <_printf_i+0xfa>
 800a356:	6821      	ldr	r1, [r4, #0]
 800a358:	6833      	ldr	r3, [r6, #0]
 800a35a:	0608      	lsls	r0, r1, #24
 800a35c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a360:	d402      	bmi.n	800a368 <_printf_i+0xe8>
 800a362:	0649      	lsls	r1, r1, #25
 800a364:	bf48      	it	mi
 800a366:	b2ad      	uxthmi	r5, r5
 800a368:	2f6f      	cmp	r7, #111	@ 0x6f
 800a36a:	4852      	ldr	r0, [pc, #328]	@ (800a4b4 <_printf_i+0x234>)
 800a36c:	6033      	str	r3, [r6, #0]
 800a36e:	bf14      	ite	ne
 800a370:	230a      	movne	r3, #10
 800a372:	2308      	moveq	r3, #8
 800a374:	2100      	movs	r1, #0
 800a376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a37a:	6866      	ldr	r6, [r4, #4]
 800a37c:	60a6      	str	r6, [r4, #8]
 800a37e:	2e00      	cmp	r6, #0
 800a380:	db05      	blt.n	800a38e <_printf_i+0x10e>
 800a382:	6821      	ldr	r1, [r4, #0]
 800a384:	432e      	orrs	r6, r5
 800a386:	f021 0104 	bic.w	r1, r1, #4
 800a38a:	6021      	str	r1, [r4, #0]
 800a38c:	d04b      	beq.n	800a426 <_printf_i+0x1a6>
 800a38e:	4616      	mov	r6, r2
 800a390:	fbb5 f1f3 	udiv	r1, r5, r3
 800a394:	fb03 5711 	mls	r7, r3, r1, r5
 800a398:	5dc7      	ldrb	r7, [r0, r7]
 800a39a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a39e:	462f      	mov	r7, r5
 800a3a0:	42bb      	cmp	r3, r7
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	d9f4      	bls.n	800a390 <_printf_i+0x110>
 800a3a6:	2b08      	cmp	r3, #8
 800a3a8:	d10b      	bne.n	800a3c2 <_printf_i+0x142>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	07df      	lsls	r7, r3, #31
 800a3ae:	d508      	bpl.n	800a3c2 <_printf_i+0x142>
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	6861      	ldr	r1, [r4, #4]
 800a3b4:	4299      	cmp	r1, r3
 800a3b6:	bfde      	ittt	le
 800a3b8:	2330      	movle	r3, #48	@ 0x30
 800a3ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3be:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3c2:	1b92      	subs	r2, r2, r6
 800a3c4:	6122      	str	r2, [r4, #16]
 800a3c6:	f8cd a000 	str.w	sl, [sp]
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	aa03      	add	r2, sp, #12
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	f7ff fee7 	bl	800a1a4 <_printf_common>
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d14a      	bne.n	800a470 <_printf_i+0x1f0>
 800a3da:	f04f 30ff 	mov.w	r0, #4294967295
 800a3de:	b004      	add	sp, #16
 800a3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	f043 0320 	orr.w	r3, r3, #32
 800a3ea:	6023      	str	r3, [r4, #0]
 800a3ec:	4832      	ldr	r0, [pc, #200]	@ (800a4b8 <_printf_i+0x238>)
 800a3ee:	2778      	movs	r7, #120	@ 0x78
 800a3f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	6831      	ldr	r1, [r6, #0]
 800a3f8:	061f      	lsls	r7, r3, #24
 800a3fa:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3fe:	d402      	bmi.n	800a406 <_printf_i+0x186>
 800a400:	065f      	lsls	r7, r3, #25
 800a402:	bf48      	it	mi
 800a404:	b2ad      	uxthmi	r5, r5
 800a406:	6031      	str	r1, [r6, #0]
 800a408:	07d9      	lsls	r1, r3, #31
 800a40a:	bf44      	itt	mi
 800a40c:	f043 0320 	orrmi.w	r3, r3, #32
 800a410:	6023      	strmi	r3, [r4, #0]
 800a412:	b11d      	cbz	r5, 800a41c <_printf_i+0x19c>
 800a414:	2310      	movs	r3, #16
 800a416:	e7ad      	b.n	800a374 <_printf_i+0xf4>
 800a418:	4826      	ldr	r0, [pc, #152]	@ (800a4b4 <_printf_i+0x234>)
 800a41a:	e7e9      	b.n	800a3f0 <_printf_i+0x170>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	f023 0320 	bic.w	r3, r3, #32
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	e7f6      	b.n	800a414 <_printf_i+0x194>
 800a426:	4616      	mov	r6, r2
 800a428:	e7bd      	b.n	800a3a6 <_printf_i+0x126>
 800a42a:	6833      	ldr	r3, [r6, #0]
 800a42c:	6825      	ldr	r5, [r4, #0]
 800a42e:	6961      	ldr	r1, [r4, #20]
 800a430:	1d18      	adds	r0, r3, #4
 800a432:	6030      	str	r0, [r6, #0]
 800a434:	062e      	lsls	r6, r5, #24
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	d501      	bpl.n	800a43e <_printf_i+0x1be>
 800a43a:	6019      	str	r1, [r3, #0]
 800a43c:	e002      	b.n	800a444 <_printf_i+0x1c4>
 800a43e:	0668      	lsls	r0, r5, #25
 800a440:	d5fb      	bpl.n	800a43a <_printf_i+0x1ba>
 800a442:	8019      	strh	r1, [r3, #0]
 800a444:	2300      	movs	r3, #0
 800a446:	6123      	str	r3, [r4, #16]
 800a448:	4616      	mov	r6, r2
 800a44a:	e7bc      	b.n	800a3c6 <_printf_i+0x146>
 800a44c:	6833      	ldr	r3, [r6, #0]
 800a44e:	1d1a      	adds	r2, r3, #4
 800a450:	6032      	str	r2, [r6, #0]
 800a452:	681e      	ldr	r6, [r3, #0]
 800a454:	6862      	ldr	r2, [r4, #4]
 800a456:	2100      	movs	r1, #0
 800a458:	4630      	mov	r0, r6
 800a45a:	f7f5 feb9 	bl	80001d0 <memchr>
 800a45e:	b108      	cbz	r0, 800a464 <_printf_i+0x1e4>
 800a460:	1b80      	subs	r0, r0, r6
 800a462:	6060      	str	r0, [r4, #4]
 800a464:	6863      	ldr	r3, [r4, #4]
 800a466:	6123      	str	r3, [r4, #16]
 800a468:	2300      	movs	r3, #0
 800a46a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a46e:	e7aa      	b.n	800a3c6 <_printf_i+0x146>
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	4632      	mov	r2, r6
 800a474:	4649      	mov	r1, r9
 800a476:	4640      	mov	r0, r8
 800a478:	47d0      	blx	sl
 800a47a:	3001      	adds	r0, #1
 800a47c:	d0ad      	beq.n	800a3da <_printf_i+0x15a>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	079b      	lsls	r3, r3, #30
 800a482:	d413      	bmi.n	800a4ac <_printf_i+0x22c>
 800a484:	68e0      	ldr	r0, [r4, #12]
 800a486:	9b03      	ldr	r3, [sp, #12]
 800a488:	4298      	cmp	r0, r3
 800a48a:	bfb8      	it	lt
 800a48c:	4618      	movlt	r0, r3
 800a48e:	e7a6      	b.n	800a3de <_printf_i+0x15e>
 800a490:	2301      	movs	r3, #1
 800a492:	4632      	mov	r2, r6
 800a494:	4649      	mov	r1, r9
 800a496:	4640      	mov	r0, r8
 800a498:	47d0      	blx	sl
 800a49a:	3001      	adds	r0, #1
 800a49c:	d09d      	beq.n	800a3da <_printf_i+0x15a>
 800a49e:	3501      	adds	r5, #1
 800a4a0:	68e3      	ldr	r3, [r4, #12]
 800a4a2:	9903      	ldr	r1, [sp, #12]
 800a4a4:	1a5b      	subs	r3, r3, r1
 800a4a6:	42ab      	cmp	r3, r5
 800a4a8:	dcf2      	bgt.n	800a490 <_printf_i+0x210>
 800a4aa:	e7eb      	b.n	800a484 <_printf_i+0x204>
 800a4ac:	2500      	movs	r5, #0
 800a4ae:	f104 0619 	add.w	r6, r4, #25
 800a4b2:	e7f5      	b.n	800a4a0 <_printf_i+0x220>
 800a4b4:	0800a915 	.word	0x0800a915
 800a4b8:	0800a926 	.word	0x0800a926

0800a4bc <__sflush_r>:
 800a4bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c4:	0716      	lsls	r6, r2, #28
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	d454      	bmi.n	800a576 <__sflush_r+0xba>
 800a4cc:	684b      	ldr	r3, [r1, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	dc02      	bgt.n	800a4d8 <__sflush_r+0x1c>
 800a4d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	dd48      	ble.n	800a56a <__sflush_r+0xae>
 800a4d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4da:	2e00      	cmp	r6, #0
 800a4dc:	d045      	beq.n	800a56a <__sflush_r+0xae>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4e4:	682f      	ldr	r7, [r5, #0]
 800a4e6:	6a21      	ldr	r1, [r4, #32]
 800a4e8:	602b      	str	r3, [r5, #0]
 800a4ea:	d030      	beq.n	800a54e <__sflush_r+0x92>
 800a4ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	0759      	lsls	r1, r3, #29
 800a4f2:	d505      	bpl.n	800a500 <__sflush_r+0x44>
 800a4f4:	6863      	ldr	r3, [r4, #4]
 800a4f6:	1ad2      	subs	r2, r2, r3
 800a4f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4fa:	b10b      	cbz	r3, 800a500 <__sflush_r+0x44>
 800a4fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4fe:	1ad2      	subs	r2, r2, r3
 800a500:	2300      	movs	r3, #0
 800a502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a504:	6a21      	ldr	r1, [r4, #32]
 800a506:	4628      	mov	r0, r5
 800a508:	47b0      	blx	r6
 800a50a:	1c43      	adds	r3, r0, #1
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	d106      	bne.n	800a51e <__sflush_r+0x62>
 800a510:	6829      	ldr	r1, [r5, #0]
 800a512:	291d      	cmp	r1, #29
 800a514:	d82b      	bhi.n	800a56e <__sflush_r+0xb2>
 800a516:	4a2a      	ldr	r2, [pc, #168]	@ (800a5c0 <__sflush_r+0x104>)
 800a518:	40ca      	lsrs	r2, r1
 800a51a:	07d6      	lsls	r6, r2, #31
 800a51c:	d527      	bpl.n	800a56e <__sflush_r+0xb2>
 800a51e:	2200      	movs	r2, #0
 800a520:	6062      	str	r2, [r4, #4]
 800a522:	04d9      	lsls	r1, r3, #19
 800a524:	6922      	ldr	r2, [r4, #16]
 800a526:	6022      	str	r2, [r4, #0]
 800a528:	d504      	bpl.n	800a534 <__sflush_r+0x78>
 800a52a:	1c42      	adds	r2, r0, #1
 800a52c:	d101      	bne.n	800a532 <__sflush_r+0x76>
 800a52e:	682b      	ldr	r3, [r5, #0]
 800a530:	b903      	cbnz	r3, 800a534 <__sflush_r+0x78>
 800a532:	6560      	str	r0, [r4, #84]	@ 0x54
 800a534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a536:	602f      	str	r7, [r5, #0]
 800a538:	b1b9      	cbz	r1, 800a56a <__sflush_r+0xae>
 800a53a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a53e:	4299      	cmp	r1, r3
 800a540:	d002      	beq.n	800a548 <__sflush_r+0x8c>
 800a542:	4628      	mov	r0, r5
 800a544:	f7ff fbf4 	bl	8009d30 <_free_r>
 800a548:	2300      	movs	r3, #0
 800a54a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a54c:	e00d      	b.n	800a56a <__sflush_r+0xae>
 800a54e:	2301      	movs	r3, #1
 800a550:	4628      	mov	r0, r5
 800a552:	47b0      	blx	r6
 800a554:	4602      	mov	r2, r0
 800a556:	1c50      	adds	r0, r2, #1
 800a558:	d1c9      	bne.n	800a4ee <__sflush_r+0x32>
 800a55a:	682b      	ldr	r3, [r5, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0c6      	beq.n	800a4ee <__sflush_r+0x32>
 800a560:	2b1d      	cmp	r3, #29
 800a562:	d001      	beq.n	800a568 <__sflush_r+0xac>
 800a564:	2b16      	cmp	r3, #22
 800a566:	d11e      	bne.n	800a5a6 <__sflush_r+0xea>
 800a568:	602f      	str	r7, [r5, #0]
 800a56a:	2000      	movs	r0, #0
 800a56c:	e022      	b.n	800a5b4 <__sflush_r+0xf8>
 800a56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a572:	b21b      	sxth	r3, r3
 800a574:	e01b      	b.n	800a5ae <__sflush_r+0xf2>
 800a576:	690f      	ldr	r7, [r1, #16]
 800a578:	2f00      	cmp	r7, #0
 800a57a:	d0f6      	beq.n	800a56a <__sflush_r+0xae>
 800a57c:	0793      	lsls	r3, r2, #30
 800a57e:	680e      	ldr	r6, [r1, #0]
 800a580:	bf08      	it	eq
 800a582:	694b      	ldreq	r3, [r1, #20]
 800a584:	600f      	str	r7, [r1, #0]
 800a586:	bf18      	it	ne
 800a588:	2300      	movne	r3, #0
 800a58a:	eba6 0807 	sub.w	r8, r6, r7
 800a58e:	608b      	str	r3, [r1, #8]
 800a590:	f1b8 0f00 	cmp.w	r8, #0
 800a594:	dde9      	ble.n	800a56a <__sflush_r+0xae>
 800a596:	6a21      	ldr	r1, [r4, #32]
 800a598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a59a:	4643      	mov	r3, r8
 800a59c:	463a      	mov	r2, r7
 800a59e:	4628      	mov	r0, r5
 800a5a0:	47b0      	blx	r6
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	dc08      	bgt.n	800a5b8 <__sflush_r+0xfc>
 800a5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5ae:	81a3      	strh	r3, [r4, #12]
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b8:	4407      	add	r7, r0
 800a5ba:	eba8 0800 	sub.w	r8, r8, r0
 800a5be:	e7e7      	b.n	800a590 <__sflush_r+0xd4>
 800a5c0:	20400001 	.word	0x20400001

0800a5c4 <_fflush_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	690b      	ldr	r3, [r1, #16]
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	b913      	cbnz	r3, 800a5d4 <_fflush_r+0x10>
 800a5ce:	2500      	movs	r5, #0
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	b118      	cbz	r0, 800a5de <_fflush_r+0x1a>
 800a5d6:	6a03      	ldr	r3, [r0, #32]
 800a5d8:	b90b      	cbnz	r3, 800a5de <_fflush_r+0x1a>
 800a5da:	f7ff f999 	bl	8009910 <__sinit>
 800a5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0f3      	beq.n	800a5ce <_fflush_r+0xa>
 800a5e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5e8:	07d0      	lsls	r0, r2, #31
 800a5ea:	d404      	bmi.n	800a5f6 <_fflush_r+0x32>
 800a5ec:	0599      	lsls	r1, r3, #22
 800a5ee:	d402      	bmi.n	800a5f6 <_fflush_r+0x32>
 800a5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5f2:	f7ff fb8c 	bl	8009d0e <__retarget_lock_acquire_recursive>
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	f7ff ff5f 	bl	800a4bc <__sflush_r>
 800a5fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a600:	07da      	lsls	r2, r3, #31
 800a602:	4605      	mov	r5, r0
 800a604:	d4e4      	bmi.n	800a5d0 <_fflush_r+0xc>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	059b      	lsls	r3, r3, #22
 800a60a:	d4e1      	bmi.n	800a5d0 <_fflush_r+0xc>
 800a60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a60e:	f7ff fb7f 	bl	8009d10 <__retarget_lock_release_recursive>
 800a612:	e7dd      	b.n	800a5d0 <_fflush_r+0xc>

0800a614 <__swhatbuf_r>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	460c      	mov	r4, r1
 800a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61c:	2900      	cmp	r1, #0
 800a61e:	b096      	sub	sp, #88	@ 0x58
 800a620:	4615      	mov	r5, r2
 800a622:	461e      	mov	r6, r3
 800a624:	da0d      	bge.n	800a642 <__swhatbuf_r+0x2e>
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a62c:	f04f 0100 	mov.w	r1, #0
 800a630:	bf14      	ite	ne
 800a632:	2340      	movne	r3, #64	@ 0x40
 800a634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a638:	2000      	movs	r0, #0
 800a63a:	6031      	str	r1, [r6, #0]
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	b016      	add	sp, #88	@ 0x58
 800a640:	bd70      	pop	{r4, r5, r6, pc}
 800a642:	466a      	mov	r2, sp
 800a644:	f000 f87c 	bl	800a740 <_fstat_r>
 800a648:	2800      	cmp	r0, #0
 800a64a:	dbec      	blt.n	800a626 <__swhatbuf_r+0x12>
 800a64c:	9901      	ldr	r1, [sp, #4]
 800a64e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a656:	4259      	negs	r1, r3
 800a658:	4159      	adcs	r1, r3
 800a65a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a65e:	e7eb      	b.n	800a638 <__swhatbuf_r+0x24>

0800a660 <__smakebuf_r>:
 800a660:	898b      	ldrh	r3, [r1, #12]
 800a662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a664:	079d      	lsls	r5, r3, #30
 800a666:	4606      	mov	r6, r0
 800a668:	460c      	mov	r4, r1
 800a66a:	d507      	bpl.n	800a67c <__smakebuf_r+0x1c>
 800a66c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	6123      	str	r3, [r4, #16]
 800a674:	2301      	movs	r3, #1
 800a676:	6163      	str	r3, [r4, #20]
 800a678:	b003      	add	sp, #12
 800a67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a67c:	ab01      	add	r3, sp, #4
 800a67e:	466a      	mov	r2, sp
 800a680:	f7ff ffc8 	bl	800a614 <__swhatbuf_r>
 800a684:	9f00      	ldr	r7, [sp, #0]
 800a686:	4605      	mov	r5, r0
 800a688:	4639      	mov	r1, r7
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff fbbc 	bl	8009e08 <_malloc_r>
 800a690:	b948      	cbnz	r0, 800a6a6 <__smakebuf_r+0x46>
 800a692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a696:	059a      	lsls	r2, r3, #22
 800a698:	d4ee      	bmi.n	800a678 <__smakebuf_r+0x18>
 800a69a:	f023 0303 	bic.w	r3, r3, #3
 800a69e:	f043 0302 	orr.w	r3, r3, #2
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	e7e2      	b.n	800a66c <__smakebuf_r+0xc>
 800a6a6:	89a3      	ldrh	r3, [r4, #12]
 800a6a8:	6020      	str	r0, [r4, #0]
 800a6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	9b01      	ldr	r3, [sp, #4]
 800a6b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6b6:	b15b      	cbz	r3, 800a6d0 <__smakebuf_r+0x70>
 800a6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f000 f851 	bl	800a764 <_isatty_r>
 800a6c2:	b128      	cbz	r0, 800a6d0 <__smakebuf_r+0x70>
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	f023 0303 	bic.w	r3, r3, #3
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	431d      	orrs	r5, r3
 800a6d4:	81a5      	strh	r5, [r4, #12]
 800a6d6:	e7cf      	b.n	800a678 <__smakebuf_r+0x18>

0800a6d8 <_putc_r>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	460d      	mov	r5, r1
 800a6dc:	4614      	mov	r4, r2
 800a6de:	4606      	mov	r6, r0
 800a6e0:	b118      	cbz	r0, 800a6ea <_putc_r+0x12>
 800a6e2:	6a03      	ldr	r3, [r0, #32]
 800a6e4:	b90b      	cbnz	r3, 800a6ea <_putc_r+0x12>
 800a6e6:	f7ff f913 	bl	8009910 <__sinit>
 800a6ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6ec:	07d8      	lsls	r0, r3, #31
 800a6ee:	d405      	bmi.n	800a6fc <_putc_r+0x24>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	0599      	lsls	r1, r3, #22
 800a6f4:	d402      	bmi.n	800a6fc <_putc_r+0x24>
 800a6f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6f8:	f7ff fb09 	bl	8009d0e <__retarget_lock_acquire_recursive>
 800a6fc:	68a3      	ldr	r3, [r4, #8]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	60a3      	str	r3, [r4, #8]
 800a704:	da05      	bge.n	800a712 <_putc_r+0x3a>
 800a706:	69a2      	ldr	r2, [r4, #24]
 800a708:	4293      	cmp	r3, r2
 800a70a:	db12      	blt.n	800a732 <_putc_r+0x5a>
 800a70c:	b2eb      	uxtb	r3, r5
 800a70e:	2b0a      	cmp	r3, #10
 800a710:	d00f      	beq.n	800a732 <_putc_r+0x5a>
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	6022      	str	r2, [r4, #0]
 800a718:	701d      	strb	r5, [r3, #0]
 800a71a:	b2ed      	uxtb	r5, r5
 800a71c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a71e:	07da      	lsls	r2, r3, #31
 800a720:	d405      	bmi.n	800a72e <_putc_r+0x56>
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	059b      	lsls	r3, r3, #22
 800a726:	d402      	bmi.n	800a72e <_putc_r+0x56>
 800a728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a72a:	f7ff faf1 	bl	8009d10 <__retarget_lock_release_recursive>
 800a72e:	4628      	mov	r0, r5
 800a730:	bd70      	pop	{r4, r5, r6, pc}
 800a732:	4629      	mov	r1, r5
 800a734:	4622      	mov	r2, r4
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff f9db 	bl	8009af2 <__swbuf_r>
 800a73c:	4605      	mov	r5, r0
 800a73e:	e7ed      	b.n	800a71c <_putc_r+0x44>

0800a740 <_fstat_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4d07      	ldr	r5, [pc, #28]	@ (800a760 <_fstat_r+0x20>)
 800a744:	2300      	movs	r3, #0
 800a746:	4604      	mov	r4, r0
 800a748:	4608      	mov	r0, r1
 800a74a:	4611      	mov	r1, r2
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	f7f7 f8e7 	bl	8001920 <_fstat>
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	d102      	bne.n	800a75c <_fstat_r+0x1c>
 800a756:	682b      	ldr	r3, [r5, #0]
 800a758:	b103      	cbz	r3, 800a75c <_fstat_r+0x1c>
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	bd38      	pop	{r3, r4, r5, pc}
 800a75e:	bf00      	nop
 800a760:	20001b80 	.word	0x20001b80

0800a764 <_isatty_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4d06      	ldr	r5, [pc, #24]	@ (800a780 <_isatty_r+0x1c>)
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	f7f7 f8e6 	bl	8001940 <_isatty>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_isatty_r+0x1a>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_isatty_r+0x1a>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	20001b80 	.word	0x20001b80

0800a784 <_sbrk_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d06      	ldr	r5, [pc, #24]	@ (800a7a0 <_sbrk_r+0x1c>)
 800a788:	2300      	movs	r3, #0
 800a78a:	4604      	mov	r4, r0
 800a78c:	4608      	mov	r0, r1
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	f7f7 f8ee 	bl	8001970 <_sbrk>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_sbrk_r+0x1a>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_sbrk_r+0x1a>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	20001b80 	.word	0x20001b80

0800a7a4 <_init>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	bf00      	nop
 800a7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7aa:	bc08      	pop	{r3}
 800a7ac:	469e      	mov	lr, r3
 800a7ae:	4770      	bx	lr

0800a7b0 <_fini>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr
