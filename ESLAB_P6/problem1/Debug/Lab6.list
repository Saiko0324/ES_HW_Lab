
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800a378  0800a378  0000b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a474  0800a474  0000c06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a474  0800a474  0000b474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a47c  0800a47c  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a47c  0800a47c  0000b47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a480  0800a480  0000b480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a484  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018dc  2000006c  0800a4f0  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001948  0800a4f0  0000c948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000277df  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dec  00000000  00000000  0003387b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002570  00000000  00000000  00038668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d35  00000000  00000000  0003abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e0df  00000000  00000000  0003c90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a55d  00000000  00000000  0006a9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c3d2  00000000  00000000  00094f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b131b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa18  00000000  00000000  001b1360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001bbd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a360 	.word	0x0800a360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a360 	.word	0x0800a360

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	200000dc 	.word	0x200000dc

080005d0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
      HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005de:	2201      	movs	r2, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <__io_putchar+0x20>)
 80005e2:	f005 fcdb 	bl	8005f9c <HAL_UART_Transmit>
      return ch;
 80005e6:	687b      	ldr	r3, [r7, #4]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200004c0 	.word	0x200004c0

080005f4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	uint16_t adcValue = HAL_ADC_GetValue(hadc);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f001 fe53 	bl	80022a8 <HAL_ADC_GetValue>
 8000602:	4603      	mov	r3, r0
 8000604:	81fb      	strh	r3, [r7, #14]
	osMessagePut(adcQueueHandle, (uint32_t)adcValue, 0);
 8000606:	4b05      	ldr	r3, [pc, #20]	@ (800061c <HAL_ADC_ConvCpltCallback+0x28>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	89f9      	ldrh	r1, [r7, #14]
 800060c:	2200      	movs	r2, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f006 fd86 	bl	8007120 <osMessagePut>
	// printf("%d\n", adcValue);
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000abc 	.word	0x20000abc

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b092      	sub	sp, #72	@ 0x48
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f001 f932 	bl	800188e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f863 	bl	80006f4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800062e:	f000 f8c3 	bl	80007b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 fb25 	bl	8000c80 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000636:	f000 f965 	bl	8000904 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800063a:	f000 f99b 	bl	8000974 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800063e:	f000 f9d9 	bl	80009f4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000642:	f000 f9fd 	bl	8000a40 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000646:	f000 fa8d 	bl	8000b64 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800064a:	f000 fabb 	bl	8000bc4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800064e:	f000 fae9 	bl	8000c24 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000652:	f000 f8dd 	bl	8000810 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000656:	f000 fa31 	bl	8000abc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800065a:	481e      	ldr	r0, [pc, #120]	@ (80006d4 <main+0xb4>)
 800065c:	f001 fcf6 	bl	800204c <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000660:	481d      	ldr	r0, [pc, #116]	@ (80006d8 <main+0xb8>)
 8000662:	f005 f94b 	bl	80058fc <HAL_TIM_Base_Start_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, uint16_t);
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <main+0xbc>)
 8000668:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800066c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800066e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 8000672:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f006 fd29 	bl	80070d0 <osMessageCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <main+0xc0>)
 8000682:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <main+0xc4>)
 8000686:	f107 041c 	add.w	r4, r7, #28
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fcb6 	bl	8007010 <osThreadCreate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a10      	ldr	r2, [pc, #64]	@ (80006e8 <main+0xc8>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Print */
  osThreadDef(Task_Print, StartPrintTask, osPriorityHigh, 0, 512);
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <main+0xcc>)
 80006ac:	463c      	mov	r4, r7
 80006ae:	461d      	mov	r5, r3
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_PrintHandle = osThreadCreate(osThread(Task_Print), NULL);
 80006bc:	463b      	mov	r3, r7
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f006 fca5 	bl	8007010 <osThreadCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a09      	ldr	r2, [pc, #36]	@ (80006f0 <main+0xd0>)
 80006ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006cc:	f006 fc99 	bl	8007002 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <main+0xb0>
 80006d4:	200002dc 	.word	0x200002dc
 80006d8:	20000474 	.word	0x20000474
 80006dc:	0800a378 	.word	0x0800a378
 80006e0:	20000abc 	.word	0x20000abc
 80006e4:	0800a394 	.word	0x0800a394
 80006e8:	20000ab4 	.word	0x20000ab4
 80006ec:	0800a3bc 	.word	0x0800a3bc
 80006f0:	20000ab8 	.word	0x20000ab8

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	@ 0x58
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2244      	movs	r2, #68	@ 0x44
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f009 f807 	bl	8009716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000716:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800071a:	f003 fc07 	bl	8003f2c <HAL_PWREx_ControlVoltageScaling>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000724:	f000 fc58 	bl	8000fd8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000728:	f003 fbe2 	bl	8003ef0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <SystemClock_Config+0xc0>)
 800072e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000732:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <SystemClock_Config+0xc0>)
 8000734:	f023 0318 	bic.w	r3, r3, #24
 8000738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800073c:	2314      	movs	r3, #20
 800073e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800074c:	2360      	movs	r3, #96	@ 0x60
 800074e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000754:	2301      	movs	r3, #1
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800075c:	2328      	movs	r3, #40	@ 0x28
 800075e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000760:	2307      	movs	r3, #7
 8000762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fcfd 	bl	8004170 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800077c:	f000 fc2c 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2303      	movs	r3, #3
 8000786:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	2104      	movs	r1, #4
 8000798:	4618      	mov	r0, r3
 800079a:	f004 f8c5 	bl	8004928 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a4:	f000 fc18 	bl	8000fd8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a8:	f004 fdcc 	bl	8005344 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007ac:	bf00      	nop
 80007ae:	3758      	adds	r7, #88	@ 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0a2      	sub	sp, #136	@ 0x88
 80007bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2288      	movs	r2, #136	@ 0x88
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 ffa6 	bl	8009716 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80007d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007d6:	2301      	movs	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80007de:	2318      	movs	r3, #24
 80007e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80007ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80007f2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 faba 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000802:	f000 fbe9 	bl	8000fd8 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3788      	adds	r7, #136	@ 0x88
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000832:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000834:	4a31      	ldr	r2, [pc, #196]	@ (80008fc <MX_ADC1_Init+0xec>)
 8000836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000838:	4b2f      	ldr	r3, [pc, #188]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 800083a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800083e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000840:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000846:	4b2c      	ldr	r3, [pc, #176]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084c:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b29      	ldr	r3, [pc, #164]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000854:	2204      	movs	r2, #4
 8000856:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085e:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000864:	4b24      	ldr	r3, [pc, #144]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000866:	2201      	movs	r2, #1
 8000868:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000874:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 800087c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000880:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000898:	4817      	ldr	r0, [pc, #92]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 800089a:	f001 fa87 	bl	8001dac <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008a4:	f000 fb98 	bl	8000fd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 80008b4:	f002 fc04 	bl	80030c0 <HAL_ADCEx_MultiModeConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008be:	f000 fb8b 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_ADC1_Init+0xf0>)
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c6:	2306      	movs	r3, #6
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ce:	237f      	movs	r3, #127	@ 0x7f
 80008d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <MX_ADC1_Init+0xe8>)
 80008e0:	f001 ff1e 	bl	8002720 <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ea:	f000 fb75 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	@ 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200002dc 	.word	0x200002dc
 80008fc:	50040000 	.word	0x50040000
 8000900:	c7520000 	.word	0xc7520000

08000904 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <MX_DFSDM1_Init+0x68>)
 800090a:	4a19      	ldr	r2, [pc, #100]	@ (8000970 <MX_DFSDM1_Init+0x6c>)
 800090c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_DFSDM1_Init+0x68>)
 8000910:	2201      	movs	r2, #1
 8000912:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_DFSDM1_Init+0x68>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_DFSDM1_Init+0x68>)
 800091c:	2202      	movs	r2, #2
 800091e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_DFSDM1_Init+0x68>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_DFSDM1_Init+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_DFSDM1_Init+0x68>)
 800092e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000932:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <MX_DFSDM1_Init+0x68>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_DFSDM1_Init+0x68>)
 800093c:	2204      	movs	r2, #4
 800093e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <MX_DFSDM1_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_DFSDM1_Init+0x68>)
 8000948:	2201      	movs	r2, #1
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <MX_DFSDM1_Init+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_DFSDM1_Init+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <MX_DFSDM1_Init+0x68>)
 800095a:	f002 fd73 	bl	8003444 <HAL_DFSDM_ChannelInit>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000964:	f000 fb38 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000340 	.word	0x20000340
 8000970:	40016020 	.word	0x40016020

08000974 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_I2C2_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <MX_I2C2_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <MX_I2C2_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	@ (80009f0 <MX_I2C2_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_I2C2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <MX_I2C2_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <MX_I2C2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_I2C2_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <MX_I2C2_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_I2C2_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_I2C2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	@ (80009e8 <MX_I2C2_Init+0x74>)
 80009b0:	f003 f839 	bl	8003a26 <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 fb0d 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <MX_I2C2_Init+0x74>)
 80009c2:	f003 f8cb 	bl	8003b5c <HAL_I2CEx_ConfigAnalogFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 fb04 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_I2C2_Init+0x74>)
 80009d4:	f003 f90d 	bl	8003bf2 <HAL_I2CEx_ConfigDigitalFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fafb 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000378 	.word	0x20000378
 80009ec:	40005800 	.word	0x40005800
 80009f0:	10d19ce4 	.word	0x10d19ce4

080009f4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_QUADSPI_Init+0x44>)
 80009fa:	4a10      	ldr	r2, [pc, #64]	@ (8000a3c <MX_QUADSPI_Init+0x48>)
 80009fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_QUADSPI_Init+0x44>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_QUADSPI_Init+0x44>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_QUADSPI_Init+0x44>)
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_QUADSPI_Init+0x44>)
 8000a12:	2217      	movs	r2, #23
 8000a14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_QUADSPI_Init+0x44>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_QUADSPI_Init+0x44>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_QUADSPI_Init+0x44>)
 8000a24:	f003 fae8 	bl	8003ff8 <HAL_QSPI_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a2e:	f000 fad3 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200003cc 	.word	0x200003cc
 8000a3c:	a0001000 	.word	0xa0001000

08000a40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <MX_SPI3_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a5a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a8e:	2207      	movs	r2, #7
 8000a90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_SPI3_Init+0x74>)
 8000aa0:	f004 fe32 	bl	8005708 <HAL_SPI_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 fa95 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000410 	.word	0x20000410
 8000ab8:	40003c00 	.word	0x40003c00

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000adc:	4a20      	ldr	r2, [pc, #128]	@ (8000b60 <MX_TIM1_Init+0xa4>)
 8000ade:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000ae2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000af0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b08:	4814      	ldr	r0, [pc, #80]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000b0a:	f004 fea0 	bl	800584e <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 fa60 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000b26:	f004 ff59 	bl	80059dc <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b30:	f000 fa52 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b34:	2320      	movs	r3, #32
 8000b36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000b46:	f005 f953 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b50:	f000 fa42 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000474 	.word	0x20000474
 8000b60:	40012c00 	.word	0x40012c00

08000b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	@ (8000bc0 <MX_USART1_UART_Init+0x5c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_USART1_UART_Init+0x58>)
 8000ba8:	f005 f9aa 	bl	8005f00 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f000 fa11 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200004c0 	.word	0x200004c0
 8000bc0:	40013800 	.word	0x40013800

08000bc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bca:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <MX_USART3_UART_Init+0x5c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_USART3_UART_Init+0x58>)
 8000c08:	f005 f97a 	bl	8005f00 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 f9e1 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000548 	.word	0x20000548
 8000c20:	40004800 	.word	0x40004800

08000c24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c32:	2206      	movs	r2, #6
 8000c34:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c68:	f003 f80f 	bl	8003c8a <HAL_PCD_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 f9b1 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200005d0 	.word	0x200005d0

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c96:	4bb9      	ldr	r3, [pc, #740]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	4ab8      	ldr	r2, [pc, #736]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca2:	4bb6      	ldr	r3, [pc, #728]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4bb3      	ldr	r3, [pc, #716]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4ab2      	ldr	r2, [pc, #712]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4bb0      	ldr	r3, [pc, #704]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4bad      	ldr	r3, [pc, #692]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	4aac      	ldr	r2, [pc, #688]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd2:	4baa      	ldr	r3, [pc, #680]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	4ba7      	ldr	r3, [pc, #668]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	4aa6      	ldr	r2, [pc, #664]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cea:	4ba4      	ldr	r3, [pc, #656]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4ba1      	ldr	r3, [pc, #644]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4aa0      	ldr	r2, [pc, #640]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b9e      	ldr	r3, [pc, #632]	@ (8000f7c <MX_GPIO_Init+0x2fc>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000d14:	489a      	ldr	r0, [pc, #616]	@ (8000f80 <MX_GPIO_Init+0x300>)
 8000d16:	f002 fe4b 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d24:	f002 fe44 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000d2e:	4895      	ldr	r0, [pc, #596]	@ (8000f84 <MX_GPIO_Init+0x304>)
 8000d30:	f002 fe3e 	bl	80039b0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000d3a:	4893      	ldr	r0, [pc, #588]	@ (8000f88 <MX_GPIO_Init+0x308>)
 8000d3c:	f002 fe38 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d46:	4890      	ldr	r0, [pc, #576]	@ (8000f88 <MX_GPIO_Init+0x308>)
 8000d48:	f002 fe32 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000d52:	488e      	ldr	r0, [pc, #568]	@ (8000f8c <MX_GPIO_Init+0x30c>)
 8000d54:	f002 fe2c 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	4889      	ldr	r0, [pc, #548]	@ (8000f84 <MX_GPIO_Init+0x304>)
 8000d5e:	f002 fe27 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2101      	movs	r1, #1
 8000d66:	4886      	ldr	r0, [pc, #536]	@ (8000f80 <MX_GPIO_Init+0x300>)
 8000d68:	f002 fe22 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d6c:	f240 1315 	movw	r3, #277	@ 0x115
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	487e      	ldr	r0, [pc, #504]	@ (8000f80 <MX_GPIO_Init+0x300>)
 8000d86:	f002 fc69 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d8a:	236a      	movs	r3, #106	@ 0x6a
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4878      	ldr	r0, [pc, #480]	@ (8000f80 <MX_GPIO_Init+0x300>)
 8000da0:	f002 fc5c 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000da4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000daa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4874      	ldr	r0, [pc, #464]	@ (8000f8c <MX_GPIO_Init+0x30c>)
 8000dbc:	f002 fc4e 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dde:	f002 fc3d 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000de2:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f002 fc2d 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e02:	2308      	movs	r3, #8
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e12:	2301      	movs	r3, #1
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f002 fc1c 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000e24:	23e0      	movs	r3, #224	@ 0xe0
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e34:	2305      	movs	r3, #5
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e42:	f002 fc0b 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	484a      	ldr	r0, [pc, #296]	@ (8000f84 <MX_GPIO_Init+0x304>)
 8000e5c:	f002 fbfe 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e60:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000e64:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4842      	ldr	r0, [pc, #264]	@ (8000f84 <MX_GPIO_Init+0x304>)
 8000e7a:	f002 fbef 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e7e:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000e82:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e84:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	483c      	ldr	r0, [pc, #240]	@ (8000f88 <MX_GPIO_Init+0x308>)
 8000e96:	f002 fbe1 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e9a:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4835      	ldr	r0, [pc, #212]	@ (8000f88 <MX_GPIO_Init+0x308>)
 8000eb4:	f002 fbd2 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000eb8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	482e      	ldr	r0, [pc, #184]	@ (8000f8c <MX_GPIO_Init+0x30c>)
 8000ed2:	f002 fbc3 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ed6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000edc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4827      	ldr	r0, [pc, #156]	@ (8000f8c <MX_GPIO_Init+0x30c>)
 8000eee:	f002 fbb5 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f02:	2305      	movs	r3, #5
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481e      	ldr	r0, [pc, #120]	@ (8000f88 <MX_GPIO_Init+0x308>)
 8000f0e:	f002 fba5 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000f12:	2378      	movs	r3, #120	@ 0x78
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f22:	2307      	movs	r3, #7
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4816      	ldr	r0, [pc, #88]	@ (8000f88 <MX_GPIO_Init+0x308>)
 8000f2e:	f002 fb95 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f44:	2304      	movs	r3, #4
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <MX_GPIO_Init+0x304>)
 8000f50:	f002 fb84 	bl	800365c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2105      	movs	r1, #5
 8000f58:	2017      	movs	r0, #23
 8000f5a:	f002 fa3c 	bl	80033d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f5e:	2017      	movs	r0, #23
 8000f60:	f002 fa55 	bl	800340e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2105      	movs	r1, #5
 8000f68:	2028      	movs	r0, #40	@ 0x28
 8000f6a:	f002 fa34 	bl	80033d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f6e:	2028      	movs	r0, #40	@ 0x28
 8000f70:	f002 fa4d 	bl	800340e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	@ 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	48001000 	.word	0x48001000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	48000800 	.word	0x48000800

08000f90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f006 f885 	bl	80070a8 <osDelay>
 8000f9e:	e7fb      	b.n	8000f98 <StartDefaultTask+0x8>

08000fa0 <StartPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void const * argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint16_t receivedAdcValue;
  /* Infinite loop */
  for(;;)
  {
	// Wait indefinitely until a message is received from the adcQueueHandle
	event = osMessageGet(adcQueueHandle, osWaitForever); // Block until data is available
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <StartPrintTask+0x30>)
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 f8f3 	bl	80071a0 <osMessageGet>

	if (event.status == osEventMessage) // Check if the received event contains a message
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2b10      	cmp	r3, #16
 8000fbe:	d1f3      	bne.n	8000fa8 <StartPrintTask+0x8>
	{
	  receivedAdcValue = (uint16_t)event.value.v; // Extract the ADC value (CMSIS-OS v1 stores it in .v)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	82fb      	strh	r3, [r7, #22]
	  printf("Temp Sensor ADC: %d\r\n", receivedAdcValue); // Print the value via UART
 8000fc4:	8afb      	ldrh	r3, [r7, #22]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <StartPrintTask+0x34>)
 8000fca:	f008 fb4f 	bl	800966c <iprintf>
	event = osMessageGet(adcQueueHandle, osWaitForever); // Block until data is available
 8000fce:	e7eb      	b.n	8000fa8 <StartPrintTask+0x8>
 8000fd0:	20000abc 	.word	0x20000abc
 8000fd4:	0800a3d8 	.word	0x0800a3d8

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_MspInit+0x4c>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_MspInit+0x4c>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100c:	6593      	str	r3, [r2, #88]	@ 0x58
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	210f      	movs	r1, #15
 800101e:	f06f 0001 	mvn.w	r0, #1
 8001022:	f002 f9d8 	bl	80033d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a31      	ldr	r2, [pc, #196]	@ (8001118 <HAL_ADC_MspInit+0xe4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d15c      	bne.n	8001110 <HAL_ADC_MspInit+0xdc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001056:	4b31      	ldr	r3, [pc, #196]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	4a30      	ldr	r2, [pc, #192]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 800105c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	4a2a      	ldr	r2, [pc, #168]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a24      	ldr	r2, [pc, #144]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a1e      	ldr	r2, [pc, #120]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010b6:	233f      	movs	r3, #63	@ 0x3f
 80010b8:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ba:	230b      	movs	r3, #11
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4815      	ldr	r0, [pc, #84]	@ (8001120 <HAL_ADC_MspInit+0xec>)
 80010ca:	f002 fac7 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 80010ce:	2310      	movs	r3, #16
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010d2:	230b      	movs	r3, #11
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f002 faba 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ec:	230b      	movs	r3, #11
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	480a      	ldr	r0, [pc, #40]	@ (8001124 <HAL_ADC_MspInit+0xf0>)
 80010fc:	f002 faae 	bl	800365c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2105      	movs	r1, #5
 8001104:	2012      	movs	r0, #18
 8001106:	f002 f966 	bl	80033d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800110a:	2012      	movs	r0, #18
 800110c:	f002 f97f 	bl	800340e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001110:	bf00      	nop
 8001112:	3730      	adds	r7, #48	@ 0x30
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	50040000 	.word	0x50040000
 800111c:	40021000 	.word	0x40021000
 8001120:	48000800 	.word	0x48000800
 8001124:	48000400 	.word	0x48000400

08001128 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0ac      	sub	sp, #176	@ 0xb0
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2288      	movs	r2, #136	@ 0x88
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f008 fae4 	bl	8009716 <memset>
  if(DFSDM1_Init == 0)
 800114e:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d142      	bne.n	80011dc <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001156:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800115a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fe02 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001172:	f7ff ff31 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	4a1b      	ldr	r2, [pc, #108]	@ (80011e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800117c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001180:	6613      	str	r3, [r2, #96]	@ 0x60
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	4a15      	ldr	r2, [pc, #84]	@ (80011e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80011a6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011c0:	2306      	movs	r3, #6
 80011c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ca:	4619      	mov	r1, r3
 80011cc:	4807      	ldr	r0, [pc, #28]	@ (80011ec <HAL_DFSDM_ChannelMspInit+0xc4>)
 80011ce:	f002 fa45 	bl	800365c <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a02      	ldr	r2, [pc, #8]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011da:	6013      	str	r3, [r2, #0]
  }

}
 80011dc:	bf00      	nop
 80011de:	37b0      	adds	r7, #176	@ 0xb0
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000ac0 	.word	0x20000ac0
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48001000 	.word	0x48001000

080011f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0ac      	sub	sp, #176	@ 0xb0
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2288      	movs	r2, #136	@ 0x88
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f008 fa80 	bl	8009716 <memset>
  if(hi2c->Instance==I2C2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a21      	ldr	r2, [pc, #132]	@ (80012a0 <HAL_I2C_MspInit+0xb0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d13b      	bne.n	8001298 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001224:	2300      	movs	r3, #0
 8001226:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4618      	mov	r0, r3
 800122e:	f003 fd9f 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001238:	f7ff fece 	bl	8000fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_I2C_MspInit+0xb4>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001240:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <HAL_I2C_MspInit+0xb4>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <HAL_I2C_MspInit+0xb4>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001254:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125c:	2312      	movs	r3, #18
 800125e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001262:	2301      	movs	r3, #1
 8001264:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800126e:	2304      	movs	r3, #4
 8001270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001278:	4619      	mov	r1, r3
 800127a:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <HAL_I2C_MspInit+0xb8>)
 800127c:	f002 f9ee 	bl	800365c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_I2C_MspInit+0xb4>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2C_MspInit+0xb4>)
 8001286:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800128a:	6593      	str	r3, [r2, #88]	@ 0x58
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_I2C_MspInit+0xb4>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001298:	bf00      	nop
 800129a:	37b0      	adds	r7, #176	@ 0xb0
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40005800 	.word	0x40005800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000400 	.word	0x48000400

080012ac <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a17      	ldr	r2, [pc, #92]	@ (8001328 <HAL_QSPI_MspInit+0x7c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d128      	bne.n	8001320 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012ce:	4b17      	ldr	r3, [pc, #92]	@ (800132c <HAL_QSPI_MspInit+0x80>)
 80012d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012d2:	4a16      	ldr	r2, [pc, #88]	@ (800132c <HAL_QSPI_MspInit+0x80>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <HAL_QSPI_MspInit+0x80>)
 80012dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_QSPI_MspInit+0x80>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	4a10      	ldr	r2, [pc, #64]	@ (800132c <HAL_QSPI_MspInit+0x80>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_QSPI_MspInit+0x80>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012fe:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001302:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001310:	230a      	movs	r3, #10
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	@ (8001330 <HAL_QSPI_MspInit+0x84>)
 800131c:	f002 f99e 	bl	800365c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	@ 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	a0001000 	.word	0xa0001000
 800132c:	40021000 	.word	0x40021000
 8001330:	48001000 	.word	0x48001000

08001334 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a17      	ldr	r2, [pc, #92]	@ (80013b0 <HAL_SPI_MspInit+0x7c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d128      	bne.n	80013a8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <HAL_SPI_MspInit+0x80>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	4a16      	ldr	r2, [pc, #88]	@ (80013b4 <HAL_SPI_MspInit+0x80>)
 800135c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001360:	6593      	str	r3, [r2, #88]	@ 0x58
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <HAL_SPI_MspInit+0x80>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_SPI_MspInit+0x80>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a10      	ldr	r2, [pc, #64]	@ (80013b4 <HAL_SPI_MspInit+0x80>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_SPI_MspInit+0x80>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001386:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001398:	2306      	movs	r3, #6
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <HAL_SPI_MspInit+0x84>)
 80013a4:	f002 f95a 	bl	800365c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40003c00 	.word	0x40003c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48000800 	.word	0x48000800

080013bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_TIM_Base_MspInit+0x38>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10b      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_TIM_Base_MspInit+0x3c>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d2:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <HAL_TIM_Base_MspInit+0x3c>)
 80013d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <HAL_TIM_Base_MspInit+0x3c>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40012c00 	.word	0x40012c00
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	2288      	movs	r2, #136	@ 0x88
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f008 f97a 	bl	8009716 <memset>
  if(huart->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a42      	ldr	r2, [pc, #264]	@ (8001530 <HAL_UART_MspInit+0x134>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d13b      	bne.n	80014a4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800142c:	2301      	movs	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001430:	2300      	movs	r3, #0
 8001432:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fc99 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001444:	f7ff fdc8 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001448:	4b3a      	ldr	r3, [pc, #232]	@ (8001534 <HAL_UART_MspInit+0x138>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144c:	4a39      	ldr	r2, [pc, #228]	@ (8001534 <HAL_UART_MspInit+0x138>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001452:	6613      	str	r3, [r2, #96]	@ 0x60
 8001454:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <HAL_UART_MspInit+0x138>)
 8001456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <HAL_UART_MspInit+0x138>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	4a33      	ldr	r2, [pc, #204]	@ (8001534 <HAL_UART_MspInit+0x138>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146c:	4b31      	ldr	r3, [pc, #196]	@ (8001534 <HAL_UART_MspInit+0x138>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001478:	23c0      	movs	r3, #192	@ 0xc0
 800147a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001490:	2307      	movs	r3, #7
 8001492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800149a:	4619      	mov	r1, r3
 800149c:	4826      	ldr	r0, [pc, #152]	@ (8001538 <HAL_UART_MspInit+0x13c>)
 800149e:	f002 f8dd 	bl	800365c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80014a2:	e040      	b.n	8001526 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a24      	ldr	r2, [pc, #144]	@ (800153c <HAL_UART_MspInit+0x140>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d13b      	bne.n	8001526 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ae:	2304      	movs	r3, #4
 80014b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fc58 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_UART_MspInit+0xce>
      Error_Handler();
 80014c6:	f7ff fd87 	bl	8000fd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_UART_MspInit+0x138>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ce:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <HAL_UART_MspInit+0x138>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <HAL_UART_MspInit+0x138>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <HAL_UART_MspInit+0x138>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	4a13      	ldr	r2, [pc, #76]	@ (8001534 <HAL_UART_MspInit+0x138>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_UART_MspInit+0x138>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80014fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001514:	2307      	movs	r3, #7
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800151e:	4619      	mov	r1, r3
 8001520:	4807      	ldr	r0, [pc, #28]	@ (8001540 <HAL_UART_MspInit+0x144>)
 8001522:	f002 f89b 	bl	800365c <HAL_GPIO_Init>
}
 8001526:	bf00      	nop
 8001528:	37b8      	adds	r7, #184	@ 0xb8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40013800 	.word	0x40013800
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400
 800153c:	40004800 	.word	0x40004800
 8001540:	48000c00 	.word	0x48000c00

08001544 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001564:	d154      	bne.n	8001610 <HAL_PCD_MspInit+0xcc>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b2c      	ldr	r3, [pc, #176]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	4a2b      	ldr	r2, [pc, #172]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001572:	4b29      	ldr	r3, [pc, #164]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800157e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f002 f861 	bl	800365c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800159a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015ac:	230a      	movs	r3, #10
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ba:	f002 f84f 	bl	800365c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 80015c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d114      	bne.n	800160c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80015fa:	f002 fced 	bl	8003fd8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <HAL_PCD_MspInit+0xd4>)
 8001604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001608:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800160a:	e001      	b.n	8001610 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800160c:	f002 fce4 	bl	8003fd8 <HAL_PWREx_EnableVddUSB>
}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	@ 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <NMI_Handler+0x4>

08001624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <MemManage_Handler+0x4>

08001634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <UsageFault_Handler+0x4>

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001656:	f000 f96f 	bl	8001938 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800165a:	f007 f9f7 	bl	8008a4c <xTaskGetSchedulerState>
 800165e:	4603      	mov	r3, r0
 8001660:	2b01      	cmp	r3, #1
 8001662:	d001      	beq.n	8001668 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001664:	f007 fcc0 	bl	8008fe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <ADC1_2_IRQHandler+0x10>)
 8001672:	f000 fe27 	bl	80022c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002dc 	.word	0x200002dc

08001680 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001684:	2020      	movs	r0, #32
 8001686:	f002 f9ab 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800168a:	2040      	movs	r0, #64	@ 0x40
 800168c:	f002 f9a8 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001690:	2080      	movs	r0, #128	@ 0x80
 8001692:	f002 f9a5 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001696:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800169a:	f002 f9a1 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80016a6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80016aa:	f002 f999 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80016ae:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80016b2:	f002 f995 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80016b6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016ba:	f002 f991 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80016be:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016c2:	f002 f98d 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80016c6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80016ca:	f002 f989 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e00a      	b.n	80016fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e4:	f3af 8000 	nop.w
 80016e8:	4601      	mov	r1, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbf0      	blt.n	80016e4 <_read+0x12>
  }

  return len;
 8001702:	687b      	ldr	r3, [r7, #4]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e009      	b.n	8001732 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff52 	bl	80005d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	dbf1      	blt.n	800171e <_write+0x12>
  }
  return len;
 800173a:	687b      	ldr	r3, [r7, #4]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_close>:

int _close(int file)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800176c:	605a      	str	r2, [r3, #4]
  return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_isatty>:

int _isatty(int file)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f007 ffea 	bl	80097b4 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20018000 	.word	0x20018000
 800180c:	00000400 	.word	0x00000400
 8001810:	20000ac4 	.word	0x20000ac4
 8001814:	20001948 	.word	0x20001948

08001818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001874 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001840:	f7ff ffea 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <LoopForever+0x6>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	@ (800187c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <LoopForever+0xe>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	@ (8001888 <LoopForever+0x16>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f007 ffa9 	bl	80097c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186e:	f7fe fed7 	bl	8000620 <main>

08001872 <LoopForever>:

LoopForever:
    b LoopForever
 8001872:	e7fe      	b.n	8001872 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001874:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001880:	0800a484 	.word	0x0800a484
  ldr r2, =_sbss
 8001884:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001888:	20001948 	.word	0x20001948

0800188c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC3_IRQHandler>

0800188e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001898:	2003      	movs	r0, #3
 800189a:	f001 fd91 	bl	80033c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189e:	200f      	movs	r0, #15
 80018a0:	f000 f80e 	bl	80018c0 <HAL_InitTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	e001      	b.n	80018b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b0:	f7ff fb98 	bl	8000fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b4:	79fb      	ldrb	r3, [r7, #7]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018cc:	4b17      	ldr	r3, [pc, #92]	@ (800192c <HAL_InitTick+0x6c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d023      	beq.n	800191c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <HAL_InitTick+0x70>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <HAL_InitTick+0x6c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fd9d 	bl	800342a <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d809      	bhi.n	8001910 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f001 fd67 	bl	80033d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001908:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_InitTick+0x74>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e007      	b.n	8001920 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e004      	b.n	8001920 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	e001      	b.n	8001920 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008
 800195c:	20000ac8 	.word	0x20000ac8

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000ac8 	.word	0x20000ac8

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008

080019c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	609a      	str	r2, [r3, #8]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	609a      	str	r2, [r3, #8]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3360      	adds	r3, #96	@ 0x60
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <LL_ADC_SetOffset+0x44>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	4313      	orrs	r3, r2
 8001a58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	03fff000 	.word	0x03fff000

08001a70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3360      	adds	r3, #96	@ 0x60
 8001a7e:	461a      	mov	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3360      	adds	r3, #96	@ 0x60
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ac6:	bf00      	nop
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3330      	adds	r3, #48	@ 0x30
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	4413      	add	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	211f      	movs	r1, #31
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	f003 011f 	and.w	r1, r3, #31
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b087      	sub	sp, #28
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3314      	adds	r3, #20
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	0e5b      	lsrs	r3, r3, #25
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	0d1b      	lsrs	r3, r3, #20
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2107      	movs	r1, #7
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	0d1b      	lsrs	r3, r3, #20
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bc0:	bf00      	nop
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0318 	and.w	r3, r3, #24
 8001bee:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bf0:	40d9      	lsrs	r1, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	0007ffff 	.word	0x0007ffff

08001c14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 031f 	and.w	r3, r3, #31
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6093      	str	r3, [r2, #8]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c84:	d101      	bne.n	8001c8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cd4:	d101      	bne.n	8001cda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <LL_ADC_IsEnabled+0x18>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <LL_ADC_IsEnabled+0x1a>
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d4a:	f043 0204 	orr.w	r2, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d101      	bne.n	8001d76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d101      	bne.n	8001d9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e130      	b.n	8002028 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff f92d 	bl	8001034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff3f 	bl	8001c70 <LL_ADC_IsDeepPowerDownEnabled>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff25 	bl	8001c4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff5a 	bl	8001cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d115      	bne.n	8001e3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff3e 	bl	8001c98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e1c:	4b84      	ldr	r3, [pc, #528]	@ (8002030 <HAL_ADC_Init+0x284>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	099b      	lsrs	r3, r3, #6
 8001e22:	4a84      	ldr	r2, [pc, #528]	@ (8002034 <HAL_ADC_Init+0x288>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff3c 	bl	8001cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10d      	bne.n	8001e6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e52:	f043 0210 	orr.w	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff75 	bl	8001d5e <LL_ADC_REG_IsConversionOngoing>
 8001e74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 80c9 	bne.w	8002016 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 80c5 	bne.w	8002016 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e94:	f043 0202 	orr.w	r2, r3, #2
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff35 	bl	8001d10 <LL_ADC_IsEnabled>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d115      	bne.n	8001ed8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eac:	4862      	ldr	r0, [pc, #392]	@ (8002038 <HAL_ADC_Init+0x28c>)
 8001eae:	f7ff ff2f 	bl	8001d10 <LL_ADC_IsEnabled>
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	4861      	ldr	r0, [pc, #388]	@ (800203c <HAL_ADC_Init+0x290>)
 8001eb6:	f7ff ff2b 	bl	8001d10 <LL_ADC_IsEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	431c      	orrs	r4, r3
 8001ebe:	4860      	ldr	r0, [pc, #384]	@ (8002040 <HAL_ADC_Init+0x294>)
 8001ec0:	f7ff ff26 	bl	8001d10 <LL_ADC_IsEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4323      	orrs	r3, r4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	485c      	ldr	r0, [pc, #368]	@ (8002044 <HAL_ADC_Init+0x298>)
 8001ed4:	f7ff fd74 	bl	80019c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7e5b      	ldrb	r3, [r3, #25]
 8001edc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ee8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001eee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d106      	bne.n	8001f14 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	045b      	lsls	r3, r3, #17
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b44      	ldr	r3, [pc, #272]	@ (8002048 <HAL_ADC_Init+0x29c>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff1b 	bl	8001d84 <LL_ADC_INJ_IsConversionOngoing>
 8001f4e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d13d      	bne.n	8001fd2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d13a      	bne.n	8001fd2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f60:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f68:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f78:	f023 0302 	bic.w	r3, r3, #2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	69b9      	ldr	r1, [r7, #24]
 8001f82:	430b      	orrs	r3, r1
 8001f84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d118      	bne.n	8001fc2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fac:	4311      	orrs	r1, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	611a      	str	r2, [r3, #16]
 8001fc0:	e007      	b.n	8001fd2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	f023 010f 	bic.w	r1, r3, #15
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	1e5a      	subs	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ff2:	e007      	b.n	8002004 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 020f 	bic.w	r2, r2, #15
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	f023 0303 	bic.w	r3, r3, #3
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54
 8002014:	e007      	b.n	8002026 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	f043 0210 	orr.w	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002026:	7ffb      	ldrb	r3, [r7, #31]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3724      	adds	r7, #36	@ 0x24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	20000000 	.word	0x20000000
 8002034:	053e2d63 	.word	0x053e2d63
 8002038:	50040000 	.word	0x50040000
 800203c:	50040100 	.word	0x50040100
 8002040:	50040200 	.word	0x50040200
 8002044:	50040300 	.word	0x50040300
 8002048:	fff0c007 	.word	0xfff0c007

0800204c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002054:	4891      	ldr	r0, [pc, #580]	@ (800229c <HAL_ADC_Start_IT+0x250>)
 8002056:	f7ff fddd 	bl	8001c14 <LL_ADC_GetMultimode>
 800205a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe7c 	bl	8001d5e <LL_ADC_REG_IsConversionOngoing>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	f040 8110 	bne.w	800228e <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_ADC_Start_IT+0x30>
 8002078:	2302      	movs	r3, #2
 800207a:	e10b      	b.n	8002294 <HAL_ADC_Start_IT+0x248>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 ff3d 	bl	8002f04 <ADC_Enable>
 800208a:	4603      	mov	r3, r0
 800208c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 80f7 	bne.w	8002284 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7c      	ldr	r2, [pc, #496]	@ (80022a0 <HAL_ADC_Start_IT+0x254>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d002      	beq.n	80020ba <HAL_ADC_Start_IT+0x6e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	e000      	b.n	80020bc <HAL_ADC_Start_IT+0x70>
 80020ba:	4b7a      	ldr	r3, [pc, #488]	@ (80022a4 <HAL_ADC_Start_IT+0x258>)
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d002      	beq.n	80020ca <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f023 0206 	bic.w	r2, r3, #6
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80020ee:	e002      	b.n	80020f6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	221c      	movs	r2, #28
 80020fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 021c 	bic.w	r2, r2, #28
 8002114:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b08      	cmp	r3, #8
 800211c:	d108      	bne.n	8002130 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0208 	orr.w	r2, r2, #8
 800212c:	605a      	str	r2, [r3, #4]
          break;
 800212e:	e008      	b.n	8002142 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0204 	orr.w	r2, r2, #4
 800213e:	605a      	str	r2, [r3, #4]
          break;
 8002140:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0210 	orr.w	r2, r2, #16
 8002158:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a50      	ldr	r2, [pc, #320]	@ (80022a0 <HAL_ADC_Start_IT+0x254>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d002      	beq.n	800216a <HAL_ADC_Start_IT+0x11e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	e000      	b.n	800216c <HAL_ADC_Start_IT+0x120>
 800216a:	4b4e      	ldr	r3, [pc, #312]	@ (80022a4 <HAL_ADC_Start_IT+0x258>)
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	4293      	cmp	r3, r2
 8002172:	d008      	beq.n	8002186 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d002      	beq.n	8002186 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b09      	cmp	r3, #9
 8002184:	d13a      	bne.n	80021fc <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d02d      	beq.n	80021f0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800219c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d110      	bne.n	80021ce <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0220 	bic.w	r2, r2, #32
 80021ba:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ca:	605a      	str	r2, [r3, #4]
              break;
 80021cc:	e010      	b.n	80021f0 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021dc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0220 	orr.w	r2, r2, #32
 80021ec:	605a      	str	r2, [r3, #4]
              break;
 80021ee:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fd9e 	bl	8001d36 <LL_ADC_REG_StartConversion>
 80021fa:	e04a      	b.n	8002292 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a24      	ldr	r2, [pc, #144]	@ (80022a0 <HAL_ADC_Start_IT+0x254>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d002      	beq.n	8002218 <HAL_ADC_Start_IT+0x1cc>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e000      	b.n	800221a <HAL_ADC_Start_IT+0x1ce>
 8002218:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <HAL_ADC_Start_IT+0x258>)
 800221a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d034      	beq.n	8002292 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002230:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d110      	bne.n	8002262 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0220 	bic.w	r2, r2, #32
 800224e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800225e:	605a      	str	r2, [r3, #4]
              break;
 8002260:	e017      	b.n	8002292 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002270:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0220 	orr.w	r2, r2, #32
 8002280:	605a      	str	r2, [r3, #4]
              break;
 8002282:	e006      	b.n	8002292 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800228c:	e001      	b.n	8002292 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	50040300 	.word	0x50040300
 80022a0:	50040100 	.word	0x50040100
 80022a4:	50040000 	.word	0x50040000

080022a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	@ 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e0:	4882      	ldr	r0, [pc, #520]	@ (80024ec <HAL_ADC_IRQHandler+0x228>)
 80022e2:	f7ff fc97 	bl	8001c14 <LL_ADC_GetMultimode>
 80022e6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d017      	beq.n	8002322 <HAL_ADC_IRQHandler+0x5e>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d012      	beq.n	8002322 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fec9 	bl	80030ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2202      	movs	r2, #2
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_ADC_IRQHandler+0x72>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8083 	beq.w	8002448 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d07d      	beq.n	8002448 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fbb2 	bl	8001ad2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d062      	beq.n	800243a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5d      	ldr	r2, [pc, #372]	@ (80024f0 <HAL_ADC_IRQHandler+0x22c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d002      	beq.n	8002384 <HAL_ADC_IRQHandler+0xc0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	e000      	b.n	8002386 <HAL_ADC_IRQHandler+0xc2>
 8002384:	4b5b      	ldr	r3, [pc, #364]	@ (80024f4 <HAL_ADC_IRQHandler+0x230>)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	4293      	cmp	r3, r2
 800238c:	d008      	beq.n	80023a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b05      	cmp	r3, #5
 8002398:	d002      	beq.n	80023a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d104      	bne.n	80023aa <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	e00c      	b.n	80023c4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a50      	ldr	r2, [pc, #320]	@ (80024f0 <HAL_ADC_IRQHandler+0x22c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d002      	beq.n	80023ba <HAL_ADC_IRQHandler+0xf6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	e000      	b.n	80023bc <HAL_ADC_IRQHandler+0xf8>
 80023ba:	4b4e      	ldr	r3, [pc, #312]	@ (80024f4 <HAL_ADC_IRQHandler+0x230>)
 80023bc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d135      	bne.n	800243a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d12e      	bne.n	800243a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fcbc 	bl	8001d5e <LL_ADC_REG_IsConversionOngoing>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11a      	bne.n	8002422 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 020c 	bic.w	r2, r2, #12
 80023fa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d112      	bne.n	800243a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002420:	e00b      	b.n	800243a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe f8da 	bl	80005f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	220c      	movs	r2, #12
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_ADC_IRQHandler+0x198>
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 809f 	beq.w	80025a6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8099 	beq.w	80025a6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002484:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fb5d 	bl	8001b50 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002496:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fb18 	bl	8001ad2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024a2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a11      	ldr	r2, [pc, #68]	@ (80024f0 <HAL_ADC_IRQHandler+0x22c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d002      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x1f0>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	e000      	b.n	80024b6 <HAL_ADC_IRQHandler+0x1f2>
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_ADC_IRQHandler+0x230>)
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d008      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d002      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b07      	cmp	r3, #7
 80024ce:	d104      	bne.n	80024da <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	e013      	b.n	8002502 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <HAL_ADC_IRQHandler+0x22c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d009      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x234>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	e007      	b.n	80024fa <HAL_ADC_IRQHandler+0x236>
 80024ea:	bf00      	nop
 80024ec:	50040300 	.word	0x50040300
 80024f0:	50040100 	.word	0x50040100
 80024f4:	50040000 	.word	0x50040000
 80024f8:	4b7d      	ldr	r3, [pc, #500]	@ (80026f0 <HAL_ADC_IRQHandler+0x42c>)
 80024fa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d047      	beq.n	8002598 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_ADC_IRQHandler+0x25e>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d03f      	beq.n	8002598 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d13a      	bne.n	8002598 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252c:	2b40      	cmp	r3, #64	@ 0x40
 800252e:	d133      	bne.n	8002598 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d12e      	bne.n	8002598 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fc20 	bl	8001d84 <LL_ADC_INJ_IsConversionOngoing>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11a      	bne.n	8002580 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002558:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d112      	bne.n	8002598 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
 800257e:	e00b      	b.n	8002598 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fd5f 	bl	800305c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2260      	movs	r2, #96	@ 0x60
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d011      	beq.n	80025d4 <HAL_ADC_IRQHandler+0x310>
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00c      	beq.n	80025d4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f896 	bl	80026f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2280      	movs	r2, #128	@ 0x80
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d012      	beq.n	8002604 <HAL_ADC_IRQHandler+0x340>
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00d      	beq.n	8002604 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fd45 	bl	8003084 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002602:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d012      	beq.n	8002634 <HAL_ADC_IRQHandler+0x370>
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fd37 	bl	8003098 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d036      	beq.n	80026ac <HAL_ADC_IRQHandler+0x3e8>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d031      	beq.n	80026ac <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002650:	2301      	movs	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
 8002654:	e014      	b.n	8002680 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800265c:	4825      	ldr	r0, [pc, #148]	@ (80026f4 <HAL_ADC_IRQHandler+0x430>)
 800265e:	f7ff fae7 	bl	8001c30 <LL_ADC_GetMultiDMATransfer>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002668:	2301      	movs	r3, #1
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
 800266c:	e008      	b.n	8002680 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800267c:	2301      	movs	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	2b01      	cmp	r3, #1
 8002684:	d10e      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	f043 0202 	orr.w	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f834 	bl	800270c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2210      	movs	r2, #16
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <HAL_ADC_IRQHandler+0x424>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f043 0208 	orr.w	r2, r3, #8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026e0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fcc4 	bl	8003070 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	@ 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	50040000 	.word	0x50040000
 80026f4:	50040300 	.word	0x50040300

080026f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0b6      	sub	sp, #216	@ 0xd8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x22>
 800273e:	2302      	movs	r3, #2
 8002740:	e3c9      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x7b6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fb05 	bl	8001d5e <LL_ADC_REG_IsConversionOngoing>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 83aa 	bne.w	8002eb0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d824      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	3b02      	subs	r3, #2
 8002772:	2b03      	cmp	r3, #3
 8002774:	d81b      	bhi.n	80027ae <HAL_ADC_ConfigChannel+0x8e>
 8002776:	a201      	add	r2, pc, #4	@ (adr r2, 800277c <HAL_ADC_ConfigChannel+0x5c>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	0800278d 	.word	0x0800278d
 8002780:	08002795 	.word	0x08002795
 8002784:	0800279d 	.word	0x0800279d
 8002788:	080027a5 	.word	0x080027a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800278c:	230c      	movs	r3, #12
 800278e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002792:	e010      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002794:	2312      	movs	r3, #18
 8002796:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800279a:	e00c      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800279c:	2318      	movs	r3, #24
 800279e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027a2:	e008      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027ae:	2306      	movs	r3, #6
 80027b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80027c4:	f7ff f998 	bl	8001af8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fac6 	bl	8001d5e <LL_ADC_REG_IsConversionOngoing>
 80027d2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fad2 	bl	8001d84 <LL_ADC_INJ_IsConversionOngoing>
 80027e0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 81a4 	bne.w	8002b36 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 819f 	bne.w	8002b36 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	461a      	mov	r2, r3
 8002806:	f7ff f9b6 	bl	8001b76 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d00a      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800283c:	f7ff f8f4 	bl	8001a28 <LL_ADC_SetOffset>
 8002840:	e179      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f911 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x14e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f906 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	e01e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x18c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff f8fb 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800288c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1a4>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	e018      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x1d6>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80028d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80028e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e004      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80028ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f8ca 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f8ae 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x214>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff f8a3 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	e01e      	b.n	8002972 <HAL_ADC_ConfigChannel+0x252>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f898 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002952:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800295a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_ConfigChannel+0x26a>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	e018      	b.n	80029bc <HAL_ADC_ConfigChannel+0x29c>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800299e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80029a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029ae:	2320      	movs	r3, #32
 80029b0:	e004      	b.n	80029bc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f867 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2102      	movs	r1, #2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f84b 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x2da>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2102      	movs	r1, #2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f840 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	e01e      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x318>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f835 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e004      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x330>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	e014      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x35a>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e004      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d106      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	2102      	movs	r1, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f808 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2103      	movs	r1, #3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe ffec 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x398>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe ffe1 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	f003 021f 	and.w	r2, r3, #31
 8002ab6:	e017      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x3c8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2103      	movs	r1, #3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe ffd6 	bl	8001a70 <LL_ADC_GetOffsetChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002ad4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e003      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x3e0>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	e011      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x404>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b10:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e003      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d106      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2103      	movs	r1, #3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe ffb3 	bl	8001a9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff f8e8 	bl	8001d10 <LL_ADC_IsEnabled>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8140 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f7ff f839 	bl	8001bcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4a8f      	ldr	r2, [pc, #572]	@ (8002d9c <HAL_ADC_ConfigChannel+0x67c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f040 8131 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x46e>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2b09      	cmp	r3, #9
 8002b84:	bf94      	ite	ls
 8002b86:	2301      	movls	r3, #1
 8002b88:	2300      	movhi	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e019      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x4a2>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002baa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	bf94      	ite	ls
 8002bbc:	2301      	movls	r3, #1
 8002bbe:	2300      	movhi	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d079      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d107      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x4c2>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	3301      	adds	r3, #1
 8002bda:	069b      	lsls	r3, r3, #26
 8002bdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002be0:	e015      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x4ee>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bf2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e003      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	069b      	lsls	r3, r3, #26
 8002c0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x50e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	e017      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x53e>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c46:	2320      	movs	r3, #32
 8002c48:	e003      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	ea42 0103 	orr.w	r1, r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x564>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	3301      	adds	r3, #1
 8002c76:	f003 021f 	and.w	r2, r3, #31
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	051b      	lsls	r3, r3, #20
 8002c82:	e018      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x596>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e003      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f003 021f 	and.w	r2, r3, #31
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	e081      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d107      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x5b6>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	3301      	adds	r3, #1
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd4:	e015      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x5e2>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e003      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	069b      	lsls	r3, r3, #26
 8002cfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x602>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	0e9b      	lsrs	r3, r3, #26
 8002d14:	3301      	adds	r3, #1
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	e017      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x632>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	61bb      	str	r3, [r7, #24]
  return result;
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	ea42 0103 	orr.w	r1, r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x65e>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0e9b      	lsrs	r3, r3, #26
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f003 021f 	and.w	r2, r3, #31
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	3b1e      	subs	r3, #30
 8002d76:	051b      	lsls	r3, r3, #20
 8002d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d7c:	e01e      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x69c>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
  return result;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e006      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x688>
 8002d9a:	bf00      	nop
 8002d9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	051b      	lsls	r3, r3, #20
 8002db8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7fe fed7 	bl	8001b76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b44      	ldr	r3, [pc, #272]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d07a      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd4:	4843      	ldr	r0, [pc, #268]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dd6:	f7fe fe19 	bl	8001a0c <LL_ADC_GetCommonPathInternalCh>
 8002dda:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a41      	ldr	r2, [pc, #260]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d12c      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d126      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3c      	ldr	r2, [pc, #240]	@ (8002eec <HAL_ADC_ConfigChannel+0x7cc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0x6e8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d15d      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e10:	4619      	mov	r1, r3
 8002e12:	4834      	ldr	r0, [pc, #208]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e14:	f7fe fde7 	bl	80019e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e18:	4b36      	ldr	r3, [pc, #216]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	4a36      	ldr	r2, [pc, #216]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e32:	e002      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f9      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e40:	e040      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2d      	ldr	r2, [pc, #180]	@ (8002efc <HAL_ADC_ConfigChannel+0x7dc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d118      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d112      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	@ (8002eec <HAL_ADC_ConfigChannel+0x7cc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x74c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a22      	ldr	r2, [pc, #136]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d12d      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e74:	4619      	mov	r1, r3
 8002e76:	481b      	ldr	r0, [pc, #108]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e78:	f7fe fdb5 	bl	80019e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7c:	e024      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1f      	ldr	r2, [pc, #124]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d120      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11a      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a14      	ldr	r2, [pc, #80]	@ (8002eec <HAL_ADC_ConfigChannel+0x7cc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d115      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ea2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480e      	ldr	r0, [pc, #56]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eaa:	f7fe fd9c 	bl	80019e6 <LL_ADC_SetCommonPathInternalCh>
 8002eae:	e00c      	b.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ec2:	e002      	b.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ed2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	37d8      	adds	r7, #216	@ 0xd8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	80080000 	.word	0x80080000
 8002ee4:	50040300 	.word	0x50040300
 8002ee8:	c7520000 	.word	0xc7520000
 8002eec:	50040000 	.word	0x50040000
 8002ef0:	50040200 	.word	0x50040200
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	053e2d63 	.word	0x053e2d63
 8002efc:	cb840000 	.word	0xcb840000
 8002f00:	80000001 	.word	0x80000001

08002f04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe fefb 	bl	8001d10 <LL_ADC_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d169      	bne.n	8002ff4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b36      	ldr	r3, [pc, #216]	@ (8003000 <ADC_Enable+0xfc>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e055      	b.n	8002ff6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe feca 	bl	8001ce8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f54:	482b      	ldr	r0, [pc, #172]	@ (8003004 <ADC_Enable+0x100>)
 8002f56:	f7fe fd59 	bl	8001a0c <LL_ADC_GetCommonPathInternalCh>
 8002f5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f64:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <ADC_Enable+0x104>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	4a28      	ldr	r2, [pc, #160]	@ (800300c <ADC_Enable+0x108>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f7e:	e002      	b.n	8002f86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f9      	bne.n	8002f80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fce8 	bl	8001960 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f92:	e028      	b.n	8002fe6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe feb9 	bl	8001d10 <LL_ADC_IsEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d104      	bne.n	8002fae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fe9d 	bl	8001ce8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fae:	f7fe fcd7 	bl	8001960 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d914      	bls.n	8002fe6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d00d      	beq.n	8002fe6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e007      	b.n	8002ff6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d1cf      	bne.n	8002f94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	8000003f 	.word	0x8000003f
 8003004:	50040300 	.word	0x50040300
 8003008:	20000000 	.word	0x20000000
 800300c:	053e2d63 	.word	0x053e2d63

08003010 <LL_ADC_IsEnabled>:
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <LL_ADC_IsEnabled+0x18>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <LL_ADC_IsEnabled+0x1a>
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_ADC_REG_IsConversionOngoing>:
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d101      	bne.n	800304e <LL_ADC_REG_IsConversionOngoing+0x18>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b09f      	sub	sp, #124	@ 0x7c
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030da:	2302      	movs	r3, #2
 80030dc:	e093      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030e6:	2300      	movs	r3, #0
 80030e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030ea:	2300      	movs	r3, #0
 80030ec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a47      	ldr	r2, [pc, #284]	@ (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d102      	bne.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030f8:	4b46      	ldr	r3, [pc, #280]	@ (8003214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	e001      	b.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e072      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff87 	bl	8003036 <LL_ADC_REG_IsConversionOngoing>
 8003128:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff81 	bl	8003036 <LL_ADC_REG_IsConversionOngoing>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d154      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800313a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800313c:	2b00      	cmp	r3, #0
 800313e:	d151      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003140:	4b35      	ldr	r3, [pc, #212]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003142:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d02c      	beq.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800314c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800315e:	035b      	lsls	r3, r3, #13
 8003160:	430b      	orrs	r3, r1
 8003162:	431a      	orrs	r2, r3
 8003164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003166:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003168:	4829      	ldr	r0, [pc, #164]	@ (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800316a:	f7ff ff51 	bl	8003010 <LL_ADC_IsEnabled>
 800316e:	4604      	mov	r4, r0
 8003170:	4828      	ldr	r0, [pc, #160]	@ (8003214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003172:	f7ff ff4d 	bl	8003010 <LL_ADC_IsEnabled>
 8003176:	4603      	mov	r3, r0
 8003178:	431c      	orrs	r4, r3
 800317a:	4828      	ldr	r0, [pc, #160]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800317c:	f7ff ff48 	bl	8003010 <LL_ADC_IsEnabled>
 8003180:	4603      	mov	r3, r0
 8003182:	4323      	orrs	r3, r4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d137      	bne.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	6811      	ldr	r1, [r2, #0]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	6892      	ldr	r2, [r2, #8]
 800319c:	430a      	orrs	r2, r1
 800319e:	431a      	orrs	r2, r3
 80031a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031a4:	e028      	b.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b2:	4817      	ldr	r0, [pc, #92]	@ (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031b4:	f7ff ff2c 	bl	8003010 <LL_ADC_IsEnabled>
 80031b8:	4604      	mov	r4, r0
 80031ba:	4816      	ldr	r0, [pc, #88]	@ (8003214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031bc:	f7ff ff28 	bl	8003010 <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	431c      	orrs	r4, r3
 80031c4:	4815      	ldr	r0, [pc, #84]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031c6:	f7ff ff23 	bl	8003010 <LL_ADC_IsEnabled>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4323      	orrs	r3, r4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d112      	bne.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031da:	f023 030f 	bic.w	r3, r3, #15
 80031de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031e2:	e009      	b.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80031f6:	e000      	b.n	80031fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003202:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003206:	4618      	mov	r0, r3
 8003208:	377c      	adds	r7, #124	@ 0x7c
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	50040000 	.word	0x50040000
 8003214:	50040100 	.word	0x50040100
 8003218:	50040300 	.word	0x50040300
 800321c:	50040200 	.word	0x50040200

08003220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003230:	4b0c      	ldr	r3, [pc, #48]	@ (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800324c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003252:	4a04      	ldr	r2, [pc, #16]	@ (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800326c:	4b04      	ldr	r3, [pc, #16]	@ (8003280 <__NVIC_GetPriorityGrouping+0x18>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 0307 	and.w	r3, r3, #7
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db0b      	blt.n	80032ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4907      	ldr	r1, [pc, #28]	@ (80032bc <__NVIC_EnableIRQ+0x38>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000e100 	.word	0xe000e100

080032c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	db0a      	blt.n	80032ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	490c      	ldr	r1, [pc, #48]	@ (800330c <__NVIC_SetPriority+0x4c>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	440b      	add	r3, r1
 80032e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e8:	e00a      	b.n	8003300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4908      	ldr	r1, [pc, #32]	@ (8003310 <__NVIC_SetPriority+0x50>)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	3b04      	subs	r3, #4
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	440b      	add	r3, r1
 80032fe:	761a      	strb	r2, [r3, #24]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000e100 	.word	0xe000e100
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	@ 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f1c3 0307 	rsb	r3, r3, #7
 800332e:	2b04      	cmp	r3, #4
 8003330:	bf28      	it	cs
 8003332:	2304      	movcs	r3, #4
 8003334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3304      	adds	r3, #4
 800333a:	2b06      	cmp	r3, #6
 800333c:	d902      	bls.n	8003344 <NVIC_EncodePriority+0x30>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3b03      	subs	r3, #3
 8003342:	e000      	b.n	8003346 <NVIC_EncodePriority+0x32>
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	f04f 32ff 	mov.w	r2, #4294967295
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	401a      	ands	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800335c:	f04f 31ff 	mov.w	r1, #4294967295
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43d9      	mvns	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	4313      	orrs	r3, r2
         );
}
 800336e:	4618      	mov	r0, r3
 8003370:	3724      	adds	r7, #36	@ 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800338c:	d301      	bcc.n	8003392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800338e:	2301      	movs	r3, #1
 8003390:	e00f      	b.n	80033b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003392:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <SysTick_Config+0x40>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339a:	210f      	movs	r1, #15
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f7ff ff8e 	bl	80032c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <SysTick_Config+0x40>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033aa:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <SysTick_Config+0x40>)
 80033ac:	2207      	movs	r2, #7
 80033ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	e000e010 	.word	0xe000e010

080033c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff29 	bl	8003220 <__NVIC_SetPriorityGrouping>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033e8:	f7ff ff3e 	bl	8003268 <__NVIC_GetPriorityGrouping>
 80033ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	6978      	ldr	r0, [r7, #20]
 80033f4:	f7ff ff8e 	bl	8003314 <NVIC_EncodePriority>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff5d 	bl	80032c0 <__NVIC_SetPriority>
}
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff31 	bl	8003284 <__NVIC_EnableIRQ>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ffa2 	bl	800337c <SysTick_Config>
 8003438:	4603      	mov	r3, r0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0ac      	b.n	80035b0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f8b2 	bl	80035c4 <DFSDM_GetChannelFromInstance>
 8003460:	4603      	mov	r3, r0
 8003462:	4a55      	ldr	r2, [pc, #340]	@ (80035b8 <HAL_DFSDM_ChannelInit+0x174>)
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e09f      	b.n	80035b0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fd fe59 	bl	8001128 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003476:	4b51      	ldr	r3, [pc, #324]	@ (80035bc <HAL_DFSDM_ChannelInit+0x178>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	4a4f      	ldr	r2, [pc, #316]	@ (80035bc <HAL_DFSDM_ChannelInit+0x178>)
 800347e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003480:	4b4e      	ldr	r3, [pc, #312]	@ (80035bc <HAL_DFSDM_ChannelInit+0x178>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d125      	bne.n	80034d4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003488:	4b4d      	ldr	r3, [pc, #308]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a4c      	ldr	r2, [pc, #304]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800348e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003492:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003494:	4b4a      	ldr	r3, [pc, #296]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4948      	ldr	r1, [pc, #288]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80034a2:	4b47      	ldr	r3, [pc, #284]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a46      	ldr	r2, [pc, #280]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034a8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80034ac:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	791b      	ldrb	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d108      	bne.n	80034c8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80034b6:	4b42      	ldr	r3, [pc, #264]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	3b01      	subs	r3, #1
 80034c0:	041b      	lsls	r3, r3, #16
 80034c2:	493f      	ldr	r1, [pc, #252]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80034c8:	4b3d      	ldr	r3, [pc, #244]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3c      	ldr	r2, [pc, #240]	@ (80035c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034d2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80034e2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80034f2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80034f8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 020f 	bic.w	r2, r2, #15
 8003510:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003538:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6899      	ldr	r1, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f002 0207 	and.w	r2, r2, #7
 8003564:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003590:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f810 	bl	80035c4 <DFSDM_GetChannelFromInstance>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4904      	ldr	r1, [pc, #16]	@ (80035b8 <HAL_DFSDM_ChannelInit+0x174>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000ad0 	.word	0x20000ad0
 80035bc:	20000acc 	.word	0x20000acc
 80035c0:	40016000 	.word	0x40016000

080035c4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003640 <DFSDM_GetChannelFromInstance+0x7c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d102      	bne.n	80035da <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e02b      	b.n	8003632 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a19      	ldr	r2, [pc, #100]	@ (8003644 <DFSDM_GetChannelFromInstance+0x80>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d102      	bne.n	80035e8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e024      	b.n	8003632 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a17      	ldr	r2, [pc, #92]	@ (8003648 <DFSDM_GetChannelFromInstance+0x84>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d102      	bne.n	80035f6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80035f0:	2302      	movs	r3, #2
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e01d      	b.n	8003632 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a14      	ldr	r2, [pc, #80]	@ (800364c <DFSDM_GetChannelFromInstance+0x88>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d102      	bne.n	8003604 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80035fe:	2304      	movs	r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e016      	b.n	8003632 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a12      	ldr	r2, [pc, #72]	@ (8003650 <DFSDM_GetChannelFromInstance+0x8c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d102      	bne.n	8003612 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800360c:	2305      	movs	r3, #5
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e00f      	b.n	8003632 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a0f      	ldr	r2, [pc, #60]	@ (8003654 <DFSDM_GetChannelFromInstance+0x90>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d102      	bne.n	8003620 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800361a:	2306      	movs	r3, #6
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e008      	b.n	8003632 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0d      	ldr	r2, [pc, #52]	@ (8003658 <DFSDM_GetChannelFromInstance+0x94>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d102      	bne.n	800362e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003628:	2307      	movs	r3, #7
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e001      	b.n	8003632 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800362e:	2303      	movs	r3, #3
 8003630:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40016000 	.word	0x40016000
 8003644:	40016020 	.word	0x40016020
 8003648:	40016040 	.word	0x40016040
 800364c:	40016080 	.word	0x40016080
 8003650:	400160a0 	.word	0x400160a0
 8003654:	400160c0 	.word	0x400160c0
 8003658:	400160e0 	.word	0x400160e0

0800365c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800366a:	e17f      	b.n	800396c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8171 	beq.w	8003966 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d005      	beq.n	800369c <HAL_GPIO_Init+0x40>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d130      	bne.n	80036fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	2203      	movs	r2, #3
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036d2:	2201      	movs	r2, #1
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	f003 0201 	and.w	r2, r3, #1
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d118      	bne.n	800373c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003710:	2201      	movs	r2, #1
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	08db      	lsrs	r3, r3, #3
 8003726:	f003 0201 	and.w	r2, r3, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b03      	cmp	r3, #3
 8003746:	d017      	beq.n	8003778 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2203      	movs	r2, #3
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d123      	bne.n	80037cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	08da      	lsrs	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3208      	adds	r2, #8
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	6939      	ldr	r1, [r7, #16]
 80037c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0203 	and.w	r2, r3, #3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80ac 	beq.w	8003966 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380e:	4b5f      	ldr	r3, [pc, #380]	@ (800398c <HAL_GPIO_Init+0x330>)
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	4a5e      	ldr	r2, [pc, #376]	@ (800398c <HAL_GPIO_Init+0x330>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6613      	str	r3, [r2, #96]	@ 0x60
 800381a:	4b5c      	ldr	r3, [pc, #368]	@ (800398c <HAL_GPIO_Init+0x330>)
 800381c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003826:	4a5a      	ldr	r2, [pc, #360]	@ (8003990 <HAL_GPIO_Init+0x334>)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003850:	d025      	beq.n	800389e <HAL_GPIO_Init+0x242>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4f      	ldr	r2, [pc, #316]	@ (8003994 <HAL_GPIO_Init+0x338>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <HAL_GPIO_Init+0x23e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4e      	ldr	r2, [pc, #312]	@ (8003998 <HAL_GPIO_Init+0x33c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d019      	beq.n	8003896 <HAL_GPIO_Init+0x23a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4d      	ldr	r2, [pc, #308]	@ (800399c <HAL_GPIO_Init+0x340>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_GPIO_Init+0x236>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4c      	ldr	r2, [pc, #304]	@ (80039a0 <HAL_GPIO_Init+0x344>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00d      	beq.n	800388e <HAL_GPIO_Init+0x232>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4b      	ldr	r2, [pc, #300]	@ (80039a4 <HAL_GPIO_Init+0x348>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x22e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4a      	ldr	r2, [pc, #296]	@ (80039a8 <HAL_GPIO_Init+0x34c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_GPIO_Init+0x22a>
 8003882:	2306      	movs	r3, #6
 8003884:	e00c      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 8003886:	2307      	movs	r3, #7
 8003888:	e00a      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 800388a:	2305      	movs	r3, #5
 800388c:	e008      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 800388e:	2304      	movs	r3, #4
 8003890:	e006      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 8003892:	2303      	movs	r3, #3
 8003894:	e004      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 8003896:	2302      	movs	r3, #2
 8003898:	e002      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 800389e:	2300      	movs	r3, #0
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	f002 0203 	and.w	r2, r2, #3
 80038a6:	0092      	lsls	r2, r2, #2
 80038a8:	4093      	lsls	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038b0:	4937      	ldr	r1, [pc, #220]	@ (8003990 <HAL_GPIO_Init+0x334>)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	3302      	adds	r3, #2
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038be:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <HAL_GPIO_Init+0x350>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038e2:	4a32      	ldr	r2, [pc, #200]	@ (80039ac <HAL_GPIO_Init+0x350>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038e8:	4b30      	ldr	r3, [pc, #192]	@ (80039ac <HAL_GPIO_Init+0x350>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800390c:	4a27      	ldr	r2, [pc, #156]	@ (80039ac <HAL_GPIO_Init+0x350>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003912:	4b26      	ldr	r3, [pc, #152]	@ (80039ac <HAL_GPIO_Init+0x350>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003936:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <HAL_GPIO_Init+0x350>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <HAL_GPIO_Init+0x350>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003960:	4a12      	ldr	r2, [pc, #72]	@ (80039ac <HAL_GPIO_Init+0x350>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	3301      	adds	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa22 f303 	lsr.w	r3, r2, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f ae78 	bne.w	800366c <HAL_GPIO_Init+0x10>
  }
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	40010000 	.word	0x40010000
 8003994:	48000400 	.word	0x48000400
 8003998:	48000800 	.word	0x48000800
 800399c:	48000c00 	.word	0x48000c00
 80039a0:	48001000 	.word	0x48001000
 80039a4:	48001400 	.word	0x48001400
 80039a8:	48001800 	.word	0x48001800
 80039ac:	40010400 	.word	0x40010400

080039b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
 80039bc:	4613      	mov	r3, r2
 80039be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c0:	787b      	ldrb	r3, [r7, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039cc:	e002      	b.n	80039d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039ea:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039f6:	4a05      	ldr	r2, [pc, #20]	@ (8003a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f806 	bl	8003a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40010400 	.word	0x40010400

08003a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e08d      	b.n	8003b54 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fd fbcf 	bl	80011f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2224      	movs	r2, #36	@ 0x24
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d107      	bne.n	8003aa0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	e006      	b.n	8003aae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003aac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d108      	bne.n	8003ac8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	e007      	b.n	8003ad8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003afa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69d9      	ldr	r1, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1a      	ldr	r2, [r3, #32]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d138      	bne.n	8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e032      	b.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	@ 0x24
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d139      	bne.n	8003c7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e033      	b.n	8003c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2224      	movs	r2, #36	@ 0x24
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af02      	add	r7, sp, #8
 8003c90:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e101      	b.n	8003ea0 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fd fc47 	bl	8001544 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f002 fef1 	bl	8006ab0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	7c1a      	ldrb	r2, [r3, #16]
 8003cd6:	f88d 2000 	strb.w	r2, [sp]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cde:	f002 feba 	bl	8006a56 <USB_CoreInit>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0d5      	b.n	8003ea0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f002 fee9 	bl	8006ad2 <USB_SetCurrentMode>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e0c6      	b.n	8003ea0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
 8003d16:	e04a      	b.n	8003dae <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3315      	adds	r3, #21
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	b298      	uxth	r0, r3
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	332e      	adds	r3, #46	@ 0x2e
 8003d54:	4602      	mov	r2, r0
 8003d56:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	3318      	adds	r3, #24
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	331c      	adds	r3, #28
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d80:	7bfa      	ldrb	r2, [r7, #15]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3320      	adds	r3, #32
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d94:	7bfa      	ldrb	r2, [r7, #15]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	3324      	adds	r3, #36	@ 0x24
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	3301      	adds	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	791b      	ldrb	r3, [r3, #4]
 8003db2:	7bfa      	ldrb	r2, [r7, #15]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d3af      	bcc.n	8003d18 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e044      	b.n	8003e48 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	3301      	adds	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	791b      	ldrb	r3, [r3, #4]
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3b5      	bcc.n	8003dbe <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7c1a      	ldrb	r2, [r3, #16]
 8003e5a:	f88d 2000 	strb.w	r2, [sp]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e62:	f002 fe83 	bl	8006b6c <USB_DevInit>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e013      	b.n	8003ea0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	7b1b      	ldrb	r3, [r3, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f80a 	bl	8003ea8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f003 f828 	bl	8006eee <USB_DevDisconnect>

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	f043 0303 	orr.w	r3, r3, #3
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef4:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a04      	ldr	r2, [pc, #16]	@ (8003f0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40007000 	.word	0x40007000

08003f10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f14:	4b04      	ldr	r3, [pc, #16]	@ (8003f28 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40007000 	.word	0x40007000

08003f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3a:	d130      	bne.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f3c:	4b23      	ldr	r3, [pc, #140]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f48:	d038      	beq.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f4a:	4b20      	ldr	r3, [pc, #128]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f52:	4a1e      	ldr	r2, [pc, #120]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2232      	movs	r2, #50	@ 0x32
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0c9b      	lsrs	r3, r3, #18
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f70:	e002      	b.n	8003f78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f78:	4b14      	ldr	r3, [pc, #80]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f84:	d102      	bne.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f2      	bne.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f98:	d110      	bne.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e00f      	b.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d007      	beq.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fac:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fb4:	4a05      	ldr	r2, [pc, #20]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	431bde83 	.word	0x431bde83

08003fd8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	@ (8003ff4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fe6:	6053      	str	r3, [r2, #4]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40007000 	.word	0x40007000

08003ff8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004000:	f7fd fcae 	bl	8001960 <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e063      	b.n	80040d8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fd f941 	bl	80012ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800402a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f858 	bl	80040e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	3b01      	subs	r3, #1
 8004044:	021a      	lsls	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	2120      	movs	r1, #32
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f850 	bl	8004100 <QSPI_WaitFlagStateUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004064:	7afb      	ldrb	r3, [r7, #11]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d131      	bne.n	80040ce <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004074:	f023 0310 	bic.w	r3, r3, #16
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6852      	ldr	r2, [r2, #4]
 800407c:	0611      	lsls	r1, r2, #24
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68d2      	ldr	r2, [r2, #12]
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	430b      	orrs	r3, r1
 800408a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <HAL_QSPI_Init+0xe8>)
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6912      	ldr	r2, [r2, #16]
 800409a:	0411      	lsls	r1, r2, #16
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6952      	ldr	r2, [r2, #20]
 80040a0:	4311      	orrs	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6992      	ldr	r2, [r2, #24]
 80040a6:	4311      	orrs	r1, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80040d6:	7afb      	ldrb	r3, [r7, #11]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	ffe0f8fe 	.word	0xffe0f8fe

080040e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004110:	e01a      	b.n	8004148 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d016      	beq.n	8004148 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fd fc21 	bl	8001960 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2204      	movs	r2, #4
 8004134:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e00e      	b.n	8004166 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	429a      	cmp	r2, r3
 8004162:	d1d6      	bne.n	8004112 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e3ca      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004182:	4b97      	ldr	r3, [pc, #604]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418c:	4b94      	ldr	r3, [pc, #592]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80e4 	beq.w	800436c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_RCC_OscConfig+0x4a>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	f040 808b 	bne.w	80042c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	f040 8087 	bne.w	80042c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041ba:	4b89      	ldr	r3, [pc, #548]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x62>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e3a2      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1a      	ldr	r2, [r3, #32]
 80041d6:	4b82      	ldr	r3, [pc, #520]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <HAL_RCC_OscConfig+0x7c>
 80041e2:	4b7f      	ldr	r3, [pc, #508]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ea:	e005      	b.n	80041f8 <HAL_RCC_OscConfig+0x88>
 80041ec:	4b7c      	ldr	r3, [pc, #496]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80041ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d223      	bcs.n	8004244 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fd55 	bl	8004cb0 <RCC_SetFlashLatencyFromMSIRange>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e383      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004210:	4b73      	ldr	r3, [pc, #460]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a72      	ldr	r2, [pc, #456]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004216:	f043 0308 	orr.w	r3, r3, #8
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b70      	ldr	r3, [pc, #448]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	496d      	ldr	r1, [pc, #436]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800422e:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4968      	ldr	r1, [pc, #416]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
 8004242:	e025      	b.n	8004290 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004244:	4b66      	ldr	r3, [pc, #408]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a65      	ldr	r2, [pc, #404]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800424a:	f043 0308 	orr.w	r3, r3, #8
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b63      	ldr	r3, [pc, #396]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4960      	ldr	r1, [pc, #384]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004262:	4b5f      	ldr	r3, [pc, #380]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	495b      	ldr	r1, [pc, #364]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d109      	bne.n	8004290 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fd15 	bl	8004cb0 <RCC_SetFlashLatencyFromMSIRange>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e343      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004290:	f000 fc4a 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b52      	ldr	r3, [pc, #328]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	4950      	ldr	r1, [pc, #320]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	4a4e      	ldr	r2, [pc, #312]	@ (80043e8 <HAL_RCC_OscConfig+0x278>)
 80042ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042b0:	4b4e      	ldr	r3, [pc, #312]	@ (80043ec <HAL_RCC_OscConfig+0x27c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd fb03 	bl	80018c0 <HAL_InitTick>
 80042ba:	4603      	mov	r3, r0
 80042bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d052      	beq.n	800436a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	e327      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d032      	beq.n	8004336 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042d0:	4b43      	ldr	r3, [pc, #268]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a42      	ldr	r2, [pc, #264]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042dc:	f7fd fb40 	bl	8001960 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042e4:	f7fd fb3c 	bl	8001960 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e310      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042f6:	4b3a      	ldr	r3, [pc, #232]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004302:	4b37      	ldr	r3, [pc, #220]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a36      	ldr	r2, [pc, #216]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b34      	ldr	r3, [pc, #208]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	4931      	ldr	r1, [pc, #196]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004320:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	492c      	ldr	r1, [pc, #176]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
 8004334:	e01a      	b.n	800436c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004336:	4b2a      	ldr	r3, [pc, #168]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a29      	ldr	r2, [pc, #164]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004342:	f7fd fb0d 	bl	8001960 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800434a:	f7fd fb09 	bl	8001960 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e2dd      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800435c:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x1da>
 8004368:	e000      	b.n	800436c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800436a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d074      	beq.n	8004462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b08      	cmp	r3, #8
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x21a>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d10e      	bne.n	80043a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d10b      	bne.n	80043a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438a:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d064      	beq.n	8004460 <HAL_RCC_OscConfig+0x2f0>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d160      	bne.n	8004460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e2ba      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x24a>
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0b      	ldr	r2, [pc, #44]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	e026      	b.n	8004408 <HAL_RCC_OscConfig+0x298>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043c2:	d115      	bne.n	80043f0 <HAL_RCC_OscConfig+0x280>
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a02      	ldr	r2, [pc, #8]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e014      	b.n	8004408 <HAL_RCC_OscConfig+0x298>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	0800a3f8 	.word	0x0800a3f8
 80043e8:	20000000 	.word	0x20000000
 80043ec:	20000004 	.word	0x20000004
 80043f0:	4ba0      	ldr	r3, [pc, #640]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a9f      	ldr	r2, [pc, #636]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b9d      	ldr	r3, [pc, #628]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a9c      	ldr	r2, [pc, #624]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd faa6 	bl	8001960 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fd faa2 	bl	8001960 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	@ 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e276      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800442a:	4b92      	ldr	r3, [pc, #584]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x2a8>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fa92 	bl	8001960 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd fa8e 	bl	8001960 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e262      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004452:	4b88      	ldr	r3, [pc, #544]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x2d0>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d060      	beq.n	8004530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d005      	beq.n	8004480 <HAL_RCC_OscConfig+0x310>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d119      	bne.n	80044ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d116      	bne.n	80044ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	4b7c      	ldr	r3, [pc, #496]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x328>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e23f      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b76      	ldr	r3, [pc, #472]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	4973      	ldr	r1, [pc, #460]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	e040      	b.n	8004530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d023      	beq.n	80044fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd fa4d 	bl	8001960 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fd fa49 	bl	8001960 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e21d      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044dc:	4b65      	ldr	r3, [pc, #404]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b62      	ldr	r3, [pc, #392]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	495f      	ldr	r1, [pc, #380]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
 80044fc:	e018      	b.n	8004530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a5c      	ldr	r2, [pc, #368]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fd fa29 	bl	8001960 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004512:	f7fd fa25 	bl	8001960 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e1f9      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004524:	4b53      	ldr	r3, [pc, #332]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d03c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01c      	beq.n	800457e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004544:	4b4b      	ldr	r3, [pc, #300]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454a:	4a4a      	ldr	r2, [pc, #296]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fd fa04 	bl	8001960 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455c:	f7fd fa00 	bl	8001960 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1d4      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800456e:	4b41      	ldr	r3, [pc, #260]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <HAL_RCC_OscConfig+0x3ec>
 800457c:	e01b      	b.n	80045b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800457e:	4b3d      	ldr	r3, [pc, #244]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004584:	4a3b      	ldr	r2, [pc, #236]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fd f9e7 	bl	8001960 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004596:	f7fd f9e3 	bl	8001960 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e1b7      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a8:	4b32      	ldr	r3, [pc, #200]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1ef      	bne.n	8004596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80a6 	beq.w	8004710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c4:	2300      	movs	r3, #0
 80045c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d4:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d8:	4a26      	ldr	r2, [pc, #152]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045de:	6593      	str	r3, [r2, #88]	@ 0x58
 80045e0:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f0:	4b21      	ldr	r3, [pc, #132]	@ (8004678 <HAL_RCC_OscConfig+0x508>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d118      	bne.n	800462e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004678 <HAL_RCC_OscConfig+0x508>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <HAL_RCC_OscConfig+0x508>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004608:	f7fd f9aa 	bl	8001960 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004610:	f7fd f9a6 	bl	8001960 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e17a      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004622:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <HAL_RCC_OscConfig+0x508>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d108      	bne.n	8004648 <HAL_RCC_OscConfig+0x4d8>
 8004636:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463c:	4a0d      	ldr	r2, [pc, #52]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004646:	e029      	b.n	800469c <HAL_RCC_OscConfig+0x52c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d115      	bne.n	800467c <HAL_RCC_OscConfig+0x50c>
 8004650:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004656:	4a07      	ldr	r2, [pc, #28]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004660:	4b04      	ldr	r3, [pc, #16]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	4a03      	ldr	r2, [pc, #12]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004670:	e014      	b.n	800469c <HAL_RCC_OscConfig+0x52c>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	40007000 	.word	0x40007000
 800467c:	4b9c      	ldr	r3, [pc, #624]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	4a9b      	ldr	r2, [pc, #620]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800468c:	4b98      	ldr	r3, [pc, #608]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004692:	4a97      	ldr	r2, [pc, #604]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004694:	f023 0304 	bic.w	r3, r3, #4
 8004698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d016      	beq.n	80046d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd f95c 	bl	8001960 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7fd f958 	bl	8001960 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e12a      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c2:	4b8b      	ldr	r3, [pc, #556]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ed      	beq.n	80046ac <HAL_RCC_OscConfig+0x53c>
 80046d0:	e015      	b.n	80046fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d2:	f7fd f945 	bl	8001960 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fd f941 	bl	8001960 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e113      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f0:	4b7f      	ldr	r3, [pc, #508]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ed      	bne.n	80046da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004704:	4b7a      	ldr	r3, [pc, #488]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004708:	4a79      	ldr	r2, [pc, #484]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800470e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80fe 	beq.w	8004916 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	2b02      	cmp	r3, #2
 8004720:	f040 80d0 	bne.w	80048c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004724:	4b72      	ldr	r3, [pc, #456]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f003 0203 	and.w	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	429a      	cmp	r2, r3
 8004736:	d130      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	3b01      	subs	r3, #1
 8004744:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d127      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004754:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d11f      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004764:	2a07      	cmp	r2, #7
 8004766:	bf14      	ite	ne
 8004768:	2201      	movne	r2, #1
 800476a:	2200      	moveq	r2, #0
 800476c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800476e:	4293      	cmp	r3, r2
 8004770:	d113      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d109      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	3b01      	subs	r3, #1
 8004794:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d06e      	beq.n	8004878 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d069      	beq.n	8004874 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047a0:	4b53      	ldr	r3, [pc, #332]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047ac:	4b50      	ldr	r3, [pc, #320]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0ad      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047bc:	4b4c      	ldr	r3, [pc, #304]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a4b      	ldr	r2, [pc, #300]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047c8:	f7fd f8ca 	bl	8001960 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fd f8c6 	bl	8001960 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e09a      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e2:	4b43      	ldr	r3, [pc, #268]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ee:	4b40      	ldr	r3, [pc, #256]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	4b40      	ldr	r3, [pc, #256]	@ (80048f4 <HAL_RCC_OscConfig+0x784>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047fe:	3a01      	subs	r2, #1
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004808:	0212      	lsls	r2, r2, #8
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004810:	0852      	lsrs	r2, r2, #1
 8004812:	3a01      	subs	r2, #1
 8004814:	0552      	lsls	r2, r2, #21
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800481c:	0852      	lsrs	r2, r2, #1
 800481e:	3a01      	subs	r2, #1
 8004820:	0652      	lsls	r2, r2, #25
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004828:	0912      	lsrs	r2, r2, #4
 800482a:	0452      	lsls	r2, r2, #17
 800482c:	430a      	orrs	r2, r1
 800482e:	4930      	ldr	r1, [pc, #192]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004830:	4313      	orrs	r3, r2
 8004832:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004834:	4b2e      	ldr	r3, [pc, #184]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2d      	ldr	r2, [pc, #180]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800483a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800483e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004840:	4b2b      	ldr	r3, [pc, #172]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800484c:	f7fd f888 	bl	8001960 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd f884 	bl	8001960 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e058      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004872:	e050      	b.n	8004916 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e04f      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004878:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d148      	bne.n	8004916 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a19      	ldr	r2, [pc, #100]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800488a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800488e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004890:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a16      	ldr	r2, [pc, #88]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800489a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800489c:	f7fd f860 	bl	8001960 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fd f85c 	bl	8001960 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e030      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b6:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x734>
 80048c2:	e028      	b.n	8004916 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d023      	beq.n	8004912 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a08      	ldr	r2, [pc, #32]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80048d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd f843 	bl	8001960 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048dc:	e00c      	b.n	80048f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048de:	f7fd f83f 	bl	8001960 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d905      	bls.n	80048f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e013      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
 80048f0:	40021000 	.word	0x40021000
 80048f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_OscConfig+0x7b0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ec      	bne.n	80048de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004904:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <HAL_RCC_OscConfig+0x7b0>)
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	4905      	ldr	r1, [pc, #20]	@ (8004920 <HAL_RCC_OscConfig+0x7b0>)
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_OscConfig+0x7b4>)
 800490c:	4013      	ands	r3, r2
 800490e:	60cb      	str	r3, [r1, #12]
 8004910:	e001      	b.n	8004916 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021000 	.word	0x40021000
 8004924:	feeefffc 	.word	0xfeeefffc

08004928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0e7      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800493c:	4b75      	ldr	r3, [pc, #468]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d910      	bls.n	800496c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b72      	ldr	r3, [pc, #456]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 0207 	bic.w	r2, r3, #7
 8004952:	4970      	ldr	r1, [pc, #448]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0cf      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d010      	beq.n	800499a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	4b66      	ldr	r3, [pc, #408]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004984:	429a      	cmp	r2, r3
 8004986:	d908      	bls.n	800499a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4b63      	ldr	r3, [pc, #396]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4960      	ldr	r1, [pc, #384]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d04c      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d121      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0a6      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c6:	4b54      	ldr	r3, [pc, #336]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d115      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e09a      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049de:	4b4e      	ldr	r3, [pc, #312]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e08e      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e086      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049fe:	4b46      	ldr	r3, [pc, #280]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4943      	ldr	r1, [pc, #268]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a10:	f7fc ffa6 	bl	8001960 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fc ffa2 	bl	8001960 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e06e      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 020c 	and.w	r2, r3, #12
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1eb      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	4b31      	ldr	r3, [pc, #196]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d208      	bcs.n	8004a6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	492b      	ldr	r1, [pc, #172]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6e:	4b29      	ldr	r3, [pc, #164]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d210      	bcs.n	8004a9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7c:	4b25      	ldr	r3, [pc, #148]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 0207 	bic.w	r2, r3, #7
 8004a84:	4923      	ldr	r1, [pc, #140]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8c:	4b21      	ldr	r3, [pc, #132]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e036      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	4918      	ldr	r1, [pc, #96]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac8:	4b13      	ldr	r3, [pc, #76]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4910      	ldr	r1, [pc, #64]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004adc:	f000 f824 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	490b      	ldr	r1, [pc, #44]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f4>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <HAL_RCC_ClockConfig+0x1f8>)
 8004afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004afc:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_RCC_ClockConfig+0x1fc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fc fedd 	bl	80018c0 <HAL_InitTick>
 8004b06:	4603      	mov	r3, r0
 8004b08:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40022000 	.word	0x40022000
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	0800a3f8 	.word	0x0800a3f8
 8004b20:	20000000 	.word	0x20000000
 8004b24:	20000004 	.word	0x20000004

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	@ 0x24
 8004b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b36:	4b3e      	ldr	r3, [pc, #248]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b40:	4b3b      	ldr	r3, [pc, #236]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d121      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d11e      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b5c:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b68:	4b31      	ldr	r3, [pc, #196]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e005      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b78:	4b2d      	ldr	r3, [pc, #180]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b84:	4a2b      	ldr	r2, [pc, #172]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d102      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ba0:	4b25      	ldr	r3, [pc, #148]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bac:	4b23      	ldr	r3, [pc, #140]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d134      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0xa6>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d003      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xac>
 8004bcc:	e005      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bce:	4b1a      	ldr	r3, [pc, #104]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd0:	617b      	str	r3, [r7, #20]
      break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bd4:	4b19      	ldr	r3, [pc, #100]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bd6:	617b      	str	r3, [r7, #20]
      break;
 8004bd8:	e002      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	617b      	str	r3, [r7, #20]
      break;
 8004bde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004be0:	4b13      	ldr	r3, [pc, #76]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	3301      	adds	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bee:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	fb03 f202 	mul.w	r2, r3, r2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c06:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	0e5b      	lsrs	r3, r3, #25
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	3301      	adds	r3, #1
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c20:	69bb      	ldr	r3, [r7, #24]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3724      	adds	r7, #36	@ 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800a410 	.word	0x0800a410
 8004c38:	00f42400 	.word	0x00f42400
 8004c3c:	007a1200 	.word	0x007a1200

08004c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c44:	4b03      	ldr	r3, [pc, #12]	@ (8004c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000000 	.word	0x20000000

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c5c:	f7ff fff0 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4904      	ldr	r1, [pc, #16]	@ (8004c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	0800a408 	.word	0x0800a408

08004c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c88:	f7ff ffda 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0adb      	lsrs	r3, r3, #11
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4904      	ldr	r1, [pc, #16]	@ (8004cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	0800a408 	.word	0x0800a408

08004cb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cc8:	f7ff f922 	bl	8003f10 <HAL_PWREx_GetVoltageRange>
 8004ccc:	6178      	str	r0, [r7, #20]
 8004cce:	e014      	b.n	8004cfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cd0:	4b25      	ldr	r3, [pc, #148]	@ (8004d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd4:	4a24      	ldr	r2, [pc, #144]	@ (8004d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cdc:	4b22      	ldr	r3, [pc, #136]	@ (8004d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ce8:	f7ff f912 	bl	8003f10 <HAL_PWREx_GetVoltageRange>
 8004cec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cee:	4b1e      	ldr	r3, [pc, #120]	@ (8004d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cf8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d00:	d10b      	bne.n	8004d1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b80      	cmp	r3, #128	@ 0x80
 8004d06:	d919      	bls.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d0c:	d902      	bls.n	8004d14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d0e:	2302      	movs	r3, #2
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	e013      	b.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d14:	2301      	movs	r3, #1
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	e010      	b.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b80      	cmp	r3, #128	@ 0x80
 8004d1e:	d902      	bls.n	8004d26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d20:	2303      	movs	r3, #3
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	e00a      	b.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b80      	cmp	r3, #128	@ 0x80
 8004d2a:	d102      	bne.n	8004d32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	e004      	b.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b70      	cmp	r3, #112	@ 0x70
 8004d36:	d101      	bne.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d38:	2301      	movs	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 0207 	bic.w	r2, r3, #7
 8004d44:	4909      	ldr	r1, [pc, #36]	@ (8004d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d4c:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d001      	beq.n	8004d5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40022000 	.word	0x40022000

08004d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d78:	2300      	movs	r3, #0
 8004d7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d041      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d94:	d02a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d96:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d9a:	d824      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004da0:	d008      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004da2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004da6:	d81e      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004db0:	d010      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004db2:	e018      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004db4:	4b86      	ldr	r3, [pc, #536]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4a85      	ldr	r2, [pc, #532]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dbe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dc0:	e015      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 facb 	bl	8005364 <RCCEx_PLLSAI1_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dd2:	e00c      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3320      	adds	r3, #32
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fbb6 	bl	800554c <RCCEx_PLLSAI2_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	74fb      	strb	r3, [r7, #19]
      break;
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dee:	7cfb      	ldrb	r3, [r7, #19]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df4:	4b76      	ldr	r3, [pc, #472]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e02:	4973      	ldr	r1, [pc, #460]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e0a:	e001      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d041      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e24:	d02a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e2a:	d824      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e30:	d008      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e36:	d81e      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e40:	d010      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e42:	e018      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e44:	4b62      	ldr	r3, [pc, #392]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4a61      	ldr	r2, [pc, #388]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e50:	e015      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2100      	movs	r1, #0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fa83 	bl	8005364 <RCCEx_PLLSAI1_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e62:	e00c      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3320      	adds	r3, #32
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fb6e 	bl	800554c <RCCEx_PLLSAI2_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e74:	e003      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	74fb      	strb	r3, [r7, #19]
      break;
 8004e7a:	e000      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10b      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e84:	4b52      	ldr	r3, [pc, #328]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e92:	494f      	ldr	r1, [pc, #316]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e9a:	e001      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a0 	beq.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004eb2:	4b47      	ldr	r3, [pc, #284]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00d      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec8:	4b41      	ldr	r3, [pc, #260]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ecc:	4a40      	ldr	r2, [pc, #256]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ef0:	f7fc fd36 	bl	8001960 <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ef6:	e009      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef8:	f7fc fd32 	bl	8001960 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d902      	bls.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	74fb      	strb	r3, [r7, #19]
        break;
 8004f0a:	e005      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f0c:	4b31      	ldr	r3, [pc, #196]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ef      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d15c      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01f      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d019      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f3c:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f48:	4b21      	ldr	r3, [pc, #132]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4e:	4a20      	ldr	r2, [pc, #128]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f58:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f68:	4a19      	ldr	r2, [pc, #100]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d016      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7a:	f7fc fcf1 	bl	8001960 <HAL_GetTick>
 8004f7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f80:	e00b      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fc fced 	bl	8001960 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d902      	bls.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	74fb      	strb	r3, [r7, #19]
            break;
 8004f98:	e006      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0ec      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fae:	4b08      	ldr	r3, [pc, #32]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fbe:	4904      	ldr	r1, [pc, #16]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004fc6:	e009      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	74bb      	strb	r3, [r7, #18]
 8004fcc:	e006      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fdc:	7c7b      	ldrb	r3, [r7, #17]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d105      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe2:	4b9e      	ldr	r3, [pc, #632]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe6:	4a9d      	ldr	r2, [pc, #628]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ffa:	4b98      	ldr	r3, [pc, #608]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f023 0203 	bic.w	r2, r3, #3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	4994      	ldr	r1, [pc, #592]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800501c:	4b8f      	ldr	r3, [pc, #572]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005022:	f023 020c 	bic.w	r2, r3, #12
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	498c      	ldr	r1, [pc, #560]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800503e:	4b87      	ldr	r3, [pc, #540]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005044:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	4983      	ldr	r1, [pc, #524]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005060:	4b7e      	ldr	r3, [pc, #504]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005066:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506e:	497b      	ldr	r1, [pc, #492]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005082:	4b76      	ldr	r3, [pc, #472]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005088:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005090:	4972      	ldr	r1, [pc, #456]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050a4:	4b6d      	ldr	r3, [pc, #436]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b2:	496a      	ldr	r1, [pc, #424]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050c6:	4b65      	ldr	r3, [pc, #404]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d4:	4961      	ldr	r1, [pc, #388]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050e8:	4b5c      	ldr	r3, [pc, #368]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f6:	4959      	ldr	r1, [pc, #356]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800510a:	4b54      	ldr	r3, [pc, #336]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005118:	4950      	ldr	r1, [pc, #320]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800512c:	4b4b      	ldr	r3, [pc, #300]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513a:	4948      	ldr	r1, [pc, #288]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800514e:	4b43      	ldr	r3, [pc, #268]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005154:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	493f      	ldr	r1, [pc, #252]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d028      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005170:	4b3a      	ldr	r3, [pc, #232]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800517e:	4937      	ldr	r1, [pc, #220]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800518a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800518e:	d106      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005190:	4b32      	ldr	r3, [pc, #200]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a31      	ldr	r2, [pc, #196]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800519a:	60d3      	str	r3, [r2, #12]
 800519c:	e011      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051a6:	d10c      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	2101      	movs	r1, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f8d8 	bl	8005364 <RCCEx_PLLSAI1_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d028      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051ce:	4b23      	ldr	r3, [pc, #140]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051dc:	491f      	ldr	r1, [pc, #124]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ec:	d106      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ee:	4b1b      	ldr	r3, [pc, #108]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	4a1a      	ldr	r2, [pc, #104]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051f8:	60d3      	str	r3, [r2, #12]
 80051fa:	e011      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005204:	d10c      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	2101      	movs	r1, #1
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f8a9 	bl	8005364 <RCCEx_PLLSAI1_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005216:	7cfb      	ldrb	r3, [r7, #19]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d02b      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005232:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800523a:	4908      	ldr	r1, [pc, #32]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800524a:	d109      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800524c:	4b03      	ldr	r3, [pc, #12]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a02      	ldr	r2, [pc, #8]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005256:	60d3      	str	r3, [r2, #12]
 8005258:	e014      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800525a:	bf00      	nop
 800525c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005268:	d10c      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3304      	adds	r3, #4
 800526e:	2101      	movs	r1, #1
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f877 	bl	8005364 <RCCEx_PLLSAI1_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800527a:	7cfb      	ldrb	r3, [r7, #19]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d02f      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005290:	4b2b      	ldr	r3, [pc, #172]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800529e:	4928      	ldr	r1, [pc, #160]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ae:	d10d      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	2102      	movs	r1, #2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f854 	bl	8005364 <RCCEx_PLLSAI1_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052c0:	7cfb      	ldrb	r3, [r7, #19]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d014      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	74bb      	strb	r3, [r7, #18]
 80052ca:	e011      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3320      	adds	r3, #32
 80052da:	2102      	movs	r1, #2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f935 	bl	800554c <RCCEx_PLLSAI2_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052e6:	7cfb      	ldrb	r3, [r7, #19]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052fc:	4b10      	ldr	r3, [pc, #64]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005302:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800530a:	490d      	ldr	r1, [pc, #52]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800531e:	4b08      	ldr	r3, [pc, #32]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005324:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800532e:	4904      	ldr	r1, [pc, #16]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005336:	7cbb      	ldrb	r3, [r7, #18]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40021000 	.word	0x40021000

08005344 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005348:	4b05      	ldr	r3, [pc, #20]	@ (8005360 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a04      	ldr	r2, [pc, #16]	@ (8005360 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800534e:	f043 0304 	orr.w	r3, r3, #4
 8005352:	6013      	str	r3, [r2, #0]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000

08005364 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005372:	4b75      	ldr	r3, [pc, #468]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d018      	beq.n	80053b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800537e:	4b72      	ldr	r3, [pc, #456]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f003 0203 	and.w	r2, r3, #3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d10d      	bne.n	80053aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
       ||
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005396:	4b6c      	ldr	r3, [pc, #432]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	091b      	lsrs	r3, r3, #4
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
       ||
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d047      	beq.n	800543a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
 80053ae:	e044      	b.n	800543a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d018      	beq.n	80053ea <RCCEx_PLLSAI1_Config+0x86>
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d825      	bhi.n	8005408 <RCCEx_PLLSAI1_Config+0xa4>
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d002      	beq.n	80053c6 <RCCEx_PLLSAI1_Config+0x62>
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d009      	beq.n	80053d8 <RCCEx_PLLSAI1_Config+0x74>
 80053c4:	e020      	b.n	8005408 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053c6:	4b60      	ldr	r3, [pc, #384]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11d      	bne.n	800540e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d6:	e01a      	b.n	800540e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d116      	bne.n	8005412 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e8:	e013      	b.n	8005412 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053ea:	4b57      	ldr	r3, [pc, #348]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10f      	bne.n	8005416 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053f6:	4b54      	ldr	r3, [pc, #336]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005406:	e006      	b.n	8005416 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
      break;
 800540c:	e004      	b.n	8005418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800540e:	bf00      	nop
 8005410:	e002      	b.n	8005418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005416:	bf00      	nop
    }

    if(status == HAL_OK)
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10d      	bne.n	800543a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800541e:	4b4a      	ldr	r3, [pc, #296]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	3b01      	subs	r3, #1
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	430b      	orrs	r3, r1
 8005434:	4944      	ldr	r1, [pc, #272]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005436:	4313      	orrs	r3, r2
 8005438:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d17d      	bne.n	800553c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005440:	4b41      	ldr	r3, [pc, #260]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a40      	ldr	r2, [pc, #256]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800544a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544c:	f7fc fa88 	bl	8001960 <HAL_GetTick>
 8005450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005452:	e009      	b.n	8005468 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005454:	f7fc fa84 	bl	8001960 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d902      	bls.n	8005468 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	73fb      	strb	r3, [r7, #15]
        break;
 8005466:	e005      	b.n	8005474 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005468:	4b37      	ldr	r3, [pc, #220]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1ef      	bne.n	8005454 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d160      	bne.n	800553c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d111      	bne.n	80054a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005480:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6892      	ldr	r2, [r2, #8]
 8005490:	0211      	lsls	r1, r2, #8
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68d2      	ldr	r2, [r2, #12]
 8005496:	0912      	lsrs	r2, r2, #4
 8005498:	0452      	lsls	r2, r2, #17
 800549a:	430a      	orrs	r2, r1
 800549c:	492a      	ldr	r1, [pc, #168]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	610b      	str	r3, [r1, #16]
 80054a2:	e027      	b.n	80054f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d112      	bne.n	80054d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054aa:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80054b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6892      	ldr	r2, [r2, #8]
 80054ba:	0211      	lsls	r1, r2, #8
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6912      	ldr	r2, [r2, #16]
 80054c0:	0852      	lsrs	r2, r2, #1
 80054c2:	3a01      	subs	r2, #1
 80054c4:	0552      	lsls	r2, r2, #21
 80054c6:	430a      	orrs	r2, r1
 80054c8:	491f      	ldr	r1, [pc, #124]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	610b      	str	r3, [r1, #16]
 80054ce:	e011      	b.n	80054f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80054d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6892      	ldr	r2, [r2, #8]
 80054e0:	0211      	lsls	r1, r2, #8
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6952      	ldr	r2, [r2, #20]
 80054e6:	0852      	lsrs	r2, r2, #1
 80054e8:	3a01      	subs	r2, #1
 80054ea:	0652      	lsls	r2, r2, #25
 80054ec:	430a      	orrs	r2, r1
 80054ee:	4916      	ldr	r1, [pc, #88]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054f4:	4b14      	ldr	r3, [pc, #80]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a13      	ldr	r2, [pc, #76]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fc fa2e 	bl	8001960 <HAL_GetTick>
 8005504:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005506:	e009      	b.n	800551c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005508:	f7fc fa2a 	bl	8001960 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d902      	bls.n	800551c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	73fb      	strb	r3, [r7, #15]
          break;
 800551a:	e005      	b.n	8005528 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800551c:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ef      	beq.n	8005508 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800552e:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	4904      	ldr	r1, [pc, #16]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005538:	4313      	orrs	r3, r2
 800553a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40021000 	.word	0x40021000

0800554c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800555a:	4b6a      	ldr	r3, [pc, #424]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d018      	beq.n	8005598 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005566:	4b67      	ldr	r3, [pc, #412]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f003 0203 	and.w	r2, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d10d      	bne.n	8005592 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
       ||
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800557e:	4b61      	ldr	r3, [pc, #388]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	091b      	lsrs	r3, r3, #4
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
       ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d047      	beq.n	8005622 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
 8005596:	e044      	b.n	8005622 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d018      	beq.n	80055d2 <RCCEx_PLLSAI2_Config+0x86>
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d825      	bhi.n	80055f0 <RCCEx_PLLSAI2_Config+0xa4>
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d002      	beq.n	80055ae <RCCEx_PLLSAI2_Config+0x62>
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d009      	beq.n	80055c0 <RCCEx_PLLSAI2_Config+0x74>
 80055ac:	e020      	b.n	80055f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055ae:	4b55      	ldr	r3, [pc, #340]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d11d      	bne.n	80055f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055be:	e01a      	b.n	80055f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055c0:	4b50      	ldr	r3, [pc, #320]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d116      	bne.n	80055fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d0:	e013      	b.n	80055fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055d2:	4b4c      	ldr	r3, [pc, #304]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10f      	bne.n	80055fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055de:	4b49      	ldr	r3, [pc, #292]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055ee:	e006      	b.n	80055fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      break;
 80055f4:	e004      	b.n	8005600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055f6:	bf00      	nop
 80055f8:	e002      	b.n	8005600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005606:	4b3f      	ldr	r3, [pc, #252]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	3b01      	subs	r3, #1
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	430b      	orrs	r3, r1
 800561c:	4939      	ldr	r1, [pc, #228]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561e:	4313      	orrs	r3, r2
 8005620:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d167      	bne.n	80056f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005628:	4b36      	ldr	r3, [pc, #216]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a35      	ldr	r2, [pc, #212]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005634:	f7fc f994 	bl	8001960 <HAL_GetTick>
 8005638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800563a:	e009      	b.n	8005650 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800563c:	f7fc f990 	bl	8001960 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d902      	bls.n	8005650 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	73fb      	strb	r3, [r7, #15]
        break;
 800564e:	e005      	b.n	800565c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005650:	4b2c      	ldr	r3, [pc, #176]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ef      	bne.n	800563c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d14a      	bne.n	80056f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d111      	bne.n	800568c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005668:	4b26      	ldr	r3, [pc, #152]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6892      	ldr	r2, [r2, #8]
 8005678:	0211      	lsls	r1, r2, #8
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68d2      	ldr	r2, [r2, #12]
 800567e:	0912      	lsrs	r2, r2, #4
 8005680:	0452      	lsls	r2, r2, #17
 8005682:	430a      	orrs	r2, r1
 8005684:	491f      	ldr	r1, [pc, #124]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005686:	4313      	orrs	r3, r2
 8005688:	614b      	str	r3, [r1, #20]
 800568a:	e011      	b.n	80056b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800568c:	4b1d      	ldr	r3, [pc, #116]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005694:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6892      	ldr	r2, [r2, #8]
 800569c:	0211      	lsls	r1, r2, #8
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6912      	ldr	r2, [r2, #16]
 80056a2:	0852      	lsrs	r2, r2, #1
 80056a4:	3a01      	subs	r2, #1
 80056a6:	0652      	lsls	r2, r2, #25
 80056a8:	430a      	orrs	r2, r1
 80056aa:	4916      	ldr	r1, [pc, #88]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80056b0:	4b14      	ldr	r3, [pc, #80]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a13      	ldr	r2, [pc, #76]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fc f950 	bl	8001960 <HAL_GetTick>
 80056c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056c2:	e009      	b.n	80056d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056c4:	f7fc f94c 	bl	8001960 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d902      	bls.n	80056d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	73fb      	strb	r3, [r7, #15]
          break;
 80056d6:	e005      	b.n	80056e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ef      	beq.n	80056c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056ea:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	4904      	ldr	r1, [pc, #16]	@ (8005704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40021000 	.word	0x40021000

08005708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e095      	b.n	8005846 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d108      	bne.n	8005734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800572a:	d009      	beq.n	8005740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	61da      	str	r2, [r3, #28]
 8005732:	e005      	b.n	8005740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fb fdea 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005776:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005780:	d902      	bls.n	8005788 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e002      	b.n	800578e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800578c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005796:	d007      	beq.n	80057a8 <HAL_SPI_Init+0xa0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ea:	ea42 0103 	orr.w	r1, r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	f003 0204 	and.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005824:	ea42 0103 	orr.w	r1, r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e049      	b.n	80058f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d106      	bne.n	800587a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7fb fda1 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f000 f96f 	bl	8005b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e04f      	b.n	80059b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a23      	ldr	r2, [pc, #140]	@ (80059c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01d      	beq.n	8005972 <HAL_TIM_Base_Start_IT+0x76>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593e:	d018      	beq.n	8005972 <HAL_TIM_Base_Start_IT+0x76>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1f      	ldr	r2, [pc, #124]	@ (80059c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d013      	beq.n	8005972 <HAL_TIM_Base_Start_IT+0x76>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a1e      	ldr	r2, [pc, #120]	@ (80059c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_TIM_Base_Start_IT+0x76>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1c      	ldr	r2, [pc, #112]	@ (80059cc <HAL_TIM_Base_Start_IT+0xd0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_TIM_Base_Start_IT+0x76>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1b      	ldr	r2, [pc, #108]	@ (80059d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIM_Base_Start_IT+0x76>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a19      	ldr	r2, [pc, #100]	@ (80059d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d115      	bne.n	800599e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	4b17      	ldr	r3, [pc, #92]	@ (80059d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800597a:	4013      	ands	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b06      	cmp	r3, #6
 8005982:	d015      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0xb4>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598a:	d011      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	e008      	b.n	80059b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e000      	b.n	80059b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40013400 	.word	0x40013400
 80059d4:	40014000 	.word	0x40014000
 80059d8:	00010007 	.word	0x00010007

080059dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_ConfigClockSource+0x1c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e0b6      	b.n	8005b66 <HAL_TIM_ConfigClockSource+0x18a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a34:	d03e      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0xd8>
 8005a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a3a:	f200 8087 	bhi.w	8005b4c <HAL_TIM_ConfigClockSource+0x170>
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a42:	f000 8086 	beq.w	8005b52 <HAL_TIM_ConfigClockSource+0x176>
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a4a:	d87f      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x170>
 8005a4c:	2b70      	cmp	r3, #112	@ 0x70
 8005a4e:	d01a      	beq.n	8005a86 <HAL_TIM_ConfigClockSource+0xaa>
 8005a50:	2b70      	cmp	r3, #112	@ 0x70
 8005a52:	d87b      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x170>
 8005a54:	2b60      	cmp	r3, #96	@ 0x60
 8005a56:	d050      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x11e>
 8005a58:	2b60      	cmp	r3, #96	@ 0x60
 8005a5a:	d877      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x170>
 8005a5c:	2b50      	cmp	r3, #80	@ 0x50
 8005a5e:	d03c      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0xfe>
 8005a60:	2b50      	cmp	r3, #80	@ 0x50
 8005a62:	d873      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x170>
 8005a64:	2b40      	cmp	r3, #64	@ 0x40
 8005a66:	d058      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x13e>
 8005a68:	2b40      	cmp	r3, #64	@ 0x40
 8005a6a:	d86f      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x170>
 8005a6c:	2b30      	cmp	r3, #48	@ 0x30
 8005a6e:	d064      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15e>
 8005a70:	2b30      	cmp	r3, #48	@ 0x30
 8005a72:	d86b      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x170>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d060      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15e>
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d867      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x170>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d05c      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15e>
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d05a      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15e>
 8005a84:	e062      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a96:	f000 f98b 	bl	8005db0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	609a      	str	r2, [r3, #8]
      break;
 8005ab2:	e04f      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ac4:	f000 f974 	bl	8005db0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ad6:	609a      	str	r2, [r3, #8]
      break;
 8005ad8:	e03c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f000 f8e8 	bl	8005cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2150      	movs	r1, #80	@ 0x50
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 f941 	bl	8005d7a <TIM_ITRx_SetConfig>
      break;
 8005af8:	e02c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b06:	461a      	mov	r2, r3
 8005b08:	f000 f907 	bl	8005d1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2160      	movs	r1, #96	@ 0x60
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f931 	bl	8005d7a <TIM_ITRx_SetConfig>
      break;
 8005b18:	e01c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	461a      	mov	r2, r3
 8005b28:	f000 f8c8 	bl	8005cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2140      	movs	r1, #64	@ 0x40
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f921 	bl	8005d7a <TIM_ITRx_SetConfig>
      break;
 8005b38:	e00c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f000 f918 	bl	8005d7a <TIM_ITRx_SetConfig>
      break;
 8005b4a:	e003      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b50:	e000      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a46      	ldr	r2, [pc, #280]	@ (8005c9c <TIM_Base_SetConfig+0x12c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a43      	ldr	r2, [pc, #268]	@ (8005ca0 <TIM_Base_SetConfig+0x130>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a42      	ldr	r2, [pc, #264]	@ (8005ca4 <TIM_Base_SetConfig+0x134>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a41      	ldr	r2, [pc, #260]	@ (8005ca8 <TIM_Base_SetConfig+0x138>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a40      	ldr	r2, [pc, #256]	@ (8005cac <TIM_Base_SetConfig+0x13c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a35      	ldr	r2, [pc, #212]	@ (8005c9c <TIM_Base_SetConfig+0x12c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01f      	beq.n	8005c0a <TIM_Base_SetConfig+0x9a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd0:	d01b      	beq.n	8005c0a <TIM_Base_SetConfig+0x9a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a32      	ldr	r2, [pc, #200]	@ (8005ca0 <TIM_Base_SetConfig+0x130>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d017      	beq.n	8005c0a <TIM_Base_SetConfig+0x9a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a31      	ldr	r2, [pc, #196]	@ (8005ca4 <TIM_Base_SetConfig+0x134>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <TIM_Base_SetConfig+0x9a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a30      	ldr	r2, [pc, #192]	@ (8005ca8 <TIM_Base_SetConfig+0x138>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00f      	beq.n	8005c0a <TIM_Base_SetConfig+0x9a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2f      	ldr	r2, [pc, #188]	@ (8005cac <TIM_Base_SetConfig+0x13c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00b      	beq.n	8005c0a <TIM_Base_SetConfig+0x9a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8005cb0 <TIM_Base_SetConfig+0x140>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d007      	beq.n	8005c0a <TIM_Base_SetConfig+0x9a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb4 <TIM_Base_SetConfig+0x144>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_Base_SetConfig+0x9a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2c      	ldr	r2, [pc, #176]	@ (8005cb8 <TIM_Base_SetConfig+0x148>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d108      	bne.n	8005c1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a16      	ldr	r2, [pc, #88]	@ (8005c9c <TIM_Base_SetConfig+0x12c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00f      	beq.n	8005c68 <TIM_Base_SetConfig+0xf8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <TIM_Base_SetConfig+0x13c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <TIM_Base_SetConfig+0xf8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a17      	ldr	r2, [pc, #92]	@ (8005cb0 <TIM_Base_SetConfig+0x140>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d007      	beq.n	8005c68 <TIM_Base_SetConfig+0xf8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a16      	ldr	r2, [pc, #88]	@ (8005cb4 <TIM_Base_SetConfig+0x144>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_Base_SetConfig+0xf8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a15      	ldr	r2, [pc, #84]	@ (8005cb8 <TIM_Base_SetConfig+0x148>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d103      	bne.n	8005c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d105      	bne.n	8005c8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f023 0201 	bic.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	611a      	str	r2, [r3, #16]
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0201 	bic.w	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f023 030a 	bic.w	r3, r3, #10
 8005cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b087      	sub	sp, #28
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f023 0210 	bic.w	r2, r3, #16
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	031b      	lsls	r3, r3, #12
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f043 0307 	orr.w	r3, r3, #7
 8005d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	021a      	lsls	r2, r3, #8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	609a      	str	r2, [r3, #8]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e068      	b.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2d      	ldr	r2, [pc, #180]	@ (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d108      	bne.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01d      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7a:	d018      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a18      	ldr	r2, [pc, #96]	@ (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	@ (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a14      	ldr	r2, [pc, #80]	@ (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10c      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40014000 	.word	0x40014000

08005f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e040      	b.n	8005f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb fa6a 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	@ 0x24
 8005f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb6a 	bl	8006620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f8af 	bl	80060b0 <UART_SetConfig>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e01b      	b.n	8005f94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fbe9 	bl	8006764 <UART_CheckIdleState>
 8005f92:	4603      	mov	r3, r0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	@ 0x28
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d177      	bne.n	80060a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_UART_Transmit+0x24>
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e070      	b.n	80060a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2221      	movs	r2, #33	@ 0x21
 8005fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd2:	f7fb fcc5 	bl	8001960 <HAL_GetTick>
 8005fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	88fa      	ldrh	r2, [r7, #6]
 8005fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff0:	d108      	bne.n	8006004 <HAL_UART_Transmit+0x68>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	e003      	b.n	800600c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800600c:	e02f      	b.n	800606e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2180      	movs	r1, #128	@ 0x80
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fc4b 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e03b      	b.n	80060a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	881a      	ldrh	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006040:	b292      	uxth	r2, r2
 8006042:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	3302      	adds	r3, #2
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e007      	b.n	800605c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	781a      	ldrb	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	3301      	adds	r3, #1
 800605a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1c9      	bne.n	800600e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	2140      	movs	r1, #64	@ 0x40
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fc15 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e005      	b.n	80060a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b4:	b08a      	sub	sp, #40	@ 0x28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4ba4      	ldr	r3, [pc, #656]	@ (8006370 <UART_SetConfig+0x2c0>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a99      	ldr	r2, [pc, #612]	@ (8006374 <UART_SetConfig+0x2c4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006118:	4313      	orrs	r3, r2
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a90      	ldr	r2, [pc, #576]	@ (8006378 <UART_SetConfig+0x2c8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d126      	bne.n	8006188 <UART_SetConfig+0xd8>
 800613a:	4b90      	ldr	r3, [pc, #576]	@ (800637c <UART_SetConfig+0x2cc>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	2b03      	cmp	r3, #3
 8006146:	d81b      	bhi.n	8006180 <UART_SetConfig+0xd0>
 8006148:	a201      	add	r2, pc, #4	@ (adr r2, 8006150 <UART_SetConfig+0xa0>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006161 	.word	0x08006161
 8006154:	08006171 	.word	0x08006171
 8006158:	08006169 	.word	0x08006169
 800615c:	08006179 	.word	0x08006179
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006166:	e116      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006168:	2302      	movs	r3, #2
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616e:	e112      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006176:	e10e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617e:	e10a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006186:	e106      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a7c      	ldr	r2, [pc, #496]	@ (8006380 <UART_SetConfig+0x2d0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d138      	bne.n	8006204 <UART_SetConfig+0x154>
 8006192:	4b7a      	ldr	r3, [pc, #488]	@ (800637c <UART_SetConfig+0x2cc>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d82d      	bhi.n	80061fc <UART_SetConfig+0x14c>
 80061a0:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <UART_SetConfig+0xf8>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061dd 	.word	0x080061dd
 80061ac:	080061fd 	.word	0x080061fd
 80061b0:	080061fd 	.word	0x080061fd
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	080061ed 	.word	0x080061ed
 80061bc:	080061fd 	.word	0x080061fd
 80061c0:	080061fd 	.word	0x080061fd
 80061c4:	080061fd 	.word	0x080061fd
 80061c8:	080061e5 	.word	0x080061e5
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e2:	e0d8      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ea:	e0d4      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061f2:	e0d0      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061fa:	e0cc      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006202:	e0c8      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5e      	ldr	r2, [pc, #376]	@ (8006384 <UART_SetConfig+0x2d4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d125      	bne.n	800625a <UART_SetConfig+0x1aa>
 800620e:	4b5b      	ldr	r3, [pc, #364]	@ (800637c <UART_SetConfig+0x2cc>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006214:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006218:	2b30      	cmp	r3, #48	@ 0x30
 800621a:	d016      	beq.n	800624a <UART_SetConfig+0x19a>
 800621c:	2b30      	cmp	r3, #48	@ 0x30
 800621e:	d818      	bhi.n	8006252 <UART_SetConfig+0x1a2>
 8006220:	2b20      	cmp	r3, #32
 8006222:	d00a      	beq.n	800623a <UART_SetConfig+0x18a>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d814      	bhi.n	8006252 <UART_SetConfig+0x1a2>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <UART_SetConfig+0x182>
 800622c:	2b10      	cmp	r3, #16
 800622e:	d008      	beq.n	8006242 <UART_SetConfig+0x192>
 8006230:	e00f      	b.n	8006252 <UART_SetConfig+0x1a2>
 8006232:	2300      	movs	r3, #0
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006238:	e0ad      	b.n	8006396 <UART_SetConfig+0x2e6>
 800623a:	2302      	movs	r3, #2
 800623c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006240:	e0a9      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006242:	2304      	movs	r3, #4
 8006244:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006248:	e0a5      	b.n	8006396 <UART_SetConfig+0x2e6>
 800624a:	2308      	movs	r3, #8
 800624c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006250:	e0a1      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006252:	2310      	movs	r3, #16
 8006254:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006258:	e09d      	b.n	8006396 <UART_SetConfig+0x2e6>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a4a      	ldr	r2, [pc, #296]	@ (8006388 <UART_SetConfig+0x2d8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d125      	bne.n	80062b0 <UART_SetConfig+0x200>
 8006264:	4b45      	ldr	r3, [pc, #276]	@ (800637c <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800626e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006270:	d016      	beq.n	80062a0 <UART_SetConfig+0x1f0>
 8006272:	2bc0      	cmp	r3, #192	@ 0xc0
 8006274:	d818      	bhi.n	80062a8 <UART_SetConfig+0x1f8>
 8006276:	2b80      	cmp	r3, #128	@ 0x80
 8006278:	d00a      	beq.n	8006290 <UART_SetConfig+0x1e0>
 800627a:	2b80      	cmp	r3, #128	@ 0x80
 800627c:	d814      	bhi.n	80062a8 <UART_SetConfig+0x1f8>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <UART_SetConfig+0x1d8>
 8006282:	2b40      	cmp	r3, #64	@ 0x40
 8006284:	d008      	beq.n	8006298 <UART_SetConfig+0x1e8>
 8006286:	e00f      	b.n	80062a8 <UART_SetConfig+0x1f8>
 8006288:	2300      	movs	r3, #0
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628e:	e082      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006290:	2302      	movs	r3, #2
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006296:	e07e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629e:	e07a      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062a6:	e076      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ae:	e072      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a35      	ldr	r2, [pc, #212]	@ (800638c <UART_SetConfig+0x2dc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d12a      	bne.n	8006310 <UART_SetConfig+0x260>
 80062ba:	4b30      	ldr	r3, [pc, #192]	@ (800637c <UART_SetConfig+0x2cc>)
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c8:	d01a      	beq.n	8006300 <UART_SetConfig+0x250>
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ce:	d81b      	bhi.n	8006308 <UART_SetConfig+0x258>
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062d4:	d00c      	beq.n	80062f0 <UART_SetConfig+0x240>
 80062d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062da:	d815      	bhi.n	8006308 <UART_SetConfig+0x258>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <UART_SetConfig+0x238>
 80062e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062e4:	d008      	beq.n	80062f8 <UART_SetConfig+0x248>
 80062e6:	e00f      	b.n	8006308 <UART_SetConfig+0x258>
 80062e8:	2300      	movs	r3, #0
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ee:	e052      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062f0:	2302      	movs	r3, #2
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062f6:	e04e      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062f8:	2304      	movs	r3, #4
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062fe:	e04a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006300:	2308      	movs	r3, #8
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006306:	e046      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006308:	2310      	movs	r3, #16
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800630e:	e042      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a17      	ldr	r2, [pc, #92]	@ (8006374 <UART_SetConfig+0x2c4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d13a      	bne.n	8006390 <UART_SetConfig+0x2e0>
 800631a:	4b18      	ldr	r3, [pc, #96]	@ (800637c <UART_SetConfig+0x2cc>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006320:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006324:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006328:	d01a      	beq.n	8006360 <UART_SetConfig+0x2b0>
 800632a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800632e:	d81b      	bhi.n	8006368 <UART_SetConfig+0x2b8>
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006334:	d00c      	beq.n	8006350 <UART_SetConfig+0x2a0>
 8006336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800633a:	d815      	bhi.n	8006368 <UART_SetConfig+0x2b8>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <UART_SetConfig+0x298>
 8006340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006344:	d008      	beq.n	8006358 <UART_SetConfig+0x2a8>
 8006346:	e00f      	b.n	8006368 <UART_SetConfig+0x2b8>
 8006348:	2300      	movs	r3, #0
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634e:	e022      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006350:	2302      	movs	r3, #2
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006356:	e01e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006358:	2304      	movs	r3, #4
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635e:	e01a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006360:	2308      	movs	r3, #8
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006366:	e016      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006368:	2310      	movs	r3, #16
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800636e:	e012      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006370:	efff69f3 	.word	0xefff69f3
 8006374:	40008000 	.word	0x40008000
 8006378:	40013800 	.word	0x40013800
 800637c:	40021000 	.word	0x40021000
 8006380:	40004400 	.word	0x40004400
 8006384:	40004800 	.word	0x40004800
 8006388:	40004c00 	.word	0x40004c00
 800638c:	40005000 	.word	0x40005000
 8006390:	2310      	movs	r3, #16
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a9f      	ldr	r2, [pc, #636]	@ (8006618 <UART_SetConfig+0x568>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d17a      	bne.n	8006496 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d824      	bhi.n	80063f2 <UART_SetConfig+0x342>
 80063a8:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <UART_SetConfig+0x300>)
 80063aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ae:	bf00      	nop
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063f3 	.word	0x080063f3
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063f3 	.word	0x080063f3
 80063c0:	080063e3 	.word	0x080063e3
 80063c4:	080063f3 	.word	0x080063f3
 80063c8:	080063f3 	.word	0x080063f3
 80063cc:	080063f3 	.word	0x080063f3
 80063d0:	080063eb 	.word	0x080063eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d4:	f7fe fc40 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 80063d8:	61f8      	str	r0, [r7, #28]
        break;
 80063da:	e010      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063dc:	4b8f      	ldr	r3, [pc, #572]	@ (800661c <UART_SetConfig+0x56c>)
 80063de:	61fb      	str	r3, [r7, #28]
        break;
 80063e0:	e00d      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e2:	f7fe fba1 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 80063e6:	61f8      	str	r0, [r7, #28]
        break;
 80063e8:	e009      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ee:	61fb      	str	r3, [r7, #28]
        break;
 80063f0:	e005      	b.n	80063fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80fb 	beq.w	80065fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	429a      	cmp	r2, r3
 8006414:	d305      	bcc.n	8006422 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	429a      	cmp	r2, r3
 8006420:	d903      	bls.n	800642a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006428:	e0e8      	b.n	80065fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2200      	movs	r2, #0
 800642e:	461c      	mov	r4, r3
 8006430:	4615      	mov	r5, r2
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	022b      	lsls	r3, r5, #8
 800643c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006440:	0222      	lsls	r2, r4, #8
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	6849      	ldr	r1, [r1, #4]
 8006446:	0849      	lsrs	r1, r1, #1
 8006448:	2000      	movs	r0, #0
 800644a:	4688      	mov	r8, r1
 800644c:	4681      	mov	r9, r0
 800644e:	eb12 0a08 	adds.w	sl, r2, r8
 8006452:	eb43 0b09 	adc.w	fp, r3, r9
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006464:	4650      	mov	r0, sl
 8006466:	4659      	mov	r1, fp
 8006468:	f7f9 ff02 	bl	8000270 <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4613      	mov	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800647a:	d308      	bcc.n	800648e <UART_SetConfig+0x3de>
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006482:	d204      	bcs.n	800648e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	e0b6      	b.n	80065fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006494:	e0b2      	b.n	80065fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800649e:	d15e      	bne.n	800655e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80064a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d828      	bhi.n	80064fa <UART_SetConfig+0x44a>
 80064a8:	a201      	add	r2, pc, #4	@ (adr r2, 80064b0 <UART_SetConfig+0x400>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fe fbc0 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 80064d8:	61f8      	str	r0, [r7, #28]
        break;
 80064da:	e014      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fe fbd2 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 80064e0:	61f8      	str	r0, [r7, #28]
        break;
 80064e2:	e010      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b4d      	ldr	r3, [pc, #308]	@ (800661c <UART_SetConfig+0x56c>)
 80064e6:	61fb      	str	r3, [r7, #28]
        break;
 80064e8:	e00d      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fe fb1d 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 80064ee:	61f8      	str	r0, [r7, #28]
        break;
 80064f0:	e009      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f6:	61fb      	str	r3, [r7, #28]
        break;
 80064f8:	e005      	b.n	8006506 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d077      	beq.n	80065fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	005a      	lsls	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	441a      	add	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b0f      	cmp	r3, #15
 8006526:	d916      	bls.n	8006556 <UART_SetConfig+0x4a6>
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800652e:	d212      	bcs.n	8006556 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f023 030f 	bic.w	r3, r3, #15
 8006538:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	b29b      	uxth	r3, r3
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	b29a      	uxth	r2, r3
 8006546:	8afb      	ldrh	r3, [r7, #22]
 8006548:	4313      	orrs	r3, r2
 800654a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	8afa      	ldrh	r2, [r7, #22]
 8006552:	60da      	str	r2, [r3, #12]
 8006554:	e052      	b.n	80065fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800655c:	e04e      	b.n	80065fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800655e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006562:	2b08      	cmp	r3, #8
 8006564:	d827      	bhi.n	80065b6 <UART_SetConfig+0x506>
 8006566:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <UART_SetConfig+0x4bc>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	08006591 	.word	0x08006591
 8006570:	08006599 	.word	0x08006599
 8006574:	080065a1 	.word	0x080065a1
 8006578:	080065b7 	.word	0x080065b7
 800657c:	080065a7 	.word	0x080065a7
 8006580:	080065b7 	.word	0x080065b7
 8006584:	080065b7 	.word	0x080065b7
 8006588:	080065b7 	.word	0x080065b7
 800658c:	080065af 	.word	0x080065af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fe fb62 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8006594:	61f8      	str	r0, [r7, #28]
        break;
 8006596:	e014      	b.n	80065c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006598:	f7fe fb74 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 800659c:	61f8      	str	r0, [r7, #28]
        break;
 800659e:	e010      	b.n	80065c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a0:	4b1e      	ldr	r3, [pc, #120]	@ (800661c <UART_SetConfig+0x56c>)
 80065a2:	61fb      	str	r3, [r7, #28]
        break;
 80065a4:	e00d      	b.n	80065c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a6:	f7fe fabf 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 80065aa:	61f8      	str	r0, [r7, #28]
        break;
 80065ac:	e009      	b.n	80065c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065b2:	61fb      	str	r3, [r7, #28]
        break;
 80065b4:	e005      	b.n	80065c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065c0:	bf00      	nop
    }

    if (pclk != 0U)
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d019      	beq.n	80065fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	085a      	lsrs	r2, r3, #1
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	441a      	add	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b0f      	cmp	r3, #15
 80065e0:	d909      	bls.n	80065f6 <UART_SetConfig+0x546>
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e8:	d205      	bcs.n	80065f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	e002      	b.n	80065fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006608:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800660c:	4618      	mov	r0, r3
 800660e:	3728      	adds	r7, #40	@ 0x28
 8006610:	46bd      	mov	sp, r7
 8006612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006616:	bf00      	nop
 8006618:	40008000 	.word	0x40008000
 800661c:	00f42400 	.word	0x00f42400

08006620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01a      	beq.n	8006736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800671e:	d10a      	bne.n	8006736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
  }
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b098      	sub	sp, #96	@ 0x60
 8006768:	af02      	add	r7, sp, #8
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006774:	f7fb f8f4 	bl	8001960 <HAL_GetTick>
 8006778:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d12e      	bne.n	80067e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006790:	2200      	movs	r2, #0
 8006792:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f88c 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d021      	beq.n	80067e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e6      	bne.n	80067a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e062      	b.n	80068ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d149      	bne.n	8006888 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067fc:	2200      	movs	r2, #0
 80067fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f856 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d03c      	beq.n	8006888 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	623b      	str	r3, [r7, #32]
   return(result);
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800682c:	633b      	str	r3, [r7, #48]	@ 0x30
 800682e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e6      	bne.n	800680e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3308      	adds	r3, #8
 8006846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3308      	adds	r3, #8
 800685e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006860:	61fa      	str	r2, [r7, #28]
 8006862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	69b9      	ldr	r1, [r7, #24]
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	617b      	str	r3, [r7, #20]
   return(result);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e011      	b.n	80068ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3758      	adds	r7, #88	@ 0x58
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c4:	e04f      	b.n	8006966 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d04b      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fb f847 	bl	8001960 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e04e      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d037      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b80      	cmp	r3, #128	@ 0x80
 80068fa:	d034      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b40      	cmp	r3, #64	@ 0x40
 8006900:	d031      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b08      	cmp	r3, #8
 800690e:	d110      	bne.n	8006932 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2208      	movs	r2, #8
 8006916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f838 	bl	800698e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2208      	movs	r2, #8
 8006922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e029      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800693c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006940:	d111      	bne.n	8006966 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800694a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f81e 	bl	800698e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e00f      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4013      	ands	r3, r2
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	bf0c      	ite	eq
 8006976:	2301      	moveq	r3, #1
 8006978:	2300      	movne	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	429a      	cmp	r2, r3
 8006982:	d0a0      	beq.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800698e:	b480      	push	{r7}
 8006990:	b095      	sub	sp, #84	@ 0x54
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80069b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d118      	bne.n	8006a36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 0310 	bic.w	r3, r3, #16
 8006a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6979      	ldr	r1, [r7, #20]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a4a:	bf00      	nop
 8006a4c:	3754      	adds	r7, #84	@ 0x54
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a56:	b084      	sub	sp, #16
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	f107 001c 	add.w	r0, r7, #28
 8006a64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fa69 	bl	8006f4c <USB_CoreReset>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006a7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a92:	e005      	b.n	8006aa0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aac:	b004      	add	sp, #16
 8006aae:	4770      	bx	lr

08006ab0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f023 0201 	bic.w	r2, r3, #1
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d115      	bne.n	8006b20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b00:	200a      	movs	r0, #10
 8006b02:	f7fa ff39 	bl	8001978 <HAL_Delay>
      ms += 10U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	330a      	adds	r3, #10
 8006b0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fa0f 	bl	8006f30 <USB_GetMode>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d01e      	beq.n	8006b56 <USB_SetCurrentMode+0x84>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b1c:	d9f0      	bls.n	8006b00 <USB_SetCurrentMode+0x2e>
 8006b1e:	e01a      	b.n	8006b56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d115      	bne.n	8006b52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b32:	200a      	movs	r0, #10
 8006b34:	f7fa ff20 	bl	8001978 <HAL_Delay>
      ms += 10U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	330a      	adds	r3, #10
 8006b3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f9f6 	bl	8006f30 <USB_GetMode>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <USB_SetCurrentMode+0x84>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b4e:	d9f0      	bls.n	8006b32 <USB_SetCurrentMode+0x60>
 8006b50:	e001      	b.n	8006b56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e005      	b.n	8006b62 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b5a:	d101      	bne.n	8006b60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	e009      	b.n	8006ba0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3340      	adds	r3, #64	@ 0x40
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2b0e      	cmp	r3, #14
 8006ba4:	d9f2      	bls.n	8006b8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ba6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d11c      	bne.n	8006be8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bbc:	f043 0302 	orr.w	r3, r3, #2
 8006bc0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e005      	b.n	8006bf4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c00:	2103      	movs	r1, #3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f95a 	bl	8006ebc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c08:	2110      	movs	r1, #16
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f8f6 	bl	8006dfc <USB_FlushTxFifo>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f920 	bl	8006e60 <USB_FlushRxFifo>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c30:	461a      	mov	r2, r3
 8006c32:	2300      	movs	r3, #0
 8006c34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c48:	461a      	mov	r2, r3
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	e043      	b.n	8006cdc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c6a:	d118      	bne.n	8006c9e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e013      	b.n	8006cb0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c94:	461a      	mov	r2, r3
 8006c96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	e008      	b.n	8006cb0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006caa:	461a      	mov	r2, r3
 8006cac:	2300      	movs	r3, #0
 8006cae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d3b5      	bcc.n	8006c54 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	e043      	b.n	8006d76 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d04:	d118      	bne.n	8006d38 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	e013      	b.n	8006d4a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e008      	b.n	8006d4a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d44:	461a      	mov	r2, r3
 8006d46:	2300      	movs	r3, #0
 8006d48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d56:	461a      	mov	r2, r3
 8006d58:	2300      	movs	r3, #0
 8006d5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d68:	461a      	mov	r2, r3
 8006d6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	3301      	adds	r3, #1
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d3b5      	bcc.n	8006cee <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d94:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006da2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f043 0210 	orr.w	r2, r3, #16
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699a      	ldr	r2, [r3, #24]
 8006db4:	4b10      	ldr	r3, [pc, #64]	@ (8006df8 <USB_DevInit+0x28c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006dbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f043 0208 	orr.w	r2, r3, #8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006dd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d107      	bne.n	8006de8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006de0:	f043 0304 	orr.w	r3, r3, #4
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006df4:	b004      	add	sp, #16
 8006df6:	4770      	bx	lr
 8006df8:	803c3800 	.word	0x803c3800

08006dfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e16:	d901      	bls.n	8006e1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e01b      	b.n	8006e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	daf2      	bge.n	8006e0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	019b      	lsls	r3, r3, #6
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e40:	d901      	bls.n	8006e46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e006      	b.n	8006e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d0f0      	beq.n	8006e34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e78:	d901      	bls.n	8006e7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e018      	b.n	8006eb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	daf2      	bge.n	8006e6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e9c:	d901      	bls.n	8006ea2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e006      	b.n	8006eb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b10      	cmp	r3, #16
 8006eac:	d0f0      	beq.n	8006e90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	68f9      	ldr	r1, [r7, #12]
 8006ed8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006edc:	4313      	orrs	r3, r2
 8006ede:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f08:	f023 0303 	bic.w	r3, r3, #3
 8006f0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f1c:	f043 0302 	orr.w	r3, r3, #2
 8006f20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f64:	d901      	bls.n	8006f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e01b      	b.n	8006fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	daf2      	bge.n	8006f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f043 0201 	orr.w	r2, r3, #1
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f8e:	d901      	bls.n	8006f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e006      	b.n	8006fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d0f0      	beq.n	8006f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fc0:	2b84      	cmp	r3, #132	@ 0x84
 8006fc2:	d005      	beq.n	8006fd0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006fc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	3303      	adds	r3, #3
 8006fce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fe4:	f3ef 8305 	mrs	r3, IPSR
 8006fe8:	607b      	str	r3, [r7, #4]
  return(result);
 8006fea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf14      	ite	ne
 8006ff0:	2301      	movne	r3, #1
 8006ff2:	2300      	moveq	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007006:	f001 f917 	bl	8008238 <vTaskStartScheduler>
  
  return osOK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	bd80      	pop	{r7, pc}

08007010 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007012:	b089      	sub	sp, #36	@ 0x24
 8007014:	af04      	add	r7, sp, #16
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d020      	beq.n	8007064 <osThreadCreate+0x54>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01c      	beq.n	8007064 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685c      	ldr	r4, [r3, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691e      	ldr	r6, [r3, #16]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ffb6 	bl	8006fae <makeFreeRtosPriority>
 8007042:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800704c:	9202      	str	r2, [sp, #8]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	9100      	str	r1, [sp, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	4632      	mov	r2, r6
 8007056:	4629      	mov	r1, r5
 8007058:	4620      	mov	r0, r4
 800705a:	f000 ff1f 	bl	8007e9c <xTaskCreateStatic>
 800705e:	4603      	mov	r3, r0
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e01c      	b.n	800709e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685c      	ldr	r4, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007070:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff ff98 	bl	8006fae <makeFreeRtosPriority>
 800707e:	4602      	mov	r2, r0
 8007080:	f107 030c 	add.w	r3, r7, #12
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	9200      	str	r2, [sp, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	4632      	mov	r2, r6
 800708c:	4629      	mov	r1, r5
 800708e:	4620      	mov	r0, r4
 8007090:	f000 ff64 	bl	8007f5c <xTaskCreate>
 8007094:	4603      	mov	r3, r0
 8007096:	2b01      	cmp	r3, #1
 8007098:	d001      	beq.n	800709e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	e000      	b.n	80070a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800709e:	68fb      	ldr	r3, [r7, #12]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <osDelay+0x16>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	e000      	b.n	80070c0 <osDelay+0x18>
 80070be:	2301      	movs	r3, #1
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 f883 	bl	80081cc <vTaskDelay>
  
  return osOK;
 80070c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d011      	beq.n	8007106 <osMessageCreate+0x36>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00d      	beq.n	8007106 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6859      	ldr	r1, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	2400      	movs	r4, #0
 80070fc:	9400      	str	r4, [sp, #0]
 80070fe:	f000 f9e1 	bl	80074c4 <xQueueGenericCreateStatic>
 8007102:	4603      	mov	r3, r0
 8007104:	e008      	b.n	8007118 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	4619      	mov	r1, r3
 8007112:	f000 fa54 	bl	80075be <xQueueGenericCreate>
 8007116:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	bd90      	pop	{r4, r7, pc}

08007120 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800712c:	2300      	movs	r3, #0
 800712e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <osMessagePut+0x1e>
    ticks = 1;
 800713a:	2301      	movs	r3, #1
 800713c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800713e:	f7ff ff4e 	bl	8006fde <inHandlerMode>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d018      	beq.n	800717a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007148:	f107 0210 	add.w	r2, r7, #16
 800714c:	f107 0108 	add.w	r1, r7, #8
 8007150:	2300      	movs	r3, #0
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 fb90 	bl	8007878 <xQueueGenericSendFromISR>
 8007158:	4603      	mov	r3, r0
 800715a:	2b01      	cmp	r3, #1
 800715c:	d001      	beq.n	8007162 <osMessagePut+0x42>
      return osErrorOS;
 800715e:	23ff      	movs	r3, #255	@ 0xff
 8007160:	e018      	b.n	8007194 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d014      	beq.n	8007192 <osMessagePut+0x72>
 8007168:	4b0c      	ldr	r3, [pc, #48]	@ (800719c <osMessagePut+0x7c>)
 800716a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	e00b      	b.n	8007192 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800717a:	f107 0108 	add.w	r1, r7, #8
 800717e:	2300      	movs	r3, #0
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fa76 	bl	8007674 <xQueueGenericSend>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d001      	beq.n	8007192 <osMessagePut+0x72>
      return osErrorOS;
 800718e:	23ff      	movs	r3, #255	@ 0xff
 8007190:	e000      	b.n	8007194 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	e000ed04 	.word	0xe000ed04

080071a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b08b      	sub	sp, #44	@ 0x2c
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10a      	bne.n	80071d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80071ba:	2380      	movs	r3, #128	@ 0x80
 80071bc:	617b      	str	r3, [r7, #20]
    return event;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	461c      	mov	r4, r3
 80071c2:	f107 0314 	add.w	r3, r7, #20
 80071c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071ce:	e054      	b.n	800727a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80071d0:	2300      	movs	r3, #0
 80071d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d103      	bne.n	80071e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80071e0:	f04f 33ff 	mov.w	r3, #4294967295
 80071e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e6:	e009      	b.n	80071fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d006      	beq.n	80071fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <osMessageGet+0x5c>
      ticks = 1;
 80071f8:	2301      	movs	r3, #1
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80071fc:	f7ff feef 	bl	8006fde <inHandlerMode>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d01c      	beq.n	8007240 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007206:	f107 0220 	add.w	r2, r7, #32
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	68b8      	ldr	r0, [r7, #8]
 8007214:	f000 fcb0 	bl	8007b78 <xQueueReceiveFromISR>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d102      	bne.n	8007224 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800721e:	2310      	movs	r3, #16
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	e001      	b.n	8007228 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01d      	beq.n	800726a <osMessageGet+0xca>
 800722e:	4b15      	ldr	r3, [pc, #84]	@ (8007284 <osMessageGet+0xe4>)
 8007230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	e014      	b.n	800726a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007240:	f107 0314 	add.w	r3, r7, #20
 8007244:	3304      	adds	r3, #4
 8007246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007248:	4619      	mov	r1, r3
 800724a:	68b8      	ldr	r0, [r7, #8]
 800724c:	f000 fbb2 	bl	80079b4 <xQueueReceive>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d102      	bne.n	800725c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007256:	2310      	movs	r3, #16
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	e006      	b.n	800726a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <osMessageGet+0xc6>
 8007262:	2300      	movs	r3, #0
 8007264:	e000      	b.n	8007268 <osMessageGet+0xc8>
 8007266:	2340      	movs	r3, #64	@ 0x40
 8007268:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	461c      	mov	r4, r3
 800726e:	f107 0314 	add.w	r3, r7, #20
 8007272:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	372c      	adds	r7, #44	@ 0x2c
 800727e:	46bd      	mov	sp, r7
 8007280:	bd90      	pop	{r4, r7, pc}
 8007282:	bf00      	nop
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f103 0208 	add.w	r2, r3, #8
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f04f 32ff 	mov.w	r2, #4294967295
 80072a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f103 0208 	add.w	r2, r3, #8
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f103 0208 	add.w	r2, r3, #8
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d103      	bne.n	800734a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	e00c      	b.n	8007364 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3308      	adds	r3, #8
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	e002      	b.n	8007358 <vListInsert+0x2e>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	d2f6      	bcs.n	8007352 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	601a      	str	r2, [r3, #0]
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6892      	ldr	r2, [r2, #8]
 80073b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6852      	ldr	r2, [r2, #4]
 80073bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d103      	bne.n	80073d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	1e5a      	subs	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800741c:	f001 fd54 	bl	8008ec8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007428:	68f9      	ldr	r1, [r7, #12]
 800742a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744c:	3b01      	subs	r3, #1
 800744e:	68f9      	ldr	r1, [r7, #12]
 8007450:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007452:	fb01 f303 	mul.w	r3, r1, r3
 8007456:	441a      	add	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	22ff      	movs	r2, #255	@ 0xff
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	22ff      	movs	r2, #255	@ 0xff
 8007468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d114      	bne.n	800749c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01a      	beq.n	80074b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3310      	adds	r3, #16
 800747e:	4618      	mov	r0, r3
 8007480:	f001 f924 	bl	80086cc <xTaskRemoveFromEventList>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d012      	beq.n	80074b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800748a:	4b0d      	ldr	r3, [pc, #52]	@ (80074c0 <xQueueGenericReset+0xd0>)
 800748c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	e009      	b.n	80074b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3310      	adds	r3, #16
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff fef1 	bl	8007288 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3324      	adds	r3, #36	@ 0x24
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff feec 	bl	8007288 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074b0:	f001 fd3c 	bl	8008f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074b4:	2301      	movs	r3, #1
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	@ 0x38
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074ea:	bf00      	nop
 80074ec:	bf00      	nop
 80074ee:	e7fd      	b.n	80074ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <xQueueGenericCreateStatic+0x56>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <xQueueGenericCreateStatic+0x5a>
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <xQueueGenericCreateStatic+0x5c>
 800751e:	2300      	movs	r3, #0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	623b      	str	r3, [r7, #32]
}
 8007536:	bf00      	nop
 8007538:	bf00      	nop
 800753a:	e7fd      	b.n	8007538 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <xQueueGenericCreateStatic+0x84>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <xQueueGenericCreateStatic+0x88>
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <xQueueGenericCreateStatic+0x8a>
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	61fb      	str	r3, [r7, #28]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800756a:	2348      	movs	r3, #72	@ 0x48
 800756c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b48      	cmp	r3, #72	@ 0x48
 8007572:	d00b      	beq.n	800758c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	61bb      	str	r3, [r7, #24]
}
 8007586:	bf00      	nop
 8007588:	bf00      	nop
 800758a:	e7fd      	b.n	8007588 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800758c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00d      	beq.n	80075b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80075a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4613      	mov	r3, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 f840 	bl	8007634 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3730      	adds	r7, #48	@ 0x30
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b08a      	sub	sp, #40	@ 0x28
 80075c2:	af02      	add	r7, sp, #8
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	4613      	mov	r3, r2
 80075ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10b      	bne.n	80075ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	613b      	str	r3, [r7, #16]
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	e7fd      	b.n	80075e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	3348      	adds	r3, #72	@ 0x48
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 fd87 	bl	800910c <pvPortMalloc>
 80075fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d011      	beq.n	800762a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	3348      	adds	r3, #72	@ 0x48
 800760e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007618:	79fa      	ldrb	r2, [r7, #7]
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	4613      	mov	r3, r2
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f805 	bl	8007634 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800762a:	69bb      	ldr	r3, [r7, #24]
	}
 800762c:	4618      	mov	r0, r3
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d103      	bne.n	8007650 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e002      	b.n	8007656 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007662:	2101      	movs	r1, #1
 8007664:	69b8      	ldr	r0, [r7, #24]
 8007666:	f7ff fec3 	bl	80073f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08e      	sub	sp, #56	@ 0x38
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007682:	2300      	movs	r3, #0
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10b      	bne.n	80076a8 <xQueueGenericSend+0x34>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076a2:	bf00      	nop
 80076a4:	bf00      	nop
 80076a6:	e7fd      	b.n	80076a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <xQueueGenericSend+0x42>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <xQueueGenericSend+0x46>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <xQueueGenericSend+0x48>
 80076ba:	2300      	movs	r3, #0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10b      	bne.n	80076d8 <xQueueGenericSend+0x64>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	e7fd      	b.n	80076d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d103      	bne.n	80076e6 <xQueueGenericSend+0x72>
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <xQueueGenericSend+0x76>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e000      	b.n	80076ec <xQueueGenericSend+0x78>
 80076ea:	2300      	movs	r3, #0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <xQueueGenericSend+0x94>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	623b      	str	r3, [r7, #32]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007708:	f001 f9a0 	bl	8008a4c <xTaskGetSchedulerState>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <xQueueGenericSend+0xa4>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <xQueueGenericSend+0xa8>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <xQueueGenericSend+0xaa>
 800771c:	2300      	movs	r3, #0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10b      	bne.n	800773a <xQueueGenericSend+0xc6>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	61fb      	str	r3, [r7, #28]
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	e7fd      	b.n	8007736 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800773a:	f001 fbc5 	bl	8008ec8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007746:	429a      	cmp	r2, r3
 8007748:	d302      	bcc.n	8007750 <xQueueGenericSend+0xdc>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d129      	bne.n	80077a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007756:	f000 fa91 	bl	8007c7c <prvCopyDataToQueue>
 800775a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d010      	beq.n	8007786 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	3324      	adds	r3, #36	@ 0x24
 8007768:	4618      	mov	r0, r3
 800776a:	f000 ffaf 	bl	80086cc <xTaskRemoveFromEventList>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d013      	beq.n	800779c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007774:	4b3f      	ldr	r3, [pc, #252]	@ (8007874 <xQueueGenericSend+0x200>)
 8007776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	e00a      	b.n	800779c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800778c:	4b39      	ldr	r3, [pc, #228]	@ (8007874 <xQueueGenericSend+0x200>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800779c:	f001 fbc6 	bl	8008f2c <vPortExitCritical>
				return pdPASS;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e063      	b.n	800786c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077aa:	f001 fbbf 	bl	8008f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e05c      	b.n	800786c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077b8:	f107 0314 	add.w	r3, r7, #20
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 ffe9 	bl	8008794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077c2:	2301      	movs	r3, #1
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077c6:	f001 fbb1 	bl	8008f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077ca:	f000 fd97 	bl	80082fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ce:	f001 fb7b 	bl	8008ec8 <vPortEnterCritical>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077d8:	b25b      	sxtb	r3, r3
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d103      	bne.n	80077e8 <xQueueGenericSend+0x174>
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ee:	b25b      	sxtb	r3, r3
 80077f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f4:	d103      	bne.n	80077fe <xQueueGenericSend+0x18a>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077fe:	f001 fb95 	bl	8008f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007802:	1d3a      	adds	r2, r7, #4
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f000 ffd8 	bl	80087c0 <xTaskCheckForTimeOut>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d124      	bne.n	8007860 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007816:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007818:	f000 fb28 	bl	8007e6c <prvIsQueueFull>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d018      	beq.n	8007854 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	3310      	adds	r3, #16
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4611      	mov	r1, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f000 ff28 	bl	8008680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007830:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007832:	f000 fab3 	bl	8007d9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007836:	f000 fd6f 	bl	8008318 <xTaskResumeAll>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	f47f af7c 	bne.w	800773a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007842:	4b0c      	ldr	r3, [pc, #48]	@ (8007874 <xQueueGenericSend+0x200>)
 8007844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	e772      	b.n	800773a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007856:	f000 faa1 	bl	8007d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800785a:	f000 fd5d 	bl	8008318 <xTaskResumeAll>
 800785e:	e76c      	b.n	800773a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007862:	f000 fa9b 	bl	8007d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007866:	f000 fd57 	bl	8008318 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800786a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800786c:	4618      	mov	r0, r3
 800786e:	3738      	adds	r7, #56	@ 0x38
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b090      	sub	sp, #64	@ 0x40
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800788a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <xQueueGenericSendFromISR+0x3e>
 80078ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <xQueueGenericSendFromISR+0x42>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <xQueueGenericSendFromISR+0x44>
 80078ba:	2300      	movs	r3, #0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10b      	bne.n	80078d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d103      	bne.n	80078e6 <xQueueGenericSendFromISR+0x6e>
 80078de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d101      	bne.n	80078ea <xQueueGenericSendFromISR+0x72>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e000      	b.n	80078ec <xQueueGenericSendFromISR+0x74>
 80078ea:	2300      	movs	r3, #0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10b      	bne.n	8007908 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	623b      	str	r3, [r7, #32]
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	e7fd      	b.n	8007904 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007908:	f001 fbbe 	bl	8009088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800790c:	f3ef 8211 	mrs	r2, BASEPRI
 8007910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	61fa      	str	r2, [r7, #28]
 8007922:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007924:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007930:	429a      	cmp	r2, r3
 8007932:	d302      	bcc.n	800793a <xQueueGenericSendFromISR+0xc2>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d12f      	bne.n	800799a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007948:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007950:	f000 f994 	bl	8007c7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007954:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d112      	bne.n	8007984 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007962:	2b00      	cmp	r3, #0
 8007964:	d016      	beq.n	8007994 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	3324      	adds	r3, #36	@ 0x24
 800796a:	4618      	mov	r0, r3
 800796c:	f000 feae 	bl	80086cc <xTaskRemoveFromEventList>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00e      	beq.n	8007994 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	e007      	b.n	8007994 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007984:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007988:	3301      	adds	r3, #1
 800798a:	b2db      	uxtb	r3, r3
 800798c:	b25a      	sxtb	r2, r3
 800798e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007994:	2301      	movs	r3, #1
 8007996:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007998:	e001      	b.n	800799e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800799a:	2300      	movs	r3, #0
 800799c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800799e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80079a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3740      	adds	r7, #64	@ 0x40
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08c      	sub	sp, #48	@ 0x30
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10b      	bne.n	80079e6 <xQueueReceive+0x32>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	623b      	str	r3, [r7, #32]
}
 80079e0:	bf00      	nop
 80079e2:	bf00      	nop
 80079e4:	e7fd      	b.n	80079e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d103      	bne.n	80079f4 <xQueueReceive+0x40>
 80079ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <xQueueReceive+0x44>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <xQueueReceive+0x46>
 80079f8:	2300      	movs	r3, #0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <xQueueReceive+0x62>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	61fb      	str	r3, [r7, #28]
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	e7fd      	b.n	8007a12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a16:	f001 f819 	bl	8008a4c <xTaskGetSchedulerState>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <xQueueReceive+0x72>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <xQueueReceive+0x76>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <xQueueReceive+0x78>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <xQueueReceive+0x94>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	61bb      	str	r3, [r7, #24]
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a48:	f001 fa3e 	bl	8008ec8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01f      	beq.n	8007a98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a58:	68b9      	ldr	r1, [r7, #8]
 8007a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a5c:	f000 f978 	bl	8007d50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	1e5a      	subs	r2, r3, #1
 8007a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00f      	beq.n	8007a90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	3310      	adds	r3, #16
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fe29 	bl	80086cc <xTaskRemoveFromEventList>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a80:	4b3c      	ldr	r3, [pc, #240]	@ (8007b74 <xQueueReceive+0x1c0>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a90:	f001 fa4c 	bl	8008f2c <vPortExitCritical>
				return pdPASS;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e069      	b.n	8007b6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a9e:	f001 fa45 	bl	8008f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e062      	b.n	8007b6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aac:	f107 0310 	add.w	r3, r7, #16
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fe6f 	bl	8008794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aba:	f001 fa37 	bl	8008f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007abe:	f000 fc1d 	bl	80082fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ac2:	f001 fa01 	bl	8008ec8 <vPortEnterCritical>
 8007ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d103      	bne.n	8007adc <xQueueReceive+0x128>
 8007ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ae2:	b25b      	sxtb	r3, r3
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d103      	bne.n	8007af2 <xQueueReceive+0x13e>
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007af2:	f001 fa1b 	bl	8008f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007af6:	1d3a      	adds	r2, r7, #4
 8007af8:	f107 0310 	add.w	r3, r7, #16
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fe5e 	bl	80087c0 <xTaskCheckForTimeOut>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d123      	bne.n	8007b52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b0c:	f000 f998 	bl	8007e40 <prvIsQueueEmpty>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d017      	beq.n	8007b46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	3324      	adds	r3, #36	@ 0x24
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fdae 	bl	8008680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b26:	f000 f939 	bl	8007d9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b2a:	f000 fbf5 	bl	8008318 <xTaskResumeAll>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d189      	bne.n	8007a48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b34:	4b0f      	ldr	r3, [pc, #60]	@ (8007b74 <xQueueReceive+0x1c0>)
 8007b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	e780      	b.n	8007a48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b48:	f000 f928 	bl	8007d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b4c:	f000 fbe4 	bl	8008318 <xTaskResumeAll>
 8007b50:	e77a      	b.n	8007a48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b54:	f000 f922 	bl	8007d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b58:	f000 fbde 	bl	8008318 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b5e:	f000 f96f 	bl	8007e40 <prvIsQueueEmpty>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f43f af6f 	beq.w	8007a48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3730      	adds	r7, #48	@ 0x30
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	e000ed04 	.word	0xe000ed04

08007b78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08e      	sub	sp, #56	@ 0x38
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10b      	bne.n	8007ba6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	623b      	str	r3, [r7, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <xQueueReceiveFromISR+0x3c>
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <xQueueReceiveFromISR+0x40>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <xQueueReceiveFromISR+0x42>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10b      	bne.n	8007bd6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	61fb      	str	r3, [r7, #28]
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	e7fd      	b.n	8007bd2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bd6:	f001 fa57 	bl	8009088 <vPortValidateInterruptPriority>
	__asm volatile
 8007bda:	f3ef 8211 	mrs	r2, BASEPRI
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	61ba      	str	r2, [r7, #24]
 8007bf0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007bf2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d02f      	beq.n	8007c62 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c10:	f000 f89e 	bl	8007d50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	1e5a      	subs	r2, r3, #1
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d112      	bne.n	8007c4c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d016      	beq.n	8007c5c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	3310      	adds	r3, #16
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fd4a 	bl	80086cc <xTaskRemoveFromEventList>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e007      	b.n	8007c5c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c50:	3301      	adds	r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	b25a      	sxtb	r2, r3
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c60:	e001      	b.n	8007c66 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f383 8811 	msr	BASEPRI, r3
}
 8007c70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3738      	adds	r7, #56	@ 0x38
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10d      	bne.n	8007cb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d14d      	bne.n	8007d3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 feee 	bl	8008a88 <xTaskPriorityDisinherit>
 8007cac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	e043      	b.n	8007d3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d119      	bne.n	8007cf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6858      	ldr	r0, [r3, #4]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	f001 fda1 	bl	800980e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd4:	441a      	add	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d32b      	bcc.n	8007d3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	605a      	str	r2, [r3, #4]
 8007cee:	e026      	b.n	8007d3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	68d8      	ldr	r0, [r3, #12]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	f001 fd87 	bl	800980e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d08:	425b      	negs	r3, r3
 8007d0a:	441a      	add	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d207      	bcs.n	8007d2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	425b      	negs	r3, r3
 8007d26:	441a      	add	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d105      	bne.n	8007d3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007d46:	697b      	ldr	r3, [r7, #20]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d018      	beq.n	8007d94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	441a      	add	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d303      	bcc.n	8007d84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68d9      	ldr	r1, [r3, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6838      	ldr	r0, [r7, #0]
 8007d90:	f001 fd3d 	bl	800980e <memcpy>
	}
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007da4:	f001 f890 	bl	8008ec8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007db0:	e011      	b.n	8007dd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d012      	beq.n	8007de0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3324      	adds	r3, #36	@ 0x24
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fc84 	bl	80086cc <xTaskRemoveFromEventList>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dca:	f000 fd5d 	bl	8008888 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	dce9      	bgt.n	8007db2 <prvUnlockQueue+0x16>
 8007dde:	e000      	b.n	8007de2 <prvUnlockQueue+0x46>
					break;
 8007de0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	22ff      	movs	r2, #255	@ 0xff
 8007de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007dea:	f001 f89f 	bl	8008f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007dee:	f001 f86b 	bl	8008ec8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007df8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dfa:	e011      	b.n	8007e20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d012      	beq.n	8007e2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3310      	adds	r3, #16
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fc5f 	bl	80086cc <xTaskRemoveFromEventList>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e14:	f000 fd38 	bl	8008888 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	dce9      	bgt.n	8007dfc <prvUnlockQueue+0x60>
 8007e28:	e000      	b.n	8007e2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	22ff      	movs	r2, #255	@ 0xff
 8007e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007e34:	f001 f87a 	bl	8008f2c <vPortExitCritical>
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e48:	f001 f83e 	bl	8008ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	e001      	b.n	8007e5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e5e:	f001 f865 	bl	8008f2c <vPortExitCritical>

	return xReturn;
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e74:	f001 f828 	bl	8008ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d102      	bne.n	8007e8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	e001      	b.n	8007e8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e8e:	f001 f84d 	bl	8008f2c <vPortExitCritical>

	return xReturn;
 8007e92:	68fb      	ldr	r3, [r7, #12]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08e      	sub	sp, #56	@ 0x38
 8007ea0:	af04      	add	r7, sp, #16
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	623b      	str	r3, [r7, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	bf00      	nop
 8007ec6:	e7fd      	b.n	8007ec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	61fb      	str	r3, [r7, #28]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ee6:	2354      	movs	r3, #84	@ 0x54
 8007ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b54      	cmp	r3, #84	@ 0x54
 8007eee:	d00b      	beq.n	8007f08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	61bb      	str	r3, [r7, #24]
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <xTaskCreateStatic+0xb2>
 8007f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01b      	beq.n	8007f4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9303      	str	r3, [sp, #12]
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f850 	bl	8007fe6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f48:	f000 f8d6 	bl	80080f8 <prvAddNewTaskToReadyList>
 8007f4c:	e001      	b.n	8007f52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f52:	697b      	ldr	r3, [r7, #20]
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3728      	adds	r7, #40	@ 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08c      	sub	sp, #48	@ 0x30
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 f8cb 	bl	800910c <pvPortMalloc>
 8007f76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00e      	beq.n	8007f9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f7e:	2054      	movs	r0, #84	@ 0x54
 8007f80:	f001 f8c4 	bl	800910c <pvPortMalloc>
 8007f84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f92:	e005      	b.n	8007fa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f94:	6978      	ldr	r0, [r7, #20]
 8007f96:	f001 f987 	bl	80092a8 <vPortFree>
 8007f9a:	e001      	b.n	8007fa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d017      	beq.n	8007fd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	9302      	str	r3, [sp, #8]
 8007fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f80e 	bl	8007fe6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fca:	69f8      	ldr	r0, [r7, #28]
 8007fcc:	f000 f894 	bl	80080f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	e002      	b.n	8007fdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b088      	sub	sp, #32
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	607a      	str	r2, [r7, #4]
 8007ff2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007ffe:	3b01      	subs	r3, #1
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	f023 0307 	bic.w	r3, r3, #7
 800800c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	617b      	str	r3, [r7, #20]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01f      	beq.n	8008076 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008036:	2300      	movs	r3, #0
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e012      	b.n	8008062 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	7819      	ldrb	r1, [r3, #0]
 8008044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4413      	add	r3, r2
 800804a:	3334      	adds	r3, #52	@ 0x34
 800804c:	460a      	mov	r2, r1
 800804e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	4413      	add	r3, r2
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d006      	beq.n	800806a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	3301      	adds	r3, #1
 8008060:	61fb      	str	r3, [r7, #28]
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	2b0f      	cmp	r3, #15
 8008066:	d9e9      	bls.n	800803c <prvInitialiseNewTask+0x56>
 8008068:	e000      	b.n	800806c <prvInitialiseNewTask+0x86>
			{
				break;
 800806a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800806c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008074:	e003      	b.n	800807e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008080:	2b06      	cmp	r3, #6
 8008082:	d901      	bls.n	8008088 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008084:	2306      	movs	r3, #6
 8008086:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800808c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008092:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	2200      	movs	r2, #0
 8008098:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	3304      	adds	r3, #4
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff f912 	bl	80072c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	3318      	adds	r3, #24
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff f90d 	bl	80072c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b6:	f1c3 0207 	rsb	r2, r3, #7
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c6:	2200      	movs	r2, #0
 80080c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	68f9      	ldr	r1, [r7, #12]
 80080d6:	69b8      	ldr	r0, [r7, #24]
 80080d8:	f000 fdc4 	bl	8008c64 <pxPortInitialiseStack>
 80080dc:	4602      	mov	r2, r0
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080ee:	bf00      	nop
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008100:	f000 fee2 	bl	8008ec8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008104:	4b2a      	ldr	r3, [pc, #168]	@ (80081b0 <prvAddNewTaskToReadyList+0xb8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3301      	adds	r3, #1
 800810a:	4a29      	ldr	r2, [pc, #164]	@ (80081b0 <prvAddNewTaskToReadyList+0xb8>)
 800810c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800810e:	4b29      	ldr	r3, [pc, #164]	@ (80081b4 <prvAddNewTaskToReadyList+0xbc>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008116:	4a27      	ldr	r2, [pc, #156]	@ (80081b4 <prvAddNewTaskToReadyList+0xbc>)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800811c:	4b24      	ldr	r3, [pc, #144]	@ (80081b0 <prvAddNewTaskToReadyList+0xb8>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d110      	bne.n	8008146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008124:	f000 fbd4 	bl	80088d0 <prvInitialiseTaskLists>
 8008128:	e00d      	b.n	8008146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800812a:	4b23      	ldr	r3, [pc, #140]	@ (80081b8 <prvAddNewTaskToReadyList+0xc0>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008132:	4b20      	ldr	r3, [pc, #128]	@ (80081b4 <prvAddNewTaskToReadyList+0xbc>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813c:	429a      	cmp	r2, r3
 800813e:	d802      	bhi.n	8008146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008140:	4a1c      	ldr	r2, [pc, #112]	@ (80081b4 <prvAddNewTaskToReadyList+0xbc>)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008146:	4b1d      	ldr	r3, [pc, #116]	@ (80081bc <prvAddNewTaskToReadyList+0xc4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	4a1b      	ldr	r2, [pc, #108]	@ (80081bc <prvAddNewTaskToReadyList+0xc4>)
 800814e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	2201      	movs	r2, #1
 8008156:	409a      	lsls	r2, r3
 8008158:	4b19      	ldr	r3, [pc, #100]	@ (80081c0 <prvAddNewTaskToReadyList+0xc8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4313      	orrs	r3, r2
 800815e:	4a18      	ldr	r2, [pc, #96]	@ (80081c0 <prvAddNewTaskToReadyList+0xc8>)
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4a15      	ldr	r2, [pc, #84]	@ (80081c4 <prvAddNewTaskToReadyList+0xcc>)
 8008170:	441a      	add	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3304      	adds	r3, #4
 8008176:	4619      	mov	r1, r3
 8008178:	4610      	mov	r0, r2
 800817a:	f7ff f8b2 	bl	80072e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800817e:	f000 fed5 	bl	8008f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008182:	4b0d      	ldr	r3, [pc, #52]	@ (80081b8 <prvAddNewTaskToReadyList+0xc0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00e      	beq.n	80081a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800818a:	4b0a      	ldr	r3, [pc, #40]	@ (80081b4 <prvAddNewTaskToReadyList+0xbc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008194:	429a      	cmp	r2, r3
 8008196:	d207      	bcs.n	80081a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008198:	4b0b      	ldr	r3, [pc, #44]	@ (80081c8 <prvAddNewTaskToReadyList+0xd0>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000bf0 	.word	0x20000bf0
 80081b4:	20000af0 	.word	0x20000af0
 80081b8:	20000bfc 	.word	0x20000bfc
 80081bc:	20000c0c 	.word	0x20000c0c
 80081c0:	20000bf8 	.word	0x20000bf8
 80081c4:	20000af4 	.word	0x20000af4
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d018      	beq.n	8008210 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80081de:	4b14      	ldr	r3, [pc, #80]	@ (8008230 <vTaskDelay+0x64>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00b      	beq.n	80081fe <vTaskDelay+0x32>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	60bb      	str	r3, [r7, #8]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081fe:	f000 f87d 	bl	80082fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008202:	2100      	movs	r1, #0
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fcc7 	bl	8008b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800820a:	f000 f885 	bl	8008318 <xTaskResumeAll>
 800820e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d107      	bne.n	8008226 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008216:	4b07      	ldr	r3, [pc, #28]	@ (8008234 <vTaskDelay+0x68>)
 8008218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000c18 	.word	0x20000c18
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08a      	sub	sp, #40	@ 0x28
 800823c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800823e:	2300      	movs	r3, #0
 8008240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008242:	2300      	movs	r3, #0
 8008244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008246:	463a      	mov	r2, r7
 8008248:	1d39      	adds	r1, r7, #4
 800824a:	f107 0308 	add.w	r3, r7, #8
 800824e:	4618      	mov	r0, r3
 8008250:	f7f8 f9a4 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	9202      	str	r2, [sp, #8]
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	2300      	movs	r3, #0
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	2300      	movs	r3, #0
 8008264:	460a      	mov	r2, r1
 8008266:	491f      	ldr	r1, [pc, #124]	@ (80082e4 <vTaskStartScheduler+0xac>)
 8008268:	481f      	ldr	r0, [pc, #124]	@ (80082e8 <vTaskStartScheduler+0xb0>)
 800826a:	f7ff fe17 	bl	8007e9c <xTaskCreateStatic>
 800826e:	4603      	mov	r3, r0
 8008270:	4a1e      	ldr	r2, [pc, #120]	@ (80082ec <vTaskStartScheduler+0xb4>)
 8008272:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008274:	4b1d      	ldr	r3, [pc, #116]	@ (80082ec <vTaskStartScheduler+0xb4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	e001      	b.n	8008286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008282:	2300      	movs	r3, #0
 8008284:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d116      	bne.n	80082ba <vTaskStartScheduler+0x82>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	613b      	str	r3, [r7, #16]
}
 800829e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082a0:	4b13      	ldr	r3, [pc, #76]	@ (80082f0 <vTaskStartScheduler+0xb8>)
 80082a2:	f04f 32ff 	mov.w	r2, #4294967295
 80082a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082a8:	4b12      	ldr	r3, [pc, #72]	@ (80082f4 <vTaskStartScheduler+0xbc>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082ae:	4b12      	ldr	r3, [pc, #72]	@ (80082f8 <vTaskStartScheduler+0xc0>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082b4:	f000 fd64 	bl	8008d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082b8:	e00f      	b.n	80082da <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d10b      	bne.n	80082da <vTaskStartScheduler+0xa2>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	60fb      	str	r3, [r7, #12]
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	e7fd      	b.n	80082d6 <vTaskStartScheduler+0x9e>
}
 80082da:	bf00      	nop
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	0800a3f0 	.word	0x0800a3f0
 80082e8:	080088a1 	.word	0x080088a1
 80082ec:	20000c14 	.word	0x20000c14
 80082f0:	20000c10 	.word	0x20000c10
 80082f4:	20000bfc 	.word	0x20000bfc
 80082f8:	20000bf4 	.word	0x20000bf4

080082fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008300:	4b04      	ldr	r3, [pc, #16]	@ (8008314 <vTaskSuspendAll+0x18>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	4a03      	ldr	r2, [pc, #12]	@ (8008314 <vTaskSuspendAll+0x18>)
 8008308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800830a:	bf00      	nop
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	20000c18 	.word	0x20000c18

08008318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008326:	4b42      	ldr	r3, [pc, #264]	@ (8008430 <xTaskResumeAll+0x118>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <xTaskResumeAll+0x2e>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	603b      	str	r3, [r7, #0]
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	e7fd      	b.n	8008342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008346:	f000 fdbf 	bl	8008ec8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800834a:	4b39      	ldr	r3, [pc, #228]	@ (8008430 <xTaskResumeAll+0x118>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3b01      	subs	r3, #1
 8008350:	4a37      	ldr	r2, [pc, #220]	@ (8008430 <xTaskResumeAll+0x118>)
 8008352:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008354:	4b36      	ldr	r3, [pc, #216]	@ (8008430 <xTaskResumeAll+0x118>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d161      	bne.n	8008420 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800835c:	4b35      	ldr	r3, [pc, #212]	@ (8008434 <xTaskResumeAll+0x11c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d05d      	beq.n	8008420 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008364:	e02e      	b.n	80083c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008366:	4b34      	ldr	r3, [pc, #208]	@ (8008438 <xTaskResumeAll+0x120>)
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3318      	adds	r3, #24
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff f812 	bl	800739c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3304      	adds	r3, #4
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff f80d 	bl	800739c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008386:	2201      	movs	r2, #1
 8008388:	409a      	lsls	r2, r3
 800838a:	4b2c      	ldr	r3, [pc, #176]	@ (800843c <xTaskResumeAll+0x124>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4313      	orrs	r3, r2
 8008390:	4a2a      	ldr	r2, [pc, #168]	@ (800843c <xTaskResumeAll+0x124>)
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4a27      	ldr	r2, [pc, #156]	@ (8008440 <xTaskResumeAll+0x128>)
 80083a2:	441a      	add	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4610      	mov	r0, r2
 80083ac:	f7fe ff99 	bl	80072e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b4:	4b23      	ldr	r3, [pc, #140]	@ (8008444 <xTaskResumeAll+0x12c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d302      	bcc.n	80083c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80083be:	4b22      	ldr	r3, [pc, #136]	@ (8008448 <xTaskResumeAll+0x130>)
 80083c0:	2201      	movs	r2, #1
 80083c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008438 <xTaskResumeAll+0x120>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1cc      	bne.n	8008366 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083d2:	f000 fb1b 	bl	8008a0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80083d6:	4b1d      	ldr	r3, [pc, #116]	@ (800844c <xTaskResumeAll+0x134>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d010      	beq.n	8008404 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083e2:	f000 f837 	bl	8008454 <xTaskIncrementTick>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80083ec:	4b16      	ldr	r3, [pc, #88]	@ (8008448 <xTaskResumeAll+0x130>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1f1      	bne.n	80083e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80083fe:	4b13      	ldr	r3, [pc, #76]	@ (800844c <xTaskResumeAll+0x134>)
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008404:	4b10      	ldr	r3, [pc, #64]	@ (8008448 <xTaskResumeAll+0x130>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008410:	4b0f      	ldr	r3, [pc, #60]	@ (8008450 <xTaskResumeAll+0x138>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008420:	f000 fd84 	bl	8008f2c <vPortExitCritical>

	return xAlreadyYielded;
 8008424:	68bb      	ldr	r3, [r7, #8]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20000c18 	.word	0x20000c18
 8008434:	20000bf0 	.word	0x20000bf0
 8008438:	20000bb0 	.word	0x20000bb0
 800843c:	20000bf8 	.word	0x20000bf8
 8008440:	20000af4 	.word	0x20000af4
 8008444:	20000af0 	.word	0x20000af0
 8008448:	20000c04 	.word	0x20000c04
 800844c:	20000c00 	.word	0x20000c00
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800845a:	2300      	movs	r3, #0
 800845c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800845e:	4b4f      	ldr	r3, [pc, #316]	@ (800859c <xTaskIncrementTick+0x148>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f040 808f 	bne.w	8008586 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008468:	4b4d      	ldr	r3, [pc, #308]	@ (80085a0 <xTaskIncrementTick+0x14c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3301      	adds	r3, #1
 800846e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008470:	4a4b      	ldr	r2, [pc, #300]	@ (80085a0 <xTaskIncrementTick+0x14c>)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d121      	bne.n	80084c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800847c:	4b49      	ldr	r3, [pc, #292]	@ (80085a4 <xTaskIncrementTick+0x150>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00b      	beq.n	800849e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	603b      	str	r3, [r7, #0]
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	e7fd      	b.n	800849a <xTaskIncrementTick+0x46>
 800849e:	4b41      	ldr	r3, [pc, #260]	@ (80085a4 <xTaskIncrementTick+0x150>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	4b40      	ldr	r3, [pc, #256]	@ (80085a8 <xTaskIncrementTick+0x154>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a3e      	ldr	r2, [pc, #248]	@ (80085a4 <xTaskIncrementTick+0x150>)
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	4a3e      	ldr	r2, [pc, #248]	@ (80085a8 <xTaskIncrementTick+0x154>)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	4b3e      	ldr	r3, [pc, #248]	@ (80085ac <xTaskIncrementTick+0x158>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3301      	adds	r3, #1
 80084b8:	4a3c      	ldr	r2, [pc, #240]	@ (80085ac <xTaskIncrementTick+0x158>)
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	f000 faa6 	bl	8008a0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084c0:	4b3b      	ldr	r3, [pc, #236]	@ (80085b0 <xTaskIncrementTick+0x15c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d348      	bcc.n	800855c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ca:	4b36      	ldr	r3, [pc, #216]	@ (80085a4 <xTaskIncrementTick+0x150>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d104      	bne.n	80084de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d4:	4b36      	ldr	r3, [pc, #216]	@ (80085b0 <xTaskIncrementTick+0x15c>)
 80084d6:	f04f 32ff 	mov.w	r2, #4294967295
 80084da:	601a      	str	r2, [r3, #0]
					break;
 80084dc:	e03e      	b.n	800855c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084de:	4b31      	ldr	r3, [pc, #196]	@ (80085a4 <xTaskIncrementTick+0x150>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d203      	bcs.n	80084fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084f6:	4a2e      	ldr	r2, [pc, #184]	@ (80085b0 <xTaskIncrementTick+0x15c>)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084fc:	e02e      	b.n	800855c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	3304      	adds	r3, #4
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe ff4a 	bl	800739c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850c:	2b00      	cmp	r3, #0
 800850e:	d004      	beq.n	800851a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	3318      	adds	r3, #24
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe ff41 	bl	800739c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851e:	2201      	movs	r2, #1
 8008520:	409a      	lsls	r2, r3
 8008522:	4b24      	ldr	r3, [pc, #144]	@ (80085b4 <xTaskIncrementTick+0x160>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4313      	orrs	r3, r2
 8008528:	4a22      	ldr	r2, [pc, #136]	@ (80085b4 <xTaskIncrementTick+0x160>)
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4a1f      	ldr	r2, [pc, #124]	@ (80085b8 <xTaskIncrementTick+0x164>)
 800853a:	441a      	add	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	3304      	adds	r3, #4
 8008540:	4619      	mov	r1, r3
 8008542:	4610      	mov	r0, r2
 8008544:	f7fe fecd 	bl	80072e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854c:	4b1b      	ldr	r3, [pc, #108]	@ (80085bc <xTaskIncrementTick+0x168>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008552:	429a      	cmp	r2, r3
 8008554:	d3b9      	bcc.n	80084ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008556:	2301      	movs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800855a:	e7b6      	b.n	80084ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800855c:	4b17      	ldr	r3, [pc, #92]	@ (80085bc <xTaskIncrementTick+0x168>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008562:	4915      	ldr	r1, [pc, #84]	@ (80085b8 <xTaskIncrementTick+0x164>)
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d901      	bls.n	8008578 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008578:	4b11      	ldr	r3, [pc, #68]	@ (80085c0 <xTaskIncrementTick+0x16c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	e004      	b.n	8008590 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008586:	4b0f      	ldr	r3, [pc, #60]	@ (80085c4 <xTaskIncrementTick+0x170>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	4a0d      	ldr	r2, [pc, #52]	@ (80085c4 <xTaskIncrementTick+0x170>)
 800858e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008590:	697b      	ldr	r3, [r7, #20]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000c18 	.word	0x20000c18
 80085a0:	20000bf4 	.word	0x20000bf4
 80085a4:	20000ba8 	.word	0x20000ba8
 80085a8:	20000bac 	.word	0x20000bac
 80085ac:	20000c08 	.word	0x20000c08
 80085b0:	20000c10 	.word	0x20000c10
 80085b4:	20000bf8 	.word	0x20000bf8
 80085b8:	20000af4 	.word	0x20000af4
 80085bc:	20000af0 	.word	0x20000af0
 80085c0:	20000c04 	.word	0x20000c04
 80085c4:	20000c00 	.word	0x20000c00

080085c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085ce:	4b27      	ldr	r3, [pc, #156]	@ (800866c <vTaskSwitchContext+0xa4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085d6:	4b26      	ldr	r3, [pc, #152]	@ (8008670 <vTaskSwitchContext+0xa8>)
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085dc:	e040      	b.n	8008660 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80085de:	4b24      	ldr	r3, [pc, #144]	@ (8008670 <vTaskSwitchContext+0xa8>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e4:	4b23      	ldr	r3, [pc, #140]	@ (8008674 <vTaskSwitchContext+0xac>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	fab3 f383 	clz	r3, r3
 80085f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	f1c3 031f 	rsb	r3, r3, #31
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	491f      	ldr	r1, [pc, #124]	@ (8008678 <vTaskSwitchContext+0xb0>)
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10b      	bne.n	8008626 <vTaskSwitchContext+0x5e>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	607b      	str	r3, [r7, #4]
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	e7fd      	b.n	8008622 <vTaskSwitchContext+0x5a>
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4a11      	ldr	r2, [pc, #68]	@ (8008678 <vTaskSwitchContext+0xb0>)
 8008632:	4413      	add	r3, r2
 8008634:	613b      	str	r3, [r7, #16]
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	605a      	str	r2, [r3, #4]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	3308      	adds	r3, #8
 8008648:	429a      	cmp	r2, r3
 800864a:	d104      	bne.n	8008656 <vTaskSwitchContext+0x8e>
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	605a      	str	r2, [r3, #4]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	4a07      	ldr	r2, [pc, #28]	@ (800867c <vTaskSwitchContext+0xb4>)
 800865e:	6013      	str	r3, [r2, #0]
}
 8008660:	bf00      	nop
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	20000c18 	.word	0x20000c18
 8008670:	20000c04 	.word	0x20000c04
 8008674:	20000bf8 	.word	0x20000bf8
 8008678:	20000af4 	.word	0x20000af4
 800867c:	20000af0 	.word	0x20000af0

08008680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10b      	bne.n	80086a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	60fb      	str	r3, [r7, #12]
}
 80086a2:	bf00      	nop
 80086a4:	bf00      	nop
 80086a6:	e7fd      	b.n	80086a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086a8:	4b07      	ldr	r3, [pc, #28]	@ (80086c8 <vTaskPlaceOnEventList+0x48>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3318      	adds	r3, #24
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fe fe3a 	bl	800732a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086b6:	2101      	movs	r1, #1
 80086b8:	6838      	ldr	r0, [r7, #0]
 80086ba:	f000 fa6d 	bl	8008b98 <prvAddCurrentTaskToDelayedList>
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000af0 	.word	0x20000af0

080086cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10b      	bne.n	80086fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	60fb      	str	r3, [r7, #12]
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	e7fd      	b.n	80086f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	3318      	adds	r3, #24
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fe4c 	bl	800739c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008704:	4b1d      	ldr	r3, [pc, #116]	@ (800877c <xTaskRemoveFromEventList+0xb0>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d11c      	bne.n	8008746 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	3304      	adds	r3, #4
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe fe43 	bl	800739c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871a:	2201      	movs	r2, #1
 800871c:	409a      	lsls	r2, r3
 800871e:	4b18      	ldr	r3, [pc, #96]	@ (8008780 <xTaskRemoveFromEventList+0xb4>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4313      	orrs	r3, r2
 8008724:	4a16      	ldr	r2, [pc, #88]	@ (8008780 <xTaskRemoveFromEventList+0xb4>)
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4a13      	ldr	r2, [pc, #76]	@ (8008784 <xTaskRemoveFromEventList+0xb8>)
 8008736:	441a      	add	r2, r3
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	3304      	adds	r3, #4
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f7fe fdcf 	bl	80072e2 <vListInsertEnd>
 8008744:	e005      	b.n	8008752 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	3318      	adds	r3, #24
 800874a:	4619      	mov	r1, r3
 800874c:	480e      	ldr	r0, [pc, #56]	@ (8008788 <xTaskRemoveFromEventList+0xbc>)
 800874e:	f7fe fdc8 	bl	80072e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008756:	4b0d      	ldr	r3, [pc, #52]	@ (800878c <xTaskRemoveFromEventList+0xc0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875c:	429a      	cmp	r2, r3
 800875e:	d905      	bls.n	800876c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008764:	4b0a      	ldr	r3, [pc, #40]	@ (8008790 <xTaskRemoveFromEventList+0xc4>)
 8008766:	2201      	movs	r2, #1
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	e001      	b.n	8008770 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008770:	697b      	ldr	r3, [r7, #20]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20000c18 	.word	0x20000c18
 8008780:	20000bf8 	.word	0x20000bf8
 8008784:	20000af4 	.word	0x20000af4
 8008788:	20000bb0 	.word	0x20000bb0
 800878c:	20000af0 	.word	0x20000af0
 8008790:	20000c04 	.word	0x20000c04

08008794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800879c:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <vTaskInternalSetTimeOutState+0x24>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087a4:	4b05      	ldr	r3, [pc, #20]	@ (80087bc <vTaskInternalSetTimeOutState+0x28>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	605a      	str	r2, [r3, #4]
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	20000c08 	.word	0x20000c08
 80087bc:	20000bf4 	.word	0x20000bf4

080087c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10b      	bne.n	80087e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	613b      	str	r3, [r7, #16]
}
 80087e2:	bf00      	nop
 80087e4:	bf00      	nop
 80087e6:	e7fd      	b.n	80087e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10b      	bne.n	8008806 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	60fb      	str	r3, [r7, #12]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008806:	f000 fb5f 	bl	8008ec8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800880a:	4b1d      	ldr	r3, [pc, #116]	@ (8008880 <xTaskCheckForTimeOut+0xc0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008822:	d102      	bne.n	800882a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008824:	2300      	movs	r3, #0
 8008826:	61fb      	str	r3, [r7, #28]
 8008828:	e023      	b.n	8008872 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	4b15      	ldr	r3, [pc, #84]	@ (8008884 <xTaskCheckForTimeOut+0xc4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d007      	beq.n	8008846 <xTaskCheckForTimeOut+0x86>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	429a      	cmp	r2, r3
 800883e:	d302      	bcc.n	8008846 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008840:	2301      	movs	r3, #1
 8008842:	61fb      	str	r3, [r7, #28]
 8008844:	e015      	b.n	8008872 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	429a      	cmp	r2, r3
 800884e:	d20b      	bcs.n	8008868 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	1ad2      	subs	r2, r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff ff99 	bl	8008794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
 8008866:	e004      	b.n	8008872 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800886e:	2301      	movs	r3, #1
 8008870:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008872:	f000 fb5b 	bl	8008f2c <vPortExitCritical>

	return xReturn;
 8008876:	69fb      	ldr	r3, [r7, #28]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3720      	adds	r7, #32
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000bf4 	.word	0x20000bf4
 8008884:	20000c08 	.word	0x20000c08

08008888 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800888c:	4b03      	ldr	r3, [pc, #12]	@ (800889c <vTaskMissedYield+0x14>)
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]
}
 8008892:	bf00      	nop
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20000c04 	.word	0x20000c04

080088a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088a8:	f000 f852 	bl	8008950 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088ac:	4b06      	ldr	r3, [pc, #24]	@ (80088c8 <prvIdleTask+0x28>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d9f9      	bls.n	80088a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088b4:	4b05      	ldr	r3, [pc, #20]	@ (80088cc <prvIdleTask+0x2c>)
 80088b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088c4:	e7f0      	b.n	80088a8 <prvIdleTask+0x8>
 80088c6:	bf00      	nop
 80088c8:	20000af4 	.word	0x20000af4
 80088cc:	e000ed04 	.word	0xe000ed04

080088d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088d6:	2300      	movs	r3, #0
 80088d8:	607b      	str	r3, [r7, #4]
 80088da:	e00c      	b.n	80088f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4a12      	ldr	r2, [pc, #72]	@ (8008930 <prvInitialiseTaskLists+0x60>)
 80088e8:	4413      	add	r3, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fccc 	bl	8007288 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3301      	adds	r3, #1
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b06      	cmp	r3, #6
 80088fa:	d9ef      	bls.n	80088dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088fc:	480d      	ldr	r0, [pc, #52]	@ (8008934 <prvInitialiseTaskLists+0x64>)
 80088fe:	f7fe fcc3 	bl	8007288 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008902:	480d      	ldr	r0, [pc, #52]	@ (8008938 <prvInitialiseTaskLists+0x68>)
 8008904:	f7fe fcc0 	bl	8007288 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008908:	480c      	ldr	r0, [pc, #48]	@ (800893c <prvInitialiseTaskLists+0x6c>)
 800890a:	f7fe fcbd 	bl	8007288 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800890e:	480c      	ldr	r0, [pc, #48]	@ (8008940 <prvInitialiseTaskLists+0x70>)
 8008910:	f7fe fcba 	bl	8007288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008914:	480b      	ldr	r0, [pc, #44]	@ (8008944 <prvInitialiseTaskLists+0x74>)
 8008916:	f7fe fcb7 	bl	8007288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800891a:	4b0b      	ldr	r3, [pc, #44]	@ (8008948 <prvInitialiseTaskLists+0x78>)
 800891c:	4a05      	ldr	r2, [pc, #20]	@ (8008934 <prvInitialiseTaskLists+0x64>)
 800891e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008920:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <prvInitialiseTaskLists+0x7c>)
 8008922:	4a05      	ldr	r2, [pc, #20]	@ (8008938 <prvInitialiseTaskLists+0x68>)
 8008924:	601a      	str	r2, [r3, #0]
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000af4 	.word	0x20000af4
 8008934:	20000b80 	.word	0x20000b80
 8008938:	20000b94 	.word	0x20000b94
 800893c:	20000bb0 	.word	0x20000bb0
 8008940:	20000bc4 	.word	0x20000bc4
 8008944:	20000bdc 	.word	0x20000bdc
 8008948:	20000ba8 	.word	0x20000ba8
 800894c:	20000bac 	.word	0x20000bac

08008950 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008956:	e019      	b.n	800898c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008958:	f000 fab6 	bl	8008ec8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800895c:	4b10      	ldr	r3, [pc, #64]	@ (80089a0 <prvCheckTasksWaitingTermination+0x50>)
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3304      	adds	r3, #4
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fd17 	bl	800739c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800896e:	4b0d      	ldr	r3, [pc, #52]	@ (80089a4 <prvCheckTasksWaitingTermination+0x54>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3b01      	subs	r3, #1
 8008974:	4a0b      	ldr	r2, [pc, #44]	@ (80089a4 <prvCheckTasksWaitingTermination+0x54>)
 8008976:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008978:	4b0b      	ldr	r3, [pc, #44]	@ (80089a8 <prvCheckTasksWaitingTermination+0x58>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3b01      	subs	r3, #1
 800897e:	4a0a      	ldr	r2, [pc, #40]	@ (80089a8 <prvCheckTasksWaitingTermination+0x58>)
 8008980:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008982:	f000 fad3 	bl	8008f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f810 	bl	80089ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800898c:	4b06      	ldr	r3, [pc, #24]	@ (80089a8 <prvCheckTasksWaitingTermination+0x58>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e1      	bne.n	8008958 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000bc4 	.word	0x20000bc4
 80089a4:	20000bf0 	.word	0x20000bf0
 80089a8:	20000bd8 	.word	0x20000bd8

080089ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d108      	bne.n	80089d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fc70 	bl	80092a8 <vPortFree>
				vPortFree( pxTCB );
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc6d 	bl	80092a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089ce:	e019      	b.n	8008a04 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d103      	bne.n	80089e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fc64 	bl	80092a8 <vPortFree>
	}
 80089e0:	e010      	b.n	8008a04 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d00b      	beq.n	8008a04 <prvDeleteTCB+0x58>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	60fb      	str	r3, [r7, #12]
}
 80089fe:	bf00      	nop
 8008a00:	bf00      	nop
 8008a02:	e7fd      	b.n	8008a00 <prvDeleteTCB+0x54>
	}
 8008a04:	bf00      	nop
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a12:	4b0c      	ldr	r3, [pc, #48]	@ (8008a44 <prvResetNextTaskUnblockTime+0x38>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a48 <prvResetNextTaskUnblockTime+0x3c>)
 8008a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a24:	e008      	b.n	8008a38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a26:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <prvResetNextTaskUnblockTime+0x38>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4a04      	ldr	r2, [pc, #16]	@ (8008a48 <prvResetNextTaskUnblockTime+0x3c>)
 8008a36:	6013      	str	r3, [r2, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	20000ba8 	.word	0x20000ba8
 8008a48:	20000c10 	.word	0x20000c10

08008a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a52:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <xTaskGetSchedulerState+0x34>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	607b      	str	r3, [r7, #4]
 8008a5e:	e008      	b.n	8008a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a60:	4b08      	ldr	r3, [pc, #32]	@ (8008a84 <xTaskGetSchedulerState+0x38>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d102      	bne.n	8008a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	607b      	str	r3, [r7, #4]
 8008a6c:	e001      	b.n	8008a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a72:	687b      	ldr	r3, [r7, #4]
	}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	20000bfc 	.word	0x20000bfc
 8008a84:	20000c18 	.word	0x20000c18

08008a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d070      	beq.n	8008b80 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8008b8c <xTaskPriorityDisinherit+0x104>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d00b      	beq.n	8008ac0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60fb      	str	r3, [r7, #12]
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	e7fd      	b.n	8008abc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10b      	bne.n	8008ae0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	60bb      	str	r3, [r7, #8]
}
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ae4:	1e5a      	subs	r2, r3, #1
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d044      	beq.n	8008b80 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d140      	bne.n	8008b80 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	3304      	adds	r3, #4
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe fc4a 	bl	800739c <uxListRemove>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d115      	bne.n	8008b3a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b12:	491f      	ldr	r1, [pc, #124]	@ (8008b90 <xTaskPriorityDisinherit+0x108>)
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10a      	bne.n	8008b3a <xTaskPriorityDisinherit+0xb2>
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	2201      	movs	r2, #1
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43da      	mvns	r2, r3
 8008b30:	4b18      	ldr	r3, [pc, #96]	@ (8008b94 <xTaskPriorityDisinherit+0x10c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4013      	ands	r3, r2
 8008b36:	4a17      	ldr	r2, [pc, #92]	@ (8008b94 <xTaskPriorityDisinherit+0x10c>)
 8008b38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	f1c3 0207 	rsb	r2, r3, #7
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b52:	2201      	movs	r2, #1
 8008b54:	409a      	lsls	r2, r3
 8008b56:	4b0f      	ldr	r3, [pc, #60]	@ (8008b94 <xTaskPriorityDisinherit+0x10c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b94 <xTaskPriorityDisinherit+0x10c>)
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4a08      	ldr	r2, [pc, #32]	@ (8008b90 <xTaskPriorityDisinherit+0x108>)
 8008b6e:	441a      	add	r2, r3
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f7fe fbb3 	bl	80072e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b80:	697b      	ldr	r3, [r7, #20]
	}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000af0 	.word	0x20000af0
 8008b90:	20000af4 	.word	0x20000af4
 8008b94:	20000bf8 	.word	0x20000bf8

08008b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ba2:	4b29      	ldr	r3, [pc, #164]	@ (8008c48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ba8:	4b28      	ldr	r3, [pc, #160]	@ (8008c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fbf4 	bl	800739c <uxListRemove>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008bba:	4b24      	ldr	r3, [pc, #144]	@ (8008c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc6:	43da      	mvns	r2, r3
 8008bc8:	4b21      	ldr	r3, [pc, #132]	@ (8008c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	4a20      	ldr	r2, [pc, #128]	@ (8008c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008bd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd8:	d10a      	bne.n	8008bf0 <prvAddCurrentTaskToDelayedList+0x58>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4619      	mov	r1, r3
 8008be8:	481a      	ldr	r0, [pc, #104]	@ (8008c54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008bea:	f7fe fb7a 	bl	80072e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bee:	e026      	b.n	8008c3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bf8:	4b14      	ldr	r3, [pc, #80]	@ (8008c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d209      	bcs.n	8008c1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c08:	4b13      	ldr	r3, [pc, #76]	@ (8008c58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4619      	mov	r1, r3
 8008c14:	4610      	mov	r0, r2
 8008c16:	f7fe fb88 	bl	800732a <vListInsert>
}
 8008c1a:	e010      	b.n	8008c3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f7fe fb7e 	bl	800732a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d202      	bcs.n	8008c3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c38:	4a09      	ldr	r2, [pc, #36]	@ (8008c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	6013      	str	r3, [r2, #0]
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20000bf4 	.word	0x20000bf4
 8008c4c:	20000af0 	.word	0x20000af0
 8008c50:	20000bf8 	.word	0x20000bf8
 8008c54:	20000bdc 	.word	0x20000bdc
 8008c58:	20000bac 	.word	0x20000bac
 8008c5c:	20000ba8 	.word	0x20000ba8
 8008c60:	20000c10 	.word	0x20000c10

08008c64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3b04      	subs	r3, #4
 8008c74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3b04      	subs	r3, #4
 8008c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f023 0201 	bic.w	r2, r3, #1
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3b04      	subs	r3, #4
 8008c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c94:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc8 <pxPortInitialiseStack+0x64>)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3b14      	subs	r3, #20
 8008c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3b04      	subs	r3, #4
 8008caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f06f 0202 	mvn.w	r2, #2
 8008cb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3b20      	subs	r3, #32
 8008cb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cba:	68fb      	ldr	r3, [r7, #12]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	08008ccd 	.word	0x08008ccd

08008ccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cd6:	4b13      	ldr	r3, [pc, #76]	@ (8008d24 <prvTaskExitError+0x58>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d00b      	beq.n	8008cf8 <prvTaskExitError+0x2c>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	60fb      	str	r3, [r7, #12]
}
 8008cf2:	bf00      	nop
 8008cf4:	bf00      	nop
 8008cf6:	e7fd      	b.n	8008cf4 <prvTaskExitError+0x28>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	60bb      	str	r3, [r7, #8]
}
 8008d0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d0c:	bf00      	nop
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0fc      	beq.n	8008d0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	2000000c 	.word	0x2000000c
	...

08008d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d30:	4b07      	ldr	r3, [pc, #28]	@ (8008d50 <pxCurrentTCBConst2>)
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	6808      	ldr	r0, [r1, #0]
 8008d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	f380 8809 	msr	PSP, r0
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f04f 0000 	mov.w	r0, #0
 8008d46:	f380 8811 	msr	BASEPRI, r0
 8008d4a:	4770      	bx	lr
 8008d4c:	f3af 8000 	nop.w

08008d50 <pxCurrentTCBConst2>:
 8008d50:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop

08008d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d58:	4808      	ldr	r0, [pc, #32]	@ (8008d7c <prvPortStartFirstTask+0x24>)
 8008d5a:	6800      	ldr	r0, [r0, #0]
 8008d5c:	6800      	ldr	r0, [r0, #0]
 8008d5e:	f380 8808 	msr	MSP, r0
 8008d62:	f04f 0000 	mov.w	r0, #0
 8008d66:	f380 8814 	msr	CONTROL, r0
 8008d6a:	b662      	cpsie	i
 8008d6c:	b661      	cpsie	f
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	df00      	svc	0
 8008d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d7a:	bf00      	nop
 8008d7c:	e000ed08 	.word	0xe000ed08

08008d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d86:	4b47      	ldr	r3, [pc, #284]	@ (8008ea4 <xPortStartScheduler+0x124>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a47      	ldr	r2, [pc, #284]	@ (8008ea8 <xPortStartScheduler+0x128>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d10b      	bne.n	8008da8 <xPortStartScheduler+0x28>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	60fb      	str	r3, [r7, #12]
}
 8008da2:	bf00      	nop
 8008da4:	bf00      	nop
 8008da6:	e7fd      	b.n	8008da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008da8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ea4 <xPortStartScheduler+0x124>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a3f      	ldr	r2, [pc, #252]	@ (8008eac <xPortStartScheduler+0x12c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d10b      	bne.n	8008dca <xPortStartScheduler+0x4a>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	613b      	str	r3, [r7, #16]
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	e7fd      	b.n	8008dc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dca:	4b39      	ldr	r3, [pc, #228]	@ (8008eb0 <xPortStartScheduler+0x130>)
 8008dcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	22ff      	movs	r2, #255	@ 0xff
 8008dda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	4b31      	ldr	r3, [pc, #196]	@ (8008eb4 <xPortStartScheduler+0x134>)
 8008df0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008df2:	4b31      	ldr	r3, [pc, #196]	@ (8008eb8 <xPortStartScheduler+0x138>)
 8008df4:	2207      	movs	r2, #7
 8008df6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008df8:	e009      	b.n	8008e0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8008eb8 <xPortStartScheduler+0x138>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	4a2d      	ldr	r2, [pc, #180]	@ (8008eb8 <xPortStartScheduler+0x138>)
 8008e02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e16:	2b80      	cmp	r3, #128	@ 0x80
 8008e18:	d0ef      	beq.n	8008dfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e1a:	4b27      	ldr	r3, [pc, #156]	@ (8008eb8 <xPortStartScheduler+0x138>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f1c3 0307 	rsb	r3, r3, #7
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	d00b      	beq.n	8008e3e <xPortStartScheduler+0xbe>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	60bb      	str	r3, [r7, #8]
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	e7fd      	b.n	8008e3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008eb8 <xPortStartScheduler+0x138>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	021b      	lsls	r3, r3, #8
 8008e44:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb8 <xPortStartScheduler+0x138>)
 8008e46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e48:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb8 <xPortStartScheduler+0x138>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e50:	4a19      	ldr	r2, [pc, #100]	@ (8008eb8 <xPortStartScheduler+0x138>)
 8008e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e5c:	4b17      	ldr	r3, [pc, #92]	@ (8008ebc <xPortStartScheduler+0x13c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a16      	ldr	r2, [pc, #88]	@ (8008ebc <xPortStartScheduler+0x13c>)
 8008e62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e68:	4b14      	ldr	r3, [pc, #80]	@ (8008ebc <xPortStartScheduler+0x13c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a13      	ldr	r2, [pc, #76]	@ (8008ebc <xPortStartScheduler+0x13c>)
 8008e6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008e72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e74:	f000 f8da 	bl	800902c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e78:	4b11      	ldr	r3, [pc, #68]	@ (8008ec0 <xPortStartScheduler+0x140>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e7e:	f000 f8f9 	bl	8009074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e82:	4b10      	ldr	r3, [pc, #64]	@ (8008ec4 <xPortStartScheduler+0x144>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a0f      	ldr	r2, [pc, #60]	@ (8008ec4 <xPortStartScheduler+0x144>)
 8008e88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008e8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e8e:	f7ff ff63 	bl	8008d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e92:	f7ff fb99 	bl	80085c8 <vTaskSwitchContext>
	prvTaskExitError();
 8008e96:	f7ff ff19 	bl	8008ccc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	e000ed00 	.word	0xe000ed00
 8008ea8:	410fc271 	.word	0x410fc271
 8008eac:	410fc270 	.word	0x410fc270
 8008eb0:	e000e400 	.word	0xe000e400
 8008eb4:	20000c1c 	.word	0x20000c1c
 8008eb8:	20000c20 	.word	0x20000c20
 8008ebc:	e000ed20 	.word	0xe000ed20
 8008ec0:	2000000c 	.word	0x2000000c
 8008ec4:	e000ef34 	.word	0xe000ef34

08008ec8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	607b      	str	r3, [r7, #4]
}
 8008ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ee2:	4b10      	ldr	r3, [pc, #64]	@ (8008f24 <vPortEnterCritical+0x5c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8008f24 <vPortEnterCritical+0x5c>)
 8008eea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008eec:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <vPortEnterCritical+0x5c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d110      	bne.n	8008f16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f28 <vPortEnterCritical+0x60>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <vPortEnterCritical+0x4e>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	603b      	str	r3, [r7, #0]
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	e7fd      	b.n	8008f12 <vPortEnterCritical+0x4a>
	}
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	2000000c 	.word	0x2000000c
 8008f28:	e000ed04 	.word	0xe000ed04

08008f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f32:	4b12      	ldr	r3, [pc, #72]	@ (8008f7c <vPortExitCritical+0x50>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10b      	bne.n	8008f52 <vPortExitCritical+0x26>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	607b      	str	r3, [r7, #4]
}
 8008f4c:	bf00      	nop
 8008f4e:	bf00      	nop
 8008f50:	e7fd      	b.n	8008f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f52:	4b0a      	ldr	r3, [pc, #40]	@ (8008f7c <vPortExitCritical+0x50>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	4a08      	ldr	r2, [pc, #32]	@ (8008f7c <vPortExitCritical+0x50>)
 8008f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f5c:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <vPortExitCritical+0x50>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d105      	bne.n	8008f70 <vPortExitCritical+0x44>
 8008f64:	2300      	movs	r3, #0
 8008f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	f383 8811 	msr	BASEPRI, r3
}
 8008f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	2000000c 	.word	0x2000000c

08008f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f80:	f3ef 8009 	mrs	r0, PSP
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	4b15      	ldr	r3, [pc, #84]	@ (8008fe0 <pxCurrentTCBConst>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	f01e 0f10 	tst.w	lr, #16
 8008f90:	bf08      	it	eq
 8008f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9a:	6010      	str	r0, [r2, #0]
 8008f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008fa4:	f380 8811 	msr	BASEPRI, r0
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f7ff fb0a 	bl	80085c8 <vTaskSwitchContext>
 8008fb4:	f04f 0000 	mov.w	r0, #0
 8008fb8:	f380 8811 	msr	BASEPRI, r0
 8008fbc:	bc09      	pop	{r0, r3}
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	6808      	ldr	r0, [r1, #0]
 8008fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc6:	f01e 0f10 	tst.w	lr, #16
 8008fca:	bf08      	it	eq
 8008fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fd0:	f380 8809 	msr	PSP, r0
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w

08008fe0 <pxCurrentTCBConst>:
 8008fe0:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop

08008fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009002:	f7ff fa27 	bl	8008454 <xTaskIncrementTick>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800900c:	4b06      	ldr	r3, [pc, #24]	@ (8009028 <xPortSysTickHandler+0x40>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	2300      	movs	r3, #0
 8009016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	f383 8811 	msr	BASEPRI, r3
}
 800901e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009030:	4b0b      	ldr	r3, [pc, #44]	@ (8009060 <vPortSetupTimerInterrupt+0x34>)
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009036:	4b0b      	ldr	r3, [pc, #44]	@ (8009064 <vPortSetupTimerInterrupt+0x38>)
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800903c:	4b0a      	ldr	r3, [pc, #40]	@ (8009068 <vPortSetupTimerInterrupt+0x3c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a0a      	ldr	r2, [pc, #40]	@ (800906c <vPortSetupTimerInterrupt+0x40>)
 8009042:	fba2 2303 	umull	r2, r3, r2, r3
 8009046:	099b      	lsrs	r3, r3, #6
 8009048:	4a09      	ldr	r2, [pc, #36]	@ (8009070 <vPortSetupTimerInterrupt+0x44>)
 800904a:	3b01      	subs	r3, #1
 800904c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800904e:	4b04      	ldr	r3, [pc, #16]	@ (8009060 <vPortSetupTimerInterrupt+0x34>)
 8009050:	2207      	movs	r2, #7
 8009052:	601a      	str	r2, [r3, #0]
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	e000e010 	.word	0xe000e010
 8009064:	e000e018 	.word	0xe000e018
 8009068:	20000000 	.word	0x20000000
 800906c:	10624dd3 	.word	0x10624dd3
 8009070:	e000e014 	.word	0xe000e014

08009074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009074:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009084 <vPortEnableVFP+0x10>
 8009078:	6801      	ldr	r1, [r0, #0]
 800907a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800907e:	6001      	str	r1, [r0, #0]
 8009080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009082:	bf00      	nop
 8009084:	e000ed88 	.word	0xe000ed88

08009088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800908e:	f3ef 8305 	mrs	r3, IPSR
 8009092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b0f      	cmp	r3, #15
 8009098:	d915      	bls.n	80090c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800909a:	4a18      	ldr	r2, [pc, #96]	@ (80090fc <vPortValidateInterruptPriority+0x74>)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090a4:	4b16      	ldr	r3, [pc, #88]	@ (8009100 <vPortValidateInterruptPriority+0x78>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	7afa      	ldrb	r2, [r7, #11]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d20b      	bcs.n	80090c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	607b      	str	r3, [r7, #4]
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	e7fd      	b.n	80090c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009104 <vPortValidateInterruptPriority+0x7c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80090ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009108 <vPortValidateInterruptPriority+0x80>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d90b      	bls.n	80090ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	603b      	str	r3, [r7, #0]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <vPortValidateInterruptPriority+0x62>
	}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	e000e3f0 	.word	0xe000e3f0
 8009100:	20000c1c 	.word	0x20000c1c
 8009104:	e000ed0c 	.word	0xe000ed0c
 8009108:	20000c20 	.word	0x20000c20

0800910c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	@ 0x28
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009118:	f7ff f8f0 	bl	80082fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800911c:	4b5c      	ldr	r3, [pc, #368]	@ (8009290 <pvPortMalloc+0x184>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009124:	f000 f924 	bl	8009370 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009128:	4b5a      	ldr	r3, [pc, #360]	@ (8009294 <pvPortMalloc+0x188>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4013      	ands	r3, r2
 8009130:	2b00      	cmp	r3, #0
 8009132:	f040 8095 	bne.w	8009260 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01e      	beq.n	800917a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800913c:	2208      	movs	r2, #8
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4413      	add	r3, r2
 8009142:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	2b00      	cmp	r3, #0
 800914c:	d015      	beq.n	800917a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f023 0307 	bic.w	r3, r3, #7
 8009154:	3308      	adds	r3, #8
 8009156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00b      	beq.n	800917a <pvPortMalloc+0x6e>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	617b      	str	r3, [r7, #20]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d06f      	beq.n	8009260 <pvPortMalloc+0x154>
 8009180:	4b45      	ldr	r3, [pc, #276]	@ (8009298 <pvPortMalloc+0x18c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	429a      	cmp	r2, r3
 8009188:	d86a      	bhi.n	8009260 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800918a:	4b44      	ldr	r3, [pc, #272]	@ (800929c <pvPortMalloc+0x190>)
 800918c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800918e:	4b43      	ldr	r3, [pc, #268]	@ (800929c <pvPortMalloc+0x190>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009194:	e004      	b.n	80091a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d903      	bls.n	80091b2 <pvPortMalloc+0xa6>
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1f1      	bne.n	8009196 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091b2:	4b37      	ldr	r3, [pc, #220]	@ (8009290 <pvPortMalloc+0x184>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d051      	beq.n	8009260 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2208      	movs	r2, #8
 80091c2:	4413      	add	r3, r2
 80091c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	1ad2      	subs	r2, r2, r3
 80091d6:	2308      	movs	r3, #8
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	429a      	cmp	r2, r3
 80091dc:	d920      	bls.n	8009220 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <pvPortMalloc+0xfc>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	613b      	str	r3, [r7, #16]
}
 8009202:	bf00      	nop
 8009204:	bf00      	nop
 8009206:	e7fd      	b.n	8009204 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800921a:	69b8      	ldr	r0, [r7, #24]
 800921c:	f000 f90a 	bl	8009434 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009220:	4b1d      	ldr	r3, [pc, #116]	@ (8009298 <pvPortMalloc+0x18c>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	4a1b      	ldr	r2, [pc, #108]	@ (8009298 <pvPortMalloc+0x18c>)
 800922c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800922e:	4b1a      	ldr	r3, [pc, #104]	@ (8009298 <pvPortMalloc+0x18c>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4b1b      	ldr	r3, [pc, #108]	@ (80092a0 <pvPortMalloc+0x194>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d203      	bcs.n	8009242 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800923a:	4b17      	ldr	r3, [pc, #92]	@ (8009298 <pvPortMalloc+0x18c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a18      	ldr	r2, [pc, #96]	@ (80092a0 <pvPortMalloc+0x194>)
 8009240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4b13      	ldr	r3, [pc, #76]	@ (8009294 <pvPortMalloc+0x188>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	431a      	orrs	r2, r3
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009256:	4b13      	ldr	r3, [pc, #76]	@ (80092a4 <pvPortMalloc+0x198>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3301      	adds	r3, #1
 800925c:	4a11      	ldr	r2, [pc, #68]	@ (80092a4 <pvPortMalloc+0x198>)
 800925e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009260:	f7ff f85a 	bl	8008318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00b      	beq.n	8009286 <pvPortMalloc+0x17a>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	60fb      	str	r3, [r7, #12]
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	e7fd      	b.n	8009282 <pvPortMalloc+0x176>
	return pvReturn;
 8009286:	69fb      	ldr	r3, [r7, #28]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3728      	adds	r7, #40	@ 0x28
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	200017e4 	.word	0x200017e4
 8009294:	200017f8 	.word	0x200017f8
 8009298:	200017e8 	.word	0x200017e8
 800929c:	200017dc 	.word	0x200017dc
 80092a0:	200017ec 	.word	0x200017ec
 80092a4:	200017f0 	.word	0x200017f0

080092a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d04f      	beq.n	800935a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092ba:	2308      	movs	r3, #8
 80092bc:	425b      	negs	r3, r3
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	4413      	add	r3, r2
 80092c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	4b25      	ldr	r3, [pc, #148]	@ (8009364 <vPortFree+0xbc>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4013      	ands	r3, r2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10b      	bne.n	80092ee <vPortFree+0x46>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	60fb      	str	r3, [r7, #12]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00b      	beq.n	800930e <vPortFree+0x66>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	60bb      	str	r3, [r7, #8]
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	e7fd      	b.n	800930a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	4b14      	ldr	r3, [pc, #80]	@ (8009364 <vPortFree+0xbc>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4013      	ands	r3, r2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01e      	beq.n	800935a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d11a      	bne.n	800935a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	4b0e      	ldr	r3, [pc, #56]	@ (8009364 <vPortFree+0xbc>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	43db      	mvns	r3, r3
 800932e:	401a      	ands	r2, r3
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009334:	f7fe ffe2 	bl	80082fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	4b0a      	ldr	r3, [pc, #40]	@ (8009368 <vPortFree+0xc0>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4413      	add	r3, r2
 8009342:	4a09      	ldr	r2, [pc, #36]	@ (8009368 <vPortFree+0xc0>)
 8009344:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009346:	6938      	ldr	r0, [r7, #16]
 8009348:	f000 f874 	bl	8009434 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800934c:	4b07      	ldr	r3, [pc, #28]	@ (800936c <vPortFree+0xc4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3301      	adds	r3, #1
 8009352:	4a06      	ldr	r2, [pc, #24]	@ (800936c <vPortFree+0xc4>)
 8009354:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009356:	f7fe ffdf 	bl	8008318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800935a:	bf00      	nop
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	200017f8 	.word	0x200017f8
 8009368:	200017e8 	.word	0x200017e8
 800936c:	200017f4 	.word	0x200017f4

08009370 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009376:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800937a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800937c:	4b27      	ldr	r3, [pc, #156]	@ (800941c <prvHeapInit+0xac>)
 800937e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00c      	beq.n	80093a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3307      	adds	r3, #7
 800938e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0307 	bic.w	r3, r3, #7
 8009396:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	4a1f      	ldr	r2, [pc, #124]	@ (800941c <prvHeapInit+0xac>)
 80093a0:	4413      	add	r3, r2
 80093a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009420 <prvHeapInit+0xb0>)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009420 <prvHeapInit+0xb0>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	4413      	add	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093bc:	2208      	movs	r2, #8
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1a9b      	subs	r3, r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0307 	bic.w	r3, r3, #7
 80093ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4a15      	ldr	r2, [pc, #84]	@ (8009424 <prvHeapInit+0xb4>)
 80093d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093d2:	4b14      	ldr	r3, [pc, #80]	@ (8009424 <prvHeapInit+0xb4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2200      	movs	r2, #0
 80093d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093da:	4b12      	ldr	r3, [pc, #72]	@ (8009424 <prvHeapInit+0xb4>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	1ad2      	subs	r2, r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009424 <prvHeapInit+0xb4>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009428 <prvHeapInit+0xb8>)
 80093fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	4a09      	ldr	r2, [pc, #36]	@ (800942c <prvHeapInit+0xbc>)
 8009406:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009408:	4b09      	ldr	r3, [pc, #36]	@ (8009430 <prvHeapInit+0xc0>)
 800940a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800940e:	601a      	str	r2, [r3, #0]
}
 8009410:	bf00      	nop
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	20000c24 	.word	0x20000c24
 8009420:	200017dc 	.word	0x200017dc
 8009424:	200017e4 	.word	0x200017e4
 8009428:	200017ec 	.word	0x200017ec
 800942c:	200017e8 	.word	0x200017e8
 8009430:	200017f8 	.word	0x200017f8

08009434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800943c:	4b28      	ldr	r3, [pc, #160]	@ (80094e0 <prvInsertBlockIntoFreeList+0xac>)
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	e002      	b.n	8009448 <prvInsertBlockIntoFreeList+0x14>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	429a      	cmp	r2, r3
 8009450:	d8f7      	bhi.n	8009442 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	4413      	add	r3, r2
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	429a      	cmp	r2, r3
 8009462:	d108      	bne.n	8009476 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	441a      	add	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d118      	bne.n	80094bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b15      	ldr	r3, [pc, #84]	@ (80094e4 <prvInsertBlockIntoFreeList+0xb0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d00d      	beq.n	80094b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	441a      	add	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e008      	b.n	80094c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094b2:	4b0c      	ldr	r3, [pc, #48]	@ (80094e4 <prvInsertBlockIntoFreeList+0xb0>)
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	e003      	b.n	80094c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d002      	beq.n	80094d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	200017dc 	.word	0x200017dc
 80094e4:	200017e4 	.word	0x200017e4

080094e8 <std>:
 80094e8:	2300      	movs	r3, #0
 80094ea:	b510      	push	{r4, lr}
 80094ec:	4604      	mov	r4, r0
 80094ee:	e9c0 3300 	strd	r3, r3, [r0]
 80094f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094f6:	6083      	str	r3, [r0, #8]
 80094f8:	8181      	strh	r1, [r0, #12]
 80094fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80094fc:	81c2      	strh	r2, [r0, #14]
 80094fe:	6183      	str	r3, [r0, #24]
 8009500:	4619      	mov	r1, r3
 8009502:	2208      	movs	r2, #8
 8009504:	305c      	adds	r0, #92	@ 0x5c
 8009506:	f000 f906 	bl	8009716 <memset>
 800950a:	4b0d      	ldr	r3, [pc, #52]	@ (8009540 <std+0x58>)
 800950c:	6263      	str	r3, [r4, #36]	@ 0x24
 800950e:	4b0d      	ldr	r3, [pc, #52]	@ (8009544 <std+0x5c>)
 8009510:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009512:	4b0d      	ldr	r3, [pc, #52]	@ (8009548 <std+0x60>)
 8009514:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009516:	4b0d      	ldr	r3, [pc, #52]	@ (800954c <std+0x64>)
 8009518:	6323      	str	r3, [r4, #48]	@ 0x30
 800951a:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <std+0x68>)
 800951c:	6224      	str	r4, [r4, #32]
 800951e:	429c      	cmp	r4, r3
 8009520:	d006      	beq.n	8009530 <std+0x48>
 8009522:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009526:	4294      	cmp	r4, r2
 8009528:	d002      	beq.n	8009530 <std+0x48>
 800952a:	33d0      	adds	r3, #208	@ 0xd0
 800952c:	429c      	cmp	r4, r3
 800952e:	d105      	bne.n	800953c <std+0x54>
 8009530:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009538:	f000 b966 	b.w	8009808 <__retarget_lock_init_recursive>
 800953c:	bd10      	pop	{r4, pc}
 800953e:	bf00      	nop
 8009540:	08009691 	.word	0x08009691
 8009544:	080096b3 	.word	0x080096b3
 8009548:	080096eb 	.word	0x080096eb
 800954c:	0800970f 	.word	0x0800970f
 8009550:	200017fc 	.word	0x200017fc

08009554 <stdio_exit_handler>:
 8009554:	4a02      	ldr	r2, [pc, #8]	@ (8009560 <stdio_exit_handler+0xc>)
 8009556:	4903      	ldr	r1, [pc, #12]	@ (8009564 <stdio_exit_handler+0x10>)
 8009558:	4803      	ldr	r0, [pc, #12]	@ (8009568 <stdio_exit_handler+0x14>)
 800955a:	f000 b869 	b.w	8009630 <_fwalk_sglue>
 800955e:	bf00      	nop
 8009560:	20000010 	.word	0x20000010
 8009564:	0800a0c1 	.word	0x0800a0c1
 8009568:	20000020 	.word	0x20000020

0800956c <cleanup_stdio>:
 800956c:	6841      	ldr	r1, [r0, #4]
 800956e:	4b0c      	ldr	r3, [pc, #48]	@ (80095a0 <cleanup_stdio+0x34>)
 8009570:	4299      	cmp	r1, r3
 8009572:	b510      	push	{r4, lr}
 8009574:	4604      	mov	r4, r0
 8009576:	d001      	beq.n	800957c <cleanup_stdio+0x10>
 8009578:	f000 fda2 	bl	800a0c0 <_fflush_r>
 800957c:	68a1      	ldr	r1, [r4, #8]
 800957e:	4b09      	ldr	r3, [pc, #36]	@ (80095a4 <cleanup_stdio+0x38>)
 8009580:	4299      	cmp	r1, r3
 8009582:	d002      	beq.n	800958a <cleanup_stdio+0x1e>
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fd9b 	bl	800a0c0 <_fflush_r>
 800958a:	68e1      	ldr	r1, [r4, #12]
 800958c:	4b06      	ldr	r3, [pc, #24]	@ (80095a8 <cleanup_stdio+0x3c>)
 800958e:	4299      	cmp	r1, r3
 8009590:	d004      	beq.n	800959c <cleanup_stdio+0x30>
 8009592:	4620      	mov	r0, r4
 8009594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009598:	f000 bd92 	b.w	800a0c0 <_fflush_r>
 800959c:	bd10      	pop	{r4, pc}
 800959e:	bf00      	nop
 80095a0:	200017fc 	.word	0x200017fc
 80095a4:	20001864 	.word	0x20001864
 80095a8:	200018cc 	.word	0x200018cc

080095ac <global_stdio_init.part.0>:
 80095ac:	b510      	push	{r4, lr}
 80095ae:	4b0b      	ldr	r3, [pc, #44]	@ (80095dc <global_stdio_init.part.0+0x30>)
 80095b0:	4c0b      	ldr	r4, [pc, #44]	@ (80095e0 <global_stdio_init.part.0+0x34>)
 80095b2:	4a0c      	ldr	r2, [pc, #48]	@ (80095e4 <global_stdio_init.part.0+0x38>)
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	4620      	mov	r0, r4
 80095b8:	2200      	movs	r2, #0
 80095ba:	2104      	movs	r1, #4
 80095bc:	f7ff ff94 	bl	80094e8 <std>
 80095c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095c4:	2201      	movs	r2, #1
 80095c6:	2109      	movs	r1, #9
 80095c8:	f7ff ff8e 	bl	80094e8 <std>
 80095cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095d0:	2202      	movs	r2, #2
 80095d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d6:	2112      	movs	r1, #18
 80095d8:	f7ff bf86 	b.w	80094e8 <std>
 80095dc:	20001934 	.word	0x20001934
 80095e0:	200017fc 	.word	0x200017fc
 80095e4:	08009555 	.word	0x08009555

080095e8 <__sfp_lock_acquire>:
 80095e8:	4801      	ldr	r0, [pc, #4]	@ (80095f0 <__sfp_lock_acquire+0x8>)
 80095ea:	f000 b90e 	b.w	800980a <__retarget_lock_acquire_recursive>
 80095ee:	bf00      	nop
 80095f0:	2000193d 	.word	0x2000193d

080095f4 <__sfp_lock_release>:
 80095f4:	4801      	ldr	r0, [pc, #4]	@ (80095fc <__sfp_lock_release+0x8>)
 80095f6:	f000 b909 	b.w	800980c <__retarget_lock_release_recursive>
 80095fa:	bf00      	nop
 80095fc:	2000193d 	.word	0x2000193d

08009600 <__sinit>:
 8009600:	b510      	push	{r4, lr}
 8009602:	4604      	mov	r4, r0
 8009604:	f7ff fff0 	bl	80095e8 <__sfp_lock_acquire>
 8009608:	6a23      	ldr	r3, [r4, #32]
 800960a:	b11b      	cbz	r3, 8009614 <__sinit+0x14>
 800960c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009610:	f7ff bff0 	b.w	80095f4 <__sfp_lock_release>
 8009614:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <__sinit+0x28>)
 8009616:	6223      	str	r3, [r4, #32]
 8009618:	4b04      	ldr	r3, [pc, #16]	@ (800962c <__sinit+0x2c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1f5      	bne.n	800960c <__sinit+0xc>
 8009620:	f7ff ffc4 	bl	80095ac <global_stdio_init.part.0>
 8009624:	e7f2      	b.n	800960c <__sinit+0xc>
 8009626:	bf00      	nop
 8009628:	0800956d 	.word	0x0800956d
 800962c:	20001934 	.word	0x20001934

08009630 <_fwalk_sglue>:
 8009630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009634:	4607      	mov	r7, r0
 8009636:	4688      	mov	r8, r1
 8009638:	4614      	mov	r4, r2
 800963a:	2600      	movs	r6, #0
 800963c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009640:	f1b9 0901 	subs.w	r9, r9, #1
 8009644:	d505      	bpl.n	8009652 <_fwalk_sglue+0x22>
 8009646:	6824      	ldr	r4, [r4, #0]
 8009648:	2c00      	cmp	r4, #0
 800964a:	d1f7      	bne.n	800963c <_fwalk_sglue+0xc>
 800964c:	4630      	mov	r0, r6
 800964e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009652:	89ab      	ldrh	r3, [r5, #12]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d907      	bls.n	8009668 <_fwalk_sglue+0x38>
 8009658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800965c:	3301      	adds	r3, #1
 800965e:	d003      	beq.n	8009668 <_fwalk_sglue+0x38>
 8009660:	4629      	mov	r1, r5
 8009662:	4638      	mov	r0, r7
 8009664:	47c0      	blx	r8
 8009666:	4306      	orrs	r6, r0
 8009668:	3568      	adds	r5, #104	@ 0x68
 800966a:	e7e9      	b.n	8009640 <_fwalk_sglue+0x10>

0800966c <iprintf>:
 800966c:	b40f      	push	{r0, r1, r2, r3}
 800966e:	b507      	push	{r0, r1, r2, lr}
 8009670:	4906      	ldr	r1, [pc, #24]	@ (800968c <iprintf+0x20>)
 8009672:	ab04      	add	r3, sp, #16
 8009674:	6808      	ldr	r0, [r1, #0]
 8009676:	f853 2b04 	ldr.w	r2, [r3], #4
 800967a:	6881      	ldr	r1, [r0, #8]
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	f000 f9f7 	bl	8009a70 <_vfiprintf_r>
 8009682:	b003      	add	sp, #12
 8009684:	f85d eb04 	ldr.w	lr, [sp], #4
 8009688:	b004      	add	sp, #16
 800968a:	4770      	bx	lr
 800968c:	2000001c 	.word	0x2000001c

08009690 <__sread>:
 8009690:	b510      	push	{r4, lr}
 8009692:	460c      	mov	r4, r1
 8009694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009698:	f000 f868 	bl	800976c <_read_r>
 800969c:	2800      	cmp	r0, #0
 800969e:	bfab      	itete	ge
 80096a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096a2:	89a3      	ldrhlt	r3, [r4, #12]
 80096a4:	181b      	addge	r3, r3, r0
 80096a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096aa:	bfac      	ite	ge
 80096ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096ae:	81a3      	strhlt	r3, [r4, #12]
 80096b0:	bd10      	pop	{r4, pc}

080096b2 <__swrite>:
 80096b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b6:	461f      	mov	r7, r3
 80096b8:	898b      	ldrh	r3, [r1, #12]
 80096ba:	05db      	lsls	r3, r3, #23
 80096bc:	4605      	mov	r5, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	4616      	mov	r6, r2
 80096c2:	d505      	bpl.n	80096d0 <__swrite+0x1e>
 80096c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c8:	2302      	movs	r3, #2
 80096ca:	2200      	movs	r2, #0
 80096cc:	f000 f83c 	bl	8009748 <_lseek_r>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	4632      	mov	r2, r6
 80096de:	463b      	mov	r3, r7
 80096e0:	4628      	mov	r0, r5
 80096e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096e6:	f000 b853 	b.w	8009790 <_write_r>

080096ea <__sseek>:
 80096ea:	b510      	push	{r4, lr}
 80096ec:	460c      	mov	r4, r1
 80096ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f2:	f000 f829 	bl	8009748 <_lseek_r>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	bf15      	itete	ne
 80096fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009702:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009706:	81a3      	strheq	r3, [r4, #12]
 8009708:	bf18      	it	ne
 800970a:	81a3      	strhne	r3, [r4, #12]
 800970c:	bd10      	pop	{r4, pc}

0800970e <__sclose>:
 800970e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009712:	f000 b809 	b.w	8009728 <_close_r>

08009716 <memset>:
 8009716:	4402      	add	r2, r0
 8009718:	4603      	mov	r3, r0
 800971a:	4293      	cmp	r3, r2
 800971c:	d100      	bne.n	8009720 <memset+0xa>
 800971e:	4770      	bx	lr
 8009720:	f803 1b01 	strb.w	r1, [r3], #1
 8009724:	e7f9      	b.n	800971a <memset+0x4>
	...

08009728 <_close_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d06      	ldr	r5, [pc, #24]	@ (8009744 <_close_r+0x1c>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	f7f8 f806 	bl	8001744 <_close>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d102      	bne.n	8009742 <_close_r+0x1a>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	b103      	cbz	r3, 8009742 <_close_r+0x1a>
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	20001938 	.word	0x20001938

08009748 <_lseek_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d07      	ldr	r5, [pc, #28]	@ (8009768 <_lseek_r+0x20>)
 800974c:	4604      	mov	r4, r0
 800974e:	4608      	mov	r0, r1
 8009750:	4611      	mov	r1, r2
 8009752:	2200      	movs	r2, #0
 8009754:	602a      	str	r2, [r5, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	f7f8 f81b 	bl	8001792 <_lseek>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d102      	bne.n	8009766 <_lseek_r+0x1e>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b103      	cbz	r3, 8009766 <_lseek_r+0x1e>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	20001938 	.word	0x20001938

0800976c <_read_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d07      	ldr	r5, [pc, #28]	@ (800978c <_read_r+0x20>)
 8009770:	4604      	mov	r4, r0
 8009772:	4608      	mov	r0, r1
 8009774:	4611      	mov	r1, r2
 8009776:	2200      	movs	r2, #0
 8009778:	602a      	str	r2, [r5, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	f7f7 ffa9 	bl	80016d2 <_read>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_read_r+0x1e>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_read_r+0x1e>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	20001938 	.word	0x20001938

08009790 <_write_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d07      	ldr	r5, [pc, #28]	@ (80097b0 <_write_r+0x20>)
 8009794:	4604      	mov	r4, r0
 8009796:	4608      	mov	r0, r1
 8009798:	4611      	mov	r1, r2
 800979a:	2200      	movs	r2, #0
 800979c:	602a      	str	r2, [r5, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	f7f7 ffb4 	bl	800170c <_write>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_write_r+0x1e>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_write_r+0x1e>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	20001938 	.word	0x20001938

080097b4 <__errno>:
 80097b4:	4b01      	ldr	r3, [pc, #4]	@ (80097bc <__errno+0x8>)
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	2000001c 	.word	0x2000001c

080097c0 <__libc_init_array>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	4d0d      	ldr	r5, [pc, #52]	@ (80097f8 <__libc_init_array+0x38>)
 80097c4:	4c0d      	ldr	r4, [pc, #52]	@ (80097fc <__libc_init_array+0x3c>)
 80097c6:	1b64      	subs	r4, r4, r5
 80097c8:	10a4      	asrs	r4, r4, #2
 80097ca:	2600      	movs	r6, #0
 80097cc:	42a6      	cmp	r6, r4
 80097ce:	d109      	bne.n	80097e4 <__libc_init_array+0x24>
 80097d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009800 <__libc_init_array+0x40>)
 80097d2:	4c0c      	ldr	r4, [pc, #48]	@ (8009804 <__libc_init_array+0x44>)
 80097d4:	f000 fdc4 	bl	800a360 <_init>
 80097d8:	1b64      	subs	r4, r4, r5
 80097da:	10a4      	asrs	r4, r4, #2
 80097dc:	2600      	movs	r6, #0
 80097de:	42a6      	cmp	r6, r4
 80097e0:	d105      	bne.n	80097ee <__libc_init_array+0x2e>
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e8:	4798      	blx	r3
 80097ea:	3601      	adds	r6, #1
 80097ec:	e7ee      	b.n	80097cc <__libc_init_array+0xc>
 80097ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f2:	4798      	blx	r3
 80097f4:	3601      	adds	r6, #1
 80097f6:	e7f2      	b.n	80097de <__libc_init_array+0x1e>
 80097f8:	0800a47c 	.word	0x0800a47c
 80097fc:	0800a47c 	.word	0x0800a47c
 8009800:	0800a47c 	.word	0x0800a47c
 8009804:	0800a480 	.word	0x0800a480

08009808 <__retarget_lock_init_recursive>:
 8009808:	4770      	bx	lr

0800980a <__retarget_lock_acquire_recursive>:
 800980a:	4770      	bx	lr

0800980c <__retarget_lock_release_recursive>:
 800980c:	4770      	bx	lr

0800980e <memcpy>:
 800980e:	440a      	add	r2, r1
 8009810:	4291      	cmp	r1, r2
 8009812:	f100 33ff 	add.w	r3, r0, #4294967295
 8009816:	d100      	bne.n	800981a <memcpy+0xc>
 8009818:	4770      	bx	lr
 800981a:	b510      	push	{r4, lr}
 800981c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009824:	4291      	cmp	r1, r2
 8009826:	d1f9      	bne.n	800981c <memcpy+0xe>
 8009828:	bd10      	pop	{r4, pc}
	...

0800982c <_free_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4605      	mov	r5, r0
 8009830:	2900      	cmp	r1, #0
 8009832:	d041      	beq.n	80098b8 <_free_r+0x8c>
 8009834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009838:	1f0c      	subs	r4, r1, #4
 800983a:	2b00      	cmp	r3, #0
 800983c:	bfb8      	it	lt
 800983e:	18e4      	addlt	r4, r4, r3
 8009840:	f000 f8e0 	bl	8009a04 <__malloc_lock>
 8009844:	4a1d      	ldr	r2, [pc, #116]	@ (80098bc <_free_r+0x90>)
 8009846:	6813      	ldr	r3, [r2, #0]
 8009848:	b933      	cbnz	r3, 8009858 <_free_r+0x2c>
 800984a:	6063      	str	r3, [r4, #4]
 800984c:	6014      	str	r4, [r2, #0]
 800984e:	4628      	mov	r0, r5
 8009850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009854:	f000 b8dc 	b.w	8009a10 <__malloc_unlock>
 8009858:	42a3      	cmp	r3, r4
 800985a:	d908      	bls.n	800986e <_free_r+0x42>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	1821      	adds	r1, r4, r0
 8009860:	428b      	cmp	r3, r1
 8009862:	bf01      	itttt	eq
 8009864:	6819      	ldreq	r1, [r3, #0]
 8009866:	685b      	ldreq	r3, [r3, #4]
 8009868:	1809      	addeq	r1, r1, r0
 800986a:	6021      	streq	r1, [r4, #0]
 800986c:	e7ed      	b.n	800984a <_free_r+0x1e>
 800986e:	461a      	mov	r2, r3
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	b10b      	cbz	r3, 8009878 <_free_r+0x4c>
 8009874:	42a3      	cmp	r3, r4
 8009876:	d9fa      	bls.n	800986e <_free_r+0x42>
 8009878:	6811      	ldr	r1, [r2, #0]
 800987a:	1850      	adds	r0, r2, r1
 800987c:	42a0      	cmp	r0, r4
 800987e:	d10b      	bne.n	8009898 <_free_r+0x6c>
 8009880:	6820      	ldr	r0, [r4, #0]
 8009882:	4401      	add	r1, r0
 8009884:	1850      	adds	r0, r2, r1
 8009886:	4283      	cmp	r3, r0
 8009888:	6011      	str	r1, [r2, #0]
 800988a:	d1e0      	bne.n	800984e <_free_r+0x22>
 800988c:	6818      	ldr	r0, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	6053      	str	r3, [r2, #4]
 8009892:	4408      	add	r0, r1
 8009894:	6010      	str	r0, [r2, #0]
 8009896:	e7da      	b.n	800984e <_free_r+0x22>
 8009898:	d902      	bls.n	80098a0 <_free_r+0x74>
 800989a:	230c      	movs	r3, #12
 800989c:	602b      	str	r3, [r5, #0]
 800989e:	e7d6      	b.n	800984e <_free_r+0x22>
 80098a0:	6820      	ldr	r0, [r4, #0]
 80098a2:	1821      	adds	r1, r4, r0
 80098a4:	428b      	cmp	r3, r1
 80098a6:	bf04      	itt	eq
 80098a8:	6819      	ldreq	r1, [r3, #0]
 80098aa:	685b      	ldreq	r3, [r3, #4]
 80098ac:	6063      	str	r3, [r4, #4]
 80098ae:	bf04      	itt	eq
 80098b0:	1809      	addeq	r1, r1, r0
 80098b2:	6021      	streq	r1, [r4, #0]
 80098b4:	6054      	str	r4, [r2, #4]
 80098b6:	e7ca      	b.n	800984e <_free_r+0x22>
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	bf00      	nop
 80098bc:	20001944 	.word	0x20001944

080098c0 <sbrk_aligned>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	4e0f      	ldr	r6, [pc, #60]	@ (8009900 <sbrk_aligned+0x40>)
 80098c4:	460c      	mov	r4, r1
 80098c6:	6831      	ldr	r1, [r6, #0]
 80098c8:	4605      	mov	r5, r0
 80098ca:	b911      	cbnz	r1, 80098d2 <sbrk_aligned+0x12>
 80098cc:	f000 fcb4 	bl	800a238 <_sbrk_r>
 80098d0:	6030      	str	r0, [r6, #0]
 80098d2:	4621      	mov	r1, r4
 80098d4:	4628      	mov	r0, r5
 80098d6:	f000 fcaf 	bl	800a238 <_sbrk_r>
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	d103      	bne.n	80098e6 <sbrk_aligned+0x26>
 80098de:	f04f 34ff 	mov.w	r4, #4294967295
 80098e2:	4620      	mov	r0, r4
 80098e4:	bd70      	pop	{r4, r5, r6, pc}
 80098e6:	1cc4      	adds	r4, r0, #3
 80098e8:	f024 0403 	bic.w	r4, r4, #3
 80098ec:	42a0      	cmp	r0, r4
 80098ee:	d0f8      	beq.n	80098e2 <sbrk_aligned+0x22>
 80098f0:	1a21      	subs	r1, r4, r0
 80098f2:	4628      	mov	r0, r5
 80098f4:	f000 fca0 	bl	800a238 <_sbrk_r>
 80098f8:	3001      	adds	r0, #1
 80098fa:	d1f2      	bne.n	80098e2 <sbrk_aligned+0x22>
 80098fc:	e7ef      	b.n	80098de <sbrk_aligned+0x1e>
 80098fe:	bf00      	nop
 8009900:	20001940 	.word	0x20001940

08009904 <_malloc_r>:
 8009904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009908:	1ccd      	adds	r5, r1, #3
 800990a:	f025 0503 	bic.w	r5, r5, #3
 800990e:	3508      	adds	r5, #8
 8009910:	2d0c      	cmp	r5, #12
 8009912:	bf38      	it	cc
 8009914:	250c      	movcc	r5, #12
 8009916:	2d00      	cmp	r5, #0
 8009918:	4606      	mov	r6, r0
 800991a:	db01      	blt.n	8009920 <_malloc_r+0x1c>
 800991c:	42a9      	cmp	r1, r5
 800991e:	d904      	bls.n	800992a <_malloc_r+0x26>
 8009920:	230c      	movs	r3, #12
 8009922:	6033      	str	r3, [r6, #0]
 8009924:	2000      	movs	r0, #0
 8009926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a00 <_malloc_r+0xfc>
 800992e:	f000 f869 	bl	8009a04 <__malloc_lock>
 8009932:	f8d8 3000 	ldr.w	r3, [r8]
 8009936:	461c      	mov	r4, r3
 8009938:	bb44      	cbnz	r4, 800998c <_malloc_r+0x88>
 800993a:	4629      	mov	r1, r5
 800993c:	4630      	mov	r0, r6
 800993e:	f7ff ffbf 	bl	80098c0 <sbrk_aligned>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	4604      	mov	r4, r0
 8009946:	d158      	bne.n	80099fa <_malloc_r+0xf6>
 8009948:	f8d8 4000 	ldr.w	r4, [r8]
 800994c:	4627      	mov	r7, r4
 800994e:	2f00      	cmp	r7, #0
 8009950:	d143      	bne.n	80099da <_malloc_r+0xd6>
 8009952:	2c00      	cmp	r4, #0
 8009954:	d04b      	beq.n	80099ee <_malloc_r+0xea>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	4639      	mov	r1, r7
 800995a:	4630      	mov	r0, r6
 800995c:	eb04 0903 	add.w	r9, r4, r3
 8009960:	f000 fc6a 	bl	800a238 <_sbrk_r>
 8009964:	4581      	cmp	r9, r0
 8009966:	d142      	bne.n	80099ee <_malloc_r+0xea>
 8009968:	6821      	ldr	r1, [r4, #0]
 800996a:	1a6d      	subs	r5, r5, r1
 800996c:	4629      	mov	r1, r5
 800996e:	4630      	mov	r0, r6
 8009970:	f7ff ffa6 	bl	80098c0 <sbrk_aligned>
 8009974:	3001      	adds	r0, #1
 8009976:	d03a      	beq.n	80099ee <_malloc_r+0xea>
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	442b      	add	r3, r5
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	f8d8 3000 	ldr.w	r3, [r8]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	bb62      	cbnz	r2, 80099e0 <_malloc_r+0xdc>
 8009986:	f8c8 7000 	str.w	r7, [r8]
 800998a:	e00f      	b.n	80099ac <_malloc_r+0xa8>
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	1b52      	subs	r2, r2, r5
 8009990:	d420      	bmi.n	80099d4 <_malloc_r+0xd0>
 8009992:	2a0b      	cmp	r2, #11
 8009994:	d917      	bls.n	80099c6 <_malloc_r+0xc2>
 8009996:	1961      	adds	r1, r4, r5
 8009998:	42a3      	cmp	r3, r4
 800999a:	6025      	str	r5, [r4, #0]
 800999c:	bf18      	it	ne
 800999e:	6059      	strne	r1, [r3, #4]
 80099a0:	6863      	ldr	r3, [r4, #4]
 80099a2:	bf08      	it	eq
 80099a4:	f8c8 1000 	streq.w	r1, [r8]
 80099a8:	5162      	str	r2, [r4, r5]
 80099aa:	604b      	str	r3, [r1, #4]
 80099ac:	4630      	mov	r0, r6
 80099ae:	f000 f82f 	bl	8009a10 <__malloc_unlock>
 80099b2:	f104 000b 	add.w	r0, r4, #11
 80099b6:	1d23      	adds	r3, r4, #4
 80099b8:	f020 0007 	bic.w	r0, r0, #7
 80099bc:	1ac2      	subs	r2, r0, r3
 80099be:	bf1c      	itt	ne
 80099c0:	1a1b      	subne	r3, r3, r0
 80099c2:	50a3      	strne	r3, [r4, r2]
 80099c4:	e7af      	b.n	8009926 <_malloc_r+0x22>
 80099c6:	6862      	ldr	r2, [r4, #4]
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	bf0c      	ite	eq
 80099cc:	f8c8 2000 	streq.w	r2, [r8]
 80099d0:	605a      	strne	r2, [r3, #4]
 80099d2:	e7eb      	b.n	80099ac <_malloc_r+0xa8>
 80099d4:	4623      	mov	r3, r4
 80099d6:	6864      	ldr	r4, [r4, #4]
 80099d8:	e7ae      	b.n	8009938 <_malloc_r+0x34>
 80099da:	463c      	mov	r4, r7
 80099dc:	687f      	ldr	r7, [r7, #4]
 80099de:	e7b6      	b.n	800994e <_malloc_r+0x4a>
 80099e0:	461a      	mov	r2, r3
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	d1fb      	bne.n	80099e0 <_malloc_r+0xdc>
 80099e8:	2300      	movs	r3, #0
 80099ea:	6053      	str	r3, [r2, #4]
 80099ec:	e7de      	b.n	80099ac <_malloc_r+0xa8>
 80099ee:	230c      	movs	r3, #12
 80099f0:	6033      	str	r3, [r6, #0]
 80099f2:	4630      	mov	r0, r6
 80099f4:	f000 f80c 	bl	8009a10 <__malloc_unlock>
 80099f8:	e794      	b.n	8009924 <_malloc_r+0x20>
 80099fa:	6005      	str	r5, [r0, #0]
 80099fc:	e7d6      	b.n	80099ac <_malloc_r+0xa8>
 80099fe:	bf00      	nop
 8009a00:	20001944 	.word	0x20001944

08009a04 <__malloc_lock>:
 8009a04:	4801      	ldr	r0, [pc, #4]	@ (8009a0c <__malloc_lock+0x8>)
 8009a06:	f7ff bf00 	b.w	800980a <__retarget_lock_acquire_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	2000193c 	.word	0x2000193c

08009a10 <__malloc_unlock>:
 8009a10:	4801      	ldr	r0, [pc, #4]	@ (8009a18 <__malloc_unlock+0x8>)
 8009a12:	f7ff befb 	b.w	800980c <__retarget_lock_release_recursive>
 8009a16:	bf00      	nop
 8009a18:	2000193c 	.word	0x2000193c

08009a1c <__sfputc_r>:
 8009a1c:	6893      	ldr	r3, [r2, #8]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	b410      	push	{r4}
 8009a24:	6093      	str	r3, [r2, #8]
 8009a26:	da08      	bge.n	8009a3a <__sfputc_r+0x1e>
 8009a28:	6994      	ldr	r4, [r2, #24]
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	db01      	blt.n	8009a32 <__sfputc_r+0x16>
 8009a2e:	290a      	cmp	r1, #10
 8009a30:	d103      	bne.n	8009a3a <__sfputc_r+0x1e>
 8009a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a36:	f000 bb6b 	b.w	800a110 <__swbuf_r>
 8009a3a:	6813      	ldr	r3, [r2, #0]
 8009a3c:	1c58      	adds	r0, r3, #1
 8009a3e:	6010      	str	r0, [r2, #0]
 8009a40:	7019      	strb	r1, [r3, #0]
 8009a42:	4608      	mov	r0, r1
 8009a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <__sfputs_r>:
 8009a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	460f      	mov	r7, r1
 8009a50:	4614      	mov	r4, r2
 8009a52:	18d5      	adds	r5, r2, r3
 8009a54:	42ac      	cmp	r4, r5
 8009a56:	d101      	bne.n	8009a5c <__sfputs_r+0x12>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e007      	b.n	8009a6c <__sfputs_r+0x22>
 8009a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a60:	463a      	mov	r2, r7
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7ff ffda 	bl	8009a1c <__sfputc_r>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d1f3      	bne.n	8009a54 <__sfputs_r+0xa>
 8009a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a70 <_vfiprintf_r>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	460d      	mov	r5, r1
 8009a76:	b09d      	sub	sp, #116	@ 0x74
 8009a78:	4614      	mov	r4, r2
 8009a7a:	4698      	mov	r8, r3
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	b118      	cbz	r0, 8009a88 <_vfiprintf_r+0x18>
 8009a80:	6a03      	ldr	r3, [r0, #32]
 8009a82:	b90b      	cbnz	r3, 8009a88 <_vfiprintf_r+0x18>
 8009a84:	f7ff fdbc 	bl	8009600 <__sinit>
 8009a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a8a:	07d9      	lsls	r1, r3, #31
 8009a8c:	d405      	bmi.n	8009a9a <_vfiprintf_r+0x2a>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	059a      	lsls	r2, r3, #22
 8009a92:	d402      	bmi.n	8009a9a <_vfiprintf_r+0x2a>
 8009a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a96:	f7ff feb8 	bl	800980a <__retarget_lock_acquire_recursive>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	071b      	lsls	r3, r3, #28
 8009a9e:	d501      	bpl.n	8009aa4 <_vfiprintf_r+0x34>
 8009aa0:	692b      	ldr	r3, [r5, #16]
 8009aa2:	b99b      	cbnz	r3, 8009acc <_vfiprintf_r+0x5c>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 fb70 	bl	800a18c <__swsetup_r>
 8009aac:	b170      	cbz	r0, 8009acc <_vfiprintf_r+0x5c>
 8009aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ab0:	07dc      	lsls	r4, r3, #31
 8009ab2:	d504      	bpl.n	8009abe <_vfiprintf_r+0x4e>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab8:	b01d      	add	sp, #116	@ 0x74
 8009aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abe:	89ab      	ldrh	r3, [r5, #12]
 8009ac0:	0598      	lsls	r0, r3, #22
 8009ac2:	d4f7      	bmi.n	8009ab4 <_vfiprintf_r+0x44>
 8009ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ac6:	f7ff fea1 	bl	800980c <__retarget_lock_release_recursive>
 8009aca:	e7f3      	b.n	8009ab4 <_vfiprintf_r+0x44>
 8009acc:	2300      	movs	r3, #0
 8009ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ada:	2330      	movs	r3, #48	@ 0x30
 8009adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c8c <_vfiprintf_r+0x21c>
 8009ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ae4:	f04f 0901 	mov.w	r9, #1
 8009ae8:	4623      	mov	r3, r4
 8009aea:	469a      	mov	sl, r3
 8009aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af0:	b10a      	cbz	r2, 8009af6 <_vfiprintf_r+0x86>
 8009af2:	2a25      	cmp	r2, #37	@ 0x25
 8009af4:	d1f9      	bne.n	8009aea <_vfiprintf_r+0x7a>
 8009af6:	ebba 0b04 	subs.w	fp, sl, r4
 8009afa:	d00b      	beq.n	8009b14 <_vfiprintf_r+0xa4>
 8009afc:	465b      	mov	r3, fp
 8009afe:	4622      	mov	r2, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	4630      	mov	r0, r6
 8009b04:	f7ff ffa1 	bl	8009a4a <__sfputs_r>
 8009b08:	3001      	adds	r0, #1
 8009b0a:	f000 80a7 	beq.w	8009c5c <_vfiprintf_r+0x1ec>
 8009b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b10:	445a      	add	r2, fp
 8009b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b14:	f89a 3000 	ldrb.w	r3, [sl]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 809f 	beq.w	8009c5c <_vfiprintf_r+0x1ec>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f04f 32ff 	mov.w	r2, #4294967295
 8009b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b28:	f10a 0a01 	add.w	sl, sl, #1
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	9307      	str	r3, [sp, #28]
 8009b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b36:	4654      	mov	r4, sl
 8009b38:	2205      	movs	r2, #5
 8009b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3e:	4853      	ldr	r0, [pc, #332]	@ (8009c8c <_vfiprintf_r+0x21c>)
 8009b40:	f7f6 fb46 	bl	80001d0 <memchr>
 8009b44:	9a04      	ldr	r2, [sp, #16]
 8009b46:	b9d8      	cbnz	r0, 8009b80 <_vfiprintf_r+0x110>
 8009b48:	06d1      	lsls	r1, r2, #27
 8009b4a:	bf44      	itt	mi
 8009b4c:	2320      	movmi	r3, #32
 8009b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b52:	0713      	lsls	r3, r2, #28
 8009b54:	bf44      	itt	mi
 8009b56:	232b      	movmi	r3, #43	@ 0x2b
 8009b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b62:	d015      	beq.n	8009b90 <_vfiprintf_r+0x120>
 8009b64:	9a07      	ldr	r2, [sp, #28]
 8009b66:	4654      	mov	r4, sl
 8009b68:	2000      	movs	r0, #0
 8009b6a:	f04f 0c0a 	mov.w	ip, #10
 8009b6e:	4621      	mov	r1, r4
 8009b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b74:	3b30      	subs	r3, #48	@ 0x30
 8009b76:	2b09      	cmp	r3, #9
 8009b78:	d94b      	bls.n	8009c12 <_vfiprintf_r+0x1a2>
 8009b7a:	b1b0      	cbz	r0, 8009baa <_vfiprintf_r+0x13a>
 8009b7c:	9207      	str	r2, [sp, #28]
 8009b7e:	e014      	b.n	8009baa <_vfiprintf_r+0x13a>
 8009b80:	eba0 0308 	sub.w	r3, r0, r8
 8009b84:	fa09 f303 	lsl.w	r3, r9, r3
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	9304      	str	r3, [sp, #16]
 8009b8c:	46a2      	mov	sl, r4
 8009b8e:	e7d2      	b.n	8009b36 <_vfiprintf_r+0xc6>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1d19      	adds	r1, r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	9103      	str	r1, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfbb      	ittet	lt
 8009b9c:	425b      	neglt	r3, r3
 8009b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009ba2:	9307      	strge	r3, [sp, #28]
 8009ba4:	9307      	strlt	r3, [sp, #28]
 8009ba6:	bfb8      	it	lt
 8009ba8:	9204      	strlt	r2, [sp, #16]
 8009baa:	7823      	ldrb	r3, [r4, #0]
 8009bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bae:	d10a      	bne.n	8009bc6 <_vfiprintf_r+0x156>
 8009bb0:	7863      	ldrb	r3, [r4, #1]
 8009bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bb4:	d132      	bne.n	8009c1c <_vfiprintf_r+0x1ac>
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	1d1a      	adds	r2, r3, #4
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	9203      	str	r2, [sp, #12]
 8009bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bc2:	3402      	adds	r4, #2
 8009bc4:	9305      	str	r3, [sp, #20]
 8009bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c9c <_vfiprintf_r+0x22c>
 8009bca:	7821      	ldrb	r1, [r4, #0]
 8009bcc:	2203      	movs	r2, #3
 8009bce:	4650      	mov	r0, sl
 8009bd0:	f7f6 fafe 	bl	80001d0 <memchr>
 8009bd4:	b138      	cbz	r0, 8009be6 <_vfiprintf_r+0x176>
 8009bd6:	9b04      	ldr	r3, [sp, #16]
 8009bd8:	eba0 000a 	sub.w	r0, r0, sl
 8009bdc:	2240      	movs	r2, #64	@ 0x40
 8009bde:	4082      	lsls	r2, r0
 8009be0:	4313      	orrs	r3, r2
 8009be2:	3401      	adds	r4, #1
 8009be4:	9304      	str	r3, [sp, #16]
 8009be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bea:	4829      	ldr	r0, [pc, #164]	@ (8009c90 <_vfiprintf_r+0x220>)
 8009bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bf0:	2206      	movs	r2, #6
 8009bf2:	f7f6 faed 	bl	80001d0 <memchr>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d03f      	beq.n	8009c7a <_vfiprintf_r+0x20a>
 8009bfa:	4b26      	ldr	r3, [pc, #152]	@ (8009c94 <_vfiprintf_r+0x224>)
 8009bfc:	bb1b      	cbnz	r3, 8009c46 <_vfiprintf_r+0x1d6>
 8009bfe:	9b03      	ldr	r3, [sp, #12]
 8009c00:	3307      	adds	r3, #7
 8009c02:	f023 0307 	bic.w	r3, r3, #7
 8009c06:	3308      	adds	r3, #8
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c0c:	443b      	add	r3, r7
 8009c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c10:	e76a      	b.n	8009ae8 <_vfiprintf_r+0x78>
 8009c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c16:	460c      	mov	r4, r1
 8009c18:	2001      	movs	r0, #1
 8009c1a:	e7a8      	b.n	8009b6e <_vfiprintf_r+0xfe>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	3401      	adds	r4, #1
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	4619      	mov	r1, r3
 8009c24:	f04f 0c0a 	mov.w	ip, #10
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c2e:	3a30      	subs	r2, #48	@ 0x30
 8009c30:	2a09      	cmp	r2, #9
 8009c32:	d903      	bls.n	8009c3c <_vfiprintf_r+0x1cc>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0c6      	beq.n	8009bc6 <_vfiprintf_r+0x156>
 8009c38:	9105      	str	r1, [sp, #20]
 8009c3a:	e7c4      	b.n	8009bc6 <_vfiprintf_r+0x156>
 8009c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c40:	4604      	mov	r4, r0
 8009c42:	2301      	movs	r3, #1
 8009c44:	e7f0      	b.n	8009c28 <_vfiprintf_r+0x1b8>
 8009c46:	ab03      	add	r3, sp, #12
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4b12      	ldr	r3, [pc, #72]	@ (8009c98 <_vfiprintf_r+0x228>)
 8009c4e:	a904      	add	r1, sp, #16
 8009c50:	4630      	mov	r0, r6
 8009c52:	f3af 8000 	nop.w
 8009c56:	4607      	mov	r7, r0
 8009c58:	1c78      	adds	r0, r7, #1
 8009c5a:	d1d6      	bne.n	8009c0a <_vfiprintf_r+0x19a>
 8009c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c5e:	07d9      	lsls	r1, r3, #31
 8009c60:	d405      	bmi.n	8009c6e <_vfiprintf_r+0x1fe>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	059a      	lsls	r2, r3, #22
 8009c66:	d402      	bmi.n	8009c6e <_vfiprintf_r+0x1fe>
 8009c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c6a:	f7ff fdcf 	bl	800980c <__retarget_lock_release_recursive>
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	065b      	lsls	r3, r3, #25
 8009c72:	f53f af1f 	bmi.w	8009ab4 <_vfiprintf_r+0x44>
 8009c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c78:	e71e      	b.n	8009ab8 <_vfiprintf_r+0x48>
 8009c7a:	ab03      	add	r3, sp, #12
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	462a      	mov	r2, r5
 8009c80:	4b05      	ldr	r3, [pc, #20]	@ (8009c98 <_vfiprintf_r+0x228>)
 8009c82:	a904      	add	r1, sp, #16
 8009c84:	4630      	mov	r0, r6
 8009c86:	f000 f879 	bl	8009d7c <_printf_i>
 8009c8a:	e7e4      	b.n	8009c56 <_vfiprintf_r+0x1e6>
 8009c8c:	0800a440 	.word	0x0800a440
 8009c90:	0800a44a 	.word	0x0800a44a
 8009c94:	00000000 	.word	0x00000000
 8009c98:	08009a4b 	.word	0x08009a4b
 8009c9c:	0800a446 	.word	0x0800a446

08009ca0 <_printf_common>:
 8009ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca4:	4616      	mov	r6, r2
 8009ca6:	4698      	mov	r8, r3
 8009ca8:	688a      	ldr	r2, [r1, #8]
 8009caa:	690b      	ldr	r3, [r1, #16]
 8009cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	bfb8      	it	lt
 8009cb4:	4613      	movlt	r3, r2
 8009cb6:	6033      	str	r3, [r6, #0]
 8009cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	b10a      	cbz	r2, 8009cc6 <_printf_common+0x26>
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	6033      	str	r3, [r6, #0]
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	0699      	lsls	r1, r3, #26
 8009cca:	bf42      	ittt	mi
 8009ccc:	6833      	ldrmi	r3, [r6, #0]
 8009cce:	3302      	addmi	r3, #2
 8009cd0:	6033      	strmi	r3, [r6, #0]
 8009cd2:	6825      	ldr	r5, [r4, #0]
 8009cd4:	f015 0506 	ands.w	r5, r5, #6
 8009cd8:	d106      	bne.n	8009ce8 <_printf_common+0x48>
 8009cda:	f104 0a19 	add.w	sl, r4, #25
 8009cde:	68e3      	ldr	r3, [r4, #12]
 8009ce0:	6832      	ldr	r2, [r6, #0]
 8009ce2:	1a9b      	subs	r3, r3, r2
 8009ce4:	42ab      	cmp	r3, r5
 8009ce6:	dc26      	bgt.n	8009d36 <_printf_common+0x96>
 8009ce8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009cec:	6822      	ldr	r2, [r4, #0]
 8009cee:	3b00      	subs	r3, #0
 8009cf0:	bf18      	it	ne
 8009cf2:	2301      	movne	r3, #1
 8009cf4:	0692      	lsls	r2, r2, #26
 8009cf6:	d42b      	bmi.n	8009d50 <_printf_common+0xb0>
 8009cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009cfc:	4641      	mov	r1, r8
 8009cfe:	4638      	mov	r0, r7
 8009d00:	47c8      	blx	r9
 8009d02:	3001      	adds	r0, #1
 8009d04:	d01e      	beq.n	8009d44 <_printf_common+0xa4>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	6922      	ldr	r2, [r4, #16]
 8009d0a:	f003 0306 	and.w	r3, r3, #6
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	bf02      	ittt	eq
 8009d12:	68e5      	ldreq	r5, [r4, #12]
 8009d14:	6833      	ldreq	r3, [r6, #0]
 8009d16:	1aed      	subeq	r5, r5, r3
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	bf0c      	ite	eq
 8009d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d20:	2500      	movne	r5, #0
 8009d22:	4293      	cmp	r3, r2
 8009d24:	bfc4      	itt	gt
 8009d26:	1a9b      	subgt	r3, r3, r2
 8009d28:	18ed      	addgt	r5, r5, r3
 8009d2a:	2600      	movs	r6, #0
 8009d2c:	341a      	adds	r4, #26
 8009d2e:	42b5      	cmp	r5, r6
 8009d30:	d11a      	bne.n	8009d68 <_printf_common+0xc8>
 8009d32:	2000      	movs	r0, #0
 8009d34:	e008      	b.n	8009d48 <_printf_common+0xa8>
 8009d36:	2301      	movs	r3, #1
 8009d38:	4652      	mov	r2, sl
 8009d3a:	4641      	mov	r1, r8
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	47c8      	blx	r9
 8009d40:	3001      	adds	r0, #1
 8009d42:	d103      	bne.n	8009d4c <_printf_common+0xac>
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295
 8009d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4c:	3501      	adds	r5, #1
 8009d4e:	e7c6      	b.n	8009cde <_printf_common+0x3e>
 8009d50:	18e1      	adds	r1, r4, r3
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	2030      	movs	r0, #48	@ 0x30
 8009d56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d5a:	4422      	add	r2, r4
 8009d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d64:	3302      	adds	r3, #2
 8009d66:	e7c7      	b.n	8009cf8 <_printf_common+0x58>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	4641      	mov	r1, r8
 8009d6e:	4638      	mov	r0, r7
 8009d70:	47c8      	blx	r9
 8009d72:	3001      	adds	r0, #1
 8009d74:	d0e6      	beq.n	8009d44 <_printf_common+0xa4>
 8009d76:	3601      	adds	r6, #1
 8009d78:	e7d9      	b.n	8009d2e <_printf_common+0x8e>
	...

08009d7c <_printf_i>:
 8009d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d80:	7e0f      	ldrb	r7, [r1, #24]
 8009d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d84:	2f78      	cmp	r7, #120	@ 0x78
 8009d86:	4691      	mov	r9, r2
 8009d88:	4680      	mov	r8, r0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	469a      	mov	sl, r3
 8009d8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d92:	d807      	bhi.n	8009da4 <_printf_i+0x28>
 8009d94:	2f62      	cmp	r7, #98	@ 0x62
 8009d96:	d80a      	bhi.n	8009dae <_printf_i+0x32>
 8009d98:	2f00      	cmp	r7, #0
 8009d9a:	f000 80d1 	beq.w	8009f40 <_printf_i+0x1c4>
 8009d9e:	2f58      	cmp	r7, #88	@ 0x58
 8009da0:	f000 80b8 	beq.w	8009f14 <_printf_i+0x198>
 8009da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009da8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009dac:	e03a      	b.n	8009e24 <_printf_i+0xa8>
 8009dae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009db2:	2b15      	cmp	r3, #21
 8009db4:	d8f6      	bhi.n	8009da4 <_printf_i+0x28>
 8009db6:	a101      	add	r1, pc, #4	@ (adr r1, 8009dbc <_printf_i+0x40>)
 8009db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dbc:	08009e15 	.word	0x08009e15
 8009dc0:	08009e29 	.word	0x08009e29
 8009dc4:	08009da5 	.word	0x08009da5
 8009dc8:	08009da5 	.word	0x08009da5
 8009dcc:	08009da5 	.word	0x08009da5
 8009dd0:	08009da5 	.word	0x08009da5
 8009dd4:	08009e29 	.word	0x08009e29
 8009dd8:	08009da5 	.word	0x08009da5
 8009ddc:	08009da5 	.word	0x08009da5
 8009de0:	08009da5 	.word	0x08009da5
 8009de4:	08009da5 	.word	0x08009da5
 8009de8:	08009f27 	.word	0x08009f27
 8009dec:	08009e53 	.word	0x08009e53
 8009df0:	08009ee1 	.word	0x08009ee1
 8009df4:	08009da5 	.word	0x08009da5
 8009df8:	08009da5 	.word	0x08009da5
 8009dfc:	08009f49 	.word	0x08009f49
 8009e00:	08009da5 	.word	0x08009da5
 8009e04:	08009e53 	.word	0x08009e53
 8009e08:	08009da5 	.word	0x08009da5
 8009e0c:	08009da5 	.word	0x08009da5
 8009e10:	08009ee9 	.word	0x08009ee9
 8009e14:	6833      	ldr	r3, [r6, #0]
 8009e16:	1d1a      	adds	r2, r3, #4
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6032      	str	r2, [r6, #0]
 8009e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e24:	2301      	movs	r3, #1
 8009e26:	e09c      	b.n	8009f62 <_printf_i+0x1e6>
 8009e28:	6833      	ldr	r3, [r6, #0]
 8009e2a:	6820      	ldr	r0, [r4, #0]
 8009e2c:	1d19      	adds	r1, r3, #4
 8009e2e:	6031      	str	r1, [r6, #0]
 8009e30:	0606      	lsls	r6, r0, #24
 8009e32:	d501      	bpl.n	8009e38 <_printf_i+0xbc>
 8009e34:	681d      	ldr	r5, [r3, #0]
 8009e36:	e003      	b.n	8009e40 <_printf_i+0xc4>
 8009e38:	0645      	lsls	r5, r0, #25
 8009e3a:	d5fb      	bpl.n	8009e34 <_printf_i+0xb8>
 8009e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e40:	2d00      	cmp	r5, #0
 8009e42:	da03      	bge.n	8009e4c <_printf_i+0xd0>
 8009e44:	232d      	movs	r3, #45	@ 0x2d
 8009e46:	426d      	negs	r5, r5
 8009e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e4c:	4858      	ldr	r0, [pc, #352]	@ (8009fb0 <_printf_i+0x234>)
 8009e4e:	230a      	movs	r3, #10
 8009e50:	e011      	b.n	8009e76 <_printf_i+0xfa>
 8009e52:	6821      	ldr	r1, [r4, #0]
 8009e54:	6833      	ldr	r3, [r6, #0]
 8009e56:	0608      	lsls	r0, r1, #24
 8009e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e5c:	d402      	bmi.n	8009e64 <_printf_i+0xe8>
 8009e5e:	0649      	lsls	r1, r1, #25
 8009e60:	bf48      	it	mi
 8009e62:	b2ad      	uxthmi	r5, r5
 8009e64:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e66:	4852      	ldr	r0, [pc, #328]	@ (8009fb0 <_printf_i+0x234>)
 8009e68:	6033      	str	r3, [r6, #0]
 8009e6a:	bf14      	ite	ne
 8009e6c:	230a      	movne	r3, #10
 8009e6e:	2308      	moveq	r3, #8
 8009e70:	2100      	movs	r1, #0
 8009e72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e76:	6866      	ldr	r6, [r4, #4]
 8009e78:	60a6      	str	r6, [r4, #8]
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	db05      	blt.n	8009e8a <_printf_i+0x10e>
 8009e7e:	6821      	ldr	r1, [r4, #0]
 8009e80:	432e      	orrs	r6, r5
 8009e82:	f021 0104 	bic.w	r1, r1, #4
 8009e86:	6021      	str	r1, [r4, #0]
 8009e88:	d04b      	beq.n	8009f22 <_printf_i+0x1a6>
 8009e8a:	4616      	mov	r6, r2
 8009e8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e90:	fb03 5711 	mls	r7, r3, r1, r5
 8009e94:	5dc7      	ldrb	r7, [r0, r7]
 8009e96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e9a:	462f      	mov	r7, r5
 8009e9c:	42bb      	cmp	r3, r7
 8009e9e:	460d      	mov	r5, r1
 8009ea0:	d9f4      	bls.n	8009e8c <_printf_i+0x110>
 8009ea2:	2b08      	cmp	r3, #8
 8009ea4:	d10b      	bne.n	8009ebe <_printf_i+0x142>
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	07df      	lsls	r7, r3, #31
 8009eaa:	d508      	bpl.n	8009ebe <_printf_i+0x142>
 8009eac:	6923      	ldr	r3, [r4, #16]
 8009eae:	6861      	ldr	r1, [r4, #4]
 8009eb0:	4299      	cmp	r1, r3
 8009eb2:	bfde      	ittt	le
 8009eb4:	2330      	movle	r3, #48	@ 0x30
 8009eb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009eba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ebe:	1b92      	subs	r2, r2, r6
 8009ec0:	6122      	str	r2, [r4, #16]
 8009ec2:	f8cd a000 	str.w	sl, [sp]
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	aa03      	add	r2, sp, #12
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4640      	mov	r0, r8
 8009ece:	f7ff fee7 	bl	8009ca0 <_printf_common>
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d14a      	bne.n	8009f6c <_printf_i+0x1f0>
 8009ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eda:	b004      	add	sp, #16
 8009edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	f043 0320 	orr.w	r3, r3, #32
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	4832      	ldr	r0, [pc, #200]	@ (8009fb4 <_printf_i+0x238>)
 8009eea:	2778      	movs	r7, #120	@ 0x78
 8009eec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	6831      	ldr	r1, [r6, #0]
 8009ef4:	061f      	lsls	r7, r3, #24
 8009ef6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009efa:	d402      	bmi.n	8009f02 <_printf_i+0x186>
 8009efc:	065f      	lsls	r7, r3, #25
 8009efe:	bf48      	it	mi
 8009f00:	b2ad      	uxthmi	r5, r5
 8009f02:	6031      	str	r1, [r6, #0]
 8009f04:	07d9      	lsls	r1, r3, #31
 8009f06:	bf44      	itt	mi
 8009f08:	f043 0320 	orrmi.w	r3, r3, #32
 8009f0c:	6023      	strmi	r3, [r4, #0]
 8009f0e:	b11d      	cbz	r5, 8009f18 <_printf_i+0x19c>
 8009f10:	2310      	movs	r3, #16
 8009f12:	e7ad      	b.n	8009e70 <_printf_i+0xf4>
 8009f14:	4826      	ldr	r0, [pc, #152]	@ (8009fb0 <_printf_i+0x234>)
 8009f16:	e7e9      	b.n	8009eec <_printf_i+0x170>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	f023 0320 	bic.w	r3, r3, #32
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	e7f6      	b.n	8009f10 <_printf_i+0x194>
 8009f22:	4616      	mov	r6, r2
 8009f24:	e7bd      	b.n	8009ea2 <_printf_i+0x126>
 8009f26:	6833      	ldr	r3, [r6, #0]
 8009f28:	6825      	ldr	r5, [r4, #0]
 8009f2a:	6961      	ldr	r1, [r4, #20]
 8009f2c:	1d18      	adds	r0, r3, #4
 8009f2e:	6030      	str	r0, [r6, #0]
 8009f30:	062e      	lsls	r6, r5, #24
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	d501      	bpl.n	8009f3a <_printf_i+0x1be>
 8009f36:	6019      	str	r1, [r3, #0]
 8009f38:	e002      	b.n	8009f40 <_printf_i+0x1c4>
 8009f3a:	0668      	lsls	r0, r5, #25
 8009f3c:	d5fb      	bpl.n	8009f36 <_printf_i+0x1ba>
 8009f3e:	8019      	strh	r1, [r3, #0]
 8009f40:	2300      	movs	r3, #0
 8009f42:	6123      	str	r3, [r4, #16]
 8009f44:	4616      	mov	r6, r2
 8009f46:	e7bc      	b.n	8009ec2 <_printf_i+0x146>
 8009f48:	6833      	ldr	r3, [r6, #0]
 8009f4a:	1d1a      	adds	r2, r3, #4
 8009f4c:	6032      	str	r2, [r6, #0]
 8009f4e:	681e      	ldr	r6, [r3, #0]
 8009f50:	6862      	ldr	r2, [r4, #4]
 8009f52:	2100      	movs	r1, #0
 8009f54:	4630      	mov	r0, r6
 8009f56:	f7f6 f93b 	bl	80001d0 <memchr>
 8009f5a:	b108      	cbz	r0, 8009f60 <_printf_i+0x1e4>
 8009f5c:	1b80      	subs	r0, r0, r6
 8009f5e:	6060      	str	r0, [r4, #4]
 8009f60:	6863      	ldr	r3, [r4, #4]
 8009f62:	6123      	str	r3, [r4, #16]
 8009f64:	2300      	movs	r3, #0
 8009f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f6a:	e7aa      	b.n	8009ec2 <_printf_i+0x146>
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	4632      	mov	r2, r6
 8009f70:	4649      	mov	r1, r9
 8009f72:	4640      	mov	r0, r8
 8009f74:	47d0      	blx	sl
 8009f76:	3001      	adds	r0, #1
 8009f78:	d0ad      	beq.n	8009ed6 <_printf_i+0x15a>
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	079b      	lsls	r3, r3, #30
 8009f7e:	d413      	bmi.n	8009fa8 <_printf_i+0x22c>
 8009f80:	68e0      	ldr	r0, [r4, #12]
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	4298      	cmp	r0, r3
 8009f86:	bfb8      	it	lt
 8009f88:	4618      	movlt	r0, r3
 8009f8a:	e7a6      	b.n	8009eda <_printf_i+0x15e>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	4632      	mov	r2, r6
 8009f90:	4649      	mov	r1, r9
 8009f92:	4640      	mov	r0, r8
 8009f94:	47d0      	blx	sl
 8009f96:	3001      	adds	r0, #1
 8009f98:	d09d      	beq.n	8009ed6 <_printf_i+0x15a>
 8009f9a:	3501      	adds	r5, #1
 8009f9c:	68e3      	ldr	r3, [r4, #12]
 8009f9e:	9903      	ldr	r1, [sp, #12]
 8009fa0:	1a5b      	subs	r3, r3, r1
 8009fa2:	42ab      	cmp	r3, r5
 8009fa4:	dcf2      	bgt.n	8009f8c <_printf_i+0x210>
 8009fa6:	e7eb      	b.n	8009f80 <_printf_i+0x204>
 8009fa8:	2500      	movs	r5, #0
 8009faa:	f104 0619 	add.w	r6, r4, #25
 8009fae:	e7f5      	b.n	8009f9c <_printf_i+0x220>
 8009fb0:	0800a451 	.word	0x0800a451
 8009fb4:	0800a462 	.word	0x0800a462

08009fb8 <__sflush_r>:
 8009fb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	0716      	lsls	r6, r2, #28
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	d454      	bmi.n	800a072 <__sflush_r+0xba>
 8009fc8:	684b      	ldr	r3, [r1, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	dc02      	bgt.n	8009fd4 <__sflush_r+0x1c>
 8009fce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dd48      	ble.n	800a066 <__sflush_r+0xae>
 8009fd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	d045      	beq.n	800a066 <__sflush_r+0xae>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fe0:	682f      	ldr	r7, [r5, #0]
 8009fe2:	6a21      	ldr	r1, [r4, #32]
 8009fe4:	602b      	str	r3, [r5, #0]
 8009fe6:	d030      	beq.n	800a04a <__sflush_r+0x92>
 8009fe8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	0759      	lsls	r1, r3, #29
 8009fee:	d505      	bpl.n	8009ffc <__sflush_r+0x44>
 8009ff0:	6863      	ldr	r3, [r4, #4]
 8009ff2:	1ad2      	subs	r2, r2, r3
 8009ff4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ff6:	b10b      	cbz	r3, 8009ffc <__sflush_r+0x44>
 8009ff8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a000:	6a21      	ldr	r1, [r4, #32]
 800a002:	4628      	mov	r0, r5
 800a004:	47b0      	blx	r6
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	d106      	bne.n	800a01a <__sflush_r+0x62>
 800a00c:	6829      	ldr	r1, [r5, #0]
 800a00e:	291d      	cmp	r1, #29
 800a010:	d82b      	bhi.n	800a06a <__sflush_r+0xb2>
 800a012:	4a2a      	ldr	r2, [pc, #168]	@ (800a0bc <__sflush_r+0x104>)
 800a014:	40ca      	lsrs	r2, r1
 800a016:	07d6      	lsls	r6, r2, #31
 800a018:	d527      	bpl.n	800a06a <__sflush_r+0xb2>
 800a01a:	2200      	movs	r2, #0
 800a01c:	6062      	str	r2, [r4, #4]
 800a01e:	04d9      	lsls	r1, r3, #19
 800a020:	6922      	ldr	r2, [r4, #16]
 800a022:	6022      	str	r2, [r4, #0]
 800a024:	d504      	bpl.n	800a030 <__sflush_r+0x78>
 800a026:	1c42      	adds	r2, r0, #1
 800a028:	d101      	bne.n	800a02e <__sflush_r+0x76>
 800a02a:	682b      	ldr	r3, [r5, #0]
 800a02c:	b903      	cbnz	r3, 800a030 <__sflush_r+0x78>
 800a02e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a032:	602f      	str	r7, [r5, #0]
 800a034:	b1b9      	cbz	r1, 800a066 <__sflush_r+0xae>
 800a036:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a03a:	4299      	cmp	r1, r3
 800a03c:	d002      	beq.n	800a044 <__sflush_r+0x8c>
 800a03e:	4628      	mov	r0, r5
 800a040:	f7ff fbf4 	bl	800982c <_free_r>
 800a044:	2300      	movs	r3, #0
 800a046:	6363      	str	r3, [r4, #52]	@ 0x34
 800a048:	e00d      	b.n	800a066 <__sflush_r+0xae>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b0      	blx	r6
 800a050:	4602      	mov	r2, r0
 800a052:	1c50      	adds	r0, r2, #1
 800a054:	d1c9      	bne.n	8009fea <__sflush_r+0x32>
 800a056:	682b      	ldr	r3, [r5, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d0c6      	beq.n	8009fea <__sflush_r+0x32>
 800a05c:	2b1d      	cmp	r3, #29
 800a05e:	d001      	beq.n	800a064 <__sflush_r+0xac>
 800a060:	2b16      	cmp	r3, #22
 800a062:	d11e      	bne.n	800a0a2 <__sflush_r+0xea>
 800a064:	602f      	str	r7, [r5, #0]
 800a066:	2000      	movs	r0, #0
 800a068:	e022      	b.n	800a0b0 <__sflush_r+0xf8>
 800a06a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a06e:	b21b      	sxth	r3, r3
 800a070:	e01b      	b.n	800a0aa <__sflush_r+0xf2>
 800a072:	690f      	ldr	r7, [r1, #16]
 800a074:	2f00      	cmp	r7, #0
 800a076:	d0f6      	beq.n	800a066 <__sflush_r+0xae>
 800a078:	0793      	lsls	r3, r2, #30
 800a07a:	680e      	ldr	r6, [r1, #0]
 800a07c:	bf08      	it	eq
 800a07e:	694b      	ldreq	r3, [r1, #20]
 800a080:	600f      	str	r7, [r1, #0]
 800a082:	bf18      	it	ne
 800a084:	2300      	movne	r3, #0
 800a086:	eba6 0807 	sub.w	r8, r6, r7
 800a08a:	608b      	str	r3, [r1, #8]
 800a08c:	f1b8 0f00 	cmp.w	r8, #0
 800a090:	dde9      	ble.n	800a066 <__sflush_r+0xae>
 800a092:	6a21      	ldr	r1, [r4, #32]
 800a094:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a096:	4643      	mov	r3, r8
 800a098:	463a      	mov	r2, r7
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b0      	blx	r6
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	dc08      	bgt.n	800a0b4 <__sflush_r+0xfc>
 800a0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b4:	4407      	add	r7, r0
 800a0b6:	eba8 0800 	sub.w	r8, r8, r0
 800a0ba:	e7e7      	b.n	800a08c <__sflush_r+0xd4>
 800a0bc:	20400001 	.word	0x20400001

0800a0c0 <_fflush_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	690b      	ldr	r3, [r1, #16]
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	b913      	cbnz	r3, 800a0d0 <_fflush_r+0x10>
 800a0ca:	2500      	movs	r5, #0
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	b118      	cbz	r0, 800a0da <_fflush_r+0x1a>
 800a0d2:	6a03      	ldr	r3, [r0, #32]
 800a0d4:	b90b      	cbnz	r3, 800a0da <_fflush_r+0x1a>
 800a0d6:	f7ff fa93 	bl	8009600 <__sinit>
 800a0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d0f3      	beq.n	800a0ca <_fflush_r+0xa>
 800a0e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0e4:	07d0      	lsls	r0, r2, #31
 800a0e6:	d404      	bmi.n	800a0f2 <_fflush_r+0x32>
 800a0e8:	0599      	lsls	r1, r3, #22
 800a0ea:	d402      	bmi.n	800a0f2 <_fflush_r+0x32>
 800a0ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0ee:	f7ff fb8c 	bl	800980a <__retarget_lock_acquire_recursive>
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	f7ff ff5f 	bl	8009fb8 <__sflush_r>
 800a0fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0fc:	07da      	lsls	r2, r3, #31
 800a0fe:	4605      	mov	r5, r0
 800a100:	d4e4      	bmi.n	800a0cc <_fflush_r+0xc>
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	059b      	lsls	r3, r3, #22
 800a106:	d4e1      	bmi.n	800a0cc <_fflush_r+0xc>
 800a108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a10a:	f7ff fb7f 	bl	800980c <__retarget_lock_release_recursive>
 800a10e:	e7dd      	b.n	800a0cc <_fflush_r+0xc>

0800a110 <__swbuf_r>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	460e      	mov	r6, r1
 800a114:	4614      	mov	r4, r2
 800a116:	4605      	mov	r5, r0
 800a118:	b118      	cbz	r0, 800a122 <__swbuf_r+0x12>
 800a11a:	6a03      	ldr	r3, [r0, #32]
 800a11c:	b90b      	cbnz	r3, 800a122 <__swbuf_r+0x12>
 800a11e:	f7ff fa6f 	bl	8009600 <__sinit>
 800a122:	69a3      	ldr	r3, [r4, #24]
 800a124:	60a3      	str	r3, [r4, #8]
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	071a      	lsls	r2, r3, #28
 800a12a:	d501      	bpl.n	800a130 <__swbuf_r+0x20>
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	b943      	cbnz	r3, 800a142 <__swbuf_r+0x32>
 800a130:	4621      	mov	r1, r4
 800a132:	4628      	mov	r0, r5
 800a134:	f000 f82a 	bl	800a18c <__swsetup_r>
 800a138:	b118      	cbz	r0, 800a142 <__swbuf_r+0x32>
 800a13a:	f04f 37ff 	mov.w	r7, #4294967295
 800a13e:	4638      	mov	r0, r7
 800a140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	6922      	ldr	r2, [r4, #16]
 800a146:	1a98      	subs	r0, r3, r2
 800a148:	6963      	ldr	r3, [r4, #20]
 800a14a:	b2f6      	uxtb	r6, r6
 800a14c:	4283      	cmp	r3, r0
 800a14e:	4637      	mov	r7, r6
 800a150:	dc05      	bgt.n	800a15e <__swbuf_r+0x4e>
 800a152:	4621      	mov	r1, r4
 800a154:	4628      	mov	r0, r5
 800a156:	f7ff ffb3 	bl	800a0c0 <_fflush_r>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d1ed      	bne.n	800a13a <__swbuf_r+0x2a>
 800a15e:	68a3      	ldr	r3, [r4, #8]
 800a160:	3b01      	subs	r3, #1
 800a162:	60a3      	str	r3, [r4, #8]
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	6022      	str	r2, [r4, #0]
 800a16a:	701e      	strb	r6, [r3, #0]
 800a16c:	6962      	ldr	r2, [r4, #20]
 800a16e:	1c43      	adds	r3, r0, #1
 800a170:	429a      	cmp	r2, r3
 800a172:	d004      	beq.n	800a17e <__swbuf_r+0x6e>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	07db      	lsls	r3, r3, #31
 800a178:	d5e1      	bpl.n	800a13e <__swbuf_r+0x2e>
 800a17a:	2e0a      	cmp	r6, #10
 800a17c:	d1df      	bne.n	800a13e <__swbuf_r+0x2e>
 800a17e:	4621      	mov	r1, r4
 800a180:	4628      	mov	r0, r5
 800a182:	f7ff ff9d 	bl	800a0c0 <_fflush_r>
 800a186:	2800      	cmp	r0, #0
 800a188:	d0d9      	beq.n	800a13e <__swbuf_r+0x2e>
 800a18a:	e7d6      	b.n	800a13a <__swbuf_r+0x2a>

0800a18c <__swsetup_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	4b29      	ldr	r3, [pc, #164]	@ (800a234 <__swsetup_r+0xa8>)
 800a190:	4605      	mov	r5, r0
 800a192:	6818      	ldr	r0, [r3, #0]
 800a194:	460c      	mov	r4, r1
 800a196:	b118      	cbz	r0, 800a1a0 <__swsetup_r+0x14>
 800a198:	6a03      	ldr	r3, [r0, #32]
 800a19a:	b90b      	cbnz	r3, 800a1a0 <__swsetup_r+0x14>
 800a19c:	f7ff fa30 	bl	8009600 <__sinit>
 800a1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a4:	0719      	lsls	r1, r3, #28
 800a1a6:	d422      	bmi.n	800a1ee <__swsetup_r+0x62>
 800a1a8:	06da      	lsls	r2, r3, #27
 800a1aa:	d407      	bmi.n	800a1bc <__swsetup_r+0x30>
 800a1ac:	2209      	movs	r2, #9
 800a1ae:	602a      	str	r2, [r5, #0]
 800a1b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1b4:	81a3      	strh	r3, [r4, #12]
 800a1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ba:	e033      	b.n	800a224 <__swsetup_r+0x98>
 800a1bc:	0758      	lsls	r0, r3, #29
 800a1be:	d512      	bpl.n	800a1e6 <__swsetup_r+0x5a>
 800a1c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1c2:	b141      	cbz	r1, 800a1d6 <__swsetup_r+0x4a>
 800a1c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1c8:	4299      	cmp	r1, r3
 800a1ca:	d002      	beq.n	800a1d2 <__swsetup_r+0x46>
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f7ff fb2d 	bl	800982c <_free_r>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	6063      	str	r3, [r4, #4]
 800a1e2:	6923      	ldr	r3, [r4, #16]
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	f043 0308 	orr.w	r3, r3, #8
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	b94b      	cbnz	r3, 800a206 <__swsetup_r+0x7a>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a1f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1fc:	d003      	beq.n	800a206 <__swsetup_r+0x7a>
 800a1fe:	4621      	mov	r1, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f000 f84f 	bl	800a2a4 <__smakebuf_r>
 800a206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a20a:	f013 0201 	ands.w	r2, r3, #1
 800a20e:	d00a      	beq.n	800a226 <__swsetup_r+0x9a>
 800a210:	2200      	movs	r2, #0
 800a212:	60a2      	str	r2, [r4, #8]
 800a214:	6962      	ldr	r2, [r4, #20]
 800a216:	4252      	negs	r2, r2
 800a218:	61a2      	str	r2, [r4, #24]
 800a21a:	6922      	ldr	r2, [r4, #16]
 800a21c:	b942      	cbnz	r2, 800a230 <__swsetup_r+0xa4>
 800a21e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a222:	d1c5      	bne.n	800a1b0 <__swsetup_r+0x24>
 800a224:	bd38      	pop	{r3, r4, r5, pc}
 800a226:	0799      	lsls	r1, r3, #30
 800a228:	bf58      	it	pl
 800a22a:	6962      	ldrpl	r2, [r4, #20]
 800a22c:	60a2      	str	r2, [r4, #8]
 800a22e:	e7f4      	b.n	800a21a <__swsetup_r+0x8e>
 800a230:	2000      	movs	r0, #0
 800a232:	e7f7      	b.n	800a224 <__swsetup_r+0x98>
 800a234:	2000001c 	.word	0x2000001c

0800a238 <_sbrk_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d06      	ldr	r5, [pc, #24]	@ (800a254 <_sbrk_r+0x1c>)
 800a23c:	2300      	movs	r3, #0
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	f7f7 fab2 	bl	80017ac <_sbrk>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_sbrk_r+0x1a>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_sbrk_r+0x1a>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	20001938 	.word	0x20001938

0800a258 <__swhatbuf_r>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	460c      	mov	r4, r1
 800a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a260:	2900      	cmp	r1, #0
 800a262:	b096      	sub	sp, #88	@ 0x58
 800a264:	4615      	mov	r5, r2
 800a266:	461e      	mov	r6, r3
 800a268:	da0d      	bge.n	800a286 <__swhatbuf_r+0x2e>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a270:	f04f 0100 	mov.w	r1, #0
 800a274:	bf14      	ite	ne
 800a276:	2340      	movne	r3, #64	@ 0x40
 800a278:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a27c:	2000      	movs	r0, #0
 800a27e:	6031      	str	r1, [r6, #0]
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	b016      	add	sp, #88	@ 0x58
 800a284:	bd70      	pop	{r4, r5, r6, pc}
 800a286:	466a      	mov	r2, sp
 800a288:	f000 f848 	bl	800a31c <_fstat_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	dbec      	blt.n	800a26a <__swhatbuf_r+0x12>
 800a290:	9901      	ldr	r1, [sp, #4]
 800a292:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a296:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a29a:	4259      	negs	r1, r3
 800a29c:	4159      	adcs	r1, r3
 800a29e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2a2:	e7eb      	b.n	800a27c <__swhatbuf_r+0x24>

0800a2a4 <__smakebuf_r>:
 800a2a4:	898b      	ldrh	r3, [r1, #12]
 800a2a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2a8:	079d      	lsls	r5, r3, #30
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	d507      	bpl.n	800a2c0 <__smakebuf_r+0x1c>
 800a2b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	6123      	str	r3, [r4, #16]
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	6163      	str	r3, [r4, #20]
 800a2bc:	b003      	add	sp, #12
 800a2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c0:	ab01      	add	r3, sp, #4
 800a2c2:	466a      	mov	r2, sp
 800a2c4:	f7ff ffc8 	bl	800a258 <__swhatbuf_r>
 800a2c8:	9f00      	ldr	r7, [sp, #0]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f7ff fb18 	bl	8009904 <_malloc_r>
 800a2d4:	b948      	cbnz	r0, 800a2ea <__smakebuf_r+0x46>
 800a2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2da:	059a      	lsls	r2, r3, #22
 800a2dc:	d4ee      	bmi.n	800a2bc <__smakebuf_r+0x18>
 800a2de:	f023 0303 	bic.w	r3, r3, #3
 800a2e2:	f043 0302 	orr.w	r3, r3, #2
 800a2e6:	81a3      	strh	r3, [r4, #12]
 800a2e8:	e7e2      	b.n	800a2b0 <__smakebuf_r+0xc>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	6020      	str	r0, [r4, #0]
 800a2ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	9b01      	ldr	r3, [sp, #4]
 800a2f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2fa:	b15b      	cbz	r3, 800a314 <__smakebuf_r+0x70>
 800a2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a300:	4630      	mov	r0, r6
 800a302:	f000 f81d 	bl	800a340 <_isatty_r>
 800a306:	b128      	cbz	r0, 800a314 <__smakebuf_r+0x70>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	f043 0301 	orr.w	r3, r3, #1
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	431d      	orrs	r5, r3
 800a318:	81a5      	strh	r5, [r4, #12]
 800a31a:	e7cf      	b.n	800a2bc <__smakebuf_r+0x18>

0800a31c <_fstat_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d07      	ldr	r5, [pc, #28]	@ (800a33c <_fstat_r+0x20>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	f7f7 fa17 	bl	800175c <_fstat>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	d102      	bne.n	800a338 <_fstat_r+0x1c>
 800a332:	682b      	ldr	r3, [r5, #0]
 800a334:	b103      	cbz	r3, 800a338 <_fstat_r+0x1c>
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	bf00      	nop
 800a33c:	20001938 	.word	0x20001938

0800a340 <_isatty_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d06      	ldr	r5, [pc, #24]	@ (800a35c <_isatty_r+0x1c>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	f7f7 fa16 	bl	800177c <_isatty>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d102      	bne.n	800a35a <_isatty_r+0x1a>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	b103      	cbz	r3, 800a35a <_isatty_r+0x1a>
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	20001938 	.word	0x20001938

0800a360 <_init>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	bf00      	nop
 800a364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a366:	bc08      	pop	{r3}
 800a368:	469e      	mov	lr, r3
 800a36a:	4770      	bx	lr

0800a36c <_fini>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	bf00      	nop
 800a370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a372:	bc08      	pop	{r3}
 800a374:	469e      	mov	lr, r3
 800a376:	4770      	bx	lr
