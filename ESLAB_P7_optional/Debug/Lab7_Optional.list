
Lab7_Optional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db4  08011988  08011988  00012988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801273c  0801273c  0001421c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801273c  0801273c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012744  08012744  0001421c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012744  08012744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012748  08012748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0801274c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e5c  2000021c  08012968  0001421c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004078  08012968  00015078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001421c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b04  00000000  00000000  0001424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054c3  00000000  00000000  0003dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002310  00000000  00000000  00043218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b1d  00000000  00000000  00045528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8b2  00000000  00000000  00047045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002876e  00000000  00000000  000718f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f11d  00000000  00000000  0009a065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001a9182  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aaf0  00000000  00000000  001a923c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001b3d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  001b3d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  001b4a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011970 	.word	0x08011970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	08011970 	.word	0x08011970

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b2d      	cmp	r3, #45	@ 0x2d
 800103c:	d119      	bne.n	8001072 <ParseNumber+0x52>
        minus = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
        done_count++;
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	3301      	adds	r3, #1
 800104c:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 800104e:	e010      	b.n	8001072 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	3b30      	subs	r3, #48	@ 0x30
 8001062:	4413      	add	r3, r2
 8001064:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3301      	adds	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
        done_count++;
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	3301      	adds	r3, #1
 8001070:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b2f      	cmp	r3, #47	@ 0x2f
 8001078:	d903      	bls.n	8001082 <ParseNumber+0x62>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b39      	cmp	r3, #57	@ 0x39
 8001080:	d9e6      	bls.n	8001050 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <ParseNumber+0x6e>
        *cnt = done_count;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	7bba      	ldrb	r2, [r7, #14]
 800108c:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <ParseNumber+0x7a>
        return 0 - sum;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	425b      	negs	r3, r3
 8001098:	e000      	b.n	800109c <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 800109a:	68bb      	ldr	r3, [r7, #8]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d027      	beq.n	800110e <ParseIP+0x66>
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d024      	beq.n	800110e <ParseIP+0x66>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d921      	bls.n	800110e <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 80010ca:	e019      	b.n	8001100 <ParseIP+0x58>
    uint8_t done_count = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80010d6:	d00e      	beq.n	80010f6 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 80010d8:	f107 0316 	add.w	r3, r7, #22
 80010dc:	4619      	mov	r1, r3
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff ff9e 	bl	8001020 <ParseNumber>
 80010e4:	4601      	mov	r1, r0
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	75fa      	strb	r2, [r7, #23]
 80010ec:	461a      	mov	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	4413      	add	r3, r2
 80010f2:	b2ca      	uxtb	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 80010f6:	7dbb      	ldrb	r3, [r7, #22]
 80010f8:	461a      	mov	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d803      	bhi.n	800110e <ParseIP+0x66>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1de      	bne.n	80010cc <ParseIP+0x24>
   }
  }
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3302      	adds	r3, #2
 800112a:	4940      	ldr	r1, [pc, #256]	@ (800122c <AT_ParseInfo+0x114>)
 800112c:	4618      	mov	r0, r3
 800112e:	f00d f881 	bl	800e234 <strtok>
 8001132:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001134:	e071      	b.n	800121a <AT_ParseInfo+0x102>
    switch (num++) {
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	72fa      	strb	r2, [r7, #11]
 800113c:	2b06      	cmp	r3, #6
 800113e:	d866      	bhi.n	800120e <AT_ParseInfo+0xf6>
 8001140:	a201      	add	r2, pc, #4	@ (adr r2, 8001148 <AT_ParseInfo+0x30>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001165 	.word	0x08001165
 800114c:	08001179 	.word	0x08001179
 8001150:	08001191 	.word	0x08001191
 8001154:	080011a9 	.word	0x080011a9
 8001158:	080011c1 	.word	0x080011c1
 800115c:	080011d9 	.word	0x080011d9
 8001160:	080011ed 	.word	0x080011ed
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	221f      	movs	r2, #31
 8001168:	68f9      	ldr	r1, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	f00d f84e 	bl	800e20c <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	77da      	strb	r2, [r3, #31]
      break;
 8001176:	e04b      	b.n	8001210 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3320      	adds	r3, #32
 800117c:	2217      	movs	r2, #23
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f00d f843 	bl	800e20c <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 800118e:	e03f      	b.n	8001210 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3338      	adds	r3, #56	@ 0x38
 8001194:	220f      	movs	r2, #15
 8001196:	68f9      	ldr	r1, [r7, #12]
 8001198:	4618      	mov	r0, r3
 800119a:	f00d f837 	bl	800e20c <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80011a6:	e033      	b.n	8001210 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3348      	adds	r3, #72	@ 0x48
 80011ac:	220f      	movs	r2, #15
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00d f82b 	bl	800e20c <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 80011be:	e027      	b.n	8001210 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3358      	adds	r3, #88	@ 0x58
 80011c4:	220f      	movs	r2, #15
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00d f81f 	bl	800e20c <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 80011d6:	e01b      	b.n	8001210 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 80011d8:	2100      	movs	r1, #0
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f7ff ff20 	bl	8001020 <ParseNumber>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 80011ea:	e011      	b.n	8001210 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 80011ec:	4910      	ldr	r1, [pc, #64]	@ (8001230 <AT_ParseInfo+0x118>)
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f00d f820 	bl	800e234 <strtok>
 80011f4:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3368      	adds	r3, #104	@ 0x68
 80011fa:	221f      	movs	r2, #31
 80011fc:	68f9      	ldr	r1, [r7, #12]
 80011fe:	4618      	mov	r0, r3
 8001200:	f00d f804 	bl	800e20c <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 800120c:	e000      	b.n	8001210 <AT_ParseInfo+0xf8>

    default: break;
 800120e:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001210:	4906      	ldr	r1, [pc, #24]	@ (800122c <AT_ParseInfo+0x114>)
 8001212:	2000      	movs	r0, #0
 8001214:	f00d f80e 	bl	800e234 <strtok>
 8001218:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d18a      	bne.n	8001136 <AT_ParseInfo+0x1e>
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	080119b8 	.word	0x080119b8
 8001230:	080119bc 	.word	0x080119bc

08001234 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3302      	adds	r3, #2
 8001246:	4959      	ldr	r1, [pc, #356]	@ (80013ac <AT_ParseConnSettings+0x178>)
 8001248:	4618      	mov	r0, r3
 800124a:	f00c fff3 	bl	800e234 <strtok>
 800124e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001250:	e0a2      	b.n	8001398 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	73fa      	strb	r2, [r7, #15]
 8001258:	2b0b      	cmp	r3, #11
 800125a:	f200 808c 	bhi.w	8001376 <AT_ParseConnSettings+0x142>
 800125e:	a201      	add	r2, pc, #4	@ (adr r2, 8001264 <AT_ParseConnSettings+0x30>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	08001295 	.word	0x08001295
 8001268:	080012ab 	.word	0x080012ab
 800126c:	080012c3 	.word	0x080012c3
 8001270:	080012d7 	.word	0x080012d7
 8001274:	080012eb 	.word	0x080012eb
 8001278:	080012ff 	.word	0x080012ff
 800127c:	0800130f 	.word	0x0800130f
 8001280:	0800131f 	.word	0x0800131f
 8001284:	0800132f 	.word	0x0800132f
 8001288:	0800133f 	.word	0x0800133f
 800128c:	0800134f 	.word	0x0800134f
 8001290:	08001363 	.word	0x08001363
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2220      	movs	r2, #32
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	4618      	mov	r0, r3
 800129c:	f00c ffb6 	bl	800e20c <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80012a8:	e066      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3321      	adds	r3, #33	@ 0x21
 80012ae:	2220      	movs	r2, #32
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00c ffaa 	bl	800e20c <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 80012c0:	e05a      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80012c2:	2100      	movs	r1, #0
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f7ff feab 	bl	8001020 <ParseNumber>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 80012d4:	e050      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 80012d6:	2100      	movs	r1, #0
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff fea1 	bl	8001020 <ParseNumber>
 80012de:	4603      	mov	r3, r0
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 80012e8:	e046      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80012ea:	2100      	movs	r1, #0
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f7ff fe97 	bl	8001020 <ParseNumber>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80012fc:	e03c      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3348      	adds	r3, #72	@ 0x48
 8001302:	2204      	movs	r2, #4
 8001304:	4619      	mov	r1, r3
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f7ff fece 	bl	80010a8 <ParseIP>
      break;
 800130c:	e034      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	334c      	adds	r3, #76	@ 0x4c
 8001312:	2204      	movs	r2, #4
 8001314:	4619      	mov	r1, r3
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f7ff fec6 	bl	80010a8 <ParseIP>
      break;
 800131c:	e02c      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	3350      	adds	r3, #80	@ 0x50
 8001322:	2204      	movs	r2, #4
 8001324:	4619      	mov	r1, r3
 8001326:	68b8      	ldr	r0, [r7, #8]
 8001328:	f7ff febe 	bl	80010a8 <ParseIP>
      break;
 800132c:	e024      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3354      	adds	r3, #84	@ 0x54
 8001332:	2204      	movs	r2, #4
 8001334:	4619      	mov	r1, r3
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f7ff feb6 	bl	80010a8 <ParseIP>
      break;
 800133c:	e01c      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	3358      	adds	r3, #88	@ 0x58
 8001342:	2204      	movs	r2, #4
 8001344:	4619      	mov	r1, r3
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f7ff feae 	bl	80010a8 <ParseIP>
      break;
 800134c:	e014      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800134e:	2100      	movs	r1, #0
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f7ff fe65 	bl	8001020 <ParseNumber>
 8001356:	4603      	mov	r3, r0
 8001358:	b2da      	uxtb	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8001360:	e00a      	b.n	8001378 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001362:	2100      	movs	r1, #0
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff fe5b 	bl	8001020 <ParseNumber>
 800136a:	4603      	mov	r3, r0
 800136c:	b2da      	uxtb	r2, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8001374:	e000      	b.n	8001378 <AT_ParseConnSettings+0x144>

    default:
      break;
 8001376:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001378:	490c      	ldr	r1, [pc, #48]	@ (80013ac <AT_ParseConnSettings+0x178>)
 800137a:	2000      	movs	r0, #0
 800137c:	f00c ff5a 	bl	800e234 <strtok>
 8001380:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <AT_ParseConnSettings+0x164>
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3b01      	subs	r3, #1
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001390:	d102      	bne.n	8001398 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	3301      	adds	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f47f af59 	bne.w	8001252 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	080119b8 	.word	0x080119b8

080013b0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d056      	beq.n	800147c <AT_ExecuteCommand+0xcc>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d051      	beq.n	800147c <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80013de:	68b8      	ldr	r0, [r7, #8]
 80013e0:	f7fe ff46 	bl	8000270 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b299      	uxth	r1, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80013ee:	461a      	mov	r2, r3
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	47a0      	blx	r4
 80013f4:	4603      	mov	r3, r0
 80013f6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd3e      	ble.n	800147c <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 800140a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4798      	blx	r3
 8001412:	4603      	mov	r3, r0
 8001414:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001416:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800141a:	2b00      	cmp	r3, #0
 800141c:	dd27      	ble.n	800146e <AT_ExecuteCommand+0xbe>
 800141e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001422:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001426:	dc22      	bgt.n	800146e <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001428:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800142c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001430:	d105      	bne.n	800143e <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001432:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001436:	b29b      	uxth	r3, r3
 8001438:	3b01      	subs	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800143e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 800144a:	490f      	ldr	r1, [pc, #60]	@ (8001488 <AT_ExecuteCommand+0xd8>)
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f00c ff4d 	bl	800e2ec <strstr>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	e010      	b.n	800147e <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 800145c:	490b      	ldr	r1, [pc, #44]	@ (800148c <AT_ExecuteCommand+0xdc>)
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f00c ff44 	bl	800e2ec <strstr>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800146a:	2305      	movs	r3, #5
 800146c:	e007      	b.n	800147e <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800146e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001472:	f113 0f04 	cmn.w	r3, #4
 8001476:	d101      	bne.n	800147c <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001478:	2306      	movs	r3, #6
 800147a:	e000      	b.n	800147e <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800147c:	2304      	movs	r3, #4
}
 800147e:	4618      	mov	r0, r3
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	bf00      	nop
 8001488:	080119d0 	.word	0x080119d0
 800148c:	080119dc 	.word	0x080119dc

08001490 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80014aa:	68b8      	ldr	r0, [r7, #8]
 80014ac:	f7fe fee0 	bl	8000270 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80014b4:	8a7b      	ldrh	r3, [r7, #18]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <AT_RequestSendData+0x32>
 80014be:	2302      	movs	r3, #2
 80014c0:	e05d      	b.n	800157e <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d057      	beq.n	800157c <AT_RequestSendData+0xec>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d052      	beq.n	800157c <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 80014e2:	8a79      	ldrh	r1, [r7, #18]
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	4798      	blx	r3
 80014e8:	4603      	mov	r3, r0
 80014ea:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80014ec:	8a3a      	ldrh	r2, [r7, #16]
 80014ee:	8a7b      	ldrh	r3, [r7, #18]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d143      	bne.n	800157c <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001500:	8879      	ldrh	r1, [r7, #2]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4798      	blx	r3
 8001506:	4603      	mov	r3, r0
 8001508:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800150a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	429a      	cmp	r2, r3
 8001512:	d131      	bne.n	8001578 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001520:	2100      	movs	r1, #0
 8001522:	6a38      	ldr	r0, [r7, #32]
 8001524:	4798      	blx	r3
 8001526:	4603      	mov	r3, r0
 8001528:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800152a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	dd19      	ble.n	8001566 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001532:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001536:	6a3a      	ldr	r2, [r7, #32]
 8001538:	4413      	add	r3, r2
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800153e:	4912      	ldr	r1, [pc, #72]	@ (8001588 <AT_RequestSendData+0xf8>)
 8001540:	6a38      	ldr	r0, [r7, #32]
 8001542:	f00c fed3 	bl	800e2ec <strstr>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e016      	b.n	800157e <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001550:	490e      	ldr	r1, [pc, #56]	@ (800158c <AT_RequestSendData+0xfc>)
 8001552:	6a38      	ldr	r0, [r7, #32]
 8001554:	f00c feca 	bl	800e2ec <strstr>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800155e:	2305      	movs	r3, #5
 8001560:	e00d      	b.n	800157e <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001562:	2302      	movs	r3, #2
 8001564:	e00b      	b.n	800157e <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001566:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800156a:	f113 0f04 	cmn.w	r3, #4
 800156e:	d101      	bne.n	8001574 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001570:	2306      	movs	r3, #6
 8001572:	e004      	b.n	800157e <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001578:	2302      	movs	r3, #2
 800157a:	e000      	b.n	800157e <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 800157c:	2304      	movs	r3, #4
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	080119d0 	.word	0x080119d0
 800158c:	080119dc 	.word	0x080119dc

08001590 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001598:	2302      	movs	r3, #2
 800159a:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f247 5230 	movw	r2, #30000	@ 0x7530
 80015a2:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01b      	beq.n	80015e8 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80015b6:	2000      	movs	r0, #0
 80015b8:	4798      	blx	r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d113      	bne.n	80015e8 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80015c6:	461a      	mov	r2, r3
 80015c8:	490a      	ldr	r1, [pc, #40]	@ (80015f4 <ES_WIFI_Init+0x64>)
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fef0 	bl	80013b0 <AT_ExecuteCommand>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fd98 	bl	8001118 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	080119ec 	.word	0x080119ec

080015f8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00b      	beq.n	8001624 <ES_WIFI_RegisterBusIO+0x2c>
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <ES_WIFI_RegisterBusIO+0x2c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <ES_WIFI_RegisterBusIO+0x2c>
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <ES_WIFI_RegisterBusIO+0x2c>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001624:	2302      	movs	r3, #2
 8001626:	e014      	b.n	8001652 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	4932      	ldr	r1, [pc, #200]	@ (8001740 <ES_WIFI_Connect+0xe0>)
 8001678:	4618      	mov	r0, r3
 800167a:	f00c fcb3 	bl	800dfe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800168a:	461a      	mov	r2, r3
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff fe8f 	bl	80013b0 <AT_ExecuteCommand>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d14b      	bne.n	8001734 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4927      	ldr	r1, [pc, #156]	@ (8001744 <ES_WIFI_Connect+0xe4>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00c fc9c 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016b8:	461a      	mov	r2, r3
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7ff fe78 	bl	80013b0 <AT_ExecuteCommand>
 80016c0:	4603      	mov	r3, r0
 80016c2:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d134      	bne.n	8001734 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	491b      	ldr	r1, [pc, #108]	@ (8001748 <ES_WIFI_Connect+0xe8>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f00c fc81 	bl	800dfe4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016ee:	461a      	mov	r2, r3
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7ff fe5d 	bl	80013b0 <AT_ExecuteCommand>
 80016f6:	4603      	mov	r3, r0
 80016f8:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d119      	bne.n	8001734 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001706:	4911      	ldr	r1, [pc, #68]	@ (800174c <ES_WIFI_Connect+0xec>)
 8001708:	4618      	mov	r0, r3
 800170a:	f00c fc6b 	bl	800dfe4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800171a:	461a      	mov	r2, r3
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff fe47 	bl	80013b0 <AT_ExecuteCommand>
 8001722:	4603      	mov	r3, r0
 8001724:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001734:	7dfb      	ldrb	r3, [r7, #23]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08011a04 	.word	0x08011a04
 8001744:	08011a0c 	.word	0x08011a0c
 8001748:	08011a14 	.word	0x08011a14
 800174c:	08011a1c 	.word	0x08011a1c

08001750 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800175e:	4913      	ldr	r1, [pc, #76]	@ (80017ac <ES_WIFI_IsConnected+0x5c>)
 8001760:	4618      	mov	r0, r3
 8001762:	f00c fc3f 	bl	800dfe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001772:	461a      	mov	r2, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fe1b 	bl	80013b0 <AT_ExecuteCommand>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800178a:	2b31      	cmp	r3, #49	@ 0x31
 800178c:	bf0c      	ite	eq
 800178e:	2301      	moveq	r3, #1
 8001790:	2300      	movne	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08011a20 	.word	0x08011a20

080017b0 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80017be:	4910      	ldr	r1, [pc, #64]	@ (8001800 <ES_WIFI_GetNetworkSettings+0x50>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00c fc0f 	bl	800dfe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80017d2:	461a      	mov	r2, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fdeb 	bl	80013b0 <AT_ExecuteCommand>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d108      	bne.n	80017f6 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	338d      	adds	r3, #141	@ 0x8d
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f7ff fd1f 	bl	8001234 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	08011a28 	.word	0x08011a28

08001804 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b087      	sub	sp, #28
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <ES_WIFI_StartClientConnection+0x1e>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d105      	bne.n	800182e <ES_WIFI_StartClientConnection+0x2a>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	885b      	ldrh	r3, [r3, #2]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <ES_WIFI_StartClientConnection+0x2a>
 800182a:	2302      	movs	r3, #2
 800182c:	e0b1      	b.n	8001992 <ES_WIFI_StartClientConnection+0x18e>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	461a      	mov	r2, r3
 800183a:	4958      	ldr	r1, [pc, #352]	@ (800199c <ES_WIFI_StartClientConnection+0x198>)
 800183c:	f00c fbd2 	bl	800dfe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800184c:	461a      	mov	r2, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fdae 	bl	80013b0 <AT_ExecuteCommand>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d114      	bne.n	8001888 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	494d      	ldr	r1, [pc, #308]	@ (80019a0 <ES_WIFI_StartClientConnection+0x19c>)
 800186c:	f00c fbba 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800187c:	461a      	mov	r2, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fd96 	bl	80013b0 <AT_ExecuteCommand>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d114      	bne.n	80018b8 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	889b      	ldrh	r3, [r3, #4]
 8001898:	461a      	mov	r2, r3
 800189a:	4942      	ldr	r1, [pc, #264]	@ (80019a4 <ES_WIFI_StartClientConnection+0x1a0>)
 800189c:	f00c fba2 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80018ac:	461a      	mov	r2, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fd7e 	bl	80013b0 <AT_ExecuteCommand>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <ES_WIFI_StartClientConnection+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	885b      	ldrh	r3, [r3, #2]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4937      	ldr	r1, [pc, #220]	@ (80019a8 <ES_WIFI_StartClientConnection+0x1a4>)
 80018cc:	f00c fb8a 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80018dc:	461a      	mov	r2, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd66 	bl	80013b0 <AT_ExecuteCommand>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d120      	bne.n	8001930 <ES_WIFI_StartClientConnection+0x12c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	799b      	ldrb	r3, [r3, #6]
 80018f8:	4619      	mov	r1, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	79db      	ldrb	r3, [r3, #7]
 80018fe:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001904:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	9200      	str	r2, [sp, #0]
 800190e:	4623      	mov	r3, r4
 8001910:	460a      	mov	r2, r1
 8001912:	4926      	ldr	r1, [pc, #152]	@ (80019ac <ES_WIFI_StartClientConnection+0x1a8>)
 8001914:	f00c fb66 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001924:	461a      	mov	r2, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fd42 	bl	80013b0 <AT_ExecuteCommand>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d116      	bne.n	8001964 <ES_WIFI_StartClientConnection+0x160>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d112      	bne.n	8001964 <ES_WIFI_StartClientConnection+0x160>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001944:	491a      	ldr	r1, [pc, #104]	@ (80019b0 <ES_WIFI_StartClientConnection+0x1ac>)
 8001946:	4618      	mov	r0, r3
 8001948:	f00c fb4c 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001958:	461a      	mov	r2, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fd28 	bl	80013b0 <AT_ExecuteCommand>
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d112      	bne.n	8001990 <ES_WIFI_StartClientConnection+0x18c>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001970:	4910      	ldr	r1, [pc, #64]	@ (80019b4 <ES_WIFI_StartClientConnection+0x1b0>)
 8001972:	4618      	mov	r0, r3
 8001974:	f00c fb36 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001984:	461a      	mov	r2, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fd12 	bl	80013b0 <AT_ExecuteCommand>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	08011ae0 	.word	0x08011ae0
 80019a0:	08011ae8 	.word	0x08011ae8
 80019a4:	08011af0 	.word	0x08011af0
 80019a8:	08011af8 	.word	0x08011af8
 80019ac:	08011b00 	.word	0x08011b00
 80019b0:	08011b10 	.word	0x08011b10
 80019b4:	08011b18 	.word	0x08011b18

080019b8 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4915      	ldr	r1, [pc, #84]	@ (8001a24 <ES_WIFI_StopClientConnection+0x6c>)
 80019d0:	f00c fb08 	bl	800dfe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80019e0:	461a      	mov	r2, r3
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fce4 	bl	80013b0 <AT_ExecuteCommand>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d112      	bne.n	8001a18 <ES_WIFI_StopClientConnection+0x60>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80019f8:	490b      	ldr	r1, [pc, #44]	@ (8001a28 <ES_WIFI_StopClientConnection+0x70>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00c faf2 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff fcce 	bl	80013b0 <AT_ExecuteCommand>
 8001a14:	4603      	mov	r3, r0
 8001a16:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();

  return ret;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	08011ae0 	.word	0x08011ae0
 8001a28:	08011b20 	.word	0x08011b20

08001a2c <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	72fb      	strb	r3, [r7, #11]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001a40:	2302      	movs	r3, #2
 8001a42:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e001      	b.n	8001a54 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8001a54:	893b      	ldrh	r3, [r7, #8]
 8001a56:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001a5a:	d302      	bcc.n	8001a62 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8001a5c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8001a60:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	893a      	ldrh	r2, [r7, #8]
 8001a66:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a6e:	7afa      	ldrb	r2, [r7, #11]
 8001a70:	4942      	ldr	r1, [pc, #264]	@ (8001b7c <ES_WIFI_SendData+0x150>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00c fab6 	bl	800dfe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a84:	461a      	mov	r2, r3
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fc92 	bl	80013b0 <AT_ExecuteCommand>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8001a90:	7cfb      	ldrb	r3, [r7, #19]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d15e      	bne.n	8001b54 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4938      	ldr	r1, [pc, #224]	@ (8001b80 <ES_WIFI_SendData+0x154>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00c fa9f 	bl	800dfe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fc7b 	bl	80013b0 <AT_ExecuteCommand>
 8001aba:	4603      	mov	r3, r0
 8001abc:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d13d      	bne.n	8001b40 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001aca:	893a      	ldrh	r2, [r7, #8]
 8001acc:	492d      	ldr	r1, [pc, #180]	@ (8001b84 <ES_WIFI_SendData+0x158>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00c fa88 	bl	800dfe4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ae0:	893a      	ldrh	r2, [r7, #8]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fcd1 	bl	8001490 <AT_RequestSendData>
 8001aee:	4603      	mov	r3, r0
 8001af0:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8001af2:	7cfb      	ldrb	r3, [r7, #19]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d119      	bne.n	8001b2c <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001afe:	4922      	ldr	r1, [pc, #136]	@ (8001b88 <ES_WIFI_SendData+0x15c>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00c fbf3 	bl	800e2ec <strstr>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d02c      	beq.n	8001b66 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001b0c:	f640 1201 	movw	r2, #2305	@ 0x901
 8001b10:	491e      	ldr	r1, [pc, #120]	@ (8001b8c <ES_WIFI_SendData+0x160>)
 8001b12:	481f      	ldr	r0, [pc, #124]	@ (8001b90 <ES_WIFI_SendData+0x164>)
 8001b14:	f00c f9f6 	bl	800df04 <iprintf>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001b1e:	4619      	mov	r1, r3
 8001b20:	481c      	ldr	r0, [pc, #112]	@ (8001b94 <ES_WIFI_SendData+0x168>)
 8001b22:	f00c f9ef 	bl	800df04 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001b26:	2302      	movs	r3, #2
 8001b28:	74fb      	strb	r3, [r7, #19]
 8001b2a:	e01c      	b.n	8001b66 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8001b2c:	f640 1207 	movw	r2, #2311	@ 0x907
 8001b30:	4916      	ldr	r1, [pc, #88]	@ (8001b8c <ES_WIFI_SendData+0x160>)
 8001b32:	4817      	ldr	r0, [pc, #92]	@ (8001b90 <ES_WIFI_SendData+0x164>)
 8001b34:	f00c f9e6 	bl	800df04 <iprintf>
 8001b38:	4817      	ldr	r0, [pc, #92]	@ (8001b98 <ES_WIFI_SendData+0x16c>)
 8001b3a:	f00c fa4b 	bl	800dfd4 <puts>
 8001b3e:	e012      	b.n	8001b66 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001b40:	f640 120c 	movw	r2, #2316	@ 0x90c
 8001b44:	4911      	ldr	r1, [pc, #68]	@ (8001b8c <ES_WIFI_SendData+0x160>)
 8001b46:	4812      	ldr	r0, [pc, #72]	@ (8001b90 <ES_WIFI_SendData+0x164>)
 8001b48:	f00c f9dc 	bl	800df04 <iprintf>
 8001b4c:	4813      	ldr	r0, [pc, #76]	@ (8001b9c <ES_WIFI_SendData+0x170>)
 8001b4e:	f00c fa41 	bl	800dfd4 <puts>
 8001b52:	e008      	b.n	8001b66 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001b54:	f640 1211 	movw	r2, #2321	@ 0x911
 8001b58:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <ES_WIFI_SendData+0x160>)
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <ES_WIFI_SendData+0x164>)
 8001b5c:	f00c f9d2 	bl	800df04 <iprintf>
 8001b60:	480f      	ldr	r0, [pc, #60]	@ (8001ba0 <ES_WIFI_SendData+0x174>)
 8001b62:	f00c fa37 	bl	800dfd4 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001b66:	7cfb      	ldrb	r3, [r7, #19]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d102      	bne.n	8001b72 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8001b72:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08011ae0 	.word	0x08011ae0
 8001b80:	08011c94 	.word	0x08011c94
 8001b84:	08011c9c 	.word	0x08011c9c
 8001b88:	08011ca8 	.word	0x08011ca8
 8001b8c:	08011b70 	.word	0x08011b70
 8001b90:	08011b88 	.word	0x08011b88
 8001b94:	08011cb0 	.word	0x08011cb0
 8001b98:	08011ccc 	.word	0x08011ccc
 8001b9c:	08011ce8 	.word	0x08011ce8
 8001ba0:	08011cfc 	.word	0x08011cfc

08001ba4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	@ 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8001bac:	4b57      	ldr	r3, [pc, #348]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	4a56      	ldr	r2, [pc, #344]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb8:	4b54      	ldr	r3, [pc, #336]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b51      	ldr	r3, [pc, #324]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc8:	4a50      	ldr	r2, [pc, #320]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be0:	4a4a      	ldr	r2, [pc, #296]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be8:	4b48      	ldr	r3, [pc, #288]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bf4:	4b45      	ldr	r3, [pc, #276]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf8:	4a44      	ldr	r2, [pc, #272]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001bfa:	f043 0310 	orr.w	r3, r3, #16
 8001bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c00:	4b42      	ldr	r3, [pc, #264]	@ (8001d0c <SPI_WIFI_MspInit+0x168>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c12:	483f      	ldr	r0, [pc, #252]	@ (8001d10 <SPI_WIFI_MspInit+0x16c>)
 8001c14:	f002 fbda 	bl	80043cc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001c18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c1c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4837      	ldr	r0, [pc, #220]	@ (8001d10 <SPI_WIFI_MspInit+0x16c>)
 8001c32:	f002 f915 	bl	8003e60 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001c3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c3e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4831      	ldr	r0, [pc, #196]	@ (8001d14 <SPI_WIFI_MspInit+0x170>)
 8001c50:	f002 f906 	bl	8003e60 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4828      	ldr	r0, [pc, #160]	@ (8001d14 <SPI_WIFI_MspInit+0x170>)
 8001c72:	f002 f8f5 	bl	8003e60 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001c76:	2201      	movs	r2, #1
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4826      	ldr	r0, [pc, #152]	@ (8001d14 <SPI_WIFI_MspInit+0x170>)
 8001c7c:	f002 fba6 	bl	80043cc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	481f      	ldr	r0, [pc, #124]	@ (8001d14 <SPI_WIFI_MspInit+0x170>)
 8001c98:	f002 f8e2 	bl	8003e60 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001c9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001caa:	2301      	movs	r3, #1
 8001cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001cae:	2306      	movs	r3, #6
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4817      	ldr	r0, [pc, #92]	@ (8001d18 <SPI_WIFI_MspInit+0x174>)
 8001cba:	f002 f8d1 	bl	8003e60 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480f      	ldr	r0, [pc, #60]	@ (8001d18 <SPI_WIFI_MspInit+0x174>)
 8001cdc:	f002 f8c0 	bl	8003e60 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001ce0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <SPI_WIFI_MspInit+0x174>)
 8001cfe:	f002 f8af 	bl	8003e60 <HAL_GPIO_Init>
}
 8001d02:	bf00      	nop
 8001d04:	3730      	adds	r7, #48	@ 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000400 	.word	0x48000400
 8001d14:	48001000 	.word	0x48001000
 8001d18:	48000800 	.word	0x48000800

08001d1c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d145      	bne.n	8001dbc <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d32:	4a28      	ldr	r2, [pc, #160]	@ (8001dd4 <SPI_WIFI_Init+0xb8>)
 8001d34:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001d36:	4826      	ldr	r0, [pc, #152]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d38:	f7ff ff34 	bl	8001ba4 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001d3c:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d3e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d42:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001d44:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d4c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001d50:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d64:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d68:	2210      	movs	r2, #16
 8001d6a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001d84:	4812      	ldr	r0, [pc, #72]	@ (8001dd0 <SPI_WIFI_Init+0xb4>)
 8001d86:	f004 fc97 	bl	80066b8 <HAL_SPI_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	e018      	b.n	8001dc8 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2007      	movs	r0, #7
 8001d9c:	f001 ffe9 	bl	8003d72 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001da0:	2007      	movs	r0, #7
 8001da2:	f002 f802 	bl	8003daa <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2033      	movs	r0, #51	@ 0x33
 8001dac:	f001 ffe1 	bl	8003d72 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001db0:	2033      	movs	r0, #51	@ 0x33
 8001db2:	f001 fffa 	bl	8003daa <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001db6:	200a      	movs	r0, #10
 8001db8:	f000 fa08 	bl	80021cc <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8001dbc:	f000 f80c 	bl	8001dd8 <SPI_WIFI_ResetModule>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000238 	.word	0x20000238
 8001dd4:	40003c00 	.word	0x40003c00

08001dd8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001dde:	f001 febd 	bl	8003b5c <HAL_GetTick>
 8001de2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dee:	4835      	ldr	r0, [pc, #212]	@ (8001ec4 <SPI_WIFI_ResetModule+0xec>)
 8001df0:	f002 faec 	bl	80043cc <HAL_GPIO_WritePin>
 8001df4:	200a      	movs	r0, #10
 8001df6:	f001 febd 	bl	8003b74 <HAL_Delay>
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e00:	4830      	ldr	r0, [pc, #192]	@ (8001ec4 <SPI_WIFI_ResetModule+0xec>)
 8001e02:	f002 fae3 	bl	80043cc <HAL_GPIO_WritePin>
 8001e06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e0a:	f001 feb3 	bl	8003b74 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2101      	movs	r1, #1
 8001e12:	482c      	ldr	r0, [pc, #176]	@ (8001ec4 <SPI_WIFI_ResetModule+0xec>)
 8001e14:	f002 fada 	bl	80043cc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001e18:	200f      	movs	r0, #15
 8001e1a:	f000 f9d7 	bl	80021cc <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8001e1e:	e02b      	b.n	8001e78 <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d907      	bls.n	8001e36 <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 8001e26:	2201      	movs	r2, #1
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4826      	ldr	r0, [pc, #152]	@ (8001ec4 <SPI_WIFI_ResetModule+0xec>)
 8001e2c:	f002 face 	bl	80043cc <HAL_GPIO_WritePin>
      return -1;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	e042      	b.n	8001ebc <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	463a      	mov	r2, r7
 8001e3a:	18d1      	adds	r1, r2, r3
 8001e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e40:	2201      	movs	r2, #1
 8001e42:	4821      	ldr	r0, [pc, #132]	@ (8001ec8 <SPI_WIFI_ResetModule+0xf0>)
 8001e44:	f004 fd03 	bl	800684e <HAL_SPI_Receive>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	3302      	adds	r3, #2
 8001e50:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001e52:	f001 fe83 	bl	8003b5c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e60:	d202      	bcs.n	8001e68 <SPI_WIFI_ResetModule+0x90>
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4815      	ldr	r0, [pc, #84]	@ (8001ec4 <SPI_WIFI_ResetModule+0xec>)
 8001e6e:	f002 faad 	bl	80043cc <HAL_GPIO_WritePin>
      return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e021      	b.n	8001ebc <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4812      	ldr	r0, [pc, #72]	@ (8001ec4 <SPI_WIFI_ResetModule+0xec>)
 8001e7c:	f002 fa8e 	bl	800439c <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d0cc      	beq.n	8001e20 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8001e86:	2201      	movs	r2, #1
 8001e88:	2101      	movs	r1, #1
 8001e8a:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <SPI_WIFI_ResetModule+0xec>)
 8001e8c:	f002 fa9e 	bl	80043cc <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001e90:	783b      	ldrb	r3, [r7, #0]
 8001e92:	2b15      	cmp	r3, #21
 8001e94:	d10e      	bne.n	8001eb4 <SPI_WIFI_ResetModule+0xdc>
 8001e96:	787b      	ldrb	r3, [r7, #1]
 8001e98:	2b15      	cmp	r3, #21
 8001e9a:	d10b      	bne.n	8001eb4 <SPI_WIFI_ResetModule+0xdc>
 8001e9c:	78bb      	ldrb	r3, [r7, #2]
 8001e9e:	2b0d      	cmp	r3, #13
 8001ea0:	d108      	bne.n	8001eb4 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001ea4:	2b0a      	cmp	r3, #10
 8001ea6:	d105      	bne.n	8001eb4 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001ea8:	793b      	ldrb	r3, [r7, #4]
 8001eaa:	2b3e      	cmp	r3, #62	@ 0x3e
 8001eac:	d102      	bne.n	8001eb4 <SPI_WIFI_ResetModule+0xdc>
 8001eae:	797b      	ldrb	r3, [r7, #5]
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d002      	beq.n	8001eba <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	e000      	b.n	8001ebc <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	20000238 	.word	0x20000238

08001ecc <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <SPI_WIFI_DeInit+0x10>)
 8001ed2:	f004 fc94 	bl	80067fe <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000238 	.word	0x20000238

08001ee0 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001ee8:	f001 fe38 	bl	8003b5c <HAL_GetTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001ef0:	e00a      	b.n	8001f08 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ef2:	f001 fe33 	bl	8003b5c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d902      	bls.n	8001f08 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e007      	b.n	8001f18 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001f08:	2102      	movs	r1, #2
 8001f0a:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <wait_cmddata_rdy_high+0x40>)
 8001f0c:	f002 fa46 	bl	800439c <HAL_GPIO_ReadPin>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d1ed      	bne.n	8001ef2 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	48001000 	.word	0x48001000

08001f24 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001f2c:	f001 fe16 	bl	8003b5c <HAL_GetTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8001f34:	e00a      	b.n	8001f4c <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f36:	f001 fe11 	bl	8003b5c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad2      	subs	r2, r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d902      	bls.n	8001f4c <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e004      	b.n	8001f56 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8001f4c:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <wait_cmddata_rdy_rising_event+0x3c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d0f0      	beq.n	8001f36 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001f54:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200002a4 	.word	0x200002a4

08001f64 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001f6c:	f001 fdf6 	bl	8003b5c <HAL_GetTick>
 8001f70:	4603      	mov	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8001f74:	e00a      	b.n	8001f8c <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f76:	f001 fdf1 	bl	8003b5c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad2      	subs	r2, r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d902      	bls.n	8001f8c <wait_spi_rx_event+0x28>
    {
      return -1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e004      	b.n	8001f96 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8001f8c:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <wait_spi_rx_event+0x3c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d0f0      	beq.n	8001f76 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001f94:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000029c 	.word	0x2000029c

08001fa4 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001fac:	f001 fdd6 	bl	8003b5c <HAL_GetTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8001fb4:	e00a      	b.n	8001fcc <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001fb6:	f001 fdd1 	bl	8003b5c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d902      	bls.n	8001fcc <wait_spi_tx_event+0x28>
    {
      return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e004      	b.n	8001fd6 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8001fcc:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <wait_spi_tx_event+0x3c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d0f0      	beq.n	8001fb6 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001fd4:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200002a0 	.word	0x200002a0

08001fe4 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	460b      	mov	r3, r1
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4834      	ldr	r0, [pc, #208]	@ (80020cc <SPI_WIFI_ReceiveData+0xe8>)
 8001ffc:	f002 f9e6 	bl	80043cc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002000:	2003      	movs	r0, #3
 8002002:	f000 f8e3 	bl	80021cc <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff8b 	bl	8001f24 <wait_cmddata_rdy_rising_event>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	da02      	bge.n	800201a <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002014:	f06f 0302 	mvn.w	r3, #2
 8002018:	e054      	b.n	80020c4 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800201a:	2200      	movs	r2, #0
 800201c:	2101      	movs	r1, #1
 800201e:	482b      	ldr	r0, [pc, #172]	@ (80020cc <SPI_WIFI_ReceiveData+0xe8>)
 8002020:	f002 f9d4 	bl	80043cc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002024:	200f      	movs	r0, #15
 8002026:	f000 f8d1 	bl	80021cc <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800202a:	e03d      	b.n	80020a8 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 800202c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002030:	897b      	ldrh	r3, [r7, #10]
 8002032:	429a      	cmp	r2, r3
 8002034:	db02      	blt.n	800203c <SPI_WIFI_ReceiveData+0x58>
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d13c      	bne.n	80020b6 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 800203c:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <SPI_WIFI_ReceiveData+0xec>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	2201      	movs	r2, #1
 8002048:	4619      	mov	r1, r3
 800204a:	4822      	ldr	r0, [pc, #136]	@ (80020d4 <SPI_WIFI_ReceiveData+0xf0>)
 800204c:	f004 ffde 	bl	800700c <HAL_SPI_Receive_IT>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8002056:	2201      	movs	r2, #1
 8002058:	2101      	movs	r1, #1
 800205a:	481c      	ldr	r0, [pc, #112]	@ (80020cc <SPI_WIFI_ReceiveData+0xe8>)
 800205c:	f002 f9b6 	bl	80043cc <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
 8002064:	e02e      	b.n	80020c4 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff7b 	bl	8001f64 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800206e:	7d3a      	ldrb	r2, [r7, #20]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3301      	adds	r3, #1
 8002078:	7d7a      	ldrb	r2, [r7, #21]
 800207a:	701a      	strb	r2, [r3, #0]
      length += 2;
 800207c:	8afb      	ldrh	r3, [r7, #22]
 800207e:	3302      	adds	r3, #2
 8002080:	b29b      	uxth	r3, r3
 8002082:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	3302      	adds	r3, #2
 8002088:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 800208a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800208e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002092:	db09      	blt.n	80020a8 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002094:	2201      	movs	r2, #1
 8002096:	2101      	movs	r1, #1
 8002098:	480c      	ldr	r0, [pc, #48]	@ (80020cc <SPI_WIFI_ReceiveData+0xe8>)
 800209a:	f002 f997 	bl	80043cc <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800209e:	f7ff fe9b 	bl	8001dd8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80020a2:	f06f 0303 	mvn.w	r3, #3
 80020a6:	e00d      	b.n	80020c4 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80020a8:	2102      	movs	r1, #2
 80020aa:	4808      	ldr	r0, [pc, #32]	@ (80020cc <SPI_WIFI_ReceiveData+0xe8>)
 80020ac:	f002 f976 	bl	800439c <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d0ba      	beq.n	800202c <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80020b6:	2201      	movs	r2, #1
 80020b8:	2101      	movs	r1, #1
 80020ba:	4804      	ldr	r0, [pc, #16]	@ (80020cc <SPI_WIFI_ReceiveData+0xe8>)
 80020bc:	f002 f986 	bl	80043cc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80020c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	48001000 	.word	0x48001000
 80020d0:	2000029c 	.word	0x2000029c
 80020d4:	20000238 	.word	0x20000238

080020d8 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	460b      	mov	r3, r1
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fef9 	bl	8001ee0 <wait_cmddata_rdy_high>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da02      	bge.n	80020fa <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
 80020f8:	e04f      	b.n	800219a <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <SPI_WIFI_SendData+0xcc>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002100:	2200      	movs	r2, #0
 8002102:	2101      	movs	r1, #1
 8002104:	4828      	ldr	r0, [pc, #160]	@ (80021a8 <SPI_WIFI_SendData+0xd0>)
 8002106:	f002 f961 	bl	80043cc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800210a:	200f      	movs	r0, #15
 800210c:	f000 f85e 	bl	80021cc <SPI_WIFI_DelayUs>
  if (len > 1)
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d919      	bls.n	800214a <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <SPI_WIFI_SendData+0xd4>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 800211c:	897b      	ldrh	r3, [r7, #10]
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	b29b      	uxth	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	68f9      	ldr	r1, [r7, #12]
 8002126:	4822      	ldr	r0, [pc, #136]	@ (80021b0 <SPI_WIFI_SendData+0xd8>)
 8002128:	f004 fee8 	bl	8006efc <HAL_SPI_Transmit_IT>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8002132:	2201      	movs	r2, #1
 8002134:	2101      	movs	r1, #1
 8002136:	481c      	ldr	r0, [pc, #112]	@ (80021a8 <SPI_WIFI_SendData+0xd0>)
 8002138:	f002 f948 	bl	80043cc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
 8002140:	e02b      	b.n	800219a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff2d 	bl	8001fa4 <wait_spi_tx_event>
  }

  if (len & 1)
 800214a:	897b      	ldrh	r3, [r7, #10]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8002154:	897b      	ldrh	r3, [r7, #10]
 8002156:	3b01      	subs	r3, #1
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002160:	230a      	movs	r3, #10
 8002162:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <SPI_WIFI_SendData+0xd4>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2201      	movs	r2, #1
 8002170:	4619      	mov	r1, r3
 8002172:	480f      	ldr	r0, [pc, #60]	@ (80021b0 <SPI_WIFI_SendData+0xd8>)
 8002174:	f004 fec2 	bl	8006efc <HAL_SPI_Transmit_IT>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800217e:	2201      	movs	r2, #1
 8002180:	2101      	movs	r1, #1
 8002182:	4809      	ldr	r0, [pc, #36]	@ (80021a8 <SPI_WIFI_SendData+0xd0>)
 8002184:	f002 f922 	bl	80043cc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	e005      	b.n	800219a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff07 	bl	8001fa4 <wait_spi_tx_event>
  }
  return len;
 8002196:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002a4 	.word	0x200002a4
 80021a8:	48001000 	.word	0x48001000
 80021ac:	200002a0 	.word	0x200002a0
 80021b0:	20000238 	.word	0x20000238

080021b4 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f001 fcd9 	bl	8003b74 <HAL_Delay>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 80021dc:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <SPI_WIFI_DelayUs+0x94>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d122      	bne.n	800222a <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80021e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <SPI_WIFI_DelayUs+0x98>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <SPI_WIFI_DelayUs+0x9c>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80021fa:	f001 fcaf 	bl	8003b5c <HAL_GetTick>
 80021fe:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002200:	e002      	b.n	8002208 <SPI_WIFI_DelayUs+0x3c>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 800220e:	f001 fca5 	bl	8003b5c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	4a11      	ldr	r2, [pc, #68]	@ (8002260 <SPI_WIFI_DelayUs+0x94>)
 800221a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800221c:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <SPI_WIFI_DelayUs+0x94>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <SPI_WIFI_DelayUs+0x5e>
 8002224:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <SPI_WIFI_DelayUs+0x94>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <SPI_WIFI_DelayUs+0x98>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a0f      	ldr	r2, [pc, #60]	@ (800226c <SPI_WIFI_DelayUs+0xa0>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	0c9a      	lsrs	r2, r3, #18
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <SPI_WIFI_DelayUs+0x94>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800224a:	e002      	b.n	8002252 <SPI_WIFI_DelayUs+0x86>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3b01      	subs	r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f9      	bne.n	800224c <SPI_WIFI_DelayUs+0x80>
  return;
 8002258:	bf00      	nop
}
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200002a8 	.word	0x200002a8
 8002264:	20000004 	.word	0x20000004
 8002268:	10624dd3 	.word	0x10624dd3
 800226c:	431bde83 	.word	0x431bde83

08002270 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_SPI_RxCpltCallback+0x24>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <HAL_SPI_RxCpltCallback+0x24>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2000029c 	.word	0x2000029c

08002298 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_SPI_TxCpltCallback+0x24>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80022a8:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <HAL_SPI_TxCpltCallback+0x24>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	200002a0 	.word	0x200002a0

080022c0 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <SPI_WIFI_ISR+0x1c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80022cc:	4b03      	ldr	r3, [pc, #12]	@ (80022dc <SPI_WIFI_ISR+0x1c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
   }
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	200002a4 	.word	0x200002a4

080022e0 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern UART_HandleTypeDef hDiscoUart;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
//	printf("Timer interrupt\r\n");
	if(htim == &htim4){
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a06      	ldr	r2, [pc, #24]	@ (8002304 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x1a>
//		printf("Releasing\r\n");
		osSemaphoreRelease(samplingSemaphoreHandle);
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f007 f97b 	bl	80095f0 <osSemaphoreRelease>
//		printf("Released success\r\n");
	}
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200002ac 	.word	0x200002ac
 8002308:	20001020 	.word	0x20001020

0800230c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002310:	f001 fbbc 	bl	8003a8c <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 8002314:	f001 fa4c 	bl	80037b0 <BSP_ACCELERO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002318:	f000 f88a 	bl	8002430 <SystemClock_Config>
//  MX_QUADSPI_Init();
//  MX_SPI3_Init();
//  MX_USART1_UART_Init();
//  MX_USART3_UART_Init();
//  MX_USB_OTG_FS_PCD_Init();
  MX_TIM4_Init();
 800231c:	f000 f8ea 	bl	80024f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8002320:	4b30      	ldr	r3, [pc, #192]	@ (80023e4 <main+0xd8>)
 8002322:	4a31      	ldr	r2, [pc, #196]	@ (80023e8 <main+0xdc>)
 8002324:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8002326:	4b2f      	ldr	r3, [pc, #188]	@ (80023e4 <main+0xd8>)
 8002328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800232c:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b2d      	ldr	r3, [pc, #180]	@ (80023e4 <main+0xd8>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b2b      	ldr	r3, [pc, #172]	@ (80023e4 <main+0xd8>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800233a:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <main+0xd8>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <main+0xd8>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b27      	ldr	r3, [pc, #156]	@ (80023e4 <main+0xd8>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <main+0xd8>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002352:	4b24      	ldr	r3, [pc, #144]	@ (80023e4 <main+0xd8>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002358:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <main+0xd8>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 800235e:	4921      	ldr	r1, [pc, #132]	@ (80023e4 <main+0xd8>)
 8002360:	2000      	movs	r0, #0
 8002362:	f001 f869 	bl	8003438 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  printf("Wifi_init\r\n");
 8002366:	4821      	ldr	r0, [pc, #132]	@ (80023ec <main+0xe0>)
 8002368:	f00b fe34 	bl	800dfd4 <puts>
  WIFI_Init();
 800236c:	f000 ff4e 	bl	800320c <WIFI_Init>
  printf("Wifi initialized\r\n");
 8002370:	481f      	ldr	r0, [pc, #124]	@ (80023f0 <main+0xe4>)
 8002372:	f00b fe2f 	bl	800dfd4 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002376:	f006 ff57 	bl	8009228 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of samplingSemaphore */
  samplingSemaphoreHandle = osSemaphoreNew(1, 0, &samplingSemaphore_attributes);
 800237a:	4a1e      	ldr	r2, [pc, #120]	@ (80023f4 <main+0xe8>)
 800237c:	2100      	movs	r1, #0
 800237e:	2001      	movs	r0, #1
 8002380:	f007 f85b 	bl	800943a <osSemaphoreNew>
 8002384:	4603      	mov	r3, r0
 8002386:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <main+0xec>)
 8002388:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rawDataQueue */
  rawDataQueueHandle = osMessageQueueNew (5, sizeof(AccelDataBlock_t), &rawDataQueue_attributes);
 800238a:	4a1c      	ldr	r2, [pc, #112]	@ (80023fc <main+0xf0>)
 800238c:	21b4      	movs	r1, #180	@ 0xb4
 800238e:	2005      	movs	r0, #5
 8002390:	f007 f972 	bl	8009678 <osMessageQueueNew>
 8002394:	4603      	mov	r3, r0
 8002396:	4a1a      	ldr	r2, [pc, #104]	@ (8002400 <main+0xf4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* creation of processedDataQueue */
  processedDataQueueHandle = osMessageQueueNew (5, sizeof(ProcessedDataBlock_t), &processedDataQueue_attributes);
 800239a:	4a1a      	ldr	r2, [pc, #104]	@ (8002404 <main+0xf8>)
 800239c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80023a0:	2005      	movs	r0, #5
 80023a2:	f007 f969 	bl	8009678 <osMessageQueueNew>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4a17      	ldr	r2, [pc, #92]	@ (8002408 <main+0xfc>)
 80023aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(StartSensorTask, NULL, &SensorTask_attributes);
 80023ac:	4a17      	ldr	r2, [pc, #92]	@ (800240c <main+0x100>)
 80023ae:	2100      	movs	r1, #0
 80023b0:	4817      	ldr	r0, [pc, #92]	@ (8002410 <main+0x104>)
 80023b2:	f006 ff83 	bl	80092bc <osThreadNew>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <main+0x108>)
 80023ba:	6013      	str	r3, [r2, #0]

  /* creation of FilterTask */
  FilterTaskHandle = osThreadNew(StartFilterTask, NULL, &FilterTask_attributes);
 80023bc:	4a16      	ldr	r2, [pc, #88]	@ (8002418 <main+0x10c>)
 80023be:	2100      	movs	r1, #0
 80023c0:	4816      	ldr	r0, [pc, #88]	@ (800241c <main+0x110>)
 80023c2:	f006 ff7b 	bl	80092bc <osThreadNew>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <main+0x114>)
 80023ca:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTask */
  TransmitTaskHandle = osThreadNew(StartTransmitTask, NULL, &TransmitTask_attributes);
 80023cc:	4a15      	ldr	r2, [pc, #84]	@ (8002424 <main+0x118>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	4815      	ldr	r0, [pc, #84]	@ (8002428 <main+0x11c>)
 80023d2:	f006 ff73 	bl	80092bc <osThreadNew>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a14      	ldr	r2, [pc, #80]	@ (800242c <main+0x120>)
 80023da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80023dc:	f006 ff48 	bl	8009270 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <main+0xd4>
 80023e4:	20002594 	.word	0x20002594
 80023e8:	40013800 	.word	0x40013800
 80023ec:	08011ea0 	.word	0x08011ea0
 80023f0:	08011eac 	.word	0x08011eac
 80023f4:	080121f0 	.word	0x080121f0
 80023f8:	20001020 	.word	0x20001020
 80023fc:	080121c0 	.word	0x080121c0
 8002400:	20001018 	.word	0x20001018
 8002404:	080121d8 	.word	0x080121d8
 8002408:	2000101c 	.word	0x2000101c
 800240c:	08012154 	.word	0x08012154
 8002410:	08002595 	.word	0x08002595
 8002414:	200002f8 	.word	0x200002f8
 8002418:	08012178 	.word	0x08012178
 800241c:	08002681 	.word	0x08002681
 8002420:	20000758 	.word	0x20000758
 8002424:	0801219c 	.word	0x0801219c
 8002428:	080027cd 	.word	0x080027cd
 800242c:	20000bb8 	.word	0x20000bb8

08002430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b096      	sub	sp, #88	@ 0x58
 8002434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	2244      	movs	r2, #68	@ 0x44
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f00b feca 	bl	800e1d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002444:	463b      	mov	r3, r7
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002452:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002456:	f002 fe0d 	bl	8005074 <HAL_PWREx_ControlVoltageScaling>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002460:	f000 fb90 	bl	8002b84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002464:	f002 fde8 	bl	8005038 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002468:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <SystemClock_Config+0xc0>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246e:	4a20      	ldr	r2, [pc, #128]	@ (80024f0 <SystemClock_Config+0xc0>)
 8002470:	f023 0318 	bic.w	r3, r3, #24
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002478:	2314      	movs	r3, #20
 800247a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800247c:	2301      	movs	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002480:	2301      	movs	r3, #1
 8002482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002488:	2360      	movs	r3, #96	@ 0x60
 800248a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248c:	2302      	movs	r3, #2
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002490:	2301      	movs	r3, #1
 8002492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002498:	2328      	movs	r3, #40	@ 0x28
 800249a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800249c:	2307      	movs	r3, #7
 800249e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024a0:	2302      	movs	r3, #2
 80024a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024a4:	2302      	movs	r3, #2
 80024a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fe37 	bl	8005120 <HAL_RCC_OscConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80024b8:	f000 fb64 	bl	8002b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024bc:	230f      	movs	r3, #15
 80024be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c0:	2303      	movs	r3, #3
 80024c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024d0:	463b      	mov	r3, r7
 80024d2:	2104      	movs	r1, #4
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 f9ff 	bl	80058d8 <HAL_RCC_ClockConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80024e0:	f000 fb50 	bl	8002b84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80024e4:	f003 ff06 	bl	80062f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80024e8:	bf00      	nop
 80024ea:	3758      	adds	r7, #88	@ 0x58
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000

080024f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002512:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <MX_TIM4_Init+0x98>)
 8002514:	4a1e      	ldr	r2, [pc, #120]	@ (8002590 <MX_TIM4_Init+0x9c>)
 8002516:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8002518:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <MX_TIM4_Init+0x98>)
 800251a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800251e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <MX_TIM4_Init+0x98>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002526:	4b19      	ldr	r3, [pc, #100]	@ (800258c <MX_TIM4_Init+0x98>)
 8002528:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800252c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252e:	4b17      	ldr	r3, [pc, #92]	@ (800258c <MX_TIM4_Init+0x98>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002534:	4b15      	ldr	r3, [pc, #84]	@ (800258c <MX_TIM4_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800253a:	4814      	ldr	r0, [pc, #80]	@ (800258c <MX_TIM4_Init+0x98>)
 800253c:	f005 fbef 	bl	8007d1e <HAL_TIM_Base_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002546:	f000 fb1d 	bl	8002b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800254e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4619      	mov	r1, r3
 8002556:	480d      	ldr	r0, [pc, #52]	@ (800258c <MX_TIM4_Init+0x98>)
 8002558:	f005 fdaf 	bl	80080ba <HAL_TIM_ConfigClockSource>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002562:	f000 fb0f 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	@ (800258c <MX_TIM4_Init+0x98>)
 8002574:	f005 ffd2 	bl	800851c <HAL_TIMEx_MasterConfigSynchronization>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800257e:	f000 fb01 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200002ac 	.word	0x200002ac
 8002590:	40000800 	.word	0x40000800

08002594 <StartSensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void *argument)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("Start sensor task\r\n");
 800259c:	4831      	ldr	r0, [pc, #196]	@ (8002664 <StartSensorTask+0xd0>)
 800259e:	f00b fd19 	bl	800dfd4 <puts>
	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 80025a2:	4831      	ldr	r0, [pc, #196]	@ (8002668 <StartSensorTask+0xd4>)
 80025a4:	f005 fc12 	bl	8007dcc <HAL_TIM_Base_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <StartSensorTask+0x26>
	  {
	      // Handle Timer start error
	      printf("timer start error\r\n");
 80025ae:	482f      	ldr	r0, [pc, #188]	@ (800266c <StartSensorTask+0xd8>)
 80025b0:	f00b fd10 	bl	800dfd4 <puts>
	      osThreadTerminate(NULL); // Terminate task if timer fails
 80025b4:	2000      	movs	r0, #0
 80025b6:	f006 ff13 	bl	80093e0 <osThreadTerminate>
	  }
	  /* Infinite loop */
	  static AccelDataBlock_t data;
	  int16_t acc_xyz[3] = {0};  // Measured acceleration value
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	809a      	strh	r2, [r3, #4]
	  osStatus_t status;

	  while(1)
	  {
	    for (uint32_t i = 0; i < BLOCK_SIZE; i++) {
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	e039      	b.n	800263e <StartSensorTask+0xaa>
//	    	printf("Acquiring semaphore\r\n");
	    	status = osSemaphoreAcquire(samplingSemaphoreHandle, osWaitForever);
 80025ca:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <StartSensorTask+0xdc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f04f 31ff 	mov.w	r1, #4294967295
 80025d2:	4618      	mov	r0, r3
 80025d4:	f006 ffba 	bl	800954c <osSemaphoreAcquire>
 80025d8:	6178      	str	r0, [r7, #20]

			if (status == osOK) {
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d12b      	bne.n	8002638 <StartSensorTask+0xa4>
//			  printf("Getting acceleration values\r\n");
			  BSP_ACCELERO_AccGetXYZ(acc_xyz);
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	4618      	mov	r0, r3
 80025e6:	f001 f923 	bl	8003830 <BSP_ACCELERO_AccGetXYZ>
			  data.x[i] = (float32_t)acc_xyz[0];
 80025ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002674 <StartSensorTask+0xe0>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	edc3 7a00 	vstr	s15, [r3]
			  data.y[i] = (float32_t)acc_xyz[1];
 8002602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800260e:	4a19      	ldr	r2, [pc, #100]	@ (8002674 <StartSensorTask+0xe0>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	330e      	adds	r3, #14
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3304      	adds	r3, #4
 800261a:	edc3 7a00 	vstr	s15, [r3]
			  data.z[i] = (float32_t)acc_xyz[2];
 800261e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262a:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <StartSensorTask+0xe0>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	331e      	adds	r3, #30
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	edc3 7a00 	vstr	s15, [r3]
	    for (uint32_t i = 0; i < BLOCK_SIZE; i++) {
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3301      	adds	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	2b0e      	cmp	r3, #14
 8002642:	d9c2      	bls.n	80025ca <StartSensorTask+0x36>
//			  printf("Getting acceleration values OK\r\n");
			}
	    }
//	    printf("Message queue put\r\n");
	    // Send data to filter task with timeout to prevent blocking indefinitely
	    osStatus_t status = osMessageQueuePut(rawDataQueueHandle, &data, 0, 100);
 8002644:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <StartSensorTask+0xe4>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	2364      	movs	r3, #100	@ 0x64
 800264a:	2200      	movs	r2, #0
 800264c:	4909      	ldr	r1, [pc, #36]	@ (8002674 <StartSensorTask+0xe0>)
 800264e:	f007 f887 	bl	8009760 <osMessageQueuePut>
 8002652:	61b8      	str	r0, [r7, #24]
	    if (status != osOK) {
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0b4      	beq.n	80025c4 <StartSensorTask+0x30>
	        // Handle error - queue might be full
	        printf("Message queue put failed\r\n");
 800265a:	4808      	ldr	r0, [pc, #32]	@ (800267c <StartSensorTask+0xe8>)
 800265c:	f00b fcba 	bl	800dfd4 <puts>
	  {
 8002660:	e7b0      	b.n	80025c4 <StartSensorTask+0x30>
 8002662:	bf00      	nop
 8002664:	08011ec0 	.word	0x08011ec0
 8002668:	200002ac 	.word	0x200002ac
 800266c:	08011ed4 	.word	0x08011ed4
 8002670:	20001020 	.word	0x20001020
 8002674:	20001228 	.word	0x20001228
 8002678:	20001018 	.word	0x20001018
 800267c:	08011ee8 	.word	0x08011ee8

08002680 <StartFilterTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFilterTask */
void StartFilterTask(void *argument)
{
 8002680:	b5b0      	push	{r4, r5, r7, lr}
 8002682:	b08e      	sub	sp, #56	@ 0x38
 8002684:	af02      	add	r7, sp, #8
 8002686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFilterTask */
  printf("Start filter task\r\n");
 8002688:	4840      	ldr	r0, [pc, #256]	@ (800278c <StartFilterTask+0x10c>)
 800268a:	f00b fca3 	bl	800dfd4 <puts>
  static AccelDataBlock_t raw;
  static ProcessedDataBlock_t processed;
  arm_fir_instance_f32 Sx, Sy, Sz;
  arm_fir_init_f32(&Sx, NUM_TAPS, firCoeffs32, firXF32, BLOCK_SIZE);
 800268e:	f107 0020 	add.w	r0, r7, #32
 8002692:	230f      	movs	r3, #15
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4b3e      	ldr	r3, [pc, #248]	@ (8002790 <StartFilterTask+0x110>)
 8002698:	4a3e      	ldr	r2, [pc, #248]	@ (8002794 <StartFilterTask+0x114>)
 800269a:	211d      	movs	r1, #29
 800269c:	f00a fa7c 	bl	800cb98 <arm_fir_init_f32>
  arm_fir_init_f32(&Sy, NUM_TAPS, firCoeffs32, firYF32, BLOCK_SIZE);
 80026a0:	f107 0014 	add.w	r0, r7, #20
 80026a4:	230f      	movs	r3, #15
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <StartFilterTask+0x118>)
 80026aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002794 <StartFilterTask+0x114>)
 80026ac:	211d      	movs	r1, #29
 80026ae:	f00a fa73 	bl	800cb98 <arm_fir_init_f32>
  arm_fir_init_f32(&Sz, NUM_TAPS, firCoeffs32, firZF32, BLOCK_SIZE);
 80026b2:	f107 0008 	add.w	r0, r7, #8
 80026b6:	230f      	movs	r3, #15
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	4b38      	ldr	r3, [pc, #224]	@ (800279c <StartFilterTask+0x11c>)
 80026bc:	4a35      	ldr	r2, [pc, #212]	@ (8002794 <StartFilterTask+0x114>)
 80026be:	211d      	movs	r1, #29
 80026c0:	f00a fa6a 	bl	800cb98 <arm_fir_init_f32>

  while (1) {
      osStatus_t status = osMessageQueueGet(rawDataQueueHandle, &raw, NULL, osWaitForever);
 80026c4:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <StartFilterTask+0x120>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	2200      	movs	r2, #0
 80026ce:	4935      	ldr	r1, [pc, #212]	@ (80027a4 <StartFilterTask+0x124>)
 80026d0:	f007 f8a6 	bl	8009820 <osMessageQueueGet>
 80026d4:	62f8      	str	r0, [r7, #44]	@ 0x2c

      if (status == osOK) {
 80026d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d152      	bne.n	8002782 <StartFilterTask+0x102>
//    	  printf("Get rawData OK\r\n");
          // Copy raw data to the processed structure
          memcpy(processed.raw_x, raw.x, sizeof(raw.x));
 80026dc:	4a32      	ldr	r2, [pc, #200]	@ (80027a8 <StartFilterTask+0x128>)
 80026de:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <StartFilterTask+0x124>)
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          memcpy(processed.raw_y, raw.y, sizeof(raw.y));
 80026f8:	4a2b      	ldr	r2, [pc, #172]	@ (80027a8 <StartFilterTask+0x128>)
 80026fa:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <StartFilterTask+0x124>)
 80026fc:	f102 043c 	add.w	r4, r2, #60	@ 0x3c
 8002700:	f103 053c 	add.w	r5, r3, #60	@ 0x3c
 8002704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800270c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          memcpy(processed.raw_z, raw.z, sizeof(raw.z));
 8002718:	4a23      	ldr	r2, [pc, #140]	@ (80027a8 <StartFilterTask+0x128>)
 800271a:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <StartFilterTask+0x124>)
 800271c:	f102 0478 	add.w	r4, r2, #120	@ 0x78
 8002720:	f103 0578 	add.w	r5, r3, #120	@ 0x78
 8002724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800272c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002734:	e884 0007 	stmia.w	r4, {r0, r1, r2}

          // Apply FIR filters
          arm_fir_f32(&Sx, raw.x, processed.filtered_x, BLOCK_SIZE);
 8002738:	f107 0020 	add.w	r0, r7, #32
 800273c:	230f      	movs	r3, #15
 800273e:	4a1b      	ldr	r2, [pc, #108]	@ (80027ac <StartFilterTask+0x12c>)
 8002740:	4918      	ldr	r1, [pc, #96]	@ (80027a4 <StartFilterTask+0x124>)
 8002742:	f00a fa39 	bl	800cbb8 <arm_fir_f32>
          arm_fir_f32(&Sy, raw.y, processed.filtered_y, BLOCK_SIZE);
 8002746:	f107 0014 	add.w	r0, r7, #20
 800274a:	230f      	movs	r3, #15
 800274c:	4a18      	ldr	r2, [pc, #96]	@ (80027b0 <StartFilterTask+0x130>)
 800274e:	4919      	ldr	r1, [pc, #100]	@ (80027b4 <StartFilterTask+0x134>)
 8002750:	f00a fa32 	bl	800cbb8 <arm_fir_f32>
          arm_fir_f32(&Sz, raw.z, processed.filtered_z, BLOCK_SIZE);
 8002754:	f107 0008 	add.w	r0, r7, #8
 8002758:	230f      	movs	r3, #15
 800275a:	4a17      	ldr	r2, [pc, #92]	@ (80027b8 <StartFilterTask+0x138>)
 800275c:	4917      	ldr	r1, [pc, #92]	@ (80027bc <StartFilterTask+0x13c>)
 800275e:	f00a fa2b 	bl	800cbb8 <arm_fir_f32>

          // Send both raw and filtered data to transmit task with timeout
          status = osMessageQueuePut(processedDataQueueHandle, &processed, 0, 100);
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <StartFilterTask+0x140>)
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	2364      	movs	r3, #100	@ 0x64
 8002768:	2200      	movs	r2, #0
 800276a:	490f      	ldr	r1, [pc, #60]	@ (80027a8 <StartFilterTask+0x128>)
 800276c:	f006 fff8 	bl	8009760 <osMessageQueuePut>
 8002770:	62f8      	str	r0, [r7, #44]	@ 0x2c
          if (status != osOK) {
 8002772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0a5      	beq.n	80026c4 <StartFilterTask+0x44>
              // Handle error - queue might be full
              printf("Failed to put message， status: %d\r\n", status);
 8002778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800277a:	4812      	ldr	r0, [pc, #72]	@ (80027c4 <StartFilterTask+0x144>)
 800277c:	f00b fbc2 	bl	800df04 <iprintf>
 8002780:	e7a0      	b.n	80026c4 <StartFilterTask+0x44>
          }
      } else {
          printf("Failed to get raw data from queue\r\n");
 8002782:	4811      	ldr	r0, [pc, #68]	@ (80027c8 <StartFilterTask+0x148>)
 8002784:	f00b fc26 	bl	800dfd4 <puts>
  while (1) {
 8002788:	e79c      	b.n	80026c4 <StartFilterTask+0x44>
 800278a:	bf00      	nop
 800278c:	08011f04 	.word	0x08011f04
 8002790:	20001024 	.word	0x20001024
 8002794:	08012200 	.word	0x08012200
 8002798:	200010d0 	.word	0x200010d0
 800279c:	2000117c 	.word	0x2000117c
 80027a0:	20001018 	.word	0x20001018
 80027a4:	200012dc 	.word	0x200012dc
 80027a8:	20001390 	.word	0x20001390
 80027ac:	20001444 	.word	0x20001444
 80027b0:	20001480 	.word	0x20001480
 80027b4:	20001318 	.word	0x20001318
 80027b8:	200014bc 	.word	0x200014bc
 80027bc:	20001354 	.word	0x20001354
 80027c0:	2000101c 	.word	0x2000101c
 80027c4:	08011f18 	.word	0x08011f18
 80027c8:	08011f40 	.word	0x08011f40

080027cc <StartTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitTask */
void StartTransmitTask(void *argument)
{
 80027cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027d0:	b0c5      	sub	sp, #276	@ 0x114
 80027d2:	af06      	add	r7, sp, #24
 80027d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask */
  printf("Start transmit task\r\n");
 80027d6:	4886      	ldr	r0, [pc, #536]	@ (80029f0 <StartTransmitTask+0x224>)
 80027d8:	f00b fbfc 	bl	800dfd4 <puts>
//	}else{
////		printf("Error getting processed data, error code: %d\r\n", status);
//	}
//  }
  /*-------------------------WIFI-------------------*/
  int8_t Socket = -1;
 80027dc:	23ff      	movs	r3, #255	@ 0xff
 80027de:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  uint16_t Trials = 10;
 80027e2:	230a      	movs	r3, #10
 80027e4:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
  uint8_t MAC_Addr[6];
  uint16_t Datalen;
  uint8_t RxData[100];
  static char dataString[1500]; // Larger buffer for JSON data

  printf("Connecting to WiFi network...\r\n");
 80027e8:	4882      	ldr	r0, [pc, #520]	@ (80029f4 <StartTransmitTask+0x228>)
 80027ea:	f00b fbf3 	bl	800dfd4 <puts>

  if(WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80027ee:	2203      	movs	r2, #3
 80027f0:	4981      	ldr	r1, [pc, #516]	@ (80029f8 <StartTransmitTask+0x22c>)
 80027f2:	4882      	ldr	r0, [pc, #520]	@ (80029fc <StartTransmitTask+0x230>)
 80027f4:	f000 fd36 	bl	8003264 <WIFI_Connect>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d168      	bne.n	80028d0 <StartTransmitTask+0x104>
  {
    printf("WiFi Connected\r\n");
 80027fe:	4880      	ldr	r0, [pc, #512]	@ (8002a00 <StartTransmitTask+0x234>)
 8002800:	f00b fbe8 	bl	800dfd4 <puts>

    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8002804:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002808:	2104      	movs	r1, #4
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fd4c 	bl	80032a8 <WIFI_GetIP_Address>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d158      	bne.n	80028c8 <StartTransmitTask+0xfc>
    {
      sprintf(dataString, "IP Address: %d.%d.%d.%d\r\n",
              IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]);
 8002816:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
      sprintf(dataString, "IP Address: %d.%d.%d.%d\r\n",
 800281a:	4619      	mov	r1, r3
              IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]);
 800281c:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
      sprintf(dataString, "IP Address: %d.%d.%d.%d\r\n",
 8002820:	4618      	mov	r0, r3
              IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]);
 8002822:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8002826:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
      sprintf(dataString, "IP Address: %d.%d.%d.%d\r\n",
 800282a:	9201      	str	r2, [sp, #4]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4603      	mov	r3, r0
 8002830:	460a      	mov	r2, r1
 8002832:	4974      	ldr	r1, [pc, #464]	@ (8002a04 <StartTransmitTask+0x238>)
 8002834:	4874      	ldr	r0, [pc, #464]	@ (8002a08 <StartTransmitTask+0x23c>)
 8002836:	f00b fbd5 	bl	800dfe4 <siprintf>
      printf(dataString);
 800283a:	4873      	ldr	r0, [pc, #460]	@ (8002a08 <StartTransmitTask+0x23c>)
 800283c:	f00b fb62 	bl	800df04 <iprintf>

      sprintf(dataString, "Trying to connect to Server: %d.%d.%d.%d:%d\r\n",
              RemoteIP[0], RemoteIP[1], RemoteIP[2], RemoteIP[3], RemotePORT);
 8002840:	4b72      	ldr	r3, [pc, #456]	@ (8002a0c <StartTransmitTask+0x240>)
 8002842:	781b      	ldrb	r3, [r3, #0]
      sprintf(dataString, "Trying to connect to Server: %d.%d.%d.%d:%d\r\n",
 8002844:	4618      	mov	r0, r3
              RemoteIP[0], RemoteIP[1], RemoteIP[2], RemoteIP[3], RemotePORT);
 8002846:	4b71      	ldr	r3, [pc, #452]	@ (8002a0c <StartTransmitTask+0x240>)
 8002848:	785b      	ldrb	r3, [r3, #1]
      sprintf(dataString, "Trying to connect to Server: %d.%d.%d.%d:%d\r\n",
 800284a:	461c      	mov	r4, r3
              RemoteIP[0], RemoteIP[1], RemoteIP[2], RemoteIP[3], RemotePORT);
 800284c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a0c <StartTransmitTask+0x240>)
 800284e:	789b      	ldrb	r3, [r3, #2]
      sprintf(dataString, "Trying to connect to Server: %d.%d.%d.%d:%d\r\n",
 8002850:	461a      	mov	r2, r3
              RemoteIP[0], RemoteIP[1], RemoteIP[2], RemoteIP[3], RemotePORT);
 8002852:	4b6e      	ldr	r3, [pc, #440]	@ (8002a0c <StartTransmitTask+0x240>)
 8002854:	78db      	ldrb	r3, [r3, #3]
      sprintf(dataString, "Trying to connect to Server: %d.%d.%d.%d:%d\r\n",
 8002856:	4619      	mov	r1, r3
 8002858:	f641 7342 	movw	r3, #8002	@ 0x1f42
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	9101      	str	r1, [sp, #4]
 8002860:	9200      	str	r2, [sp, #0]
 8002862:	4623      	mov	r3, r4
 8002864:	4602      	mov	r2, r0
 8002866:	496a      	ldr	r1, [pc, #424]	@ (8002a10 <StartTransmitTask+0x244>)
 8002868:	4867      	ldr	r0, [pc, #412]	@ (8002a08 <StartTransmitTask+0x23c>)
 800286a:	f00b fbbb 	bl	800dfe4 <siprintf>
      printf(dataString);
 800286e:	4866      	ldr	r0, [pc, #408]	@ (8002a08 <StartTransmitTask+0x23c>)
 8002870:	f00b fb48 	bl	800df04 <iprintf>

      // Attempt to connect to server
      while(Trials--)
 8002874:	e018      	b.n	80028a8 <StartTransmitTask+0xdc>
      {
        if(WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8002876:	2300      	movs	r3, #0
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	f641 7342 	movw	r3, #8002	@ 0x1f42
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4b62      	ldr	r3, [pc, #392]	@ (8002a0c <StartTransmitTask+0x240>)
 8002882:	4a64      	ldr	r2, [pc, #400]	@ (8002a14 <StartTransmitTask+0x248>)
 8002884:	2100      	movs	r1, #0
 8002886:	2000      	movs	r0, #0
 8002888:	f000 fd32 	bl	80032f0 <WIFI_OpenClientConnection>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <StartTransmitTask+0xd4>
        {
          printf("TCP Connection opened successfully.\r\n");
 8002892:	4861      	ldr	r0, [pc, #388]	@ (8002a18 <StartTransmitTask+0x24c>)
 8002894:	f00b fb9e 	bl	800dfd4 <puts>
          Socket = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
          break;
 800289e:	e00a      	b.n	80028b6 <StartTransmitTask+0xea>
        }
        HAL_Delay(500); // Wait before retrying
 80028a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028a4:	f001 f966 	bl	8003b74 <HAL_Delay>
      while(Trials--)
 80028a8:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	f8a7 20f4 	strh.w	r2, [r7, #244]	@ 0xf4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1df      	bne.n	8002876 <StartTransmitTask+0xaa>
      }

      if(Socket == -1)
 80028b6:	f997 30f7 	ldrsb.w	r3, [r7, #247]	@ 0xf7
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d10a      	bne.n	80028d6 <StartTransmitTask+0x10a>
      {
        printf("ERROR: Cannot open Connection\r\n");
 80028c0:	4856      	ldr	r0, [pc, #344]	@ (8002a1c <StartTransmitTask+0x250>)
 80028c2:	f00b fb87 	bl	800dfd4 <puts>
 80028c6:	e006      	b.n	80028d6 <StartTransmitTask+0x10a>
      }
    }
    else
    {
      printf("ERROR: Cannot get IP address\r\n");
 80028c8:	4855      	ldr	r0, [pc, #340]	@ (8002a20 <StartTransmitTask+0x254>)
 80028ca:	f00b fb83 	bl	800dfd4 <puts>
 80028ce:	e002      	b.n	80028d6 <StartTransmitTask+0x10a>
    }
  }
  else
  {
    printf("ERROR: WiFi not connected\r\n");
 80028d0:	4854      	ldr	r0, [pc, #336]	@ (8002a24 <StartTransmitTask+0x258>)
 80028d2:	f00b fb7f 	bl	800dfd4 <puts>
  }

  /* Infinite loop */
  static ProcessedDataBlock_t processed;
  char str_acc[100] = ""; // Formatted message for UART display
 80028d6:	f107 0308 	add.w	r3, r7, #8
 80028da:	2264      	movs	r2, #100	@ 0x64
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f00b fc7a 	bl	800e1d8 <memset>

  while (1) {
    // Get processed data (both raw and filtered)
    osStatus_t status = osMessageQueueGet(processedDataQueueHandle, &processed, NULL, osWaitForever);
 80028e4:	4b50      	ldr	r3, [pc, #320]	@ (8002a28 <StartTransmitTask+0x25c>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	2200      	movs	r2, #0
 80028ee:	494f      	ldr	r1, [pc, #316]	@ (8002a2c <StartTransmitTask+0x260>)
 80028f0:	f006 ff96 	bl	8009820 <osMessageQueueGet>
 80028f4:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

    if (status == osOK) {
 80028f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f1      	bne.n	80028e4 <StartTransmitTask+0x118>
//                 processed.filtered_x[i], processed.filtered_y[i], processed.filtered_z[i]);
//        printf(str_acc);
//      }

      // Send data over WiFi if connection is established
      if (Socket != -1) {
 8002900:	f997 30f7 	ldrsb.w	r3, [r7, #247]	@ 0xf7
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d0ec      	beq.n	80028e4 <StartTransmitTask+0x118>
        // Create JSON data with both raw and filtered accelerometer data
        int pos = sprintf(dataString, "{\"raw\":[");
 800290a:	4949      	ldr	r1, [pc, #292]	@ (8002a30 <StartTransmitTask+0x264>)
 800290c:	483e      	ldr	r0, [pc, #248]	@ (8002a08 <StartTransmitTask+0x23c>)
 800290e:	f00b fb69 	bl	800dfe4 <siprintf>
 8002912:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0

        // Add raw data
        for (int i = 0; i < BLOCK_SIZE; i++) {
 8002916:	2300      	movs	r3, #0
 8002918:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800291c:	e046      	b.n	80029ac <StartTransmitTask+0x1e0>
          pos += sprintf(dataString + pos,
 800291e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002922:	4a39      	ldr	r2, [pc, #228]	@ (8002a08 <StartTransmitTask+0x23c>)
 8002924:	189e      	adds	r6, r3, r2
 8002926:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800292a:	2b00      	cmp	r3, #0
 800292c:	dd02      	ble.n	8002934 <StartTransmitTask+0x168>
 800292e:	4b41      	ldr	r3, [pc, #260]	@ (8002a34 <StartTransmitTask+0x268>)
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	e001      	b.n	8002938 <StartTransmitTask+0x16c>
 8002934:	4b40      	ldr	r3, [pc, #256]	@ (8002a38 <StartTransmitTask+0x26c>)
 8002936:	603b      	str	r3, [r7, #0]
                        "%s{\"x\":%.2f,\"y\":%.2f,\"z\":%.2f}",
                        (i > 0 ? "," : ""),
                        processed.raw_x[i], processed.raw_y[i], processed.raw_z[i]);
 8002938:	4a3c      	ldr	r2, [pc, #240]	@ (8002a2c <StartTransmitTask+0x260>)
 800293a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	681b      	ldr	r3, [r3, #0]
          pos += sprintf(dataString + pos,
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdff 	bl	8000548 <__aeabi_f2d>
 800294a:	4604      	mov	r4, r0
 800294c:	460d      	mov	r5, r1
                        processed.raw_x[i], processed.raw_y[i], processed.raw_z[i]);
 800294e:	4a37      	ldr	r2, [pc, #220]	@ (8002a2c <StartTransmitTask+0x260>)
 8002950:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002954:	330e      	adds	r3, #14
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	3304      	adds	r3, #4
 800295c:	681b      	ldr	r3, [r3, #0]
          pos += sprintf(dataString + pos,
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fdf2 	bl	8000548 <__aeabi_f2d>
 8002964:	4680      	mov	r8, r0
 8002966:	4689      	mov	r9, r1
                        processed.raw_x[i], processed.raw_y[i], processed.raw_z[i]);
 8002968:	4a30      	ldr	r2, [pc, #192]	@ (8002a2c <StartTransmitTask+0x260>)
 800296a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800296e:	331e      	adds	r3, #30
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
          pos += sprintf(dataString + pos,
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fde6 	bl	8000548 <__aeabi_f2d>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002984:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002988:	e9cd 4500 	strd	r4, r5, [sp]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	492b      	ldr	r1, [pc, #172]	@ (8002a3c <StartTransmitTask+0x270>)
 8002990:	4630      	mov	r0, r6
 8002992:	f00b fb27 	bl	800dfe4 <siprintf>
 8002996:	4602      	mov	r2, r0
 8002998:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800299c:	4413      	add	r3, r2
 800299e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        for (int i = 0; i < BLOCK_SIZE; i++) {
 80029a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80029a6:	3301      	adds	r3, #1
 80029a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80029ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80029b0:	2b0e      	cmp	r3, #14
 80029b2:	ddb4      	ble.n	800291e <StartTransmitTask+0x152>
        }

        // Add filtered data
        pos += sprintf(dataString + pos, "],\"filtered\":[");
 80029b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80029b8:	4a13      	ldr	r2, [pc, #76]	@ (8002a08 <StartTransmitTask+0x23c>)
 80029ba:	4413      	add	r3, r2
 80029bc:	4920      	ldr	r1, [pc, #128]	@ (8002a40 <StartTransmitTask+0x274>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f00b fb10 	bl	800dfe4 <siprintf>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80029ca:	4413      	add	r3, r2
 80029cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        for (int i = 0; i < BLOCK_SIZE; i++) {
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029d6:	e073      	b.n	8002ac0 <StartTransmitTask+0x2f4>
          pos += sprintf(dataString + pos,
 80029d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80029dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <StartTransmitTask+0x23c>)
 80029de:	189e      	adds	r6, r3, r2
 80029e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	dd2d      	ble.n	8002a44 <StartTransmitTask+0x278>
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <StartTransmitTask+0x268>)
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	e02c      	b.n	8002a48 <StartTransmitTask+0x27c>
 80029ee:	bf00      	nop
 80029f0:	08011f64 	.word	0x08011f64
 80029f4:	08011f7c 	.word	0x08011f7c
 80029f8:	08011f9c 	.word	0x08011f9c
 80029fc:	08011fa8 	.word	0x08011fa8
 8002a00:	08011fac 	.word	0x08011fac
 8002a04:	08011fbc 	.word	0x08011fbc
 8002a08:	200014f8 	.word	0x200014f8
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	08011fd8 	.word	0x08011fd8
 8002a14:	08012008 	.word	0x08012008
 8002a18:	08012014 	.word	0x08012014
 8002a1c:	0801203c 	.word	0x0801203c
 8002a20:	0801205c 	.word	0x0801205c
 8002a24:	0801207c 	.word	0x0801207c
 8002a28:	2000101c 	.word	0x2000101c
 8002a2c:	20001ad4 	.word	0x20001ad4
 8002a30:	08012098 	.word	0x08012098
 8002a34:	080120a4 	.word	0x080120a4
 8002a38:	080120a8 	.word	0x080120a8
 8002a3c:	080120ac 	.word	0x080120ac
 8002a40:	080120cc 	.word	0x080120cc
 8002a44:	4b45      	ldr	r3, [pc, #276]	@ (8002b5c <StartTransmitTask+0x390>)
 8002a46:	603b      	str	r3, [r7, #0]
                        "%s{\"x\":%.2f,\"y\":%.2f,\"z\":%.2f}",
                        (i > 0 ? "," : ""),
                        processed.filtered_x[i], processed.filtered_y[i], processed.filtered_z[i]);
 8002a48:	4a45      	ldr	r2, [pc, #276]	@ (8002b60 <StartTransmitTask+0x394>)
 8002a4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002a4e:	332c      	adds	r3, #44	@ 0x2c
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	681b      	ldr	r3, [r3, #0]
          pos += sprintf(dataString + pos,
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fd75 	bl	8000548 <__aeabi_f2d>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	460d      	mov	r5, r1
                        processed.filtered_x[i], processed.filtered_y[i], processed.filtered_z[i]);
 8002a62:	4a3f      	ldr	r2, [pc, #252]	@ (8002b60 <StartTransmitTask+0x394>)
 8002a64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002a68:	333c      	adds	r3, #60	@ 0x3c
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	681b      	ldr	r3, [r3, #0]
          pos += sprintf(dataString + pos,
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd69 	bl	8000548 <__aeabi_f2d>
 8002a76:	4680      	mov	r8, r0
 8002a78:	4689      	mov	r9, r1
                        processed.filtered_x[i], processed.filtered_y[i], processed.filtered_z[i]);
 8002a7a:	4a39      	ldr	r2, [pc, #228]	@ (8002b60 <StartTransmitTask+0x394>)
 8002a7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002a80:	334a      	adds	r3, #74	@ 0x4a
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
          pos += sprintf(dataString + pos,
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd5c 	bl	8000548 <__aeabi_f2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a98:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a9c:	e9cd 4500 	strd	r4, r5, [sp]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	4930      	ldr	r1, [pc, #192]	@ (8002b64 <StartTransmitTask+0x398>)
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	f00b fa9d 	bl	800dfe4 <siprintf>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        for (int i = 0; i < BLOCK_SIZE; i++) {
 8002ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002aba:	3301      	adds	r3, #1
 8002abc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ac0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ac4:	2b0e      	cmp	r3, #14
 8002ac6:	dd87      	ble.n	80029d8 <StartTransmitTask+0x20c>
        }

        // Close JSON
        pos += sprintf(dataString + pos, "]}\n");
 8002ac8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002acc:	4a26      	ldr	r2, [pc, #152]	@ (8002b68 <StartTransmitTask+0x39c>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	4926      	ldr	r1, [pc, #152]	@ (8002b6c <StartTransmitTask+0x3a0>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f00b fa86 	bl	800dfe4 <siprintf>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002ade:	4413      	add	r3, r2
 8002ae0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

        // Send JSON data over WiFi
        ret = WIFI_SendData(Socket, (uint8_t*)dataString, strlen(dataString), &Datalen, WIFI_WRITE_TIMEOUT);
 8002ae4:	f997 40f7 	ldrsb.w	r4, [r7, #247]	@ 0xf7
 8002ae8:	481f      	ldr	r0, [pc, #124]	@ (8002b68 <StartTransmitTask+0x39c>)
 8002aea:	f7fd fbc1 	bl	8000270 <strlen>
 8002aee:	4603      	mov	r3, r0
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	f107 03d2 	add.w	r3, r7, #210	@ 0xd2
 8002af6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002afa:	9100      	str	r1, [sp, #0]
 8002afc:	491a      	ldr	r1, [pc, #104]	@ (8002b68 <StartTransmitTask+0x39c>)
 8002afe:	4620      	mov	r0, r4
 8002b00:	f000 fc4e 	bl	80033a0 <WIFI_SendData>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        if (ret != WIFI_STATUS_OK) {
 8002b0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f43f aee8 	beq.w	80028e4 <StartTransmitTask+0x118>
          printf("ERROR: Failed to send data\r\n");
 8002b14:	4816      	ldr	r0, [pc, #88]	@ (8002b70 <StartTransmitTask+0x3a4>)
 8002b16:	f00b fa5d 	bl	800dfd4 <puts>

          // Try to reconnect
          WIFI_CloseClientConnection(Socket);
 8002b1a:	f997 30f7 	ldrsb.w	r3, [r7, #247]	@ 0xf7
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fc22 	bl	8003368 <WIFI_CloseClientConnection>
          Socket = -1;
 8002b24:	23ff      	movs	r3, #255	@ 0xff
 8002b26:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7

          if (WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	f641 7342 	movw	r3, #8002	@ 0x1f42
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <StartTransmitTask+0x3a8>)
 8002b36:	4a10      	ldr	r2, [pc, #64]	@ (8002b78 <StartTransmitTask+0x3ac>)
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f000 fbd8 	bl	80032f0 <WIFI_OpenClientConnection>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <StartTransmitTask+0x388>
            printf("TCP Connection reestablished.\r\n");
 8002b46:	480d      	ldr	r0, [pc, #52]	@ (8002b7c <StartTransmitTask+0x3b0>)
 8002b48:	f00b fa44 	bl	800dfd4 <puts>
            Socket = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
 8002b52:	e6c7      	b.n	80028e4 <StartTransmitTask+0x118>
          } else {
            printf("Failed to reconnect to server\r\n");
 8002b54:	480a      	ldr	r0, [pc, #40]	@ (8002b80 <StartTransmitTask+0x3b4>)
 8002b56:	f00b fa3d 	bl	800dfd4 <puts>
  while (1) {
 8002b5a:	e6c3      	b.n	80028e4 <StartTransmitTask+0x118>
 8002b5c:	080120a8 	.word	0x080120a8
 8002b60:	20001ad4 	.word	0x20001ad4
 8002b64:	080120ac 	.word	0x080120ac
 8002b68:	200014f8 	.word	0x200014f8
 8002b6c:	080120dc 	.word	0x080120dc
 8002b70:	080120e0 	.word	0x080120e0
 8002b74:	20000000 	.word	0x20000000
 8002b78:	08012008 	.word	0x08012008
 8002b7c:	080120fc 	.word	0x080120fc
 8002b80:	0801211c 	.word	0x0801211c

08002b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
}
 8002b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <Error_Handler+0x8>

08002b90 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002b98:	1d39      	adds	r1, r7, #4
 8002b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4803      	ldr	r0, [pc, #12]	@ (8002bb0 <__io_putchar+0x20>)
 8002ba2:	f005 fdaf 	bl	8008704 <HAL_UART_Transmit>

  return ch;
 8002ba6:	687b      	ldr	r3, [r7, #4]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20002594 	.word	0x20002594

08002bb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d102      	bne.n	8002bca <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8002bc4:	f7ff fb7c 	bl	80022c0 <SPI_WIFI_ISR>
      break;
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8002bca:	bf00      	nop
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002bd8:	4802      	ldr	r0, [pc, #8]	@ (8002be4 <SPI3_IRQHandler+0x10>)
 8002bda:	f004 fb6b 	bl	80072b4 <HAL_SPI_IRQHandler>
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000238 	.word	0x20000238

08002be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <HAL_MspInit+0x4c>)
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf2:	4a10      	ldr	r2, [pc, #64]	@ (8002c34 <HAL_MspInit+0x4c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <HAL_MspInit+0x4c>)
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_MspInit+0x4c>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <HAL_MspInit+0x4c>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <HAL_MspInit+0x4c>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	210f      	movs	r1, #15
 8002c22:	f06f 0001 	mvn.w	r0, #1
 8002c26:	f001 f8a4 	bl	8003d72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b0ac      	sub	sp, #176	@ 0xb0
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2288      	movs	r2, #136	@ 0x88
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f00b fabd 	bl	800e1d8 <memset>
  if(hi2c->Instance==I2C2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a21      	ldr	r2, [pc, #132]	@ (8002ce8 <HAL_I2C_MspInit+0xb0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d13b      	bne.n	8002ce0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f853 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c80:	f7ff ff80 	bl	8002b84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c84:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <HAL_I2C_MspInit+0xb4>)
 8002c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c88:	4a18      	ldr	r2, [pc, #96]	@ (8002cec <HAL_I2C_MspInit+0xb4>)
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c90:	4b16      	ldr	r3, [pc, #88]	@ (8002cec <HAL_I2C_MspInit+0xb4>)
 8002c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002c9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca4:	2312      	movs	r3, #18
 8002ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	480b      	ldr	r0, [pc, #44]	@ (8002cf0 <HAL_I2C_MspInit+0xb8>)
 8002cc4:	f001 f8cc 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cc8:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <HAL_I2C_MspInit+0xb4>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	4a07      	ldr	r2, [pc, #28]	@ (8002cec <HAL_I2C_MspInit+0xb4>)
 8002cce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cd4:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_I2C_MspInit+0xb4>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002ce0:	bf00      	nop
 8002ce2:	37b0      	adds	r7, #176	@ 0xb0
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40005800 	.word	0x40005800
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0b      	ldr	r2, [pc, #44]	@ (8002d30 <HAL_I2C_MspDeInit+0x3c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10f      	bne.n	8002d26 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002d06:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_I2C_MspDeInit+0x40>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <HAL_I2C_MspDeInit+0x40>)
 8002d0c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002d12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d16:	4808      	ldr	r0, [pc, #32]	@ (8002d38 <HAL_I2C_MspDeInit+0x44>)
 8002d18:	f001 fa4c 	bl	80041b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002d1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d20:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <HAL_I2C_MspDeInit+0x44>)
 8002d22:	f001 fa47 	bl	80041b4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40005800 	.word	0x40005800
 8002d34:	40021000 	.word	0x40021000
 8002d38:	48000400 	.word	0x48000400

08002d3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	@ 0x28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a17      	ldr	r2, [pc, #92]	@ (8002db8 <HAL_SPI_MspInit+0x7c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d128      	bne.n	8002db0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d5e:	4b17      	ldr	r3, [pc, #92]	@ (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d62:	4a16      	ldr	r2, [pc, #88]	@ (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d6a:	4b14      	ldr	r3, [pc, #80]	@ (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d76:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7a:	4a10      	ldr	r2, [pc, #64]	@ (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d82:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002d8e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002da0:	2306      	movs	r3, #6
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	4619      	mov	r1, r3
 8002daa:	4805      	ldr	r0, [pc, #20]	@ (8002dc0 <HAL_SPI_MspInit+0x84>)
 8002dac:	f001 f858 	bl	8003e60 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002db0:	bf00      	nop
 8002db2:	3728      	adds	r7, #40	@ 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40003c00 	.word	0x40003c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	48000800 	.word	0x48000800

08002dc4 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <HAL_SPI_MspDeInit+0x30>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10a      	bne.n	8002dec <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI3_MspDeInit 0 */

    /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_SPI_MspDeInit+0x34>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	4a07      	ldr	r2, [pc, #28]	@ (8002df8 <HAL_SPI_MspDeInit+0x34>)
 8002ddc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002de0:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002de2:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8002de6:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <HAL_SPI_MspDeInit+0x38>)
 8002de8:	f001 f9e4 	bl	80041b4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40003c00 	.word	0x40003c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	48000800 	.word	0x48000800

08002e00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <HAL_TIM_Base_MspInit+0x44>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d113      	bne.n	8002e3a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <HAL_TIM_Base_MspInit+0x48>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	4a0c      	ldr	r2, [pc, #48]	@ (8002e48 <HAL_TIM_Base_MspInit+0x48>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <HAL_TIM_Base_MspInit+0x48>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	201e      	movs	r0, #30
 8002e30:	f000 ff9f 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e34:	201e      	movs	r0, #30
 8002e36:	f000 ffb8 	bl	8003daa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40021000 	.word	0x40021000

08002e4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b0ae      	sub	sp, #184	@ 0xb8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	2288      	movs	r2, #136	@ 0x88
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f00b f9b3 	bl	800e1d8 <memset>
  if(huart->Instance==USART1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a42      	ldr	r2, [pc, #264]	@ (8002f80 <HAL_UART_MspInit+0x134>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d13b      	bne.n	8002ef4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e80:	2300      	movs	r3, #0
 8002e82:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 ff49 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e94:	f7ff fe76 	bl	8002b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e98:	4b3a      	ldr	r3, [pc, #232]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9c:	4a39      	ldr	r2, [pc, #228]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002e9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ea4:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb0:	4b34      	ldr	r3, [pc, #208]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb4:	4a33      	ldr	r2, [pc, #204]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002eb6:	f043 0302 	orr.w	r3, r3, #2
 8002eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ebc:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002ec8:	23c0      	movs	r3, #192	@ 0xc0
 8002eca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4826      	ldr	r0, [pc, #152]	@ (8002f88 <HAL_UART_MspInit+0x13c>)
 8002eee:	f000 ffb7 	bl	8003e60 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ef2:	e040      	b.n	8002f76 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a24      	ldr	r2, [pc, #144]	@ (8002f8c <HAL_UART_MspInit+0x140>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d13b      	bne.n	8002f76 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002efe:	2304      	movs	r3, #4
 8002f00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f06:	f107 031c 	add.w	r3, r7, #28
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 ff08 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002f16:	f7ff fe35 	bl	8002b84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	4a19      	ldr	r2, [pc, #100]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f26:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f32:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f36:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_UART_MspInit+0x138>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002f4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f64:	2307      	movs	r3, #7
 8002f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f6a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4807      	ldr	r0, [pc, #28]	@ (8002f90 <HAL_UART_MspInit+0x144>)
 8002f72:	f000 ff75 	bl	8003e60 <HAL_GPIO_Init>
}
 8002f76:	bf00      	nop
 8002f78:	37b8      	adds	r7, #184	@ 0xb8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40021000 	.word	0x40021000
 8002f88:	48000400 	.word	0x48000400
 8002f8c:	40004800 	.word	0x40004800
 8002f90:	48000c00 	.word	0x48000c00

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <NMI_Handler+0x4>

08002f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <HardFault_Handler+0x4>

08002fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <MemManage_Handler+0x4>

08002fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <BusFault_Handler+0x4>

08002fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <UsageFault_Handler+0x4>

08002fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fce:	f000 fdb1 	bl	8003b34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002fd2:	f008 fc67 	bl	800b8a4 <xTaskGetSchedulerState>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d001      	beq.n	8002fe0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002fdc:	f009 fb5c 	bl	800c698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002fe8:	2020      	movs	r0, #32
 8002fea:	f001 fa07 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002fee:	2040      	movs	r0, #64	@ 0x40
 8002ff0:	f001 fa04 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002ff4:	2080      	movs	r0, #128	@ 0x80
 8002ff6:	f001 fa01 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002ffa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ffe:	f001 f9fd 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800300c:	4802      	ldr	r0, [pc, #8]	@ (8003018 <TIM4_IRQHandler+0x10>)
 800300e:	f004 ff4d 	bl	8007eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200002ac 	.word	0x200002ac

0800301c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003020:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003024:	f001 f9ea 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003028:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800302c:	f001 f9e6 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003030:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003034:	f001 f9e2 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003038:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800303c:	f001 f9de 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003040:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003044:	f001 f9da 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003050:	2002      	movs	r0, #2
 8003052:	f001 f9d3 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}

0800305a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  return 1;
 800305e:	2301      	movs	r3, #1
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <_kill>:

int _kill(int pid, int sig)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003074:	f00b f99a 	bl	800e3ac <__errno>
 8003078:	4603      	mov	r3, r0
 800307a:	2216      	movs	r2, #22
 800307c:	601a      	str	r2, [r3, #0]
  return -1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_exit>:

void _exit (int status)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003092:	f04f 31ff 	mov.w	r1, #4294967295
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffe7 	bl	800306a <_kill>
  while (1) {}    /* Make sure we hang here */
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <_exit+0x12>

080030a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e00a      	b.n	80030c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030b2:	f3af 8000 	nop.w
 80030b6:	4601      	mov	r1, r0
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	60ba      	str	r2, [r7, #8]
 80030be:	b2ca      	uxtb	r2, r1
 80030c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dbf0      	blt.n	80030b2 <_read+0x12>
  }

  return len;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e009      	b.n	8003100 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	60ba      	str	r2, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fd4b 	bl	8002b90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3301      	adds	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	dbf1      	blt.n	80030ec <_write+0x12>
  }
  return len;
 8003108:	687b      	ldr	r3, [r7, #4]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <_close>:

int _close(int file)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800313a:	605a      	str	r2, [r3, #4]
  return 0;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <_isatty>:

int _isatty(int file)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003152:	2301      	movs	r3, #1
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003184:	4a14      	ldr	r2, [pc, #80]	@ (80031d8 <_sbrk+0x5c>)
 8003186:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <_sbrk+0x60>)
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003190:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <_sbrk+0x64>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <_sbrk+0x64>)
 800319a:	4a12      	ldr	r2, [pc, #72]	@ (80031e4 <_sbrk+0x68>)
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800319e:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <_sbrk+0x64>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d207      	bcs.n	80031bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031ac:	f00b f8fe 	bl	800e3ac <__errno>
 80031b0:	4603      	mov	r3, r0
 80031b2:	220c      	movs	r2, #12
 80031b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	e009      	b.n	80031d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <_sbrk+0x64>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031c2:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <_sbrk+0x64>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	4a05      	ldr	r2, [pc, #20]	@ (80031e0 <_sbrk+0x64>)
 80031cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20018000 	.word	0x20018000
 80031dc:	00000400 	.word	0x00000400
 80031e0:	20001c3c 	.word	0x20001c3c
 80031e4:	20004078 	.word	0x20004078

080031e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <SystemInit+0x20>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	4a05      	ldr	r2, [pc, #20]	@ (8003208 <SystemInit+0x20>)
 80031f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <WIFI_Init+0x40>)
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <WIFI_Init+0x44>)
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <WIFI_Init+0x48>)
 8003220:	4a0d      	ldr	r2, [pc, #52]	@ (8003258 <WIFI_Init+0x4c>)
 8003222:	490e      	ldr	r1, [pc, #56]	@ (800325c <WIFI_Init+0x50>)
 8003224:	480e      	ldr	r0, [pc, #56]	@ (8003260 <WIFI_Init+0x54>)
 8003226:	f7fe f9e7 	bl	80015f8 <ES_WIFI_RegisterBusIO>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d107      	bne.n	8003240 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003230:	480b      	ldr	r0, [pc, #44]	@ (8003260 <WIFI_Init+0x54>)
 8003232:	f7fe f9ad 	bl	8001590 <ES_WIFI_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003240:	79fb      	ldrb	r3, [r7, #7]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	08001fe5 	.word	0x08001fe5
 8003250:	080020d9 	.word	0x080020d9
 8003254:	080021b5 	.word	0x080021b5
 8003258:	08001ecd 	.word	0x08001ecd
 800325c:	08001d1d 	.word	0x08001d1d
 8003260:	20001c40 	.word	0x20001c40

08003264 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	4809      	ldr	r0, [pc, #36]	@ (80032a4 <WIFI_Connect+0x40>)
 800327e:	f7fe f9ef 	bl	8001660 <ES_WIFI_Connect>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003288:	4806      	ldr	r0, [pc, #24]	@ (80032a4 <WIFI_Connect+0x40>)
 800328a:	f7fe fa91 	bl	80017b0 <ES_WIFI_GetNetworkSettings>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003298:	7dfb      	ldrb	r3, [r7, #23]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20001c40 	.word	0x20001c40

080032a8 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <WIFI_GetIP_Address+0x38>
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d90d      	bls.n	80032e0 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80032c4:	4809      	ldr	r0, [pc, #36]	@ (80032ec <WIFI_GetIP_Address+0x44>)
 80032c6:	f7fe fa43 	bl	8001750 <ES_WIFI_IsConnected>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80032d0:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <WIFI_GetIP_Address+0x44>)
 80032d2:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20001c40 	.word	0x20001c40

080032f0 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800330c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800330e:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8003310:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003312:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003314:	7afb      	ldrb	r3, [r7, #11]
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	3302      	adds	r3, #2
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	3303      	adds	r3, #3
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	4619      	mov	r1, r3
 8003346:	4807      	ldr	r0, [pc, #28]	@ (8003364 <WIFI_OpenClientConnection+0x74>)
 8003348:	f7fe fa5c 	bl	8001804 <ES_WIFI_StartClientConnection>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8003358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	@ 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20001c40 	.word	0x20001c40

08003368 <WIFI_CloseClientConnection>:
  * @brief  Close client connection
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = (uint8_t)socket;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	727b      	strb	r3, [r7, #9]

  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	4619      	mov	r1, r3
 8003380:	4806      	ldr	r0, [pc, #24]	@ (800339c <WIFI_CloseClientConnection+0x34>)
 8003382:	f7fe fb19 	bl	80019b8 <ES_WIFI_StopClientConnection>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8003390:	7ffb      	ldrb	r3, [r7, #31]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20001c40 	.word	0x20001c40

080033a0 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	b2d9      	uxtb	r1, r3
 80033b8:	88fa      	ldrh	r2, [r7, #6]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4806      	ldr	r0, [pc, #24]	@ (80033e0 <WIFI_SendData+0x40>)
 80033c8:	f7fe fb30 	bl	8001a2c <ES_WIFI_SendData>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20001c40 	.word	0x20001c40

080033e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800341c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033e8:	f7ff fefe 	bl	80031e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033ec:	480c      	ldr	r0, [pc, #48]	@ (8003420 <LoopForever+0x6>)
  ldr r1, =_edata
 80033ee:	490d      	ldr	r1, [pc, #52]	@ (8003424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003428 <LoopForever+0xe>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f4:	e002      	b.n	80033fc <LoopCopyDataInit>

080033f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033fa:	3304      	adds	r3, #4

080033fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003400:	d3f9      	bcc.n	80033f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003402:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003404:	4c0a      	ldr	r4, [pc, #40]	@ (8003430 <LoopForever+0x16>)
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003408:	e001      	b.n	800340e <LoopFillZerobss>

0800340a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800340a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800340c:	3204      	adds	r2, #4

0800340e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800340e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003410:	d3fb      	bcc.n	800340a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003412:	f00a ffd1 	bl	800e3b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003416:	f7fe ff79 	bl	800230c <main>

0800341a <LoopForever>:

LoopForever:
    b LoopForever
 800341a:	e7fe      	b.n	800341a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800341c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003424:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003428:	0801274c 	.word	0x0801274c
  ldr r2, =_sbss
 800342c:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8003430:	20004078 	.word	0x20004078

08003434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003434:	e7fe      	b.n	8003434 <ADC1_2_IRQHandler>
	...

08003438 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <BSP_COM_Init+0x2a>
 800344a:	4b2d      	ldr	r3, [pc, #180]	@ (8003500 <BSP_COM_Init+0xc8>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344e:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <BSP_COM_Init+0xc8>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003456:	4b2a      	ldr	r3, [pc, #168]	@ (8003500 <BSP_COM_Init+0xc8>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <BSP_COM_Init+0x48>
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <BSP_COM_Init+0xc8>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346c:	4a24      	ldr	r2, [pc, #144]	@ (8003500 <BSP_COM_Init+0xc8>)
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003474:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <BSP_COM_Init+0xc8>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <BSP_COM_Init+0x66>
 8003486:	4b1e      	ldr	r3, [pc, #120]	@ (8003500 <BSP_COM_Init+0xc8>)
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	4a1d      	ldr	r2, [pc, #116]	@ (8003500 <BSP_COM_Init+0xc8>)
 800348c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003490:	6613      	str	r3, [r2, #96]	@ 0x60
 8003492:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <BSP_COM_Init+0xc8>)
 8003494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800349e:	2340      	movs	r3, #64	@ 0x40
 80034a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a6:	2302      	movs	r3, #2
 80034a8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80034ae:	2307      	movs	r3, #7
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <BSP_COM_Init+0xcc>)
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	f107 0214 	add.w	r2, r7, #20
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fccd 	bl	8003e60 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 80034ce:	2307      	movs	r3, #7
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003508 <BSP_COM_Init+0xd0>)
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	f107 0214 	add.w	r2, r7, #20
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fcbd 	bl	8003e60 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	4a08      	ldr	r2, [pc, #32]	@ (800350c <BSP_COM_Init+0xd4>)
 80034ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f005 f8b8 	bl	8008668 <HAL_UART_Init>
}
 80034f8:	bf00      	nop
 80034fa:	3728      	adds	r7, #40	@ 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	2000000c 	.word	0x2000000c
 8003508:	20000010 	.word	0x20000010
 800350c:	20000008 	.word	0x20000008

08003510 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003518:	4b27      	ldr	r3, [pc, #156]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 800351a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351c:	4a26      	ldr	r2, [pc, #152]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003524:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 8003526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003530:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003534:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003536:	2312      	movs	r3, #18
 8003538:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800353a:	2301      	movs	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003542:	2304      	movs	r3, #4
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	481b      	ldr	r0, [pc, #108]	@ (80035bc <I2Cx_MspInit+0xac>)
 800354e:	f000 fc87 	bl	8003e60 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	4818      	ldr	r0, [pc, #96]	@ (80035bc <I2Cx_MspInit+0xac>)
 800355a:	f000 fc81 	bl	8003e60 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800355e:	4b16      	ldr	r3, [pc, #88]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	4a15      	ldr	r2, [pc, #84]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 8003564:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003568:	6593      	str	r3, [r2, #88]	@ 0x58
 800356a:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 8003578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357a:	4a0f      	ldr	r2, [pc, #60]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 800357c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003580:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 8003584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003586:	4a0c      	ldr	r2, [pc, #48]	@ (80035b8 <I2Cx_MspInit+0xa8>)
 8003588:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800358c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800358e:	2200      	movs	r2, #0
 8003590:	210f      	movs	r1, #15
 8003592:	2021      	movs	r0, #33	@ 0x21
 8003594:	f000 fbed 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003598:	2021      	movs	r0, #33	@ 0x21
 800359a:	f000 fc06 	bl	8003daa <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	210f      	movs	r1, #15
 80035a2:	2022      	movs	r0, #34	@ 0x22
 80035a4:	f000 fbe5 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80035a8:	2022      	movs	r0, #34	@ 0x22
 80035aa:	f000 fbfe 	bl	8003daa <HAL_NVIC_EnableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3728      	adds	r7, #40	@ 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	48000400 	.word	0x48000400

080035c0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a12      	ldr	r2, [pc, #72]	@ (8003614 <I2Cx_Init+0x54>)
 80035cc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a11      	ldr	r2, [pc, #68]	@ (8003618 <I2Cx_Init+0x58>)
 80035d2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff89 	bl	8003510 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 ff14 	bl	800442c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003604:	2100      	movs	r1, #0
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f001 fcca 	bl	8004fa0 <HAL_I2CEx_ConfigAnalogFilter>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40005800 	.word	0x40005800
 8003618:	00702681 	.word	0x00702681

0800361c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	@ 0x28
 8003620:	af04      	add	r7, sp, #16
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	72fb      	strb	r3, [r7, #11]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800363a:	7afb      	ldrb	r3, [r7, #11]
 800363c:	b299      	uxth	r1, r3
 800363e:	88f8      	ldrh	r0, [r7, #6]
 8003640:	893a      	ldrh	r2, [r7, #8]
 8003642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003646:	9302      	str	r3, [sp, #8]
 8003648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4603      	mov	r3, r0
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f001 f8c8 	bl	80047e8 <HAL_I2C_Mem_Read>
 8003658:	4603      	mov	r3, r0
 800365a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	4619      	mov	r1, r3
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f832 	bl	80036d0 <I2Cx_Error>
  }
  return status;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08a      	sub	sp, #40	@ 0x28
 800367a:	af04      	add	r7, sp, #16
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	4608      	mov	r0, r1
 8003680:	4611      	mov	r1, r2
 8003682:	461a      	mov	r2, r3
 8003684:	4603      	mov	r3, r0
 8003686:	72fb      	strb	r3, [r7, #11]
 8003688:	460b      	mov	r3, r1
 800368a:	813b      	strh	r3, [r7, #8]
 800368c:	4613      	mov	r3, r2
 800368e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	b299      	uxth	r1, r3
 8003698:	88f8      	ldrh	r0, [r7, #6]
 800369a:	893a      	ldrh	r2, [r7, #8]
 800369c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036a0:	9302      	str	r3, [sp, #8]
 80036a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	4603      	mov	r3, r0
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 ff87 	bl	80045c0 <HAL_I2C_Mem_Write>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80036bc:	7afb      	ldrb	r3, [r7, #11]
 80036be:	4619      	mov	r1, r3
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f805 	bl	80036d0 <I2Cx_Error>
  }
  return status;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 ff40 	bl	8004562 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff6c 	bl	80035c0 <I2Cx_Init>
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80036f4:	4802      	ldr	r0, [pc, #8]	@ (8003700 <SENSOR_IO_Init+0x10>)
 80036f6:	f7ff ff63 	bl	80035c0 <I2Cx_Init>
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20002540 	.word	0x20002540

08003704 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af02      	add	r7, sp, #8
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
 800370e:	460b      	mov	r3, r1
 8003710:	71bb      	strb	r3, [r7, #6]
 8003712:	4613      	mov	r3, r2
 8003714:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003716:	79bb      	ldrb	r3, [r7, #6]
 8003718:	b29a      	uxth	r2, r3
 800371a:	79f9      	ldrb	r1, [r7, #7]
 800371c:	2301      	movs	r3, #1
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	1d7b      	adds	r3, r7, #5
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2301      	movs	r3, #1
 8003726:	4803      	ldr	r0, [pc, #12]	@ (8003734 <SENSOR_IO_Write+0x30>)
 8003728:	f7ff ffa5 	bl	8003676 <I2Cx_WriteMultiple>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20002540 	.word	0x20002540

08003738 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af02      	add	r7, sp, #8
 800373e:	4603      	mov	r3, r0
 8003740:	460a      	mov	r2, r1
 8003742:	71fb      	strb	r3, [r7, #7]
 8003744:	4613      	mov	r3, r2
 8003746:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800374c:	79bb      	ldrb	r3, [r7, #6]
 800374e:	b29a      	uxth	r2, r3
 8003750:	79f9      	ldrb	r1, [r7, #7]
 8003752:	2301      	movs	r3, #1
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	f107 030f 	add.w	r3, r7, #15
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2301      	movs	r3, #1
 800375e:	4804      	ldr	r0, [pc, #16]	@ (8003770 <SENSOR_IO_Read+0x38>)
 8003760:	f7ff ff5c 	bl	800361c <I2Cx_ReadMultiple>

  return read_value;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20002540 	.word	0x20002540

08003774 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af02      	add	r7, sp, #8
 800377a:	603a      	str	r2, [r7, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
 8003782:	460b      	mov	r3, r1
 8003784:	71bb      	strb	r3, [r7, #6]
 8003786:	4613      	mov	r3, r2
 8003788:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800378a:	79bb      	ldrb	r3, [r7, #6]
 800378c:	b29a      	uxth	r2, r3
 800378e:	79f9      	ldrb	r1, [r7, #7]
 8003790:	88bb      	ldrh	r3, [r7, #4]
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	4804      	ldr	r0, [pc, #16]	@ (80037ac <SENSOR_IO_ReadMultiple+0x38>)
 800379c:	f7ff ff3e 	bl	800361c <I2Cx_ReadMultiple>
 80037a0:	4603      	mov	r3, r0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20002540 	.word	0x20002540

080037b0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80037ba:	2300      	movs	r3, #0
 80037bc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80037be:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <BSP_ACCELERO_Init+0x78>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4798      	blx	r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b6a      	cmp	r3, #106	@ 0x6a
 80037c8:	d002      	beq.n	80037d0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e025      	b.n	800381c <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80037d0:	4b16      	ldr	r3, [pc, #88]	@ (800382c <BSP_ACCELERO_Init+0x7c>)
 80037d2:	4a15      	ldr	r2, [pc, #84]	@ (8003828 <BSP_ACCELERO_Init+0x78>)
 80037d4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80037d6:	2330      	movs	r3, #48	@ 0x30
 80037d8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80037de:	2300      	movs	r3, #0
 80037e0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80037e2:	2340      	movs	r3, #64	@ 0x40
 80037e4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80037ee:	797a      	ldrb	r2, [r7, #5]
 80037f0:	7abb      	ldrb	r3, [r7, #10]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80037f8:	7a3b      	ldrb	r3, [r7, #8]
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	b21b      	sxth	r3, r3
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	b21a      	sxth	r2, r3
 8003806:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	b21b      	sxth	r3, r3
 800380e:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <BSP_ACCELERO_Init+0x7c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	89ba      	ldrh	r2, [r7, #12]
 8003818:	4610      	mov	r0, r2
 800381a:	4798      	blx	r3
  }  

  return ret;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000014 	.word	0x20000014
 800382c:	2000261c 	.word	0x2000261c

08003830 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003838:	4b08      	ldr	r3, [pc, #32]	@ (800385c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800384a:	4b04      	ldr	r3, [pc, #16]	@ (800385c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
    }
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	2000261c 	.word	0x2000261c

08003860 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800386e:	2110      	movs	r1, #16
 8003870:	20d4      	movs	r0, #212	@ 0xd4
 8003872:	f7ff ff61 	bl	8003738 <SENSOR_IO_Read>
 8003876:	4603      	mov	r3, r0
 8003878:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800387e:	7bbb      	ldrb	r3, [r7, #14]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003886:	7bba      	ldrb	r2, [r7, #14]
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	4313      	orrs	r3, r2
 800388c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800388e:	7bbb      	ldrb	r3, [r7, #14]
 8003890:	461a      	mov	r2, r3
 8003892:	2110      	movs	r1, #16
 8003894:	20d4      	movs	r0, #212	@ 0xd4
 8003896:	f7ff ff35 	bl	8003704 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800389a:	2112      	movs	r1, #18
 800389c:	20d4      	movs	r0, #212	@ 0xd4
 800389e:	f7ff ff4b 	bl	8003738 <SENSOR_IO_Read>
 80038a2:	4603      	mov	r3, r0
 80038a4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80038ae:	7bbb      	ldrb	r3, [r7, #14]
 80038b0:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80038b4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80038b6:	7bba      	ldrb	r2, [r7, #14]
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80038be:	7bbb      	ldrb	r3, [r7, #14]
 80038c0:	461a      	mov	r2, r3
 80038c2:	2112      	movs	r1, #18
 80038c4:	20d4      	movs	r0, #212	@ 0xd4
 80038c6:	f7ff ff1d 	bl	8003704 <SENSOR_IO_Write>
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80038d8:	2300      	movs	r3, #0
 80038da:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80038dc:	2110      	movs	r1, #16
 80038de:	20d4      	movs	r0, #212	@ 0xd4
 80038e0:	f7ff ff2a 	bl	8003738 <SENSOR_IO_Read>
 80038e4:	4603      	mov	r3, r0
 80038e6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	461a      	mov	r2, r3
 80038f4:	2110      	movs	r1, #16
 80038f6:	20d4      	movs	r0, #212	@ 0xd4
 80038f8:	f7ff ff04 	bl	8003704 <SENSOR_IO_Write>
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003908:	f7ff fef2 	bl	80036f0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800390c:	210f      	movs	r1, #15
 800390e:	20d4      	movs	r0, #212	@ 0xd4
 8003910:	f7ff ff12 	bl	8003738 <SENSOR_IO_Read>
 8003914:	4603      	mov	r3, r0
}
 8003916:	4618      	mov	r0, r3
 8003918:	bd80      	pop	{r7, pc}

0800391a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003928:	2115      	movs	r1, #21
 800392a:	20d4      	movs	r0, #212	@ 0xd4
 800392c:	f7ff ff04 	bl	8003738 <SENSOR_IO_Read>
 8003930:	4603      	mov	r3, r0
 8003932:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	f023 0310 	bic.w	r3, r3, #16
 800393a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	461a      	mov	r2, r3
 800394e:	2115      	movs	r1, #21
 8003950:	20d4      	movs	r0, #212	@ 0xd4
 8003952:	f7ff fed7 	bl	8003704 <SENSOR_IO_Write>
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003968:	2300      	movs	r3, #0
 800396a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003976:	2110      	movs	r1, #16
 8003978:	20d4      	movs	r0, #212	@ 0xd4
 800397a:	f7ff fedd 	bl	8003738 <SENSOR_IO_Read>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003982:	f107 0208 	add.w	r2, r7, #8
 8003986:	2306      	movs	r3, #6
 8003988:	2128      	movs	r1, #40	@ 0x28
 800398a:	20d4      	movs	r0, #212	@ 0xd4
 800398c:	f7ff fef2 	bl	8003774 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003990:	2300      	movs	r3, #0
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e01a      	b.n	80039cc <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003996:	7ffb      	ldrb	r3, [r7, #31]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	3301      	adds	r3, #1
 800399c:	3320      	adds	r3, #32
 800399e:	443b      	add	r3, r7
 80039a0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	7ffa      	ldrb	r2, [r7, #31]
 80039aa:	0052      	lsls	r2, r2, #1
 80039ac:	3220      	adds	r2, #32
 80039ae:	443a      	add	r2, r7
 80039b0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80039b4:	4413      	add	r3, r2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	7ffb      	ldrb	r3, [r7, #31]
 80039ba:	b212      	sxth	r2, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	3320      	adds	r3, #32
 80039c0:	443b      	add	r3, r7
 80039c2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80039c6:	7ffb      	ldrb	r3, [r7, #31]
 80039c8:	3301      	adds	r3, #1
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	7ffb      	ldrb	r3, [r7, #31]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d9e1      	bls.n	8003996 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	d829      	bhi.n	8003a30 <LSM6DSL_AccReadXYZ+0xd0>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <LSM6DSL_AccReadXYZ+0x84>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a31 	.word	0x08003a31
 80039ec:	08003a31 	.word	0x08003a31
 80039f0:	08003a31 	.word	0x08003a31
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a31 	.word	0x08003a31
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003a31 	.word	0x08003a31
 8003a04:	08003a1f 	.word	0x08003a1f
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a31 	.word	0x08003a31
 8003a14:	08003a25 	.word	0x08003a25
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003a18:	4b18      	ldr	r3, [pc, #96]	@ (8003a7c <LSM6DSL_AccReadXYZ+0x11c>)
 8003a1a:	61bb      	str	r3, [r7, #24]
    break;
 8003a1c:	e008      	b.n	8003a30 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003a1e:	4b18      	ldr	r3, [pc, #96]	@ (8003a80 <LSM6DSL_AccReadXYZ+0x120>)
 8003a20:	61bb      	str	r3, [r7, #24]
    break;
 8003a22:	e005      	b.n	8003a30 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003a24:	4b17      	ldr	r3, [pc, #92]	@ (8003a84 <LSM6DSL_AccReadXYZ+0x124>)
 8003a26:	61bb      	str	r3, [r7, #24]
    break;
 8003a28:	e002      	b.n	8003a30 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003a2a:	4b17      	ldr	r3, [pc, #92]	@ (8003a88 <LSM6DSL_AccReadXYZ+0x128>)
 8003a2c:	61bb      	str	r3, [r7, #24]
    break;    
 8003a2e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e01a      	b.n	8003a6c <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003a36:	7ffb      	ldrb	r3, [r7, #31]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	3320      	adds	r3, #32
 8003a3c:	443b      	add	r3, r7
 8003a3e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a52:	7ffb      	ldrb	r3, [r7, #31]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a5e:	ee17 2a90 	vmov	r2, s15
 8003a62:	b212      	sxth	r2, r2
 8003a64:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003a66:	7ffb      	ldrb	r3, [r7, #31]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	7ffb      	ldrb	r3, [r7, #31]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d9e1      	bls.n	8003a36 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003a72:	bf00      	nop
 8003a74:	bf00      	nop
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	3d79db23 	.word	0x3d79db23
 8003a80:	3df9db23 	.word	0x3df9db23
 8003a84:	3e79db23 	.word	0x3e79db23
 8003a88:	3ef9db23 	.word	0x3ef9db23

08003a8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a96:	2003      	movs	r0, #3
 8003a98:	f000 f960 	bl	8003d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a9c:	200f      	movs	r0, #15
 8003a9e:	f000 f80d 	bl	8003abc <HAL_InitTick>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	71fb      	strb	r3, [r7, #7]
 8003aac:	e001      	b.n	8003ab2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003aae:	f7ff f89b 	bl	8002be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ac8:	4b17      	ldr	r3, [pc, #92]	@ (8003b28 <HAL_InitTick+0x6c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d023      	beq.n	8003b18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ad0:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <HAL_InitTick+0x70>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <HAL_InitTick+0x6c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f96d 	bl	8003dc6 <HAL_SYSTICK_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b0f      	cmp	r3, #15
 8003af6:	d809      	bhi.n	8003b0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af8:	2200      	movs	r2, #0
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f000 f937 	bl	8003d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b04:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <HAL_InitTick+0x74>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e007      	b.n	8003b1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e004      	b.n	8003b1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e001      	b.n	8003b1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	2000004c 	.word	0x2000004c
 8003b2c:	20000004 	.word	0x20000004
 8003b30:	20000048 	.word	0x20000048

08003b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b38:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_IncTick+0x20>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_IncTick+0x24>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <HAL_IncTick+0x24>)
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	2000004c 	.word	0x2000004c
 8003b58:	20002620 	.word	0x20002620

08003b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <HAL_GetTick+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20002620 	.word	0x20002620

08003b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b7c:	f7ff ffee 	bl	8003b5c <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d005      	beq.n	8003b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <HAL_Delay+0x44>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b9a:	bf00      	nop
 8003b9c:	f7ff ffde 	bl	8003b5c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d8f7      	bhi.n	8003b9c <HAL_Delay+0x28>
  {
  }
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	2000004c 	.word	0x2000004c

08003bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bee:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	60d3      	str	r3, [r2, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <__NVIC_GetPriorityGrouping+0x18>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	f003 0307 	and.w	r3, r3, #7
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db0b      	blt.n	8003c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4907      	ldr	r1, [pc, #28]	@ (8003c58 <__NVIC_EnableIRQ+0x38>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2001      	movs	r0, #1
 8003c42:	fa00 f202 	lsl.w	r2, r0, r2
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	@ (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	@ (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	@ 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d28:	d301      	bcc.n	8003d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <SysTick_Config+0x40>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d36:	210f      	movs	r1, #15
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	f7ff ff8e 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d40:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <SysTick_Config+0x40>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d46:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <SysTick_Config+0x40>)
 8003d48:	2207      	movs	r2, #7
 8003d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	e000e010 	.word	0xe000e010

08003d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff29 	bl	8003bbc <__NVIC_SetPriorityGrouping>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d84:	f7ff ff3e 	bl	8003c04 <__NVIC_GetPriorityGrouping>
 8003d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7ff ff8e 	bl	8003cb0 <NVIC_EncodePriority>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff5d 	bl	8003c5c <__NVIC_SetPriority>
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff31 	bl	8003c20 <__NVIC_EnableIRQ>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ffa2 	bl	8003d18 <SysTick_Config>
 8003dd4:	4603      	mov	r3, r0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d005      	beq.n	8003e02 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2204      	movs	r2, #4
 8003dfa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	e029      	b.n	8003e56 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 020e 	bic.w	r2, r2, #14
 8003e10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f003 021c 	and.w	r2, r3, #28
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2101      	movs	r1, #1
 8003e30:	fa01 f202 	lsl.w	r2, r1, r2
 8003e34:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
    }
  }
  return status;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	e17f      	b.n	8004170 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8171 	beq.w	800416a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d005      	beq.n	8003ea0 <HAL_GPIO_Init+0x40>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d130      	bne.n	8003f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 0201 	and.w	r2, r3, #1
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d118      	bne.n	8003f40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f14:	2201      	movs	r2, #1
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	08db      	lsrs	r3, r3, #3
 8003f2a:	f003 0201 	and.w	r2, r3, #1
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d017      	beq.n	8003f7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d123      	bne.n	8003fd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3208      	adds	r2, #8
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	6939      	ldr	r1, [r7, #16]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80ac 	beq.w	800416a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	4b5f      	ldr	r3, [pc, #380]	@ (8004190 <HAL_GPIO_Init+0x330>)
 8004014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004016:	4a5e      	ldr	r2, [pc, #376]	@ (8004190 <HAL_GPIO_Init+0x330>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	6613      	str	r3, [r2, #96]	@ 0x60
 800401e:	4b5c      	ldr	r3, [pc, #368]	@ (8004190 <HAL_GPIO_Init+0x330>)
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800402a:	4a5a      	ldr	r2, [pc, #360]	@ (8004194 <HAL_GPIO_Init+0x334>)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	3302      	adds	r3, #2
 8004032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	220f      	movs	r2, #15
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004054:	d025      	beq.n	80040a2 <HAL_GPIO_Init+0x242>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4f      	ldr	r2, [pc, #316]	@ (8004198 <HAL_GPIO_Init+0x338>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <HAL_GPIO_Init+0x23e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4e      	ldr	r2, [pc, #312]	@ (800419c <HAL_GPIO_Init+0x33c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x23a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4d      	ldr	r2, [pc, #308]	@ (80041a0 <HAL_GPIO_Init+0x340>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x236>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4c      	ldr	r2, [pc, #304]	@ (80041a4 <HAL_GPIO_Init+0x344>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x232>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4b      	ldr	r2, [pc, #300]	@ (80041a8 <HAL_GPIO_Init+0x348>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x22e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4a      	ldr	r2, [pc, #296]	@ (80041ac <HAL_GPIO_Init+0x34c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x22a>
 8004086:	2306      	movs	r3, #6
 8004088:	e00c      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 800408a:	2307      	movs	r3, #7
 800408c:	e00a      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 800408e:	2305      	movs	r3, #5
 8004090:	e008      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 8004092:	2304      	movs	r3, #4
 8004094:	e006      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 8004096:	2303      	movs	r3, #3
 8004098:	e004      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 800409a:	2302      	movs	r3, #2
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 80040a2:	2300      	movs	r3, #0
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	f002 0203 	and.w	r2, r2, #3
 80040aa:	0092      	lsls	r2, r2, #2
 80040ac:	4093      	lsls	r3, r2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040b4:	4937      	ldr	r1, [pc, #220]	@ (8004194 <HAL_GPIO_Init+0x334>)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	3302      	adds	r3, #2
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c2:	4b3b      	ldr	r3, [pc, #236]	@ (80041b0 <HAL_GPIO_Init+0x350>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e6:	4a32      	ldr	r2, [pc, #200]	@ (80041b0 <HAL_GPIO_Init+0x350>)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ec:	4b30      	ldr	r3, [pc, #192]	@ (80041b0 <HAL_GPIO_Init+0x350>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004110:	4a27      	ldr	r2, [pc, #156]	@ (80041b0 <HAL_GPIO_Init+0x350>)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004116:	4b26      	ldr	r3, [pc, #152]	@ (80041b0 <HAL_GPIO_Init+0x350>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43db      	mvns	r3, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4013      	ands	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800413a:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <HAL_GPIO_Init+0x350>)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004140:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_GPIO_Init+0x350>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43db      	mvns	r3, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004164:	4a12      	ldr	r2, [pc, #72]	@ (80041b0 <HAL_GPIO_Init+0x350>)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	3301      	adds	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa22 f303 	lsr.w	r3, r2, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	f47f ae78 	bne.w	8003e70 <HAL_GPIO_Init+0x10>
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	40010000 	.word	0x40010000
 8004198:	48000400 	.word	0x48000400
 800419c:	48000800 	.word	0x48000800
 80041a0:	48000c00 	.word	0x48000c00
 80041a4:	48001000 	.word	0x48001000
 80041a8:	48001400 	.word	0x48001400
 80041ac:	48001800 	.word	0x48001800
 80041b0:	40010400 	.word	0x40010400

080041b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80041c2:	e0cd      	b.n	8004360 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80041c4:	2201      	movs	r2, #1
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80c0 	beq.w	800435a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80041da:	4a68      	ldr	r2, [pc, #416]	@ (800437c <HAL_GPIO_DeInit+0x1c8>)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	220f      	movs	r2, #15
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004202:	d025      	beq.n	8004250 <HAL_GPIO_DeInit+0x9c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a5e      	ldr	r2, [pc, #376]	@ (8004380 <HAL_GPIO_DeInit+0x1cc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d01f      	beq.n	800424c <HAL_GPIO_DeInit+0x98>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a5d      	ldr	r2, [pc, #372]	@ (8004384 <HAL_GPIO_DeInit+0x1d0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d019      	beq.n	8004248 <HAL_GPIO_DeInit+0x94>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a5c      	ldr	r2, [pc, #368]	@ (8004388 <HAL_GPIO_DeInit+0x1d4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_GPIO_DeInit+0x90>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a5b      	ldr	r2, [pc, #364]	@ (800438c <HAL_GPIO_DeInit+0x1d8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00d      	beq.n	8004240 <HAL_GPIO_DeInit+0x8c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a5a      	ldr	r2, [pc, #360]	@ (8004390 <HAL_GPIO_DeInit+0x1dc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d007      	beq.n	800423c <HAL_GPIO_DeInit+0x88>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a59      	ldr	r2, [pc, #356]	@ (8004394 <HAL_GPIO_DeInit+0x1e0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <HAL_GPIO_DeInit+0x84>
 8004234:	2306      	movs	r3, #6
 8004236:	e00c      	b.n	8004252 <HAL_GPIO_DeInit+0x9e>
 8004238:	2307      	movs	r3, #7
 800423a:	e00a      	b.n	8004252 <HAL_GPIO_DeInit+0x9e>
 800423c:	2305      	movs	r3, #5
 800423e:	e008      	b.n	8004252 <HAL_GPIO_DeInit+0x9e>
 8004240:	2304      	movs	r3, #4
 8004242:	e006      	b.n	8004252 <HAL_GPIO_DeInit+0x9e>
 8004244:	2303      	movs	r3, #3
 8004246:	e004      	b.n	8004252 <HAL_GPIO_DeInit+0x9e>
 8004248:	2302      	movs	r3, #2
 800424a:	e002      	b.n	8004252 <HAL_GPIO_DeInit+0x9e>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_GPIO_DeInit+0x9e>
 8004250:	2300      	movs	r3, #0
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	f002 0203 	and.w	r2, r2, #3
 8004258:	0092      	lsls	r2, r2, #2
 800425a:	4093      	lsls	r3, r2
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	429a      	cmp	r2, r3
 8004260:	d132      	bne.n	80042c8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004262:	4b4d      	ldr	r3, [pc, #308]	@ (8004398 <HAL_GPIO_DeInit+0x1e4>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	43db      	mvns	r3, r3
 800426a:	494b      	ldr	r1, [pc, #300]	@ (8004398 <HAL_GPIO_DeInit+0x1e4>)
 800426c:	4013      	ands	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004270:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_GPIO_DeInit+0x1e4>)
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	43db      	mvns	r3, r3
 8004278:	4947      	ldr	r1, [pc, #284]	@ (8004398 <HAL_GPIO_DeInit+0x1e4>)
 800427a:	4013      	ands	r3, r2
 800427c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800427e:	4b46      	ldr	r3, [pc, #280]	@ (8004398 <HAL_GPIO_DeInit+0x1e4>)
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	43db      	mvns	r3, r3
 8004286:	4944      	ldr	r1, [pc, #272]	@ (8004398 <HAL_GPIO_DeInit+0x1e4>)
 8004288:	4013      	ands	r3, r2
 800428a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800428c:	4b42      	ldr	r3, [pc, #264]	@ (8004398 <HAL_GPIO_DeInit+0x1e4>)
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	4940      	ldr	r1, [pc, #256]	@ (8004398 <HAL_GPIO_DeInit+0x1e4>)
 8004296:	4013      	ands	r3, r2
 8004298:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	220f      	movs	r2, #15
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80042aa:	4a34      	ldr	r2, [pc, #208]	@ (800437c <HAL_GPIO_DeInit+0x1c8>)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	3302      	adds	r3, #2
 80042b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	4830      	ldr	r0, [pc, #192]	@ (800437c <HAL_GPIO_DeInit+0x1c8>)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	400a      	ands	r2, r1
 80042c2:	3302      	adds	r3, #2
 80042c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2103      	movs	r1, #3
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	08d2      	lsrs	r2, r2, #3
 80042fc:	4019      	ands	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3208      	adds	r2, #8
 8004302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2103      	movs	r1, #3
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	401a      	ands	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	2101      	movs	r1, #1
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	401a      	ands	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2103      	movs	r1, #3
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434a:	2101      	movs	r1, #1
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	401a      	ands	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f47f af2b 	bne.w	80041c4 <HAL_GPIO_DeInit+0x10>
  }
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40010000 	.word	0x40010000
 8004380:	48000400 	.word	0x48000400
 8004384:	48000800 	.word	0x48000800
 8004388:	48000c00 	.word	0x48000c00
 800438c:	48001000 	.word	0x48001000
 8004390:	48001400 	.word	0x48001400
 8004394:	48001800 	.word	0x48001800
 8004398:	40010400 	.word	0x40010400

0800439c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	887b      	ldrh	r3, [r7, #2]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
 80043b8:	e001      	b.n	80043be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
 80043d8:	4613      	mov	r3, r2
 80043da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043dc:	787b      	ldrb	r3, [r7, #1]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043e8:	e002      	b.n	80043f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004406:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	4013      	ands	r3, r2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d006      	beq.n	8004420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004412:	4a05      	ldr	r2, [pc, #20]	@ (8004428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fbca 	bl	8002bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40010400 	.word	0x40010400

0800442c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e08d      	b.n	800455a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fe fbf0 	bl	8002c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	@ 0x24
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800447c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800448c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	e006      	b.n	80044b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d108      	bne.n	80044ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ca:	605a      	str	r2, [r3, #4]
 80044cc:	e007      	b.n	80044de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004500:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69d9      	ldr	r1, [r3, #28]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e021      	b.n	80045b8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	@ 0x24
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fe fbb1 	bl	8002cf4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	461a      	mov	r2, r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	817b      	strh	r3, [r7, #10]
 80045d2:	460b      	mov	r3, r1
 80045d4:	813b      	strh	r3, [r7, #8]
 80045d6:	4613      	mov	r3, r2
 80045d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	f040 80f9 	bne.w	80047da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_I2C_Mem_Write+0x34>
 80045ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0ed      	b.n	80047dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_I2C_Mem_Write+0x4e>
 800460a:	2302      	movs	r3, #2
 800460c:	e0e6      	b.n	80047dc <HAL_I2C_Mem_Write+0x21c>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004616:	f7ff faa1 	bl	8003b5c <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2319      	movs	r3, #25
 8004622:	2201      	movs	r2, #1
 8004624:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fac3 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0d1      	b.n	80047dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2221      	movs	r2, #33	@ 0x21
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2240      	movs	r2, #64	@ 0x40
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a3a      	ldr	r2, [r7, #32]
 8004652:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004658:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004660:	88f8      	ldrh	r0, [r7, #6]
 8004662:	893a      	ldrh	r2, [r7, #8]
 8004664:	8979      	ldrh	r1, [r7, #10]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	4603      	mov	r3, r0
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f9d3 	bl	8004a1c <I2C_RequestMemoryWrite>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0a9      	b.n	80047dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2bff      	cmp	r3, #255	@ 0xff
 8004690:	d90e      	bls.n	80046b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	22ff      	movs	r2, #255	@ 0xff
 8004696:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469c:	b2da      	uxtb	r2, r3
 800469e:	8979      	ldrh	r1, [r7, #10]
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fc47 	bl	8004f3c <I2C_TransferConfig>
 80046ae:	e00f      	b.n	80046d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	8979      	ldrh	r1, [r7, #10]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fc36 	bl	8004f3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fac6 	bl	8004c66 <I2C_WaitOnTXISFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e07b      	b.n	80047dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d034      	beq.n	8004788 <HAL_I2C_Mem_Write+0x1c8>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d130      	bne.n	8004788 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	2200      	movs	r2, #0
 800472e:	2180      	movs	r1, #128	@ 0x80
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fa3f 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e04d      	b.n	80047dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	2bff      	cmp	r3, #255	@ 0xff
 8004748:	d90e      	bls.n	8004768 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	22ff      	movs	r2, #255	@ 0xff
 800474e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004754:	b2da      	uxtb	r2, r3
 8004756:	8979      	ldrh	r1, [r7, #10]
 8004758:	2300      	movs	r3, #0
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fbeb 	bl	8004f3c <I2C_TransferConfig>
 8004766:	e00f      	b.n	8004788 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004776:	b2da      	uxtb	r2, r3
 8004778:	8979      	ldrh	r1, [r7, #10]
 800477a:	2300      	movs	r3, #0
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fbda 	bl	8004f3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d19e      	bne.n	80046d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 faac 	bl	8004cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e01a      	b.n	80047dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2220      	movs	r2, #32
 80047ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <HAL_I2C_Mem_Write+0x224>)
 80047ba:	400b      	ands	r3, r1
 80047bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e000      	b.n	80047dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047da:	2302      	movs	r3, #2
  }
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	fe00e800 	.word	0xfe00e800

080047e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	4608      	mov	r0, r1
 80047f2:	4611      	mov	r1, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	817b      	strh	r3, [r7, #10]
 80047fa:	460b      	mov	r3, r1
 80047fc:	813b      	strh	r3, [r7, #8]
 80047fe:	4613      	mov	r3, r2
 8004800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	f040 80fd 	bne.w	8004a0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_I2C_Mem_Read+0x34>
 8004816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004822:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0f1      	b.n	8004a0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_I2C_Mem_Read+0x4e>
 8004832:	2302      	movs	r3, #2
 8004834:	e0ea      	b.n	8004a0c <HAL_I2C_Mem_Read+0x224>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800483e:	f7ff f98d 	bl	8003b5c <HAL_GetTick>
 8004842:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2319      	movs	r3, #25
 800484a:	2201      	movs	r2, #1
 800484c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f9af 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0d5      	b.n	8004a0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2222      	movs	r2, #34	@ 0x22
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2240      	movs	r2, #64	@ 0x40
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a3a      	ldr	r2, [r7, #32]
 800487a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004888:	88f8      	ldrh	r0, [r7, #6]
 800488a:	893a      	ldrh	r2, [r7, #8]
 800488c:	8979      	ldrh	r1, [r7, #10]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4603      	mov	r3, r0
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f913 	bl	8004ac4 <I2C_RequestMemoryRead>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0ad      	b.n	8004a0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2bff      	cmp	r3, #255	@ 0xff
 80048b8:	d90e      	bls.n	80048d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	8979      	ldrh	r1, [r7, #10]
 80048c8:	4b52      	ldr	r3, [pc, #328]	@ (8004a14 <HAL_I2C_Mem_Read+0x22c>)
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fb33 	bl	8004f3c <I2C_TransferConfig>
 80048d6:	e00f      	b.n	80048f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	8979      	ldrh	r1, [r7, #10]
 80048ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_I2C_Mem_Read+0x22c>)
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fb22 	bl	8004f3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	2200      	movs	r2, #0
 8004900:	2104      	movs	r1, #4
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f956 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07c      	b.n	8004a0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d034      	beq.n	80049b8 <HAL_I2C_Mem_Read+0x1d0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d130      	bne.n	80049b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	@ 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f927 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e04d      	b.n	8004a0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2bff      	cmp	r3, #255	@ 0xff
 8004978:	d90e      	bls.n	8004998 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004984:	b2da      	uxtb	r2, r3
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	2300      	movs	r3, #0
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fad3 	bl	8004f3c <I2C_TransferConfig>
 8004996:	e00f      	b.n	80049b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	8979      	ldrh	r1, [r7, #10]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fac2 	bl	8004f3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d19a      	bne.n	80048f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f994 	bl	8004cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01a      	b.n	8004a0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2220      	movs	r2, #32
 80049dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <HAL_I2C_Mem_Read+0x230>)
 80049ea:	400b      	ands	r3, r1
 80049ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
  }
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	80002400 	.word	0x80002400
 8004a18:	fe00e800 	.word	0xfe00e800

08004a1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	817b      	strh	r3, [r7, #10]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	813b      	strh	r3, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	8979      	ldrh	r1, [r7, #10]
 8004a3c:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <I2C_RequestMemoryWrite+0xa4>)
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fa79 	bl	8004f3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f909 	bl	8004c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e02c      	b.n	8004ab8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d105      	bne.n	8004a70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a64:	893b      	ldrh	r3, [r7, #8]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a6e:	e015      	b.n	8004a9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a70:	893b      	ldrh	r3, [r7, #8]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	69b9      	ldr	r1, [r7, #24]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8ef 	bl	8004c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e012      	b.n	8004ab8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a92:	893b      	ldrh	r3, [r7, #8]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2180      	movs	r1, #128	@ 0x80
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f884 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	80002000 	.word	0x80002000

08004ac4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	4608      	mov	r0, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	817b      	strh	r3, [r7, #10]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	813b      	strh	r3, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	8979      	ldrh	r1, [r7, #10]
 8004ae4:	4b20      	ldr	r3, [pc, #128]	@ (8004b68 <I2C_RequestMemoryRead+0xa4>)
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa26 	bl	8004f3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	69b9      	ldr	r1, [r7, #24]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f8b6 	bl	8004c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e02c      	b.n	8004b5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d105      	bne.n	8004b16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0a:	893b      	ldrh	r3, [r7, #8]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b14:	e015      	b.n	8004b42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b16:	893b      	ldrh	r3, [r7, #8]
 8004b18:	0a1b      	lsrs	r3, r3, #8
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	69b9      	ldr	r1, [r7, #24]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f89c 	bl	8004c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e012      	b.n	8004b5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b38:	893b      	ldrh	r3, [r7, #8]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2140      	movs	r1, #64	@ 0x40
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f831 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	80002000 	.word	0x80002000

08004b6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d103      	bne.n	8004b8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d007      	beq.n	8004ba8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	619a      	str	r2, [r3, #24]
  }
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc4:	e03b      	b.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f8d6 	bl	8004d7c <I2C_IsErrorOccurred>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e041      	b.n	8004c5e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d02d      	beq.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be2:	f7fe ffbb 	bl	8003b5c <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d122      	bne.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d113      	bne.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e00f      	b.n	8004c5e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	bf0c      	ite	eq
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	2300      	movne	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d0b4      	beq.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c72:	e033      	b.n	8004cdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f87f 	bl	8004d7c <I2C_IsErrorOccurred>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e031      	b.n	8004cec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d025      	beq.n	8004cdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c90:	f7fe ff64 	bl	8003b5c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d11a      	bne.n	8004cdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d013      	beq.n	8004cdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e007      	b.n	8004cec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d1c4      	bne.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d00:	e02f      	b.n	8004d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f838 	bl	8004d7c <I2C_IsErrorOccurred>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e02d      	b.n	8004d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d16:	f7fe ff21 	bl	8003b5c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d302      	bcc.n	8004d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d11a      	bne.n	8004d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d013      	beq.n	8004d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e007      	b.n	8004d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d1c8      	bne.n	8004d02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	@ 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d068      	beq.n	8004e7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2210      	movs	r2, #16
 8004dae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004db0:	e049      	b.n	8004e46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d045      	beq.n	8004e46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dba:	f7fe fecf 	bl	8003b5c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d302      	bcc.n	8004dd0 <I2C_IsErrorOccurred+0x54>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d13a      	bne.n	8004e46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004de2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df2:	d121      	bne.n	8004e38 <I2C_IsErrorOccurred+0xbc>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dfa:	d01d      	beq.n	8004e38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d01a      	beq.n	8004e38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e12:	f7fe fea3 	bl	8003b5c <HAL_GetTick>
 8004e16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e18:	e00e      	b.n	8004e38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e1a:	f7fe fe9f 	bl	8003b5c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b19      	cmp	r3, #25
 8004e26:	d907      	bls.n	8004e38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f043 0320 	orr.w	r3, r3, #32
 8004e2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e36:	e006      	b.n	8004e46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d1e9      	bne.n	8004e1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d003      	beq.n	8004e5c <I2C_IsErrorOccurred+0xe0>
 8004e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0aa      	beq.n	8004db2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	f043 0304 	orr.w	r3, r3, #4
 8004e72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00b      	beq.n	8004ec6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f043 0308 	orr.w	r3, r3, #8
 8004eb4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ebe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	f043 0302 	orr.w	r3, r3, #2
 8004ed6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01c      	beq.n	8004f2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff fe3b 	bl	8004b6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b0d      	ldr	r3, [pc, #52]	@ (8004f38 <I2C_IsErrorOccurred+0x1bc>)
 8004f02:	400b      	ands	r3, r1
 8004f04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3728      	adds	r7, #40	@ 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	fe00e800 	.word	0xfe00e800

08004f3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	817b      	strh	r3, [r7, #10]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f4e:	897b      	ldrh	r3, [r7, #10]
 8004f50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f54:	7a7b      	ldrb	r3, [r7, #9]
 8004f56:	041b      	lsls	r3, r3, #16
 8004f58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	0d5b      	lsrs	r3, r3, #21
 8004f76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f7a:	4b08      	ldr	r3, [pc, #32]	@ (8004f9c <I2C_TransferConfig+0x60>)
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	ea02 0103 	and.w	r1, r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	03ff63ff 	.word	0x03ff63ff

08004fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d138      	bne.n	8005028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e032      	b.n	800502a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2224      	movs	r2, #36	@ 0x24
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0201 	bic.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6819      	ldr	r1, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	e000      	b.n	800502a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005028:	2302      	movs	r3, #2
  }
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800503c:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a04      	ldr	r2, [pc, #16]	@ (8005054 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005046:	6013      	str	r3, [r2, #0]
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40007000 	.word	0x40007000

08005058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800505c:	4b04      	ldr	r3, [pc, #16]	@ (8005070 <HAL_PWREx_GetVoltageRange+0x18>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40007000 	.word	0x40007000

08005074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005082:	d130      	bne.n	80050e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005084:	4b23      	ldr	r3, [pc, #140]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800508c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005090:	d038      	beq.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005092:	4b20      	ldr	r3, [pc, #128]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800509a:	4a1e      	ldr	r2, [pc, #120]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800509c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005118 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2232      	movs	r2, #50	@ 0x32
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	4a1b      	ldr	r2, [pc, #108]	@ (800511c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0c9b      	lsrs	r3, r3, #18
 80050b4:	3301      	adds	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b8:	e002      	b.n	80050c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3b01      	subs	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c0:	4b14      	ldr	r3, [pc, #80]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050cc:	d102      	bne.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f2      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e0:	d110      	bne.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e00f      	b.n	8005106 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f2:	d007      	beq.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050f4:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050fc:	4a05      	ldr	r2, [pc, #20]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005102:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40007000 	.word	0x40007000
 8005118:	20000004 	.word	0x20000004
 800511c:	431bde83 	.word	0x431bde83

08005120 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e3ca      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005132:	4b97      	ldr	r3, [pc, #604]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800513c:	4b94      	ldr	r3, [pc, #592]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0303 	and.w	r3, r3, #3
 8005144:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80e4 	beq.w	800531c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <HAL_RCC_OscConfig+0x4a>
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	f040 808b 	bne.w	8005278 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b01      	cmp	r3, #1
 8005166:	f040 8087 	bne.w	8005278 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800516a:	4b89      	ldr	r3, [pc, #548]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RCC_OscConfig+0x62>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e3a2      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	4b82      	ldr	r3, [pc, #520]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_RCC_OscConfig+0x7c>
 8005192:	4b7f      	ldr	r3, [pc, #508]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800519a:	e005      	b.n	80051a8 <HAL_RCC_OscConfig+0x88>
 800519c:	4b7c      	ldr	r3, [pc, #496]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d223      	bcs.n	80051f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fd55 	bl	8005c60 <RCC_SetFlashLatencyFromMSIRange>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e383      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051c0:	4b73      	ldr	r3, [pc, #460]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a72      	ldr	r2, [pc, #456]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80051c6:	f043 0308 	orr.w	r3, r3, #8
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	4b70      	ldr	r3, [pc, #448]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	496d      	ldr	r1, [pc, #436]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051de:	4b6c      	ldr	r3, [pc, #432]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	4968      	ldr	r1, [pc, #416]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
 80051f2:	e025      	b.n	8005240 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051f4:	4b66      	ldr	r3, [pc, #408]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a65      	ldr	r2, [pc, #404]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80051fa:	f043 0308 	orr.w	r3, r3, #8
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	4b63      	ldr	r3, [pc, #396]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	4960      	ldr	r1, [pc, #384]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005212:	4b5f      	ldr	r3, [pc, #380]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	495b      	ldr	r1, [pc, #364]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005222:	4313      	orrs	r3, r2
 8005224:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fd15 	bl	8005c60 <RCC_SetFlashLatencyFromMSIRange>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e343      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005240:	f000 fc4a 	bl	8005ad8 <HAL_RCC_GetSysClockFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b52      	ldr	r3, [pc, #328]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	4950      	ldr	r1, [pc, #320]	@ (8005394 <HAL_RCC_OscConfig+0x274>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	4a4e      	ldr	r2, [pc, #312]	@ (8005398 <HAL_RCC_OscConfig+0x278>)
 800525e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005260:	4b4e      	ldr	r3, [pc, #312]	@ (800539c <HAL_RCC_OscConfig+0x27c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fe fc29 	bl	8003abc <HAL_InitTick>
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d052      	beq.n	800531a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	e327      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d032      	beq.n	80052e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005280:	4b43      	ldr	r3, [pc, #268]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a42      	ldr	r2, [pc, #264]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800528c:	f7fe fc66 	bl	8003b5c <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005294:	f7fe fc62 	bl	8003b5c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e310      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b2:	4b37      	ldr	r3, [pc, #220]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a36      	ldr	r2, [pc, #216]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052b8:	f043 0308 	orr.w	r3, r3, #8
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	4b34      	ldr	r3, [pc, #208]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	4931      	ldr	r1, [pc, #196]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052d0:	4b2f      	ldr	r3, [pc, #188]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	492c      	ldr	r1, [pc, #176]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]
 80052e4:	e01a      	b.n	800531c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a29      	ldr	r2, [pc, #164]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052f2:	f7fe fc33 	bl	8003b5c <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052fa:	f7fe fc2f 	bl	8003b5c <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e2dd      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800530c:	4b20      	ldr	r3, [pc, #128]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x1da>
 8005318:	e000      	b.n	800531c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800531a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d074      	beq.n	8005412 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b08      	cmp	r3, #8
 800532c:	d005      	beq.n	800533a <HAL_RCC_OscConfig+0x21a>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d10e      	bne.n	8005352 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d10b      	bne.n	8005352 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800533a:	4b15      	ldr	r3, [pc, #84]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d064      	beq.n	8005410 <HAL_RCC_OscConfig+0x2f0>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d160      	bne.n	8005410 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e2ba      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800535a:	d106      	bne.n	800536a <HAL_RCC_OscConfig+0x24a>
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0b      	ldr	r2, [pc, #44]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	e026      	b.n	80053b8 <HAL_RCC_OscConfig+0x298>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005372:	d115      	bne.n	80053a0 <HAL_RCC_OscConfig+0x280>
 8005374:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a05      	ldr	r2, [pc, #20]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 800537a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4b03      	ldr	r3, [pc, #12]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a02      	ldr	r2, [pc, #8]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 8005386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e014      	b.n	80053b8 <HAL_RCC_OscConfig+0x298>
 800538e:	bf00      	nop
 8005390:	40021000 	.word	0x40021000
 8005394:	08012274 	.word	0x08012274
 8005398:	20000004 	.word	0x20000004
 800539c:	20000048 	.word	0x20000048
 80053a0:	4ba0      	ldr	r3, [pc, #640]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a9f      	ldr	r2, [pc, #636]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4b9d      	ldr	r3, [pc, #628]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a9c      	ldr	r2, [pc, #624]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80053b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d013      	beq.n	80053e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fe fbcc 	bl	8003b5c <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c8:	f7fe fbc8 	bl	8003b5c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b64      	cmp	r3, #100	@ 0x64
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e276      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053da:	4b92      	ldr	r3, [pc, #584]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x2a8>
 80053e6:	e014      	b.n	8005412 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fe fbb8 	bl	8003b5c <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f0:	f7fe fbb4 	bl	8003b5c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	@ 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e262      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005402:	4b88      	ldr	r3, [pc, #544]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x2d0>
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d060      	beq.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d005      	beq.n	8005430 <HAL_RCC_OscConfig+0x310>
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d119      	bne.n	800545e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d116      	bne.n	800545e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005430:	4b7c      	ldr	r3, [pc, #496]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <HAL_RCC_OscConfig+0x328>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e23f      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005448:	4b76      	ldr	r3, [pc, #472]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	4973      	ldr	r1, [pc, #460]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800545c:	e040      	b.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d023      	beq.n	80054ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005466:	4b6f      	ldr	r3, [pc, #444]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a6e      	ldr	r2, [pc, #440]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 800546c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fe fb73 	bl	8003b5c <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800547a:	f7fe fb6f 	bl	8003b5c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e21d      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800548c:	4b65      	ldr	r3, [pc, #404]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005498:	4b62      	ldr	r3, [pc, #392]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	061b      	lsls	r3, r3, #24
 80054a6:	495f      	ldr	r1, [pc, #380]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	604b      	str	r3, [r1, #4]
 80054ac:	e018      	b.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a5c      	ldr	r2, [pc, #368]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80054b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ba:	f7fe fb4f 	bl	8003b5c <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c2:	f7fe fb4b 	bl	8003b5c <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e1f9      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054d4:	4b53      	ldr	r3, [pc, #332]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d03c      	beq.n	8005566 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01c      	beq.n	800552e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80054f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fe fb2a 	bl	8003b5c <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800550c:	f7fe fb26 	bl	8003b5c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1d4      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800551e:	4b41      	ldr	r3, [pc, #260]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ef      	beq.n	800550c <HAL_RCC_OscConfig+0x3ec>
 800552c:	e01b      	b.n	8005566 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800552e:	4b3d      	ldr	r3, [pc, #244]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005534:	4a3b      	ldr	r2, [pc, #236]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fe fb0d 	bl	8003b5c <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005546:	f7fe fb09 	bl	8003b5c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e1b7      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005558:	4b32      	ldr	r3, [pc, #200]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 800555a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1ef      	bne.n	8005546 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80a6 	beq.w	80056c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005574:	2300      	movs	r3, #0
 8005576:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005578:	4b2a      	ldr	r3, [pc, #168]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005584:	4b27      	ldr	r3, [pc, #156]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	4a26      	ldr	r2, [pc, #152]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 800558a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800558e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005590:	4b24      	ldr	r3, [pc, #144]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800559c:	2301      	movs	r3, #1
 800559e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a0:	4b21      	ldr	r3, [pc, #132]	@ (8005628 <HAL_RCC_OscConfig+0x508>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d118      	bne.n	80055de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005628 <HAL_RCC_OscConfig+0x508>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005628 <HAL_RCC_OscConfig+0x508>)
 80055b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b8:	f7fe fad0 	bl	8003b5c <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c0:	f7fe facc 	bl	8003b5c <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e17a      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d2:	4b15      	ldr	r3, [pc, #84]	@ (8005628 <HAL_RCC_OscConfig+0x508>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d108      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4d8>
 80055e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f6:	e029      	b.n	800564c <HAL_RCC_OscConfig+0x52c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b05      	cmp	r3, #5
 80055fe:	d115      	bne.n	800562c <HAL_RCC_OscConfig+0x50c>
 8005600:	4b08      	ldr	r3, [pc, #32]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	4a07      	ldr	r2, [pc, #28]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005608:	f043 0304 	orr.w	r3, r3, #4
 800560c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005610:	4b04      	ldr	r3, [pc, #16]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	4a03      	ldr	r2, [pc, #12]	@ (8005624 <HAL_RCC_OscConfig+0x504>)
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005620:	e014      	b.n	800564c <HAL_RCC_OscConfig+0x52c>
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	40007000 	.word	0x40007000
 800562c:	4b9c      	ldr	r3, [pc, #624]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005632:	4a9b      	ldr	r2, [pc, #620]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800563c:	4b98      	ldr	r3, [pc, #608]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005642:	4a97      	ldr	r2, [pc, #604]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005644:	f023 0304 	bic.w	r3, r3, #4
 8005648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d016      	beq.n	8005682 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fe fa82 	bl	8003b5c <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800565a:	e00a      	b.n	8005672 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565c:	f7fe fa7e 	bl	8003b5c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e12a      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005672:	4b8b      	ldr	r3, [pc, #556]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0ed      	beq.n	800565c <HAL_RCC_OscConfig+0x53c>
 8005680:	e015      	b.n	80056ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005682:	f7fe fa6b 	bl	8003b5c <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005688:	e00a      	b.n	80056a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568a:	f7fe fa67 	bl	8003b5c <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e113      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056a0:	4b7f      	ldr	r3, [pc, #508]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1ed      	bne.n	800568a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ae:	7ffb      	ldrb	r3, [r7, #31]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d105      	bne.n	80056c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b4:	4b7a      	ldr	r3, [pc, #488]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	4a79      	ldr	r2, [pc, #484]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80056ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80fe 	beq.w	80058c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	f040 80d0 	bne.w	8005874 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056d4:	4b72      	ldr	r3, [pc, #456]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f003 0203 	and.w	r2, r3, #3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d130      	bne.n	800574a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f2:	3b01      	subs	r3, #1
 80056f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d127      	bne.n	800574a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005704:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d11f      	bne.n	800574a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005714:	2a07      	cmp	r2, #7
 8005716:	bf14      	ite	ne
 8005718:	2201      	movne	r2, #1
 800571a:	2200      	moveq	r2, #0
 800571c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800571e:	4293      	cmp	r3, r2
 8005720:	d113      	bne.n	800574a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	3b01      	subs	r3, #1
 8005730:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d109      	bne.n	800574a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	3b01      	subs	r3, #1
 8005744:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d06e      	beq.n	8005828 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b0c      	cmp	r3, #12
 800574e:	d069      	beq.n	8005824 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005750:	4b53      	ldr	r3, [pc, #332]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d105      	bne.n	8005768 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800575c:	4b50      	ldr	r3, [pc, #320]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0ad      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800576c:	4b4c      	ldr	r3, [pc, #304]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a4b      	ldr	r2, [pc, #300]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005776:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005778:	f7fe f9f0 	bl	8003b5c <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005780:	f7fe f9ec 	bl	8003b5c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e09a      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005792:	4b43      	ldr	r3, [pc, #268]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800579e:	4b40      	ldr	r3, [pc, #256]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	4b40      	ldr	r3, [pc, #256]	@ (80058a4 <HAL_RCC_OscConfig+0x784>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057ae:	3a01      	subs	r2, #1
 80057b0:	0112      	lsls	r2, r2, #4
 80057b2:	4311      	orrs	r1, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057b8:	0212      	lsls	r2, r2, #8
 80057ba:	4311      	orrs	r1, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057c0:	0852      	lsrs	r2, r2, #1
 80057c2:	3a01      	subs	r2, #1
 80057c4:	0552      	lsls	r2, r2, #21
 80057c6:	4311      	orrs	r1, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80057cc:	0852      	lsrs	r2, r2, #1
 80057ce:	3a01      	subs	r2, #1
 80057d0:	0652      	lsls	r2, r2, #25
 80057d2:	4311      	orrs	r1, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057d8:	0912      	lsrs	r2, r2, #4
 80057da:	0452      	lsls	r2, r2, #17
 80057dc:	430a      	orrs	r2, r1
 80057de:	4930      	ldr	r1, [pc, #192]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057e4:	4b2e      	ldr	r3, [pc, #184]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a2d      	ldr	r2, [pc, #180]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80057ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057f0:	4b2b      	ldr	r3, [pc, #172]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 80057f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057fc:	f7fe f9ae 	bl	8003b5c <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005804:	f7fe f9aa 	bl	8003b5c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e058      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005816:	4b22      	ldr	r3, [pc, #136]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005822:	e050      	b.n	80058c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e04f      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005828:	4b1d      	ldr	r3, [pc, #116]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d148      	bne.n	80058c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005834:	4b1a      	ldr	r3, [pc, #104]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a19      	ldr	r2, [pc, #100]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 800583a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800583e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005840:	4b17      	ldr	r3, [pc, #92]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	4a16      	ldr	r2, [pc, #88]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800584a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800584c:	f7fe f986 	bl	8003b5c <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005854:	f7fe f982 	bl	8003b5c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e030      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005866:	4b0e      	ldr	r3, [pc, #56]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0x734>
 8005872:	e028      	b.n	80058c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b0c      	cmp	r3, #12
 8005878:	d023      	beq.n	80058c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587a:	4b09      	ldr	r3, [pc, #36]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a08      	ldr	r2, [pc, #32]	@ (80058a0 <HAL_RCC_OscConfig+0x780>)
 8005880:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fe f969 	bl	8003b5c <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800588c:	e00c      	b.n	80058a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588e:	f7fe f965 	bl	8003b5c <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d905      	bls.n	80058a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e013      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
 80058a0:	40021000 	.word	0x40021000
 80058a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a8:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <HAL_RCC_OscConfig+0x7b0>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ec      	bne.n	800588e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80058b4:	4b06      	ldr	r3, [pc, #24]	@ (80058d0 <HAL_RCC_OscConfig+0x7b0>)
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	4905      	ldr	r1, [pc, #20]	@ (80058d0 <HAL_RCC_OscConfig+0x7b0>)
 80058ba:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <HAL_RCC_OscConfig+0x7b4>)
 80058bc:	4013      	ands	r3, r2
 80058be:	60cb      	str	r3, [r1, #12]
 80058c0:	e001      	b.n	80058c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40021000 	.word	0x40021000
 80058d4:	feeefffc 	.word	0xfeeefffc

080058d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0e7      	b.n	8005abc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058ec:	4b75      	ldr	r3, [pc, #468]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1ec>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d910      	bls.n	800591c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fa:	4b72      	ldr	r3, [pc, #456]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1ec>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f023 0207 	bic.w	r2, r3, #7
 8005902:	4970      	ldr	r1, [pc, #448]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	4313      	orrs	r3, r2
 8005908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800590a:	4b6e      	ldr	r3, [pc, #440]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1ec>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0cf      	b.n	8005abc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d010      	beq.n	800594a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	4b66      	ldr	r3, [pc, #408]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005934:	429a      	cmp	r2, r3
 8005936:	d908      	bls.n	800594a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005938:	4b63      	ldr	r3, [pc, #396]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4960      	ldr	r1, [pc, #384]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d04c      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d107      	bne.n	800596e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800595e:	4b5a      	ldr	r3, [pc, #360]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d121      	bne.n	80059ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0a6      	b.n	8005abc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005976:	4b54      	ldr	r3, [pc, #336]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d115      	bne.n	80059ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e09a      	b.n	8005abc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800598e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e08e      	b.n	8005abc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800599e:	4b4a      	ldr	r3, [pc, #296]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e086      	b.n	8005abc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059ae:	4b46      	ldr	r3, [pc, #280]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4943      	ldr	r1, [pc, #268]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c0:	f7fe f8cc 	bl	8003b5c <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	e00a      	b.n	80059de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c8:	f7fe f8c8 	bl	8003b5c <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e06e      	b.n	8005abc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059de:	4b3a      	ldr	r3, [pc, #232]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 020c 	and.w	r2, r3, #12
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d1eb      	bne.n	80059c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	4b31      	ldr	r3, [pc, #196]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d208      	bcs.n	8005a1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	492b      	ldr	r1, [pc, #172]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a1e:	4b29      	ldr	r3, [pc, #164]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d210      	bcs.n	8005a4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f023 0207 	bic.w	r2, r3, #7
 8005a34:	4923      	ldr	r1, [pc, #140]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3c:	4b21      	ldr	r3, [pc, #132]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d001      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e036      	b.n	8005abc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	4918      	ldr	r1, [pc, #96]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a78:	4b13      	ldr	r3, [pc, #76]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4910      	ldr	r1, [pc, #64]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a8c:	f000 f824 	bl	8005ad8 <HAL_RCC_GetSysClockFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	490b      	ldr	r1, [pc, #44]	@ (8005acc <HAL_RCC_ClockConfig+0x1f4>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa8:	4a09      	ldr	r2, [pc, #36]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8005aaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005aac:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <HAL_RCC_ClockConfig+0x1fc>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe f803 	bl	8003abc <HAL_InitTick>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005aba:	7afb      	ldrb	r3, [r7, #11]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40022000 	.word	0x40022000
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	08012274 	.word	0x08012274
 8005ad0:	20000004 	.word	0x20000004
 8005ad4:	20000048 	.word	0x20000048

08005ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b089      	sub	sp, #36	@ 0x24
 8005adc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
 8005aee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005af0:	4b3b      	ldr	r3, [pc, #236]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0x34>
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	d121      	bne.n	8005b4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d11e      	bne.n	8005b4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b0c:	4b34      	ldr	r3, [pc, #208]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d107      	bne.n	8005b28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b18:	4b31      	ldr	r3, [pc, #196]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	e005      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b28:	4b2d      	ldr	r3, [pc, #180]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b34:	4a2b      	ldr	r2, [pc, #172]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10d      	bne.n	8005b60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b48:	e00a      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b50:	4b25      	ldr	r3, [pc, #148]	@ (8005be8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e004      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b5c:	4b23      	ldr	r3, [pc, #140]	@ (8005bec <HAL_RCC_GetSysClockFreq+0x114>)
 8005b5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2b0c      	cmp	r3, #12
 8005b64:	d134      	bne.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b66:	4b1e      	ldr	r3, [pc, #120]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d003      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0xa6>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0xac>
 8005b7c:	e005      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b80:	617b      	str	r3, [r7, #20]
      break;
 8005b82:	e005      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b84:	4b19      	ldr	r3, [pc, #100]	@ (8005bec <HAL_RCC_GetSysClockFreq+0x114>)
 8005b86:	617b      	str	r3, [r7, #20]
      break;
 8005b88:	e002      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	617b      	str	r3, [r7, #20]
      break;
 8005b8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b90:	4b13      	ldr	r3, [pc, #76]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b9e:	4b10      	ldr	r3, [pc, #64]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	fb03 f202 	mul.w	r2, r3, r2
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	0e5b      	lsrs	r3, r3, #25
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3724      	adds	r7, #36	@ 0x24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40021000 	.word	0x40021000
 8005be4:	0801228c 	.word	0x0801228c
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	007a1200 	.word	0x007a1200

08005bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf4:	4b03      	ldr	r3, [pc, #12]	@ (8005c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000004 	.word	0x20000004

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c0c:	f7ff fff0 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4904      	ldr	r1, [pc, #16]	@ (8005c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	08012284 	.word	0x08012284

08005c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c38:	f7ff ffda 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	0adb      	lsrs	r3, r3, #11
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4904      	ldr	r1, [pc, #16]	@ (8005c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c4a:	5ccb      	ldrb	r3, [r1, r3]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	08012284 	.word	0x08012284

08005c60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c78:	f7ff f9ee 	bl	8005058 <HAL_PWREx_GetVoltageRange>
 8005c7c:	6178      	str	r0, [r7, #20]
 8005c7e:	e014      	b.n	8005caa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c80:	4b25      	ldr	r3, [pc, #148]	@ (8005d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c84:	4a24      	ldr	r2, [pc, #144]	@ (8005d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c8c:	4b22      	ldr	r3, [pc, #136]	@ (8005d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c98:	f7ff f9de 	bl	8005058 <HAL_PWREx_GetVoltageRange>
 8005c9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ca8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cb0:	d10b      	bne.n	8005cca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b80      	cmp	r3, #128	@ 0x80
 8005cb6:	d919      	bls.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2ba0      	cmp	r3, #160	@ 0xa0
 8005cbc:	d902      	bls.n	8005cc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	e013      	b.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	e010      	b.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b80      	cmp	r3, #128	@ 0x80
 8005cce:	d902      	bls.n	8005cd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	e00a      	b.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b80      	cmp	r3, #128	@ 0x80
 8005cda:	d102      	bne.n	8005ce2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cdc:	2302      	movs	r3, #2
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	e004      	b.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b70      	cmp	r3, #112	@ 0x70
 8005ce6:	d101      	bne.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ce8:	2301      	movs	r3, #1
 8005cea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005cec:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f023 0207 	bic.w	r2, r3, #7
 8005cf4:	4909      	ldr	r1, [pc, #36]	@ (8005d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005cfc:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d001      	beq.n	8005d0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40022000 	.word	0x40022000

08005d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d041      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d44:	d02a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d46:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d4a:	d824      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d50:	d008      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d56:	d81e      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d60:	d010      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d62:	e018      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d64:	4b86      	ldr	r3, [pc, #536]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4a85      	ldr	r2, [pc, #532]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d70:	e015      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3304      	adds	r3, #4
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 facb 	bl	8006314 <RCCEx_PLLSAI1_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d82:	e00c      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3320      	adds	r3, #32
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fbb6 	bl	80064fc <RCCEx_PLLSAI2_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d94:	e003      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	74fb      	strb	r3, [r7, #19]
      break;
 8005d9a:	e000      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d9e:	7cfb      	ldrb	r3, [r7, #19]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10b      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005da4:	4b76      	ldr	r3, [pc, #472]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005daa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005db2:	4973      	ldr	r1, [pc, #460]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005dba:	e001      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	7cfb      	ldrb	r3, [r7, #19]
 8005dbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d041      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dd4:	d02a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005dd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dda:	d824      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005de0:	d008      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005de2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005de6:	d81e      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005df0:	d010      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005df2:	e018      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005df4:	4b62      	ldr	r3, [pc, #392]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4a61      	ldr	r2, [pc, #388]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e00:	e015      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fa83 	bl	8006314 <RCCEx_PLLSAI1_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e12:	e00c      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3320      	adds	r3, #32
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fb6e 	bl	80064fc <RCCEx_PLLSAI2_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e24:	e003      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	74fb      	strb	r3, [r7, #19]
      break;
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e2e:	7cfb      	ldrb	r3, [r7, #19]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e34:	4b52      	ldr	r3, [pc, #328]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e42:	494f      	ldr	r1, [pc, #316]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005e4a:	e001      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	7cfb      	ldrb	r3, [r7, #19]
 8005e4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 80a0 	beq.w	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e62:	4b47      	ldr	r3, [pc, #284]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e78:	4b41      	ldr	r3, [pc, #260]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7c:	4a40      	ldr	r2, [pc, #256]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e84:	4b3e      	ldr	r3, [pc, #248]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e90:	2301      	movs	r3, #1
 8005e92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e94:	4b3b      	ldr	r3, [pc, #236]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a3a      	ldr	r2, [pc, #232]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ea0:	f7fd fe5c 	bl	8003b5c <HAL_GetTick>
 8005ea4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ea6:	e009      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea8:	f7fd fe58 	bl	8003b5c <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d902      	bls.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	74fb      	strb	r3, [r7, #19]
        break;
 8005eba:	e005      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ebc:	4b31      	ldr	r3, [pc, #196]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0ef      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d15c      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ece:	4b2c      	ldr	r3, [pc, #176]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01f      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d019      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005eec:	4b24      	ldr	r3, [pc, #144]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ef8:	4b21      	ldr	r3, [pc, #132]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005efe:	4a20      	ldr	r2, [pc, #128]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f08:	4b1d      	ldr	r3, [pc, #116]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f18:	4a19      	ldr	r2, [pc, #100]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d016      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2a:	f7fd fe17 	bl	8003b5c <HAL_GetTick>
 8005f2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f30:	e00b      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f32:	f7fd fe13 	bl	8003b5c <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d902      	bls.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	74fb      	strb	r3, [r7, #19]
            break;
 8005f48:	e006      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0ec      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f5e:	4b08      	ldr	r3, [pc, #32]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f6e:	4904      	ldr	r1, [pc, #16]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f76:	e009      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	74bb      	strb	r3, [r7, #18]
 8005f7c:	e006      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005f7e:	bf00      	nop
 8005f80:	40021000 	.word	0x40021000
 8005f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	7cfb      	ldrb	r3, [r7, #19]
 8005f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f8c:	7c7b      	ldrb	r3, [r7, #17]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d105      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f92:	4b9e      	ldr	r3, [pc, #632]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	4a9d      	ldr	r2, [pc, #628]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005faa:	4b98      	ldr	r3, [pc, #608]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb0:	f023 0203 	bic.w	r2, r3, #3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	4994      	ldr	r1, [pc, #592]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	f023 020c 	bic.w	r2, r3, #12
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fda:	498c      	ldr	r1, [pc, #560]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fee:	4b87      	ldr	r3, [pc, #540]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	4983      	ldr	r1, [pc, #524]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006010:	4b7e      	ldr	r3, [pc, #504]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006016:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601e:	497b      	ldr	r1, [pc, #492]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006032:	4b76      	ldr	r3, [pc, #472]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006040:	4972      	ldr	r1, [pc, #456]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006054:	4b6d      	ldr	r3, [pc, #436]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006062:	496a      	ldr	r1, [pc, #424]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006076:	4b65      	ldr	r3, [pc, #404]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006084:	4961      	ldr	r1, [pc, #388]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006098:	4b5c      	ldr	r3, [pc, #368]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a6:	4959      	ldr	r1, [pc, #356]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060ba:	4b54      	ldr	r3, [pc, #336]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c8:	4950      	ldr	r1, [pc, #320]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060dc:	4b4b      	ldr	r3, [pc, #300]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ea:	4948      	ldr	r1, [pc, #288]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060fe:	4b43      	ldr	r3, [pc, #268]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006104:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610c:	493f      	ldr	r1, [pc, #252]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d028      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006120:	4b3a      	ldr	r3, [pc, #232]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800612e:	4937      	ldr	r1, [pc, #220]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800613a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800613e:	d106      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006140:	4b32      	ldr	r3, [pc, #200]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4a31      	ldr	r2, [pc, #196]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800614a:	60d3      	str	r3, [r2, #12]
 800614c:	e011      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006152:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006156:	d10c      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3304      	adds	r3, #4
 800615c:	2101      	movs	r1, #1
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f8d8 	bl	8006314 <RCCEx_PLLSAI1_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800616e:	7cfb      	ldrb	r3, [r7, #19]
 8006170:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d028      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800617e:	4b23      	ldr	r3, [pc, #140]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618c:	491f      	ldr	r1, [pc, #124]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800619c:	d106      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800619e:	4b1b      	ldr	r3, [pc, #108]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	4a1a      	ldr	r2, [pc, #104]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061a8:	60d3      	str	r3, [r2, #12]
 80061aa:	e011      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061b4:	d10c      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	2101      	movs	r1, #1
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 f8a9 	bl	8006314 <RCCEx_PLLSAI1_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061c6:	7cfb      	ldrb	r3, [r7, #19]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d02b      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061dc:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ea:	4908      	ldr	r1, [pc, #32]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061fa:	d109      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061fc:	4b03      	ldr	r3, [pc, #12]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	4a02      	ldr	r2, [pc, #8]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006206:	60d3      	str	r3, [r2, #12]
 8006208:	e014      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800620a:	bf00      	nop
 800620c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006218:	d10c      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f877 	bl	8006314 <RCCEx_PLLSAI1_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800622a:	7cfb      	ldrb	r3, [r7, #19]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d02f      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006240:	4b2b      	ldr	r3, [pc, #172]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006246:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800624e:	4928      	ldr	r1, [pc, #160]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800625a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800625e:	d10d      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3304      	adds	r3, #4
 8006264:	2102      	movs	r1, #2
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f854 	bl	8006314 <RCCEx_PLLSAI1_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d014      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006276:	7cfb      	ldrb	r3, [r7, #19]
 8006278:	74bb      	strb	r3, [r7, #18]
 800627a:	e011      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006284:	d10c      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3320      	adds	r3, #32
 800628a:	2102      	movs	r1, #2
 800628c:	4618      	mov	r0, r3
 800628e:	f000 f935 	bl	80064fc <RCCEx_PLLSAI2_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006296:	7cfb      	ldrb	r3, [r7, #19]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062ac:	4b10      	ldr	r3, [pc, #64]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ba:	490d      	ldr	r1, [pc, #52]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062ce:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062de:	4904      	ldr	r1, [pc, #16]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40021000 	.word	0x40021000

080062f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a04      	ldr	r2, [pc, #16]	@ (8006310 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062fe:	f043 0304 	orr.w	r3, r3, #4
 8006302:	6013      	str	r3, [r2, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40021000 	.word	0x40021000

08006314 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006322:	4b75      	ldr	r3, [pc, #468]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800632e:	4b72      	ldr	r3, [pc, #456]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0203 	and.w	r2, r3, #3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d10d      	bne.n	800635a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
       ||
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006346:	4b6c      	ldr	r3, [pc, #432]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	091b      	lsrs	r3, r3, #4
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
       ||
 8006356:	429a      	cmp	r2, r3
 8006358:	d047      	beq.n	80063ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	73fb      	strb	r3, [r7, #15]
 800635e:	e044      	b.n	80063ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d018      	beq.n	800639a <RCCEx_PLLSAI1_Config+0x86>
 8006368:	2b03      	cmp	r3, #3
 800636a:	d825      	bhi.n	80063b8 <RCCEx_PLLSAI1_Config+0xa4>
 800636c:	2b01      	cmp	r3, #1
 800636e:	d002      	beq.n	8006376 <RCCEx_PLLSAI1_Config+0x62>
 8006370:	2b02      	cmp	r3, #2
 8006372:	d009      	beq.n	8006388 <RCCEx_PLLSAI1_Config+0x74>
 8006374:	e020      	b.n	80063b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006376:	4b60      	ldr	r3, [pc, #384]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d11d      	bne.n	80063be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006386:	e01a      	b.n	80063be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006388:	4b5b      	ldr	r3, [pc, #364]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006390:	2b00      	cmp	r3, #0
 8006392:	d116      	bne.n	80063c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006398:	e013      	b.n	80063c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800639a:	4b57      	ldr	r3, [pc, #348]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10f      	bne.n	80063c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063a6:	4b54      	ldr	r3, [pc, #336]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063b6:	e006      	b.n	80063c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e004      	b.n	80063c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10d      	bne.n	80063ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063ce:	4b4a      	ldr	r3, [pc, #296]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	3b01      	subs	r3, #1
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	430b      	orrs	r3, r1
 80063e4:	4944      	ldr	r1, [pc, #272]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d17d      	bne.n	80064ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80063f0:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a40      	ldr	r2, [pc, #256]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063fc:	f7fd fbae 	bl	8003b5c <HAL_GetTick>
 8006400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006402:	e009      	b.n	8006418 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006404:	f7fd fbaa 	bl	8003b5c <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d902      	bls.n	8006418 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	73fb      	strb	r3, [r7, #15]
        break;
 8006416:	e005      	b.n	8006424 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006418:	4b37      	ldr	r3, [pc, #220]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1ef      	bne.n	8006404 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d160      	bne.n	80064ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d111      	bne.n	8006454 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006430:	4b31      	ldr	r3, [pc, #196]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6892      	ldr	r2, [r2, #8]
 8006440:	0211      	lsls	r1, r2, #8
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	68d2      	ldr	r2, [r2, #12]
 8006446:	0912      	lsrs	r2, r2, #4
 8006448:	0452      	lsls	r2, r2, #17
 800644a:	430a      	orrs	r2, r1
 800644c:	492a      	ldr	r1, [pc, #168]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]
 8006452:	e027      	b.n	80064a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d112      	bne.n	8006480 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800645a:	4b27      	ldr	r3, [pc, #156]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006462:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6892      	ldr	r2, [r2, #8]
 800646a:	0211      	lsls	r1, r2, #8
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6912      	ldr	r2, [r2, #16]
 8006470:	0852      	lsrs	r2, r2, #1
 8006472:	3a01      	subs	r2, #1
 8006474:	0552      	lsls	r2, r2, #21
 8006476:	430a      	orrs	r2, r1
 8006478:	491f      	ldr	r1, [pc, #124]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
 800647e:	e011      	b.n	80064a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006480:	4b1d      	ldr	r3, [pc, #116]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006488:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6892      	ldr	r2, [r2, #8]
 8006490:	0211      	lsls	r1, r2, #8
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6952      	ldr	r2, [r2, #20]
 8006496:	0852      	lsrs	r2, r2, #1
 8006498:	3a01      	subs	r2, #1
 800649a:	0652      	lsls	r2, r2, #25
 800649c:	430a      	orrs	r2, r1
 800649e:	4916      	ldr	r1, [pc, #88]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064a4:	4b14      	ldr	r3, [pc, #80]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a13      	ldr	r2, [pc, #76]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fd fb54 	bl	8003b5c <HAL_GetTick>
 80064b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064b6:	e009      	b.n	80064cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064b8:	f7fd fb50 	bl	8003b5c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d902      	bls.n	80064cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	73fb      	strb	r3, [r7, #15]
          break;
 80064ca:	e005      	b.n	80064d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064cc:	4b0a      	ldr	r3, [pc, #40]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0ef      	beq.n	80064b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064de:	4b06      	ldr	r3, [pc, #24]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	4904      	ldr	r1, [pc, #16]	@ (80064f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40021000 	.word	0x40021000

080064fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800650a:	4b6a      	ldr	r3, [pc, #424]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d018      	beq.n	8006548 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006516:	4b67      	ldr	r3, [pc, #412]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0203 	and.w	r2, r3, #3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d10d      	bne.n	8006542 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
       ||
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800652e:	4b61      	ldr	r3, [pc, #388]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
       ||
 800653e:	429a      	cmp	r2, r3
 8006540:	d047      	beq.n	80065d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
 8006546:	e044      	b.n	80065d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d018      	beq.n	8006582 <RCCEx_PLLSAI2_Config+0x86>
 8006550:	2b03      	cmp	r3, #3
 8006552:	d825      	bhi.n	80065a0 <RCCEx_PLLSAI2_Config+0xa4>
 8006554:	2b01      	cmp	r3, #1
 8006556:	d002      	beq.n	800655e <RCCEx_PLLSAI2_Config+0x62>
 8006558:	2b02      	cmp	r3, #2
 800655a:	d009      	beq.n	8006570 <RCCEx_PLLSAI2_Config+0x74>
 800655c:	e020      	b.n	80065a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800655e:	4b55      	ldr	r3, [pc, #340]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d11d      	bne.n	80065a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800656e:	e01a      	b.n	80065a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006570:	4b50      	ldr	r3, [pc, #320]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006578:	2b00      	cmp	r3, #0
 800657a:	d116      	bne.n	80065aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006580:	e013      	b.n	80065aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006582:	4b4c      	ldr	r3, [pc, #304]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800658e:	4b49      	ldr	r3, [pc, #292]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800659e:	e006      	b.n	80065ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	73fb      	strb	r3, [r7, #15]
      break;
 80065a4:	e004      	b.n	80065b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10d      	bne.n	80065d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065b6:	4b3f      	ldr	r3, [pc, #252]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6819      	ldr	r1, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	430b      	orrs	r3, r1
 80065cc:	4939      	ldr	r1, [pc, #228]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d167      	bne.n	80066a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065d8:	4b36      	ldr	r3, [pc, #216]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a35      	ldr	r2, [pc, #212]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e4:	f7fd faba 	bl	8003b5c <HAL_GetTick>
 80065e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065ea:	e009      	b.n	8006600 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065ec:	f7fd fab6 	bl	8003b5c <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d902      	bls.n	8006600 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	73fb      	strb	r3, [r7, #15]
        break;
 80065fe:	e005      	b.n	800660c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006600:	4b2c      	ldr	r3, [pc, #176]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1ef      	bne.n	80065ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d14a      	bne.n	80066a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d111      	bne.n	800663c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006618:	4b26      	ldr	r3, [pc, #152]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	0211      	lsls	r1, r2, #8
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68d2      	ldr	r2, [r2, #12]
 800662e:	0912      	lsrs	r2, r2, #4
 8006630:	0452      	lsls	r2, r2, #17
 8006632:	430a      	orrs	r2, r1
 8006634:	491f      	ldr	r1, [pc, #124]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006636:	4313      	orrs	r3, r2
 8006638:	614b      	str	r3, [r1, #20]
 800663a:	e011      	b.n	8006660 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800663c:	4b1d      	ldr	r3, [pc, #116]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006644:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6892      	ldr	r2, [r2, #8]
 800664c:	0211      	lsls	r1, r2, #8
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6912      	ldr	r2, [r2, #16]
 8006652:	0852      	lsrs	r2, r2, #1
 8006654:	3a01      	subs	r2, #1
 8006656:	0652      	lsls	r2, r2, #25
 8006658:	430a      	orrs	r2, r1
 800665a:	4916      	ldr	r1, [pc, #88]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800665c:	4313      	orrs	r3, r2
 800665e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006660:	4b14      	ldr	r3, [pc, #80]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a13      	ldr	r2, [pc, #76]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800666a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666c:	f7fd fa76 	bl	8003b5c <HAL_GetTick>
 8006670:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006672:	e009      	b.n	8006688 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006674:	f7fd fa72 	bl	8003b5c <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d902      	bls.n	8006688 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
          break;
 8006686:	e005      	b.n	8006694 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006688:	4b0a      	ldr	r3, [pc, #40]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0ef      	beq.n	8006674 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800669a:	4b06      	ldr	r3, [pc, #24]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800669c:	695a      	ldr	r2, [r3, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	4904      	ldr	r1, [pc, #16]	@ (80066b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40021000 	.word	0x40021000

080066b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e095      	b.n	80067f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d108      	bne.n	80066e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066da:	d009      	beq.n	80066f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	61da      	str	r2, [r3, #28]
 80066e2:	e005      	b.n	80066f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fc fb16 	bl	8002d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006726:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006730:	d902      	bls.n	8006738 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e002      	b.n	800673e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800673c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006746:	d007      	beq.n	8006758 <HAL_SPI_Init+0xa0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006750:	d002      	beq.n	8006758 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679a:	ea42 0103 	orr.w	r1, r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	0c1b      	lsrs	r3, r3, #16
 80067b4:	f003 0204 	and.w	r2, r3, #4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80067d4:	ea42 0103 	orr.w	r1, r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e01a      	b.n	8006846 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006826:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fc facb 	bl	8002dc4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b088      	sub	sp, #32
 8006852:	af02      	add	r7, sp, #8
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	4613      	mov	r3, r2
 800685c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d001      	beq.n	800686e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
 800686c:	e123      	b.n	8006ab6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006876:	d112      	bne.n	800689e <HAL_SPI_Receive+0x50>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10e      	bne.n	800689e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2204      	movs	r2, #4
 8006884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006888:	88fa      	ldrh	r2, [r7, #6]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f912 	bl	8006abe <HAL_SPI_TransmitReceive>
 800689a:	4603      	mov	r3, r0
 800689c:	e10b      	b.n	8006ab6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800689e:	f7fd f95d 	bl	8003b5c <HAL_GetTick>
 80068a2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_SPI_Receive+0x62>
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e100      	b.n	8006ab6 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_SPI_Receive+0x74>
 80068be:	2302      	movs	r3, #2
 80068c0:	e0f9      	b.n	8006ab6 <HAL_SPI_Receive+0x268>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2204      	movs	r2, #4
 80068ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	88fa      	ldrh	r2, [r7, #6]
 80068e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	88fa      	ldrh	r2, [r7, #6]
 80068ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006914:	d908      	bls.n	8006928 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	e007      	b.n	8006938 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006936:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006940:	d10f      	bne.n	8006962 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006950:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006960:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696c:	2b40      	cmp	r3, #64	@ 0x40
 800696e:	d007      	beq.n	8006980 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800697e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006988:	d875      	bhi.n	8006a76 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800698a:	e037      	b.n	80069fc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b01      	cmp	r3, #1
 8006998:	d117      	bne.n	80069ca <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f103 020c 	add.w	r2, r3, #12
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a6:	7812      	ldrb	r2, [r2, #0]
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80069c8:	e018      	b.n	80069fc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ca:	f7fd f8c7 	bl	8003b5c <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d803      	bhi.n	80069e2 <HAL_SPI_Receive+0x194>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d102      	bne.n	80069e8 <HAL_SPI_Receive+0x19a>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e05c      	b.n	8006ab6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1c1      	bne.n	800698c <HAL_SPI_Receive+0x13e>
 8006a08:	e03b      	b.n	8006a82 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d115      	bne.n	8006a44 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a22:	b292      	uxth	r2, r2
 8006a24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2a:	1c9a      	adds	r2, r3, #2
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006a42:	e018      	b.n	8006a76 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a44:	f7fd f88a 	bl	8003b5c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d803      	bhi.n	8006a5c <HAL_SPI_Receive+0x20e>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d102      	bne.n	8006a62 <HAL_SPI_Receive+0x214>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e01f      	b.n	8006ab6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1c3      	bne.n	8006a0a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fffa 	bl	8007a80 <SPI_EndRxTransaction>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
  }
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b08a      	sub	sp, #40	@ 0x28
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
 8006aca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006acc:	2301      	movs	r3, #1
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ad0:	f7fd f844 	bl	8003b5c <HAL_GetTick>
 8006ad4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006adc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006ae8:	887b      	ldrh	r3, [r7, #2]
 8006aea:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aec:	7ffb      	ldrb	r3, [r7, #31]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d00c      	beq.n	8006b0c <HAL_SPI_TransmitReceive+0x4e>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006af8:	d106      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x4a>
 8006b02:	7ffb      	ldrb	r3, [r7, #31]
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d001      	beq.n	8006b0c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e1f3      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_SPI_TransmitReceive+0x60>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <HAL_SPI_TransmitReceive+0x60>
 8006b18:	887b      	ldrh	r3, [r7, #2]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e1e8      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_SPI_TransmitReceive+0x72>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e1e1      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x436>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d003      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2205      	movs	r2, #5
 8006b48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	887a      	ldrh	r2, [r7, #2]
 8006b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	887a      	ldrh	r2, [r7, #2]
 8006b64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	887a      	ldrh	r2, [r7, #2]
 8006b72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	887a      	ldrh	r2, [r7, #2]
 8006b78:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b8e:	d802      	bhi.n	8006b96 <HAL_SPI_TransmitReceive+0xd8>
 8006b90:	8abb      	ldrh	r3, [r7, #20]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d908      	bls.n	8006ba8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ba4:	605a      	str	r2, [r3, #4]
 8006ba6:	e007      	b.n	8006bb8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bb6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc2:	2b40      	cmp	r3, #64	@ 0x40
 8006bc4:	d007      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bde:	f240 8083 	bls.w	8006ce8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x132>
 8006bea:	8afb      	ldrh	r3, [r7, #22]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d16f      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf4:	881a      	ldrh	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c00:	1c9a      	adds	r2, r3, #2
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c14:	e05c      	b.n	8006cd0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d11b      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x19e>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d016      	beq.n	8006c5c <HAL_SPI_TransmitReceive+0x19e>
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d113      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c38:	881a      	ldrh	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c44:	1c9a      	adds	r2, r3, #2
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d11c      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x1e6>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c80:	b292      	uxth	r2, r2
 8006c82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c88:	1c9a      	adds	r2, r3, #2
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ca4:	f7fc ff5a 	bl	8003b5c <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d80d      	bhi.n	8006cd0 <HAL_SPI_TransmitReceive+0x212>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d009      	beq.n	8006cd0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e111      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d19d      	bne.n	8006c16 <HAL_SPI_TransmitReceive+0x158>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d197      	bne.n	8006c16 <HAL_SPI_TransmitReceive+0x158>
 8006ce6:	e0e5      	b.n	8006eb4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x23a>
 8006cf0:	8afb      	ldrh	r3, [r7, #22]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	f040 80d1 	bne.w	8006e9a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d912      	bls.n	8006d28 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d06:	881a      	ldrh	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	1c9a      	adds	r2, r3, #2
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b02      	subs	r3, #2
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d26:	e0b8      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	330c      	adds	r3, #12
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d4e:	e0a4      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d134      	bne.n	8006dc8 <HAL_SPI_TransmitReceive+0x30a>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d02f      	beq.n	8006dc8 <HAL_SPI_TransmitReceive+0x30a>
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d12c      	bne.n	8006dc8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d912      	bls.n	8006d9e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7c:	881a      	ldrh	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d88:	1c9a      	adds	r2, r3, #2
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b02      	subs	r3, #2
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d9c:	e012      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	330c      	adds	r3, #12
 8006da8:	7812      	ldrb	r2, [r2, #0]
 8006daa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d148      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x3aa>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d042      	beq.n	8006e68 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d923      	bls.n	8006e36 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df8:	b292      	uxth	r2, r2
 8006dfa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	1c9a      	adds	r2, r3, #2
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b02      	subs	r3, #2
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d81f      	bhi.n	8006e64 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	e016      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f103 020c 	add.w	r2, r3, #12
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e64:	2301      	movs	r3, #1
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e68:	f7fc fe78 	bl	8003b5c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d803      	bhi.n	8006e80 <HAL_SPI_TransmitReceive+0x3c2>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d102      	bne.n	8006e86 <HAL_SPI_TransmitReceive+0x3c8>
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e02c      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f47f af55 	bne.w	8006d50 <HAL_SPI_TransmitReceive+0x292>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f47f af4e 	bne.w	8006d50 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eb4:	6a3a      	ldr	r2, [r7, #32]
 8006eb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fe39 	bl	8007b30 <SPI_EndRxTxTransaction>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d008      	beq.n	8006ed6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e00e      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
  }
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3728      	adds	r7, #40	@ 0x28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_SPI_Transmit_IT+0x1a>
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e06d      	b.n	8006ff6 <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d001      	beq.n	8006f2a <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
 8006f28:	e065      	b.n	8006ff6 <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_SPI_Transmit_IT+0x3c>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e05e      	b.n	8006ff6 <HAL_SPI_Transmit_IT+0xfa>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2203      	movs	r2, #3
 8006f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	88fa      	ldrh	r2, [r7, #6]
 8006f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f84:	d903      	bls.n	8006f8e <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4a1e      	ldr	r2, [pc, #120]	@ (8007004 <HAL_SPI_Transmit_IT+0x108>)
 8006f8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f8c:	e002      	b.n	8006f94 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	@ (8007008 <HAL_SPI_Transmit_IT+0x10c>)
 8006f92:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f9c:	d10f      	bne.n	8006fbe <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d007      	beq.n	8006fdc <HAL_SPI_Transmit_IT+0xe0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fda:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006ff2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	080077ff 	.word	0x080077ff
 8007008:	080077b9 	.word	0x080077b9

0800700c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d001      	beq.n	800702a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
 8007028:	e092      	b.n	8007150 <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d110      	bne.n	8007054 <HAL_SPI_Receive_IT+0x48>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800703a:	d10b      	bne.n	8007054 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2204      	movs	r2, #4
 8007040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007044:	88fb      	ldrh	r3, [r7, #6]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f888 	bl	8007160 <HAL_SPI_TransmitReceive_IT>
 8007050:	4603      	mov	r3, r0
 8007052:	e07d      	b.n	8007150 <HAL_SPI_Receive_IT+0x144>
  }


  if ((pData == NULL) || (Size == 0U))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_SPI_Receive_IT+0x54>
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e075      	b.n	8007150 <HAL_SPI_Receive_IT+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_SPI_Receive_IT+0x66>
 800706e:	2302      	movs	r3, #2
 8007070:	e06e      	b.n	8007150 <HAL_SPI_Receive_IT+0x144>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2204      	movs	r2, #4
 800707e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	88fa      	ldrh	r2, [r7, #6]
 8007092:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	88fa      	ldrh	r2, [r7, #6]
 800709a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070be:	d90b      	bls.n	80070d8 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070ce:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a21      	ldr	r2, [pc, #132]	@ (8007158 <HAL_SPI_Receive_IT+0x14c>)
 80070d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80070d6:	e00a      	b.n	80070ee <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070e6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4a1c      	ldr	r2, [pc, #112]	@ (800715c <HAL_SPI_Receive_IT+0x150>)
 80070ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f6:	d10f      	bne.n	8007118 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007106:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007116:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007122:	2b40      	cmp	r3, #64	@ 0x40
 8007124:	d007      	beq.n	8007136 <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007134:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800714c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	0800776d 	.word	0x0800776d
 800715c:	0800771d 	.word	0x0800771d

08007160 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007174:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d00c      	beq.n	800719c <HAL_SPI_TransmitReceive_IT+0x3c>
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007188:	d106      	bne.n	8007198 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d102      	bne.n	8007198 <HAL_SPI_TransmitReceive_IT+0x38>
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	2b04      	cmp	r3, #4
 8007196:	d001      	beq.n	800719c <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
 800719a:	e07d      	b.n	8007298 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_SPI_TransmitReceive_IT+0x4e>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_SPI_TransmitReceive_IT+0x4e>
 80071a8:	887b      	ldrh	r3, [r7, #2]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e072      	b.n	8007298 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_SPI_TransmitReceive_IT+0x60>
 80071bc:	2302      	movs	r3, #2
 80071be:	e06b      	b.n	8007298 <HAL_SPI_TransmitReceive_IT+0x138>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d003      	beq.n	80071dc <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2205      	movs	r2, #5
 80071d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	887a      	ldrh	r2, [r7, #2]
 80071ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	887a      	ldrh	r2, [r7, #2]
 80071f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	887a      	ldrh	r2, [r7, #2]
 80071fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	887a      	ldrh	r2, [r7, #2]
 8007206:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007212:	d906      	bls.n	8007222 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4a23      	ldr	r2, [pc, #140]	@ (80072a4 <HAL_SPI_TransmitReceive_IT+0x144>)
 8007218:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a22      	ldr	r2, [pc, #136]	@ (80072a8 <HAL_SPI_TransmitReceive_IT+0x148>)
 800721e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007220:	e005      	b.n	800722e <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4a21      	ldr	r2, [pc, #132]	@ (80072ac <HAL_SPI_TransmitReceive_IT+0x14c>)
 8007226:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a21      	ldr	r2, [pc, #132]	@ (80072b0 <HAL_SPI_TransmitReceive_IT+0x150>)
 800722c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007236:	d802      	bhi.n	800723e <HAL_SPI_TransmitReceive_IT+0xde>
 8007238:	887b      	ldrh	r3, [r7, #2]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d908      	bls.n	8007250 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e007      	b.n	8007260 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800725e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800726a:	2b40      	cmp	r3, #64	@ 0x40
 800726c:	d007      	beq.n	800727e <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800727c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8007294:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	08007657 	.word	0x08007657
 80072a8:	080076bd 	.word	0x080076bd
 80072ac:	08007507 	.word	0x08007507
 80072b0:	080075c5 	.word	0x080075c5

080072b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	099b      	lsrs	r3, r3, #6
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10f      	bne.n	80072f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	099b      	lsrs	r3, r3, #6
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
    return;
 80072f6:	e0d7      	b.n	80074a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <HAL_SPI_IRQHandler+0x66>
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	09db      	lsrs	r3, r3, #7
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
    return;
 8007318:	e0c6      	b.n	80074a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10c      	bne.n	8007340 <HAL_SPI_IRQHandler+0x8c>
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	099b      	lsrs	r3, r3, #6
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	0a1b      	lsrs	r3, r3, #8
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80b4 	beq.w	80074a8 <HAL_SPI_IRQHandler+0x1f4>
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80ad 	beq.w	80074a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	099b      	lsrs	r3, r3, #6
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d023      	beq.n	80073a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b03      	cmp	r3, #3
 8007364:	d011      	beq.n	800738a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736a:	f043 0204 	orr.w	r2, r3, #4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	e00b      	b.n	80073a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800738a:	2300      	movs	r3, #0
 800738c:	613b      	str	r3, [r7, #16]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	693b      	ldr	r3, [r7, #16]
        return;
 80073a0:	e082      	b.n	80074a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d014      	beq.n	80073d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b2:	f043 0201 	orr.w	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00c      	beq.n	80073fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e8:	f043 0208 	orr.w	r2, r3, #8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073f0:	2300      	movs	r3, #0
 80073f2:	60bb      	str	r3, [r7, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007402:	2b00      	cmp	r3, #0
 8007404:	d04f      	beq.n	80074a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007414:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <HAL_SPI_IRQHandler+0x17e>
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d034      	beq.n	800749c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0203 	bic.w	r2, r2, #3
 8007440:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007446:	2b00      	cmp	r3, #0
 8007448:	d011      	beq.n	800746e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744e:	4a18      	ldr	r2, [pc, #96]	@ (80074b0 <HAL_SPI_IRQHandler+0x1fc>)
 8007450:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007456:	4618      	mov	r0, r3
 8007458:	f7fc fcc1 	bl	8003dde <HAL_DMA_Abort_IT>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007466:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747a:	4a0d      	ldr	r2, [pc, #52]	@ (80074b0 <HAL_SPI_IRQHandler+0x1fc>)
 800747c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007482:	4618      	mov	r0, r3
 8007484:	f7fc fcab 	bl	8003dde <HAL_DMA_Abort_IT>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007492:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800749a:	e003      	b.n	80074a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f813 	bl	80074c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80074a2:	e000      	b.n	80074a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80074a4:	bf00      	nop
    return;
 80074a6:	bf00      	nop
  }
}
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	080074dd 	.word	0x080074dd

080074b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ffe5 	bl	80074c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	d923      	bls.n	8007562 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007524:	b292      	uxth	r2, r2
 8007526:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752c:	1c9a      	adds	r2, r3, #2
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b02      	subs	r3, #2
 800753c:	b29a      	uxth	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800754a:	b29b      	uxth	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d11f      	bne.n	8007590 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800755e:	605a      	str	r2, [r3, #4]
 8007560:	e016      	b.n	8007590 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f103 020c 	add.w	r2, r3, #12
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756e:	7812      	ldrb	r2, [r2, #0]
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10f      	bne.n	80075bc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80075aa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fb00 	bl	8007bbc <SPI_CloseRxTx_ISR>
    }
  }
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d912      	bls.n	80075fc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075da:	881a      	ldrh	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e6:	1c9a      	adds	r2, r3, #2
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b02      	subs	r3, #2
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075fa:	e012      	b.n	8007622 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d110      	bne.n	800764e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800763a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fab7 	bl	8007bbc <SPI_CloseRxTx_ISR>
    }
  }
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007668:	b292      	uxth	r2, r2
 800766a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	1c9a      	adds	r2, r3, #2
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10f      	bne.n	80076b4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076a2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d102      	bne.n	80076b4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa84 	bl	8007bbc <SPI_CloseRxTx_ISR>
    }
  }
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c8:	881a      	ldrh	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d4:	1c9a      	adds	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d110      	bne.n	8007714 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007700:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d102      	bne.n	8007714 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa54 	bl	8007bbc <SPI_CloseRxTx_ISR>
    }
  }
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f103 020c 	add.w	r2, r3, #12
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007730:	7812      	ldrb	r2, [r2, #0]
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa6e 	bl	8007c40 <SPI_CloseRx_ISR>
  }
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	b292      	uxth	r2, r2
 8007780:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	1c9a      	adds	r2, r3, #2
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa48 	bl	8007c40 <SPI_CloseRx_ISR>
  }
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	330c      	adds	r3, #12
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa55 	bl	8007ca0 <SPI_CloseTx_ISR>
  }
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780a:	881a      	ldrh	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007816:	1c9a      	adds	r2, r3, #2
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa33 	bl	8007ca0 <SPI_CloseTx_ISR>
  }
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	4613      	mov	r3, r2
 8007852:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007854:	f7fc f982 	bl	8003b5c <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785c:	1a9b      	subs	r3, r3, r2
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	4413      	add	r3, r2
 8007862:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007864:	f7fc f97a 	bl	8003b5c <HAL_GetTick>
 8007868:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800786a:	4b39      	ldr	r3, [pc, #228]	@ (8007950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	015b      	lsls	r3, r3, #5
 8007870:	0d1b      	lsrs	r3, r3, #20
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	fb02 f303 	mul.w	r3, r2, r3
 8007878:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800787a:	e054      	b.n	8007926 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d050      	beq.n	8007926 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007884:	f7fc f96a 	bl	8003b5c <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	429a      	cmp	r2, r3
 8007892:	d902      	bls.n	800789a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d13d      	bne.n	8007916 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80078a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078b2:	d111      	bne.n	80078d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078bc:	d004      	beq.n	80078c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078c6:	d107      	bne.n	80078d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e0:	d10f      	bne.n	8007902 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e017      	b.n	8007946 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	3b01      	subs	r3, #1
 8007924:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4013      	ands	r3, r2
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	429a      	cmp	r2, r3
 8007934:	bf0c      	ite	eq
 8007936:	2301      	moveq	r3, #1
 8007938:	2300      	movne	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	429a      	cmp	r2, r3
 8007942:	d19b      	bne.n	800787c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3720      	adds	r7, #32
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20000004 	.word	0x20000004

08007954 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08a      	sub	sp, #40	@ 0x28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007966:	f7fc f8f9 	bl	8003b5c <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	4413      	add	r3, r2
 8007974:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007976:	f7fc f8f1 	bl	8003b5c <HAL_GetTick>
 800797a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	330c      	adds	r3, #12
 8007982:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007984:	4b3d      	ldr	r3, [pc, #244]	@ (8007a7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	00da      	lsls	r2, r3, #3
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	0d1b      	lsrs	r3, r3, #20
 8007994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800799c:	e060      	b.n	8007a60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079a4:	d107      	bne.n	80079b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d050      	beq.n	8007a60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079be:	f7fc f8cd 	bl	8003b5c <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d902      	bls.n	80079d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d13d      	bne.n	8007a50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ec:	d111      	bne.n	8007a12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079f6:	d004      	beq.n	8007a02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a00:	d107      	bne.n	8007a12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a1a:	d10f      	bne.n	8007a3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e010      	b.n	8007a72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d196      	bne.n	800799e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3728      	adds	r7, #40	@ 0x28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000004 	.word	0x20000004

08007a80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a94:	d111      	bne.n	8007aba <SPI_EndRxTransaction+0x3a>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a9e:	d004      	beq.n	8007aaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa8:	d107      	bne.n	8007aba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ab8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2180      	movs	r1, #128	@ 0x80
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff febd 	bl	8007844 <SPI_WaitFlagStateUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad4:	f043 0220 	orr.w	r2, r3, #32
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e023      	b.n	8007b28 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ae8:	d11d      	bne.n	8007b26 <SPI_EndRxTransaction+0xa6>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af2:	d004      	beq.n	8007afe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007afc:	d113      	bne.n	8007b26 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f7ff ff22 	bl	8007954 <SPI_WaitFifoStateUntilTimeout>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b1a:	f043 0220 	orr.w	r2, r3, #32
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e000      	b.n	8007b28 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff ff03 	bl	8007954 <SPI_WaitFifoStateUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b58:	f043 0220 	orr.w	r2, r3, #32
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e027      	b.n	8007bb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2180      	movs	r1, #128	@ 0x80
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7ff fe68 	bl	8007844 <SPI_WaitFlagStateUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b7e:	f043 0220 	orr.w	r2, r3, #32
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e014      	b.n	8007bb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fedc 	bl	8007954 <SPI_WaitFifoStateUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba6:	f043 0220 	orr.w	r2, r3, #32
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e000      	b.n	8007bb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bc4:	f7fb ffca 	bl	8003b5c <HAL_GetTick>
 8007bc8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0220 	bic.w	r2, r2, #32
 8007bd8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	2164      	movs	r1, #100	@ 0x64
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff ffa6 	bl	8007b30 <SPI_EndRxTxTransaction>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bee:	f043 0220 	orr.w	r2, r3, #32
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d115      	bne.n	8007c2a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d107      	bne.n	8007c1a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fa fb2c 	bl	8002270 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007c18:	e00e      	b.n	8007c38 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff fc46 	bl	80074b4 <HAL_SPI_TxRxCpltCallback>
}
 8007c28:	e006      	b.n	8007c38 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff fc48 	bl	80074c8 <HAL_SPI_ErrorCallback>
}
 8007c38:	bf00      	nop
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007c56:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007c58:	f7fb ff80 	bl	8003b5c <HAL_GetTick>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	2164      	movs	r1, #100	@ 0x64
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ff0c 	bl	8007a80 <SPI_EndRxTransaction>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c72:	f043 0220 	orr.w	r2, r3, #32
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d103      	bne.n	8007c92 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fa faf0 	bl	8002270 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007c90:	e002      	b.n	8007c98 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff fc18 	bl	80074c8 <HAL_SPI_ErrorCallback>
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ca8:	f7fb ff58 	bl	8003b5c <HAL_GetTick>
 8007cac:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007cbc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	2164      	movs	r1, #100	@ 0x64
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff ff34 	bl	8007b30 <SPI_EndRxTxTransaction>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cd2:	f043 0220 	orr.w	r2, r3, #32
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	60bb      	str	r3, [r7, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	60bb      	str	r3, [r7, #8]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7ff fbdd 	bl	80074c8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007d0e:	e002      	b.n	8007d16 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7fa fac1 	bl	8002298 <HAL_SPI_TxCpltCallback>
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e049      	b.n	8007dc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7fb f85b 	bl	8002e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f000 fa9d 	bl	800829c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d001      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e04f      	b.n	8007e84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a23      	ldr	r2, [pc, #140]	@ (8007e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d01d      	beq.n	8007e42 <HAL_TIM_Base_Start_IT+0x76>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0e:	d018      	beq.n	8007e42 <HAL_TIM_Base_Start_IT+0x76>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a1f      	ldr	r2, [pc, #124]	@ (8007e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <HAL_TIM_Base_Start_IT+0x76>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00e      	beq.n	8007e42 <HAL_TIM_Base_Start_IT+0x76>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1c      	ldr	r2, [pc, #112]	@ (8007e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d009      	beq.n	8007e42 <HAL_TIM_Base_Start_IT+0x76>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a1b      	ldr	r2, [pc, #108]	@ (8007ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d004      	beq.n	8007e42 <HAL_TIM_Base_Start_IT+0x76>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a19      	ldr	r2, [pc, #100]	@ (8007ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d115      	bne.n	8007e6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	4b17      	ldr	r3, [pc, #92]	@ (8007ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b06      	cmp	r3, #6
 8007e52:	d015      	beq.n	8007e80 <HAL_TIM_Base_Start_IT+0xb4>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e5a:	d011      	beq.n	8007e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0201 	orr.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6c:	e008      	b.n	8007e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0201 	orr.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	e000      	b.n	8007e82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	40000400 	.word	0x40000400
 8007e98:	40000800 	.word	0x40000800
 8007e9c:	40000c00 	.word	0x40000c00
 8007ea0:	40013400 	.word	0x40013400
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	00010007 	.word	0x00010007

08007eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d020      	beq.n	8007f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01b      	beq.n	8007f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0202 	mvn.w	r2, #2
 8007ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f9b2 	bl	8008260 <HAL_TIM_IC_CaptureCallback>
 8007efc:	e005      	b.n	8007f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9a4 	bl	800824c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9b5 	bl	8008274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f003 0304 	and.w	r3, r3, #4
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d020      	beq.n	8007f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01b      	beq.n	8007f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0204 	mvn.w	r2, #4
 8007f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2202      	movs	r2, #2
 8007f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f98c 	bl	8008260 <HAL_TIM_IC_CaptureCallback>
 8007f48:	e005      	b.n	8007f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f97e 	bl	800824c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f98f 	bl	8008274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d020      	beq.n	8007fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f003 0308 	and.w	r3, r3, #8
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01b      	beq.n	8007fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f06f 0208 	mvn.w	r2, #8
 8007f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	f003 0303 	and.w	r3, r3, #3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f966 	bl	8008260 <HAL_TIM_IC_CaptureCallback>
 8007f94:	e005      	b.n	8007fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f958 	bl	800824c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f969 	bl	8008274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f003 0310 	and.w	r3, r3, #16
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d020      	beq.n	8007ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01b      	beq.n	8007ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f06f 0210 	mvn.w	r2, #16
 8007fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2208      	movs	r2, #8
 8007fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f940 	bl	8008260 <HAL_TIM_IC_CaptureCallback>
 8007fe0:	e005      	b.n	8007fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f932 	bl	800824c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f943 	bl	8008274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0201 	mvn.w	r2, #1
 8008010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fa f964 	bl	80022e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800803e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fafd 	bl	8008640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 faf5 	bl	8008654 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8fd 	bl	8008288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00c      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f06f 0220 	mvn.w	r2, #32
 80080aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fabd 	bl	800862c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_TIM_ConfigClockSource+0x1c>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e0b6      	b.n	8008244 <HAL_TIM_ConfigClockSource+0x18a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080f4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80080f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008100:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008112:	d03e      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0xd8>
 8008114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008118:	f200 8087 	bhi.w	800822a <HAL_TIM_ConfigClockSource+0x170>
 800811c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008120:	f000 8086 	beq.w	8008230 <HAL_TIM_ConfigClockSource+0x176>
 8008124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008128:	d87f      	bhi.n	800822a <HAL_TIM_ConfigClockSource+0x170>
 800812a:	2b70      	cmp	r3, #112	@ 0x70
 800812c:	d01a      	beq.n	8008164 <HAL_TIM_ConfigClockSource+0xaa>
 800812e:	2b70      	cmp	r3, #112	@ 0x70
 8008130:	d87b      	bhi.n	800822a <HAL_TIM_ConfigClockSource+0x170>
 8008132:	2b60      	cmp	r3, #96	@ 0x60
 8008134:	d050      	beq.n	80081d8 <HAL_TIM_ConfigClockSource+0x11e>
 8008136:	2b60      	cmp	r3, #96	@ 0x60
 8008138:	d877      	bhi.n	800822a <HAL_TIM_ConfigClockSource+0x170>
 800813a:	2b50      	cmp	r3, #80	@ 0x50
 800813c:	d03c      	beq.n	80081b8 <HAL_TIM_ConfigClockSource+0xfe>
 800813e:	2b50      	cmp	r3, #80	@ 0x50
 8008140:	d873      	bhi.n	800822a <HAL_TIM_ConfigClockSource+0x170>
 8008142:	2b40      	cmp	r3, #64	@ 0x40
 8008144:	d058      	beq.n	80081f8 <HAL_TIM_ConfigClockSource+0x13e>
 8008146:	2b40      	cmp	r3, #64	@ 0x40
 8008148:	d86f      	bhi.n	800822a <HAL_TIM_ConfigClockSource+0x170>
 800814a:	2b30      	cmp	r3, #48	@ 0x30
 800814c:	d064      	beq.n	8008218 <HAL_TIM_ConfigClockSource+0x15e>
 800814e:	2b30      	cmp	r3, #48	@ 0x30
 8008150:	d86b      	bhi.n	800822a <HAL_TIM_ConfigClockSource+0x170>
 8008152:	2b20      	cmp	r3, #32
 8008154:	d060      	beq.n	8008218 <HAL_TIM_ConfigClockSource+0x15e>
 8008156:	2b20      	cmp	r3, #32
 8008158:	d867      	bhi.n	800822a <HAL_TIM_ConfigClockSource+0x170>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d05c      	beq.n	8008218 <HAL_TIM_ConfigClockSource+0x15e>
 800815e:	2b10      	cmp	r3, #16
 8008160:	d05a      	beq.n	8008218 <HAL_TIM_ConfigClockSource+0x15e>
 8008162:	e062      	b.n	800822a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008174:	f000 f9b2 	bl	80084dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008186:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	609a      	str	r2, [r3, #8]
      break;
 8008190:	e04f      	b.n	8008232 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081a2:	f000 f99b 	bl	80084dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081b4:	609a      	str	r2, [r3, #8]
      break;
 80081b6:	e03c      	b.n	8008232 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c4:	461a      	mov	r2, r3
 80081c6:	f000 f90f 	bl	80083e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2150      	movs	r1, #80	@ 0x50
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 f968 	bl	80084a6 <TIM_ITRx_SetConfig>
      break;
 80081d6:	e02c      	b.n	8008232 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081e4:	461a      	mov	r2, r3
 80081e6:	f000 f92e 	bl	8008446 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2160      	movs	r1, #96	@ 0x60
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f958 	bl	80084a6 <TIM_ITRx_SetConfig>
      break;
 80081f6:	e01c      	b.n	8008232 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008204:	461a      	mov	r2, r3
 8008206:	f000 f8ef 	bl	80083e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2140      	movs	r1, #64	@ 0x40
 8008210:	4618      	mov	r0, r3
 8008212:	f000 f948 	bl	80084a6 <TIM_ITRx_SetConfig>
      break;
 8008216:	e00c      	b.n	8008232 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f000 f93f 	bl	80084a6 <TIM_ITRx_SetConfig>
      break;
 8008228:	e003      	b.n	8008232 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	73fb      	strb	r3, [r7, #15]
      break;
 800822e:	e000      	b.n	8008232 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008242:	7bfb      	ldrb	r3, [r7, #15]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a46      	ldr	r2, [pc, #280]	@ (80083c8 <TIM_Base_SetConfig+0x12c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d013      	beq.n	80082dc <TIM_Base_SetConfig+0x40>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ba:	d00f      	beq.n	80082dc <TIM_Base_SetConfig+0x40>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a43      	ldr	r2, [pc, #268]	@ (80083cc <TIM_Base_SetConfig+0x130>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00b      	beq.n	80082dc <TIM_Base_SetConfig+0x40>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a42      	ldr	r2, [pc, #264]	@ (80083d0 <TIM_Base_SetConfig+0x134>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d007      	beq.n	80082dc <TIM_Base_SetConfig+0x40>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a41      	ldr	r2, [pc, #260]	@ (80083d4 <TIM_Base_SetConfig+0x138>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d003      	beq.n	80082dc <TIM_Base_SetConfig+0x40>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a40      	ldr	r2, [pc, #256]	@ (80083d8 <TIM_Base_SetConfig+0x13c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d108      	bne.n	80082ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a35      	ldr	r2, [pc, #212]	@ (80083c8 <TIM_Base_SetConfig+0x12c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d01f      	beq.n	8008336 <TIM_Base_SetConfig+0x9a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082fc:	d01b      	beq.n	8008336 <TIM_Base_SetConfig+0x9a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a32      	ldr	r2, [pc, #200]	@ (80083cc <TIM_Base_SetConfig+0x130>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d017      	beq.n	8008336 <TIM_Base_SetConfig+0x9a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a31      	ldr	r2, [pc, #196]	@ (80083d0 <TIM_Base_SetConfig+0x134>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d013      	beq.n	8008336 <TIM_Base_SetConfig+0x9a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a30      	ldr	r2, [pc, #192]	@ (80083d4 <TIM_Base_SetConfig+0x138>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00f      	beq.n	8008336 <TIM_Base_SetConfig+0x9a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a2f      	ldr	r2, [pc, #188]	@ (80083d8 <TIM_Base_SetConfig+0x13c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00b      	beq.n	8008336 <TIM_Base_SetConfig+0x9a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a2e      	ldr	r2, [pc, #184]	@ (80083dc <TIM_Base_SetConfig+0x140>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d007      	beq.n	8008336 <TIM_Base_SetConfig+0x9a>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a2d      	ldr	r2, [pc, #180]	@ (80083e0 <TIM_Base_SetConfig+0x144>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d003      	beq.n	8008336 <TIM_Base_SetConfig+0x9a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a2c      	ldr	r2, [pc, #176]	@ (80083e4 <TIM_Base_SetConfig+0x148>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d108      	bne.n	8008348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800833c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a16      	ldr	r2, [pc, #88]	@ (80083c8 <TIM_Base_SetConfig+0x12c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00f      	beq.n	8008394 <TIM_Base_SetConfig+0xf8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a18      	ldr	r2, [pc, #96]	@ (80083d8 <TIM_Base_SetConfig+0x13c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00b      	beq.n	8008394 <TIM_Base_SetConfig+0xf8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a17      	ldr	r2, [pc, #92]	@ (80083dc <TIM_Base_SetConfig+0x140>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d007      	beq.n	8008394 <TIM_Base_SetConfig+0xf8>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a16      	ldr	r2, [pc, #88]	@ (80083e0 <TIM_Base_SetConfig+0x144>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d003      	beq.n	8008394 <TIM_Base_SetConfig+0xf8>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <TIM_Base_SetConfig+0x148>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d103      	bne.n	800839c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d105      	bne.n	80083ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f023 0201 	bic.w	r2, r3, #1
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	611a      	str	r2, [r3, #16]
  }
}
 80083ba:	bf00      	nop
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	40012c00 	.word	0x40012c00
 80083cc:	40000400 	.word	0x40000400
 80083d0:	40000800 	.word	0x40000800
 80083d4:	40000c00 	.word	0x40000c00
 80083d8:	40013400 	.word	0x40013400
 80083dc:	40014000 	.word	0x40014000
 80083e0:	40014400 	.word	0x40014400
 80083e4:	40014800 	.word	0x40014800

080083e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	f023 0201 	bic.w	r2, r3, #1
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	011b      	lsls	r3, r3, #4
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f023 030a 	bic.w	r3, r3, #10
 8008424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4313      	orrs	r3, r2
 800842c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	621a      	str	r2, [r3, #32]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008446:	b480      	push	{r7}
 8008448:	b087      	sub	sp, #28
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	f023 0210 	bic.w	r2, r3, #16
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	031b      	lsls	r3, r3, #12
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	4313      	orrs	r3, r2
 800847a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008482:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	621a      	str	r2, [r3, #32]
}
 800849a:	bf00      	nop
 800849c:	371c      	adds	r7, #28
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f043 0307 	orr.w	r3, r3, #7
 80084c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	609a      	str	r2, [r3, #8]
}
 80084d0:	bf00      	nop
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	021a      	lsls	r2, r3, #8
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	431a      	orrs	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4313      	orrs	r3, r2
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	609a      	str	r2, [r3, #8]
}
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008530:	2302      	movs	r3, #2
 8008532:	e068      	b.n	8008606 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a2e      	ldr	r2, [pc, #184]	@ (8008614 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d004      	beq.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a2d      	ldr	r2, [pc, #180]	@ (8008618 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d108      	bne.n	800857a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800856e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008580:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	4313      	orrs	r3, r2
 800858a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1e      	ldr	r2, [pc, #120]	@ (8008614 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d01d      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a6:	d018      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a1b      	ldr	r2, [pc, #108]	@ (800861c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d013      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a1a      	ldr	r2, [pc, #104]	@ (8008620 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d00e      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a18      	ldr	r2, [pc, #96]	@ (8008624 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d009      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a13      	ldr	r2, [pc, #76]	@ (8008618 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d004      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a14      	ldr	r2, [pc, #80]	@ (8008628 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d10c      	bne.n	80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40012c00 	.word	0x40012c00
 8008618:	40013400 	.word	0x40013400
 800861c:	40000400 	.word	0x40000400
 8008620:	40000800 	.word	0x40000800
 8008624:	40000c00 	.word	0x40000c00
 8008628:	40014000 	.word	0x40014000

0800862c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e040      	b.n	80086fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fa fbde 	bl	8002e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2224      	movs	r2, #36	@ 0x24
 8008694:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0201 	bic.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fb6a 	bl	8008d88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f8af 	bl	8008818 <UART_SetConfig>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e01b      	b.n	80086fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0201 	orr.w	r2, r2, #1
 80086f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fbe9 	bl	8008ecc <UART_CheckIdleState>
 80086fa:	4603      	mov	r3, r0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	@ 0x28
 8008708:	af02      	add	r7, sp, #8
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	4613      	mov	r3, r2
 8008712:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008718:	2b20      	cmp	r3, #32
 800871a:	d177      	bne.n	800880c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_UART_Transmit+0x24>
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e070      	b.n	800880e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2221      	movs	r2, #33	@ 0x21
 8008738:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800873a:	f7fb fa0f 	bl	8003b5c <HAL_GetTick>
 800873e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	88fa      	ldrh	r2, [r7, #6]
 8008744:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	88fa      	ldrh	r2, [r7, #6]
 800874c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008758:	d108      	bne.n	800876c <HAL_UART_Transmit+0x68>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d104      	bne.n	800876c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	61bb      	str	r3, [r7, #24]
 800876a:	e003      	b.n	8008774 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008770:	2300      	movs	r3, #0
 8008772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008774:	e02f      	b.n	80087d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2200      	movs	r2, #0
 800877e:	2180      	movs	r1, #128	@ 0x80
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fc4b 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2220      	movs	r2, #32
 8008790:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e03b      	b.n	800880e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10b      	bne.n	80087b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	881a      	ldrh	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087a8:	b292      	uxth	r2, r2
 80087aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	3302      	adds	r3, #2
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	e007      	b.n	80087c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	3301      	adds	r3, #1
 80087c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1c9      	bne.n	8008776 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2200      	movs	r2, #0
 80087ea:	2140      	movs	r1, #64	@ 0x40
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fc15 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d004      	beq.n	8008802 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2220      	movs	r2, #32
 80087fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e005      	b.n	800880e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2220      	movs	r2, #32
 8008806:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	e000      	b.n	800880e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800880c:	2302      	movs	r3, #2
  }
}
 800880e:	4618      	mov	r0, r3
 8008810:	3720      	adds	r7, #32
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800881c:	b08a      	sub	sp, #40	@ 0x28
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	431a      	orrs	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	431a      	orrs	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	4313      	orrs	r3, r2
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	4ba4      	ldr	r3, [pc, #656]	@ (8008ad8 <UART_SetConfig+0x2c0>)
 8008848:	4013      	ands	r3, r2
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008850:	430b      	orrs	r3, r1
 8008852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a99      	ldr	r2, [pc, #612]	@ (8008adc <UART_SetConfig+0x2c4>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d004      	beq.n	8008884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008880:	4313      	orrs	r3, r2
 8008882:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008894:	430a      	orrs	r2, r1
 8008896:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a90      	ldr	r2, [pc, #576]	@ (8008ae0 <UART_SetConfig+0x2c8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d126      	bne.n	80088f0 <UART_SetConfig+0xd8>
 80088a2:	4b90      	ldr	r3, [pc, #576]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 80088a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d81b      	bhi.n	80088e8 <UART_SetConfig+0xd0>
 80088b0:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <UART_SetConfig+0xa0>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088c9 	.word	0x080088c9
 80088bc:	080088d9 	.word	0x080088d9
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088e1 	.word	0x080088e1
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ce:	e116      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088d0:	2302      	movs	r3, #2
 80088d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088d6:	e112      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088d8:	2304      	movs	r3, #4
 80088da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088de:	e10e      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088e0:	2308      	movs	r3, #8
 80088e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088e6:	e10a      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088e8:	2310      	movs	r3, #16
 80088ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ee:	e106      	b.n	8008afe <UART_SetConfig+0x2e6>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a7c      	ldr	r2, [pc, #496]	@ (8008ae8 <UART_SetConfig+0x2d0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d138      	bne.n	800896c <UART_SetConfig+0x154>
 80088fa:	4b7a      	ldr	r3, [pc, #488]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008900:	f003 030c 	and.w	r3, r3, #12
 8008904:	2b0c      	cmp	r3, #12
 8008906:	d82d      	bhi.n	8008964 <UART_SetConfig+0x14c>
 8008908:	a201      	add	r2, pc, #4	@ (adr r2, 8008910 <UART_SetConfig+0xf8>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008945 	.word	0x08008945
 8008914:	08008965 	.word	0x08008965
 8008918:	08008965 	.word	0x08008965
 800891c:	08008965 	.word	0x08008965
 8008920:	08008955 	.word	0x08008955
 8008924:	08008965 	.word	0x08008965
 8008928:	08008965 	.word	0x08008965
 800892c:	08008965 	.word	0x08008965
 8008930:	0800894d 	.word	0x0800894d
 8008934:	08008965 	.word	0x08008965
 8008938:	08008965 	.word	0x08008965
 800893c:	08008965 	.word	0x08008965
 8008940:	0800895d 	.word	0x0800895d
 8008944:	2300      	movs	r3, #0
 8008946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800894a:	e0d8      	b.n	8008afe <UART_SetConfig+0x2e6>
 800894c:	2302      	movs	r3, #2
 800894e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008952:	e0d4      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800895a:	e0d0      	b.n	8008afe <UART_SetConfig+0x2e6>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008962:	e0cc      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800896a:	e0c8      	b.n	8008afe <UART_SetConfig+0x2e6>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a5e      	ldr	r2, [pc, #376]	@ (8008aec <UART_SetConfig+0x2d4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d125      	bne.n	80089c2 <UART_SetConfig+0x1aa>
 8008976:	4b5b      	ldr	r3, [pc, #364]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 8008978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800897c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008980:	2b30      	cmp	r3, #48	@ 0x30
 8008982:	d016      	beq.n	80089b2 <UART_SetConfig+0x19a>
 8008984:	2b30      	cmp	r3, #48	@ 0x30
 8008986:	d818      	bhi.n	80089ba <UART_SetConfig+0x1a2>
 8008988:	2b20      	cmp	r3, #32
 800898a:	d00a      	beq.n	80089a2 <UART_SetConfig+0x18a>
 800898c:	2b20      	cmp	r3, #32
 800898e:	d814      	bhi.n	80089ba <UART_SetConfig+0x1a2>
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <UART_SetConfig+0x182>
 8008994:	2b10      	cmp	r3, #16
 8008996:	d008      	beq.n	80089aa <UART_SetConfig+0x192>
 8008998:	e00f      	b.n	80089ba <UART_SetConfig+0x1a2>
 800899a:	2300      	movs	r3, #0
 800899c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089a0:	e0ad      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089a2:	2302      	movs	r3, #2
 80089a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089a8:	e0a9      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089aa:	2304      	movs	r3, #4
 80089ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089b0:	e0a5      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089b2:	2308      	movs	r3, #8
 80089b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089b8:	e0a1      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089ba:	2310      	movs	r3, #16
 80089bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089c0:	e09d      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a4a      	ldr	r2, [pc, #296]	@ (8008af0 <UART_SetConfig+0x2d8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d125      	bne.n	8008a18 <UART_SetConfig+0x200>
 80089cc:	4b45      	ldr	r3, [pc, #276]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 80089ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80089d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80089d8:	d016      	beq.n	8008a08 <UART_SetConfig+0x1f0>
 80089da:	2bc0      	cmp	r3, #192	@ 0xc0
 80089dc:	d818      	bhi.n	8008a10 <UART_SetConfig+0x1f8>
 80089de:	2b80      	cmp	r3, #128	@ 0x80
 80089e0:	d00a      	beq.n	80089f8 <UART_SetConfig+0x1e0>
 80089e2:	2b80      	cmp	r3, #128	@ 0x80
 80089e4:	d814      	bhi.n	8008a10 <UART_SetConfig+0x1f8>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <UART_SetConfig+0x1d8>
 80089ea:	2b40      	cmp	r3, #64	@ 0x40
 80089ec:	d008      	beq.n	8008a00 <UART_SetConfig+0x1e8>
 80089ee:	e00f      	b.n	8008a10 <UART_SetConfig+0x1f8>
 80089f0:	2300      	movs	r3, #0
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089f6:	e082      	b.n	8008afe <UART_SetConfig+0x2e6>
 80089f8:	2302      	movs	r3, #2
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089fe:	e07e      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a00:	2304      	movs	r3, #4
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a06:	e07a      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a08:	2308      	movs	r3, #8
 8008a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a0e:	e076      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a10:	2310      	movs	r3, #16
 8008a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a16:	e072      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a35      	ldr	r2, [pc, #212]	@ (8008af4 <UART_SetConfig+0x2dc>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d12a      	bne.n	8008a78 <UART_SetConfig+0x260>
 8008a22:	4b30      	ldr	r3, [pc, #192]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 8008a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a30:	d01a      	beq.n	8008a68 <UART_SetConfig+0x250>
 8008a32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a36:	d81b      	bhi.n	8008a70 <UART_SetConfig+0x258>
 8008a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3c:	d00c      	beq.n	8008a58 <UART_SetConfig+0x240>
 8008a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a42:	d815      	bhi.n	8008a70 <UART_SetConfig+0x258>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <UART_SetConfig+0x238>
 8008a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a4c:	d008      	beq.n	8008a60 <UART_SetConfig+0x248>
 8008a4e:	e00f      	b.n	8008a70 <UART_SetConfig+0x258>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a56:	e052      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a5e:	e04e      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a60:	2304      	movs	r3, #4
 8008a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a66:	e04a      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a6e:	e046      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a70:	2310      	movs	r3, #16
 8008a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a76:	e042      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a17      	ldr	r2, [pc, #92]	@ (8008adc <UART_SetConfig+0x2c4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d13a      	bne.n	8008af8 <UART_SetConfig+0x2e0>
 8008a82:	4b18      	ldr	r3, [pc, #96]	@ (8008ae4 <UART_SetConfig+0x2cc>)
 8008a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a90:	d01a      	beq.n	8008ac8 <UART_SetConfig+0x2b0>
 8008a92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a96:	d81b      	bhi.n	8008ad0 <UART_SetConfig+0x2b8>
 8008a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a9c:	d00c      	beq.n	8008ab8 <UART_SetConfig+0x2a0>
 8008a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aa2:	d815      	bhi.n	8008ad0 <UART_SetConfig+0x2b8>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <UART_SetConfig+0x298>
 8008aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aac:	d008      	beq.n	8008ac0 <UART_SetConfig+0x2a8>
 8008aae:	e00f      	b.n	8008ad0 <UART_SetConfig+0x2b8>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ab6:	e022      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008abe:	e01e      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ac0:	2304      	movs	r3, #4
 8008ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ac6:	e01a      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ac8:	2308      	movs	r3, #8
 8008aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ace:	e016      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ad6:	e012      	b.n	8008afe <UART_SetConfig+0x2e6>
 8008ad8:	efff69f3 	.word	0xefff69f3
 8008adc:	40008000 	.word	0x40008000
 8008ae0:	40013800 	.word	0x40013800
 8008ae4:	40021000 	.word	0x40021000
 8008ae8:	40004400 	.word	0x40004400
 8008aec:	40004800 	.word	0x40004800
 8008af0:	40004c00 	.word	0x40004c00
 8008af4:	40005000 	.word	0x40005000
 8008af8:	2310      	movs	r3, #16
 8008afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a9f      	ldr	r2, [pc, #636]	@ (8008d80 <UART_SetConfig+0x568>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d17a      	bne.n	8008bfe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d824      	bhi.n	8008b5a <UART_SetConfig+0x342>
 8008b10:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <UART_SetConfig+0x300>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b5b 	.word	0x08008b5b
 8008b20:	08008b45 	.word	0x08008b45
 8008b24:	08008b5b 	.word	0x08008b5b
 8008b28:	08008b4b 	.word	0x08008b4b
 8008b2c:	08008b5b 	.word	0x08008b5b
 8008b30:	08008b5b 	.word	0x08008b5b
 8008b34:	08008b5b 	.word	0x08008b5b
 8008b38:	08008b53 	.word	0x08008b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b3c:	f7fd f864 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8008b40:	61f8      	str	r0, [r7, #28]
        break;
 8008b42:	e010      	b.n	8008b66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b44:	4b8f      	ldr	r3, [pc, #572]	@ (8008d84 <UART_SetConfig+0x56c>)
 8008b46:	61fb      	str	r3, [r7, #28]
        break;
 8008b48:	e00d      	b.n	8008b66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b4a:	f7fc ffc5 	bl	8005ad8 <HAL_RCC_GetSysClockFreq>
 8008b4e:	61f8      	str	r0, [r7, #28]
        break;
 8008b50:	e009      	b.n	8008b66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b56:	61fb      	str	r3, [r7, #28]
        break;
 8008b58:	e005      	b.n	8008b66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008b64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80fb 	beq.w	8008d64 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	4613      	mov	r3, r2
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	4413      	add	r3, r2
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d305      	bcc.n	8008b8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d903      	bls.n	8008b92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008b90:	e0e8      	b.n	8008d64 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	2200      	movs	r2, #0
 8008b96:	461c      	mov	r4, r3
 8008b98:	4615      	mov	r5, r2
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	022b      	lsls	r3, r5, #8
 8008ba4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ba8:	0222      	lsls	r2, r4, #8
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	6849      	ldr	r1, [r1, #4]
 8008bae:	0849      	lsrs	r1, r1, #1
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	4688      	mov	r8, r1
 8008bb4:	4681      	mov	r9, r0
 8008bb6:	eb12 0a08 	adds.w	sl, r2, r8
 8008bba:	eb43 0b09 	adc.w	fp, r3, r9
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	603b      	str	r3, [r7, #0]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bcc:	4650      	mov	r0, sl
 8008bce:	4659      	mov	r1, fp
 8008bd0:	f7f8 f85a 	bl	8000c88 <__aeabi_uldivmod>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4613      	mov	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008be2:	d308      	bcc.n	8008bf6 <UART_SetConfig+0x3de>
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bea:	d204      	bcs.n	8008bf6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	60da      	str	r2, [r3, #12]
 8008bf4:	e0b6      	b.n	8008d64 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008bfc:	e0b2      	b.n	8008d64 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c06:	d15e      	bne.n	8008cc6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008c08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d828      	bhi.n	8008c62 <UART_SetConfig+0x44a>
 8008c10:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <UART_SetConfig+0x400>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c3d 	.word	0x08008c3d
 8008c1c:	08008c45 	.word	0x08008c45
 8008c20:	08008c4d 	.word	0x08008c4d
 8008c24:	08008c63 	.word	0x08008c63
 8008c28:	08008c53 	.word	0x08008c53
 8008c2c:	08008c63 	.word	0x08008c63
 8008c30:	08008c63 	.word	0x08008c63
 8008c34:	08008c63 	.word	0x08008c63
 8008c38:	08008c5b 	.word	0x08008c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c3c:	f7fc ffe4 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8008c40:	61f8      	str	r0, [r7, #28]
        break;
 8008c42:	e014      	b.n	8008c6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c44:	f7fc fff6 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 8008c48:	61f8      	str	r0, [r7, #28]
        break;
 8008c4a:	e010      	b.n	8008c6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8008d84 <UART_SetConfig+0x56c>)
 8008c4e:	61fb      	str	r3, [r7, #28]
        break;
 8008c50:	e00d      	b.n	8008c6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c52:	f7fc ff41 	bl	8005ad8 <HAL_RCC_GetSysClockFreq>
 8008c56:	61f8      	str	r0, [r7, #28]
        break;
 8008c58:	e009      	b.n	8008c6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c5e:	61fb      	str	r3, [r7, #28]
        break;
 8008c60:	e005      	b.n	8008c6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008c6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d077      	beq.n	8008d64 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	005a      	lsls	r2, r3, #1
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	441a      	add	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b0f      	cmp	r3, #15
 8008c8e:	d916      	bls.n	8008cbe <UART_SetConfig+0x4a6>
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c96:	d212      	bcs.n	8008cbe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	f023 030f 	bic.w	r3, r3, #15
 8008ca0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	8afb      	ldrh	r3, [r7, #22]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	8afa      	ldrh	r2, [r7, #22]
 8008cba:	60da      	str	r2, [r3, #12]
 8008cbc:	e052      	b.n	8008d64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008cc4:	e04e      	b.n	8008d64 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d827      	bhi.n	8008d1e <UART_SetConfig+0x506>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <UART_SetConfig+0x4bc>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008cf9 	.word	0x08008cf9
 8008cd8:	08008d01 	.word	0x08008d01
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	08008d1f 	.word	0x08008d1f
 8008ce4:	08008d0f 	.word	0x08008d0f
 8008ce8:	08008d1f 	.word	0x08008d1f
 8008cec:	08008d1f 	.word	0x08008d1f
 8008cf0:	08008d1f 	.word	0x08008d1f
 8008cf4:	08008d17 	.word	0x08008d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cf8:	f7fc ff86 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8008cfc:	61f8      	str	r0, [r7, #28]
        break;
 8008cfe:	e014      	b.n	8008d2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d00:	f7fc ff98 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 8008d04:	61f8      	str	r0, [r7, #28]
        break;
 8008d06:	e010      	b.n	8008d2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d08:	4b1e      	ldr	r3, [pc, #120]	@ (8008d84 <UART_SetConfig+0x56c>)
 8008d0a:	61fb      	str	r3, [r7, #28]
        break;
 8008d0c:	e00d      	b.n	8008d2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d0e:	f7fc fee3 	bl	8005ad8 <HAL_RCC_GetSysClockFreq>
 8008d12:	61f8      	str	r0, [r7, #28]
        break;
 8008d14:	e009      	b.n	8008d2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d1a:	61fb      	str	r3, [r7, #28]
        break;
 8008d1c:	e005      	b.n	8008d2a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008d28:	bf00      	nop
    }

    if (pclk != 0U)
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d019      	beq.n	8008d64 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	085a      	lsrs	r2, r3, #1
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	441a      	add	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b0f      	cmp	r3, #15
 8008d48:	d909      	bls.n	8008d5e <UART_SetConfig+0x546>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d50:	d205      	bcs.n	8008d5e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60da      	str	r2, [r3, #12]
 8008d5c:	e002      	b.n	8008d64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008d70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3728      	adds	r7, #40	@ 0x28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d7e:	bf00      	nop
 8008d80:	40008000 	.word	0x40008000
 8008d84:	00f42400 	.word	0x00f42400

08008d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00a      	beq.n	8008db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00a      	beq.n	8008df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfa:	f003 0304 	and.w	r3, r3, #4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00a      	beq.n	8008e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	430a      	orrs	r2, r1
 8008e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1c:	f003 0310 	and.w	r3, r3, #16
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01a      	beq.n	8008e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e86:	d10a      	bne.n	8008e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	605a      	str	r2, [r3, #4]
  }
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b098      	sub	sp, #96	@ 0x60
 8008ed0:	af02      	add	r7, sp, #8
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008edc:	f7fa fe3e 	bl	8003b5c <HAL_GetTick>
 8008ee0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d12e      	bne.n	8008f4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f88c 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d021      	beq.n	8008f4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e062      	b.n	8009014 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d149      	bne.n	8008ff0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f64:	2200      	movs	r2, #0
 8008f66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f856 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d03c      	beq.n	8008ff0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	623b      	str	r3, [r7, #32]
   return(result);
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e6      	bne.n	8008f76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3308      	adds	r3, #8
 8008fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0301 	bic.w	r3, r3, #1
 8008fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fc8:	61fa      	str	r2, [r7, #28]
 8008fca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	69b9      	ldr	r1, [r7, #24]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e5      	bne.n	8008fa8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e011      	b.n	8009014 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3758      	adds	r7, #88	@ 0x58
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	4613      	mov	r3, r2
 800902a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800902c:	e04f      	b.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d04b      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009036:	f7fa fd91 	bl	8003b5c <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <UART_WaitOnFlagUntilTimeout+0x30>
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e04e      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d037      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b80      	cmp	r3, #128	@ 0x80
 8009062:	d034      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b40      	cmp	r3, #64	@ 0x40
 8009068:	d031      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b08      	cmp	r3, #8
 8009076:	d110      	bne.n	800909a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f838 	bl	80090f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2208      	movs	r2, #8
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e029      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a8:	d111      	bne.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f81e 	bl	80090f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e00f      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4013      	ands	r3, r2
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	429a      	cmp	r2, r3
 80090dc:	bf0c      	ite	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	2300      	movne	r3, #0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d0a0      	beq.n	800902e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b095      	sub	sp, #84	@ 0x54
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911c:	643b      	str	r3, [r7, #64]	@ 0x40
 800911e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e6      	bne.n	80090fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3308      	adds	r3, #8
 8009136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	f023 0301 	bic.w	r3, r3, #1
 8009146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3308      	adds	r3, #8
 800914e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009150:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009152:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e5      	bne.n	8009130 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009168:	2b01      	cmp	r3, #1
 800916a:	d118      	bne.n	800919e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	60bb      	str	r3, [r7, #8]
   return(result);
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f023 0310 	bic.w	r3, r3, #16
 8009180:	647b      	str	r3, [r7, #68]	@ 0x44
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800918a:	61bb      	str	r3, [r7, #24]
 800918c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6979      	ldr	r1, [r7, #20]
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	613b      	str	r3, [r7, #16]
   return(result);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80091b2:	bf00      	nop
 80091b4:	3754      	adds	r7, #84	@ 0x54
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
	...

080091c0 <__NVIC_SetPriority>:
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	6039      	str	r1, [r7, #0]
 80091ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	db0a      	blt.n	80091ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	490c      	ldr	r1, [pc, #48]	@ (800920c <__NVIC_SetPriority+0x4c>)
 80091da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091de:	0112      	lsls	r2, r2, #4
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	440b      	add	r3, r1
 80091e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80091e8:	e00a      	b.n	8009200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	4908      	ldr	r1, [pc, #32]	@ (8009210 <__NVIC_SetPriority+0x50>)
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	3b04      	subs	r3, #4
 80091f8:	0112      	lsls	r2, r2, #4
 80091fa:	b2d2      	uxtb	r2, r2
 80091fc:	440b      	add	r3, r1
 80091fe:	761a      	strb	r2, [r3, #24]
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	e000e100 	.word	0xe000e100
 8009210:	e000ed00 	.word	0xe000ed00

08009214 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009218:	2100      	movs	r1, #0
 800921a:	f06f 0004 	mvn.w	r0, #4
 800921e:	f7ff ffcf 	bl	80091c0 <__NVIC_SetPriority>
#endif
}
 8009222:	bf00      	nop
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800922e:	f3ef 8305 	mrs	r3, IPSR
 8009232:	603b      	str	r3, [r7, #0]
  return(result);
 8009234:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800923a:	f06f 0305 	mvn.w	r3, #5
 800923e:	607b      	str	r3, [r7, #4]
 8009240:	e00c      	b.n	800925c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009242:	4b0a      	ldr	r3, [pc, #40]	@ (800926c <osKernelInitialize+0x44>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d105      	bne.n	8009256 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800924a:	4b08      	ldr	r3, [pc, #32]	@ (800926c <osKernelInitialize+0x44>)
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009250:	2300      	movs	r3, #0
 8009252:	607b      	str	r3, [r7, #4]
 8009254:	e002      	b.n	800925c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009256:	f04f 33ff 	mov.w	r3, #4294967295
 800925a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800925c:	687b      	ldr	r3, [r7, #4]
}
 800925e:	4618      	mov	r0, r3
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	20002624 	.word	0x20002624

08009270 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009276:	f3ef 8305 	mrs	r3, IPSR
 800927a:	603b      	str	r3, [r7, #0]
  return(result);
 800927c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009282:	f06f 0305 	mvn.w	r3, #5
 8009286:	607b      	str	r3, [r7, #4]
 8009288:	e010      	b.n	80092ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800928a:	4b0b      	ldr	r3, [pc, #44]	@ (80092b8 <osKernelStart+0x48>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d109      	bne.n	80092a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009292:	f7ff ffbf 	bl	8009214 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009296:	4b08      	ldr	r3, [pc, #32]	@ (80092b8 <osKernelStart+0x48>)
 8009298:	2202      	movs	r2, #2
 800929a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800929c:	f001 feb4 	bl	800b008 <vTaskStartScheduler>
      stat = osOK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	607b      	str	r3, [r7, #4]
 80092a4:	e002      	b.n	80092ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80092a6:	f04f 33ff 	mov.w	r3, #4294967295
 80092aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092ac:	687b      	ldr	r3, [r7, #4]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20002624 	.word	0x20002624

080092bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08e      	sub	sp, #56	@ 0x38
 80092c0:	af04      	add	r7, sp, #16
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092cc:	f3ef 8305 	mrs	r3, IPSR
 80092d0:	617b      	str	r3, [r7, #20]
  return(result);
 80092d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d17e      	bne.n	80093d6 <osThreadNew+0x11a>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d07b      	beq.n	80093d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092de:	2380      	movs	r3, #128	@ 0x80
 80092e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092e2:	2318      	movs	r3, #24
 80092e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80092ea:	f04f 33ff 	mov.w	r3, #4294967295
 80092ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d045      	beq.n	8009382 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <osThreadNew+0x48>
        name = attr->name;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d008      	beq.n	800932a <osThreadNew+0x6e>
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2b38      	cmp	r3, #56	@ 0x38
 800931c:	d805      	bhi.n	800932a <osThreadNew+0x6e>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <osThreadNew+0x72>
        return (NULL);
 800932a:	2300      	movs	r3, #0
 800932c:	e054      	b.n	80093d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	089b      	lsrs	r3, r3, #2
 800933c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00e      	beq.n	8009364 <osThreadNew+0xa8>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	2b5b      	cmp	r3, #91	@ 0x5b
 800934c:	d90a      	bls.n	8009364 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009352:	2b00      	cmp	r3, #0
 8009354:	d006      	beq.n	8009364 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <osThreadNew+0xa8>
        mem = 1;
 800935e:	2301      	movs	r3, #1
 8009360:	61bb      	str	r3, [r7, #24]
 8009362:	e010      	b.n	8009386 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10c      	bne.n	8009386 <osThreadNew+0xca>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d108      	bne.n	8009386 <osThreadNew+0xca>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d104      	bne.n	8009386 <osThreadNew+0xca>
          mem = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	61bb      	str	r3, [r7, #24]
 8009380:	e001      	b.n	8009386 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d110      	bne.n	80093ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009394:	9202      	str	r2, [sp, #8]
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	6a3a      	ldr	r2, [r7, #32]
 80093a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f001 fbae 	bl	800ab04 <xTaskCreateStatic>
 80093a8:	4603      	mov	r3, r0
 80093aa:	613b      	str	r3, [r7, #16]
 80093ac:	e013      	b.n	80093d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d110      	bne.n	80093d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f001 fbfc 	bl	800abc4 <xTaskCreate>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d001      	beq.n	80093d6 <osThreadNew+0x11a>
            hTask = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093d6:	693b      	ldr	r3, [r7, #16]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3728      	adds	r7, #40	@ 0x28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ec:	f3ef 8305 	mrs	r3, IPSR
 80093f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80093f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80093f8:	f06f 0305 	mvn.w	r3, #5
 80093fc:	617b      	str	r3, [r7, #20]
 80093fe:	e017      	b.n	8009430 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d103      	bne.n	800940e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8009406:	f06f 0303 	mvn.w	r3, #3
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	e010      	b.n	8009430 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800940e:	6938      	ldr	r0, [r7, #16]
 8009410:	f001 fd92 	bl	800af38 <eTaskGetState>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	2b04      	cmp	r3, #4
 800941c:	d005      	beq.n	800942a <osThreadTerminate+0x4a>
      stat = osOK;
 800941e:	2300      	movs	r3, #0
 8009420:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8009422:	6938      	ldr	r0, [r7, #16]
 8009424:	f001 fd14 	bl	800ae50 <vTaskDelete>
 8009428:	e002      	b.n	8009430 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800942a:	f06f 0302 	mvn.w	r3, #2
 800942e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8009430:	697b      	ldr	r3, [r7, #20]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800943a:	b580      	push	{r7, lr}
 800943c:	b08a      	sub	sp, #40	@ 0x28
 800943e:	af02      	add	r7, sp, #8
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800944a:	f3ef 8305 	mrs	r3, IPSR
 800944e:	613b      	str	r3, [r7, #16]
  return(result);
 8009450:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009452:	2b00      	cmp	r3, #0
 8009454:	d175      	bne.n	8009542 <osSemaphoreNew+0x108>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d072      	beq.n	8009542 <osSemaphoreNew+0x108>
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	429a      	cmp	r2, r3
 8009462:	d86e      	bhi.n	8009542 <osSemaphoreNew+0x108>
    mem = -1;
 8009464:	f04f 33ff 	mov.w	r3, #4294967295
 8009468:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d015      	beq.n	800949c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d006      	beq.n	8009486 <osSemaphoreNew+0x4c>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	2b4f      	cmp	r3, #79	@ 0x4f
 800947e:	d902      	bls.n	8009486 <osSemaphoreNew+0x4c>
        mem = 1;
 8009480:	2301      	movs	r3, #1
 8009482:	61bb      	str	r3, [r7, #24]
 8009484:	e00c      	b.n	80094a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d108      	bne.n	80094a0 <osSemaphoreNew+0x66>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <osSemaphoreNew+0x66>
          mem = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	61bb      	str	r3, [r7, #24]
 800949a:	e001      	b.n	80094a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a6:	d04c      	beq.n	8009542 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d128      	bne.n	8009500 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d10a      	bne.n	80094ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	2203      	movs	r2, #3
 80094ba:	9200      	str	r2, [sp, #0]
 80094bc:	2200      	movs	r2, #0
 80094be:	2100      	movs	r1, #0
 80094c0:	2001      	movs	r0, #1
 80094c2:	f000 fb5d 	bl	8009b80 <xQueueGenericCreateStatic>
 80094c6:	61f8      	str	r0, [r7, #28]
 80094c8:	e005      	b.n	80094d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80094ca:	2203      	movs	r2, #3
 80094cc:	2100      	movs	r1, #0
 80094ce:	2001      	movs	r0, #1
 80094d0:	f000 fbd3 	bl	8009c7a <xQueueGenericCreate>
 80094d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d022      	beq.n	8009522 <osSemaphoreNew+0xe8>
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d01f      	beq.n	8009522 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80094e2:	2300      	movs	r3, #0
 80094e4:	2200      	movs	r2, #0
 80094e6:	2100      	movs	r1, #0
 80094e8:	69f8      	ldr	r0, [r7, #28]
 80094ea:	f000 fc93 	bl	8009e14 <xQueueGenericSend>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d016      	beq.n	8009522 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80094f4:	69f8      	ldr	r0, [r7, #28]
 80094f6:	f001 f931 	bl	800a75c <vQueueDelete>
            hSemaphore = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	e010      	b.n	8009522 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d108      	bne.n	8009518 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	461a      	mov	r2, r3
 800950c:	68b9      	ldr	r1, [r7, #8]
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fc11 	bl	8009d36 <xQueueCreateCountingSemaphoreStatic>
 8009514:	61f8      	str	r0, [r7, #28]
 8009516:	e004      	b.n	8009522 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f000 fc44 	bl	8009da8 <xQueueCreateCountingSemaphore>
 8009520:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00c      	beq.n	8009542 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <osSemaphoreNew+0xfc>
          name = attr->name;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	e001      	b.n	800953a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800953a:	6979      	ldr	r1, [r7, #20]
 800953c:	69f8      	ldr	r0, [r7, #28]
 800953e:	f001 fa59 	bl	800a9f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009542:	69fb      	ldr	r3, [r7, #28]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3720      	adds	r7, #32
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009564:	f06f 0303 	mvn.w	r3, #3
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	e039      	b.n	80095e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800956c:	f3ef 8305 	mrs	r3, IPSR
 8009570:	60fb      	str	r3, [r7, #12]
  return(result);
 8009572:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009574:	2b00      	cmp	r3, #0
 8009576:	d022      	beq.n	80095be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800957e:	f06f 0303 	mvn.w	r3, #3
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e02c      	b.n	80095e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009586:	2300      	movs	r3, #0
 8009588:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	461a      	mov	r2, r3
 8009590:	2100      	movs	r1, #0
 8009592:	6938      	ldr	r0, [r7, #16]
 8009594:	f001 f860 	bl	800a658 <xQueueReceiveFromISR>
 8009598:	4603      	mov	r3, r0
 800959a:	2b01      	cmp	r3, #1
 800959c:	d003      	beq.n	80095a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800959e:	f06f 0302 	mvn.w	r3, #2
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e01c      	b.n	80095e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d019      	beq.n	80095e0 <osSemaphoreAcquire+0x94>
 80095ac:	4b0f      	ldr	r3, [pc, #60]	@ (80095ec <osSemaphoreAcquire+0xa0>)
 80095ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	e010      	b.n	80095e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6938      	ldr	r0, [r7, #16]
 80095c2:	f000 ff39 	bl	800a438 <xQueueSemaphoreTake>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d009      	beq.n	80095e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80095d2:	f06f 0301 	mvn.w	r3, #1
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e002      	b.n	80095e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80095da:	f06f 0302 	mvn.w	r3, #2
 80095de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80095e0:	697b      	ldr	r3, [r7, #20]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	e000ed04 	.word	0xe000ed04

080095f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d103      	bne.n	800960e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009606:	f06f 0303 	mvn.w	r3, #3
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	e02c      	b.n	8009668 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800960e:	f3ef 8305 	mrs	r3, IPSR
 8009612:	60fb      	str	r3, [r7, #12]
  return(result);
 8009614:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01a      	beq.n	8009650 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800961a:	2300      	movs	r3, #0
 800961c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800961e:	f107 0308 	add.w	r3, r7, #8
 8009622:	4619      	mov	r1, r3
 8009624:	6938      	ldr	r0, [r7, #16]
 8009626:	f000 fd95 	bl	800a154 <xQueueGiveFromISR>
 800962a:	4603      	mov	r3, r0
 800962c:	2b01      	cmp	r3, #1
 800962e:	d003      	beq.n	8009638 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009630:	f06f 0302 	mvn.w	r3, #2
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	e017      	b.n	8009668 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d014      	beq.n	8009668 <osSemaphoreRelease+0x78>
 800963e:	4b0d      	ldr	r3, [pc, #52]	@ (8009674 <osSemaphoreRelease+0x84>)
 8009640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	e00b      	b.n	8009668 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009650:	2300      	movs	r3, #0
 8009652:	2200      	movs	r2, #0
 8009654:	2100      	movs	r1, #0
 8009656:	6938      	ldr	r0, [r7, #16]
 8009658:	f000 fbdc 	bl	8009e14 <xQueueGenericSend>
 800965c:	4603      	mov	r3, r0
 800965e:	2b01      	cmp	r3, #1
 8009660:	d002      	beq.n	8009668 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009662:	f06f 0302 	mvn.w	r3, #2
 8009666:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009668:	697b      	ldr	r3, [r7, #20]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	e000ed04 	.word	0xe000ed04

08009678 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009678:	b580      	push	{r7, lr}
 800967a:	b08a      	sub	sp, #40	@ 0x28
 800967c:	af02      	add	r7, sp, #8
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009688:	f3ef 8305 	mrs	r3, IPSR
 800968c:	613b      	str	r3, [r7, #16]
  return(result);
 800968e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009690:	2b00      	cmp	r3, #0
 8009692:	d15f      	bne.n	8009754 <osMessageQueueNew+0xdc>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d05c      	beq.n	8009754 <osMessageQueueNew+0xdc>
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d059      	beq.n	8009754 <osMessageQueueNew+0xdc>
    mem = -1;
 80096a0:	f04f 33ff 	mov.w	r3, #4294967295
 80096a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d029      	beq.n	8009700 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d012      	beq.n	80096da <osMessageQueueNew+0x62>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80096ba:	d90e      	bls.n	80096da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	695a      	ldr	r2, [r3, #20]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	fb01 f303 	mul.w	r3, r1, r3
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <osMessageQueueNew+0x62>
        mem = 1;
 80096d4:	2301      	movs	r3, #1
 80096d6:	61bb      	str	r3, [r7, #24]
 80096d8:	e014      	b.n	8009704 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d110      	bne.n	8009704 <osMessageQueueNew+0x8c>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10c      	bne.n	8009704 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d108      	bne.n	8009704 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d104      	bne.n	8009704 <osMessageQueueNew+0x8c>
          mem = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	e001      	b.n	8009704 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d10b      	bne.n	8009722 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	691a      	ldr	r2, [r3, #16]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	2100      	movs	r1, #0
 8009714:	9100      	str	r1, [sp, #0]
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f000 fa31 	bl	8009b80 <xQueueGenericCreateStatic>
 800971e:	61f8      	str	r0, [r7, #28]
 8009720:	e008      	b.n	8009734 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009728:	2200      	movs	r2, #0
 800972a:	68b9      	ldr	r1, [r7, #8]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 faa4 	bl	8009c7a <xQueueGenericCreate>
 8009732:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00c      	beq.n	8009754 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	617b      	str	r3, [r7, #20]
 8009746:	e001      	b.n	800974c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800974c:	6979      	ldr	r1, [r7, #20]
 800974e:	69f8      	ldr	r0, [r7, #28]
 8009750:	f001 f950 	bl	800a9f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009754:	69fb      	ldr	r3, [r7, #28]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	4613      	mov	r3, r2
 800976e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009774:	2300      	movs	r3, #0
 8009776:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009778:	f3ef 8305 	mrs	r3, IPSR
 800977c:	617b      	str	r3, [r7, #20]
  return(result);
 800977e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009780:	2b00      	cmp	r3, #0
 8009782:	d028      	beq.n	80097d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d005      	beq.n	8009796 <osMessageQueuePut+0x36>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <osMessageQueuePut+0x36>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009796:	f06f 0303 	mvn.w	r3, #3
 800979a:	61fb      	str	r3, [r7, #28]
 800979c:	e038      	b.n	8009810 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80097a2:	f107 0210 	add.w	r2, r7, #16
 80097a6:	2300      	movs	r3, #0
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	69b8      	ldr	r0, [r7, #24]
 80097ac:	f000 fc34 	bl	800a018 <xQueueGenericSendFromISR>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d003      	beq.n	80097be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80097b6:	f06f 0302 	mvn.w	r3, #2
 80097ba:	61fb      	str	r3, [r7, #28]
 80097bc:	e028      	b.n	8009810 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d025      	beq.n	8009810 <osMessageQueuePut+0xb0>
 80097c4:	4b15      	ldr	r3, [pc, #84]	@ (800981c <osMessageQueuePut+0xbc>)
 80097c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	e01c      	b.n	8009810 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <osMessageQueuePut+0x82>
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d103      	bne.n	80097ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80097e2:	f06f 0303 	mvn.w	r3, #3
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	e012      	b.n	8009810 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80097ea:	2300      	movs	r3, #0
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	68b9      	ldr	r1, [r7, #8]
 80097f0:	69b8      	ldr	r0, [r7, #24]
 80097f2:	f000 fb0f 	bl	8009e14 <xQueueGenericSend>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d009      	beq.n	8009810 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009802:	f06f 0301 	mvn.w	r3, #1
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	e002      	b.n	8009810 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800980a:	f06f 0302 	mvn.w	r3, #2
 800980e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009810:	69fb      	ldr	r3, [r7, #28]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3720      	adds	r7, #32
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	e000ed04 	.word	0xe000ed04

08009820 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009832:	2300      	movs	r3, #0
 8009834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009836:	f3ef 8305 	mrs	r3, IPSR
 800983a:	617b      	str	r3, [r7, #20]
  return(result);
 800983c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800983e:	2b00      	cmp	r3, #0
 8009840:	d028      	beq.n	8009894 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <osMessageQueueGet+0x34>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <osMessageQueueGet+0x34>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d003      	beq.n	800985c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009854:	f06f 0303 	mvn.w	r3, #3
 8009858:	61fb      	str	r3, [r7, #28]
 800985a:	e037      	b.n	80098cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800985c:	2300      	movs	r3, #0
 800985e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009860:	f107 0310 	add.w	r3, r7, #16
 8009864:	461a      	mov	r2, r3
 8009866:	68b9      	ldr	r1, [r7, #8]
 8009868:	69b8      	ldr	r0, [r7, #24]
 800986a:	f000 fef5 	bl	800a658 <xQueueReceiveFromISR>
 800986e:	4603      	mov	r3, r0
 8009870:	2b01      	cmp	r3, #1
 8009872:	d003      	beq.n	800987c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009874:	f06f 0302 	mvn.w	r3, #2
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	e027      	b.n	80098cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d024      	beq.n	80098cc <osMessageQueueGet+0xac>
 8009882:	4b15      	ldr	r3, [pc, #84]	@ (80098d8 <osMessageQueueGet+0xb8>)
 8009884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	e01b      	b.n	80098cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <osMessageQueueGet+0x80>
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d103      	bne.n	80098a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80098a0:	f06f 0303 	mvn.w	r3, #3
 80098a4:	61fb      	str	r3, [r7, #28]
 80098a6:	e011      	b.n	80098cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	69b8      	ldr	r0, [r7, #24]
 80098ae:	f000 fce1 	bl	800a274 <xQueueReceive>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d009      	beq.n	80098cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80098be:	f06f 0301 	mvn.w	r3, #1
 80098c2:	61fb      	str	r3, [r7, #28]
 80098c4:	e002      	b.n	80098cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80098c6:	f06f 0302 	mvn.w	r3, #2
 80098ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80098cc:	69fb      	ldr	r3, [r7, #28]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a07      	ldr	r2, [pc, #28]	@ (8009908 <vApplicationGetIdleTaskMemory+0x2c>)
 80098ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4a06      	ldr	r2, [pc, #24]	@ (800990c <vApplicationGetIdleTaskMemory+0x30>)
 80098f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2280      	movs	r2, #128	@ 0x80
 80098f8:	601a      	str	r2, [r3, #0]
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	20002628 	.word	0x20002628
 800990c:	20002684 	.word	0x20002684

08009910 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4a07      	ldr	r2, [pc, #28]	@ (800993c <vApplicationGetTimerTaskMemory+0x2c>)
 8009920:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	4a06      	ldr	r2, [pc, #24]	@ (8009940 <vApplicationGetTimerTaskMemory+0x30>)
 8009926:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800992e:	601a      	str	r2, [r3, #0]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	20002884 	.word	0x20002884
 8009940:	200028e0 	.word	0x200028e0

08009944 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f103 0208 	add.w	r2, r3, #8
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f04f 32ff 	mov.w	r2, #4294967295
 800995c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f103 0208 	add.w	r2, r3, #8
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f103 0208 	add.w	r2, r3, #8
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800999e:	b480      	push	{r7}
 80099a0:	b085      	sub	sp, #20
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	601a      	str	r2, [r3, #0]
}
 80099da:	bf00      	nop
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fc:	d103      	bne.n	8009a06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	e00c      	b.n	8009a20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3308      	adds	r3, #8
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	e002      	b.n	8009a14 <vListInsert+0x2e>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d2f6      	bcs.n	8009a0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	601a      	str	r2, [r3, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	6892      	ldr	r2, [r2, #8]
 8009a6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	6852      	ldr	r2, [r2, #4]
 8009a78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d103      	bne.n	8009a8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	1e5a      	subs	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10b      	bne.n	8009ad8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	e7fd      	b.n	8009ad4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ad8:	f002 fd4e 	bl	800c578 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009ae8:	fb01 f303 	mul.w	r3, r1, r3
 8009aec:	441a      	add	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b0e:	fb01 f303 	mul.w	r3, r1, r3
 8009b12:	441a      	add	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	22ff      	movs	r2, #255	@ 0xff
 8009b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	22ff      	movs	r2, #255	@ 0xff
 8009b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d114      	bne.n	8009b58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d01a      	beq.n	8009b6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3310      	adds	r3, #16
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fcf2 	bl	800b524 <xTaskRemoveFromEventList>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d012      	beq.n	8009b6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b46:	4b0d      	ldr	r3, [pc, #52]	@ (8009b7c <xQueueGenericReset+0xd0>)
 8009b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	e009      	b.n	8009b6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3310      	adds	r3, #16
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff fef1 	bl	8009944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3324      	adds	r3, #36	@ 0x24
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7ff feec 	bl	8009944 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b6c:	f002 fd36 	bl	800c5dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b70:	2301      	movs	r3, #1
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08e      	sub	sp, #56	@ 0x38
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10b      	bne.n	8009bac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009ba6:	bf00      	nop
 8009ba8:	bf00      	nop
 8009baa:	e7fd      	b.n	8009ba8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	e7fd      	b.n	8009bc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <xQueueGenericCreateStatic+0x56>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <xQueueGenericCreateStatic+0x5a>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <xQueueGenericCreateStatic+0x5c>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10b      	bne.n	8009bf8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	623b      	str	r3, [r7, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	bf00      	nop
 8009bf6:	e7fd      	b.n	8009bf4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d102      	bne.n	8009c04 <xQueueGenericCreateStatic+0x84>
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <xQueueGenericCreateStatic+0x88>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <xQueueGenericCreateStatic+0x8a>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10b      	bne.n	8009c26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	61fb      	str	r3, [r7, #28]
}
 8009c20:	bf00      	nop
 8009c22:	bf00      	nop
 8009c24:	e7fd      	b.n	8009c22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c26:	2350      	movs	r3, #80	@ 0x50
 8009c28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b50      	cmp	r3, #80	@ 0x50
 8009c2e:	d00b      	beq.n	8009c48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	61bb      	str	r3, [r7, #24]
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00d      	beq.n	8009c70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	4613      	mov	r3, r2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	68b9      	ldr	r1, [r7, #8]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f840 	bl	8009cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3730      	adds	r7, #48	@ 0x30
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b08a      	sub	sp, #40	@ 0x28
 8009c7e:	af02      	add	r7, sp, #8
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	4613      	mov	r3, r2
 8009c86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10b      	bne.n	8009ca6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	613b      	str	r3, [r7, #16]
}
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
 8009ca4:	e7fd      	b.n	8009ca2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	fb02 f303 	mul.w	r3, r2, r3
 8009cae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	3350      	adds	r3, #80	@ 0x50
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f002 fd81 	bl	800c7bc <pvPortMalloc>
 8009cba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d011      	beq.n	8009ce6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	3350      	adds	r3, #80	@ 0x50
 8009cca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cd4:	79fa      	ldrb	r2, [r7, #7]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f805 	bl	8009cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3720      	adds	r7, #32
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d103      	bne.n	8009d0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	e002      	b.n	8009d12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d1e:	2101      	movs	r1, #1
 8009d20:	69b8      	ldr	r0, [r7, #24]
 8009d22:	f7ff fec3 	bl	8009aac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	78fa      	ldrb	r2, [r7, #3]
 8009d2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b08a      	sub	sp, #40	@ 0x28
 8009d3a:	af02      	add	r7, sp, #8
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	60b9      	str	r1, [r7, #8]
 8009d40:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10b      	bne.n	8009d60 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	61bb      	str	r3, [r7, #24]
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	e7fd      	b.n	8009d5c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d90b      	bls.n	8009d80 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	617b      	str	r3, [r7, #20]
}
 8009d7a:	bf00      	nop
 8009d7c:	bf00      	nop
 8009d7e:	e7fd      	b.n	8009d7c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009d80:	2302      	movs	r3, #2
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	2100      	movs	r1, #0
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f7ff fef8 	bl	8009b80 <xQueueGenericCreateStatic>
 8009d90:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009d9e:	69fb      	ldr	r3, [r7, #28]
	}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3720      	adds	r7, #32
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10b      	bne.n	8009dd0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	613b      	str	r3, [r7, #16]
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	e7fd      	b.n	8009dcc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d90b      	bls.n	8009df0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	60fb      	str	r3, [r7, #12]
}
 8009dea:	bf00      	nop
 8009dec:	bf00      	nop
 8009dee:	e7fd      	b.n	8009dec <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009df0:	2202      	movs	r2, #2
 8009df2:	2100      	movs	r1, #0
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ff40 	bl	8009c7a <xQueueGenericCreate>
 8009dfa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e08:	697b      	ldr	r3, [r7, #20]
	}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08e      	sub	sp, #56	@ 0x38
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e22:	2300      	movs	r3, #0
 8009e24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10b      	bne.n	8009e48 <xQueueGenericSend+0x34>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e42:	bf00      	nop
 8009e44:	bf00      	nop
 8009e46:	e7fd      	b.n	8009e44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d103      	bne.n	8009e56 <xQueueGenericSend+0x42>
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <xQueueGenericSend+0x46>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e000      	b.n	8009e5c <xQueueGenericSend+0x48>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10b      	bne.n	8009e78 <xQueueGenericSend+0x64>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	e7fd      	b.n	8009e74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d103      	bne.n	8009e86 <xQueueGenericSend+0x72>
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d101      	bne.n	8009e8a <xQueueGenericSend+0x76>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <xQueueGenericSend+0x78>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10b      	bne.n	8009ea8 <xQueueGenericSend+0x94>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	623b      	str	r3, [r7, #32]
}
 8009ea2:	bf00      	nop
 8009ea4:	bf00      	nop
 8009ea6:	e7fd      	b.n	8009ea4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ea8:	f001 fcfc 	bl	800b8a4 <xTaskGetSchedulerState>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d102      	bne.n	8009eb8 <xQueueGenericSend+0xa4>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <xQueueGenericSend+0xa8>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e000      	b.n	8009ebe <xQueueGenericSend+0xaa>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10b      	bne.n	8009eda <xQueueGenericSend+0xc6>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	61fb      	str	r3, [r7, #28]
}
 8009ed4:	bf00      	nop
 8009ed6:	bf00      	nop
 8009ed8:	e7fd      	b.n	8009ed6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009eda:	f002 fb4d 	bl	800c578 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d302      	bcc.n	8009ef0 <xQueueGenericSend+0xdc>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d129      	bne.n	8009f44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	68b9      	ldr	r1, [r7, #8]
 8009ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ef6:	f000 fc6d 	bl	800a7d4 <prvCopyDataToQueue>
 8009efa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d010      	beq.n	8009f26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f06:	3324      	adds	r3, #36	@ 0x24
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f001 fb0b 	bl	800b524 <xTaskRemoveFromEventList>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d013      	beq.n	8009f3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f14:	4b3f      	ldr	r3, [pc, #252]	@ (800a014 <xQueueGenericSend+0x200>)
 8009f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	e00a      	b.n	8009f3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d007      	beq.n	8009f3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f2c:	4b39      	ldr	r3, [pc, #228]	@ (800a014 <xQueueGenericSend+0x200>)
 8009f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f3c:	f002 fb4e 	bl	800c5dc <vPortExitCritical>
				return pdPASS;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e063      	b.n	800a00c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d103      	bne.n	8009f52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f4a:	f002 fb47 	bl	800c5dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e05c      	b.n	800a00c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f58:	f107 0314 	add.w	r3, r7, #20
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 fb45 	bl	800b5ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f62:	2301      	movs	r3, #1
 8009f64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f66:	f002 fb39 	bl	800c5dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f6a:	f001 f8b5 	bl	800b0d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f6e:	f002 fb03 	bl	800c578 <vPortEnterCritical>
 8009f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f78:	b25b      	sxtb	r3, r3
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	d103      	bne.n	8009f88 <xQueueGenericSend+0x174>
 8009f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f8e:	b25b      	sxtb	r3, r3
 8009f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f94:	d103      	bne.n	8009f9e <xQueueGenericSend+0x18a>
 8009f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f9e:	f002 fb1d 	bl	800c5dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fa2:	1d3a      	adds	r2, r7, #4
 8009fa4:	f107 0314 	add.w	r3, r7, #20
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f001 fb34 	bl	800b618 <xTaskCheckForTimeOut>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d124      	bne.n	800a000 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009fb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fb8:	f000 fd04 	bl	800a9c4 <prvIsQueueFull>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d018      	beq.n	8009ff4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	3310      	adds	r3, #16
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 fa58 	bl	800b480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fd2:	f000 fc8f 	bl	800a8f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fd6:	f001 f88d 	bl	800b0f4 <xTaskResumeAll>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f47f af7c 	bne.w	8009eda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009fe2:	4b0c      	ldr	r3, [pc, #48]	@ (800a014 <xQueueGenericSend+0x200>)
 8009fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	e772      	b.n	8009eda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ff6:	f000 fc7d 	bl	800a8f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ffa:	f001 f87b 	bl	800b0f4 <xTaskResumeAll>
 8009ffe:	e76c      	b.n	8009eda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a002:	f000 fc77 	bl	800a8f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a006:	f001 f875 	bl	800b0f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a00a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3738      	adds	r7, #56	@ 0x38
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	e000ed04 	.word	0xe000ed04

0800a018 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b090      	sub	sp, #64	@ 0x40
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10b      	bne.n	800a048 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a042:	bf00      	nop
 800a044:	bf00      	nop
 800a046:	e7fd      	b.n	800a044 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d103      	bne.n	800a056 <xQueueGenericSendFromISR+0x3e>
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <xQueueGenericSendFromISR+0x42>
 800a056:	2301      	movs	r3, #1
 800a058:	e000      	b.n	800a05c <xQueueGenericSendFromISR+0x44>
 800a05a:	2300      	movs	r3, #0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10b      	bne.n	800a078 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	e7fd      	b.n	800a074 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d103      	bne.n	800a086 <xQueueGenericSendFromISR+0x6e>
 800a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a082:	2b01      	cmp	r3, #1
 800a084:	d101      	bne.n	800a08a <xQueueGenericSendFromISR+0x72>
 800a086:	2301      	movs	r3, #1
 800a088:	e000      	b.n	800a08c <xQueueGenericSendFromISR+0x74>
 800a08a:	2300      	movs	r3, #0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10b      	bne.n	800a0a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	623b      	str	r3, [r7, #32]
}
 800a0a2:	bf00      	nop
 800a0a4:	bf00      	nop
 800a0a6:	e7fd      	b.n	800a0a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0a8:	f002 fb46 	bl	800c738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a0ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	61fa      	str	r2, [r7, #28]
 800a0c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d302      	bcc.n	800a0da <xQueueGenericSendFromISR+0xc2>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d12f      	bne.n	800a13a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a0f0:	f000 fb70 	bl	800a7d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fc:	d112      	bne.n	800a124 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a102:	2b00      	cmp	r3, #0
 800a104:	d016      	beq.n	800a134 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a108:	3324      	adds	r3, #36	@ 0x24
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 fa0a 	bl	800b524 <xTaskRemoveFromEventList>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00e      	beq.n	800a134 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	e007      	b.n	800a134 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a124:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a128:	3301      	adds	r3, #1
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	b25a      	sxtb	r2, r3
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a134:	2301      	movs	r3, #1
 800a136:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a138:	e001      	b.n	800a13e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a140:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a148:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3740      	adds	r7, #64	@ 0x40
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08e      	sub	sp, #56	@ 0x38
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10b      	bne.n	800a180 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	623b      	str	r3, [r7, #32]
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	e7fd      	b.n	800a17c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	61fb      	str	r3, [r7, #28]
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d103      	bne.n	800a1b0 <xQueueGiveFromISR+0x5c>
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <xQueueGiveFromISR+0x60>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e000      	b.n	800a1b6 <xQueueGiveFromISR+0x62>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10b      	bne.n	800a1d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	61bb      	str	r3, [r7, #24]
}
 800a1cc:	bf00      	nop
 800a1ce:	bf00      	nop
 800a1d0:	e7fd      	b.n	800a1ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1d2:	f002 fab1 	bl	800c738 <vPortValidateInterruptPriority>
	__asm volatile
 800a1d6:	f3ef 8211 	mrs	r2, BASEPRI
 800a1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	617a      	str	r2, [r7, #20]
 800a1ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a1ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d22b      	bcs.n	800a25a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a212:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a214:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21c:	d112      	bne.n	800a244 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a222:	2b00      	cmp	r3, #0
 800a224:	d016      	beq.n	800a254 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a228:	3324      	adds	r3, #36	@ 0x24
 800a22a:	4618      	mov	r0, r3
 800a22c:	f001 f97a 	bl	800b524 <xTaskRemoveFromEventList>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00e      	beq.n	800a254 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2201      	movs	r2, #1
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	e007      	b.n	800a254 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a248:	3301      	adds	r3, #1
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	b25a      	sxtb	r2, r3
 800a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a254:	2301      	movs	r3, #1
 800a256:	637b      	str	r3, [r7, #52]	@ 0x34
 800a258:	e001      	b.n	800a25e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a260:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f383 8811 	msr	BASEPRI, r3
}
 800a268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3738      	adds	r7, #56	@ 0x38
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08c      	sub	sp, #48	@ 0x30
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a280:	2300      	movs	r3, #0
 800a282:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10b      	bne.n	800a2a6 <xQueueReceive+0x32>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	623b      	str	r3, [r7, #32]
}
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	e7fd      	b.n	800a2a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d103      	bne.n	800a2b4 <xQueueReceive+0x40>
 800a2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <xQueueReceive+0x44>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e000      	b.n	800a2ba <xQueueReceive+0x46>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10b      	bne.n	800a2d6 <xQueueReceive+0x62>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	61fb      	str	r3, [r7, #28]
}
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
 800a2d4:	e7fd      	b.n	800a2d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2d6:	f001 fae5 	bl	800b8a4 <xTaskGetSchedulerState>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d102      	bne.n	800a2e6 <xQueueReceive+0x72>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <xQueueReceive+0x76>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e000      	b.n	800a2ec <xQueueReceive+0x78>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10b      	bne.n	800a308 <xQueueReceive+0x94>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	61bb      	str	r3, [r7, #24]
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a308:	f002 f936 	bl	800c578 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01f      	beq.n	800a358 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a318:	68b9      	ldr	r1, [r7, #8]
 800a31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a31c:	f000 fac4 	bl	800a8a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a322:	1e5a      	subs	r2, r3, #1
 800a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a326:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00f      	beq.n	800a350 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	3310      	adds	r3, #16
 800a334:	4618      	mov	r0, r3
 800a336:	f001 f8f5 	bl	800b524 <xTaskRemoveFromEventList>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d007      	beq.n	800a350 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a340:	4b3c      	ldr	r3, [pc, #240]	@ (800a434 <xQueueReceive+0x1c0>)
 800a342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a350:	f002 f944 	bl	800c5dc <vPortExitCritical>
				return pdPASS;
 800a354:	2301      	movs	r3, #1
 800a356:	e069      	b.n	800a42c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d103      	bne.n	800a366 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a35e:	f002 f93d 	bl	800c5dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a362:	2300      	movs	r3, #0
 800a364:	e062      	b.n	800a42c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d106      	bne.n	800a37a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a36c:	f107 0310 	add.w	r3, r7, #16
 800a370:	4618      	mov	r0, r3
 800a372:	f001 f93b 	bl	800b5ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a376:	2301      	movs	r3, #1
 800a378:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a37a:	f002 f92f 	bl	800c5dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a37e:	f000 feab 	bl	800b0d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a382:	f002 f8f9 	bl	800c578 <vPortEnterCritical>
 800a386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a38c:	b25b      	sxtb	r3, r3
 800a38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a392:	d103      	bne.n	800a39c <xQueueReceive+0x128>
 800a394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a396:	2200      	movs	r2, #0
 800a398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3a2:	b25b      	sxtb	r3, r3
 800a3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a8:	d103      	bne.n	800a3b2 <xQueueReceive+0x13e>
 800a3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3b2:	f002 f913 	bl	800c5dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3b6:	1d3a      	adds	r2, r7, #4
 800a3b8:	f107 0310 	add.w	r3, r7, #16
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 f92a 	bl	800b618 <xTaskCheckForTimeOut>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d123      	bne.n	800a412 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3cc:	f000 fae4 	bl	800a998 <prvIsQueueEmpty>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d017      	beq.n	800a406 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d8:	3324      	adds	r3, #36	@ 0x24
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f001 f84e 	bl	800b480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3e6:	f000 fa85 	bl	800a8f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3ea:	f000 fe83 	bl	800b0f4 <xTaskResumeAll>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d189      	bne.n	800a308 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	@ (800a434 <xQueueReceive+0x1c0>)
 800a3f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	e780      	b.n	800a308 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a408:	f000 fa74 	bl	800a8f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a40c:	f000 fe72 	bl	800b0f4 <xTaskResumeAll>
 800a410:	e77a      	b.n	800a308 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a414:	f000 fa6e 	bl	800a8f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a418:	f000 fe6c 	bl	800b0f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a41c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a41e:	f000 fabb 	bl	800a998 <prvIsQueueEmpty>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	f43f af6f 	beq.w	800a308 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a42a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3730      	adds	r7, #48	@ 0x30
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	e000ed04 	.word	0xe000ed04

0800a438 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08e      	sub	sp, #56	@ 0x38
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a442:	2300      	movs	r3, #0
 800a444:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a44a:	2300      	movs	r3, #0
 800a44c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10b      	bne.n	800a46c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	623b      	str	r3, [r7, #32]
}
 800a466:	bf00      	nop
 800a468:	bf00      	nop
 800a46a:	e7fd      	b.n	800a468 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	61fb      	str	r3, [r7, #28]
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a48c:	f001 fa0a 	bl	800b8a4 <xTaskGetSchedulerState>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <xQueueSemaphoreTake+0x64>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <xQueueSemaphoreTake+0x68>
 800a49c:	2301      	movs	r3, #1
 800a49e:	e000      	b.n	800a4a2 <xQueueSemaphoreTake+0x6a>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10b      	bne.n	800a4be <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	61bb      	str	r3, [r7, #24]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4be:	f002 f85b 	bl	800c578 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d024      	beq.n	800a518 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d0:	1e5a      	subs	r2, r3, #1
 800a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d104      	bne.n	800a4e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a4de:	f001 fb5b 	bl	800bb98 <pvTaskIncrementMutexHeldCount>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00f      	beq.n	800a510 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f2:	3310      	adds	r3, #16
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f001 f815 	bl	800b524 <xTaskRemoveFromEventList>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d007      	beq.n	800a510 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a500:	4b54      	ldr	r3, [pc, #336]	@ (800a654 <xQueueSemaphoreTake+0x21c>)
 800a502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a510:	f002 f864 	bl	800c5dc <vPortExitCritical>
				return pdPASS;
 800a514:	2301      	movs	r3, #1
 800a516:	e098      	b.n	800a64a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d112      	bne.n	800a544 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00b      	beq.n	800a53c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	617b      	str	r3, [r7, #20]
}
 800a536:	bf00      	nop
 800a538:	bf00      	nop
 800a53a:	e7fd      	b.n	800a538 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a53c:	f002 f84e 	bl	800c5dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a540:	2300      	movs	r3, #0
 800a542:	e082      	b.n	800a64a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a54a:	f107 030c 	add.w	r3, r7, #12
 800a54e:	4618      	mov	r0, r3
 800a550:	f001 f84c 	bl	800b5ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a554:	2301      	movs	r3, #1
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a558:	f002 f840 	bl	800c5dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a55c:	f000 fdbc 	bl	800b0d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a560:	f002 f80a 	bl	800c578 <vPortEnterCritical>
 800a564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a566:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a56a:	b25b      	sxtb	r3, r3
 800a56c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a570:	d103      	bne.n	800a57a <xQueueSemaphoreTake+0x142>
 800a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a580:	b25b      	sxtb	r3, r3
 800a582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a586:	d103      	bne.n	800a590 <xQueueSemaphoreTake+0x158>
 800a588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a590:	f002 f824 	bl	800c5dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a594:	463a      	mov	r2, r7
 800a596:	f107 030c 	add.w	r3, r7, #12
 800a59a:	4611      	mov	r1, r2
 800a59c:	4618      	mov	r0, r3
 800a59e:	f001 f83b 	bl	800b618 <xTaskCheckForTimeOut>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d132      	bne.n	800a60e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5aa:	f000 f9f5 	bl	800a998 <prvIsQueueEmpty>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d026      	beq.n	800a602 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d109      	bne.n	800a5d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a5bc:	f001 ffdc 	bl	800c578 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f001 f98b 	bl	800b8e0 <xTaskPriorityInherit>
 800a5ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a5cc:	f002 f806 	bl	800c5dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d2:	3324      	adds	r3, #36	@ 0x24
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 ff51 	bl	800b480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5e0:	f000 f988 	bl	800a8f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5e4:	f000 fd86 	bl	800b0f4 <xTaskResumeAll>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f47f af67 	bne.w	800a4be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a5f0:	4b18      	ldr	r3, [pc, #96]	@ (800a654 <xQueueSemaphoreTake+0x21c>)
 800a5f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5f6:	601a      	str	r2, [r3, #0]
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	e75d      	b.n	800a4be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a602:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a604:	f000 f976 	bl	800a8f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a608:	f000 fd74 	bl	800b0f4 <xTaskResumeAll>
 800a60c:	e757      	b.n	800a4be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a60e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a610:	f000 f970 	bl	800a8f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a614:	f000 fd6e 	bl	800b0f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a618:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a61a:	f000 f9bd 	bl	800a998 <prvIsQueueEmpty>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	f43f af4c 	beq.w	800a4be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00d      	beq.n	800a648 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a62c:	f001 ffa4 	bl	800c578 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a630:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a632:	f000 f8b7 	bl	800a7a4 <prvGetDisinheritPriorityAfterTimeout>
 800a636:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a63e:	4618      	mov	r0, r3
 800a640:	f001 fa26 	bl	800ba90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a644:	f001 ffca 	bl	800c5dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a648:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3738      	adds	r7, #56	@ 0x38
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	e000ed04 	.word	0xe000ed04

0800a658 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08e      	sub	sp, #56	@ 0x38
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10b      	bne.n	800a686 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	623b      	str	r3, [r7, #32]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d103      	bne.n	800a694 <xQueueReceiveFromISR+0x3c>
 800a68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <xQueueReceiveFromISR+0x40>
 800a694:	2301      	movs	r3, #1
 800a696:	e000      	b.n	800a69a <xQueueReceiveFromISR+0x42>
 800a698:	2300      	movs	r3, #0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10b      	bne.n	800a6b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	61fb      	str	r3, [r7, #28]
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	e7fd      	b.n	800a6b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6b6:	f002 f83f 	bl	800c738 <vPortValidateInterruptPriority>
	__asm volatile
 800a6ba:	f3ef 8211 	mrs	r2, BASEPRI
 800a6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	61ba      	str	r2, [r7, #24]
 800a6d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a6d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d02f      	beq.n	800a742 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6ec:	68b9      	ldr	r1, [r7, #8]
 800a6ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6f0:	f000 f8da 	bl	800a8a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	1e5a      	subs	r2, r3, #1
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a704:	d112      	bne.n	800a72c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d016      	beq.n	800a73c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a710:	3310      	adds	r3, #16
 800a712:	4618      	mov	r0, r3
 800a714:	f000 ff06 	bl	800b524 <xTaskRemoveFromEventList>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00e      	beq.n	800a73c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00b      	beq.n	800a73c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	e007      	b.n	800a73c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a72c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a730:	3301      	adds	r3, #1
 800a732:	b2db      	uxtb	r3, r3
 800a734:	b25a      	sxtb	r2, r3
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a73c:	2301      	movs	r3, #1
 800a73e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a740:	e001      	b.n	800a746 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a742:	2300      	movs	r3, #0
 800a744:	637b      	str	r3, [r7, #52]	@ 0x34
 800a746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a748:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f383 8811 	msr	BASEPRI, r3
}
 800a750:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a754:	4618      	mov	r0, r3
 800a756:	3738      	adds	r7, #56	@ 0x38
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10b      	bne.n	800a786 <vQueueDelete+0x2a>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60bb      	str	r3, [r7, #8]
}
 800a780:	bf00      	nop
 800a782:	bf00      	nop
 800a784:	e7fd      	b.n	800a782 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 f95e 	bl	800aa48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a792:	2b00      	cmp	r3, #0
 800a794:	d102      	bne.n	800a79c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f002 f8de 	bl	800c958 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a79c:	bf00      	nop
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d006      	beq.n	800a7c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	e001      	b.n	800a7c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10d      	bne.n	800a80e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d14d      	bne.n	800a896 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f001 f8d6 	bl	800b9b0 <xTaskPriorityDisinherit>
 800a804:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	609a      	str	r2, [r3, #8]
 800a80c:	e043      	b.n	800a896 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d119      	bne.n	800a848 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6858      	ldr	r0, [r3, #4]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a81c:	461a      	mov	r2, r3
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	f003 fdf1 	bl	800e406 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82c:	441a      	add	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d32b      	bcc.n	800a896 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	605a      	str	r2, [r3, #4]
 800a846:	e026      	b.n	800a896 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68d8      	ldr	r0, [r3, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a850:	461a      	mov	r2, r3
 800a852:	68b9      	ldr	r1, [r7, #8]
 800a854:	f003 fdd7 	bl	800e406 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a860:	425b      	negs	r3, r3
 800a862:	441a      	add	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	429a      	cmp	r2, r3
 800a872:	d207      	bcs.n	800a884 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87c:	425b      	negs	r3, r3
 800a87e:	441a      	add	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d105      	bne.n	800a896 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	3b01      	subs	r3, #1
 800a894:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a89e:	697b      	ldr	r3, [r7, #20]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d018      	beq.n	800a8ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68da      	ldr	r2, [r3, #12]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c2:	441a      	add	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68da      	ldr	r2, [r3, #12]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d303      	bcc.n	800a8dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68d9      	ldr	r1, [r3, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6838      	ldr	r0, [r7, #0]
 800a8e8:	f003 fd8d 	bl	800e406 <memcpy>
	}
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8fc:	f001 fe3c 	bl	800c578 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a906:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a908:	e011      	b.n	800a92e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d012      	beq.n	800a938 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	3324      	adds	r3, #36	@ 0x24
 800a916:	4618      	mov	r0, r3
 800a918:	f000 fe04 	bl	800b524 <xTaskRemoveFromEventList>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a922:	f000 fedd 	bl	800b6e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a926:	7bfb      	ldrb	r3, [r7, #15]
 800a928:	3b01      	subs	r3, #1
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a932:	2b00      	cmp	r3, #0
 800a934:	dce9      	bgt.n	800a90a <prvUnlockQueue+0x16>
 800a936:	e000      	b.n	800a93a <prvUnlockQueue+0x46>
					break;
 800a938:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	22ff      	movs	r2, #255	@ 0xff
 800a93e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a942:	f001 fe4b 	bl	800c5dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a946:	f001 fe17 	bl	800c578 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a950:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a952:	e011      	b.n	800a978 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d012      	beq.n	800a982 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3310      	adds	r3, #16
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fddf 	bl	800b524 <xTaskRemoveFromEventList>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a96c:	f000 feb8 	bl	800b6e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	3b01      	subs	r3, #1
 800a974:	b2db      	uxtb	r3, r3
 800a976:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dce9      	bgt.n	800a954 <prvUnlockQueue+0x60>
 800a980:	e000      	b.n	800a984 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a982:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	22ff      	movs	r2, #255	@ 0xff
 800a988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a98c:	f001 fe26 	bl	800c5dc <vPortExitCritical>
}
 800a990:	bf00      	nop
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9a0:	f001 fdea 	bl	800c578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d102      	bne.n	800a9b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	e001      	b.n	800a9b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9b6:	f001 fe11 	bl	800c5dc <vPortExitCritical>

	return xReturn;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9cc:	f001 fdd4 	bl	800c578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d102      	bne.n	800a9e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	e001      	b.n	800a9e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9e6:	f001 fdf9 	bl	800c5dc <vPortExitCritical>

	return xReturn;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60fb      	str	r3, [r7, #12]
 800aa02:	e014      	b.n	800aa2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa04:	4a0f      	ldr	r2, [pc, #60]	@ (800aa44 <vQueueAddToRegistry+0x50>)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10b      	bne.n	800aa28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa10:	490c      	ldr	r1, [pc, #48]	@ (800aa44 <vQueueAddToRegistry+0x50>)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa1a:	4a0a      	ldr	r2, [pc, #40]	@ (800aa44 <vQueueAddToRegistry+0x50>)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	4413      	add	r3, r2
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa26:	e006      	b.n	800aa36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b07      	cmp	r3, #7
 800aa32:	d9e7      	bls.n	800aa04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	20002ce0 	.word	0x20002ce0

0800aa48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e016      	b.n	800aa84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aa56:	4a10      	ldr	r2, [pc, #64]	@ (800aa98 <vQueueUnregisterQueue+0x50>)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	4413      	add	r3, r2
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d10b      	bne.n	800aa7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aa66:	4a0c      	ldr	r2, [pc, #48]	@ (800aa98 <vQueueUnregisterQueue+0x50>)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aa70:	4a09      	ldr	r2, [pc, #36]	@ (800aa98 <vQueueUnregisterQueue+0x50>)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	00db      	lsls	r3, r3, #3
 800aa76:	4413      	add	r3, r2
 800aa78:	2200      	movs	r2, #0
 800aa7a:	605a      	str	r2, [r3, #4]
				break;
 800aa7c:	e006      	b.n	800aa8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	3301      	adds	r3, #1
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b07      	cmp	r3, #7
 800aa88:	d9e5      	bls.n	800aa56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aa8a:	bf00      	nop
 800aa8c:	bf00      	nop
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	20002ce0 	.word	0x20002ce0

0800aa9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aaac:	f001 fd64 	bl	800c578 <vPortEnterCritical>
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aab6:	b25b      	sxtb	r3, r3
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabc:	d103      	bne.n	800aac6 <vQueueWaitForMessageRestricted+0x2a>
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aacc:	b25b      	sxtb	r3, r3
 800aace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad2:	d103      	bne.n	800aadc <vQueueWaitForMessageRestricted+0x40>
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aadc:	f001 fd7e 	bl	800c5dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	3324      	adds	r3, #36	@ 0x24
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	68b9      	ldr	r1, [r7, #8]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fceb 	bl	800b4cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aaf6:	6978      	ldr	r0, [r7, #20]
 800aaf8:	f7ff fefc 	bl	800a8f4 <prvUnlockQueue>
	}
 800aafc:	bf00      	nop
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08e      	sub	sp, #56	@ 0x38
 800ab08:	af04      	add	r7, sp, #16
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10b      	bne.n	800ab30 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	623b      	str	r3, [r7, #32]
}
 800ab2a:	bf00      	nop
 800ab2c:	bf00      	nop
 800ab2e:	e7fd      	b.n	800ab2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10b      	bne.n	800ab4e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	61fb      	str	r3, [r7, #28]
}
 800ab48:	bf00      	nop
 800ab4a:	bf00      	nop
 800ab4c:	e7fd      	b.n	800ab4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab4e:	235c      	movs	r3, #92	@ 0x5c
 800ab50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab56:	d00b      	beq.n	800ab70 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	61bb      	str	r3, [r7, #24]
}
 800ab6a:	bf00      	nop
 800ab6c:	bf00      	nop
 800ab6e:	e7fd      	b.n	800ab6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01e      	beq.n	800abb6 <xTaskCreateStatic+0xb2>
 800ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01b      	beq.n	800abb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab90:	2300      	movs	r3, #0
 800ab92:	9303      	str	r3, [sp, #12]
 800ab94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab96:	9302      	str	r3, [sp, #8]
 800ab98:	f107 0314 	add.w	r3, r7, #20
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 f850 	bl	800ac4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abb0:	f000 f8de 	bl	800ad70 <prvAddNewTaskToReadyList>
 800abb4:	e001      	b.n	800abba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abba:	697b      	ldr	r3, [r7, #20]
	}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3728      	adds	r7, #40	@ 0x28
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08c      	sub	sp, #48	@ 0x30
 800abc8:	af04      	add	r7, sp, #16
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	4613      	mov	r3, r2
 800abd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abd4:	88fb      	ldrh	r3, [r7, #6]
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4618      	mov	r0, r3
 800abda:	f001 fdef 	bl	800c7bc <pvPortMalloc>
 800abde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00e      	beq.n	800ac04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abe6:	205c      	movs	r0, #92	@ 0x5c
 800abe8:	f001 fde8 	bl	800c7bc <pvPortMalloc>
 800abec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	631a      	str	r2, [r3, #48]	@ 0x30
 800abfa:	e005      	b.n	800ac08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abfc:	6978      	ldr	r0, [r7, #20]
 800abfe:	f001 feab 	bl	800c958 <vPortFree>
 800ac02:	e001      	b.n	800ac08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d017      	beq.n	800ac3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac16:	88fa      	ldrh	r2, [r7, #6]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9303      	str	r3, [sp, #12]
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	9302      	str	r3, [sp, #8]
 800ac20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 f80e 	bl	800ac4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac32:	69f8      	ldr	r0, [r7, #28]
 800ac34:	f000 f89c 	bl	800ad70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	61bb      	str	r3, [r7, #24]
 800ac3c:	e002      	b.n	800ac44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac44:	69bb      	ldr	r3, [r7, #24]
	}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3720      	adds	r7, #32
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b088      	sub	sp, #32
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	60b9      	str	r1, [r7, #8]
 800ac58:	607a      	str	r2, [r7, #4]
 800ac5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	461a      	mov	r2, r3
 800ac66:	21a5      	movs	r1, #165	@ 0xa5
 800ac68:	f003 fab6 	bl	800e1d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac76:	3b01      	subs	r3, #1
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	f023 0307 	bic.w	r3, r3, #7
 800ac84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00b      	beq.n	800aca8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	617b      	str	r3, [r7, #20]
}
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
 800aca6:	e7fd      	b.n	800aca4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01f      	beq.n	800acee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acae:	2300      	movs	r3, #0
 800acb0:	61fb      	str	r3, [r7, #28]
 800acb2:	e012      	b.n	800acda <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	4413      	add	r3, r2
 800acba:	7819      	ldrb	r1, [r3, #0]
 800acbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	4413      	add	r3, r2
 800acc2:	3334      	adds	r3, #52	@ 0x34
 800acc4:	460a      	mov	r2, r1
 800acc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	3301      	adds	r3, #1
 800acd8:	61fb      	str	r3, [r7, #28]
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	2b0f      	cmp	r3, #15
 800acde:	d9e9      	bls.n	800acb4 <prvInitialiseNewTask+0x66>
 800ace0:	e000      	b.n	800ace4 <prvInitialiseNewTask+0x96>
			{
				break;
 800ace2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ace4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800acec:	e003      	b.n	800acf6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf8:	2b37      	cmp	r3, #55	@ 0x37
 800acfa:	d901      	bls.n	800ad00 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acfc:	2337      	movs	r3, #55	@ 0x37
 800acfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad04:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad0a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	2200      	movs	r2, #0
 800ad10:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	3304      	adds	r3, #4
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe fe34 	bl	8009984 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1e:	3318      	adds	r3, #24
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe fe2f 	bl	8009984 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad3a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3e:	2200      	movs	r2, #0
 800ad40:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	68f9      	ldr	r1, [r7, #12]
 800ad4e:	69b8      	ldr	r0, [r7, #24]
 800ad50:	f001 fae4 	bl	800c31c <pxPortInitialiseStack>
 800ad54:	4602      	mov	r2, r0
 800ad56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad66:	bf00      	nop
 800ad68:	3720      	adds	r7, #32
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
	...

0800ad70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad78:	f001 fbfe 	bl	800c578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad7c:	4b2d      	ldr	r3, [pc, #180]	@ (800ae34 <prvAddNewTaskToReadyList+0xc4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3301      	adds	r3, #1
 800ad82:	4a2c      	ldr	r2, [pc, #176]	@ (800ae34 <prvAddNewTaskToReadyList+0xc4>)
 800ad84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad86:	4b2c      	ldr	r3, [pc, #176]	@ (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad8e:	4a2a      	ldr	r2, [pc, #168]	@ (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad94:	4b27      	ldr	r3, [pc, #156]	@ (800ae34 <prvAddNewTaskToReadyList+0xc4>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d110      	bne.n	800adbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad9c:	f000 fcc4 	bl	800b728 <prvInitialiseTaskLists>
 800ada0:	e00d      	b.n	800adbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ada2:	4b26      	ldr	r3, [pc, #152]	@ (800ae3c <prvAddNewTaskToReadyList+0xcc>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d109      	bne.n	800adbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adaa:	4b23      	ldr	r3, [pc, #140]	@ (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d802      	bhi.n	800adbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800adb8:	4a1f      	ldr	r2, [pc, #124]	@ (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adbe:	4b20      	ldr	r3, [pc, #128]	@ (800ae40 <prvAddNewTaskToReadyList+0xd0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	4a1e      	ldr	r2, [pc, #120]	@ (800ae40 <prvAddNewTaskToReadyList+0xd0>)
 800adc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adc8:	4b1d      	ldr	r3, [pc, #116]	@ (800ae40 <prvAddNewTaskToReadyList+0xd0>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add4:	4b1b      	ldr	r3, [pc, #108]	@ (800ae44 <prvAddNewTaskToReadyList+0xd4>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	429a      	cmp	r2, r3
 800adda:	d903      	bls.n	800ade4 <prvAddNewTaskToReadyList+0x74>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade0:	4a18      	ldr	r2, [pc, #96]	@ (800ae44 <prvAddNewTaskToReadyList+0xd4>)
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade8:	4613      	mov	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4a15      	ldr	r2, [pc, #84]	@ (800ae48 <prvAddNewTaskToReadyList+0xd8>)
 800adf2:	441a      	add	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f7fe fdcf 	bl	800999e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae00:	f001 fbec 	bl	800c5dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae04:	4b0d      	ldr	r3, [pc, #52]	@ (800ae3c <prvAddNewTaskToReadyList+0xcc>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00e      	beq.n	800ae2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d207      	bcs.n	800ae2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae4c <prvAddNewTaskToReadyList+0xdc>)
 800ae1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae2a:	bf00      	nop
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	200031f4 	.word	0x200031f4
 800ae38:	20002d20 	.word	0x20002d20
 800ae3c:	20003200 	.word	0x20003200
 800ae40:	20003210 	.word	0x20003210
 800ae44:	200031fc 	.word	0x200031fc
 800ae48:	20002d24 	.word	0x20002d24
 800ae4c:	e000ed04 	.word	0xe000ed04

0800ae50 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ae58:	f001 fb8e 	bl	800c578 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d102      	bne.n	800ae68 <vTaskDelete+0x18>
 800ae62:	4b2d      	ldr	r3, [pc, #180]	@ (800af18 <vTaskDelete+0xc8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	e000      	b.n	800ae6a <vTaskDelete+0x1a>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3304      	adds	r3, #4
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fe fdf1 	bl	8009a58 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d004      	beq.n	800ae88 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3318      	adds	r3, #24
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fe fde8 	bl	8009a58 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ae88:	4b24      	ldr	r3, [pc, #144]	@ (800af1c <vTaskDelete+0xcc>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	4a23      	ldr	r2, [pc, #140]	@ (800af1c <vTaskDelete+0xcc>)
 800ae90:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ae92:	4b21      	ldr	r3, [pc, #132]	@ (800af18 <vTaskDelete+0xc8>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d10b      	bne.n	800aeb4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	481f      	ldr	r0, [pc, #124]	@ (800af20 <vTaskDelete+0xd0>)
 800aea4:	f7fe fd7b 	bl	800999e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800aea8:	4b1e      	ldr	r3, [pc, #120]	@ (800af24 <vTaskDelete+0xd4>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3301      	adds	r3, #1
 800aeae:	4a1d      	ldr	r2, [pc, #116]	@ (800af24 <vTaskDelete+0xd4>)
 800aeb0:	6013      	str	r3, [r2, #0]
 800aeb2:	e009      	b.n	800aec8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800aeb4:	4b1c      	ldr	r3, [pc, #112]	@ (800af28 <vTaskDelete+0xd8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	4a1b      	ldr	r2, [pc, #108]	@ (800af28 <vTaskDelete+0xd8>)
 800aebc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f000 fca0 	bl	800b804 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800aec4:	f000 fcce 	bl	800b864 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800aec8:	f001 fb88 	bl	800c5dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800aecc:	4b17      	ldr	r3, [pc, #92]	@ (800af2c <vTaskDelete+0xdc>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d01c      	beq.n	800af0e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800aed4:	4b10      	ldr	r3, [pc, #64]	@ (800af18 <vTaskDelete+0xc8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d117      	bne.n	800af0e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800aede:	4b14      	ldr	r3, [pc, #80]	@ (800af30 <vTaskDelete+0xe0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00b      	beq.n	800aefe <vTaskDelete+0xae>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	60bb      	str	r3, [r7, #8]
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	e7fd      	b.n	800aefa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800aefe:	4b0d      	ldr	r3, [pc, #52]	@ (800af34 <vTaskDelete+0xe4>)
 800af00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af0e:	bf00      	nop
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	20002d20 	.word	0x20002d20
 800af1c:	20003210 	.word	0x20003210
 800af20:	200031c8 	.word	0x200031c8
 800af24:	200031dc 	.word	0x200031dc
 800af28:	200031f4 	.word	0x200031f4
 800af2c:	20003200 	.word	0x20003200
 800af30:	2000321c 	.word	0x2000321c
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <eTaskGetState+0x2a>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	60bb      	str	r3, [r7, #8]
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	e7fd      	b.n	800af5e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800af62:	4b24      	ldr	r3, [pc, #144]	@ (800aff4 <eTaskGetState+0xbc>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	69ba      	ldr	r2, [r7, #24]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d102      	bne.n	800af72 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800af6c:	2300      	movs	r3, #0
 800af6e:	77fb      	strb	r3, [r7, #31]
 800af70:	e03a      	b.n	800afe8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800af72:	f001 fb01 	bl	800c578 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800af7c:	4b1e      	ldr	r3, [pc, #120]	@ (800aff8 <eTaskGetState+0xc0>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800af82:	4b1e      	ldr	r3, [pc, #120]	@ (800affc <eTaskGetState+0xc4>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800af88:	f001 fb28 	bl	800c5dc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	429a      	cmp	r2, r3
 800af92:	d003      	beq.n	800af9c <eTaskGetState+0x64>
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d102      	bne.n	800afa2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800af9c:	2302      	movs	r3, #2
 800af9e:	77fb      	strb	r3, [r7, #31]
 800afa0:	e022      	b.n	800afe8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	4a16      	ldr	r2, [pc, #88]	@ (800b000 <eTaskGetState+0xc8>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d112      	bne.n	800afd0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10b      	bne.n	800afca <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d102      	bne.n	800afc4 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800afbe:	2302      	movs	r3, #2
 800afc0:	77fb      	strb	r3, [r7, #31]
 800afc2:	e011      	b.n	800afe8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800afc4:	2303      	movs	r3, #3
 800afc6:	77fb      	strb	r3, [r7, #31]
 800afc8:	e00e      	b.n	800afe8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800afca:	2302      	movs	r3, #2
 800afcc:	77fb      	strb	r3, [r7, #31]
 800afce:	e00b      	b.n	800afe8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	4a0c      	ldr	r2, [pc, #48]	@ (800b004 <eTaskGetState+0xcc>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d002      	beq.n	800afde <eTaskGetState+0xa6>
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800afde:	2304      	movs	r3, #4
 800afe0:	77fb      	strb	r3, [r7, #31]
 800afe2:	e001      	b.n	800afe8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800afe4:	2301      	movs	r3, #1
 800afe6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800afe8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800afea:	4618      	mov	r0, r3
 800afec:	3720      	adds	r7, #32
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20002d20 	.word	0x20002d20
 800aff8:	200031ac 	.word	0x200031ac
 800affc:	200031b0 	.word	0x200031b0
 800b000:	200031e0 	.word	0x200031e0
 800b004:	200031c8 	.word	0x200031c8

0800b008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08a      	sub	sp, #40	@ 0x28
 800b00c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b016:	463a      	mov	r2, r7
 800b018:	1d39      	adds	r1, r7, #4
 800b01a:	f107 0308 	add.w	r3, r7, #8
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fe fc5c 	bl	80098dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	9202      	str	r2, [sp, #8]
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	2300      	movs	r3, #0
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	2300      	movs	r3, #0
 800b034:	460a      	mov	r2, r1
 800b036:	4922      	ldr	r1, [pc, #136]	@ (800b0c0 <vTaskStartScheduler+0xb8>)
 800b038:	4822      	ldr	r0, [pc, #136]	@ (800b0c4 <vTaskStartScheduler+0xbc>)
 800b03a:	f7ff fd63 	bl	800ab04 <xTaskCreateStatic>
 800b03e:	4603      	mov	r3, r0
 800b040:	4a21      	ldr	r2, [pc, #132]	@ (800b0c8 <vTaskStartScheduler+0xc0>)
 800b042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b044:	4b20      	ldr	r3, [pc, #128]	@ (800b0c8 <vTaskStartScheduler+0xc0>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b04c:	2301      	movs	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e001      	b.n	800b056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b052:	2300      	movs	r3, #0
 800b054:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d102      	bne.n	800b062 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b05c:	f000 fe04 	bl	800bc68 <xTimerCreateTimerTask>
 800b060:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d116      	bne.n	800b096 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	613b      	str	r3, [r7, #16]
}
 800b07a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b07c:	4b13      	ldr	r3, [pc, #76]	@ (800b0cc <vTaskStartScheduler+0xc4>)
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b084:	4b12      	ldr	r3, [pc, #72]	@ (800b0d0 <vTaskStartScheduler+0xc8>)
 800b086:	2201      	movs	r2, #1
 800b088:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b08a:	4b12      	ldr	r3, [pc, #72]	@ (800b0d4 <vTaskStartScheduler+0xcc>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b090:	f001 f9ce 	bl	800c430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b094:	e00f      	b.n	800b0b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09c:	d10b      	bne.n	800b0b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	60fb      	str	r3, [r7, #12]
}
 800b0b0:	bf00      	nop
 800b0b2:	bf00      	nop
 800b0b4:	e7fd      	b.n	800b0b2 <vTaskStartScheduler+0xaa>
}
 800b0b6:	bf00      	nop
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	0801213c 	.word	0x0801213c
 800b0c4:	0800b6f9 	.word	0x0800b6f9
 800b0c8:	20003218 	.word	0x20003218
 800b0cc:	20003214 	.word	0x20003214
 800b0d0:	20003200 	.word	0x20003200
 800b0d4:	200031f8 	.word	0x200031f8

0800b0d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b0dc:	4b04      	ldr	r3, [pc, #16]	@ (800b0f0 <vTaskSuspendAll+0x18>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	4a03      	ldr	r2, [pc, #12]	@ (800b0f0 <vTaskSuspendAll+0x18>)
 800b0e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b0e6:	bf00      	nop
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	2000321c 	.word	0x2000321c

0800b0f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b102:	4b42      	ldr	r3, [pc, #264]	@ (800b20c <xTaskResumeAll+0x118>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10b      	bne.n	800b122 <xTaskResumeAll+0x2e>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	603b      	str	r3, [r7, #0]
}
 800b11c:	bf00      	nop
 800b11e:	bf00      	nop
 800b120:	e7fd      	b.n	800b11e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b122:	f001 fa29 	bl	800c578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b126:	4b39      	ldr	r3, [pc, #228]	@ (800b20c <xTaskResumeAll+0x118>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	4a37      	ldr	r2, [pc, #220]	@ (800b20c <xTaskResumeAll+0x118>)
 800b12e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b130:	4b36      	ldr	r3, [pc, #216]	@ (800b20c <xTaskResumeAll+0x118>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d162      	bne.n	800b1fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b138:	4b35      	ldr	r3, [pc, #212]	@ (800b210 <xTaskResumeAll+0x11c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d05e      	beq.n	800b1fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b140:	e02f      	b.n	800b1a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b142:	4b34      	ldr	r3, [pc, #208]	@ (800b214 <xTaskResumeAll+0x120>)
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3318      	adds	r3, #24
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fc82 	bl	8009a58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3304      	adds	r3, #4
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe fc7d 	bl	8009a58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b162:	4b2d      	ldr	r3, [pc, #180]	@ (800b218 <xTaskResumeAll+0x124>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d903      	bls.n	800b172 <xTaskResumeAll+0x7e>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16e:	4a2a      	ldr	r2, [pc, #168]	@ (800b218 <xTaskResumeAll+0x124>)
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4a27      	ldr	r2, [pc, #156]	@ (800b21c <xTaskResumeAll+0x128>)
 800b180:	441a      	add	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3304      	adds	r3, #4
 800b186:	4619      	mov	r1, r3
 800b188:	4610      	mov	r0, r2
 800b18a:	f7fe fc08 	bl	800999e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b192:	4b23      	ldr	r3, [pc, #140]	@ (800b220 <xTaskResumeAll+0x12c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b198:	429a      	cmp	r2, r3
 800b19a:	d302      	bcc.n	800b1a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b19c:	4b21      	ldr	r3, [pc, #132]	@ (800b224 <xTaskResumeAll+0x130>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b214 <xTaskResumeAll+0x120>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1cb      	bne.n	800b142 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1b0:	f000 fb58 	bl	800b864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b1b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b228 <xTaskResumeAll+0x134>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d010      	beq.n	800b1e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1c0:	f000 f846 	bl	800b250 <xTaskIncrementTick>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b1ca:	4b16      	ldr	r3, [pc, #88]	@ (800b224 <xTaskResumeAll+0x130>)
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f1      	bne.n	800b1c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b1dc:	4b12      	ldr	r3, [pc, #72]	@ (800b228 <xTaskResumeAll+0x134>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1e2:	4b10      	ldr	r3, [pc, #64]	@ (800b224 <xTaskResumeAll+0x130>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d009      	beq.n	800b1fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b22c <xTaskResumeAll+0x138>)
 800b1f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1fe:	f001 f9ed 	bl	800c5dc <vPortExitCritical>

	return xAlreadyYielded;
 800b202:	68bb      	ldr	r3, [r7, #8]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	2000321c 	.word	0x2000321c
 800b210:	200031f4 	.word	0x200031f4
 800b214:	200031b4 	.word	0x200031b4
 800b218:	200031fc 	.word	0x200031fc
 800b21c:	20002d24 	.word	0x20002d24
 800b220:	20002d20 	.word	0x20002d20
 800b224:	20003208 	.word	0x20003208
 800b228:	20003204 	.word	0x20003204
 800b22c:	e000ed04 	.word	0xe000ed04

0800b230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b236:	4b05      	ldr	r3, [pc, #20]	@ (800b24c <xTaskGetTickCount+0x1c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b23c:	687b      	ldr	r3, [r7, #4]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	200031f8 	.word	0x200031f8

0800b250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b25a:	4b4f      	ldr	r3, [pc, #316]	@ (800b398 <xTaskIncrementTick+0x148>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f040 8090 	bne.w	800b384 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b264:	4b4d      	ldr	r3, [pc, #308]	@ (800b39c <xTaskIncrementTick+0x14c>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3301      	adds	r3, #1
 800b26a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b26c:	4a4b      	ldr	r2, [pc, #300]	@ (800b39c <xTaskIncrementTick+0x14c>)
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d121      	bne.n	800b2bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b278:	4b49      	ldr	r3, [pc, #292]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00b      	beq.n	800b29a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	603b      	str	r3, [r7, #0]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <xTaskIncrementTick+0x46>
 800b29a:	4b41      	ldr	r3, [pc, #260]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	4b40      	ldr	r3, [pc, #256]	@ (800b3a4 <xTaskIncrementTick+0x154>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a3e      	ldr	r2, [pc, #248]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	4a3e      	ldr	r2, [pc, #248]	@ (800b3a4 <xTaskIncrementTick+0x154>)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b3a8 <xTaskIncrementTick+0x158>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	4a3c      	ldr	r2, [pc, #240]	@ (800b3a8 <xTaskIncrementTick+0x158>)
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	f000 fad4 	bl	800b864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2bc:	4b3b      	ldr	r3, [pc, #236]	@ (800b3ac <xTaskIncrementTick+0x15c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d349      	bcc.n	800b35a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2c6:	4b36      	ldr	r3, [pc, #216]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d104      	bne.n	800b2da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d0:	4b36      	ldr	r3, [pc, #216]	@ (800b3ac <xTaskIncrementTick+0x15c>)
 800b2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d6:	601a      	str	r2, [r3, #0]
					break;
 800b2d8:	e03f      	b.n	800b35a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2da:	4b31      	ldr	r3, [pc, #196]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d203      	bcs.n	800b2fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2f2:	4a2e      	ldr	r2, [pc, #184]	@ (800b3ac <xTaskIncrementTick+0x15c>)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2f8:	e02f      	b.n	800b35a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fbaa 	bl	8009a58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d004      	beq.n	800b316 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	3318      	adds	r3, #24
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe fba1 	bl	8009a58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31a:	4b25      	ldr	r3, [pc, #148]	@ (800b3b0 <xTaskIncrementTick+0x160>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d903      	bls.n	800b32a <xTaskIncrementTick+0xda>
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b326:	4a22      	ldr	r2, [pc, #136]	@ (800b3b0 <xTaskIncrementTick+0x160>)
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32e:	4613      	mov	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4a1f      	ldr	r2, [pc, #124]	@ (800b3b4 <xTaskIncrementTick+0x164>)
 800b338:	441a      	add	r2, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	3304      	adds	r3, #4
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f7fe fb2c 	bl	800999e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34a:	4b1b      	ldr	r3, [pc, #108]	@ (800b3b8 <xTaskIncrementTick+0x168>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	429a      	cmp	r2, r3
 800b352:	d3b8      	bcc.n	800b2c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b354:	2301      	movs	r3, #1
 800b356:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b358:	e7b5      	b.n	800b2c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b35a:	4b17      	ldr	r3, [pc, #92]	@ (800b3b8 <xTaskIncrementTick+0x168>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b360:	4914      	ldr	r1, [pc, #80]	@ (800b3b4 <xTaskIncrementTick+0x164>)
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	440b      	add	r3, r1
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d901      	bls.n	800b376 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b372:	2301      	movs	r3, #1
 800b374:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b376:	4b11      	ldr	r3, [pc, #68]	@ (800b3bc <xTaskIncrementTick+0x16c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d007      	beq.n	800b38e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b37e:	2301      	movs	r3, #1
 800b380:	617b      	str	r3, [r7, #20]
 800b382:	e004      	b.n	800b38e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b384:	4b0e      	ldr	r3, [pc, #56]	@ (800b3c0 <xTaskIncrementTick+0x170>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3301      	adds	r3, #1
 800b38a:	4a0d      	ldr	r2, [pc, #52]	@ (800b3c0 <xTaskIncrementTick+0x170>)
 800b38c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b38e:	697b      	ldr	r3, [r7, #20]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3718      	adds	r7, #24
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	2000321c 	.word	0x2000321c
 800b39c:	200031f8 	.word	0x200031f8
 800b3a0:	200031ac 	.word	0x200031ac
 800b3a4:	200031b0 	.word	0x200031b0
 800b3a8:	2000320c 	.word	0x2000320c
 800b3ac:	20003214 	.word	0x20003214
 800b3b0:	200031fc 	.word	0x200031fc
 800b3b4:	20002d24 	.word	0x20002d24
 800b3b8:	20002d20 	.word	0x20002d20
 800b3bc:	20003208 	.word	0x20003208
 800b3c0:	20003204 	.word	0x20003204

0800b3c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3ca:	4b28      	ldr	r3, [pc, #160]	@ (800b46c <vTaskSwitchContext+0xa8>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3d2:	4b27      	ldr	r3, [pc, #156]	@ (800b470 <vTaskSwitchContext+0xac>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3d8:	e042      	b.n	800b460 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b3da:	4b25      	ldr	r3, [pc, #148]	@ (800b470 <vTaskSwitchContext+0xac>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e0:	4b24      	ldr	r3, [pc, #144]	@ (800b474 <vTaskSwitchContext+0xb0>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	e011      	b.n	800b40c <vTaskSwitchContext+0x48>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10b      	bne.n	800b406 <vTaskSwitchContext+0x42>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	607b      	str	r3, [r7, #4]
}
 800b400:	bf00      	nop
 800b402:	bf00      	nop
 800b404:	e7fd      	b.n	800b402 <vTaskSwitchContext+0x3e>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3b01      	subs	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	491a      	ldr	r1, [pc, #104]	@ (800b478 <vTaskSwitchContext+0xb4>)
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	440b      	add	r3, r1
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0e3      	beq.n	800b3e8 <vTaskSwitchContext+0x24>
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4613      	mov	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4a13      	ldr	r2, [pc, #76]	@ (800b478 <vTaskSwitchContext+0xb4>)
 800b42c:	4413      	add	r3, r2
 800b42e:	60bb      	str	r3, [r7, #8]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	605a      	str	r2, [r3, #4]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	3308      	adds	r3, #8
 800b442:	429a      	cmp	r2, r3
 800b444:	d104      	bne.n	800b450 <vTaskSwitchContext+0x8c>
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	605a      	str	r2, [r3, #4]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	4a09      	ldr	r2, [pc, #36]	@ (800b47c <vTaskSwitchContext+0xb8>)
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	4a06      	ldr	r2, [pc, #24]	@ (800b474 <vTaskSwitchContext+0xb0>)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6013      	str	r3, [r2, #0]
}
 800b460:	bf00      	nop
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	2000321c 	.word	0x2000321c
 800b470:	20003208 	.word	0x20003208
 800b474:	200031fc 	.word	0x200031fc
 800b478:	20002d24 	.word	0x20002d24
 800b47c:	20002d20 	.word	0x20002d20

0800b480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10b      	bne.n	800b4a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	60fb      	str	r3, [r7, #12]
}
 800b4a2:	bf00      	nop
 800b4a4:	bf00      	nop
 800b4a6:	e7fd      	b.n	800b4a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4a8:	4b07      	ldr	r3, [pc, #28]	@ (800b4c8 <vTaskPlaceOnEventList+0x48>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3318      	adds	r3, #24
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7fe fa98 	bl	80099e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	6838      	ldr	r0, [r7, #0]
 800b4ba:	f000 fb81 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
}
 800b4be:	bf00      	nop
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20002d20 	.word	0x20002d20

0800b4cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10b      	bne.n	800b4f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	617b      	str	r3, [r7, #20]
}
 800b4f0:	bf00      	nop
 800b4f2:	bf00      	nop
 800b4f4:	e7fd      	b.n	800b4f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b520 <vTaskPlaceOnEventListRestricted+0x54>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3318      	adds	r3, #24
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7fe fa4d 	bl	800999e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b50a:	f04f 33ff 	mov.w	r3, #4294967295
 800b50e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b510:	6879      	ldr	r1, [r7, #4]
 800b512:	68b8      	ldr	r0, [r7, #8]
 800b514:	f000 fb54 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
	}
 800b518:	bf00      	nop
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	20002d20 	.word	0x20002d20

0800b524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10b      	bne.n	800b552 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	60fb      	str	r3, [r7, #12]
}
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
 800b550:	e7fd      	b.n	800b54e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	3318      	adds	r3, #24
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe fa7e 	bl	8009a58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b55c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d4 <xTaskRemoveFromEventList+0xb0>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d11d      	bne.n	800b5a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	3304      	adds	r3, #4
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fa75 	bl	8009a58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b572:	4b19      	ldr	r3, [pc, #100]	@ (800b5d8 <xTaskRemoveFromEventList+0xb4>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	429a      	cmp	r2, r3
 800b578:	d903      	bls.n	800b582 <xTaskRemoveFromEventList+0x5e>
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b57e:	4a16      	ldr	r2, [pc, #88]	@ (800b5d8 <xTaskRemoveFromEventList+0xb4>)
 800b580:	6013      	str	r3, [r2, #0]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b586:	4613      	mov	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4413      	add	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4a13      	ldr	r2, [pc, #76]	@ (800b5dc <xTaskRemoveFromEventList+0xb8>)
 800b590:	441a      	add	r2, r3
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	3304      	adds	r3, #4
 800b596:	4619      	mov	r1, r3
 800b598:	4610      	mov	r0, r2
 800b59a:	f7fe fa00 	bl	800999e <vListInsertEnd>
 800b59e:	e005      	b.n	800b5ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	3318      	adds	r3, #24
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	480e      	ldr	r0, [pc, #56]	@ (800b5e0 <xTaskRemoveFromEventList+0xbc>)
 800b5a8:	f7fe f9f9 	bl	800999e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e4 <xTaskRemoveFromEventList+0xc0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d905      	bls.n	800b5c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5be:	4b0a      	ldr	r3, [pc, #40]	@ (800b5e8 <xTaskRemoveFromEventList+0xc4>)
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	e001      	b.n	800b5ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5ca:	697b      	ldr	r3, [r7, #20]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3718      	adds	r7, #24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	2000321c 	.word	0x2000321c
 800b5d8:	200031fc 	.word	0x200031fc
 800b5dc:	20002d24 	.word	0x20002d24
 800b5e0:	200031b4 	.word	0x200031b4
 800b5e4:	20002d20 	.word	0x20002d20
 800b5e8:	20003208 	.word	0x20003208

0800b5ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5f4:	4b06      	ldr	r3, [pc, #24]	@ (800b610 <vTaskInternalSetTimeOutState+0x24>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5fc:	4b05      	ldr	r3, [pc, #20]	@ (800b614 <vTaskInternalSetTimeOutState+0x28>)
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	605a      	str	r2, [r3, #4]
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	2000320c 	.word	0x2000320c
 800b614:	200031f8 	.word	0x200031f8

0800b618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b088      	sub	sp, #32
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10b      	bne.n	800b640 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	613b      	str	r3, [r7, #16]
}
 800b63a:	bf00      	nop
 800b63c:	bf00      	nop
 800b63e:	e7fd      	b.n	800b63c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10b      	bne.n	800b65e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	60fb      	str	r3, [r7, #12]
}
 800b658:	bf00      	nop
 800b65a:	bf00      	nop
 800b65c:	e7fd      	b.n	800b65a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b65e:	f000 ff8b 	bl	800c578 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b662:	4b1d      	ldr	r3, [pc, #116]	@ (800b6d8 <xTaskCheckForTimeOut+0xc0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	69ba      	ldr	r2, [r7, #24]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d102      	bne.n	800b682 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	61fb      	str	r3, [r7, #28]
 800b680:	e023      	b.n	800b6ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	4b15      	ldr	r3, [pc, #84]	@ (800b6dc <xTaskCheckForTimeOut+0xc4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d007      	beq.n	800b69e <xTaskCheckForTimeOut+0x86>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	69ba      	ldr	r2, [r7, #24]
 800b694:	429a      	cmp	r2, r3
 800b696:	d302      	bcc.n	800b69e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b698:	2301      	movs	r3, #1
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	e015      	b.n	800b6ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d20b      	bcs.n	800b6c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	1ad2      	subs	r2, r2, r3
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff ff99 	bl	800b5ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	61fb      	str	r3, [r7, #28]
 800b6be:	e004      	b.n	800b6ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6ca:	f000 ff87 	bl	800c5dc <vPortExitCritical>

	return xReturn;
 800b6ce:	69fb      	ldr	r3, [r7, #28]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3720      	adds	r7, #32
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	200031f8 	.word	0x200031f8
 800b6dc:	2000320c 	.word	0x2000320c

0800b6e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6e4:	4b03      	ldr	r3, [pc, #12]	@ (800b6f4 <vTaskMissedYield+0x14>)
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	20003208 	.word	0x20003208

0800b6f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b700:	f000 f852 	bl	800b7a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b704:	4b06      	ldr	r3, [pc, #24]	@ (800b720 <prvIdleTask+0x28>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d9f9      	bls.n	800b700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b70c:	4b05      	ldr	r3, [pc, #20]	@ (800b724 <prvIdleTask+0x2c>)
 800b70e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b71c:	e7f0      	b.n	800b700 <prvIdleTask+0x8>
 800b71e:	bf00      	nop
 800b720:	20002d24 	.word	0x20002d24
 800b724:	e000ed04 	.word	0xe000ed04

0800b728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b72e:	2300      	movs	r3, #0
 800b730:	607b      	str	r3, [r7, #4]
 800b732:	e00c      	b.n	800b74e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4a12      	ldr	r2, [pc, #72]	@ (800b788 <prvInitialiseTaskLists+0x60>)
 800b740:	4413      	add	r3, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe f8fe 	bl	8009944 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3301      	adds	r3, #1
 800b74c:	607b      	str	r3, [r7, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b37      	cmp	r3, #55	@ 0x37
 800b752:	d9ef      	bls.n	800b734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b754:	480d      	ldr	r0, [pc, #52]	@ (800b78c <prvInitialiseTaskLists+0x64>)
 800b756:	f7fe f8f5 	bl	8009944 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b75a:	480d      	ldr	r0, [pc, #52]	@ (800b790 <prvInitialiseTaskLists+0x68>)
 800b75c:	f7fe f8f2 	bl	8009944 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b760:	480c      	ldr	r0, [pc, #48]	@ (800b794 <prvInitialiseTaskLists+0x6c>)
 800b762:	f7fe f8ef 	bl	8009944 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b766:	480c      	ldr	r0, [pc, #48]	@ (800b798 <prvInitialiseTaskLists+0x70>)
 800b768:	f7fe f8ec 	bl	8009944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b76c:	480b      	ldr	r0, [pc, #44]	@ (800b79c <prvInitialiseTaskLists+0x74>)
 800b76e:	f7fe f8e9 	bl	8009944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b772:	4b0b      	ldr	r3, [pc, #44]	@ (800b7a0 <prvInitialiseTaskLists+0x78>)
 800b774:	4a05      	ldr	r2, [pc, #20]	@ (800b78c <prvInitialiseTaskLists+0x64>)
 800b776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b778:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a4 <prvInitialiseTaskLists+0x7c>)
 800b77a:	4a05      	ldr	r2, [pc, #20]	@ (800b790 <prvInitialiseTaskLists+0x68>)
 800b77c:	601a      	str	r2, [r3, #0]
}
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	20002d24 	.word	0x20002d24
 800b78c:	20003184 	.word	0x20003184
 800b790:	20003198 	.word	0x20003198
 800b794:	200031b4 	.word	0x200031b4
 800b798:	200031c8 	.word	0x200031c8
 800b79c:	200031e0 	.word	0x200031e0
 800b7a0:	200031ac 	.word	0x200031ac
 800b7a4:	200031b0 	.word	0x200031b0

0800b7a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7ae:	e019      	b.n	800b7e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7b0:	f000 fee2 	bl	800c578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b4:	4b10      	ldr	r3, [pc, #64]	@ (800b7f8 <prvCheckTasksWaitingTermination+0x50>)
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe f949 	bl	8009a58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7fc <prvCheckTasksWaitingTermination+0x54>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	4a0b      	ldr	r2, [pc, #44]	@ (800b7fc <prvCheckTasksWaitingTermination+0x54>)
 800b7ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	4a0a      	ldr	r2, [pc, #40]	@ (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7da:	f000 feff 	bl	800c5dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f810 	bl	800b804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7e4:	4b06      	ldr	r3, [pc, #24]	@ (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e1      	bne.n	800b7b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	200031c8 	.word	0x200031c8
 800b7fc:	200031f4 	.word	0x200031f4
 800b800:	200031dc 	.word	0x200031dc

0800b804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b812:	2b00      	cmp	r3, #0
 800b814:	d108      	bne.n	800b828 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b81a:	4618      	mov	r0, r3
 800b81c:	f001 f89c 	bl	800c958 <vPortFree>
				vPortFree( pxTCB );
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 f899 	bl	800c958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b826:	e019      	b.n	800b85c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d103      	bne.n	800b83a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 f890 	bl	800c958 <vPortFree>
	}
 800b838:	e010      	b.n	800b85c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b840:	2b02      	cmp	r3, #2
 800b842:	d00b      	beq.n	800b85c <prvDeleteTCB+0x58>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	60fb      	str	r3, [r7, #12]
}
 800b856:	bf00      	nop
 800b858:	bf00      	nop
 800b85a:	e7fd      	b.n	800b858 <prvDeleteTCB+0x54>
	}
 800b85c:	bf00      	nop
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b86a:	4b0c      	ldr	r3, [pc, #48]	@ (800b89c <prvResetNextTaskUnblockTime+0x38>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d104      	bne.n	800b87e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b874:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b876:	f04f 32ff 	mov.w	r2, #4294967295
 800b87a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b87c:	e008      	b.n	800b890 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b87e:	4b07      	ldr	r3, [pc, #28]	@ (800b89c <prvResetNextTaskUnblockTime+0x38>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	4a04      	ldr	r2, [pc, #16]	@ (800b8a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b88e:	6013      	str	r3, [r2, #0]
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	200031ac 	.word	0x200031ac
 800b8a0:	20003214 	.word	0x20003214

0800b8a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d8 <xTaskGetSchedulerState+0x34>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d102      	bne.n	800b8b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	607b      	str	r3, [r7, #4]
 800b8b6:	e008      	b.n	800b8ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8b8:	4b08      	ldr	r3, [pc, #32]	@ (800b8dc <xTaskGetSchedulerState+0x38>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d102      	bne.n	800b8c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	607b      	str	r3, [r7, #4]
 800b8c4:	e001      	b.n	800b8ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8ca:	687b      	ldr	r3, [r7, #4]
	}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	20003200 	.word	0x20003200
 800b8dc:	2000321c 	.word	0x2000321c

0800b8e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d051      	beq.n	800b99a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8fa:	4b2a      	ldr	r3, [pc, #168]	@ (800b9a4 <xTaskPriorityInherit+0xc4>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b900:	429a      	cmp	r2, r3
 800b902:	d241      	bcs.n	800b988 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	db06      	blt.n	800b91a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b90c:	4b25      	ldr	r3, [pc, #148]	@ (800b9a4 <xTaskPriorityInherit+0xc4>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b912:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	6959      	ldr	r1, [r3, #20]
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b922:	4613      	mov	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4a1f      	ldr	r2, [pc, #124]	@ (800b9a8 <xTaskPriorityInherit+0xc8>)
 800b92c:	4413      	add	r3, r2
 800b92e:	4299      	cmp	r1, r3
 800b930:	d122      	bne.n	800b978 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	3304      	adds	r3, #4
 800b936:	4618      	mov	r0, r3
 800b938:	f7fe f88e 	bl	8009a58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b93c:	4b19      	ldr	r3, [pc, #100]	@ (800b9a4 <xTaskPriorityInherit+0xc4>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94a:	4b18      	ldr	r3, [pc, #96]	@ (800b9ac <xTaskPriorityInherit+0xcc>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d903      	bls.n	800b95a <xTaskPriorityInherit+0x7a>
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b956:	4a15      	ldr	r2, [pc, #84]	@ (800b9ac <xTaskPriorityInherit+0xcc>)
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b95e:	4613      	mov	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4a10      	ldr	r2, [pc, #64]	@ (800b9a8 <xTaskPriorityInherit+0xc8>)
 800b968:	441a      	add	r2, r3
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f7fe f814 	bl	800999e <vListInsertEnd>
 800b976:	e004      	b.n	800b982 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b978:	4b0a      	ldr	r3, [pc, #40]	@ (800b9a4 <xTaskPriorityInherit+0xc4>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	60fb      	str	r3, [r7, #12]
 800b986:	e008      	b.n	800b99a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b98c:	4b05      	ldr	r3, [pc, #20]	@ (800b9a4 <xTaskPriorityInherit+0xc4>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b992:	429a      	cmp	r2, r3
 800b994:	d201      	bcs.n	800b99a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b996:	2301      	movs	r3, #1
 800b998:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b99a:	68fb      	ldr	r3, [r7, #12]
	}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20002d20 	.word	0x20002d20
 800b9a8:	20002d24 	.word	0x20002d24
 800b9ac:	200031fc 	.word	0x200031fc

0800b9b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d058      	beq.n	800ba78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9c6:	4b2f      	ldr	r3, [pc, #188]	@ (800ba84 <xTaskPriorityDisinherit+0xd4>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d00b      	beq.n	800b9e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	60fb      	str	r3, [r7, #12]
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	e7fd      	b.n	800b9e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10b      	bne.n	800ba08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	60bb      	str	r3, [r7, #8]
}
 800ba02:	bf00      	nop
 800ba04:	bf00      	nop
 800ba06:	e7fd      	b.n	800ba04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba0c:	1e5a      	subs	r2, r3, #1
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d02c      	beq.n	800ba78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d128      	bne.n	800ba78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe f814 	bl	8009a58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba48:	4b0f      	ldr	r3, [pc, #60]	@ (800ba88 <xTaskPriorityDisinherit+0xd8>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d903      	bls.n	800ba58 <xTaskPriorityDisinherit+0xa8>
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba54:	4a0c      	ldr	r2, [pc, #48]	@ (800ba88 <xTaskPriorityDisinherit+0xd8>)
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4a09      	ldr	r2, [pc, #36]	@ (800ba8c <xTaskPriorityDisinherit+0xdc>)
 800ba66:	441a      	add	r2, r3
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4610      	mov	r0, r2
 800ba70:	f7fd ff95 	bl	800999e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba74:	2301      	movs	r3, #1
 800ba76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba78:	697b      	ldr	r3, [r7, #20]
	}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20002d20 	.word	0x20002d20
 800ba88:	200031fc 	.word	0x200031fc
 800ba8c:	20002d24 	.word	0x20002d24

0800ba90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d06c      	beq.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10b      	bne.n	800bac8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	60fb      	str	r3, [r7, #12]
}
 800bac2:	bf00      	nop
 800bac4:	bf00      	nop
 800bac6:	e7fd      	b.n	800bac4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d902      	bls.n	800bad8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	e002      	b.n	800bade <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800badc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae2:	69fa      	ldr	r2, [r7, #28]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d04c      	beq.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baec:	697a      	ldr	r2, [r7, #20]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d147      	bne.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800baf2:	4b26      	ldr	r3, [pc, #152]	@ (800bb8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	69ba      	ldr	r2, [r7, #24]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d10b      	bne.n	800bb14 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	60bb      	str	r3, [r7, #8]
}
 800bb0e:	bf00      	nop
 800bb10:	bf00      	nop
 800bb12:	e7fd      	b.n	800bb10 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	69fa      	ldr	r2, [r7, #28]
 800bb1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	db04      	blt.n	800bb32 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	6959      	ldr	r1, [r3, #20]
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4a13      	ldr	r2, [pc, #76]	@ (800bb90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb42:	4413      	add	r3, r2
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d11c      	bne.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fd ff83 	bl	8009a58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb56:	4b0f      	ldr	r3, [pc, #60]	@ (800bb94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d903      	bls.n	800bb66 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb62:	4a0c      	ldr	r2, [pc, #48]	@ (800bb94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4a07      	ldr	r2, [pc, #28]	@ (800bb90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb74:	441a      	add	r2, r3
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f7fd ff0e 	bl	800999e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb82:	bf00      	nop
 800bb84:	3720      	adds	r7, #32
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20002d20 	.word	0x20002d20
 800bb90:	20002d24 	.word	0x20002d24
 800bb94:	200031fc 	.word	0x200031fc

0800bb98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb98:	b480      	push	{r7}
 800bb9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb9c:	4b07      	ldr	r3, [pc, #28]	@ (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bba4:	4b05      	ldr	r3, [pc, #20]	@ (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbaa:	3201      	adds	r2, #1
 800bbac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bbae:	4b03      	ldr	r3, [pc, #12]	@ (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
	}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	20002d20 	.word	0x20002d20

0800bbc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbca:	4b21      	ldr	r3, [pc, #132]	@ (800bc50 <prvAddCurrentTaskToDelayedList+0x90>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbd0:	4b20      	ldr	r3, [pc, #128]	@ (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fd ff3e 	bl	8009a58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe2:	d10a      	bne.n	800bbfa <prvAddCurrentTaskToDelayedList+0x3a>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbea:	4b1a      	ldr	r3, [pc, #104]	@ (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4819      	ldr	r0, [pc, #100]	@ (800bc58 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbf4:	f7fd fed3 	bl	800999e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbf8:	e026      	b.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc02:	4b14      	ldr	r3, [pc, #80]	@ (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d209      	bcs.n	800bc26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc12:	4b12      	ldr	r3, [pc, #72]	@ (800bc5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	4b0f      	ldr	r3, [pc, #60]	@ (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f7fd fee1 	bl	80099e6 <vListInsert>
}
 800bc24:	e010      	b.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc26:	4b0e      	ldr	r3, [pc, #56]	@ (800bc60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4619      	mov	r1, r3
 800bc32:	4610      	mov	r0, r2
 800bc34:	f7fd fed7 	bl	80099e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc38:	4b0a      	ldr	r3, [pc, #40]	@ (800bc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d202      	bcs.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc42:	4a08      	ldr	r2, [pc, #32]	@ (800bc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	6013      	str	r3, [r2, #0]
}
 800bc48:	bf00      	nop
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	200031f8 	.word	0x200031f8
 800bc54:	20002d20 	.word	0x20002d20
 800bc58:	200031e0 	.word	0x200031e0
 800bc5c:	200031b0 	.word	0x200031b0
 800bc60:	200031ac 	.word	0x200031ac
 800bc64:	20003214 	.word	0x20003214

0800bc68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08a      	sub	sp, #40	@ 0x28
 800bc6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc72:	f000 fb13 	bl	800c29c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc76:	4b1d      	ldr	r3, [pc, #116]	@ (800bcec <xTimerCreateTimerTask+0x84>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d021      	beq.n	800bcc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc86:	1d3a      	adds	r2, r7, #4
 800bc88:	f107 0108 	add.w	r1, r7, #8
 800bc8c:	f107 030c 	add.w	r3, r7, #12
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7fd fe3d 	bl	8009910 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc96:	6879      	ldr	r1, [r7, #4]
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	9202      	str	r2, [sp, #8]
 800bc9e:	9301      	str	r3, [sp, #4]
 800bca0:	2302      	movs	r3, #2
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	2300      	movs	r3, #0
 800bca6:	460a      	mov	r2, r1
 800bca8:	4911      	ldr	r1, [pc, #68]	@ (800bcf0 <xTimerCreateTimerTask+0x88>)
 800bcaa:	4812      	ldr	r0, [pc, #72]	@ (800bcf4 <xTimerCreateTimerTask+0x8c>)
 800bcac:	f7fe ff2a 	bl	800ab04 <xTaskCreateStatic>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	4a11      	ldr	r2, [pc, #68]	@ (800bcf8 <xTimerCreateTimerTask+0x90>)
 800bcb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcb6:	4b10      	ldr	r3, [pc, #64]	@ (800bcf8 <xTimerCreateTimerTask+0x90>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10b      	bne.n	800bce0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	613b      	str	r3, [r7, #16]
}
 800bcda:	bf00      	nop
 800bcdc:	bf00      	nop
 800bcde:	e7fd      	b.n	800bcdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bce0:	697b      	ldr	r3, [r7, #20]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20003250 	.word	0x20003250
 800bcf0:	08012144 	.word	0x08012144
 800bcf4:	0800be35 	.word	0x0800be35
 800bcf8:	20003254 	.word	0x20003254

0800bcfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b08a      	sub	sp, #40	@ 0x28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
 800bd08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10b      	bne.n	800bd2c <xTimerGenericCommand+0x30>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	623b      	str	r3, [r7, #32]
}
 800bd26:	bf00      	nop
 800bd28:	bf00      	nop
 800bd2a:	e7fd      	b.n	800bd28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd2c:	4b19      	ldr	r3, [pc, #100]	@ (800bd94 <xTimerGenericCommand+0x98>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d02a      	beq.n	800bd8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	dc18      	bgt.n	800bd78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd46:	f7ff fdad 	bl	800b8a4 <xTaskGetSchedulerState>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d109      	bne.n	800bd64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd50:	4b10      	ldr	r3, [pc, #64]	@ (800bd94 <xTimerGenericCommand+0x98>)
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	f107 0110 	add.w	r1, r7, #16
 800bd58:	2300      	movs	r3, #0
 800bd5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd5c:	f7fe f85a 	bl	8009e14 <xQueueGenericSend>
 800bd60:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd62:	e012      	b.n	800bd8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd64:	4b0b      	ldr	r3, [pc, #44]	@ (800bd94 <xTimerGenericCommand+0x98>)
 800bd66:	6818      	ldr	r0, [r3, #0]
 800bd68:	f107 0110 	add.w	r1, r7, #16
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f7fe f850 	bl	8009e14 <xQueueGenericSend>
 800bd74:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd76:	e008      	b.n	800bd8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd78:	4b06      	ldr	r3, [pc, #24]	@ (800bd94 <xTimerGenericCommand+0x98>)
 800bd7a:	6818      	ldr	r0, [r3, #0]
 800bd7c:	f107 0110 	add.w	r1, r7, #16
 800bd80:	2300      	movs	r3, #0
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	f7fe f948 	bl	800a018 <xQueueGenericSendFromISR>
 800bd88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3728      	adds	r7, #40	@ 0x28
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	20003250 	.word	0x20003250

0800bd98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af02      	add	r7, sp, #8
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda2:	4b23      	ldr	r3, [pc, #140]	@ (800be30 <prvProcessExpiredTimer+0x98>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fd fe51 	bl	8009a58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdbc:	f003 0304 	and.w	r3, r3, #4
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d023      	beq.n	800be0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	699a      	ldr	r2, [r3, #24]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	18d1      	adds	r1, r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	6978      	ldr	r0, [r7, #20]
 800bdd2:	f000 f8d5 	bl	800bf80 <prvInsertTimerInActiveList>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d020      	beq.n	800be1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bddc:	2300      	movs	r3, #0
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	2300      	movs	r3, #0
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	2100      	movs	r1, #0
 800bde6:	6978      	ldr	r0, [r7, #20]
 800bde8:	f7ff ff88 	bl	800bcfc <xTimerGenericCommand>
 800bdec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d114      	bne.n	800be1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60fb      	str	r3, [r7, #12]
}
 800be06:	bf00      	nop
 800be08:	bf00      	nop
 800be0a:	e7fd      	b.n	800be08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be12:	f023 0301 	bic.w	r3, r3, #1
 800be16:	b2da      	uxtb	r2, r3
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	6978      	ldr	r0, [r7, #20]
 800be24:	4798      	blx	r3
}
 800be26:	bf00      	nop
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	20003248 	.word	0x20003248

0800be34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be3c:	f107 0308 	add.w	r3, r7, #8
 800be40:	4618      	mov	r0, r3
 800be42:	f000 f859 	bl	800bef8 <prvGetNextExpireTime>
 800be46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	4619      	mov	r1, r3
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f000 f805 	bl	800be5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be52:	f000 f8d7 	bl	800c004 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be56:	bf00      	nop
 800be58:	e7f0      	b.n	800be3c <prvTimerTask+0x8>
	...

0800be5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be66:	f7ff f937 	bl	800b0d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be6a:	f107 0308 	add.w	r3, r7, #8
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 f866 	bl	800bf40 <prvSampleTimeNow>
 800be74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d130      	bne.n	800bede <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <prvProcessTimerOrBlockTask+0x3c>
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	429a      	cmp	r2, r3
 800be88:	d806      	bhi.n	800be98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be8a:	f7ff f933 	bl	800b0f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be8e:	68f9      	ldr	r1, [r7, #12]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff ff81 	bl	800bd98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be96:	e024      	b.n	800bee2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d008      	beq.n	800beb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be9e:	4b13      	ldr	r3, [pc, #76]	@ (800beec <prvProcessTimerOrBlockTask+0x90>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <prvProcessTimerOrBlockTask+0x50>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e000      	b.n	800beae <prvProcessTimerOrBlockTask+0x52>
 800beac:	2300      	movs	r3, #0
 800beae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800beb0:	4b0f      	ldr	r3, [pc, #60]	@ (800bef0 <prvProcessTimerOrBlockTask+0x94>)
 800beb2:	6818      	ldr	r0, [r3, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4619      	mov	r1, r3
 800bebe:	f7fe fded 	bl	800aa9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bec2:	f7ff f917 	bl	800b0f4 <xTaskResumeAll>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10a      	bne.n	800bee2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800becc:	4b09      	ldr	r3, [pc, #36]	@ (800bef4 <prvProcessTimerOrBlockTask+0x98>)
 800bece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	f3bf 8f6f 	isb	sy
}
 800bedc:	e001      	b.n	800bee2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bede:	f7ff f909 	bl	800b0f4 <xTaskResumeAll>
}
 800bee2:	bf00      	nop
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	2000324c 	.word	0x2000324c
 800bef0:	20003250 	.word	0x20003250
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf00:	4b0e      	ldr	r3, [pc, #56]	@ (800bf3c <prvGetNextExpireTime+0x44>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <prvGetNextExpireTime+0x16>
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	e000      	b.n	800bf10 <prvGetNextExpireTime+0x18>
 800bf0e:	2200      	movs	r2, #0
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d105      	bne.n	800bf28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf1c:	4b07      	ldr	r3, [pc, #28]	@ (800bf3c <prvGetNextExpireTime+0x44>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	e001      	b.n	800bf2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	20003248 	.word	0x20003248

0800bf40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf48:	f7ff f972 	bl	800b230 <xTaskGetTickCount>
 800bf4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf4e:	4b0b      	ldr	r3, [pc, #44]	@ (800bf7c <prvSampleTimeNow+0x3c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d205      	bcs.n	800bf64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf58:	f000 f93a 	bl	800c1d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	e002      	b.n	800bf6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf6a:	4a04      	ldr	r2, [pc, #16]	@ (800bf7c <prvSampleTimeNow+0x3c>)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf70:	68fb      	ldr	r3, [r7, #12]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20003258 	.word	0x20003258

0800bf80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
 800bf8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d812      	bhi.n	800bfcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	1ad2      	subs	r2, r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	699b      	ldr	r3, [r3, #24]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d302      	bcc.n	800bfba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	617b      	str	r3, [r7, #20]
 800bfb8:	e01b      	b.n	800bff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bfba:	4b10      	ldr	r3, [pc, #64]	@ (800bffc <prvInsertTimerInActiveList+0x7c>)
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	f7fd fd0e 	bl	80099e6 <vListInsert>
 800bfca:	e012      	b.n	800bff2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d206      	bcs.n	800bfe2 <prvInsertTimerInActiveList+0x62>
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d302      	bcc.n	800bfe2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	617b      	str	r3, [r7, #20]
 800bfe0:	e007      	b.n	800bff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfe2:	4b07      	ldr	r3, [pc, #28]	@ (800c000 <prvInsertTimerInActiveList+0x80>)
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	4619      	mov	r1, r3
 800bfec:	4610      	mov	r0, r2
 800bfee:	f7fd fcfa 	bl	80099e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bff2:	697b      	ldr	r3, [r7, #20]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	2000324c 	.word	0x2000324c
 800c000:	20003248 	.word	0x20003248

0800c004 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08e      	sub	sp, #56	@ 0x38
 800c008:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c00a:	e0ce      	b.n	800c1aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	da19      	bge.n	800c046 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c012:	1d3b      	adds	r3, r7, #4
 800c014:	3304      	adds	r3, #4
 800c016:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10b      	bne.n	800c036 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	61fb      	str	r3, [r7, #28]
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	e7fd      	b.n	800c032 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c03c:	6850      	ldr	r0, [r2, #4]
 800c03e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c040:	6892      	ldr	r2, [r2, #8]
 800c042:	4611      	mov	r1, r2
 800c044:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f2c0 80ae 	blt.w	800c1aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d004      	beq.n	800c064 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05c:	3304      	adds	r3, #4
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fd fcfa 	bl	8009a58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c064:	463b      	mov	r3, r7
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff ff6a 	bl	800bf40 <prvSampleTimeNow>
 800c06c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b09      	cmp	r3, #9
 800c072:	f200 8097 	bhi.w	800c1a4 <prvProcessReceivedCommands+0x1a0>
 800c076:	a201      	add	r2, pc, #4	@ (adr r2, 800c07c <prvProcessReceivedCommands+0x78>)
 800c078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07c:	0800c0a5 	.word	0x0800c0a5
 800c080:	0800c0a5 	.word	0x0800c0a5
 800c084:	0800c0a5 	.word	0x0800c0a5
 800c088:	0800c11b 	.word	0x0800c11b
 800c08c:	0800c12f 	.word	0x0800c12f
 800c090:	0800c17b 	.word	0x0800c17b
 800c094:	0800c0a5 	.word	0x0800c0a5
 800c098:	0800c0a5 	.word	0x0800c0a5
 800c09c:	0800c11b 	.word	0x0800c11b
 800c0a0:	0800c12f 	.word	0x0800c12f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	18d1      	adds	r1, r2, r3
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0c4:	f7ff ff5c 	bl	800bf80 <prvInsertTimerInActiveList>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d06c      	beq.n	800c1a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0dc:	f003 0304 	and.w	r3, r3, #4
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d061      	beq.n	800c1a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	441a      	add	r2, r3
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0f6:	f7ff fe01 	bl	800bcfc <xTimerGenericCommand>
 800c0fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d152      	bne.n	800c1a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	61bb      	str	r3, [r7, #24]
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	e7fd      	b.n	800c116 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c120:	f023 0301 	bic.w	r3, r3, #1
 800c124:	b2da      	uxtb	r2, r3
 800c126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c128:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c12c:	e03d      	b.n	800c1aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c134:	f043 0301 	orr.w	r3, r3, #1
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c13c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c144:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10b      	bne.n	800c166 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	617b      	str	r3, [r7, #20]
}
 800c160:	bf00      	nop
 800c162:	bf00      	nop
 800c164:	e7fd      	b.n	800c162 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c168:	699a      	ldr	r2, [r3, #24]
 800c16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16c:	18d1      	adds	r1, r2, r3
 800c16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c174:	f7ff ff04 	bl	800bf80 <prvInsertTimerInActiveList>
					break;
 800c178:	e017      	b.n	800c1aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d103      	bne.n	800c190 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c18a:	f000 fbe5 	bl	800c958 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c18e:	e00c      	b.n	800c1aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c192:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c196:	f023 0301 	bic.w	r3, r3, #1
 800c19a:	b2da      	uxtb	r2, r3
 800c19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c1a2:	e002      	b.n	800c1aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c1a4:	bf00      	nop
 800c1a6:	e000      	b.n	800c1aa <prvProcessReceivedCommands+0x1a6>
					break;
 800c1a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1aa:	4b08      	ldr	r3, [pc, #32]	@ (800c1cc <prvProcessReceivedCommands+0x1c8>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	1d39      	adds	r1, r7, #4
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe f85e 	bl	800a274 <xQueueReceive>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f47f af26 	bne.w	800c00c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c1c0:	bf00      	nop
 800c1c2:	bf00      	nop
 800c1c4:	3730      	adds	r7, #48	@ 0x30
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	20003250 	.word	0x20003250

0800c1d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1d6:	e049      	b.n	800c26c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1d8:	4b2e      	ldr	r3, [pc, #184]	@ (800c294 <prvSwitchTimerLists+0xc4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1e2:	4b2c      	ldr	r3, [pc, #176]	@ (800c294 <prvSwitchTimerLists+0xc4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fd fc31 	bl	8009a58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d02f      	beq.n	800c26c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	4413      	add	r3, r2
 800c214:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d90e      	bls.n	800c23c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c22a:	4b1a      	ldr	r3, [pc, #104]	@ (800c294 <prvSwitchTimerLists+0xc4>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3304      	adds	r3, #4
 800c232:	4619      	mov	r1, r3
 800c234:	4610      	mov	r0, r2
 800c236:	f7fd fbd6 	bl	80099e6 <vListInsert>
 800c23a:	e017      	b.n	800c26c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c23c:	2300      	movs	r3, #0
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	2300      	movs	r3, #0
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	2100      	movs	r1, #0
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7ff fd58 	bl	800bcfc <xTimerGenericCommand>
 800c24c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10b      	bne.n	800c26c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	603b      	str	r3, [r7, #0]
}
 800c266:	bf00      	nop
 800c268:	bf00      	nop
 800c26a:	e7fd      	b.n	800c268 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c26c:	4b09      	ldr	r3, [pc, #36]	@ (800c294 <prvSwitchTimerLists+0xc4>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1b0      	bne.n	800c1d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c276:	4b07      	ldr	r3, [pc, #28]	@ (800c294 <prvSwitchTimerLists+0xc4>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c27c:	4b06      	ldr	r3, [pc, #24]	@ (800c298 <prvSwitchTimerLists+0xc8>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a04      	ldr	r2, [pc, #16]	@ (800c294 <prvSwitchTimerLists+0xc4>)
 800c282:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c284:	4a04      	ldr	r2, [pc, #16]	@ (800c298 <prvSwitchTimerLists+0xc8>)
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	6013      	str	r3, [r2, #0]
}
 800c28a:	bf00      	nop
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20003248 	.word	0x20003248
 800c298:	2000324c 	.word	0x2000324c

0800c29c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2a2:	f000 f969 	bl	800c578 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2a6:	4b15      	ldr	r3, [pc, #84]	@ (800c2fc <prvCheckForValidListAndQueue+0x60>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d120      	bne.n	800c2f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2ae:	4814      	ldr	r0, [pc, #80]	@ (800c300 <prvCheckForValidListAndQueue+0x64>)
 800c2b0:	f7fd fb48 	bl	8009944 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2b4:	4813      	ldr	r0, [pc, #76]	@ (800c304 <prvCheckForValidListAndQueue+0x68>)
 800c2b6:	f7fd fb45 	bl	8009944 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2ba:	4b13      	ldr	r3, [pc, #76]	@ (800c308 <prvCheckForValidListAndQueue+0x6c>)
 800c2bc:	4a10      	ldr	r2, [pc, #64]	@ (800c300 <prvCheckForValidListAndQueue+0x64>)
 800c2be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2c0:	4b12      	ldr	r3, [pc, #72]	@ (800c30c <prvCheckForValidListAndQueue+0x70>)
 800c2c2:	4a10      	ldr	r2, [pc, #64]	@ (800c304 <prvCheckForValidListAndQueue+0x68>)
 800c2c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	4b11      	ldr	r3, [pc, #68]	@ (800c310 <prvCheckForValidListAndQueue+0x74>)
 800c2cc:	4a11      	ldr	r2, [pc, #68]	@ (800c314 <prvCheckForValidListAndQueue+0x78>)
 800c2ce:	2110      	movs	r1, #16
 800c2d0:	200a      	movs	r0, #10
 800c2d2:	f7fd fc55 	bl	8009b80 <xQueueGenericCreateStatic>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	4a08      	ldr	r2, [pc, #32]	@ (800c2fc <prvCheckForValidListAndQueue+0x60>)
 800c2da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2dc:	4b07      	ldr	r3, [pc, #28]	@ (800c2fc <prvCheckForValidListAndQueue+0x60>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2e4:	4b05      	ldr	r3, [pc, #20]	@ (800c2fc <prvCheckForValidListAndQueue+0x60>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	490b      	ldr	r1, [pc, #44]	@ (800c318 <prvCheckForValidListAndQueue+0x7c>)
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe fb82 	bl	800a9f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2f0:	f000 f974 	bl	800c5dc <vPortExitCritical>
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	20003250 	.word	0x20003250
 800c300:	20003220 	.word	0x20003220
 800c304:	20003234 	.word	0x20003234
 800c308:	20003248 	.word	0x20003248
 800c30c:	2000324c 	.word	0x2000324c
 800c310:	200032fc 	.word	0x200032fc
 800c314:	2000325c 	.word	0x2000325c
 800c318:	0801214c 	.word	0x0801214c

0800c31c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3b04      	subs	r3, #4
 800c32c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3b04      	subs	r3, #4
 800c33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	f023 0201 	bic.w	r2, r3, #1
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3b04      	subs	r3, #4
 800c34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c34c:	4a0c      	ldr	r2, [pc, #48]	@ (800c380 <pxPortInitialiseStack+0x64>)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3b14      	subs	r3, #20
 800c356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3b04      	subs	r3, #4
 800c362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f06f 0202 	mvn.w	r2, #2
 800c36a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3b20      	subs	r3, #32
 800c370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c372:	68fb      	ldr	r3, [r7, #12]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	0800c385 	.word	0x0800c385

0800c384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c38e:	4b13      	ldr	r3, [pc, #76]	@ (800c3dc <prvTaskExitError+0x58>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c396:	d00b      	beq.n	800c3b0 <prvTaskExitError+0x2c>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	60fb      	str	r3, [r7, #12]
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	e7fd      	b.n	800c3ac <prvTaskExitError+0x28>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	60bb      	str	r3, [r7, #8]
}
 800c3c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3c4:	bf00      	nop
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0fc      	beq.n	800c3c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3cc:	bf00      	nop
 800c3ce:	bf00      	nop
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	20000050 	.word	0x20000050

0800c3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3e0:	4b07      	ldr	r3, [pc, #28]	@ (800c400 <pxCurrentTCBConst2>)
 800c3e2:	6819      	ldr	r1, [r3, #0]
 800c3e4:	6808      	ldr	r0, [r1, #0]
 800c3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ea:	f380 8809 	msr	PSP, r0
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f04f 0000 	mov.w	r0, #0
 800c3f6:	f380 8811 	msr	BASEPRI, r0
 800c3fa:	4770      	bx	lr
 800c3fc:	f3af 8000 	nop.w

0800c400 <pxCurrentTCBConst2>:
 800c400:	20002d20 	.word	0x20002d20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop

0800c408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c408:	4808      	ldr	r0, [pc, #32]	@ (800c42c <prvPortStartFirstTask+0x24>)
 800c40a:	6800      	ldr	r0, [r0, #0]
 800c40c:	6800      	ldr	r0, [r0, #0]
 800c40e:	f380 8808 	msr	MSP, r0
 800c412:	f04f 0000 	mov.w	r0, #0
 800c416:	f380 8814 	msr	CONTROL, r0
 800c41a:	b662      	cpsie	i
 800c41c:	b661      	cpsie	f
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	df00      	svc	0
 800c428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c42a:	bf00      	nop
 800c42c:	e000ed08 	.word	0xe000ed08

0800c430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c436:	4b47      	ldr	r3, [pc, #284]	@ (800c554 <xPortStartScheduler+0x124>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a47      	ldr	r2, [pc, #284]	@ (800c558 <xPortStartScheduler+0x128>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d10b      	bne.n	800c458 <xPortStartScheduler+0x28>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	60fb      	str	r3, [r7, #12]
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	e7fd      	b.n	800c454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c458:	4b3e      	ldr	r3, [pc, #248]	@ (800c554 <xPortStartScheduler+0x124>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a3f      	ldr	r2, [pc, #252]	@ (800c55c <xPortStartScheduler+0x12c>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d10b      	bne.n	800c47a <xPortStartScheduler+0x4a>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	613b      	str	r3, [r7, #16]
}
 800c474:	bf00      	nop
 800c476:	bf00      	nop
 800c478:	e7fd      	b.n	800c476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c47a:	4b39      	ldr	r3, [pc, #228]	@ (800c560 <xPortStartScheduler+0x130>)
 800c47c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	b2db      	uxtb	r3, r3
 800c484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	22ff      	movs	r2, #255	@ 0xff
 800c48a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	b2db      	uxtb	r3, r3
 800c492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	b2db      	uxtb	r3, r3
 800c498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	4b31      	ldr	r3, [pc, #196]	@ (800c564 <xPortStartScheduler+0x134>)
 800c4a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4a2:	4b31      	ldr	r3, [pc, #196]	@ (800c568 <xPortStartScheduler+0x138>)
 800c4a4:	2207      	movs	r2, #7
 800c4a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4a8:	e009      	b.n	800c4be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c4aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c568 <xPortStartScheduler+0x138>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c568 <xPortStartScheduler+0x138>)
 800c4b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4b4:	78fb      	ldrb	r3, [r7, #3]
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4c6:	2b80      	cmp	r3, #128	@ 0x80
 800c4c8:	d0ef      	beq.n	800c4aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4ca:	4b27      	ldr	r3, [pc, #156]	@ (800c568 <xPortStartScheduler+0x138>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f1c3 0307 	rsb	r3, r3, #7
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	d00b      	beq.n	800c4ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	60bb      	str	r3, [r7, #8]
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	e7fd      	b.n	800c4ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c568 <xPortStartScheduler+0x138>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c568 <xPortStartScheduler+0x138>)
 800c4f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c568 <xPortStartScheduler+0x138>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c500:	4a19      	ldr	r2, [pc, #100]	@ (800c568 <xPortStartScheduler+0x138>)
 800c502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	b2da      	uxtb	r2, r3
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c50c:	4b17      	ldr	r3, [pc, #92]	@ (800c56c <xPortStartScheduler+0x13c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a16      	ldr	r2, [pc, #88]	@ (800c56c <xPortStartScheduler+0x13c>)
 800c512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c518:	4b14      	ldr	r3, [pc, #80]	@ (800c56c <xPortStartScheduler+0x13c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a13      	ldr	r2, [pc, #76]	@ (800c56c <xPortStartScheduler+0x13c>)
 800c51e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c524:	f000 f8da 	bl	800c6dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c528:	4b11      	ldr	r3, [pc, #68]	@ (800c570 <xPortStartScheduler+0x140>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c52e:	f000 f8f9 	bl	800c724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c532:	4b10      	ldr	r3, [pc, #64]	@ (800c574 <xPortStartScheduler+0x144>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a0f      	ldr	r2, [pc, #60]	@ (800c574 <xPortStartScheduler+0x144>)
 800c538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c53c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c53e:	f7ff ff63 	bl	800c408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c542:	f7fe ff3f 	bl	800b3c4 <vTaskSwitchContext>
	prvTaskExitError();
 800c546:	f7ff ff1d 	bl	800c384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3718      	adds	r7, #24
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	e000ed00 	.word	0xe000ed00
 800c558:	410fc271 	.word	0x410fc271
 800c55c:	410fc270 	.word	0x410fc270
 800c560:	e000e400 	.word	0xe000e400
 800c564:	2000334c 	.word	0x2000334c
 800c568:	20003350 	.word	0x20003350
 800c56c:	e000ed20 	.word	0xe000ed20
 800c570:	20000050 	.word	0x20000050
 800c574:	e000ef34 	.word	0xe000ef34

0800c578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	607b      	str	r3, [r7, #4]
}
 800c590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c592:	4b10      	ldr	r3, [pc, #64]	@ (800c5d4 <vPortEnterCritical+0x5c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3301      	adds	r3, #1
 800c598:	4a0e      	ldr	r2, [pc, #56]	@ (800c5d4 <vPortEnterCritical+0x5c>)
 800c59a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c59c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d4 <vPortEnterCritical+0x5c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d110      	bne.n	800c5c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d8 <vPortEnterCritical+0x60>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00b      	beq.n	800c5c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	603b      	str	r3, [r7, #0]
}
 800c5c0:	bf00      	nop
 800c5c2:	bf00      	nop
 800c5c4:	e7fd      	b.n	800c5c2 <vPortEnterCritical+0x4a>
	}
}
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	20000050 	.word	0x20000050
 800c5d8:	e000ed04 	.word	0xe000ed04

0800c5dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5e2:	4b12      	ldr	r3, [pc, #72]	@ (800c62c <vPortExitCritical+0x50>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10b      	bne.n	800c602 <vPortExitCritical+0x26>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	607b      	str	r3, [r7, #4]
}
 800c5fc:	bf00      	nop
 800c5fe:	bf00      	nop
 800c600:	e7fd      	b.n	800c5fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c602:	4b0a      	ldr	r3, [pc, #40]	@ (800c62c <vPortExitCritical+0x50>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3b01      	subs	r3, #1
 800c608:	4a08      	ldr	r2, [pc, #32]	@ (800c62c <vPortExitCritical+0x50>)
 800c60a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c60c:	4b07      	ldr	r3, [pc, #28]	@ (800c62c <vPortExitCritical+0x50>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d105      	bne.n	800c620 <vPortExitCritical+0x44>
 800c614:	2300      	movs	r3, #0
 800c616:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	f383 8811 	msr	BASEPRI, r3
}
 800c61e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	20000050 	.word	0x20000050

0800c630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c630:	f3ef 8009 	mrs	r0, PSP
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	4b15      	ldr	r3, [pc, #84]	@ (800c690 <pxCurrentTCBConst>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	f01e 0f10 	tst.w	lr, #16
 800c640:	bf08      	it	eq
 800c642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64a:	6010      	str	r0, [r2, #0]
 800c64c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c654:	f380 8811 	msr	BASEPRI, r0
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f7fe feb0 	bl	800b3c4 <vTaskSwitchContext>
 800c664:	f04f 0000 	mov.w	r0, #0
 800c668:	f380 8811 	msr	BASEPRI, r0
 800c66c:	bc09      	pop	{r0, r3}
 800c66e:	6819      	ldr	r1, [r3, #0]
 800c670:	6808      	ldr	r0, [r1, #0]
 800c672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c676:	f01e 0f10 	tst.w	lr, #16
 800c67a:	bf08      	it	eq
 800c67c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c680:	f380 8809 	msr	PSP, r0
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	f3af 8000 	nop.w

0800c690 <pxCurrentTCBConst>:
 800c690:	20002d20 	.word	0x20002d20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop

0800c698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	607b      	str	r3, [r7, #4]
}
 800c6b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6b2:	f7fe fdcd 	bl	800b250 <xTaskIncrementTick>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6bc:	4b06      	ldr	r3, [pc, #24]	@ (800c6d8 <xPortSysTickHandler+0x40>)
 800c6be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	f383 8811 	msr	BASEPRI, r3
}
 800c6ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c710 <vPortSetupTimerInterrupt+0x34>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c714 <vPortSetupTimerInterrupt+0x38>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c718 <vPortSetupTimerInterrupt+0x3c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c71c <vPortSetupTimerInterrupt+0x40>)
 800c6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f6:	099b      	lsrs	r3, r3, #6
 800c6f8:	4a09      	ldr	r2, [pc, #36]	@ (800c720 <vPortSetupTimerInterrupt+0x44>)
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6fe:	4b04      	ldr	r3, [pc, #16]	@ (800c710 <vPortSetupTimerInterrupt+0x34>)
 800c700:	2207      	movs	r2, #7
 800c702:	601a      	str	r2, [r3, #0]
}
 800c704:	bf00      	nop
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	e000e010 	.word	0xe000e010
 800c714:	e000e018 	.word	0xe000e018
 800c718:	20000004 	.word	0x20000004
 800c71c:	10624dd3 	.word	0x10624dd3
 800c720:	e000e014 	.word	0xe000e014

0800c724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c734 <vPortEnableVFP+0x10>
 800c728:	6801      	ldr	r1, [r0, #0]
 800c72a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c72e:	6001      	str	r1, [r0, #0]
 800c730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c732:	bf00      	nop
 800c734:	e000ed88 	.word	0xe000ed88

0800c738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c73e:	f3ef 8305 	mrs	r3, IPSR
 800c742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b0f      	cmp	r3, #15
 800c748:	d915      	bls.n	800c776 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c74a:	4a18      	ldr	r2, [pc, #96]	@ (800c7ac <vPortValidateInterruptPriority+0x74>)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c754:	4b16      	ldr	r3, [pc, #88]	@ (800c7b0 <vPortValidateInterruptPriority+0x78>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	7afa      	ldrb	r2, [r7, #11]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d20b      	bcs.n	800c776 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	607b      	str	r3, [r7, #4]
}
 800c770:	bf00      	nop
 800c772:	bf00      	nop
 800c774:	e7fd      	b.n	800c772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c776:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b4 <vPortValidateInterruptPriority+0x7c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c77e:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b8 <vPortValidateInterruptPriority+0x80>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	429a      	cmp	r2, r3
 800c784:	d90b      	bls.n	800c79e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	603b      	str	r3, [r7, #0]
}
 800c798:	bf00      	nop
 800c79a:	bf00      	nop
 800c79c:	e7fd      	b.n	800c79a <vPortValidateInterruptPriority+0x62>
	}
 800c79e:	bf00      	nop
 800c7a0:	3714      	adds	r7, #20
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	e000e3f0 	.word	0xe000e3f0
 800c7b0:	2000334c 	.word	0x2000334c
 800c7b4:	e000ed0c 	.word	0xe000ed0c
 800c7b8:	20003350 	.word	0x20003350

0800c7bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08a      	sub	sp, #40	@ 0x28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7c8:	f7fe fc86 	bl	800b0d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7cc:	4b5c      	ldr	r3, [pc, #368]	@ (800c940 <pvPortMalloc+0x184>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d101      	bne.n	800c7d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7d4:	f000 f924 	bl	800ca20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7d8:	4b5a      	ldr	r3, [pc, #360]	@ (800c944 <pvPortMalloc+0x188>)
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4013      	ands	r3, r2
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f040 8095 	bne.w	800c910 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d01e      	beq.n	800c82a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d015      	beq.n	800c82a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f023 0307 	bic.w	r3, r3, #7
 800c804:	3308      	adds	r3, #8
 800c806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f003 0307 	and.w	r3, r3, #7
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00b      	beq.n	800c82a <pvPortMalloc+0x6e>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	617b      	str	r3, [r7, #20]
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop
 800c828:	e7fd      	b.n	800c826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d06f      	beq.n	800c910 <pvPortMalloc+0x154>
 800c830:	4b45      	ldr	r3, [pc, #276]	@ (800c948 <pvPortMalloc+0x18c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	429a      	cmp	r2, r3
 800c838:	d86a      	bhi.n	800c910 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c83a:	4b44      	ldr	r3, [pc, #272]	@ (800c94c <pvPortMalloc+0x190>)
 800c83c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c83e:	4b43      	ldr	r3, [pc, #268]	@ (800c94c <pvPortMalloc+0x190>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c844:	e004      	b.n	800c850 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	429a      	cmp	r2, r3
 800c858:	d903      	bls.n	800c862 <pvPortMalloc+0xa6>
 800c85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1f1      	bne.n	800c846 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c862:	4b37      	ldr	r3, [pc, #220]	@ (800c940 <pvPortMalloc+0x184>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c868:	429a      	cmp	r2, r3
 800c86a:	d051      	beq.n	800c910 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2208      	movs	r2, #8
 800c872:	4413      	add	r3, r2
 800c874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	6a3b      	ldr	r3, [r7, #32]
 800c87c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	1ad2      	subs	r2, r2, r3
 800c886:	2308      	movs	r3, #8
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d920      	bls.n	800c8d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c88e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4413      	add	r3, r2
 800c894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	f003 0307 	and.w	r3, r3, #7
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00b      	beq.n	800c8b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a4:	f383 8811 	msr	BASEPRI, r3
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	613b      	str	r3, [r7, #16]
}
 800c8b2:	bf00      	nop
 800c8b4:	bf00      	nop
 800c8b6:	e7fd      	b.n	800c8b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	1ad2      	subs	r2, r2, r3
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8ca:	69b8      	ldr	r0, [r7, #24]
 800c8cc:	f000 f90a 	bl	800cae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c948 <pvPortMalloc+0x18c>)
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	4a1b      	ldr	r2, [pc, #108]	@ (800c948 <pvPortMalloc+0x18c>)
 800c8dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8de:	4b1a      	ldr	r3, [pc, #104]	@ (800c948 <pvPortMalloc+0x18c>)
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c950 <pvPortMalloc+0x194>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d203      	bcs.n	800c8f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8ea:	4b17      	ldr	r3, [pc, #92]	@ (800c948 <pvPortMalloc+0x18c>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a18      	ldr	r2, [pc, #96]	@ (800c950 <pvPortMalloc+0x194>)
 800c8f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	4b13      	ldr	r3, [pc, #76]	@ (800c944 <pvPortMalloc+0x188>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	431a      	orrs	r2, r3
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c906:	4b13      	ldr	r3, [pc, #76]	@ (800c954 <pvPortMalloc+0x198>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3301      	adds	r3, #1
 800c90c:	4a11      	ldr	r2, [pc, #68]	@ (800c954 <pvPortMalloc+0x198>)
 800c90e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c910:	f7fe fbf0 	bl	800b0f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	f003 0307 	and.w	r3, r3, #7
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00b      	beq.n	800c936 <pvPortMalloc+0x17a>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	60fb      	str	r3, [r7, #12]
}
 800c930:	bf00      	nop
 800c932:	bf00      	nop
 800c934:	e7fd      	b.n	800c932 <pvPortMalloc+0x176>
	return pvReturn;
 800c936:	69fb      	ldr	r3, [r7, #28]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3728      	adds	r7, #40	@ 0x28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	20003f14 	.word	0x20003f14
 800c944:	20003f28 	.word	0x20003f28
 800c948:	20003f18 	.word	0x20003f18
 800c94c:	20003f0c 	.word	0x20003f0c
 800c950:	20003f1c 	.word	0x20003f1c
 800c954:	20003f20 	.word	0x20003f20

0800c958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d04f      	beq.n	800ca0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c96a:	2308      	movs	r3, #8
 800c96c:	425b      	negs	r3, r3
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	4413      	add	r3, r2
 800c972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	685a      	ldr	r2, [r3, #4]
 800c97c:	4b25      	ldr	r3, [pc, #148]	@ (800ca14 <vPortFree+0xbc>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4013      	ands	r3, r2
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10b      	bne.n	800c99e <vPortFree+0x46>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	60fb      	str	r3, [r7, #12]
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	e7fd      	b.n	800c99a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00b      	beq.n	800c9be <vPortFree+0x66>
	__asm volatile
 800c9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	60bb      	str	r3, [r7, #8]
}
 800c9b8:	bf00      	nop
 800c9ba:	bf00      	nop
 800c9bc:	e7fd      	b.n	800c9ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	685a      	ldr	r2, [r3, #4]
 800c9c2:	4b14      	ldr	r3, [pc, #80]	@ (800ca14 <vPortFree+0xbc>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4013      	ands	r3, r2
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d01e      	beq.n	800ca0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d11a      	bne.n	800ca0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	4b0e      	ldr	r3, [pc, #56]	@ (800ca14 <vPortFree+0xbc>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	43db      	mvns	r3, r3
 800c9de:	401a      	ands	r2, r3
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9e4:	f7fe fb78 	bl	800b0d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	4b0a      	ldr	r3, [pc, #40]	@ (800ca18 <vPortFree+0xc0>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	4a09      	ldr	r2, [pc, #36]	@ (800ca18 <vPortFree+0xc0>)
 800c9f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9f6:	6938      	ldr	r0, [r7, #16]
 800c9f8:	f000 f874 	bl	800cae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ca1c <vPortFree+0xc4>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3301      	adds	r3, #1
 800ca02:	4a06      	ldr	r2, [pc, #24]	@ (800ca1c <vPortFree+0xc4>)
 800ca04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca06:	f7fe fb75 	bl	800b0f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca0a:	bf00      	nop
 800ca0c:	3718      	adds	r7, #24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	20003f28 	.word	0x20003f28
 800ca18:	20003f18 	.word	0x20003f18
 800ca1c:	20003f24 	.word	0x20003f24

0800ca20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca26:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ca2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca2c:	4b27      	ldr	r3, [pc, #156]	@ (800cacc <prvHeapInit+0xac>)
 800ca2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f003 0307 	and.w	r3, r3, #7
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00c      	beq.n	800ca54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3307      	adds	r3, #7
 800ca3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f023 0307 	bic.w	r3, r3, #7
 800ca46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	1ad3      	subs	r3, r2, r3
 800ca4e:	4a1f      	ldr	r2, [pc, #124]	@ (800cacc <prvHeapInit+0xac>)
 800ca50:	4413      	add	r3, r2
 800ca52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca58:	4a1d      	ldr	r2, [pc, #116]	@ (800cad0 <prvHeapInit+0xb0>)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca5e:	4b1c      	ldr	r3, [pc, #112]	@ (800cad0 <prvHeapInit+0xb0>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	4413      	add	r3, r2
 800ca6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca6c:	2208      	movs	r2, #8
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	1a9b      	subs	r3, r3, r2
 800ca72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f023 0307 	bic.w	r3, r3, #7
 800ca7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	4a15      	ldr	r2, [pc, #84]	@ (800cad4 <prvHeapInit+0xb4>)
 800ca80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca82:	4b14      	ldr	r3, [pc, #80]	@ (800cad4 <prvHeapInit+0xb4>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2200      	movs	r2, #0
 800ca88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca8a:	4b12      	ldr	r3, [pc, #72]	@ (800cad4 <prvHeapInit+0xb4>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	1ad2      	subs	r2, r2, r3
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800caa0:	4b0c      	ldr	r3, [pc, #48]	@ (800cad4 <prvHeapInit+0xb4>)
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	4a0a      	ldr	r2, [pc, #40]	@ (800cad8 <prvHeapInit+0xb8>)
 800caae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	4a09      	ldr	r2, [pc, #36]	@ (800cadc <prvHeapInit+0xbc>)
 800cab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cab8:	4b09      	ldr	r3, [pc, #36]	@ (800cae0 <prvHeapInit+0xc0>)
 800caba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cabe:	601a      	str	r2, [r3, #0]
}
 800cac0:	bf00      	nop
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	20003354 	.word	0x20003354
 800cad0:	20003f0c 	.word	0x20003f0c
 800cad4:	20003f14 	.word	0x20003f14
 800cad8:	20003f1c 	.word	0x20003f1c
 800cadc:	20003f18 	.word	0x20003f18
 800cae0:	20003f28 	.word	0x20003f28

0800cae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800caec:	4b28      	ldr	r3, [pc, #160]	@ (800cb90 <prvInsertBlockIntoFreeList+0xac>)
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	e002      	b.n	800caf8 <prvInsertBlockIntoFreeList+0x14>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d8f7      	bhi.n	800caf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d108      	bne.n	800cb26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	441a      	add	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	441a      	add	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d118      	bne.n	800cb6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	4b15      	ldr	r3, [pc, #84]	@ (800cb94 <prvInsertBlockIntoFreeList+0xb0>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d00d      	beq.n	800cb62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	441a      	add	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	601a      	str	r2, [r3, #0]
 800cb60:	e008      	b.n	800cb74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb62:	4b0c      	ldr	r3, [pc, #48]	@ (800cb94 <prvInsertBlockIntoFreeList+0xb0>)
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	601a      	str	r2, [r3, #0]
 800cb6a:	e003      	b.n	800cb74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d002      	beq.n	800cb82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb82:	bf00      	nop
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	20003f0c 	.word	0x20003f0c
 800cb94:	20003f14 	.word	0x20003f14

0800cb98 <arm_fir_init_f32>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	9c04      	ldr	r4, [sp, #16]
 800cb9c:	6082      	str	r2, [r0, #8]
 800cb9e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800cba2:	3c01      	subs	r4, #1
 800cba4:	440c      	add	r4, r1
 800cba6:	8001      	strh	r1, [r0, #0]
 800cba8:	4605      	mov	r5, r0
 800cbaa:	00a2      	lsls	r2, r4, #2
 800cbac:	4618      	mov	r0, r3
 800cbae:	2100      	movs	r1, #0
 800cbb0:	f001 fb12 	bl	800e1d8 <memset>
 800cbb4:	6068      	str	r0, [r5, #4]
 800cbb6:	bd38      	pop	{r3, r4, r5, pc}

0800cbb8 <arm_fir_f32>:
 800cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbbc:	ed2d 8b10 	vpush	{d8-d15}
 800cbc0:	b08b      	sub	sp, #44	@ 0x2c
 800cbc2:	f8b0 8000 	ldrh.w	r8, [r0]
 800cbc6:	9003      	str	r0, [sp, #12]
 800cbc8:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800cbcc:	461e      	mov	r6, r3
 800cbce:	9304      	str	r3, [sp, #16]
 800cbd0:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800cbda:	08f3      	lsrs	r3, r6, #3
 800cbdc:	9002      	str	r0, [sp, #8]
 800cbde:	9500      	str	r5, [sp, #0]
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	f000 81f1 	beq.w	800cfc8 <arm_fir_f32+0x410>
 800cbe6:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800cbea:	f100 0620 	add.w	r6, r0, #32
 800cbee:	9405      	str	r4, [sp, #20]
 800cbf0:	0164      	lsls	r4, r4, #5
 800cbf2:	4420      	add	r0, r4
 800cbf4:	f008 0a07 	and.w	sl, r8, #7
 800cbf8:	9607      	str	r6, [sp, #28]
 800cbfa:	9006      	str	r0, [sp, #24]
 800cbfc:	469c      	mov	ip, r3
 800cbfe:	4650      	mov	r0, sl
 800cc00:	4623      	mov	r3, r4
 800cc02:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cc06:	f8cd 8020 	str.w	r8, [sp, #32]
 800cc0a:	1937      	adds	r7, r6, r4
 800cc0c:	f109 0b1c 	add.w	fp, r9, #28
 800cc10:	f8dd e014 	ldr.w	lr, [sp, #20]
 800cc14:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc16:	f8cd 9014 	str.w	r9, [sp, #20]
 800cc1a:	f101 0620 	add.w	r6, r1, #32
 800cc1e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800cc22:	9106      	str	r1, [sp, #24]
 800cc24:	3520      	adds	r5, #32
 800cc26:	f102 0420 	add.w	r4, r2, #32
 800cc2a:	4698      	mov	r8, r3
 800cc2c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800cc30:	f845 3c20 	str.w	r3, [r5, #-32]
 800cc34:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800cc38:	f845 3c1c 	str.w	r3, [r5, #-28]
 800cc3c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800cc40:	f845 3c18 	str.w	r3, [r5, #-24]
 800cc44:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800cc48:	f845 3c14 	str.w	r3, [r5, #-20]
 800cc4c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800cc50:	f845 3c10 	str.w	r3, [r5, #-16]
 800cc54:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800cc58:	f845 3c0c 	str.w	r3, [r5, #-12]
 800cc5c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800cc60:	f845 3c08 	str.w	r3, [r5, #-8]
 800cc64:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc68:	f845 3c04 	str.w	r3, [r5, #-4]
 800cc6c:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 800cc70:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800cc74:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800cc78:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800cc7c:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800cc80:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800cc84:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800cc88:	eddf 6af5 	vldr	s13, [pc, #980]	@ 800d060 <arm_fir_f32+0x4a8>
 800cc8c:	465a      	mov	r2, fp
 800cc8e:	f1be 0f00 	cmp.w	lr, #0
 800cc92:	f000 81fe 	beq.w	800d092 <arm_fir_f32+0x4da>
 800cc96:	f10b 0120 	add.w	r1, fp, #32
 800cc9a:	eef0 ba66 	vmov.f32	s23, s13
 800cc9e:	eeb0 6a66 	vmov.f32	s12, s13
 800cca2:	eeb0 9a66 	vmov.f32	s18, s13
 800cca6:	eef0 9a66 	vmov.f32	s19, s13
 800ccaa:	eeb0 aa66 	vmov.f32	s20, s13
 800ccae:	eef0 aa66 	vmov.f32	s21, s13
 800ccb2:	eeb0 ba66 	vmov.f32	s22, s13
 800ccb6:	460a      	mov	r2, r1
 800ccb8:	4653      	mov	r3, sl
 800ccba:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800ccbe:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800ccc2:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 800ccc6:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800ccca:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800ccce:	ed53 ca04 	vldr	s25, [r3, #-16]
 800ccd2:	ed53 2a03 	vldr	s5, [r3, #-12]
 800ccd6:	ed13 4a02 	vldr	s8, [r3, #-8]
 800ccda:	ed13 5a01 	vldr	s10, [r3, #-4]
 800ccde:	ee67 fa02 	vmul.f32	s31, s14, s4
 800cce2:	ee27 da21 	vmul.f32	s26, s14, s3
 800cce6:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800ccea:	ee27 ca01 	vmul.f32	s24, s14, s2
 800ccee:	ee27 3a20 	vmul.f32	s6, s14, s1
 800ccf2:	ee67 3a00 	vmul.f32	s7, s14, s0
 800ccf6:	ee67 5a08 	vmul.f32	s11, s14, s16
 800ccfa:	ee27 fa28 	vmul.f32	s30, s14, s17
 800ccfe:	ee67 7a24 	vmul.f32	s15, s14, s9
 800cd02:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800cd06:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800cd0a:	ee6e faa1 	vmul.f32	s31, s29, s3
 800cd0e:	ee2e da81 	vmul.f32	s26, s29, s2
 800cd12:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800cd16:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cd1a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cd1e:	ee2e caa0 	vmul.f32	s24, s29, s1
 800cd22:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800cd26:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cd2a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cd2e:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800cd32:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800cd36:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800cd3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd3e:	ee24 faae 	vmul.f32	s30, s9, s29
 800cd42:	ee6e ea82 	vmul.f32	s29, s29, s4
 800cd46:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800cd4a:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800cd4e:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 800cd52:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800cd56:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cd5a:	ee2e da20 	vmul.f32	s26, s28, s1
 800cd5e:	ee2e ca00 	vmul.f32	s24, s28, s0
 800cd62:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cd66:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cd6a:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800cd6e:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800cd72:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cd76:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800cd7a:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800cd7e:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800cd82:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800cd86:	ee2e ea21 	vmul.f32	s28, s28, s3
 800cd8a:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800cd8e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800cd92:	ed52 0a04 	vldr	s1, [r2, #-16]
 800cd96:	ee2d da80 	vmul.f32	s26, s27, s0
 800cd9a:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800cd9e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cda2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cda6:	ee2d ca88 	vmul.f32	s24, s27, s16
 800cdaa:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800cdae:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cdb2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cdb6:	ee64 3aad 	vmul.f32	s7, s9, s27
 800cdba:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800cdbe:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800cdc2:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800cdc6:	ee21 faad 	vmul.f32	s30, s3, s27
 800cdca:	ee6d da81 	vmul.f32	s27, s27, s2
 800cdce:	ee6c fa80 	vmul.f32	s31, s25, s0
 800cdd2:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800cdd6:	ed12 0a03 	vldr	s0, [r2, #-12]
 800cdda:	ee3d da2a 	vadd.f32	s26, s26, s21
 800cdde:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cde2:	ee6c aa88 	vmul.f32	s21, s25, s16
 800cde6:	ee2c caa8 	vmul.f32	s24, s25, s17
 800cdea:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cdee:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cdf2:	ee24 3aac 	vmul.f32	s6, s9, s25
 800cdf6:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800cdfa:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cdfe:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ce02:	ee61 5aac 	vmul.f32	s11, s3, s25
 800ce06:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800ce0a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ce0e:	ee6c caa0 	vmul.f32	s25, s25, s1
 800ce12:	ee62 ea88 	vmul.f32	s29, s5, s16
 800ce16:	ee3a da8d 	vadd.f32	s26, s21, s26
 800ce1a:	ed12 8a02 	vldr	s16, [r2, #-8]
 800ce1e:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800ce22:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800ce26:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ce2a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ce2e:	ee24 caa2 	vmul.f32	s24, s9, s5
 800ce32:	ee22 3a22 	vmul.f32	s6, s4, s5
 800ce36:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ce3a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ce3e:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800ce42:	ee61 5a22 	vmul.f32	s11, s2, s5
 800ce46:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ce4a:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800ce4e:	ee20 faa2 	vmul.f32	s30, s1, s5
 800ce52:	ee62 2a80 	vmul.f32	s5, s5, s0
 800ce56:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800ce5a:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800ce5e:	ee24 ba28 	vmul.f32	s22, s8, s17
 800ce62:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800ce66:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ce6a:	ee24 da84 	vmul.f32	s26, s9, s8
 800ce6e:	ee22 ca04 	vmul.f32	s24, s4, s8
 800ce72:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ce76:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ce7a:	ee21 3a84 	vmul.f32	s6, s3, s8
 800ce7e:	ee61 3a04 	vmul.f32	s7, s2, s8
 800ce82:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ce86:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ce8a:	ee60 5a84 	vmul.f32	s11, s1, s8
 800ce8e:	ee20 7a04 	vmul.f32	s14, s0, s8
 800ce92:	ee64 6a08 	vmul.f32	s13, s8, s16
 800ce96:	ed52 8a01 	vldr	s17, [r2, #-4]
 800ce9a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ce9e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cea2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cea6:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800ceaa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ceae:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800ceb2:	ee64 4a85 	vmul.f32	s9, s9, s10
 800ceb6:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ceba:	ee22 4a05 	vmul.f32	s8, s4, s10
 800cebe:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cec2:	ee61 2a85 	vmul.f32	s5, s3, s10
 800cec6:	ee21 3a05 	vmul.f32	s6, s2, s10
 800ceca:	ee60 3a85 	vmul.f32	s7, s1, s10
 800cece:	ee60 5a05 	vmul.f32	s11, s0, s10
 800ced2:	ee68 ba05 	vmul.f32	s23, s16, s10
 800ced6:	ee65 7a28 	vmul.f32	s15, s10, s17
 800ceda:	3320      	adds	r3, #32
 800cedc:	429f      	cmp	r7, r3
 800cede:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800cee2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800cee6:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800ceea:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ceee:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cef2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cef6:	ee7b ba87 	vadd.f32	s23, s23, s14
 800cefa:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800cefe:	f102 0220 	add.w	r2, r2, #32
 800cf02:	f47f aeda 	bne.w	800ccba <arm_fir_f32+0x102>
 800cf06:	eb0b 0208 	add.w	r2, fp, r8
 800cf0a:	46cb      	mov	fp, r9
 800cf0c:	b3a0      	cbz	r0, 800cf78 <arm_fir_f32+0x3c0>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	ecfb 7a01 	vldmia	fp!, {s15}
 800cf14:	ecf2 5a01 	vldmia	r2!, {s11}
 800cf18:	ee27 2a82 	vmul.f32	s4, s15, s4
 800cf1c:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800cf20:	ee27 3a81 	vmul.f32	s6, s15, s2
 800cf24:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800cf28:	ee27 4a80 	vmul.f32	s8, s15, s0
 800cf2c:	ee67 4a88 	vmul.f32	s9, s15, s16
 800cf30:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800cf34:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	ee3b ba02 	vadd.f32	s22, s22, s4
 800cf3e:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800cf42:	eeb0 2a61 	vmov.f32	s4, s3
 800cf46:	ee3a aa03 	vadd.f32	s20, s20, s6
 800cf4a:	eef0 1a41 	vmov.f32	s3, s2
 800cf4e:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800cf52:	eeb0 1a60 	vmov.f32	s2, s1
 800cf56:	ee39 9a04 	vadd.f32	s18, s18, s8
 800cf5a:	eef0 0a40 	vmov.f32	s1, s0
 800cf5e:	ee36 6a24 	vadd.f32	s12, s12, s9
 800cf62:	eeb0 0a48 	vmov.f32	s0, s16
 800cf66:	ee7b ba85 	vadd.f32	s23, s23, s10
 800cf6a:	eeb0 8a68 	vmov.f32	s16, s17
 800cf6e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800cf72:	eef0 8a65 	vmov.f32	s17, s11
 800cf76:	d1cb      	bne.n	800cf10 <arm_fir_f32+0x358>
 800cf78:	f1bc 0c01 	subs.w	ip, ip, #1
 800cf7c:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 800cf80:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800cf84:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 800cf88:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 800cf8c:	ed04 9a04 	vstr	s18, [r4, #-16]
 800cf90:	ed04 6a03 	vstr	s12, [r4, #-12]
 800cf94:	ed44 ba02 	vstr	s23, [r4, #-8]
 800cf98:	ed44 6a01 	vstr	s13, [r4, #-4]
 800cf9c:	f106 0620 	add.w	r6, r6, #32
 800cfa0:	f105 0520 	add.w	r5, r5, #32
 800cfa4:	f104 0420 	add.w	r4, r4, #32
 800cfa8:	468b      	mov	fp, r1
 800cfaa:	f47f ae3f 	bne.w	800cc2c <arm_fir_f32+0x74>
 800cfae:	9b01      	ldr	r3, [sp, #4]
 800cfb0:	9800      	ldr	r0, [sp, #0]
 800cfb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfb8:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800cfbc:	015b      	lsls	r3, r3, #5
 800cfbe:	4418      	add	r0, r3
 800cfc0:	4419      	add	r1, r3
 800cfc2:	441a      	add	r2, r3
 800cfc4:	4499      	add	r9, r3
 800cfc6:	9000      	str	r0, [sp, #0]
 800cfc8:	9b04      	ldr	r3, [sp, #16]
 800cfca:	f013 0707 	ands.w	r7, r3, #7
 800cfce:	d020      	beq.n	800d012 <arm_fir_f32+0x45a>
 800cfd0:	00bf      	lsls	r7, r7, #2
 800cfd2:	9e00      	ldr	r6, [sp, #0]
 800cfd4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cfd8:	eb01 0c07 	add.w	ip, r1, r7
 800cfdc:	464d      	mov	r5, r9
 800cfde:	f851 3b04 	ldr.w	r3, [r1], #4
 800cfe2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800d060 <arm_fir_f32+0x4a8>
 800cfe6:	f846 3b04 	str.w	r3, [r6], #4
 800cfea:	4674      	mov	r4, lr
 800cfec:	4643      	mov	r3, r8
 800cfee:	4628      	mov	r0, r5
 800cff0:	ecf0 7a01 	vldmia	r0!, {s15}
 800cff4:	ecf4 6a01 	vldmia	r4!, {s13}
 800cff8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cffc:	3b01      	subs	r3, #1
 800cffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d002:	d1f5      	bne.n	800cff0 <arm_fir_f32+0x438>
 800d004:	4561      	cmp	r1, ip
 800d006:	eca2 7a01 	vstmia	r2!, {s14}
 800d00a:	f105 0504 	add.w	r5, r5, #4
 800d00e:	d1e6      	bne.n	800cfde <arm_fir_f32+0x426>
 800d010:	44b9      	add	r9, r7
 800d012:	f108 38ff 	add.w	r8, r8, #4294967295
 800d016:	9b03      	ldr	r3, [sp, #12]
 800d018:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800d01c:	685d      	ldr	r5, [r3, #4]
 800d01e:	d021      	beq.n	800d064 <arm_fir_f32+0x4ac>
 800d020:	f109 0210 	add.w	r2, r9, #16
 800d024:	f105 0310 	add.w	r3, r5, #16
 800d028:	4621      	mov	r1, r4
 800d02a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800d02e:	f843 0c10 	str.w	r0, [r3, #-16]
 800d032:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800d036:	f843 0c0c 	str.w	r0, [r3, #-12]
 800d03a:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800d03e:	f843 0c08 	str.w	r0, [r3, #-8]
 800d042:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d046:	f843 0c04 	str.w	r0, [r3, #-4]
 800d04a:	3901      	subs	r1, #1
 800d04c:	f102 0210 	add.w	r2, r2, #16
 800d050:	f103 0310 	add.w	r3, r3, #16
 800d054:	d1e9      	bne.n	800d02a <arm_fir_f32+0x472>
 800d056:	0124      	lsls	r4, r4, #4
 800d058:	44a1      	add	r9, r4
 800d05a:	4425      	add	r5, r4
 800d05c:	e002      	b.n	800d064 <arm_fir_f32+0x4ac>
 800d05e:	bf00      	nop
 800d060:	00000000 	.word	0x00000000
 800d064:	f018 0803 	ands.w	r8, r8, #3
 800d068:	d00e      	beq.n	800d088 <arm_fir_f32+0x4d0>
 800d06a:	f8d9 3000 	ldr.w	r3, [r9]
 800d06e:	602b      	str	r3, [r5, #0]
 800d070:	f1b8 0801 	subs.w	r8, r8, #1
 800d074:	d008      	beq.n	800d088 <arm_fir_f32+0x4d0>
 800d076:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d07a:	606b      	str	r3, [r5, #4]
 800d07c:	f1b8 0f01 	cmp.w	r8, #1
 800d080:	bf1c      	itt	ne
 800d082:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800d086:	60ab      	strne	r3, [r5, #8]
 800d088:	b00b      	add	sp, #44	@ 0x2c
 800d08a:	ecbd 8b10 	vpop	{d8-d15}
 800d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d092:	eef0 ba66 	vmov.f32	s23, s13
 800d096:	eeb0 6a66 	vmov.f32	s12, s13
 800d09a:	eeb0 9a66 	vmov.f32	s18, s13
 800d09e:	eef0 9a66 	vmov.f32	s19, s13
 800d0a2:	eeb0 aa66 	vmov.f32	s20, s13
 800d0a6:	eef0 aa66 	vmov.f32	s21, s13
 800d0aa:	eeb0 ba66 	vmov.f32	s22, s13
 800d0ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d0b2:	f102 0120 	add.w	r1, r2, #32
 800d0b6:	e729      	b.n	800cf0c <arm_fir_f32+0x354>

0800d0b8 <__cvt>:
 800d0b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	ec57 6b10 	vmov	r6, r7, d0
 800d0c0:	2f00      	cmp	r7, #0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	463b      	mov	r3, r7
 800d0c8:	bfbb      	ittet	lt
 800d0ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d0ce:	461f      	movlt	r7, r3
 800d0d0:	2300      	movge	r3, #0
 800d0d2:	232d      	movlt	r3, #45	@ 0x2d
 800d0d4:	700b      	strb	r3, [r1, #0]
 800d0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d0dc:	4691      	mov	r9, r2
 800d0de:	f023 0820 	bic.w	r8, r3, #32
 800d0e2:	bfbc      	itt	lt
 800d0e4:	4632      	movlt	r2, r6
 800d0e6:	4616      	movlt	r6, r2
 800d0e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d0ec:	d005      	beq.n	800d0fa <__cvt+0x42>
 800d0ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d0f2:	d100      	bne.n	800d0f6 <__cvt+0x3e>
 800d0f4:	3401      	adds	r4, #1
 800d0f6:	2102      	movs	r1, #2
 800d0f8:	e000      	b.n	800d0fc <__cvt+0x44>
 800d0fa:	2103      	movs	r1, #3
 800d0fc:	ab03      	add	r3, sp, #12
 800d0fe:	9301      	str	r3, [sp, #4]
 800d100:	ab02      	add	r3, sp, #8
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	ec47 6b10 	vmov	d0, r6, r7
 800d108:	4653      	mov	r3, sl
 800d10a:	4622      	mov	r2, r4
 800d10c:	f001 fa38 	bl	800e580 <_dtoa_r>
 800d110:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d114:	4605      	mov	r5, r0
 800d116:	d119      	bne.n	800d14c <__cvt+0x94>
 800d118:	f019 0f01 	tst.w	r9, #1
 800d11c:	d00e      	beq.n	800d13c <__cvt+0x84>
 800d11e:	eb00 0904 	add.w	r9, r0, r4
 800d122:	2200      	movs	r2, #0
 800d124:	2300      	movs	r3, #0
 800d126:	4630      	mov	r0, r6
 800d128:	4639      	mov	r1, r7
 800d12a:	f7f3 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d12e:	b108      	cbz	r0, 800d134 <__cvt+0x7c>
 800d130:	f8cd 900c 	str.w	r9, [sp, #12]
 800d134:	2230      	movs	r2, #48	@ 0x30
 800d136:	9b03      	ldr	r3, [sp, #12]
 800d138:	454b      	cmp	r3, r9
 800d13a:	d31e      	bcc.n	800d17a <__cvt+0xc2>
 800d13c:	9b03      	ldr	r3, [sp, #12]
 800d13e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d140:	1b5b      	subs	r3, r3, r5
 800d142:	4628      	mov	r0, r5
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	b004      	add	sp, #16
 800d148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d150:	eb00 0904 	add.w	r9, r0, r4
 800d154:	d1e5      	bne.n	800d122 <__cvt+0x6a>
 800d156:	7803      	ldrb	r3, [r0, #0]
 800d158:	2b30      	cmp	r3, #48	@ 0x30
 800d15a:	d10a      	bne.n	800d172 <__cvt+0xba>
 800d15c:	2200      	movs	r2, #0
 800d15e:	2300      	movs	r3, #0
 800d160:	4630      	mov	r0, r6
 800d162:	4639      	mov	r1, r7
 800d164:	f7f3 fcb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d168:	b918      	cbnz	r0, 800d172 <__cvt+0xba>
 800d16a:	f1c4 0401 	rsb	r4, r4, #1
 800d16e:	f8ca 4000 	str.w	r4, [sl]
 800d172:	f8da 3000 	ldr.w	r3, [sl]
 800d176:	4499      	add	r9, r3
 800d178:	e7d3      	b.n	800d122 <__cvt+0x6a>
 800d17a:	1c59      	adds	r1, r3, #1
 800d17c:	9103      	str	r1, [sp, #12]
 800d17e:	701a      	strb	r2, [r3, #0]
 800d180:	e7d9      	b.n	800d136 <__cvt+0x7e>

0800d182 <__exponent>:
 800d182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d184:	2900      	cmp	r1, #0
 800d186:	bfba      	itte	lt
 800d188:	4249      	neglt	r1, r1
 800d18a:	232d      	movlt	r3, #45	@ 0x2d
 800d18c:	232b      	movge	r3, #43	@ 0x2b
 800d18e:	2909      	cmp	r1, #9
 800d190:	7002      	strb	r2, [r0, #0]
 800d192:	7043      	strb	r3, [r0, #1]
 800d194:	dd29      	ble.n	800d1ea <__exponent+0x68>
 800d196:	f10d 0307 	add.w	r3, sp, #7
 800d19a:	461d      	mov	r5, r3
 800d19c:	270a      	movs	r7, #10
 800d19e:	461a      	mov	r2, r3
 800d1a0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d1a4:	fb07 1416 	mls	r4, r7, r6, r1
 800d1a8:	3430      	adds	r4, #48	@ 0x30
 800d1aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	2c63      	cmp	r4, #99	@ 0x63
 800d1b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1b6:	4631      	mov	r1, r6
 800d1b8:	dcf1      	bgt.n	800d19e <__exponent+0x1c>
 800d1ba:	3130      	adds	r1, #48	@ 0x30
 800d1bc:	1e94      	subs	r4, r2, #2
 800d1be:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d1c2:	1c41      	adds	r1, r0, #1
 800d1c4:	4623      	mov	r3, r4
 800d1c6:	42ab      	cmp	r3, r5
 800d1c8:	d30a      	bcc.n	800d1e0 <__exponent+0x5e>
 800d1ca:	f10d 0309 	add.w	r3, sp, #9
 800d1ce:	1a9b      	subs	r3, r3, r2
 800d1d0:	42ac      	cmp	r4, r5
 800d1d2:	bf88      	it	hi
 800d1d4:	2300      	movhi	r3, #0
 800d1d6:	3302      	adds	r3, #2
 800d1d8:	4403      	add	r3, r0
 800d1da:	1a18      	subs	r0, r3, r0
 800d1dc:	b003      	add	sp, #12
 800d1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d1e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d1e8:	e7ed      	b.n	800d1c6 <__exponent+0x44>
 800d1ea:	2330      	movs	r3, #48	@ 0x30
 800d1ec:	3130      	adds	r1, #48	@ 0x30
 800d1ee:	7083      	strb	r3, [r0, #2]
 800d1f0:	70c1      	strb	r1, [r0, #3]
 800d1f2:	1d03      	adds	r3, r0, #4
 800d1f4:	e7f1      	b.n	800d1da <__exponent+0x58>
	...

0800d1f8 <_printf_float>:
 800d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	b08d      	sub	sp, #52	@ 0x34
 800d1fe:	460c      	mov	r4, r1
 800d200:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d204:	4616      	mov	r6, r2
 800d206:	461f      	mov	r7, r3
 800d208:	4605      	mov	r5, r0
 800d20a:	f001 f885 	bl	800e318 <_localeconv_r>
 800d20e:	6803      	ldr	r3, [r0, #0]
 800d210:	9304      	str	r3, [sp, #16]
 800d212:	4618      	mov	r0, r3
 800d214:	f7f3 f82c 	bl	8000270 <strlen>
 800d218:	2300      	movs	r3, #0
 800d21a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d21c:	f8d8 3000 	ldr.w	r3, [r8]
 800d220:	9005      	str	r0, [sp, #20]
 800d222:	3307      	adds	r3, #7
 800d224:	f023 0307 	bic.w	r3, r3, #7
 800d228:	f103 0208 	add.w	r2, r3, #8
 800d22c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d230:	f8d4 b000 	ldr.w	fp, [r4]
 800d234:	f8c8 2000 	str.w	r2, [r8]
 800d238:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d23c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d240:	9307      	str	r3, [sp, #28]
 800d242:	f8cd 8018 	str.w	r8, [sp, #24]
 800d246:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d24a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d24e:	4b9c      	ldr	r3, [pc, #624]	@ (800d4c0 <_printf_float+0x2c8>)
 800d250:	f04f 32ff 	mov.w	r2, #4294967295
 800d254:	f7f3 fc6a 	bl	8000b2c <__aeabi_dcmpun>
 800d258:	bb70      	cbnz	r0, 800d2b8 <_printf_float+0xc0>
 800d25a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d25e:	4b98      	ldr	r3, [pc, #608]	@ (800d4c0 <_printf_float+0x2c8>)
 800d260:	f04f 32ff 	mov.w	r2, #4294967295
 800d264:	f7f3 fc44 	bl	8000af0 <__aeabi_dcmple>
 800d268:	bb30      	cbnz	r0, 800d2b8 <_printf_float+0xc0>
 800d26a:	2200      	movs	r2, #0
 800d26c:	2300      	movs	r3, #0
 800d26e:	4640      	mov	r0, r8
 800d270:	4649      	mov	r1, r9
 800d272:	f7f3 fc33 	bl	8000adc <__aeabi_dcmplt>
 800d276:	b110      	cbz	r0, 800d27e <_printf_float+0x86>
 800d278:	232d      	movs	r3, #45	@ 0x2d
 800d27a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d27e:	4a91      	ldr	r2, [pc, #580]	@ (800d4c4 <_printf_float+0x2cc>)
 800d280:	4b91      	ldr	r3, [pc, #580]	@ (800d4c8 <_printf_float+0x2d0>)
 800d282:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d286:	bf8c      	ite	hi
 800d288:	4690      	movhi	r8, r2
 800d28a:	4698      	movls	r8, r3
 800d28c:	2303      	movs	r3, #3
 800d28e:	6123      	str	r3, [r4, #16]
 800d290:	f02b 0304 	bic.w	r3, fp, #4
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	f04f 0900 	mov.w	r9, #0
 800d29a:	9700      	str	r7, [sp, #0]
 800d29c:	4633      	mov	r3, r6
 800d29e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 f9d2 	bl	800d64c <_printf_common>
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	f040 808d 	bne.w	800d3c8 <_printf_float+0x1d0>
 800d2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b2:	b00d      	add	sp, #52	@ 0x34
 800d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	4640      	mov	r0, r8
 800d2be:	4649      	mov	r1, r9
 800d2c0:	f7f3 fc34 	bl	8000b2c <__aeabi_dcmpun>
 800d2c4:	b140      	cbz	r0, 800d2d8 <_printf_float+0xe0>
 800d2c6:	464b      	mov	r3, r9
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	bfbc      	itt	lt
 800d2cc:	232d      	movlt	r3, #45	@ 0x2d
 800d2ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d2d2:	4a7e      	ldr	r2, [pc, #504]	@ (800d4cc <_printf_float+0x2d4>)
 800d2d4:	4b7e      	ldr	r3, [pc, #504]	@ (800d4d0 <_printf_float+0x2d8>)
 800d2d6:	e7d4      	b.n	800d282 <_printf_float+0x8a>
 800d2d8:	6863      	ldr	r3, [r4, #4]
 800d2da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d2de:	9206      	str	r2, [sp, #24]
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	d13b      	bne.n	800d35c <_printf_float+0x164>
 800d2e4:	2306      	movs	r3, #6
 800d2e6:	6063      	str	r3, [r4, #4]
 800d2e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	6022      	str	r2, [r4, #0]
 800d2f0:	9303      	str	r3, [sp, #12]
 800d2f2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d2f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d2f8:	ab09      	add	r3, sp, #36	@ 0x24
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	6861      	ldr	r1, [r4, #4]
 800d2fe:	ec49 8b10 	vmov	d0, r8, r9
 800d302:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d306:	4628      	mov	r0, r5
 800d308:	f7ff fed6 	bl	800d0b8 <__cvt>
 800d30c:	9b06      	ldr	r3, [sp, #24]
 800d30e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d310:	2b47      	cmp	r3, #71	@ 0x47
 800d312:	4680      	mov	r8, r0
 800d314:	d129      	bne.n	800d36a <_printf_float+0x172>
 800d316:	1cc8      	adds	r0, r1, #3
 800d318:	db02      	blt.n	800d320 <_printf_float+0x128>
 800d31a:	6863      	ldr	r3, [r4, #4]
 800d31c:	4299      	cmp	r1, r3
 800d31e:	dd41      	ble.n	800d3a4 <_printf_float+0x1ac>
 800d320:	f1aa 0a02 	sub.w	sl, sl, #2
 800d324:	fa5f fa8a 	uxtb.w	sl, sl
 800d328:	3901      	subs	r1, #1
 800d32a:	4652      	mov	r2, sl
 800d32c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d330:	9109      	str	r1, [sp, #36]	@ 0x24
 800d332:	f7ff ff26 	bl	800d182 <__exponent>
 800d336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d338:	1813      	adds	r3, r2, r0
 800d33a:	2a01      	cmp	r2, #1
 800d33c:	4681      	mov	r9, r0
 800d33e:	6123      	str	r3, [r4, #16]
 800d340:	dc02      	bgt.n	800d348 <_printf_float+0x150>
 800d342:	6822      	ldr	r2, [r4, #0]
 800d344:	07d2      	lsls	r2, r2, #31
 800d346:	d501      	bpl.n	800d34c <_printf_float+0x154>
 800d348:	3301      	adds	r3, #1
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d350:	2b00      	cmp	r3, #0
 800d352:	d0a2      	beq.n	800d29a <_printf_float+0xa2>
 800d354:	232d      	movs	r3, #45	@ 0x2d
 800d356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d35a:	e79e      	b.n	800d29a <_printf_float+0xa2>
 800d35c:	9a06      	ldr	r2, [sp, #24]
 800d35e:	2a47      	cmp	r2, #71	@ 0x47
 800d360:	d1c2      	bne.n	800d2e8 <_printf_float+0xf0>
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1c0      	bne.n	800d2e8 <_printf_float+0xf0>
 800d366:	2301      	movs	r3, #1
 800d368:	e7bd      	b.n	800d2e6 <_printf_float+0xee>
 800d36a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d36e:	d9db      	bls.n	800d328 <_printf_float+0x130>
 800d370:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d374:	d118      	bne.n	800d3a8 <_printf_float+0x1b0>
 800d376:	2900      	cmp	r1, #0
 800d378:	6863      	ldr	r3, [r4, #4]
 800d37a:	dd0b      	ble.n	800d394 <_printf_float+0x19c>
 800d37c:	6121      	str	r1, [r4, #16]
 800d37e:	b913      	cbnz	r3, 800d386 <_printf_float+0x18e>
 800d380:	6822      	ldr	r2, [r4, #0]
 800d382:	07d0      	lsls	r0, r2, #31
 800d384:	d502      	bpl.n	800d38c <_printf_float+0x194>
 800d386:	3301      	adds	r3, #1
 800d388:	440b      	add	r3, r1
 800d38a:	6123      	str	r3, [r4, #16]
 800d38c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d38e:	f04f 0900 	mov.w	r9, #0
 800d392:	e7db      	b.n	800d34c <_printf_float+0x154>
 800d394:	b913      	cbnz	r3, 800d39c <_printf_float+0x1a4>
 800d396:	6822      	ldr	r2, [r4, #0]
 800d398:	07d2      	lsls	r2, r2, #31
 800d39a:	d501      	bpl.n	800d3a0 <_printf_float+0x1a8>
 800d39c:	3302      	adds	r3, #2
 800d39e:	e7f4      	b.n	800d38a <_printf_float+0x192>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e7f2      	b.n	800d38a <_printf_float+0x192>
 800d3a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3aa:	4299      	cmp	r1, r3
 800d3ac:	db05      	blt.n	800d3ba <_printf_float+0x1c2>
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	6121      	str	r1, [r4, #16]
 800d3b2:	07d8      	lsls	r0, r3, #31
 800d3b4:	d5ea      	bpl.n	800d38c <_printf_float+0x194>
 800d3b6:	1c4b      	adds	r3, r1, #1
 800d3b8:	e7e7      	b.n	800d38a <_printf_float+0x192>
 800d3ba:	2900      	cmp	r1, #0
 800d3bc:	bfd4      	ite	le
 800d3be:	f1c1 0202 	rsble	r2, r1, #2
 800d3c2:	2201      	movgt	r2, #1
 800d3c4:	4413      	add	r3, r2
 800d3c6:	e7e0      	b.n	800d38a <_printf_float+0x192>
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	055a      	lsls	r2, r3, #21
 800d3cc:	d407      	bmi.n	800d3de <_printf_float+0x1e6>
 800d3ce:	6923      	ldr	r3, [r4, #16]
 800d3d0:	4642      	mov	r2, r8
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b8      	blx	r7
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d12b      	bne.n	800d434 <_printf_float+0x23c>
 800d3dc:	e767      	b.n	800d2ae <_printf_float+0xb6>
 800d3de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d3e2:	f240 80dd 	bls.w	800d5a0 <_printf_float+0x3a8>
 800d3e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f7f3 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d033      	beq.n	800d45e <_printf_float+0x266>
 800d3f6:	4a37      	ldr	r2, [pc, #220]	@ (800d4d4 <_printf_float+0x2dc>)
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	47b8      	blx	r7
 800d400:	3001      	adds	r0, #1
 800d402:	f43f af54 	beq.w	800d2ae <_printf_float+0xb6>
 800d406:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d40a:	4543      	cmp	r3, r8
 800d40c:	db02      	blt.n	800d414 <_printf_float+0x21c>
 800d40e:	6823      	ldr	r3, [r4, #0]
 800d410:	07d8      	lsls	r0, r3, #31
 800d412:	d50f      	bpl.n	800d434 <_printf_float+0x23c>
 800d414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d418:	4631      	mov	r1, r6
 800d41a:	4628      	mov	r0, r5
 800d41c:	47b8      	blx	r7
 800d41e:	3001      	adds	r0, #1
 800d420:	f43f af45 	beq.w	800d2ae <_printf_float+0xb6>
 800d424:	f04f 0900 	mov.w	r9, #0
 800d428:	f108 38ff 	add.w	r8, r8, #4294967295
 800d42c:	f104 0a1a 	add.w	sl, r4, #26
 800d430:	45c8      	cmp	r8, r9
 800d432:	dc09      	bgt.n	800d448 <_printf_float+0x250>
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	079b      	lsls	r3, r3, #30
 800d438:	f100 8103 	bmi.w	800d642 <_printf_float+0x44a>
 800d43c:	68e0      	ldr	r0, [r4, #12]
 800d43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d440:	4298      	cmp	r0, r3
 800d442:	bfb8      	it	lt
 800d444:	4618      	movlt	r0, r3
 800d446:	e734      	b.n	800d2b2 <_printf_float+0xba>
 800d448:	2301      	movs	r3, #1
 800d44a:	4652      	mov	r2, sl
 800d44c:	4631      	mov	r1, r6
 800d44e:	4628      	mov	r0, r5
 800d450:	47b8      	blx	r7
 800d452:	3001      	adds	r0, #1
 800d454:	f43f af2b 	beq.w	800d2ae <_printf_float+0xb6>
 800d458:	f109 0901 	add.w	r9, r9, #1
 800d45c:	e7e8      	b.n	800d430 <_printf_float+0x238>
 800d45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d460:	2b00      	cmp	r3, #0
 800d462:	dc39      	bgt.n	800d4d8 <_printf_float+0x2e0>
 800d464:	4a1b      	ldr	r2, [pc, #108]	@ (800d4d4 <_printf_float+0x2dc>)
 800d466:	2301      	movs	r3, #1
 800d468:	4631      	mov	r1, r6
 800d46a:	4628      	mov	r0, r5
 800d46c:	47b8      	blx	r7
 800d46e:	3001      	adds	r0, #1
 800d470:	f43f af1d 	beq.w	800d2ae <_printf_float+0xb6>
 800d474:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d478:	ea59 0303 	orrs.w	r3, r9, r3
 800d47c:	d102      	bne.n	800d484 <_printf_float+0x28c>
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	07d9      	lsls	r1, r3, #31
 800d482:	d5d7      	bpl.n	800d434 <_printf_float+0x23c>
 800d484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d488:	4631      	mov	r1, r6
 800d48a:	4628      	mov	r0, r5
 800d48c:	47b8      	blx	r7
 800d48e:	3001      	adds	r0, #1
 800d490:	f43f af0d 	beq.w	800d2ae <_printf_float+0xb6>
 800d494:	f04f 0a00 	mov.w	sl, #0
 800d498:	f104 0b1a 	add.w	fp, r4, #26
 800d49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d49e:	425b      	negs	r3, r3
 800d4a0:	4553      	cmp	r3, sl
 800d4a2:	dc01      	bgt.n	800d4a8 <_printf_float+0x2b0>
 800d4a4:	464b      	mov	r3, r9
 800d4a6:	e793      	b.n	800d3d0 <_printf_float+0x1d8>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	465a      	mov	r2, fp
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	47b8      	blx	r7
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	f43f aefb 	beq.w	800d2ae <_printf_float+0xb6>
 800d4b8:	f10a 0a01 	add.w	sl, sl, #1
 800d4bc:	e7ee      	b.n	800d49c <_printf_float+0x2a4>
 800d4be:	bf00      	nop
 800d4c0:	7fefffff 	.word	0x7fefffff
 800d4c4:	080122c0 	.word	0x080122c0
 800d4c8:	080122bc 	.word	0x080122bc
 800d4cc:	080122c8 	.word	0x080122c8
 800d4d0:	080122c4 	.word	0x080122c4
 800d4d4:	080122cc 	.word	0x080122cc
 800d4d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d4da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d4de:	4553      	cmp	r3, sl
 800d4e0:	bfa8      	it	ge
 800d4e2:	4653      	movge	r3, sl
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	4699      	mov	r9, r3
 800d4e8:	dc36      	bgt.n	800d558 <_printf_float+0x360>
 800d4ea:	f04f 0b00 	mov.w	fp, #0
 800d4ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4f2:	f104 021a 	add.w	r2, r4, #26
 800d4f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d4f8:	9306      	str	r3, [sp, #24]
 800d4fa:	eba3 0309 	sub.w	r3, r3, r9
 800d4fe:	455b      	cmp	r3, fp
 800d500:	dc31      	bgt.n	800d566 <_printf_float+0x36e>
 800d502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d504:	459a      	cmp	sl, r3
 800d506:	dc3a      	bgt.n	800d57e <_printf_float+0x386>
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	07da      	lsls	r2, r3, #31
 800d50c:	d437      	bmi.n	800d57e <_printf_float+0x386>
 800d50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d510:	ebaa 0903 	sub.w	r9, sl, r3
 800d514:	9b06      	ldr	r3, [sp, #24]
 800d516:	ebaa 0303 	sub.w	r3, sl, r3
 800d51a:	4599      	cmp	r9, r3
 800d51c:	bfa8      	it	ge
 800d51e:	4699      	movge	r9, r3
 800d520:	f1b9 0f00 	cmp.w	r9, #0
 800d524:	dc33      	bgt.n	800d58e <_printf_float+0x396>
 800d526:	f04f 0800 	mov.w	r8, #0
 800d52a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d52e:	f104 0b1a 	add.w	fp, r4, #26
 800d532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d534:	ebaa 0303 	sub.w	r3, sl, r3
 800d538:	eba3 0309 	sub.w	r3, r3, r9
 800d53c:	4543      	cmp	r3, r8
 800d53e:	f77f af79 	ble.w	800d434 <_printf_float+0x23c>
 800d542:	2301      	movs	r3, #1
 800d544:	465a      	mov	r2, fp
 800d546:	4631      	mov	r1, r6
 800d548:	4628      	mov	r0, r5
 800d54a:	47b8      	blx	r7
 800d54c:	3001      	adds	r0, #1
 800d54e:	f43f aeae 	beq.w	800d2ae <_printf_float+0xb6>
 800d552:	f108 0801 	add.w	r8, r8, #1
 800d556:	e7ec      	b.n	800d532 <_printf_float+0x33a>
 800d558:	4642      	mov	r2, r8
 800d55a:	4631      	mov	r1, r6
 800d55c:	4628      	mov	r0, r5
 800d55e:	47b8      	blx	r7
 800d560:	3001      	adds	r0, #1
 800d562:	d1c2      	bne.n	800d4ea <_printf_float+0x2f2>
 800d564:	e6a3      	b.n	800d2ae <_printf_float+0xb6>
 800d566:	2301      	movs	r3, #1
 800d568:	4631      	mov	r1, r6
 800d56a:	4628      	mov	r0, r5
 800d56c:	9206      	str	r2, [sp, #24]
 800d56e:	47b8      	blx	r7
 800d570:	3001      	adds	r0, #1
 800d572:	f43f ae9c 	beq.w	800d2ae <_printf_float+0xb6>
 800d576:	9a06      	ldr	r2, [sp, #24]
 800d578:	f10b 0b01 	add.w	fp, fp, #1
 800d57c:	e7bb      	b.n	800d4f6 <_printf_float+0x2fe>
 800d57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d582:	4631      	mov	r1, r6
 800d584:	4628      	mov	r0, r5
 800d586:	47b8      	blx	r7
 800d588:	3001      	adds	r0, #1
 800d58a:	d1c0      	bne.n	800d50e <_printf_float+0x316>
 800d58c:	e68f      	b.n	800d2ae <_printf_float+0xb6>
 800d58e:	9a06      	ldr	r2, [sp, #24]
 800d590:	464b      	mov	r3, r9
 800d592:	4442      	add	r2, r8
 800d594:	4631      	mov	r1, r6
 800d596:	4628      	mov	r0, r5
 800d598:	47b8      	blx	r7
 800d59a:	3001      	adds	r0, #1
 800d59c:	d1c3      	bne.n	800d526 <_printf_float+0x32e>
 800d59e:	e686      	b.n	800d2ae <_printf_float+0xb6>
 800d5a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5a4:	f1ba 0f01 	cmp.w	sl, #1
 800d5a8:	dc01      	bgt.n	800d5ae <_printf_float+0x3b6>
 800d5aa:	07db      	lsls	r3, r3, #31
 800d5ac:	d536      	bpl.n	800d61c <_printf_float+0x424>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	4642      	mov	r2, r8
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	47b8      	blx	r7
 800d5b8:	3001      	adds	r0, #1
 800d5ba:	f43f ae78 	beq.w	800d2ae <_printf_float+0xb6>
 800d5be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	47b8      	blx	r7
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	f43f ae70 	beq.w	800d2ae <_printf_float+0xb6>
 800d5ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5da:	f7f3 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5de:	b9c0      	cbnz	r0, 800d612 <_printf_float+0x41a>
 800d5e0:	4653      	mov	r3, sl
 800d5e2:	f108 0201 	add.w	r2, r8, #1
 800d5e6:	4631      	mov	r1, r6
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	47b8      	blx	r7
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	d10c      	bne.n	800d60a <_printf_float+0x412>
 800d5f0:	e65d      	b.n	800d2ae <_printf_float+0xb6>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	465a      	mov	r2, fp
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	47b8      	blx	r7
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	f43f ae56 	beq.w	800d2ae <_printf_float+0xb6>
 800d602:	f108 0801 	add.w	r8, r8, #1
 800d606:	45d0      	cmp	r8, sl
 800d608:	dbf3      	blt.n	800d5f2 <_printf_float+0x3fa>
 800d60a:	464b      	mov	r3, r9
 800d60c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d610:	e6df      	b.n	800d3d2 <_printf_float+0x1da>
 800d612:	f04f 0800 	mov.w	r8, #0
 800d616:	f104 0b1a 	add.w	fp, r4, #26
 800d61a:	e7f4      	b.n	800d606 <_printf_float+0x40e>
 800d61c:	2301      	movs	r3, #1
 800d61e:	4642      	mov	r2, r8
 800d620:	e7e1      	b.n	800d5e6 <_printf_float+0x3ee>
 800d622:	2301      	movs	r3, #1
 800d624:	464a      	mov	r2, r9
 800d626:	4631      	mov	r1, r6
 800d628:	4628      	mov	r0, r5
 800d62a:	47b8      	blx	r7
 800d62c:	3001      	adds	r0, #1
 800d62e:	f43f ae3e 	beq.w	800d2ae <_printf_float+0xb6>
 800d632:	f108 0801 	add.w	r8, r8, #1
 800d636:	68e3      	ldr	r3, [r4, #12]
 800d638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d63a:	1a5b      	subs	r3, r3, r1
 800d63c:	4543      	cmp	r3, r8
 800d63e:	dcf0      	bgt.n	800d622 <_printf_float+0x42a>
 800d640:	e6fc      	b.n	800d43c <_printf_float+0x244>
 800d642:	f04f 0800 	mov.w	r8, #0
 800d646:	f104 0919 	add.w	r9, r4, #25
 800d64a:	e7f4      	b.n	800d636 <_printf_float+0x43e>

0800d64c <_printf_common>:
 800d64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d650:	4616      	mov	r6, r2
 800d652:	4698      	mov	r8, r3
 800d654:	688a      	ldr	r2, [r1, #8]
 800d656:	690b      	ldr	r3, [r1, #16]
 800d658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d65c:	4293      	cmp	r3, r2
 800d65e:	bfb8      	it	lt
 800d660:	4613      	movlt	r3, r2
 800d662:	6033      	str	r3, [r6, #0]
 800d664:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d668:	4607      	mov	r7, r0
 800d66a:	460c      	mov	r4, r1
 800d66c:	b10a      	cbz	r2, 800d672 <_printf_common+0x26>
 800d66e:	3301      	adds	r3, #1
 800d670:	6033      	str	r3, [r6, #0]
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	0699      	lsls	r1, r3, #26
 800d676:	bf42      	ittt	mi
 800d678:	6833      	ldrmi	r3, [r6, #0]
 800d67a:	3302      	addmi	r3, #2
 800d67c:	6033      	strmi	r3, [r6, #0]
 800d67e:	6825      	ldr	r5, [r4, #0]
 800d680:	f015 0506 	ands.w	r5, r5, #6
 800d684:	d106      	bne.n	800d694 <_printf_common+0x48>
 800d686:	f104 0a19 	add.w	sl, r4, #25
 800d68a:	68e3      	ldr	r3, [r4, #12]
 800d68c:	6832      	ldr	r2, [r6, #0]
 800d68e:	1a9b      	subs	r3, r3, r2
 800d690:	42ab      	cmp	r3, r5
 800d692:	dc26      	bgt.n	800d6e2 <_printf_common+0x96>
 800d694:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d698:	6822      	ldr	r2, [r4, #0]
 800d69a:	3b00      	subs	r3, #0
 800d69c:	bf18      	it	ne
 800d69e:	2301      	movne	r3, #1
 800d6a0:	0692      	lsls	r2, r2, #26
 800d6a2:	d42b      	bmi.n	800d6fc <_printf_common+0xb0>
 800d6a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d6a8:	4641      	mov	r1, r8
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	47c8      	blx	r9
 800d6ae:	3001      	adds	r0, #1
 800d6b0:	d01e      	beq.n	800d6f0 <_printf_common+0xa4>
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	6922      	ldr	r2, [r4, #16]
 800d6b6:	f003 0306 	and.w	r3, r3, #6
 800d6ba:	2b04      	cmp	r3, #4
 800d6bc:	bf02      	ittt	eq
 800d6be:	68e5      	ldreq	r5, [r4, #12]
 800d6c0:	6833      	ldreq	r3, [r6, #0]
 800d6c2:	1aed      	subeq	r5, r5, r3
 800d6c4:	68a3      	ldr	r3, [r4, #8]
 800d6c6:	bf0c      	ite	eq
 800d6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6cc:	2500      	movne	r5, #0
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	bfc4      	itt	gt
 800d6d2:	1a9b      	subgt	r3, r3, r2
 800d6d4:	18ed      	addgt	r5, r5, r3
 800d6d6:	2600      	movs	r6, #0
 800d6d8:	341a      	adds	r4, #26
 800d6da:	42b5      	cmp	r5, r6
 800d6dc:	d11a      	bne.n	800d714 <_printf_common+0xc8>
 800d6de:	2000      	movs	r0, #0
 800d6e0:	e008      	b.n	800d6f4 <_printf_common+0xa8>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	4652      	mov	r2, sl
 800d6e6:	4641      	mov	r1, r8
 800d6e8:	4638      	mov	r0, r7
 800d6ea:	47c8      	blx	r9
 800d6ec:	3001      	adds	r0, #1
 800d6ee:	d103      	bne.n	800d6f8 <_printf_common+0xac>
 800d6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f8:	3501      	adds	r5, #1
 800d6fa:	e7c6      	b.n	800d68a <_printf_common+0x3e>
 800d6fc:	18e1      	adds	r1, r4, r3
 800d6fe:	1c5a      	adds	r2, r3, #1
 800d700:	2030      	movs	r0, #48	@ 0x30
 800d702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d706:	4422      	add	r2, r4
 800d708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d70c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d710:	3302      	adds	r3, #2
 800d712:	e7c7      	b.n	800d6a4 <_printf_common+0x58>
 800d714:	2301      	movs	r3, #1
 800d716:	4622      	mov	r2, r4
 800d718:	4641      	mov	r1, r8
 800d71a:	4638      	mov	r0, r7
 800d71c:	47c8      	blx	r9
 800d71e:	3001      	adds	r0, #1
 800d720:	d0e6      	beq.n	800d6f0 <_printf_common+0xa4>
 800d722:	3601      	adds	r6, #1
 800d724:	e7d9      	b.n	800d6da <_printf_common+0x8e>
	...

0800d728 <_printf_i>:
 800d728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d72c:	7e0f      	ldrb	r7, [r1, #24]
 800d72e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d730:	2f78      	cmp	r7, #120	@ 0x78
 800d732:	4691      	mov	r9, r2
 800d734:	4680      	mov	r8, r0
 800d736:	460c      	mov	r4, r1
 800d738:	469a      	mov	sl, r3
 800d73a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d73e:	d807      	bhi.n	800d750 <_printf_i+0x28>
 800d740:	2f62      	cmp	r7, #98	@ 0x62
 800d742:	d80a      	bhi.n	800d75a <_printf_i+0x32>
 800d744:	2f00      	cmp	r7, #0
 800d746:	f000 80d1 	beq.w	800d8ec <_printf_i+0x1c4>
 800d74a:	2f58      	cmp	r7, #88	@ 0x58
 800d74c:	f000 80b8 	beq.w	800d8c0 <_printf_i+0x198>
 800d750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d758:	e03a      	b.n	800d7d0 <_printf_i+0xa8>
 800d75a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d75e:	2b15      	cmp	r3, #21
 800d760:	d8f6      	bhi.n	800d750 <_printf_i+0x28>
 800d762:	a101      	add	r1, pc, #4	@ (adr r1, 800d768 <_printf_i+0x40>)
 800d764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d768:	0800d7c1 	.word	0x0800d7c1
 800d76c:	0800d7d5 	.word	0x0800d7d5
 800d770:	0800d751 	.word	0x0800d751
 800d774:	0800d751 	.word	0x0800d751
 800d778:	0800d751 	.word	0x0800d751
 800d77c:	0800d751 	.word	0x0800d751
 800d780:	0800d7d5 	.word	0x0800d7d5
 800d784:	0800d751 	.word	0x0800d751
 800d788:	0800d751 	.word	0x0800d751
 800d78c:	0800d751 	.word	0x0800d751
 800d790:	0800d751 	.word	0x0800d751
 800d794:	0800d8d3 	.word	0x0800d8d3
 800d798:	0800d7ff 	.word	0x0800d7ff
 800d79c:	0800d88d 	.word	0x0800d88d
 800d7a0:	0800d751 	.word	0x0800d751
 800d7a4:	0800d751 	.word	0x0800d751
 800d7a8:	0800d8f5 	.word	0x0800d8f5
 800d7ac:	0800d751 	.word	0x0800d751
 800d7b0:	0800d7ff 	.word	0x0800d7ff
 800d7b4:	0800d751 	.word	0x0800d751
 800d7b8:	0800d751 	.word	0x0800d751
 800d7bc:	0800d895 	.word	0x0800d895
 800d7c0:	6833      	ldr	r3, [r6, #0]
 800d7c2:	1d1a      	adds	r2, r3, #4
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	6032      	str	r2, [r6, #0]
 800d7c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e09c      	b.n	800d90e <_printf_i+0x1e6>
 800d7d4:	6833      	ldr	r3, [r6, #0]
 800d7d6:	6820      	ldr	r0, [r4, #0]
 800d7d8:	1d19      	adds	r1, r3, #4
 800d7da:	6031      	str	r1, [r6, #0]
 800d7dc:	0606      	lsls	r6, r0, #24
 800d7de:	d501      	bpl.n	800d7e4 <_printf_i+0xbc>
 800d7e0:	681d      	ldr	r5, [r3, #0]
 800d7e2:	e003      	b.n	800d7ec <_printf_i+0xc4>
 800d7e4:	0645      	lsls	r5, r0, #25
 800d7e6:	d5fb      	bpl.n	800d7e0 <_printf_i+0xb8>
 800d7e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7ec:	2d00      	cmp	r5, #0
 800d7ee:	da03      	bge.n	800d7f8 <_printf_i+0xd0>
 800d7f0:	232d      	movs	r3, #45	@ 0x2d
 800d7f2:	426d      	negs	r5, r5
 800d7f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7f8:	4858      	ldr	r0, [pc, #352]	@ (800d95c <_printf_i+0x234>)
 800d7fa:	230a      	movs	r3, #10
 800d7fc:	e011      	b.n	800d822 <_printf_i+0xfa>
 800d7fe:	6821      	ldr	r1, [r4, #0]
 800d800:	6833      	ldr	r3, [r6, #0]
 800d802:	0608      	lsls	r0, r1, #24
 800d804:	f853 5b04 	ldr.w	r5, [r3], #4
 800d808:	d402      	bmi.n	800d810 <_printf_i+0xe8>
 800d80a:	0649      	lsls	r1, r1, #25
 800d80c:	bf48      	it	mi
 800d80e:	b2ad      	uxthmi	r5, r5
 800d810:	2f6f      	cmp	r7, #111	@ 0x6f
 800d812:	4852      	ldr	r0, [pc, #328]	@ (800d95c <_printf_i+0x234>)
 800d814:	6033      	str	r3, [r6, #0]
 800d816:	bf14      	ite	ne
 800d818:	230a      	movne	r3, #10
 800d81a:	2308      	moveq	r3, #8
 800d81c:	2100      	movs	r1, #0
 800d81e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d822:	6866      	ldr	r6, [r4, #4]
 800d824:	60a6      	str	r6, [r4, #8]
 800d826:	2e00      	cmp	r6, #0
 800d828:	db05      	blt.n	800d836 <_printf_i+0x10e>
 800d82a:	6821      	ldr	r1, [r4, #0]
 800d82c:	432e      	orrs	r6, r5
 800d82e:	f021 0104 	bic.w	r1, r1, #4
 800d832:	6021      	str	r1, [r4, #0]
 800d834:	d04b      	beq.n	800d8ce <_printf_i+0x1a6>
 800d836:	4616      	mov	r6, r2
 800d838:	fbb5 f1f3 	udiv	r1, r5, r3
 800d83c:	fb03 5711 	mls	r7, r3, r1, r5
 800d840:	5dc7      	ldrb	r7, [r0, r7]
 800d842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d846:	462f      	mov	r7, r5
 800d848:	42bb      	cmp	r3, r7
 800d84a:	460d      	mov	r5, r1
 800d84c:	d9f4      	bls.n	800d838 <_printf_i+0x110>
 800d84e:	2b08      	cmp	r3, #8
 800d850:	d10b      	bne.n	800d86a <_printf_i+0x142>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	07df      	lsls	r7, r3, #31
 800d856:	d508      	bpl.n	800d86a <_printf_i+0x142>
 800d858:	6923      	ldr	r3, [r4, #16]
 800d85a:	6861      	ldr	r1, [r4, #4]
 800d85c:	4299      	cmp	r1, r3
 800d85e:	bfde      	ittt	le
 800d860:	2330      	movle	r3, #48	@ 0x30
 800d862:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d866:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d86a:	1b92      	subs	r2, r2, r6
 800d86c:	6122      	str	r2, [r4, #16]
 800d86e:	f8cd a000 	str.w	sl, [sp]
 800d872:	464b      	mov	r3, r9
 800d874:	aa03      	add	r2, sp, #12
 800d876:	4621      	mov	r1, r4
 800d878:	4640      	mov	r0, r8
 800d87a:	f7ff fee7 	bl	800d64c <_printf_common>
 800d87e:	3001      	adds	r0, #1
 800d880:	d14a      	bne.n	800d918 <_printf_i+0x1f0>
 800d882:	f04f 30ff 	mov.w	r0, #4294967295
 800d886:	b004      	add	sp, #16
 800d888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	f043 0320 	orr.w	r3, r3, #32
 800d892:	6023      	str	r3, [r4, #0]
 800d894:	4832      	ldr	r0, [pc, #200]	@ (800d960 <_printf_i+0x238>)
 800d896:	2778      	movs	r7, #120	@ 0x78
 800d898:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d89c:	6823      	ldr	r3, [r4, #0]
 800d89e:	6831      	ldr	r1, [r6, #0]
 800d8a0:	061f      	lsls	r7, r3, #24
 800d8a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d8a6:	d402      	bmi.n	800d8ae <_printf_i+0x186>
 800d8a8:	065f      	lsls	r7, r3, #25
 800d8aa:	bf48      	it	mi
 800d8ac:	b2ad      	uxthmi	r5, r5
 800d8ae:	6031      	str	r1, [r6, #0]
 800d8b0:	07d9      	lsls	r1, r3, #31
 800d8b2:	bf44      	itt	mi
 800d8b4:	f043 0320 	orrmi.w	r3, r3, #32
 800d8b8:	6023      	strmi	r3, [r4, #0]
 800d8ba:	b11d      	cbz	r5, 800d8c4 <_printf_i+0x19c>
 800d8bc:	2310      	movs	r3, #16
 800d8be:	e7ad      	b.n	800d81c <_printf_i+0xf4>
 800d8c0:	4826      	ldr	r0, [pc, #152]	@ (800d95c <_printf_i+0x234>)
 800d8c2:	e7e9      	b.n	800d898 <_printf_i+0x170>
 800d8c4:	6823      	ldr	r3, [r4, #0]
 800d8c6:	f023 0320 	bic.w	r3, r3, #32
 800d8ca:	6023      	str	r3, [r4, #0]
 800d8cc:	e7f6      	b.n	800d8bc <_printf_i+0x194>
 800d8ce:	4616      	mov	r6, r2
 800d8d0:	e7bd      	b.n	800d84e <_printf_i+0x126>
 800d8d2:	6833      	ldr	r3, [r6, #0]
 800d8d4:	6825      	ldr	r5, [r4, #0]
 800d8d6:	6961      	ldr	r1, [r4, #20]
 800d8d8:	1d18      	adds	r0, r3, #4
 800d8da:	6030      	str	r0, [r6, #0]
 800d8dc:	062e      	lsls	r6, r5, #24
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	d501      	bpl.n	800d8e6 <_printf_i+0x1be>
 800d8e2:	6019      	str	r1, [r3, #0]
 800d8e4:	e002      	b.n	800d8ec <_printf_i+0x1c4>
 800d8e6:	0668      	lsls	r0, r5, #25
 800d8e8:	d5fb      	bpl.n	800d8e2 <_printf_i+0x1ba>
 800d8ea:	8019      	strh	r1, [r3, #0]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	6123      	str	r3, [r4, #16]
 800d8f0:	4616      	mov	r6, r2
 800d8f2:	e7bc      	b.n	800d86e <_printf_i+0x146>
 800d8f4:	6833      	ldr	r3, [r6, #0]
 800d8f6:	1d1a      	adds	r2, r3, #4
 800d8f8:	6032      	str	r2, [r6, #0]
 800d8fa:	681e      	ldr	r6, [r3, #0]
 800d8fc:	6862      	ldr	r2, [r4, #4]
 800d8fe:	2100      	movs	r1, #0
 800d900:	4630      	mov	r0, r6
 800d902:	f7f2 fc65 	bl	80001d0 <memchr>
 800d906:	b108      	cbz	r0, 800d90c <_printf_i+0x1e4>
 800d908:	1b80      	subs	r0, r0, r6
 800d90a:	6060      	str	r0, [r4, #4]
 800d90c:	6863      	ldr	r3, [r4, #4]
 800d90e:	6123      	str	r3, [r4, #16]
 800d910:	2300      	movs	r3, #0
 800d912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d916:	e7aa      	b.n	800d86e <_printf_i+0x146>
 800d918:	6923      	ldr	r3, [r4, #16]
 800d91a:	4632      	mov	r2, r6
 800d91c:	4649      	mov	r1, r9
 800d91e:	4640      	mov	r0, r8
 800d920:	47d0      	blx	sl
 800d922:	3001      	adds	r0, #1
 800d924:	d0ad      	beq.n	800d882 <_printf_i+0x15a>
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	079b      	lsls	r3, r3, #30
 800d92a:	d413      	bmi.n	800d954 <_printf_i+0x22c>
 800d92c:	68e0      	ldr	r0, [r4, #12]
 800d92e:	9b03      	ldr	r3, [sp, #12]
 800d930:	4298      	cmp	r0, r3
 800d932:	bfb8      	it	lt
 800d934:	4618      	movlt	r0, r3
 800d936:	e7a6      	b.n	800d886 <_printf_i+0x15e>
 800d938:	2301      	movs	r3, #1
 800d93a:	4632      	mov	r2, r6
 800d93c:	4649      	mov	r1, r9
 800d93e:	4640      	mov	r0, r8
 800d940:	47d0      	blx	sl
 800d942:	3001      	adds	r0, #1
 800d944:	d09d      	beq.n	800d882 <_printf_i+0x15a>
 800d946:	3501      	adds	r5, #1
 800d948:	68e3      	ldr	r3, [r4, #12]
 800d94a:	9903      	ldr	r1, [sp, #12]
 800d94c:	1a5b      	subs	r3, r3, r1
 800d94e:	42ab      	cmp	r3, r5
 800d950:	dcf2      	bgt.n	800d938 <_printf_i+0x210>
 800d952:	e7eb      	b.n	800d92c <_printf_i+0x204>
 800d954:	2500      	movs	r5, #0
 800d956:	f104 0619 	add.w	r6, r4, #25
 800d95a:	e7f5      	b.n	800d948 <_printf_i+0x220>
 800d95c:	080122ce 	.word	0x080122ce
 800d960:	080122df 	.word	0x080122df

0800d964 <_scanf_float>:
 800d964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d968:	b087      	sub	sp, #28
 800d96a:	4691      	mov	r9, r2
 800d96c:	9303      	str	r3, [sp, #12]
 800d96e:	688b      	ldr	r3, [r1, #8]
 800d970:	1e5a      	subs	r2, r3, #1
 800d972:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d976:	bf81      	itttt	hi
 800d978:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d97c:	eb03 0b05 	addhi.w	fp, r3, r5
 800d980:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d984:	608b      	strhi	r3, [r1, #8]
 800d986:	680b      	ldr	r3, [r1, #0]
 800d988:	460a      	mov	r2, r1
 800d98a:	f04f 0500 	mov.w	r5, #0
 800d98e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d992:	f842 3b1c 	str.w	r3, [r2], #28
 800d996:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d99a:	4680      	mov	r8, r0
 800d99c:	460c      	mov	r4, r1
 800d99e:	bf98      	it	ls
 800d9a0:	f04f 0b00 	movls.w	fp, #0
 800d9a4:	9201      	str	r2, [sp, #4]
 800d9a6:	4616      	mov	r6, r2
 800d9a8:	46aa      	mov	sl, r5
 800d9aa:	462f      	mov	r7, r5
 800d9ac:	9502      	str	r5, [sp, #8]
 800d9ae:	68a2      	ldr	r2, [r4, #8]
 800d9b0:	b15a      	cbz	r2, 800d9ca <_scanf_float+0x66>
 800d9b2:	f8d9 3000 	ldr.w	r3, [r9]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	2b4e      	cmp	r3, #78	@ 0x4e
 800d9ba:	d863      	bhi.n	800da84 <_scanf_float+0x120>
 800d9bc:	2b40      	cmp	r3, #64	@ 0x40
 800d9be:	d83b      	bhi.n	800da38 <_scanf_float+0xd4>
 800d9c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d9c4:	b2c8      	uxtb	r0, r1
 800d9c6:	280e      	cmp	r0, #14
 800d9c8:	d939      	bls.n	800da3e <_scanf_float+0xda>
 800d9ca:	b11f      	cbz	r7, 800d9d4 <_scanf_float+0x70>
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9d8:	f1ba 0f01 	cmp.w	sl, #1
 800d9dc:	f200 8114 	bhi.w	800dc08 <_scanf_float+0x2a4>
 800d9e0:	9b01      	ldr	r3, [sp, #4]
 800d9e2:	429e      	cmp	r6, r3
 800d9e4:	f200 8105 	bhi.w	800dbf2 <_scanf_float+0x28e>
 800d9e8:	2001      	movs	r0, #1
 800d9ea:	b007      	add	sp, #28
 800d9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d9f4:	2a0d      	cmp	r2, #13
 800d9f6:	d8e8      	bhi.n	800d9ca <_scanf_float+0x66>
 800d9f8:	a101      	add	r1, pc, #4	@ (adr r1, 800da00 <_scanf_float+0x9c>)
 800d9fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d9fe:	bf00      	nop
 800da00:	0800db49 	.word	0x0800db49
 800da04:	0800d9cb 	.word	0x0800d9cb
 800da08:	0800d9cb 	.word	0x0800d9cb
 800da0c:	0800d9cb 	.word	0x0800d9cb
 800da10:	0800dba5 	.word	0x0800dba5
 800da14:	0800db7f 	.word	0x0800db7f
 800da18:	0800d9cb 	.word	0x0800d9cb
 800da1c:	0800d9cb 	.word	0x0800d9cb
 800da20:	0800db57 	.word	0x0800db57
 800da24:	0800d9cb 	.word	0x0800d9cb
 800da28:	0800d9cb 	.word	0x0800d9cb
 800da2c:	0800d9cb 	.word	0x0800d9cb
 800da30:	0800d9cb 	.word	0x0800d9cb
 800da34:	0800db13 	.word	0x0800db13
 800da38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800da3c:	e7da      	b.n	800d9f4 <_scanf_float+0x90>
 800da3e:	290e      	cmp	r1, #14
 800da40:	d8c3      	bhi.n	800d9ca <_scanf_float+0x66>
 800da42:	a001      	add	r0, pc, #4	@ (adr r0, 800da48 <_scanf_float+0xe4>)
 800da44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800da48:	0800db03 	.word	0x0800db03
 800da4c:	0800d9cb 	.word	0x0800d9cb
 800da50:	0800db03 	.word	0x0800db03
 800da54:	0800db93 	.word	0x0800db93
 800da58:	0800d9cb 	.word	0x0800d9cb
 800da5c:	0800daa5 	.word	0x0800daa5
 800da60:	0800dae9 	.word	0x0800dae9
 800da64:	0800dae9 	.word	0x0800dae9
 800da68:	0800dae9 	.word	0x0800dae9
 800da6c:	0800dae9 	.word	0x0800dae9
 800da70:	0800dae9 	.word	0x0800dae9
 800da74:	0800dae9 	.word	0x0800dae9
 800da78:	0800dae9 	.word	0x0800dae9
 800da7c:	0800dae9 	.word	0x0800dae9
 800da80:	0800dae9 	.word	0x0800dae9
 800da84:	2b6e      	cmp	r3, #110	@ 0x6e
 800da86:	d809      	bhi.n	800da9c <_scanf_float+0x138>
 800da88:	2b60      	cmp	r3, #96	@ 0x60
 800da8a:	d8b1      	bhi.n	800d9f0 <_scanf_float+0x8c>
 800da8c:	2b54      	cmp	r3, #84	@ 0x54
 800da8e:	d07b      	beq.n	800db88 <_scanf_float+0x224>
 800da90:	2b59      	cmp	r3, #89	@ 0x59
 800da92:	d19a      	bne.n	800d9ca <_scanf_float+0x66>
 800da94:	2d07      	cmp	r5, #7
 800da96:	d198      	bne.n	800d9ca <_scanf_float+0x66>
 800da98:	2508      	movs	r5, #8
 800da9a:	e02f      	b.n	800dafc <_scanf_float+0x198>
 800da9c:	2b74      	cmp	r3, #116	@ 0x74
 800da9e:	d073      	beq.n	800db88 <_scanf_float+0x224>
 800daa0:	2b79      	cmp	r3, #121	@ 0x79
 800daa2:	e7f6      	b.n	800da92 <_scanf_float+0x12e>
 800daa4:	6821      	ldr	r1, [r4, #0]
 800daa6:	05c8      	lsls	r0, r1, #23
 800daa8:	d51e      	bpl.n	800dae8 <_scanf_float+0x184>
 800daaa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800daae:	6021      	str	r1, [r4, #0]
 800dab0:	3701      	adds	r7, #1
 800dab2:	f1bb 0f00 	cmp.w	fp, #0
 800dab6:	d003      	beq.n	800dac0 <_scanf_float+0x15c>
 800dab8:	3201      	adds	r2, #1
 800daba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dabe:	60a2      	str	r2, [r4, #8]
 800dac0:	68a3      	ldr	r3, [r4, #8]
 800dac2:	3b01      	subs	r3, #1
 800dac4:	60a3      	str	r3, [r4, #8]
 800dac6:	6923      	ldr	r3, [r4, #16]
 800dac8:	3301      	adds	r3, #1
 800daca:	6123      	str	r3, [r4, #16]
 800dacc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dad0:	3b01      	subs	r3, #1
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f8c9 3004 	str.w	r3, [r9, #4]
 800dad8:	f340 8082 	ble.w	800dbe0 <_scanf_float+0x27c>
 800dadc:	f8d9 3000 	ldr.w	r3, [r9]
 800dae0:	3301      	adds	r3, #1
 800dae2:	f8c9 3000 	str.w	r3, [r9]
 800dae6:	e762      	b.n	800d9ae <_scanf_float+0x4a>
 800dae8:	eb1a 0105 	adds.w	r1, sl, r5
 800daec:	f47f af6d 	bne.w	800d9ca <_scanf_float+0x66>
 800daf0:	6822      	ldr	r2, [r4, #0]
 800daf2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800daf6:	6022      	str	r2, [r4, #0]
 800daf8:	460d      	mov	r5, r1
 800dafa:	468a      	mov	sl, r1
 800dafc:	f806 3b01 	strb.w	r3, [r6], #1
 800db00:	e7de      	b.n	800dac0 <_scanf_float+0x15c>
 800db02:	6822      	ldr	r2, [r4, #0]
 800db04:	0610      	lsls	r0, r2, #24
 800db06:	f57f af60 	bpl.w	800d9ca <_scanf_float+0x66>
 800db0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800db0e:	6022      	str	r2, [r4, #0]
 800db10:	e7f4      	b.n	800dafc <_scanf_float+0x198>
 800db12:	f1ba 0f00 	cmp.w	sl, #0
 800db16:	d10c      	bne.n	800db32 <_scanf_float+0x1ce>
 800db18:	b977      	cbnz	r7, 800db38 <_scanf_float+0x1d4>
 800db1a:	6822      	ldr	r2, [r4, #0]
 800db1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800db20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800db24:	d108      	bne.n	800db38 <_scanf_float+0x1d4>
 800db26:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800db2a:	6022      	str	r2, [r4, #0]
 800db2c:	f04f 0a01 	mov.w	sl, #1
 800db30:	e7e4      	b.n	800dafc <_scanf_float+0x198>
 800db32:	f1ba 0f02 	cmp.w	sl, #2
 800db36:	d050      	beq.n	800dbda <_scanf_float+0x276>
 800db38:	2d01      	cmp	r5, #1
 800db3a:	d002      	beq.n	800db42 <_scanf_float+0x1de>
 800db3c:	2d04      	cmp	r5, #4
 800db3e:	f47f af44 	bne.w	800d9ca <_scanf_float+0x66>
 800db42:	3501      	adds	r5, #1
 800db44:	b2ed      	uxtb	r5, r5
 800db46:	e7d9      	b.n	800dafc <_scanf_float+0x198>
 800db48:	f1ba 0f01 	cmp.w	sl, #1
 800db4c:	f47f af3d 	bne.w	800d9ca <_scanf_float+0x66>
 800db50:	f04f 0a02 	mov.w	sl, #2
 800db54:	e7d2      	b.n	800dafc <_scanf_float+0x198>
 800db56:	b975      	cbnz	r5, 800db76 <_scanf_float+0x212>
 800db58:	2f00      	cmp	r7, #0
 800db5a:	f47f af37 	bne.w	800d9cc <_scanf_float+0x68>
 800db5e:	6822      	ldr	r2, [r4, #0]
 800db60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800db64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800db68:	f040 8103 	bne.w	800dd72 <_scanf_float+0x40e>
 800db6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800db70:	6022      	str	r2, [r4, #0]
 800db72:	2501      	movs	r5, #1
 800db74:	e7c2      	b.n	800dafc <_scanf_float+0x198>
 800db76:	2d03      	cmp	r5, #3
 800db78:	d0e3      	beq.n	800db42 <_scanf_float+0x1de>
 800db7a:	2d05      	cmp	r5, #5
 800db7c:	e7df      	b.n	800db3e <_scanf_float+0x1da>
 800db7e:	2d02      	cmp	r5, #2
 800db80:	f47f af23 	bne.w	800d9ca <_scanf_float+0x66>
 800db84:	2503      	movs	r5, #3
 800db86:	e7b9      	b.n	800dafc <_scanf_float+0x198>
 800db88:	2d06      	cmp	r5, #6
 800db8a:	f47f af1e 	bne.w	800d9ca <_scanf_float+0x66>
 800db8e:	2507      	movs	r5, #7
 800db90:	e7b4      	b.n	800dafc <_scanf_float+0x198>
 800db92:	6822      	ldr	r2, [r4, #0]
 800db94:	0591      	lsls	r1, r2, #22
 800db96:	f57f af18 	bpl.w	800d9ca <_scanf_float+0x66>
 800db9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800db9e:	6022      	str	r2, [r4, #0]
 800dba0:	9702      	str	r7, [sp, #8]
 800dba2:	e7ab      	b.n	800dafc <_scanf_float+0x198>
 800dba4:	6822      	ldr	r2, [r4, #0]
 800dba6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800dbaa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dbae:	d005      	beq.n	800dbbc <_scanf_float+0x258>
 800dbb0:	0550      	lsls	r0, r2, #21
 800dbb2:	f57f af0a 	bpl.w	800d9ca <_scanf_float+0x66>
 800dbb6:	2f00      	cmp	r7, #0
 800dbb8:	f000 80db 	beq.w	800dd72 <_scanf_float+0x40e>
 800dbbc:	0591      	lsls	r1, r2, #22
 800dbbe:	bf58      	it	pl
 800dbc0:	9902      	ldrpl	r1, [sp, #8]
 800dbc2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dbc6:	bf58      	it	pl
 800dbc8:	1a79      	subpl	r1, r7, r1
 800dbca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dbce:	bf58      	it	pl
 800dbd0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dbd4:	6022      	str	r2, [r4, #0]
 800dbd6:	2700      	movs	r7, #0
 800dbd8:	e790      	b.n	800dafc <_scanf_float+0x198>
 800dbda:	f04f 0a03 	mov.w	sl, #3
 800dbde:	e78d      	b.n	800dafc <_scanf_float+0x198>
 800dbe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dbe4:	4649      	mov	r1, r9
 800dbe6:	4640      	mov	r0, r8
 800dbe8:	4798      	blx	r3
 800dbea:	2800      	cmp	r0, #0
 800dbec:	f43f aedf 	beq.w	800d9ae <_scanf_float+0x4a>
 800dbf0:	e6eb      	b.n	800d9ca <_scanf_float+0x66>
 800dbf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dbf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dbfa:	464a      	mov	r2, r9
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	4798      	blx	r3
 800dc00:	6923      	ldr	r3, [r4, #16]
 800dc02:	3b01      	subs	r3, #1
 800dc04:	6123      	str	r3, [r4, #16]
 800dc06:	e6eb      	b.n	800d9e0 <_scanf_float+0x7c>
 800dc08:	1e6b      	subs	r3, r5, #1
 800dc0a:	2b06      	cmp	r3, #6
 800dc0c:	d824      	bhi.n	800dc58 <_scanf_float+0x2f4>
 800dc0e:	2d02      	cmp	r5, #2
 800dc10:	d836      	bhi.n	800dc80 <_scanf_float+0x31c>
 800dc12:	9b01      	ldr	r3, [sp, #4]
 800dc14:	429e      	cmp	r6, r3
 800dc16:	f67f aee7 	bls.w	800d9e8 <_scanf_float+0x84>
 800dc1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc22:	464a      	mov	r2, r9
 800dc24:	4640      	mov	r0, r8
 800dc26:	4798      	blx	r3
 800dc28:	6923      	ldr	r3, [r4, #16]
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	6123      	str	r3, [r4, #16]
 800dc2e:	e7f0      	b.n	800dc12 <_scanf_float+0x2ae>
 800dc30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc34:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dc38:	464a      	mov	r2, r9
 800dc3a:	4640      	mov	r0, r8
 800dc3c:	4798      	blx	r3
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	3b01      	subs	r3, #1
 800dc42:	6123      	str	r3, [r4, #16]
 800dc44:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc48:	fa5f fa8a 	uxtb.w	sl, sl
 800dc4c:	f1ba 0f02 	cmp.w	sl, #2
 800dc50:	d1ee      	bne.n	800dc30 <_scanf_float+0x2cc>
 800dc52:	3d03      	subs	r5, #3
 800dc54:	b2ed      	uxtb	r5, r5
 800dc56:	1b76      	subs	r6, r6, r5
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	05da      	lsls	r2, r3, #23
 800dc5c:	d530      	bpl.n	800dcc0 <_scanf_float+0x35c>
 800dc5e:	055b      	lsls	r3, r3, #21
 800dc60:	d511      	bpl.n	800dc86 <_scanf_float+0x322>
 800dc62:	9b01      	ldr	r3, [sp, #4]
 800dc64:	429e      	cmp	r6, r3
 800dc66:	f67f aebf 	bls.w	800d9e8 <_scanf_float+0x84>
 800dc6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc72:	464a      	mov	r2, r9
 800dc74:	4640      	mov	r0, r8
 800dc76:	4798      	blx	r3
 800dc78:	6923      	ldr	r3, [r4, #16]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	6123      	str	r3, [r4, #16]
 800dc7e:	e7f0      	b.n	800dc62 <_scanf_float+0x2fe>
 800dc80:	46aa      	mov	sl, r5
 800dc82:	46b3      	mov	fp, r6
 800dc84:	e7de      	b.n	800dc44 <_scanf_float+0x2e0>
 800dc86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dc8a:	6923      	ldr	r3, [r4, #16]
 800dc8c:	2965      	cmp	r1, #101	@ 0x65
 800dc8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc92:	f106 35ff 	add.w	r5, r6, #4294967295
 800dc96:	6123      	str	r3, [r4, #16]
 800dc98:	d00c      	beq.n	800dcb4 <_scanf_float+0x350>
 800dc9a:	2945      	cmp	r1, #69	@ 0x45
 800dc9c:	d00a      	beq.n	800dcb4 <_scanf_float+0x350>
 800dc9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dca2:	464a      	mov	r2, r9
 800dca4:	4640      	mov	r0, r8
 800dca6:	4798      	blx	r3
 800dca8:	6923      	ldr	r3, [r4, #16]
 800dcaa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	1eb5      	subs	r5, r6, #2
 800dcb2:	6123      	str	r3, [r4, #16]
 800dcb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dcb8:	464a      	mov	r2, r9
 800dcba:	4640      	mov	r0, r8
 800dcbc:	4798      	blx	r3
 800dcbe:	462e      	mov	r6, r5
 800dcc0:	6822      	ldr	r2, [r4, #0]
 800dcc2:	f012 0210 	ands.w	r2, r2, #16
 800dcc6:	d001      	beq.n	800dccc <_scanf_float+0x368>
 800dcc8:	2000      	movs	r0, #0
 800dcca:	e68e      	b.n	800d9ea <_scanf_float+0x86>
 800dccc:	7032      	strb	r2, [r6, #0]
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dcd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcd8:	d125      	bne.n	800dd26 <_scanf_float+0x3c2>
 800dcda:	9b02      	ldr	r3, [sp, #8]
 800dcdc:	429f      	cmp	r7, r3
 800dcde:	d00a      	beq.n	800dcf6 <_scanf_float+0x392>
 800dce0:	1bda      	subs	r2, r3, r7
 800dce2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800dce6:	429e      	cmp	r6, r3
 800dce8:	bf28      	it	cs
 800dcea:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800dcee:	4922      	ldr	r1, [pc, #136]	@ (800dd78 <_scanf_float+0x414>)
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f000 f977 	bl	800dfe4 <siprintf>
 800dcf6:	9901      	ldr	r1, [sp, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	4640      	mov	r0, r8
 800dcfc:	f002 fdbc 	bl	8010878 <_strtod_r>
 800dd00:	9b03      	ldr	r3, [sp, #12]
 800dd02:	6821      	ldr	r1, [r4, #0]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f011 0f02 	tst.w	r1, #2
 800dd0a:	ec57 6b10 	vmov	r6, r7, d0
 800dd0e:	f103 0204 	add.w	r2, r3, #4
 800dd12:	d015      	beq.n	800dd40 <_scanf_float+0x3dc>
 800dd14:	9903      	ldr	r1, [sp, #12]
 800dd16:	600a      	str	r2, [r1, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	e9c3 6700 	strd	r6, r7, [r3]
 800dd1e:	68e3      	ldr	r3, [r4, #12]
 800dd20:	3301      	adds	r3, #1
 800dd22:	60e3      	str	r3, [r4, #12]
 800dd24:	e7d0      	b.n	800dcc8 <_scanf_float+0x364>
 800dd26:	9b04      	ldr	r3, [sp, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d0e4      	beq.n	800dcf6 <_scanf_float+0x392>
 800dd2c:	9905      	ldr	r1, [sp, #20]
 800dd2e:	230a      	movs	r3, #10
 800dd30:	3101      	adds	r1, #1
 800dd32:	4640      	mov	r0, r8
 800dd34:	f002 fe20 	bl	8010978 <_strtol_r>
 800dd38:	9b04      	ldr	r3, [sp, #16]
 800dd3a:	9e05      	ldr	r6, [sp, #20]
 800dd3c:	1ac2      	subs	r2, r0, r3
 800dd3e:	e7d0      	b.n	800dce2 <_scanf_float+0x37e>
 800dd40:	f011 0f04 	tst.w	r1, #4
 800dd44:	9903      	ldr	r1, [sp, #12]
 800dd46:	600a      	str	r2, [r1, #0]
 800dd48:	d1e6      	bne.n	800dd18 <_scanf_float+0x3b4>
 800dd4a:	681d      	ldr	r5, [r3, #0]
 800dd4c:	4632      	mov	r2, r6
 800dd4e:	463b      	mov	r3, r7
 800dd50:	4630      	mov	r0, r6
 800dd52:	4639      	mov	r1, r7
 800dd54:	f7f2 feea 	bl	8000b2c <__aeabi_dcmpun>
 800dd58:	b128      	cbz	r0, 800dd66 <_scanf_float+0x402>
 800dd5a:	4808      	ldr	r0, [pc, #32]	@ (800dd7c <_scanf_float+0x418>)
 800dd5c:	f000 fb62 	bl	800e424 <nanf>
 800dd60:	ed85 0a00 	vstr	s0, [r5]
 800dd64:	e7db      	b.n	800dd1e <_scanf_float+0x3ba>
 800dd66:	4630      	mov	r0, r6
 800dd68:	4639      	mov	r1, r7
 800dd6a:	f7f2 ff3d 	bl	8000be8 <__aeabi_d2f>
 800dd6e:	6028      	str	r0, [r5, #0]
 800dd70:	e7d5      	b.n	800dd1e <_scanf_float+0x3ba>
 800dd72:	2700      	movs	r7, #0
 800dd74:	e62e      	b.n	800d9d4 <_scanf_float+0x70>
 800dd76:	bf00      	nop
 800dd78:	080122f0 	.word	0x080122f0
 800dd7c:	080123a1 	.word	0x080123a1

0800dd80 <std>:
 800dd80:	2300      	movs	r3, #0
 800dd82:	b510      	push	{r4, lr}
 800dd84:	4604      	mov	r4, r0
 800dd86:	e9c0 3300 	strd	r3, r3, [r0]
 800dd8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd8e:	6083      	str	r3, [r0, #8]
 800dd90:	8181      	strh	r1, [r0, #12]
 800dd92:	6643      	str	r3, [r0, #100]	@ 0x64
 800dd94:	81c2      	strh	r2, [r0, #14]
 800dd96:	6183      	str	r3, [r0, #24]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	2208      	movs	r2, #8
 800dd9c:	305c      	adds	r0, #92	@ 0x5c
 800dd9e:	f000 fa1b 	bl	800e1d8 <memset>
 800dda2:	4b0d      	ldr	r3, [pc, #52]	@ (800ddd8 <std+0x58>)
 800dda4:	6263      	str	r3, [r4, #36]	@ 0x24
 800dda6:	4b0d      	ldr	r3, [pc, #52]	@ (800dddc <std+0x5c>)
 800dda8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ddaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dde0 <std+0x60>)
 800ddac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ddae:	4b0d      	ldr	r3, [pc, #52]	@ (800dde4 <std+0x64>)
 800ddb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ddb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dde8 <std+0x68>)
 800ddb4:	6224      	str	r4, [r4, #32]
 800ddb6:	429c      	cmp	r4, r3
 800ddb8:	d006      	beq.n	800ddc8 <std+0x48>
 800ddba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ddbe:	4294      	cmp	r4, r2
 800ddc0:	d002      	beq.n	800ddc8 <std+0x48>
 800ddc2:	33d0      	adds	r3, #208	@ 0xd0
 800ddc4:	429c      	cmp	r4, r3
 800ddc6:	d105      	bne.n	800ddd4 <std+0x54>
 800ddc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ddcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddd0:	f000 bb16 	b.w	800e400 <__retarget_lock_init_recursive>
 800ddd4:	bd10      	pop	{r4, pc}
 800ddd6:	bf00      	nop
 800ddd8:	0800e029 	.word	0x0800e029
 800dddc:	0800e04b 	.word	0x0800e04b
 800dde0:	0800e083 	.word	0x0800e083
 800dde4:	0800e0a7 	.word	0x0800e0a7
 800dde8:	20003f2c 	.word	0x20003f2c

0800ddec <stdio_exit_handler>:
 800ddec:	4a02      	ldr	r2, [pc, #8]	@ (800ddf8 <stdio_exit_handler+0xc>)
 800ddee:	4903      	ldr	r1, [pc, #12]	@ (800ddfc <stdio_exit_handler+0x10>)
 800ddf0:	4803      	ldr	r0, [pc, #12]	@ (800de00 <stdio_exit_handler+0x14>)
 800ddf2:	f000 b869 	b.w	800dec8 <_fwalk_sglue>
 800ddf6:	bf00      	nop
 800ddf8:	20000054 	.word	0x20000054
 800ddfc:	08010fb9 	.word	0x08010fb9
 800de00:	20000064 	.word	0x20000064

0800de04 <cleanup_stdio>:
 800de04:	6841      	ldr	r1, [r0, #4]
 800de06:	4b0c      	ldr	r3, [pc, #48]	@ (800de38 <cleanup_stdio+0x34>)
 800de08:	4299      	cmp	r1, r3
 800de0a:	b510      	push	{r4, lr}
 800de0c:	4604      	mov	r4, r0
 800de0e:	d001      	beq.n	800de14 <cleanup_stdio+0x10>
 800de10:	f003 f8d2 	bl	8010fb8 <_fflush_r>
 800de14:	68a1      	ldr	r1, [r4, #8]
 800de16:	4b09      	ldr	r3, [pc, #36]	@ (800de3c <cleanup_stdio+0x38>)
 800de18:	4299      	cmp	r1, r3
 800de1a:	d002      	beq.n	800de22 <cleanup_stdio+0x1e>
 800de1c:	4620      	mov	r0, r4
 800de1e:	f003 f8cb 	bl	8010fb8 <_fflush_r>
 800de22:	68e1      	ldr	r1, [r4, #12]
 800de24:	4b06      	ldr	r3, [pc, #24]	@ (800de40 <cleanup_stdio+0x3c>)
 800de26:	4299      	cmp	r1, r3
 800de28:	d004      	beq.n	800de34 <cleanup_stdio+0x30>
 800de2a:	4620      	mov	r0, r4
 800de2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de30:	f003 b8c2 	b.w	8010fb8 <_fflush_r>
 800de34:	bd10      	pop	{r4, pc}
 800de36:	bf00      	nop
 800de38:	20003f2c 	.word	0x20003f2c
 800de3c:	20003f94 	.word	0x20003f94
 800de40:	20003ffc 	.word	0x20003ffc

0800de44 <global_stdio_init.part.0>:
 800de44:	b510      	push	{r4, lr}
 800de46:	4b0b      	ldr	r3, [pc, #44]	@ (800de74 <global_stdio_init.part.0+0x30>)
 800de48:	4c0b      	ldr	r4, [pc, #44]	@ (800de78 <global_stdio_init.part.0+0x34>)
 800de4a:	4a0c      	ldr	r2, [pc, #48]	@ (800de7c <global_stdio_init.part.0+0x38>)
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	4620      	mov	r0, r4
 800de50:	2200      	movs	r2, #0
 800de52:	2104      	movs	r1, #4
 800de54:	f7ff ff94 	bl	800dd80 <std>
 800de58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de5c:	2201      	movs	r2, #1
 800de5e:	2109      	movs	r1, #9
 800de60:	f7ff ff8e 	bl	800dd80 <std>
 800de64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de68:	2202      	movs	r2, #2
 800de6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de6e:	2112      	movs	r1, #18
 800de70:	f7ff bf86 	b.w	800dd80 <std>
 800de74:	20004064 	.word	0x20004064
 800de78:	20003f2c 	.word	0x20003f2c
 800de7c:	0800dded 	.word	0x0800dded

0800de80 <__sfp_lock_acquire>:
 800de80:	4801      	ldr	r0, [pc, #4]	@ (800de88 <__sfp_lock_acquire+0x8>)
 800de82:	f000 babe 	b.w	800e402 <__retarget_lock_acquire_recursive>
 800de86:	bf00      	nop
 800de88:	2000406d 	.word	0x2000406d

0800de8c <__sfp_lock_release>:
 800de8c:	4801      	ldr	r0, [pc, #4]	@ (800de94 <__sfp_lock_release+0x8>)
 800de8e:	f000 bab9 	b.w	800e404 <__retarget_lock_release_recursive>
 800de92:	bf00      	nop
 800de94:	2000406d 	.word	0x2000406d

0800de98 <__sinit>:
 800de98:	b510      	push	{r4, lr}
 800de9a:	4604      	mov	r4, r0
 800de9c:	f7ff fff0 	bl	800de80 <__sfp_lock_acquire>
 800dea0:	6a23      	ldr	r3, [r4, #32]
 800dea2:	b11b      	cbz	r3, 800deac <__sinit+0x14>
 800dea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dea8:	f7ff bff0 	b.w	800de8c <__sfp_lock_release>
 800deac:	4b04      	ldr	r3, [pc, #16]	@ (800dec0 <__sinit+0x28>)
 800deae:	6223      	str	r3, [r4, #32]
 800deb0:	4b04      	ldr	r3, [pc, #16]	@ (800dec4 <__sinit+0x2c>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1f5      	bne.n	800dea4 <__sinit+0xc>
 800deb8:	f7ff ffc4 	bl	800de44 <global_stdio_init.part.0>
 800debc:	e7f2      	b.n	800dea4 <__sinit+0xc>
 800debe:	bf00      	nop
 800dec0:	0800de05 	.word	0x0800de05
 800dec4:	20004064 	.word	0x20004064

0800dec8 <_fwalk_sglue>:
 800dec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800decc:	4607      	mov	r7, r0
 800dece:	4688      	mov	r8, r1
 800ded0:	4614      	mov	r4, r2
 800ded2:	2600      	movs	r6, #0
 800ded4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ded8:	f1b9 0901 	subs.w	r9, r9, #1
 800dedc:	d505      	bpl.n	800deea <_fwalk_sglue+0x22>
 800dede:	6824      	ldr	r4, [r4, #0]
 800dee0:	2c00      	cmp	r4, #0
 800dee2:	d1f7      	bne.n	800ded4 <_fwalk_sglue+0xc>
 800dee4:	4630      	mov	r0, r6
 800dee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deea:	89ab      	ldrh	r3, [r5, #12]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d907      	bls.n	800df00 <_fwalk_sglue+0x38>
 800def0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800def4:	3301      	adds	r3, #1
 800def6:	d003      	beq.n	800df00 <_fwalk_sglue+0x38>
 800def8:	4629      	mov	r1, r5
 800defa:	4638      	mov	r0, r7
 800defc:	47c0      	blx	r8
 800defe:	4306      	orrs	r6, r0
 800df00:	3568      	adds	r5, #104	@ 0x68
 800df02:	e7e9      	b.n	800ded8 <_fwalk_sglue+0x10>

0800df04 <iprintf>:
 800df04:	b40f      	push	{r0, r1, r2, r3}
 800df06:	b507      	push	{r0, r1, r2, lr}
 800df08:	4906      	ldr	r1, [pc, #24]	@ (800df24 <iprintf+0x20>)
 800df0a:	ab04      	add	r3, sp, #16
 800df0c:	6808      	ldr	r0, [r1, #0]
 800df0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800df12:	6881      	ldr	r1, [r0, #8]
 800df14:	9301      	str	r3, [sp, #4]
 800df16:	f002 feb3 	bl	8010c80 <_vfiprintf_r>
 800df1a:	b003      	add	sp, #12
 800df1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800df20:	b004      	add	sp, #16
 800df22:	4770      	bx	lr
 800df24:	20000060 	.word	0x20000060

0800df28 <_puts_r>:
 800df28:	6a03      	ldr	r3, [r0, #32]
 800df2a:	b570      	push	{r4, r5, r6, lr}
 800df2c:	6884      	ldr	r4, [r0, #8]
 800df2e:	4605      	mov	r5, r0
 800df30:	460e      	mov	r6, r1
 800df32:	b90b      	cbnz	r3, 800df38 <_puts_r+0x10>
 800df34:	f7ff ffb0 	bl	800de98 <__sinit>
 800df38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df3a:	07db      	lsls	r3, r3, #31
 800df3c:	d405      	bmi.n	800df4a <_puts_r+0x22>
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	0598      	lsls	r0, r3, #22
 800df42:	d402      	bmi.n	800df4a <_puts_r+0x22>
 800df44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df46:	f000 fa5c 	bl	800e402 <__retarget_lock_acquire_recursive>
 800df4a:	89a3      	ldrh	r3, [r4, #12]
 800df4c:	0719      	lsls	r1, r3, #28
 800df4e:	d502      	bpl.n	800df56 <_puts_r+0x2e>
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d135      	bne.n	800dfc2 <_puts_r+0x9a>
 800df56:	4621      	mov	r1, r4
 800df58:	4628      	mov	r0, r5
 800df5a:	f000 f8e7 	bl	800e12c <__swsetup_r>
 800df5e:	b380      	cbz	r0, 800dfc2 <_puts_r+0x9a>
 800df60:	f04f 35ff 	mov.w	r5, #4294967295
 800df64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df66:	07da      	lsls	r2, r3, #31
 800df68:	d405      	bmi.n	800df76 <_puts_r+0x4e>
 800df6a:	89a3      	ldrh	r3, [r4, #12]
 800df6c:	059b      	lsls	r3, r3, #22
 800df6e:	d402      	bmi.n	800df76 <_puts_r+0x4e>
 800df70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df72:	f000 fa47 	bl	800e404 <__retarget_lock_release_recursive>
 800df76:	4628      	mov	r0, r5
 800df78:	bd70      	pop	{r4, r5, r6, pc}
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	da04      	bge.n	800df88 <_puts_r+0x60>
 800df7e:	69a2      	ldr	r2, [r4, #24]
 800df80:	429a      	cmp	r2, r3
 800df82:	dc17      	bgt.n	800dfb4 <_puts_r+0x8c>
 800df84:	290a      	cmp	r1, #10
 800df86:	d015      	beq.n	800dfb4 <_puts_r+0x8c>
 800df88:	6823      	ldr	r3, [r4, #0]
 800df8a:	1c5a      	adds	r2, r3, #1
 800df8c:	6022      	str	r2, [r4, #0]
 800df8e:	7019      	strb	r1, [r3, #0]
 800df90:	68a3      	ldr	r3, [r4, #8]
 800df92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800df96:	3b01      	subs	r3, #1
 800df98:	60a3      	str	r3, [r4, #8]
 800df9a:	2900      	cmp	r1, #0
 800df9c:	d1ed      	bne.n	800df7a <_puts_r+0x52>
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	da11      	bge.n	800dfc6 <_puts_r+0x9e>
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	210a      	movs	r1, #10
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	f000 f881 	bl	800e0ae <__swbuf_r>
 800dfac:	3001      	adds	r0, #1
 800dfae:	d0d7      	beq.n	800df60 <_puts_r+0x38>
 800dfb0:	250a      	movs	r5, #10
 800dfb2:	e7d7      	b.n	800df64 <_puts_r+0x3c>
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	f000 f879 	bl	800e0ae <__swbuf_r>
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	d1e7      	bne.n	800df90 <_puts_r+0x68>
 800dfc0:	e7ce      	b.n	800df60 <_puts_r+0x38>
 800dfc2:	3e01      	subs	r6, #1
 800dfc4:	e7e4      	b.n	800df90 <_puts_r+0x68>
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	1c5a      	adds	r2, r3, #1
 800dfca:	6022      	str	r2, [r4, #0]
 800dfcc:	220a      	movs	r2, #10
 800dfce:	701a      	strb	r2, [r3, #0]
 800dfd0:	e7ee      	b.n	800dfb0 <_puts_r+0x88>
	...

0800dfd4 <puts>:
 800dfd4:	4b02      	ldr	r3, [pc, #8]	@ (800dfe0 <puts+0xc>)
 800dfd6:	4601      	mov	r1, r0
 800dfd8:	6818      	ldr	r0, [r3, #0]
 800dfda:	f7ff bfa5 	b.w	800df28 <_puts_r>
 800dfde:	bf00      	nop
 800dfe0:	20000060 	.word	0x20000060

0800dfe4 <siprintf>:
 800dfe4:	b40e      	push	{r1, r2, r3}
 800dfe6:	b510      	push	{r4, lr}
 800dfe8:	b09d      	sub	sp, #116	@ 0x74
 800dfea:	ab1f      	add	r3, sp, #124	@ 0x7c
 800dfec:	9002      	str	r0, [sp, #8]
 800dfee:	9006      	str	r0, [sp, #24]
 800dff0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dff4:	480a      	ldr	r0, [pc, #40]	@ (800e020 <siprintf+0x3c>)
 800dff6:	9107      	str	r1, [sp, #28]
 800dff8:	9104      	str	r1, [sp, #16]
 800dffa:	490a      	ldr	r1, [pc, #40]	@ (800e024 <siprintf+0x40>)
 800dffc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e000:	9105      	str	r1, [sp, #20]
 800e002:	2400      	movs	r4, #0
 800e004:	a902      	add	r1, sp, #8
 800e006:	6800      	ldr	r0, [r0, #0]
 800e008:	9301      	str	r3, [sp, #4]
 800e00a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e00c:	f002 fd12 	bl	8010a34 <_svfiprintf_r>
 800e010:	9b02      	ldr	r3, [sp, #8]
 800e012:	701c      	strb	r4, [r3, #0]
 800e014:	b01d      	add	sp, #116	@ 0x74
 800e016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e01a:	b003      	add	sp, #12
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	20000060 	.word	0x20000060
 800e024:	ffff0208 	.word	0xffff0208

0800e028 <__sread>:
 800e028:	b510      	push	{r4, lr}
 800e02a:	460c      	mov	r4, r1
 800e02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e030:	f000 f998 	bl	800e364 <_read_r>
 800e034:	2800      	cmp	r0, #0
 800e036:	bfab      	itete	ge
 800e038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e03a:	89a3      	ldrhlt	r3, [r4, #12]
 800e03c:	181b      	addge	r3, r3, r0
 800e03e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e042:	bfac      	ite	ge
 800e044:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e046:	81a3      	strhlt	r3, [r4, #12]
 800e048:	bd10      	pop	{r4, pc}

0800e04a <__swrite>:
 800e04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e04e:	461f      	mov	r7, r3
 800e050:	898b      	ldrh	r3, [r1, #12]
 800e052:	05db      	lsls	r3, r3, #23
 800e054:	4605      	mov	r5, r0
 800e056:	460c      	mov	r4, r1
 800e058:	4616      	mov	r6, r2
 800e05a:	d505      	bpl.n	800e068 <__swrite+0x1e>
 800e05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e060:	2302      	movs	r3, #2
 800e062:	2200      	movs	r2, #0
 800e064:	f000 f96c 	bl	800e340 <_lseek_r>
 800e068:	89a3      	ldrh	r3, [r4, #12]
 800e06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e06e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e072:	81a3      	strh	r3, [r4, #12]
 800e074:	4632      	mov	r2, r6
 800e076:	463b      	mov	r3, r7
 800e078:	4628      	mov	r0, r5
 800e07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e07e:	f000 b983 	b.w	800e388 <_write_r>

0800e082 <__sseek>:
 800e082:	b510      	push	{r4, lr}
 800e084:	460c      	mov	r4, r1
 800e086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e08a:	f000 f959 	bl	800e340 <_lseek_r>
 800e08e:	1c43      	adds	r3, r0, #1
 800e090:	89a3      	ldrh	r3, [r4, #12]
 800e092:	bf15      	itete	ne
 800e094:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e09a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e09e:	81a3      	strheq	r3, [r4, #12]
 800e0a0:	bf18      	it	ne
 800e0a2:	81a3      	strhne	r3, [r4, #12]
 800e0a4:	bd10      	pop	{r4, pc}

0800e0a6 <__sclose>:
 800e0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0aa:	f000 b939 	b.w	800e320 <_close_r>

0800e0ae <__swbuf_r>:
 800e0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b0:	460e      	mov	r6, r1
 800e0b2:	4614      	mov	r4, r2
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	b118      	cbz	r0, 800e0c0 <__swbuf_r+0x12>
 800e0b8:	6a03      	ldr	r3, [r0, #32]
 800e0ba:	b90b      	cbnz	r3, 800e0c0 <__swbuf_r+0x12>
 800e0bc:	f7ff feec 	bl	800de98 <__sinit>
 800e0c0:	69a3      	ldr	r3, [r4, #24]
 800e0c2:	60a3      	str	r3, [r4, #8]
 800e0c4:	89a3      	ldrh	r3, [r4, #12]
 800e0c6:	071a      	lsls	r2, r3, #28
 800e0c8:	d501      	bpl.n	800e0ce <__swbuf_r+0x20>
 800e0ca:	6923      	ldr	r3, [r4, #16]
 800e0cc:	b943      	cbnz	r3, 800e0e0 <__swbuf_r+0x32>
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	f000 f82b 	bl	800e12c <__swsetup_r>
 800e0d6:	b118      	cbz	r0, 800e0e0 <__swbuf_r+0x32>
 800e0d8:	f04f 37ff 	mov.w	r7, #4294967295
 800e0dc:	4638      	mov	r0, r7
 800e0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	6922      	ldr	r2, [r4, #16]
 800e0e4:	1a98      	subs	r0, r3, r2
 800e0e6:	6963      	ldr	r3, [r4, #20]
 800e0e8:	b2f6      	uxtb	r6, r6
 800e0ea:	4283      	cmp	r3, r0
 800e0ec:	4637      	mov	r7, r6
 800e0ee:	dc05      	bgt.n	800e0fc <__swbuf_r+0x4e>
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	f002 ff60 	bl	8010fb8 <_fflush_r>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d1ed      	bne.n	800e0d8 <__swbuf_r+0x2a>
 800e0fc:	68a3      	ldr	r3, [r4, #8]
 800e0fe:	3b01      	subs	r3, #1
 800e100:	60a3      	str	r3, [r4, #8]
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	1c5a      	adds	r2, r3, #1
 800e106:	6022      	str	r2, [r4, #0]
 800e108:	701e      	strb	r6, [r3, #0]
 800e10a:	6962      	ldr	r2, [r4, #20]
 800e10c:	1c43      	adds	r3, r0, #1
 800e10e:	429a      	cmp	r2, r3
 800e110:	d004      	beq.n	800e11c <__swbuf_r+0x6e>
 800e112:	89a3      	ldrh	r3, [r4, #12]
 800e114:	07db      	lsls	r3, r3, #31
 800e116:	d5e1      	bpl.n	800e0dc <__swbuf_r+0x2e>
 800e118:	2e0a      	cmp	r6, #10
 800e11a:	d1df      	bne.n	800e0dc <__swbuf_r+0x2e>
 800e11c:	4621      	mov	r1, r4
 800e11e:	4628      	mov	r0, r5
 800e120:	f002 ff4a 	bl	8010fb8 <_fflush_r>
 800e124:	2800      	cmp	r0, #0
 800e126:	d0d9      	beq.n	800e0dc <__swbuf_r+0x2e>
 800e128:	e7d6      	b.n	800e0d8 <__swbuf_r+0x2a>
	...

0800e12c <__swsetup_r>:
 800e12c:	b538      	push	{r3, r4, r5, lr}
 800e12e:	4b29      	ldr	r3, [pc, #164]	@ (800e1d4 <__swsetup_r+0xa8>)
 800e130:	4605      	mov	r5, r0
 800e132:	6818      	ldr	r0, [r3, #0]
 800e134:	460c      	mov	r4, r1
 800e136:	b118      	cbz	r0, 800e140 <__swsetup_r+0x14>
 800e138:	6a03      	ldr	r3, [r0, #32]
 800e13a:	b90b      	cbnz	r3, 800e140 <__swsetup_r+0x14>
 800e13c:	f7ff feac 	bl	800de98 <__sinit>
 800e140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e144:	0719      	lsls	r1, r3, #28
 800e146:	d422      	bmi.n	800e18e <__swsetup_r+0x62>
 800e148:	06da      	lsls	r2, r3, #27
 800e14a:	d407      	bmi.n	800e15c <__swsetup_r+0x30>
 800e14c:	2209      	movs	r2, #9
 800e14e:	602a      	str	r2, [r5, #0]
 800e150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	f04f 30ff 	mov.w	r0, #4294967295
 800e15a:	e033      	b.n	800e1c4 <__swsetup_r+0x98>
 800e15c:	0758      	lsls	r0, r3, #29
 800e15e:	d512      	bpl.n	800e186 <__swsetup_r+0x5a>
 800e160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e162:	b141      	cbz	r1, 800e176 <__swsetup_r+0x4a>
 800e164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e168:	4299      	cmp	r1, r3
 800e16a:	d002      	beq.n	800e172 <__swsetup_r+0x46>
 800e16c:	4628      	mov	r0, r5
 800e16e:	f000 ffd7 	bl	800f120 <_free_r>
 800e172:	2300      	movs	r3, #0
 800e174:	6363      	str	r3, [r4, #52]	@ 0x34
 800e176:	89a3      	ldrh	r3, [r4, #12]
 800e178:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e17c:	81a3      	strh	r3, [r4, #12]
 800e17e:	2300      	movs	r3, #0
 800e180:	6063      	str	r3, [r4, #4]
 800e182:	6923      	ldr	r3, [r4, #16]
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	f043 0308 	orr.w	r3, r3, #8
 800e18c:	81a3      	strh	r3, [r4, #12]
 800e18e:	6923      	ldr	r3, [r4, #16]
 800e190:	b94b      	cbnz	r3, 800e1a6 <__swsetup_r+0x7a>
 800e192:	89a3      	ldrh	r3, [r4, #12]
 800e194:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e19c:	d003      	beq.n	800e1a6 <__swsetup_r+0x7a>
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	f002 ff69 	bl	8011078 <__smakebuf_r>
 800e1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1aa:	f013 0201 	ands.w	r2, r3, #1
 800e1ae:	d00a      	beq.n	800e1c6 <__swsetup_r+0x9a>
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	60a2      	str	r2, [r4, #8]
 800e1b4:	6962      	ldr	r2, [r4, #20]
 800e1b6:	4252      	negs	r2, r2
 800e1b8:	61a2      	str	r2, [r4, #24]
 800e1ba:	6922      	ldr	r2, [r4, #16]
 800e1bc:	b942      	cbnz	r2, 800e1d0 <__swsetup_r+0xa4>
 800e1be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1c2:	d1c5      	bne.n	800e150 <__swsetup_r+0x24>
 800e1c4:	bd38      	pop	{r3, r4, r5, pc}
 800e1c6:	0799      	lsls	r1, r3, #30
 800e1c8:	bf58      	it	pl
 800e1ca:	6962      	ldrpl	r2, [r4, #20]
 800e1cc:	60a2      	str	r2, [r4, #8]
 800e1ce:	e7f4      	b.n	800e1ba <__swsetup_r+0x8e>
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	e7f7      	b.n	800e1c4 <__swsetup_r+0x98>
 800e1d4:	20000060 	.word	0x20000060

0800e1d8 <memset>:
 800e1d8:	4402      	add	r2, r0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d100      	bne.n	800e1e2 <memset+0xa>
 800e1e0:	4770      	bx	lr
 800e1e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1e6:	e7f9      	b.n	800e1dc <memset+0x4>

0800e1e8 <strncmp>:
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	b16a      	cbz	r2, 800e208 <strncmp+0x20>
 800e1ec:	3901      	subs	r1, #1
 800e1ee:	1884      	adds	r4, r0, r2
 800e1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d103      	bne.n	800e204 <strncmp+0x1c>
 800e1fc:	42a0      	cmp	r0, r4
 800e1fe:	d001      	beq.n	800e204 <strncmp+0x1c>
 800e200:	2a00      	cmp	r2, #0
 800e202:	d1f5      	bne.n	800e1f0 <strncmp+0x8>
 800e204:	1ad0      	subs	r0, r2, r3
 800e206:	bd10      	pop	{r4, pc}
 800e208:	4610      	mov	r0, r2
 800e20a:	e7fc      	b.n	800e206 <strncmp+0x1e>

0800e20c <strncpy>:
 800e20c:	b510      	push	{r4, lr}
 800e20e:	3901      	subs	r1, #1
 800e210:	4603      	mov	r3, r0
 800e212:	b132      	cbz	r2, 800e222 <strncpy+0x16>
 800e214:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e218:	f803 4b01 	strb.w	r4, [r3], #1
 800e21c:	3a01      	subs	r2, #1
 800e21e:	2c00      	cmp	r4, #0
 800e220:	d1f7      	bne.n	800e212 <strncpy+0x6>
 800e222:	441a      	add	r2, r3
 800e224:	2100      	movs	r1, #0
 800e226:	4293      	cmp	r3, r2
 800e228:	d100      	bne.n	800e22c <strncpy+0x20>
 800e22a:	bd10      	pop	{r4, pc}
 800e22c:	f803 1b01 	strb.w	r1, [r3], #1
 800e230:	e7f9      	b.n	800e226 <strncpy+0x1a>
	...

0800e234 <strtok>:
 800e234:	4b16      	ldr	r3, [pc, #88]	@ (800e290 <strtok+0x5c>)
 800e236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23a:	681f      	ldr	r7, [r3, #0]
 800e23c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e23e:	4605      	mov	r5, r0
 800e240:	460e      	mov	r6, r1
 800e242:	b9ec      	cbnz	r4, 800e280 <strtok+0x4c>
 800e244:	2050      	movs	r0, #80	@ 0x50
 800e246:	f000 ffb5 	bl	800f1b4 <malloc>
 800e24a:	4602      	mov	r2, r0
 800e24c:	6478      	str	r0, [r7, #68]	@ 0x44
 800e24e:	b920      	cbnz	r0, 800e25a <strtok+0x26>
 800e250:	4b10      	ldr	r3, [pc, #64]	@ (800e294 <strtok+0x60>)
 800e252:	4811      	ldr	r0, [pc, #68]	@ (800e298 <strtok+0x64>)
 800e254:	215b      	movs	r1, #91	@ 0x5b
 800e256:	f000 f8eb 	bl	800e430 <__assert_func>
 800e25a:	e9c0 4400 	strd	r4, r4, [r0]
 800e25e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e262:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e266:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e26a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e26e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e272:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e276:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e27a:	6184      	str	r4, [r0, #24]
 800e27c:	7704      	strb	r4, [r0, #28]
 800e27e:	6244      	str	r4, [r0, #36]	@ 0x24
 800e280:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e282:	4631      	mov	r1, r6
 800e284:	4628      	mov	r0, r5
 800e286:	2301      	movs	r3, #1
 800e288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e28c:	f000 b806 	b.w	800e29c <__strtok_r>
 800e290:	20000060 	.word	0x20000060
 800e294:	080122f5 	.word	0x080122f5
 800e298:	0801230c 	.word	0x0801230c

0800e29c <__strtok_r>:
 800e29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29e:	4604      	mov	r4, r0
 800e2a0:	b908      	cbnz	r0, 800e2a6 <__strtok_r+0xa>
 800e2a2:	6814      	ldr	r4, [r2, #0]
 800e2a4:	b144      	cbz	r4, 800e2b8 <__strtok_r+0x1c>
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e2ac:	460f      	mov	r7, r1
 800e2ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e2b2:	b91e      	cbnz	r6, 800e2bc <__strtok_r+0x20>
 800e2b4:	b965      	cbnz	r5, 800e2d0 <__strtok_r+0x34>
 800e2b6:	6015      	str	r5, [r2, #0]
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	e005      	b.n	800e2c8 <__strtok_r+0x2c>
 800e2bc:	42b5      	cmp	r5, r6
 800e2be:	d1f6      	bne.n	800e2ae <__strtok_r+0x12>
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1f0      	bne.n	800e2a6 <__strtok_r+0xa>
 800e2c4:	6014      	str	r4, [r2, #0]
 800e2c6:	7003      	strb	r3, [r0, #0]
 800e2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ca:	461c      	mov	r4, r3
 800e2cc:	e00c      	b.n	800e2e8 <__strtok_r+0x4c>
 800e2ce:	b91d      	cbnz	r5, 800e2d8 <__strtok_r+0x3c>
 800e2d0:	4627      	mov	r7, r4
 800e2d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e2d6:	460e      	mov	r6, r1
 800e2d8:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e2dc:	42ab      	cmp	r3, r5
 800e2de:	d1f6      	bne.n	800e2ce <__strtok_r+0x32>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d0f2      	beq.n	800e2ca <__strtok_r+0x2e>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	703b      	strb	r3, [r7, #0]
 800e2e8:	6014      	str	r4, [r2, #0]
 800e2ea:	e7ed      	b.n	800e2c8 <__strtok_r+0x2c>

0800e2ec <strstr>:
 800e2ec:	780a      	ldrb	r2, [r1, #0]
 800e2ee:	b570      	push	{r4, r5, r6, lr}
 800e2f0:	b96a      	cbnz	r2, 800e30e <strstr+0x22>
 800e2f2:	bd70      	pop	{r4, r5, r6, pc}
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d109      	bne.n	800e30c <strstr+0x20>
 800e2f8:	460c      	mov	r4, r1
 800e2fa:	4605      	mov	r5, r0
 800e2fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e300:	2b00      	cmp	r3, #0
 800e302:	d0f6      	beq.n	800e2f2 <strstr+0x6>
 800e304:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e308:	429e      	cmp	r6, r3
 800e30a:	d0f7      	beq.n	800e2fc <strstr+0x10>
 800e30c:	3001      	adds	r0, #1
 800e30e:	7803      	ldrb	r3, [r0, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1ef      	bne.n	800e2f4 <strstr+0x8>
 800e314:	4618      	mov	r0, r3
 800e316:	e7ec      	b.n	800e2f2 <strstr+0x6>

0800e318 <_localeconv_r>:
 800e318:	4800      	ldr	r0, [pc, #0]	@ (800e31c <_localeconv_r+0x4>)
 800e31a:	4770      	bx	lr
 800e31c:	200001a0 	.word	0x200001a0

0800e320 <_close_r>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	4d06      	ldr	r5, [pc, #24]	@ (800e33c <_close_r+0x1c>)
 800e324:	2300      	movs	r3, #0
 800e326:	4604      	mov	r4, r0
 800e328:	4608      	mov	r0, r1
 800e32a:	602b      	str	r3, [r5, #0]
 800e32c:	f7f4 fef1 	bl	8003112 <_close>
 800e330:	1c43      	adds	r3, r0, #1
 800e332:	d102      	bne.n	800e33a <_close_r+0x1a>
 800e334:	682b      	ldr	r3, [r5, #0]
 800e336:	b103      	cbz	r3, 800e33a <_close_r+0x1a>
 800e338:	6023      	str	r3, [r4, #0]
 800e33a:	bd38      	pop	{r3, r4, r5, pc}
 800e33c:	20004068 	.word	0x20004068

0800e340 <_lseek_r>:
 800e340:	b538      	push	{r3, r4, r5, lr}
 800e342:	4d07      	ldr	r5, [pc, #28]	@ (800e360 <_lseek_r+0x20>)
 800e344:	4604      	mov	r4, r0
 800e346:	4608      	mov	r0, r1
 800e348:	4611      	mov	r1, r2
 800e34a:	2200      	movs	r2, #0
 800e34c:	602a      	str	r2, [r5, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	f7f4 ff06 	bl	8003160 <_lseek>
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	d102      	bne.n	800e35e <_lseek_r+0x1e>
 800e358:	682b      	ldr	r3, [r5, #0]
 800e35a:	b103      	cbz	r3, 800e35e <_lseek_r+0x1e>
 800e35c:	6023      	str	r3, [r4, #0]
 800e35e:	bd38      	pop	{r3, r4, r5, pc}
 800e360:	20004068 	.word	0x20004068

0800e364 <_read_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d07      	ldr	r5, [pc, #28]	@ (800e384 <_read_r+0x20>)
 800e368:	4604      	mov	r4, r0
 800e36a:	4608      	mov	r0, r1
 800e36c:	4611      	mov	r1, r2
 800e36e:	2200      	movs	r2, #0
 800e370:	602a      	str	r2, [r5, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	f7f4 fe94 	bl	80030a0 <_read>
 800e378:	1c43      	adds	r3, r0, #1
 800e37a:	d102      	bne.n	800e382 <_read_r+0x1e>
 800e37c:	682b      	ldr	r3, [r5, #0]
 800e37e:	b103      	cbz	r3, 800e382 <_read_r+0x1e>
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	bd38      	pop	{r3, r4, r5, pc}
 800e384:	20004068 	.word	0x20004068

0800e388 <_write_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	4d07      	ldr	r5, [pc, #28]	@ (800e3a8 <_write_r+0x20>)
 800e38c:	4604      	mov	r4, r0
 800e38e:	4608      	mov	r0, r1
 800e390:	4611      	mov	r1, r2
 800e392:	2200      	movs	r2, #0
 800e394:	602a      	str	r2, [r5, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	f7f4 fe9f 	bl	80030da <_write>
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	d102      	bne.n	800e3a6 <_write_r+0x1e>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	b103      	cbz	r3, 800e3a6 <_write_r+0x1e>
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}
 800e3a8:	20004068 	.word	0x20004068

0800e3ac <__errno>:
 800e3ac:	4b01      	ldr	r3, [pc, #4]	@ (800e3b4 <__errno+0x8>)
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	20000060 	.word	0x20000060

0800e3b8 <__libc_init_array>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	4d0d      	ldr	r5, [pc, #52]	@ (800e3f0 <__libc_init_array+0x38>)
 800e3bc:	4c0d      	ldr	r4, [pc, #52]	@ (800e3f4 <__libc_init_array+0x3c>)
 800e3be:	1b64      	subs	r4, r4, r5
 800e3c0:	10a4      	asrs	r4, r4, #2
 800e3c2:	2600      	movs	r6, #0
 800e3c4:	42a6      	cmp	r6, r4
 800e3c6:	d109      	bne.n	800e3dc <__libc_init_array+0x24>
 800e3c8:	4d0b      	ldr	r5, [pc, #44]	@ (800e3f8 <__libc_init_array+0x40>)
 800e3ca:	4c0c      	ldr	r4, [pc, #48]	@ (800e3fc <__libc_init_array+0x44>)
 800e3cc:	f003 fad0 	bl	8011970 <_init>
 800e3d0:	1b64      	subs	r4, r4, r5
 800e3d2:	10a4      	asrs	r4, r4, #2
 800e3d4:	2600      	movs	r6, #0
 800e3d6:	42a6      	cmp	r6, r4
 800e3d8:	d105      	bne.n	800e3e6 <__libc_init_array+0x2e>
 800e3da:	bd70      	pop	{r4, r5, r6, pc}
 800e3dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3e0:	4798      	blx	r3
 800e3e2:	3601      	adds	r6, #1
 800e3e4:	e7ee      	b.n	800e3c4 <__libc_init_array+0xc>
 800e3e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3ea:	4798      	blx	r3
 800e3ec:	3601      	adds	r6, #1
 800e3ee:	e7f2      	b.n	800e3d6 <__libc_init_array+0x1e>
 800e3f0:	08012744 	.word	0x08012744
 800e3f4:	08012744 	.word	0x08012744
 800e3f8:	08012744 	.word	0x08012744
 800e3fc:	08012748 	.word	0x08012748

0800e400 <__retarget_lock_init_recursive>:
 800e400:	4770      	bx	lr

0800e402 <__retarget_lock_acquire_recursive>:
 800e402:	4770      	bx	lr

0800e404 <__retarget_lock_release_recursive>:
 800e404:	4770      	bx	lr

0800e406 <memcpy>:
 800e406:	440a      	add	r2, r1
 800e408:	4291      	cmp	r1, r2
 800e40a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e40e:	d100      	bne.n	800e412 <memcpy+0xc>
 800e410:	4770      	bx	lr
 800e412:	b510      	push	{r4, lr}
 800e414:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e41c:	4291      	cmp	r1, r2
 800e41e:	d1f9      	bne.n	800e414 <memcpy+0xe>
 800e420:	bd10      	pop	{r4, pc}
	...

0800e424 <nanf>:
 800e424:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e42c <nanf+0x8>
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	7fc00000 	.word	0x7fc00000

0800e430 <__assert_func>:
 800e430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e432:	4614      	mov	r4, r2
 800e434:	461a      	mov	r2, r3
 800e436:	4b09      	ldr	r3, [pc, #36]	@ (800e45c <__assert_func+0x2c>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4605      	mov	r5, r0
 800e43c:	68d8      	ldr	r0, [r3, #12]
 800e43e:	b14c      	cbz	r4, 800e454 <__assert_func+0x24>
 800e440:	4b07      	ldr	r3, [pc, #28]	@ (800e460 <__assert_func+0x30>)
 800e442:	9100      	str	r1, [sp, #0]
 800e444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e448:	4906      	ldr	r1, [pc, #24]	@ (800e464 <__assert_func+0x34>)
 800e44a:	462b      	mov	r3, r5
 800e44c:	f002 fddc 	bl	8011008 <fiprintf>
 800e450:	f002 fea2 	bl	8011198 <abort>
 800e454:	4b04      	ldr	r3, [pc, #16]	@ (800e468 <__assert_func+0x38>)
 800e456:	461c      	mov	r4, r3
 800e458:	e7f3      	b.n	800e442 <__assert_func+0x12>
 800e45a:	bf00      	nop
 800e45c:	20000060 	.word	0x20000060
 800e460:	08012366 	.word	0x08012366
 800e464:	08012373 	.word	0x08012373
 800e468:	080123a1 	.word	0x080123a1

0800e46c <quorem>:
 800e46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e470:	6903      	ldr	r3, [r0, #16]
 800e472:	690c      	ldr	r4, [r1, #16]
 800e474:	42a3      	cmp	r3, r4
 800e476:	4607      	mov	r7, r0
 800e478:	db7e      	blt.n	800e578 <quorem+0x10c>
 800e47a:	3c01      	subs	r4, #1
 800e47c:	f101 0814 	add.w	r8, r1, #20
 800e480:	00a3      	lsls	r3, r4, #2
 800e482:	f100 0514 	add.w	r5, r0, #20
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e48c:	9301      	str	r3, [sp, #4]
 800e48e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e496:	3301      	adds	r3, #1
 800e498:	429a      	cmp	r2, r3
 800e49a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e49e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4a2:	d32e      	bcc.n	800e502 <quorem+0x96>
 800e4a4:	f04f 0a00 	mov.w	sl, #0
 800e4a8:	46c4      	mov	ip, r8
 800e4aa:	46ae      	mov	lr, r5
 800e4ac:	46d3      	mov	fp, sl
 800e4ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4b2:	b298      	uxth	r0, r3
 800e4b4:	fb06 a000 	mla	r0, r6, r0, sl
 800e4b8:	0c02      	lsrs	r2, r0, #16
 800e4ba:	0c1b      	lsrs	r3, r3, #16
 800e4bc:	fb06 2303 	mla	r3, r6, r3, r2
 800e4c0:	f8de 2000 	ldr.w	r2, [lr]
 800e4c4:	b280      	uxth	r0, r0
 800e4c6:	b292      	uxth	r2, r2
 800e4c8:	1a12      	subs	r2, r2, r0
 800e4ca:	445a      	add	r2, fp
 800e4cc:	f8de 0000 	ldr.w	r0, [lr]
 800e4d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e4da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e4de:	b292      	uxth	r2, r2
 800e4e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4e4:	45e1      	cmp	r9, ip
 800e4e6:	f84e 2b04 	str.w	r2, [lr], #4
 800e4ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4ee:	d2de      	bcs.n	800e4ae <quorem+0x42>
 800e4f0:	9b00      	ldr	r3, [sp, #0]
 800e4f2:	58eb      	ldr	r3, [r5, r3]
 800e4f4:	b92b      	cbnz	r3, 800e502 <quorem+0x96>
 800e4f6:	9b01      	ldr	r3, [sp, #4]
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	429d      	cmp	r5, r3
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	d32f      	bcc.n	800e560 <quorem+0xf4>
 800e500:	613c      	str	r4, [r7, #16]
 800e502:	4638      	mov	r0, r7
 800e504:	f001 f9c8 	bl	800f898 <__mcmp>
 800e508:	2800      	cmp	r0, #0
 800e50a:	db25      	blt.n	800e558 <quorem+0xec>
 800e50c:	4629      	mov	r1, r5
 800e50e:	2000      	movs	r0, #0
 800e510:	f858 2b04 	ldr.w	r2, [r8], #4
 800e514:	f8d1 c000 	ldr.w	ip, [r1]
 800e518:	fa1f fe82 	uxth.w	lr, r2
 800e51c:	fa1f f38c 	uxth.w	r3, ip
 800e520:	eba3 030e 	sub.w	r3, r3, lr
 800e524:	4403      	add	r3, r0
 800e526:	0c12      	lsrs	r2, r2, #16
 800e528:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e52c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e530:	b29b      	uxth	r3, r3
 800e532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e536:	45c1      	cmp	r9, r8
 800e538:	f841 3b04 	str.w	r3, [r1], #4
 800e53c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e540:	d2e6      	bcs.n	800e510 <quorem+0xa4>
 800e542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e54a:	b922      	cbnz	r2, 800e556 <quorem+0xea>
 800e54c:	3b04      	subs	r3, #4
 800e54e:	429d      	cmp	r5, r3
 800e550:	461a      	mov	r2, r3
 800e552:	d30b      	bcc.n	800e56c <quorem+0x100>
 800e554:	613c      	str	r4, [r7, #16]
 800e556:	3601      	adds	r6, #1
 800e558:	4630      	mov	r0, r6
 800e55a:	b003      	add	sp, #12
 800e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e560:	6812      	ldr	r2, [r2, #0]
 800e562:	3b04      	subs	r3, #4
 800e564:	2a00      	cmp	r2, #0
 800e566:	d1cb      	bne.n	800e500 <quorem+0x94>
 800e568:	3c01      	subs	r4, #1
 800e56a:	e7c6      	b.n	800e4fa <quorem+0x8e>
 800e56c:	6812      	ldr	r2, [r2, #0]
 800e56e:	3b04      	subs	r3, #4
 800e570:	2a00      	cmp	r2, #0
 800e572:	d1ef      	bne.n	800e554 <quorem+0xe8>
 800e574:	3c01      	subs	r4, #1
 800e576:	e7ea      	b.n	800e54e <quorem+0xe2>
 800e578:	2000      	movs	r0, #0
 800e57a:	e7ee      	b.n	800e55a <quorem+0xee>
 800e57c:	0000      	movs	r0, r0
	...

0800e580 <_dtoa_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	69c7      	ldr	r7, [r0, #28]
 800e586:	b097      	sub	sp, #92	@ 0x5c
 800e588:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e58c:	ec55 4b10 	vmov	r4, r5, d0
 800e590:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e592:	9107      	str	r1, [sp, #28]
 800e594:	4681      	mov	r9, r0
 800e596:	920c      	str	r2, [sp, #48]	@ 0x30
 800e598:	9311      	str	r3, [sp, #68]	@ 0x44
 800e59a:	b97f      	cbnz	r7, 800e5bc <_dtoa_r+0x3c>
 800e59c:	2010      	movs	r0, #16
 800e59e:	f000 fe09 	bl	800f1b4 <malloc>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	f8c9 001c 	str.w	r0, [r9, #28]
 800e5a8:	b920      	cbnz	r0, 800e5b4 <_dtoa_r+0x34>
 800e5aa:	4ba9      	ldr	r3, [pc, #676]	@ (800e850 <_dtoa_r+0x2d0>)
 800e5ac:	21ef      	movs	r1, #239	@ 0xef
 800e5ae:	48a9      	ldr	r0, [pc, #676]	@ (800e854 <_dtoa_r+0x2d4>)
 800e5b0:	f7ff ff3e 	bl	800e430 <__assert_func>
 800e5b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5b8:	6007      	str	r7, [r0, #0]
 800e5ba:	60c7      	str	r7, [r0, #12]
 800e5bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e5c0:	6819      	ldr	r1, [r3, #0]
 800e5c2:	b159      	cbz	r1, 800e5dc <_dtoa_r+0x5c>
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	604a      	str	r2, [r1, #4]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	4093      	lsls	r3, r2
 800e5cc:	608b      	str	r3, [r1, #8]
 800e5ce:	4648      	mov	r0, r9
 800e5d0:	f000 fee6 	bl	800f3a0 <_Bfree>
 800e5d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	1e2b      	subs	r3, r5, #0
 800e5de:	bfb9      	ittee	lt
 800e5e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5e4:	9305      	strlt	r3, [sp, #20]
 800e5e6:	2300      	movge	r3, #0
 800e5e8:	6033      	strge	r3, [r6, #0]
 800e5ea:	9f05      	ldr	r7, [sp, #20]
 800e5ec:	4b9a      	ldr	r3, [pc, #616]	@ (800e858 <_dtoa_r+0x2d8>)
 800e5ee:	bfbc      	itt	lt
 800e5f0:	2201      	movlt	r2, #1
 800e5f2:	6032      	strlt	r2, [r6, #0]
 800e5f4:	43bb      	bics	r3, r7
 800e5f6:	d112      	bne.n	800e61e <_dtoa_r+0x9e>
 800e5f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e604:	4323      	orrs	r3, r4
 800e606:	f000 855a 	beq.w	800f0be <_dtoa_r+0xb3e>
 800e60a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e60c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e86c <_dtoa_r+0x2ec>
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 855c 	beq.w	800f0ce <_dtoa_r+0xb4e>
 800e616:	f10a 0303 	add.w	r3, sl, #3
 800e61a:	f000 bd56 	b.w	800f0ca <_dtoa_r+0xb4a>
 800e61e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e622:	2200      	movs	r2, #0
 800e624:	ec51 0b17 	vmov	r0, r1, d7
 800e628:	2300      	movs	r3, #0
 800e62a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e62e:	f7f2 fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e632:	4680      	mov	r8, r0
 800e634:	b158      	cbz	r0, 800e64e <_dtoa_r+0xce>
 800e636:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e638:	2301      	movs	r3, #1
 800e63a:	6013      	str	r3, [r2, #0]
 800e63c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e63e:	b113      	cbz	r3, 800e646 <_dtoa_r+0xc6>
 800e640:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e642:	4b86      	ldr	r3, [pc, #536]	@ (800e85c <_dtoa_r+0x2dc>)
 800e644:	6013      	str	r3, [r2, #0]
 800e646:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e870 <_dtoa_r+0x2f0>
 800e64a:	f000 bd40 	b.w	800f0ce <_dtoa_r+0xb4e>
 800e64e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e652:	aa14      	add	r2, sp, #80	@ 0x50
 800e654:	a915      	add	r1, sp, #84	@ 0x54
 800e656:	4648      	mov	r0, r9
 800e658:	f001 fa3e 	bl	800fad8 <__d2b>
 800e65c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e660:	9002      	str	r0, [sp, #8]
 800e662:	2e00      	cmp	r6, #0
 800e664:	d078      	beq.n	800e758 <_dtoa_r+0x1d8>
 800e666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e668:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e66c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e674:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e678:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e67c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e680:	4619      	mov	r1, r3
 800e682:	2200      	movs	r2, #0
 800e684:	4b76      	ldr	r3, [pc, #472]	@ (800e860 <_dtoa_r+0x2e0>)
 800e686:	f7f1 fdff 	bl	8000288 <__aeabi_dsub>
 800e68a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e838 <_dtoa_r+0x2b8>)
 800e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e690:	f7f1 ffb2 	bl	80005f8 <__aeabi_dmul>
 800e694:	a36a      	add	r3, pc, #424	@ (adr r3, 800e840 <_dtoa_r+0x2c0>)
 800e696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69a:	f7f1 fdf7 	bl	800028c <__adddf3>
 800e69e:	4604      	mov	r4, r0
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	f7f1 ff3e 	bl	8000524 <__aeabi_i2d>
 800e6a8:	a367      	add	r3, pc, #412	@ (adr r3, 800e848 <_dtoa_r+0x2c8>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	f7f1 ffa3 	bl	80005f8 <__aeabi_dmul>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f7f1 fde7 	bl	800028c <__adddf3>
 800e6be:	4604      	mov	r4, r0
 800e6c0:	460d      	mov	r5, r1
 800e6c2:	f7f2 fa49 	bl	8000b58 <__aeabi_d2iz>
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	4607      	mov	r7, r0
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	f7f2 fa04 	bl	8000adc <__aeabi_dcmplt>
 800e6d4:	b140      	cbz	r0, 800e6e8 <_dtoa_r+0x168>
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	f7f1 ff24 	bl	8000524 <__aeabi_i2d>
 800e6dc:	4622      	mov	r2, r4
 800e6de:	462b      	mov	r3, r5
 800e6e0:	f7f2 f9f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6e4:	b900      	cbnz	r0, 800e6e8 <_dtoa_r+0x168>
 800e6e6:	3f01      	subs	r7, #1
 800e6e8:	2f16      	cmp	r7, #22
 800e6ea:	d852      	bhi.n	800e792 <_dtoa_r+0x212>
 800e6ec:	4b5d      	ldr	r3, [pc, #372]	@ (800e864 <_dtoa_r+0x2e4>)
 800e6ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e6fa:	f7f2 f9ef 	bl	8000adc <__aeabi_dcmplt>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d049      	beq.n	800e796 <_dtoa_r+0x216>
 800e702:	3f01      	subs	r7, #1
 800e704:	2300      	movs	r3, #0
 800e706:	9310      	str	r3, [sp, #64]	@ 0x40
 800e708:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e70a:	1b9b      	subs	r3, r3, r6
 800e70c:	1e5a      	subs	r2, r3, #1
 800e70e:	bf45      	ittet	mi
 800e710:	f1c3 0301 	rsbmi	r3, r3, #1
 800e714:	9300      	strmi	r3, [sp, #0]
 800e716:	2300      	movpl	r3, #0
 800e718:	2300      	movmi	r3, #0
 800e71a:	9206      	str	r2, [sp, #24]
 800e71c:	bf54      	ite	pl
 800e71e:	9300      	strpl	r3, [sp, #0]
 800e720:	9306      	strmi	r3, [sp, #24]
 800e722:	2f00      	cmp	r7, #0
 800e724:	db39      	blt.n	800e79a <_dtoa_r+0x21a>
 800e726:	9b06      	ldr	r3, [sp, #24]
 800e728:	970d      	str	r7, [sp, #52]	@ 0x34
 800e72a:	443b      	add	r3, r7
 800e72c:	9306      	str	r3, [sp, #24]
 800e72e:	2300      	movs	r3, #0
 800e730:	9308      	str	r3, [sp, #32]
 800e732:	9b07      	ldr	r3, [sp, #28]
 800e734:	2b09      	cmp	r3, #9
 800e736:	d863      	bhi.n	800e800 <_dtoa_r+0x280>
 800e738:	2b05      	cmp	r3, #5
 800e73a:	bfc4      	itt	gt
 800e73c:	3b04      	subgt	r3, #4
 800e73e:	9307      	strgt	r3, [sp, #28]
 800e740:	9b07      	ldr	r3, [sp, #28]
 800e742:	f1a3 0302 	sub.w	r3, r3, #2
 800e746:	bfcc      	ite	gt
 800e748:	2400      	movgt	r4, #0
 800e74a:	2401      	movle	r4, #1
 800e74c:	2b03      	cmp	r3, #3
 800e74e:	d863      	bhi.n	800e818 <_dtoa_r+0x298>
 800e750:	e8df f003 	tbb	[pc, r3]
 800e754:	2b375452 	.word	0x2b375452
 800e758:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e75c:	441e      	add	r6, r3
 800e75e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e762:	2b20      	cmp	r3, #32
 800e764:	bfc1      	itttt	gt
 800e766:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e76a:	409f      	lslgt	r7, r3
 800e76c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e770:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e774:	bfd6      	itet	le
 800e776:	f1c3 0320 	rsble	r3, r3, #32
 800e77a:	ea47 0003 	orrgt.w	r0, r7, r3
 800e77e:	fa04 f003 	lslle.w	r0, r4, r3
 800e782:	f7f1 febf 	bl	8000504 <__aeabi_ui2d>
 800e786:	2201      	movs	r2, #1
 800e788:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e78c:	3e01      	subs	r6, #1
 800e78e:	9212      	str	r2, [sp, #72]	@ 0x48
 800e790:	e776      	b.n	800e680 <_dtoa_r+0x100>
 800e792:	2301      	movs	r3, #1
 800e794:	e7b7      	b.n	800e706 <_dtoa_r+0x186>
 800e796:	9010      	str	r0, [sp, #64]	@ 0x40
 800e798:	e7b6      	b.n	800e708 <_dtoa_r+0x188>
 800e79a:	9b00      	ldr	r3, [sp, #0]
 800e79c:	1bdb      	subs	r3, r3, r7
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	427b      	negs	r3, r7
 800e7a2:	9308      	str	r3, [sp, #32]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800e7a8:	e7c3      	b.n	800e732 <_dtoa_r+0x1b2>
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7b0:	eb07 0b03 	add.w	fp, r7, r3
 800e7b4:	f10b 0301 	add.w	r3, fp, #1
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	9303      	str	r3, [sp, #12]
 800e7bc:	bfb8      	it	lt
 800e7be:	2301      	movlt	r3, #1
 800e7c0:	e006      	b.n	800e7d0 <_dtoa_r+0x250>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	dd28      	ble.n	800e81e <_dtoa_r+0x29e>
 800e7cc:	469b      	mov	fp, r3
 800e7ce:	9303      	str	r3, [sp, #12]
 800e7d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	2204      	movs	r2, #4
 800e7d8:	f102 0514 	add.w	r5, r2, #20
 800e7dc:	429d      	cmp	r5, r3
 800e7de:	d926      	bls.n	800e82e <_dtoa_r+0x2ae>
 800e7e0:	6041      	str	r1, [r0, #4]
 800e7e2:	4648      	mov	r0, r9
 800e7e4:	f000 fd9c 	bl	800f320 <_Balloc>
 800e7e8:	4682      	mov	sl, r0
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d142      	bne.n	800e874 <_dtoa_r+0x2f4>
 800e7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e868 <_dtoa_r+0x2e8>)
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	f240 11af 	movw	r1, #431	@ 0x1af
 800e7f6:	e6da      	b.n	800e5ae <_dtoa_r+0x2e>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	e7e3      	b.n	800e7c4 <_dtoa_r+0x244>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	e7d5      	b.n	800e7ac <_dtoa_r+0x22c>
 800e800:	2401      	movs	r4, #1
 800e802:	2300      	movs	r3, #0
 800e804:	9307      	str	r3, [sp, #28]
 800e806:	9409      	str	r4, [sp, #36]	@ 0x24
 800e808:	f04f 3bff 	mov.w	fp, #4294967295
 800e80c:	2200      	movs	r2, #0
 800e80e:	f8cd b00c 	str.w	fp, [sp, #12]
 800e812:	2312      	movs	r3, #18
 800e814:	920c      	str	r2, [sp, #48]	@ 0x30
 800e816:	e7db      	b.n	800e7d0 <_dtoa_r+0x250>
 800e818:	2301      	movs	r3, #1
 800e81a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e81c:	e7f4      	b.n	800e808 <_dtoa_r+0x288>
 800e81e:	f04f 0b01 	mov.w	fp, #1
 800e822:	f8cd b00c 	str.w	fp, [sp, #12]
 800e826:	465b      	mov	r3, fp
 800e828:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e82c:	e7d0      	b.n	800e7d0 <_dtoa_r+0x250>
 800e82e:	3101      	adds	r1, #1
 800e830:	0052      	lsls	r2, r2, #1
 800e832:	e7d1      	b.n	800e7d8 <_dtoa_r+0x258>
 800e834:	f3af 8000 	nop.w
 800e838:	636f4361 	.word	0x636f4361
 800e83c:	3fd287a7 	.word	0x3fd287a7
 800e840:	8b60c8b3 	.word	0x8b60c8b3
 800e844:	3fc68a28 	.word	0x3fc68a28
 800e848:	509f79fb 	.word	0x509f79fb
 800e84c:	3fd34413 	.word	0x3fd34413
 800e850:	080122f5 	.word	0x080122f5
 800e854:	080123af 	.word	0x080123af
 800e858:	7ff00000 	.word	0x7ff00000
 800e85c:	080122cd 	.word	0x080122cd
 800e860:	3ff80000 	.word	0x3ff80000
 800e864:	08012520 	.word	0x08012520
 800e868:	08012407 	.word	0x08012407
 800e86c:	080123ab 	.word	0x080123ab
 800e870:	080122cc 	.word	0x080122cc
 800e874:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e878:	6018      	str	r0, [r3, #0]
 800e87a:	9b03      	ldr	r3, [sp, #12]
 800e87c:	2b0e      	cmp	r3, #14
 800e87e:	f200 80a1 	bhi.w	800e9c4 <_dtoa_r+0x444>
 800e882:	2c00      	cmp	r4, #0
 800e884:	f000 809e 	beq.w	800e9c4 <_dtoa_r+0x444>
 800e888:	2f00      	cmp	r7, #0
 800e88a:	dd33      	ble.n	800e8f4 <_dtoa_r+0x374>
 800e88c:	4b9c      	ldr	r3, [pc, #624]	@ (800eb00 <_dtoa_r+0x580>)
 800e88e:	f007 020f 	and.w	r2, r7, #15
 800e892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e896:	ed93 7b00 	vldr	d7, [r3]
 800e89a:	05f8      	lsls	r0, r7, #23
 800e89c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e8a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e8a4:	d516      	bpl.n	800e8d4 <_dtoa_r+0x354>
 800e8a6:	4b97      	ldr	r3, [pc, #604]	@ (800eb04 <_dtoa_r+0x584>)
 800e8a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e8ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8b0:	f7f1 ffcc 	bl	800084c <__aeabi_ddiv>
 800e8b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8b8:	f004 040f 	and.w	r4, r4, #15
 800e8bc:	2603      	movs	r6, #3
 800e8be:	4d91      	ldr	r5, [pc, #580]	@ (800eb04 <_dtoa_r+0x584>)
 800e8c0:	b954      	cbnz	r4, 800e8d8 <_dtoa_r+0x358>
 800e8c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e8c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8ca:	f7f1 ffbf 	bl	800084c <__aeabi_ddiv>
 800e8ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8d2:	e028      	b.n	800e926 <_dtoa_r+0x3a6>
 800e8d4:	2602      	movs	r6, #2
 800e8d6:	e7f2      	b.n	800e8be <_dtoa_r+0x33e>
 800e8d8:	07e1      	lsls	r1, r4, #31
 800e8da:	d508      	bpl.n	800e8ee <_dtoa_r+0x36e>
 800e8dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e8e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8e4:	f7f1 fe88 	bl	80005f8 <__aeabi_dmul>
 800e8e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e8ec:	3601      	adds	r6, #1
 800e8ee:	1064      	asrs	r4, r4, #1
 800e8f0:	3508      	adds	r5, #8
 800e8f2:	e7e5      	b.n	800e8c0 <_dtoa_r+0x340>
 800e8f4:	f000 80af 	beq.w	800ea56 <_dtoa_r+0x4d6>
 800e8f8:	427c      	negs	r4, r7
 800e8fa:	4b81      	ldr	r3, [pc, #516]	@ (800eb00 <_dtoa_r+0x580>)
 800e8fc:	4d81      	ldr	r5, [pc, #516]	@ (800eb04 <_dtoa_r+0x584>)
 800e8fe:	f004 020f 	and.w	r2, r4, #15
 800e902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e90e:	f7f1 fe73 	bl	80005f8 <__aeabi_dmul>
 800e912:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e916:	1124      	asrs	r4, r4, #4
 800e918:	2300      	movs	r3, #0
 800e91a:	2602      	movs	r6, #2
 800e91c:	2c00      	cmp	r4, #0
 800e91e:	f040 808f 	bne.w	800ea40 <_dtoa_r+0x4c0>
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1d3      	bne.n	800e8ce <_dtoa_r+0x34e>
 800e926:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e928:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f000 8094 	beq.w	800ea5a <_dtoa_r+0x4da>
 800e932:	4b75      	ldr	r3, [pc, #468]	@ (800eb08 <_dtoa_r+0x588>)
 800e934:	2200      	movs	r2, #0
 800e936:	4620      	mov	r0, r4
 800e938:	4629      	mov	r1, r5
 800e93a:	f7f2 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800e93e:	2800      	cmp	r0, #0
 800e940:	f000 808b 	beq.w	800ea5a <_dtoa_r+0x4da>
 800e944:	9b03      	ldr	r3, [sp, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	f000 8087 	beq.w	800ea5a <_dtoa_r+0x4da>
 800e94c:	f1bb 0f00 	cmp.w	fp, #0
 800e950:	dd34      	ble.n	800e9bc <_dtoa_r+0x43c>
 800e952:	4620      	mov	r0, r4
 800e954:	4b6d      	ldr	r3, [pc, #436]	@ (800eb0c <_dtoa_r+0x58c>)
 800e956:	2200      	movs	r2, #0
 800e958:	4629      	mov	r1, r5
 800e95a:	f7f1 fe4d 	bl	80005f8 <__aeabi_dmul>
 800e95e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e962:	f107 38ff 	add.w	r8, r7, #4294967295
 800e966:	3601      	adds	r6, #1
 800e968:	465c      	mov	r4, fp
 800e96a:	4630      	mov	r0, r6
 800e96c:	f7f1 fdda 	bl	8000524 <__aeabi_i2d>
 800e970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e974:	f7f1 fe40 	bl	80005f8 <__aeabi_dmul>
 800e978:	4b65      	ldr	r3, [pc, #404]	@ (800eb10 <_dtoa_r+0x590>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	f7f1 fc86 	bl	800028c <__adddf3>
 800e980:	4605      	mov	r5, r0
 800e982:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e986:	2c00      	cmp	r4, #0
 800e988:	d16a      	bne.n	800ea60 <_dtoa_r+0x4e0>
 800e98a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e98e:	4b61      	ldr	r3, [pc, #388]	@ (800eb14 <_dtoa_r+0x594>)
 800e990:	2200      	movs	r2, #0
 800e992:	f7f1 fc79 	bl	8000288 <__aeabi_dsub>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e99e:	462a      	mov	r2, r5
 800e9a0:	4633      	mov	r3, r6
 800e9a2:	f7f2 f8b9 	bl	8000b18 <__aeabi_dcmpgt>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f040 8298 	bne.w	800eedc <_dtoa_r+0x95c>
 800e9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9b0:	462a      	mov	r2, r5
 800e9b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9b6:	f7f2 f891 	bl	8000adc <__aeabi_dcmplt>
 800e9ba:	bb38      	cbnz	r0, 800ea0c <_dtoa_r+0x48c>
 800e9bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e9c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e9c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	f2c0 8157 	blt.w	800ec7a <_dtoa_r+0x6fa>
 800e9cc:	2f0e      	cmp	r7, #14
 800e9ce:	f300 8154 	bgt.w	800ec7a <_dtoa_r+0x6fa>
 800e9d2:	4b4b      	ldr	r3, [pc, #300]	@ (800eb00 <_dtoa_r+0x580>)
 800e9d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9d8:	ed93 7b00 	vldr	d7, [r3]
 800e9dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	ed8d 7b00 	vstr	d7, [sp]
 800e9e4:	f280 80e5 	bge.w	800ebb2 <_dtoa_r+0x632>
 800e9e8:	9b03      	ldr	r3, [sp, #12]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f300 80e1 	bgt.w	800ebb2 <_dtoa_r+0x632>
 800e9f0:	d10c      	bne.n	800ea0c <_dtoa_r+0x48c>
 800e9f2:	4b48      	ldr	r3, [pc, #288]	@ (800eb14 <_dtoa_r+0x594>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	ec51 0b17 	vmov	r0, r1, d7
 800e9fa:	f7f1 fdfd 	bl	80005f8 <__aeabi_dmul>
 800e9fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea02:	f7f2 f87f 	bl	8000b04 <__aeabi_dcmpge>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	f000 8266 	beq.w	800eed8 <_dtoa_r+0x958>
 800ea0c:	2400      	movs	r4, #0
 800ea0e:	4625      	mov	r5, r4
 800ea10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea12:	4656      	mov	r6, sl
 800ea14:	ea6f 0803 	mvn.w	r8, r3
 800ea18:	2700      	movs	r7, #0
 800ea1a:	4621      	mov	r1, r4
 800ea1c:	4648      	mov	r0, r9
 800ea1e:	f000 fcbf 	bl	800f3a0 <_Bfree>
 800ea22:	2d00      	cmp	r5, #0
 800ea24:	f000 80bd 	beq.w	800eba2 <_dtoa_r+0x622>
 800ea28:	b12f      	cbz	r7, 800ea36 <_dtoa_r+0x4b6>
 800ea2a:	42af      	cmp	r7, r5
 800ea2c:	d003      	beq.n	800ea36 <_dtoa_r+0x4b6>
 800ea2e:	4639      	mov	r1, r7
 800ea30:	4648      	mov	r0, r9
 800ea32:	f000 fcb5 	bl	800f3a0 <_Bfree>
 800ea36:	4629      	mov	r1, r5
 800ea38:	4648      	mov	r0, r9
 800ea3a:	f000 fcb1 	bl	800f3a0 <_Bfree>
 800ea3e:	e0b0      	b.n	800eba2 <_dtoa_r+0x622>
 800ea40:	07e2      	lsls	r2, r4, #31
 800ea42:	d505      	bpl.n	800ea50 <_dtoa_r+0x4d0>
 800ea44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea48:	f7f1 fdd6 	bl	80005f8 <__aeabi_dmul>
 800ea4c:	3601      	adds	r6, #1
 800ea4e:	2301      	movs	r3, #1
 800ea50:	1064      	asrs	r4, r4, #1
 800ea52:	3508      	adds	r5, #8
 800ea54:	e762      	b.n	800e91c <_dtoa_r+0x39c>
 800ea56:	2602      	movs	r6, #2
 800ea58:	e765      	b.n	800e926 <_dtoa_r+0x3a6>
 800ea5a:	9c03      	ldr	r4, [sp, #12]
 800ea5c:	46b8      	mov	r8, r7
 800ea5e:	e784      	b.n	800e96a <_dtoa_r+0x3ea>
 800ea60:	4b27      	ldr	r3, [pc, #156]	@ (800eb00 <_dtoa_r+0x580>)
 800ea62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea6c:	4454      	add	r4, sl
 800ea6e:	2900      	cmp	r1, #0
 800ea70:	d054      	beq.n	800eb1c <_dtoa_r+0x59c>
 800ea72:	4929      	ldr	r1, [pc, #164]	@ (800eb18 <_dtoa_r+0x598>)
 800ea74:	2000      	movs	r0, #0
 800ea76:	f7f1 fee9 	bl	800084c <__aeabi_ddiv>
 800ea7a:	4633      	mov	r3, r6
 800ea7c:	462a      	mov	r2, r5
 800ea7e:	f7f1 fc03 	bl	8000288 <__aeabi_dsub>
 800ea82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea86:	4656      	mov	r6, sl
 800ea88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea8c:	f7f2 f864 	bl	8000b58 <__aeabi_d2iz>
 800ea90:	4605      	mov	r5, r0
 800ea92:	f7f1 fd47 	bl	8000524 <__aeabi_i2d>
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea9e:	f7f1 fbf3 	bl	8000288 <__aeabi_dsub>
 800eaa2:	3530      	adds	r5, #48	@ 0x30
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eaac:	f806 5b01 	strb.w	r5, [r6], #1
 800eab0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eab4:	f7f2 f812 	bl	8000adc <__aeabi_dcmplt>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d172      	bne.n	800eba2 <_dtoa_r+0x622>
 800eabc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eac0:	4911      	ldr	r1, [pc, #68]	@ (800eb08 <_dtoa_r+0x588>)
 800eac2:	2000      	movs	r0, #0
 800eac4:	f7f1 fbe0 	bl	8000288 <__aeabi_dsub>
 800eac8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eacc:	f7f2 f806 	bl	8000adc <__aeabi_dcmplt>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	f040 80b4 	bne.w	800ec3e <_dtoa_r+0x6be>
 800ead6:	42a6      	cmp	r6, r4
 800ead8:	f43f af70 	beq.w	800e9bc <_dtoa_r+0x43c>
 800eadc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eae0:	4b0a      	ldr	r3, [pc, #40]	@ (800eb0c <_dtoa_r+0x58c>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	f7f1 fd88 	bl	80005f8 <__aeabi_dmul>
 800eae8:	4b08      	ldr	r3, [pc, #32]	@ (800eb0c <_dtoa_r+0x58c>)
 800eaea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eaee:	2200      	movs	r2, #0
 800eaf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaf4:	f7f1 fd80 	bl	80005f8 <__aeabi_dmul>
 800eaf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eafc:	e7c4      	b.n	800ea88 <_dtoa_r+0x508>
 800eafe:	bf00      	nop
 800eb00:	08012520 	.word	0x08012520
 800eb04:	080124f8 	.word	0x080124f8
 800eb08:	3ff00000 	.word	0x3ff00000
 800eb0c:	40240000 	.word	0x40240000
 800eb10:	401c0000 	.word	0x401c0000
 800eb14:	40140000 	.word	0x40140000
 800eb18:	3fe00000 	.word	0x3fe00000
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f7f1 fd6a 	bl	80005f8 <__aeabi_dmul>
 800eb24:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eb28:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eb2a:	4656      	mov	r6, sl
 800eb2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb30:	f7f2 f812 	bl	8000b58 <__aeabi_d2iz>
 800eb34:	4605      	mov	r5, r0
 800eb36:	f7f1 fcf5 	bl	8000524 <__aeabi_i2d>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb42:	f7f1 fba1 	bl	8000288 <__aeabi_dsub>
 800eb46:	3530      	adds	r5, #48	@ 0x30
 800eb48:	f806 5b01 	strb.w	r5, [r6], #1
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	460b      	mov	r3, r1
 800eb50:	42a6      	cmp	r6, r4
 800eb52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb56:	f04f 0200 	mov.w	r2, #0
 800eb5a:	d124      	bne.n	800eba6 <_dtoa_r+0x626>
 800eb5c:	4baf      	ldr	r3, [pc, #700]	@ (800ee1c <_dtoa_r+0x89c>)
 800eb5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eb62:	f7f1 fb93 	bl	800028c <__adddf3>
 800eb66:	4602      	mov	r2, r0
 800eb68:	460b      	mov	r3, r1
 800eb6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb6e:	f7f1 ffd3 	bl	8000b18 <__aeabi_dcmpgt>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d163      	bne.n	800ec3e <_dtoa_r+0x6be>
 800eb76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eb7a:	49a8      	ldr	r1, [pc, #672]	@ (800ee1c <_dtoa_r+0x89c>)
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	f7f1 fb83 	bl	8000288 <__aeabi_dsub>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb8a:	f7f1 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	f43f af14 	beq.w	800e9bc <_dtoa_r+0x43c>
 800eb94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800eb96:	1e73      	subs	r3, r6, #1
 800eb98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb9e:	2b30      	cmp	r3, #48	@ 0x30
 800eba0:	d0f8      	beq.n	800eb94 <_dtoa_r+0x614>
 800eba2:	4647      	mov	r7, r8
 800eba4:	e03b      	b.n	800ec1e <_dtoa_r+0x69e>
 800eba6:	4b9e      	ldr	r3, [pc, #632]	@ (800ee20 <_dtoa_r+0x8a0>)
 800eba8:	f7f1 fd26 	bl	80005f8 <__aeabi_dmul>
 800ebac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebb0:	e7bc      	b.n	800eb2c <_dtoa_r+0x5ac>
 800ebb2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ebb6:	4656      	mov	r6, sl
 800ebb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	f7f1 fe44 	bl	800084c <__aeabi_ddiv>
 800ebc4:	f7f1 ffc8 	bl	8000b58 <__aeabi_d2iz>
 800ebc8:	4680      	mov	r8, r0
 800ebca:	f7f1 fcab 	bl	8000524 <__aeabi_i2d>
 800ebce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebd2:	f7f1 fd11 	bl	80005f8 <__aeabi_dmul>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	4620      	mov	r0, r4
 800ebdc:	4629      	mov	r1, r5
 800ebde:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ebe2:	f7f1 fb51 	bl	8000288 <__aeabi_dsub>
 800ebe6:	f806 4b01 	strb.w	r4, [r6], #1
 800ebea:	9d03      	ldr	r5, [sp, #12]
 800ebec:	eba6 040a 	sub.w	r4, r6, sl
 800ebf0:	42a5      	cmp	r5, r4
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	d133      	bne.n	800ec60 <_dtoa_r+0x6e0>
 800ebf8:	f7f1 fb48 	bl	800028c <__adddf3>
 800ebfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec00:	4604      	mov	r4, r0
 800ec02:	460d      	mov	r5, r1
 800ec04:	f7f1 ff88 	bl	8000b18 <__aeabi_dcmpgt>
 800ec08:	b9c0      	cbnz	r0, 800ec3c <_dtoa_r+0x6bc>
 800ec0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec0e:	4620      	mov	r0, r4
 800ec10:	4629      	mov	r1, r5
 800ec12:	f7f1 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec16:	b110      	cbz	r0, 800ec1e <_dtoa_r+0x69e>
 800ec18:	f018 0f01 	tst.w	r8, #1
 800ec1c:	d10e      	bne.n	800ec3c <_dtoa_r+0x6bc>
 800ec1e:	9902      	ldr	r1, [sp, #8]
 800ec20:	4648      	mov	r0, r9
 800ec22:	f000 fbbd 	bl	800f3a0 <_Bfree>
 800ec26:	2300      	movs	r3, #0
 800ec28:	7033      	strb	r3, [r6, #0]
 800ec2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec2c:	3701      	adds	r7, #1
 800ec2e:	601f      	str	r7, [r3, #0]
 800ec30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f000 824b 	beq.w	800f0ce <_dtoa_r+0xb4e>
 800ec38:	601e      	str	r6, [r3, #0]
 800ec3a:	e248      	b.n	800f0ce <_dtoa_r+0xb4e>
 800ec3c:	46b8      	mov	r8, r7
 800ec3e:	4633      	mov	r3, r6
 800ec40:	461e      	mov	r6, r3
 800ec42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec46:	2a39      	cmp	r2, #57	@ 0x39
 800ec48:	d106      	bne.n	800ec58 <_dtoa_r+0x6d8>
 800ec4a:	459a      	cmp	sl, r3
 800ec4c:	d1f8      	bne.n	800ec40 <_dtoa_r+0x6c0>
 800ec4e:	2230      	movs	r2, #48	@ 0x30
 800ec50:	f108 0801 	add.w	r8, r8, #1
 800ec54:	f88a 2000 	strb.w	r2, [sl]
 800ec58:	781a      	ldrb	r2, [r3, #0]
 800ec5a:	3201      	adds	r2, #1
 800ec5c:	701a      	strb	r2, [r3, #0]
 800ec5e:	e7a0      	b.n	800eba2 <_dtoa_r+0x622>
 800ec60:	4b6f      	ldr	r3, [pc, #444]	@ (800ee20 <_dtoa_r+0x8a0>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	f7f1 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	460d      	mov	r5, r1
 800ec70:	f7f1 ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d09f      	beq.n	800ebb8 <_dtoa_r+0x638>
 800ec78:	e7d1      	b.n	800ec1e <_dtoa_r+0x69e>
 800ec7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec7c:	2a00      	cmp	r2, #0
 800ec7e:	f000 80ea 	beq.w	800ee56 <_dtoa_r+0x8d6>
 800ec82:	9a07      	ldr	r2, [sp, #28]
 800ec84:	2a01      	cmp	r2, #1
 800ec86:	f300 80cd 	bgt.w	800ee24 <_dtoa_r+0x8a4>
 800ec8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ec8c:	2a00      	cmp	r2, #0
 800ec8e:	f000 80c1 	beq.w	800ee14 <_dtoa_r+0x894>
 800ec92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec96:	9c08      	ldr	r4, [sp, #32]
 800ec98:	9e00      	ldr	r6, [sp, #0]
 800ec9a:	9a00      	ldr	r2, [sp, #0]
 800ec9c:	441a      	add	r2, r3
 800ec9e:	9200      	str	r2, [sp, #0]
 800eca0:	9a06      	ldr	r2, [sp, #24]
 800eca2:	2101      	movs	r1, #1
 800eca4:	441a      	add	r2, r3
 800eca6:	4648      	mov	r0, r9
 800eca8:	9206      	str	r2, [sp, #24]
 800ecaa:	f000 fc77 	bl	800f59c <__i2b>
 800ecae:	4605      	mov	r5, r0
 800ecb0:	b166      	cbz	r6, 800eccc <_dtoa_r+0x74c>
 800ecb2:	9b06      	ldr	r3, [sp, #24]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	dd09      	ble.n	800eccc <_dtoa_r+0x74c>
 800ecb8:	42b3      	cmp	r3, r6
 800ecba:	9a00      	ldr	r2, [sp, #0]
 800ecbc:	bfa8      	it	ge
 800ecbe:	4633      	movge	r3, r6
 800ecc0:	1ad2      	subs	r2, r2, r3
 800ecc2:	9200      	str	r2, [sp, #0]
 800ecc4:	9a06      	ldr	r2, [sp, #24]
 800ecc6:	1af6      	subs	r6, r6, r3
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	9306      	str	r3, [sp, #24]
 800eccc:	9b08      	ldr	r3, [sp, #32]
 800ecce:	b30b      	cbz	r3, 800ed14 <_dtoa_r+0x794>
 800ecd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 80c6 	beq.w	800ee64 <_dtoa_r+0x8e4>
 800ecd8:	2c00      	cmp	r4, #0
 800ecda:	f000 80c0 	beq.w	800ee5e <_dtoa_r+0x8de>
 800ecde:	4629      	mov	r1, r5
 800ece0:	4622      	mov	r2, r4
 800ece2:	4648      	mov	r0, r9
 800ece4:	f000 fd12 	bl	800f70c <__pow5mult>
 800ece8:	9a02      	ldr	r2, [sp, #8]
 800ecea:	4601      	mov	r1, r0
 800ecec:	4605      	mov	r5, r0
 800ecee:	4648      	mov	r0, r9
 800ecf0:	f000 fc6a 	bl	800f5c8 <__multiply>
 800ecf4:	9902      	ldr	r1, [sp, #8]
 800ecf6:	4680      	mov	r8, r0
 800ecf8:	4648      	mov	r0, r9
 800ecfa:	f000 fb51 	bl	800f3a0 <_Bfree>
 800ecfe:	9b08      	ldr	r3, [sp, #32]
 800ed00:	1b1b      	subs	r3, r3, r4
 800ed02:	9308      	str	r3, [sp, #32]
 800ed04:	f000 80b1 	beq.w	800ee6a <_dtoa_r+0x8ea>
 800ed08:	9a08      	ldr	r2, [sp, #32]
 800ed0a:	4641      	mov	r1, r8
 800ed0c:	4648      	mov	r0, r9
 800ed0e:	f000 fcfd 	bl	800f70c <__pow5mult>
 800ed12:	9002      	str	r0, [sp, #8]
 800ed14:	2101      	movs	r1, #1
 800ed16:	4648      	mov	r0, r9
 800ed18:	f000 fc40 	bl	800f59c <__i2b>
 800ed1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed1e:	4604      	mov	r4, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f000 81d8 	beq.w	800f0d6 <_dtoa_r+0xb56>
 800ed26:	461a      	mov	r2, r3
 800ed28:	4601      	mov	r1, r0
 800ed2a:	4648      	mov	r0, r9
 800ed2c:	f000 fcee 	bl	800f70c <__pow5mult>
 800ed30:	9b07      	ldr	r3, [sp, #28]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	4604      	mov	r4, r0
 800ed36:	f300 809f 	bgt.w	800ee78 <_dtoa_r+0x8f8>
 800ed3a:	9b04      	ldr	r3, [sp, #16]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f040 8097 	bne.w	800ee70 <_dtoa_r+0x8f0>
 800ed42:	9b05      	ldr	r3, [sp, #20]
 800ed44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f040 8093 	bne.w	800ee74 <_dtoa_r+0x8f4>
 800ed4e:	9b05      	ldr	r3, [sp, #20]
 800ed50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed54:	0d1b      	lsrs	r3, r3, #20
 800ed56:	051b      	lsls	r3, r3, #20
 800ed58:	b133      	cbz	r3, 800ed68 <_dtoa_r+0x7e8>
 800ed5a:	9b00      	ldr	r3, [sp, #0]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	9b06      	ldr	r3, [sp, #24]
 800ed62:	3301      	adds	r3, #1
 800ed64:	9306      	str	r3, [sp, #24]
 800ed66:	2301      	movs	r3, #1
 800ed68:	9308      	str	r3, [sp, #32]
 800ed6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 81b8 	beq.w	800f0e2 <_dtoa_r+0xb62>
 800ed72:	6923      	ldr	r3, [r4, #16]
 800ed74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed78:	6918      	ldr	r0, [r3, #16]
 800ed7a:	f000 fbc3 	bl	800f504 <__hi0bits>
 800ed7e:	f1c0 0020 	rsb	r0, r0, #32
 800ed82:	9b06      	ldr	r3, [sp, #24]
 800ed84:	4418      	add	r0, r3
 800ed86:	f010 001f 	ands.w	r0, r0, #31
 800ed8a:	f000 8082 	beq.w	800ee92 <_dtoa_r+0x912>
 800ed8e:	f1c0 0320 	rsb	r3, r0, #32
 800ed92:	2b04      	cmp	r3, #4
 800ed94:	dd73      	ble.n	800ee7e <_dtoa_r+0x8fe>
 800ed96:	9b00      	ldr	r3, [sp, #0]
 800ed98:	f1c0 001c 	rsb	r0, r0, #28
 800ed9c:	4403      	add	r3, r0
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	9b06      	ldr	r3, [sp, #24]
 800eda2:	4403      	add	r3, r0
 800eda4:	4406      	add	r6, r0
 800eda6:	9306      	str	r3, [sp, #24]
 800eda8:	9b00      	ldr	r3, [sp, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	dd05      	ble.n	800edba <_dtoa_r+0x83a>
 800edae:	9902      	ldr	r1, [sp, #8]
 800edb0:	461a      	mov	r2, r3
 800edb2:	4648      	mov	r0, r9
 800edb4:	f000 fd04 	bl	800f7c0 <__lshift>
 800edb8:	9002      	str	r0, [sp, #8]
 800edba:	9b06      	ldr	r3, [sp, #24]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	dd05      	ble.n	800edcc <_dtoa_r+0x84c>
 800edc0:	4621      	mov	r1, r4
 800edc2:	461a      	mov	r2, r3
 800edc4:	4648      	mov	r0, r9
 800edc6:	f000 fcfb 	bl	800f7c0 <__lshift>
 800edca:	4604      	mov	r4, r0
 800edcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d061      	beq.n	800ee96 <_dtoa_r+0x916>
 800edd2:	9802      	ldr	r0, [sp, #8]
 800edd4:	4621      	mov	r1, r4
 800edd6:	f000 fd5f 	bl	800f898 <__mcmp>
 800edda:	2800      	cmp	r0, #0
 800eddc:	da5b      	bge.n	800ee96 <_dtoa_r+0x916>
 800edde:	2300      	movs	r3, #0
 800ede0:	9902      	ldr	r1, [sp, #8]
 800ede2:	220a      	movs	r2, #10
 800ede4:	4648      	mov	r0, r9
 800ede6:	f000 fafd 	bl	800f3e4 <__multadd>
 800edea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edec:	9002      	str	r0, [sp, #8]
 800edee:	f107 38ff 	add.w	r8, r7, #4294967295
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f000 8177 	beq.w	800f0e6 <_dtoa_r+0xb66>
 800edf8:	4629      	mov	r1, r5
 800edfa:	2300      	movs	r3, #0
 800edfc:	220a      	movs	r2, #10
 800edfe:	4648      	mov	r0, r9
 800ee00:	f000 faf0 	bl	800f3e4 <__multadd>
 800ee04:	f1bb 0f00 	cmp.w	fp, #0
 800ee08:	4605      	mov	r5, r0
 800ee0a:	dc6f      	bgt.n	800eeec <_dtoa_r+0x96c>
 800ee0c:	9b07      	ldr	r3, [sp, #28]
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	dc49      	bgt.n	800eea6 <_dtoa_r+0x926>
 800ee12:	e06b      	b.n	800eeec <_dtoa_r+0x96c>
 800ee14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ee16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee1a:	e73c      	b.n	800ec96 <_dtoa_r+0x716>
 800ee1c:	3fe00000 	.word	0x3fe00000
 800ee20:	40240000 	.word	0x40240000
 800ee24:	9b03      	ldr	r3, [sp, #12]
 800ee26:	1e5c      	subs	r4, r3, #1
 800ee28:	9b08      	ldr	r3, [sp, #32]
 800ee2a:	42a3      	cmp	r3, r4
 800ee2c:	db09      	blt.n	800ee42 <_dtoa_r+0x8c2>
 800ee2e:	1b1c      	subs	r4, r3, r4
 800ee30:	9b03      	ldr	r3, [sp, #12]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f6bf af30 	bge.w	800ec98 <_dtoa_r+0x718>
 800ee38:	9b00      	ldr	r3, [sp, #0]
 800ee3a:	9a03      	ldr	r2, [sp, #12]
 800ee3c:	1a9e      	subs	r6, r3, r2
 800ee3e:	2300      	movs	r3, #0
 800ee40:	e72b      	b.n	800ec9a <_dtoa_r+0x71a>
 800ee42:	9b08      	ldr	r3, [sp, #32]
 800ee44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee46:	9408      	str	r4, [sp, #32]
 800ee48:	1ae3      	subs	r3, r4, r3
 800ee4a:	441a      	add	r2, r3
 800ee4c:	9e00      	ldr	r6, [sp, #0]
 800ee4e:	9b03      	ldr	r3, [sp, #12]
 800ee50:	920d      	str	r2, [sp, #52]	@ 0x34
 800ee52:	2400      	movs	r4, #0
 800ee54:	e721      	b.n	800ec9a <_dtoa_r+0x71a>
 800ee56:	9c08      	ldr	r4, [sp, #32]
 800ee58:	9e00      	ldr	r6, [sp, #0]
 800ee5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ee5c:	e728      	b.n	800ecb0 <_dtoa_r+0x730>
 800ee5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ee62:	e751      	b.n	800ed08 <_dtoa_r+0x788>
 800ee64:	9a08      	ldr	r2, [sp, #32]
 800ee66:	9902      	ldr	r1, [sp, #8]
 800ee68:	e750      	b.n	800ed0c <_dtoa_r+0x78c>
 800ee6a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee6e:	e751      	b.n	800ed14 <_dtoa_r+0x794>
 800ee70:	2300      	movs	r3, #0
 800ee72:	e779      	b.n	800ed68 <_dtoa_r+0x7e8>
 800ee74:	9b04      	ldr	r3, [sp, #16]
 800ee76:	e777      	b.n	800ed68 <_dtoa_r+0x7e8>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	9308      	str	r3, [sp, #32]
 800ee7c:	e779      	b.n	800ed72 <_dtoa_r+0x7f2>
 800ee7e:	d093      	beq.n	800eda8 <_dtoa_r+0x828>
 800ee80:	9a00      	ldr	r2, [sp, #0]
 800ee82:	331c      	adds	r3, #28
 800ee84:	441a      	add	r2, r3
 800ee86:	9200      	str	r2, [sp, #0]
 800ee88:	9a06      	ldr	r2, [sp, #24]
 800ee8a:	441a      	add	r2, r3
 800ee8c:	441e      	add	r6, r3
 800ee8e:	9206      	str	r2, [sp, #24]
 800ee90:	e78a      	b.n	800eda8 <_dtoa_r+0x828>
 800ee92:	4603      	mov	r3, r0
 800ee94:	e7f4      	b.n	800ee80 <_dtoa_r+0x900>
 800ee96:	9b03      	ldr	r3, [sp, #12]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	46b8      	mov	r8, r7
 800ee9c:	dc20      	bgt.n	800eee0 <_dtoa_r+0x960>
 800ee9e:	469b      	mov	fp, r3
 800eea0:	9b07      	ldr	r3, [sp, #28]
 800eea2:	2b02      	cmp	r3, #2
 800eea4:	dd1e      	ble.n	800eee4 <_dtoa_r+0x964>
 800eea6:	f1bb 0f00 	cmp.w	fp, #0
 800eeaa:	f47f adb1 	bne.w	800ea10 <_dtoa_r+0x490>
 800eeae:	4621      	mov	r1, r4
 800eeb0:	465b      	mov	r3, fp
 800eeb2:	2205      	movs	r2, #5
 800eeb4:	4648      	mov	r0, r9
 800eeb6:	f000 fa95 	bl	800f3e4 <__multadd>
 800eeba:	4601      	mov	r1, r0
 800eebc:	4604      	mov	r4, r0
 800eebe:	9802      	ldr	r0, [sp, #8]
 800eec0:	f000 fcea 	bl	800f898 <__mcmp>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	f77f ada3 	ble.w	800ea10 <_dtoa_r+0x490>
 800eeca:	4656      	mov	r6, sl
 800eecc:	2331      	movs	r3, #49	@ 0x31
 800eece:	f806 3b01 	strb.w	r3, [r6], #1
 800eed2:	f108 0801 	add.w	r8, r8, #1
 800eed6:	e59f      	b.n	800ea18 <_dtoa_r+0x498>
 800eed8:	9c03      	ldr	r4, [sp, #12]
 800eeda:	46b8      	mov	r8, r7
 800eedc:	4625      	mov	r5, r4
 800eede:	e7f4      	b.n	800eeca <_dtoa_r+0x94a>
 800eee0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800eee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 8101 	beq.w	800f0ee <_dtoa_r+0xb6e>
 800eeec:	2e00      	cmp	r6, #0
 800eeee:	dd05      	ble.n	800eefc <_dtoa_r+0x97c>
 800eef0:	4629      	mov	r1, r5
 800eef2:	4632      	mov	r2, r6
 800eef4:	4648      	mov	r0, r9
 800eef6:	f000 fc63 	bl	800f7c0 <__lshift>
 800eefa:	4605      	mov	r5, r0
 800eefc:	9b08      	ldr	r3, [sp, #32]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d05c      	beq.n	800efbc <_dtoa_r+0xa3c>
 800ef02:	6869      	ldr	r1, [r5, #4]
 800ef04:	4648      	mov	r0, r9
 800ef06:	f000 fa0b 	bl	800f320 <_Balloc>
 800ef0a:	4606      	mov	r6, r0
 800ef0c:	b928      	cbnz	r0, 800ef1a <_dtoa_r+0x99a>
 800ef0e:	4b82      	ldr	r3, [pc, #520]	@ (800f118 <_dtoa_r+0xb98>)
 800ef10:	4602      	mov	r2, r0
 800ef12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef16:	f7ff bb4a 	b.w	800e5ae <_dtoa_r+0x2e>
 800ef1a:	692a      	ldr	r2, [r5, #16]
 800ef1c:	3202      	adds	r2, #2
 800ef1e:	0092      	lsls	r2, r2, #2
 800ef20:	f105 010c 	add.w	r1, r5, #12
 800ef24:	300c      	adds	r0, #12
 800ef26:	f7ff fa6e 	bl	800e406 <memcpy>
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	4648      	mov	r0, r9
 800ef30:	f000 fc46 	bl	800f7c0 <__lshift>
 800ef34:	f10a 0301 	add.w	r3, sl, #1
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	eb0a 030b 	add.w	r3, sl, fp
 800ef3e:	9308      	str	r3, [sp, #32]
 800ef40:	9b04      	ldr	r3, [sp, #16]
 800ef42:	f003 0301 	and.w	r3, r3, #1
 800ef46:	462f      	mov	r7, r5
 800ef48:	9306      	str	r3, [sp, #24]
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	9b00      	ldr	r3, [sp, #0]
 800ef4e:	9802      	ldr	r0, [sp, #8]
 800ef50:	4621      	mov	r1, r4
 800ef52:	f103 3bff 	add.w	fp, r3, #4294967295
 800ef56:	f7ff fa89 	bl	800e46c <quorem>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	3330      	adds	r3, #48	@ 0x30
 800ef5e:	9003      	str	r0, [sp, #12]
 800ef60:	4639      	mov	r1, r7
 800ef62:	9802      	ldr	r0, [sp, #8]
 800ef64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef66:	f000 fc97 	bl	800f898 <__mcmp>
 800ef6a:	462a      	mov	r2, r5
 800ef6c:	9004      	str	r0, [sp, #16]
 800ef6e:	4621      	mov	r1, r4
 800ef70:	4648      	mov	r0, r9
 800ef72:	f000 fcad 	bl	800f8d0 <__mdiff>
 800ef76:	68c2      	ldr	r2, [r0, #12]
 800ef78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	bb02      	cbnz	r2, 800efc0 <_dtoa_r+0xa40>
 800ef7e:	4601      	mov	r1, r0
 800ef80:	9802      	ldr	r0, [sp, #8]
 800ef82:	f000 fc89 	bl	800f898 <__mcmp>
 800ef86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef88:	4602      	mov	r2, r0
 800ef8a:	4631      	mov	r1, r6
 800ef8c:	4648      	mov	r0, r9
 800ef8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ef90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef92:	f000 fa05 	bl	800f3a0 <_Bfree>
 800ef96:	9b07      	ldr	r3, [sp, #28]
 800ef98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef9a:	9e00      	ldr	r6, [sp, #0]
 800ef9c:	ea42 0103 	orr.w	r1, r2, r3
 800efa0:	9b06      	ldr	r3, [sp, #24]
 800efa2:	4319      	orrs	r1, r3
 800efa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa6:	d10d      	bne.n	800efc4 <_dtoa_r+0xa44>
 800efa8:	2b39      	cmp	r3, #57	@ 0x39
 800efaa:	d027      	beq.n	800effc <_dtoa_r+0xa7c>
 800efac:	9a04      	ldr	r2, [sp, #16]
 800efae:	2a00      	cmp	r2, #0
 800efb0:	dd01      	ble.n	800efb6 <_dtoa_r+0xa36>
 800efb2:	9b03      	ldr	r3, [sp, #12]
 800efb4:	3331      	adds	r3, #49	@ 0x31
 800efb6:	f88b 3000 	strb.w	r3, [fp]
 800efba:	e52e      	b.n	800ea1a <_dtoa_r+0x49a>
 800efbc:	4628      	mov	r0, r5
 800efbe:	e7b9      	b.n	800ef34 <_dtoa_r+0x9b4>
 800efc0:	2201      	movs	r2, #1
 800efc2:	e7e2      	b.n	800ef8a <_dtoa_r+0xa0a>
 800efc4:	9904      	ldr	r1, [sp, #16]
 800efc6:	2900      	cmp	r1, #0
 800efc8:	db04      	blt.n	800efd4 <_dtoa_r+0xa54>
 800efca:	9807      	ldr	r0, [sp, #28]
 800efcc:	4301      	orrs	r1, r0
 800efce:	9806      	ldr	r0, [sp, #24]
 800efd0:	4301      	orrs	r1, r0
 800efd2:	d120      	bne.n	800f016 <_dtoa_r+0xa96>
 800efd4:	2a00      	cmp	r2, #0
 800efd6:	ddee      	ble.n	800efb6 <_dtoa_r+0xa36>
 800efd8:	9902      	ldr	r1, [sp, #8]
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	2201      	movs	r2, #1
 800efde:	4648      	mov	r0, r9
 800efe0:	f000 fbee 	bl	800f7c0 <__lshift>
 800efe4:	4621      	mov	r1, r4
 800efe6:	9002      	str	r0, [sp, #8]
 800efe8:	f000 fc56 	bl	800f898 <__mcmp>
 800efec:	2800      	cmp	r0, #0
 800efee:	9b00      	ldr	r3, [sp, #0]
 800eff0:	dc02      	bgt.n	800eff8 <_dtoa_r+0xa78>
 800eff2:	d1e0      	bne.n	800efb6 <_dtoa_r+0xa36>
 800eff4:	07da      	lsls	r2, r3, #31
 800eff6:	d5de      	bpl.n	800efb6 <_dtoa_r+0xa36>
 800eff8:	2b39      	cmp	r3, #57	@ 0x39
 800effa:	d1da      	bne.n	800efb2 <_dtoa_r+0xa32>
 800effc:	2339      	movs	r3, #57	@ 0x39
 800effe:	f88b 3000 	strb.w	r3, [fp]
 800f002:	4633      	mov	r3, r6
 800f004:	461e      	mov	r6, r3
 800f006:	3b01      	subs	r3, #1
 800f008:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f00c:	2a39      	cmp	r2, #57	@ 0x39
 800f00e:	d04e      	beq.n	800f0ae <_dtoa_r+0xb2e>
 800f010:	3201      	adds	r2, #1
 800f012:	701a      	strb	r2, [r3, #0]
 800f014:	e501      	b.n	800ea1a <_dtoa_r+0x49a>
 800f016:	2a00      	cmp	r2, #0
 800f018:	dd03      	ble.n	800f022 <_dtoa_r+0xaa2>
 800f01a:	2b39      	cmp	r3, #57	@ 0x39
 800f01c:	d0ee      	beq.n	800effc <_dtoa_r+0xa7c>
 800f01e:	3301      	adds	r3, #1
 800f020:	e7c9      	b.n	800efb6 <_dtoa_r+0xa36>
 800f022:	9a00      	ldr	r2, [sp, #0]
 800f024:	9908      	ldr	r1, [sp, #32]
 800f026:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f02a:	428a      	cmp	r2, r1
 800f02c:	d028      	beq.n	800f080 <_dtoa_r+0xb00>
 800f02e:	9902      	ldr	r1, [sp, #8]
 800f030:	2300      	movs	r3, #0
 800f032:	220a      	movs	r2, #10
 800f034:	4648      	mov	r0, r9
 800f036:	f000 f9d5 	bl	800f3e4 <__multadd>
 800f03a:	42af      	cmp	r7, r5
 800f03c:	9002      	str	r0, [sp, #8]
 800f03e:	f04f 0300 	mov.w	r3, #0
 800f042:	f04f 020a 	mov.w	r2, #10
 800f046:	4639      	mov	r1, r7
 800f048:	4648      	mov	r0, r9
 800f04a:	d107      	bne.n	800f05c <_dtoa_r+0xadc>
 800f04c:	f000 f9ca 	bl	800f3e4 <__multadd>
 800f050:	4607      	mov	r7, r0
 800f052:	4605      	mov	r5, r0
 800f054:	9b00      	ldr	r3, [sp, #0]
 800f056:	3301      	adds	r3, #1
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	e777      	b.n	800ef4c <_dtoa_r+0x9cc>
 800f05c:	f000 f9c2 	bl	800f3e4 <__multadd>
 800f060:	4629      	mov	r1, r5
 800f062:	4607      	mov	r7, r0
 800f064:	2300      	movs	r3, #0
 800f066:	220a      	movs	r2, #10
 800f068:	4648      	mov	r0, r9
 800f06a:	f000 f9bb 	bl	800f3e4 <__multadd>
 800f06e:	4605      	mov	r5, r0
 800f070:	e7f0      	b.n	800f054 <_dtoa_r+0xad4>
 800f072:	f1bb 0f00 	cmp.w	fp, #0
 800f076:	bfcc      	ite	gt
 800f078:	465e      	movgt	r6, fp
 800f07a:	2601      	movle	r6, #1
 800f07c:	4456      	add	r6, sl
 800f07e:	2700      	movs	r7, #0
 800f080:	9902      	ldr	r1, [sp, #8]
 800f082:	9300      	str	r3, [sp, #0]
 800f084:	2201      	movs	r2, #1
 800f086:	4648      	mov	r0, r9
 800f088:	f000 fb9a 	bl	800f7c0 <__lshift>
 800f08c:	4621      	mov	r1, r4
 800f08e:	9002      	str	r0, [sp, #8]
 800f090:	f000 fc02 	bl	800f898 <__mcmp>
 800f094:	2800      	cmp	r0, #0
 800f096:	dcb4      	bgt.n	800f002 <_dtoa_r+0xa82>
 800f098:	d102      	bne.n	800f0a0 <_dtoa_r+0xb20>
 800f09a:	9b00      	ldr	r3, [sp, #0]
 800f09c:	07db      	lsls	r3, r3, #31
 800f09e:	d4b0      	bmi.n	800f002 <_dtoa_r+0xa82>
 800f0a0:	4633      	mov	r3, r6
 800f0a2:	461e      	mov	r6, r3
 800f0a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0a8:	2a30      	cmp	r2, #48	@ 0x30
 800f0aa:	d0fa      	beq.n	800f0a2 <_dtoa_r+0xb22>
 800f0ac:	e4b5      	b.n	800ea1a <_dtoa_r+0x49a>
 800f0ae:	459a      	cmp	sl, r3
 800f0b0:	d1a8      	bne.n	800f004 <_dtoa_r+0xa84>
 800f0b2:	2331      	movs	r3, #49	@ 0x31
 800f0b4:	f108 0801 	add.w	r8, r8, #1
 800f0b8:	f88a 3000 	strb.w	r3, [sl]
 800f0bc:	e4ad      	b.n	800ea1a <_dtoa_r+0x49a>
 800f0be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f0c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f11c <_dtoa_r+0xb9c>
 800f0c4:	b11b      	cbz	r3, 800f0ce <_dtoa_r+0xb4e>
 800f0c6:	f10a 0308 	add.w	r3, sl, #8
 800f0ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f0cc:	6013      	str	r3, [r2, #0]
 800f0ce:	4650      	mov	r0, sl
 800f0d0:	b017      	add	sp, #92	@ 0x5c
 800f0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d6:	9b07      	ldr	r3, [sp, #28]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	f77f ae2e 	ble.w	800ed3a <_dtoa_r+0x7ba>
 800f0de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0e0:	9308      	str	r3, [sp, #32]
 800f0e2:	2001      	movs	r0, #1
 800f0e4:	e64d      	b.n	800ed82 <_dtoa_r+0x802>
 800f0e6:	f1bb 0f00 	cmp.w	fp, #0
 800f0ea:	f77f aed9 	ble.w	800eea0 <_dtoa_r+0x920>
 800f0ee:	4656      	mov	r6, sl
 800f0f0:	9802      	ldr	r0, [sp, #8]
 800f0f2:	4621      	mov	r1, r4
 800f0f4:	f7ff f9ba 	bl	800e46c <quorem>
 800f0f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f0fc:	f806 3b01 	strb.w	r3, [r6], #1
 800f100:	eba6 020a 	sub.w	r2, r6, sl
 800f104:	4593      	cmp	fp, r2
 800f106:	ddb4      	ble.n	800f072 <_dtoa_r+0xaf2>
 800f108:	9902      	ldr	r1, [sp, #8]
 800f10a:	2300      	movs	r3, #0
 800f10c:	220a      	movs	r2, #10
 800f10e:	4648      	mov	r0, r9
 800f110:	f000 f968 	bl	800f3e4 <__multadd>
 800f114:	9002      	str	r0, [sp, #8]
 800f116:	e7eb      	b.n	800f0f0 <_dtoa_r+0xb70>
 800f118:	08012407 	.word	0x08012407
 800f11c:	080123a2 	.word	0x080123a2

0800f120 <_free_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	4605      	mov	r5, r0
 800f124:	2900      	cmp	r1, #0
 800f126:	d041      	beq.n	800f1ac <_free_r+0x8c>
 800f128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f12c:	1f0c      	subs	r4, r1, #4
 800f12e:	2b00      	cmp	r3, #0
 800f130:	bfb8      	it	lt
 800f132:	18e4      	addlt	r4, r4, r3
 800f134:	f000 f8e8 	bl	800f308 <__malloc_lock>
 800f138:	4a1d      	ldr	r2, [pc, #116]	@ (800f1b0 <_free_r+0x90>)
 800f13a:	6813      	ldr	r3, [r2, #0]
 800f13c:	b933      	cbnz	r3, 800f14c <_free_r+0x2c>
 800f13e:	6063      	str	r3, [r4, #4]
 800f140:	6014      	str	r4, [r2, #0]
 800f142:	4628      	mov	r0, r5
 800f144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f148:	f000 b8e4 	b.w	800f314 <__malloc_unlock>
 800f14c:	42a3      	cmp	r3, r4
 800f14e:	d908      	bls.n	800f162 <_free_r+0x42>
 800f150:	6820      	ldr	r0, [r4, #0]
 800f152:	1821      	adds	r1, r4, r0
 800f154:	428b      	cmp	r3, r1
 800f156:	bf01      	itttt	eq
 800f158:	6819      	ldreq	r1, [r3, #0]
 800f15a:	685b      	ldreq	r3, [r3, #4]
 800f15c:	1809      	addeq	r1, r1, r0
 800f15e:	6021      	streq	r1, [r4, #0]
 800f160:	e7ed      	b.n	800f13e <_free_r+0x1e>
 800f162:	461a      	mov	r2, r3
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	b10b      	cbz	r3, 800f16c <_free_r+0x4c>
 800f168:	42a3      	cmp	r3, r4
 800f16a:	d9fa      	bls.n	800f162 <_free_r+0x42>
 800f16c:	6811      	ldr	r1, [r2, #0]
 800f16e:	1850      	adds	r0, r2, r1
 800f170:	42a0      	cmp	r0, r4
 800f172:	d10b      	bne.n	800f18c <_free_r+0x6c>
 800f174:	6820      	ldr	r0, [r4, #0]
 800f176:	4401      	add	r1, r0
 800f178:	1850      	adds	r0, r2, r1
 800f17a:	4283      	cmp	r3, r0
 800f17c:	6011      	str	r1, [r2, #0]
 800f17e:	d1e0      	bne.n	800f142 <_free_r+0x22>
 800f180:	6818      	ldr	r0, [r3, #0]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	6053      	str	r3, [r2, #4]
 800f186:	4408      	add	r0, r1
 800f188:	6010      	str	r0, [r2, #0]
 800f18a:	e7da      	b.n	800f142 <_free_r+0x22>
 800f18c:	d902      	bls.n	800f194 <_free_r+0x74>
 800f18e:	230c      	movs	r3, #12
 800f190:	602b      	str	r3, [r5, #0]
 800f192:	e7d6      	b.n	800f142 <_free_r+0x22>
 800f194:	6820      	ldr	r0, [r4, #0]
 800f196:	1821      	adds	r1, r4, r0
 800f198:	428b      	cmp	r3, r1
 800f19a:	bf04      	itt	eq
 800f19c:	6819      	ldreq	r1, [r3, #0]
 800f19e:	685b      	ldreq	r3, [r3, #4]
 800f1a0:	6063      	str	r3, [r4, #4]
 800f1a2:	bf04      	itt	eq
 800f1a4:	1809      	addeq	r1, r1, r0
 800f1a6:	6021      	streq	r1, [r4, #0]
 800f1a8:	6054      	str	r4, [r2, #4]
 800f1aa:	e7ca      	b.n	800f142 <_free_r+0x22>
 800f1ac:	bd38      	pop	{r3, r4, r5, pc}
 800f1ae:	bf00      	nop
 800f1b0:	20004074 	.word	0x20004074

0800f1b4 <malloc>:
 800f1b4:	4b02      	ldr	r3, [pc, #8]	@ (800f1c0 <malloc+0xc>)
 800f1b6:	4601      	mov	r1, r0
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	f000 b825 	b.w	800f208 <_malloc_r>
 800f1be:	bf00      	nop
 800f1c0:	20000060 	.word	0x20000060

0800f1c4 <sbrk_aligned>:
 800f1c4:	b570      	push	{r4, r5, r6, lr}
 800f1c6:	4e0f      	ldr	r6, [pc, #60]	@ (800f204 <sbrk_aligned+0x40>)
 800f1c8:	460c      	mov	r4, r1
 800f1ca:	6831      	ldr	r1, [r6, #0]
 800f1cc:	4605      	mov	r5, r0
 800f1ce:	b911      	cbnz	r1, 800f1d6 <sbrk_aligned+0x12>
 800f1d0:	f001 ffca 	bl	8011168 <_sbrk_r>
 800f1d4:	6030      	str	r0, [r6, #0]
 800f1d6:	4621      	mov	r1, r4
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f001 ffc5 	bl	8011168 <_sbrk_r>
 800f1de:	1c43      	adds	r3, r0, #1
 800f1e0:	d103      	bne.n	800f1ea <sbrk_aligned+0x26>
 800f1e2:	f04f 34ff 	mov.w	r4, #4294967295
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	bd70      	pop	{r4, r5, r6, pc}
 800f1ea:	1cc4      	adds	r4, r0, #3
 800f1ec:	f024 0403 	bic.w	r4, r4, #3
 800f1f0:	42a0      	cmp	r0, r4
 800f1f2:	d0f8      	beq.n	800f1e6 <sbrk_aligned+0x22>
 800f1f4:	1a21      	subs	r1, r4, r0
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	f001 ffb6 	bl	8011168 <_sbrk_r>
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	d1f2      	bne.n	800f1e6 <sbrk_aligned+0x22>
 800f200:	e7ef      	b.n	800f1e2 <sbrk_aligned+0x1e>
 800f202:	bf00      	nop
 800f204:	20004070 	.word	0x20004070

0800f208 <_malloc_r>:
 800f208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f20c:	1ccd      	adds	r5, r1, #3
 800f20e:	f025 0503 	bic.w	r5, r5, #3
 800f212:	3508      	adds	r5, #8
 800f214:	2d0c      	cmp	r5, #12
 800f216:	bf38      	it	cc
 800f218:	250c      	movcc	r5, #12
 800f21a:	2d00      	cmp	r5, #0
 800f21c:	4606      	mov	r6, r0
 800f21e:	db01      	blt.n	800f224 <_malloc_r+0x1c>
 800f220:	42a9      	cmp	r1, r5
 800f222:	d904      	bls.n	800f22e <_malloc_r+0x26>
 800f224:	230c      	movs	r3, #12
 800f226:	6033      	str	r3, [r6, #0]
 800f228:	2000      	movs	r0, #0
 800f22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f22e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f304 <_malloc_r+0xfc>
 800f232:	f000 f869 	bl	800f308 <__malloc_lock>
 800f236:	f8d8 3000 	ldr.w	r3, [r8]
 800f23a:	461c      	mov	r4, r3
 800f23c:	bb44      	cbnz	r4, 800f290 <_malloc_r+0x88>
 800f23e:	4629      	mov	r1, r5
 800f240:	4630      	mov	r0, r6
 800f242:	f7ff ffbf 	bl	800f1c4 <sbrk_aligned>
 800f246:	1c43      	adds	r3, r0, #1
 800f248:	4604      	mov	r4, r0
 800f24a:	d158      	bne.n	800f2fe <_malloc_r+0xf6>
 800f24c:	f8d8 4000 	ldr.w	r4, [r8]
 800f250:	4627      	mov	r7, r4
 800f252:	2f00      	cmp	r7, #0
 800f254:	d143      	bne.n	800f2de <_malloc_r+0xd6>
 800f256:	2c00      	cmp	r4, #0
 800f258:	d04b      	beq.n	800f2f2 <_malloc_r+0xea>
 800f25a:	6823      	ldr	r3, [r4, #0]
 800f25c:	4639      	mov	r1, r7
 800f25e:	4630      	mov	r0, r6
 800f260:	eb04 0903 	add.w	r9, r4, r3
 800f264:	f001 ff80 	bl	8011168 <_sbrk_r>
 800f268:	4581      	cmp	r9, r0
 800f26a:	d142      	bne.n	800f2f2 <_malloc_r+0xea>
 800f26c:	6821      	ldr	r1, [r4, #0]
 800f26e:	1a6d      	subs	r5, r5, r1
 800f270:	4629      	mov	r1, r5
 800f272:	4630      	mov	r0, r6
 800f274:	f7ff ffa6 	bl	800f1c4 <sbrk_aligned>
 800f278:	3001      	adds	r0, #1
 800f27a:	d03a      	beq.n	800f2f2 <_malloc_r+0xea>
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	442b      	add	r3, r5
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	f8d8 3000 	ldr.w	r3, [r8]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	bb62      	cbnz	r2, 800f2e4 <_malloc_r+0xdc>
 800f28a:	f8c8 7000 	str.w	r7, [r8]
 800f28e:	e00f      	b.n	800f2b0 <_malloc_r+0xa8>
 800f290:	6822      	ldr	r2, [r4, #0]
 800f292:	1b52      	subs	r2, r2, r5
 800f294:	d420      	bmi.n	800f2d8 <_malloc_r+0xd0>
 800f296:	2a0b      	cmp	r2, #11
 800f298:	d917      	bls.n	800f2ca <_malloc_r+0xc2>
 800f29a:	1961      	adds	r1, r4, r5
 800f29c:	42a3      	cmp	r3, r4
 800f29e:	6025      	str	r5, [r4, #0]
 800f2a0:	bf18      	it	ne
 800f2a2:	6059      	strne	r1, [r3, #4]
 800f2a4:	6863      	ldr	r3, [r4, #4]
 800f2a6:	bf08      	it	eq
 800f2a8:	f8c8 1000 	streq.w	r1, [r8]
 800f2ac:	5162      	str	r2, [r4, r5]
 800f2ae:	604b      	str	r3, [r1, #4]
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	f000 f82f 	bl	800f314 <__malloc_unlock>
 800f2b6:	f104 000b 	add.w	r0, r4, #11
 800f2ba:	1d23      	adds	r3, r4, #4
 800f2bc:	f020 0007 	bic.w	r0, r0, #7
 800f2c0:	1ac2      	subs	r2, r0, r3
 800f2c2:	bf1c      	itt	ne
 800f2c4:	1a1b      	subne	r3, r3, r0
 800f2c6:	50a3      	strne	r3, [r4, r2]
 800f2c8:	e7af      	b.n	800f22a <_malloc_r+0x22>
 800f2ca:	6862      	ldr	r2, [r4, #4]
 800f2cc:	42a3      	cmp	r3, r4
 800f2ce:	bf0c      	ite	eq
 800f2d0:	f8c8 2000 	streq.w	r2, [r8]
 800f2d4:	605a      	strne	r2, [r3, #4]
 800f2d6:	e7eb      	b.n	800f2b0 <_malloc_r+0xa8>
 800f2d8:	4623      	mov	r3, r4
 800f2da:	6864      	ldr	r4, [r4, #4]
 800f2dc:	e7ae      	b.n	800f23c <_malloc_r+0x34>
 800f2de:	463c      	mov	r4, r7
 800f2e0:	687f      	ldr	r7, [r7, #4]
 800f2e2:	e7b6      	b.n	800f252 <_malloc_r+0x4a>
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	42a3      	cmp	r3, r4
 800f2ea:	d1fb      	bne.n	800f2e4 <_malloc_r+0xdc>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	6053      	str	r3, [r2, #4]
 800f2f0:	e7de      	b.n	800f2b0 <_malloc_r+0xa8>
 800f2f2:	230c      	movs	r3, #12
 800f2f4:	6033      	str	r3, [r6, #0]
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	f000 f80c 	bl	800f314 <__malloc_unlock>
 800f2fc:	e794      	b.n	800f228 <_malloc_r+0x20>
 800f2fe:	6005      	str	r5, [r0, #0]
 800f300:	e7d6      	b.n	800f2b0 <_malloc_r+0xa8>
 800f302:	bf00      	nop
 800f304:	20004074 	.word	0x20004074

0800f308 <__malloc_lock>:
 800f308:	4801      	ldr	r0, [pc, #4]	@ (800f310 <__malloc_lock+0x8>)
 800f30a:	f7ff b87a 	b.w	800e402 <__retarget_lock_acquire_recursive>
 800f30e:	bf00      	nop
 800f310:	2000406c 	.word	0x2000406c

0800f314 <__malloc_unlock>:
 800f314:	4801      	ldr	r0, [pc, #4]	@ (800f31c <__malloc_unlock+0x8>)
 800f316:	f7ff b875 	b.w	800e404 <__retarget_lock_release_recursive>
 800f31a:	bf00      	nop
 800f31c:	2000406c 	.word	0x2000406c

0800f320 <_Balloc>:
 800f320:	b570      	push	{r4, r5, r6, lr}
 800f322:	69c6      	ldr	r6, [r0, #28]
 800f324:	4604      	mov	r4, r0
 800f326:	460d      	mov	r5, r1
 800f328:	b976      	cbnz	r6, 800f348 <_Balloc+0x28>
 800f32a:	2010      	movs	r0, #16
 800f32c:	f7ff ff42 	bl	800f1b4 <malloc>
 800f330:	4602      	mov	r2, r0
 800f332:	61e0      	str	r0, [r4, #28]
 800f334:	b920      	cbnz	r0, 800f340 <_Balloc+0x20>
 800f336:	4b18      	ldr	r3, [pc, #96]	@ (800f398 <_Balloc+0x78>)
 800f338:	4818      	ldr	r0, [pc, #96]	@ (800f39c <_Balloc+0x7c>)
 800f33a:	216b      	movs	r1, #107	@ 0x6b
 800f33c:	f7ff f878 	bl	800e430 <__assert_func>
 800f340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f344:	6006      	str	r6, [r0, #0]
 800f346:	60c6      	str	r6, [r0, #12]
 800f348:	69e6      	ldr	r6, [r4, #28]
 800f34a:	68f3      	ldr	r3, [r6, #12]
 800f34c:	b183      	cbz	r3, 800f370 <_Balloc+0x50>
 800f34e:	69e3      	ldr	r3, [r4, #28]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f356:	b9b8      	cbnz	r0, 800f388 <_Balloc+0x68>
 800f358:	2101      	movs	r1, #1
 800f35a:	fa01 f605 	lsl.w	r6, r1, r5
 800f35e:	1d72      	adds	r2, r6, #5
 800f360:	0092      	lsls	r2, r2, #2
 800f362:	4620      	mov	r0, r4
 800f364:	f001 ff1f 	bl	80111a6 <_calloc_r>
 800f368:	b160      	cbz	r0, 800f384 <_Balloc+0x64>
 800f36a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f36e:	e00e      	b.n	800f38e <_Balloc+0x6e>
 800f370:	2221      	movs	r2, #33	@ 0x21
 800f372:	2104      	movs	r1, #4
 800f374:	4620      	mov	r0, r4
 800f376:	f001 ff16 	bl	80111a6 <_calloc_r>
 800f37a:	69e3      	ldr	r3, [r4, #28]
 800f37c:	60f0      	str	r0, [r6, #12]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d1e4      	bne.n	800f34e <_Balloc+0x2e>
 800f384:	2000      	movs	r0, #0
 800f386:	bd70      	pop	{r4, r5, r6, pc}
 800f388:	6802      	ldr	r2, [r0, #0]
 800f38a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f38e:	2300      	movs	r3, #0
 800f390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f394:	e7f7      	b.n	800f386 <_Balloc+0x66>
 800f396:	bf00      	nop
 800f398:	080122f5 	.word	0x080122f5
 800f39c:	08012418 	.word	0x08012418

0800f3a0 <_Bfree>:
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	69c6      	ldr	r6, [r0, #28]
 800f3a4:	4605      	mov	r5, r0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	b976      	cbnz	r6, 800f3c8 <_Bfree+0x28>
 800f3aa:	2010      	movs	r0, #16
 800f3ac:	f7ff ff02 	bl	800f1b4 <malloc>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	61e8      	str	r0, [r5, #28]
 800f3b4:	b920      	cbnz	r0, 800f3c0 <_Bfree+0x20>
 800f3b6:	4b09      	ldr	r3, [pc, #36]	@ (800f3dc <_Bfree+0x3c>)
 800f3b8:	4809      	ldr	r0, [pc, #36]	@ (800f3e0 <_Bfree+0x40>)
 800f3ba:	218f      	movs	r1, #143	@ 0x8f
 800f3bc:	f7ff f838 	bl	800e430 <__assert_func>
 800f3c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3c4:	6006      	str	r6, [r0, #0]
 800f3c6:	60c6      	str	r6, [r0, #12]
 800f3c8:	b13c      	cbz	r4, 800f3da <_Bfree+0x3a>
 800f3ca:	69eb      	ldr	r3, [r5, #28]
 800f3cc:	6862      	ldr	r2, [r4, #4]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3d4:	6021      	str	r1, [r4, #0]
 800f3d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3da:	bd70      	pop	{r4, r5, r6, pc}
 800f3dc:	080122f5 	.word	0x080122f5
 800f3e0:	08012418 	.word	0x08012418

0800f3e4 <__multadd>:
 800f3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e8:	690d      	ldr	r5, [r1, #16]
 800f3ea:	4607      	mov	r7, r0
 800f3ec:	460c      	mov	r4, r1
 800f3ee:	461e      	mov	r6, r3
 800f3f0:	f101 0c14 	add.w	ip, r1, #20
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	f8dc 3000 	ldr.w	r3, [ip]
 800f3fa:	b299      	uxth	r1, r3
 800f3fc:	fb02 6101 	mla	r1, r2, r1, r6
 800f400:	0c1e      	lsrs	r6, r3, #16
 800f402:	0c0b      	lsrs	r3, r1, #16
 800f404:	fb02 3306 	mla	r3, r2, r6, r3
 800f408:	b289      	uxth	r1, r1
 800f40a:	3001      	adds	r0, #1
 800f40c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f410:	4285      	cmp	r5, r0
 800f412:	f84c 1b04 	str.w	r1, [ip], #4
 800f416:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f41a:	dcec      	bgt.n	800f3f6 <__multadd+0x12>
 800f41c:	b30e      	cbz	r6, 800f462 <__multadd+0x7e>
 800f41e:	68a3      	ldr	r3, [r4, #8]
 800f420:	42ab      	cmp	r3, r5
 800f422:	dc19      	bgt.n	800f458 <__multadd+0x74>
 800f424:	6861      	ldr	r1, [r4, #4]
 800f426:	4638      	mov	r0, r7
 800f428:	3101      	adds	r1, #1
 800f42a:	f7ff ff79 	bl	800f320 <_Balloc>
 800f42e:	4680      	mov	r8, r0
 800f430:	b928      	cbnz	r0, 800f43e <__multadd+0x5a>
 800f432:	4602      	mov	r2, r0
 800f434:	4b0c      	ldr	r3, [pc, #48]	@ (800f468 <__multadd+0x84>)
 800f436:	480d      	ldr	r0, [pc, #52]	@ (800f46c <__multadd+0x88>)
 800f438:	21ba      	movs	r1, #186	@ 0xba
 800f43a:	f7fe fff9 	bl	800e430 <__assert_func>
 800f43e:	6922      	ldr	r2, [r4, #16]
 800f440:	3202      	adds	r2, #2
 800f442:	f104 010c 	add.w	r1, r4, #12
 800f446:	0092      	lsls	r2, r2, #2
 800f448:	300c      	adds	r0, #12
 800f44a:	f7fe ffdc 	bl	800e406 <memcpy>
 800f44e:	4621      	mov	r1, r4
 800f450:	4638      	mov	r0, r7
 800f452:	f7ff ffa5 	bl	800f3a0 <_Bfree>
 800f456:	4644      	mov	r4, r8
 800f458:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f45c:	3501      	adds	r5, #1
 800f45e:	615e      	str	r6, [r3, #20]
 800f460:	6125      	str	r5, [r4, #16]
 800f462:	4620      	mov	r0, r4
 800f464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f468:	08012407 	.word	0x08012407
 800f46c:	08012418 	.word	0x08012418

0800f470 <__s2b>:
 800f470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f474:	460c      	mov	r4, r1
 800f476:	4615      	mov	r5, r2
 800f478:	461f      	mov	r7, r3
 800f47a:	2209      	movs	r2, #9
 800f47c:	3308      	adds	r3, #8
 800f47e:	4606      	mov	r6, r0
 800f480:	fb93 f3f2 	sdiv	r3, r3, r2
 800f484:	2100      	movs	r1, #0
 800f486:	2201      	movs	r2, #1
 800f488:	429a      	cmp	r2, r3
 800f48a:	db09      	blt.n	800f4a0 <__s2b+0x30>
 800f48c:	4630      	mov	r0, r6
 800f48e:	f7ff ff47 	bl	800f320 <_Balloc>
 800f492:	b940      	cbnz	r0, 800f4a6 <__s2b+0x36>
 800f494:	4602      	mov	r2, r0
 800f496:	4b19      	ldr	r3, [pc, #100]	@ (800f4fc <__s2b+0x8c>)
 800f498:	4819      	ldr	r0, [pc, #100]	@ (800f500 <__s2b+0x90>)
 800f49a:	21d3      	movs	r1, #211	@ 0xd3
 800f49c:	f7fe ffc8 	bl	800e430 <__assert_func>
 800f4a0:	0052      	lsls	r2, r2, #1
 800f4a2:	3101      	adds	r1, #1
 800f4a4:	e7f0      	b.n	800f488 <__s2b+0x18>
 800f4a6:	9b08      	ldr	r3, [sp, #32]
 800f4a8:	6143      	str	r3, [r0, #20]
 800f4aa:	2d09      	cmp	r5, #9
 800f4ac:	f04f 0301 	mov.w	r3, #1
 800f4b0:	6103      	str	r3, [r0, #16]
 800f4b2:	dd16      	ble.n	800f4e2 <__s2b+0x72>
 800f4b4:	f104 0909 	add.w	r9, r4, #9
 800f4b8:	46c8      	mov	r8, r9
 800f4ba:	442c      	add	r4, r5
 800f4bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4c0:	4601      	mov	r1, r0
 800f4c2:	3b30      	subs	r3, #48	@ 0x30
 800f4c4:	220a      	movs	r2, #10
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f7ff ff8c 	bl	800f3e4 <__multadd>
 800f4cc:	45a0      	cmp	r8, r4
 800f4ce:	d1f5      	bne.n	800f4bc <__s2b+0x4c>
 800f4d0:	f1a5 0408 	sub.w	r4, r5, #8
 800f4d4:	444c      	add	r4, r9
 800f4d6:	1b2d      	subs	r5, r5, r4
 800f4d8:	1963      	adds	r3, r4, r5
 800f4da:	42bb      	cmp	r3, r7
 800f4dc:	db04      	blt.n	800f4e8 <__s2b+0x78>
 800f4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e2:	340a      	adds	r4, #10
 800f4e4:	2509      	movs	r5, #9
 800f4e6:	e7f6      	b.n	800f4d6 <__s2b+0x66>
 800f4e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4ec:	4601      	mov	r1, r0
 800f4ee:	3b30      	subs	r3, #48	@ 0x30
 800f4f0:	220a      	movs	r2, #10
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	f7ff ff76 	bl	800f3e4 <__multadd>
 800f4f8:	e7ee      	b.n	800f4d8 <__s2b+0x68>
 800f4fa:	bf00      	nop
 800f4fc:	08012407 	.word	0x08012407
 800f500:	08012418 	.word	0x08012418

0800f504 <__hi0bits>:
 800f504:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f508:	4603      	mov	r3, r0
 800f50a:	bf36      	itet	cc
 800f50c:	0403      	lslcc	r3, r0, #16
 800f50e:	2000      	movcs	r0, #0
 800f510:	2010      	movcc	r0, #16
 800f512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f516:	bf3c      	itt	cc
 800f518:	021b      	lslcc	r3, r3, #8
 800f51a:	3008      	addcc	r0, #8
 800f51c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f520:	bf3c      	itt	cc
 800f522:	011b      	lslcc	r3, r3, #4
 800f524:	3004      	addcc	r0, #4
 800f526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f52a:	bf3c      	itt	cc
 800f52c:	009b      	lslcc	r3, r3, #2
 800f52e:	3002      	addcc	r0, #2
 800f530:	2b00      	cmp	r3, #0
 800f532:	db05      	blt.n	800f540 <__hi0bits+0x3c>
 800f534:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f538:	f100 0001 	add.w	r0, r0, #1
 800f53c:	bf08      	it	eq
 800f53e:	2020      	moveq	r0, #32
 800f540:	4770      	bx	lr

0800f542 <__lo0bits>:
 800f542:	6803      	ldr	r3, [r0, #0]
 800f544:	4602      	mov	r2, r0
 800f546:	f013 0007 	ands.w	r0, r3, #7
 800f54a:	d00b      	beq.n	800f564 <__lo0bits+0x22>
 800f54c:	07d9      	lsls	r1, r3, #31
 800f54e:	d421      	bmi.n	800f594 <__lo0bits+0x52>
 800f550:	0798      	lsls	r0, r3, #30
 800f552:	bf49      	itett	mi
 800f554:	085b      	lsrmi	r3, r3, #1
 800f556:	089b      	lsrpl	r3, r3, #2
 800f558:	2001      	movmi	r0, #1
 800f55a:	6013      	strmi	r3, [r2, #0]
 800f55c:	bf5c      	itt	pl
 800f55e:	6013      	strpl	r3, [r2, #0]
 800f560:	2002      	movpl	r0, #2
 800f562:	4770      	bx	lr
 800f564:	b299      	uxth	r1, r3
 800f566:	b909      	cbnz	r1, 800f56c <__lo0bits+0x2a>
 800f568:	0c1b      	lsrs	r3, r3, #16
 800f56a:	2010      	movs	r0, #16
 800f56c:	b2d9      	uxtb	r1, r3
 800f56e:	b909      	cbnz	r1, 800f574 <__lo0bits+0x32>
 800f570:	3008      	adds	r0, #8
 800f572:	0a1b      	lsrs	r3, r3, #8
 800f574:	0719      	lsls	r1, r3, #28
 800f576:	bf04      	itt	eq
 800f578:	091b      	lsreq	r3, r3, #4
 800f57a:	3004      	addeq	r0, #4
 800f57c:	0799      	lsls	r1, r3, #30
 800f57e:	bf04      	itt	eq
 800f580:	089b      	lsreq	r3, r3, #2
 800f582:	3002      	addeq	r0, #2
 800f584:	07d9      	lsls	r1, r3, #31
 800f586:	d403      	bmi.n	800f590 <__lo0bits+0x4e>
 800f588:	085b      	lsrs	r3, r3, #1
 800f58a:	f100 0001 	add.w	r0, r0, #1
 800f58e:	d003      	beq.n	800f598 <__lo0bits+0x56>
 800f590:	6013      	str	r3, [r2, #0]
 800f592:	4770      	bx	lr
 800f594:	2000      	movs	r0, #0
 800f596:	4770      	bx	lr
 800f598:	2020      	movs	r0, #32
 800f59a:	4770      	bx	lr

0800f59c <__i2b>:
 800f59c:	b510      	push	{r4, lr}
 800f59e:	460c      	mov	r4, r1
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	f7ff febd 	bl	800f320 <_Balloc>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	b928      	cbnz	r0, 800f5b6 <__i2b+0x1a>
 800f5aa:	4b05      	ldr	r3, [pc, #20]	@ (800f5c0 <__i2b+0x24>)
 800f5ac:	4805      	ldr	r0, [pc, #20]	@ (800f5c4 <__i2b+0x28>)
 800f5ae:	f240 1145 	movw	r1, #325	@ 0x145
 800f5b2:	f7fe ff3d 	bl	800e430 <__assert_func>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	6144      	str	r4, [r0, #20]
 800f5ba:	6103      	str	r3, [r0, #16]
 800f5bc:	bd10      	pop	{r4, pc}
 800f5be:	bf00      	nop
 800f5c0:	08012407 	.word	0x08012407
 800f5c4:	08012418 	.word	0x08012418

0800f5c8 <__multiply>:
 800f5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5cc:	4617      	mov	r7, r2
 800f5ce:	690a      	ldr	r2, [r1, #16]
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	bfa8      	it	ge
 800f5d6:	463b      	movge	r3, r7
 800f5d8:	4689      	mov	r9, r1
 800f5da:	bfa4      	itt	ge
 800f5dc:	460f      	movge	r7, r1
 800f5de:	4699      	movge	r9, r3
 800f5e0:	693d      	ldr	r5, [r7, #16]
 800f5e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	6879      	ldr	r1, [r7, #4]
 800f5ea:	eb05 060a 	add.w	r6, r5, sl
 800f5ee:	42b3      	cmp	r3, r6
 800f5f0:	b085      	sub	sp, #20
 800f5f2:	bfb8      	it	lt
 800f5f4:	3101      	addlt	r1, #1
 800f5f6:	f7ff fe93 	bl	800f320 <_Balloc>
 800f5fa:	b930      	cbnz	r0, 800f60a <__multiply+0x42>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	4b41      	ldr	r3, [pc, #260]	@ (800f704 <__multiply+0x13c>)
 800f600:	4841      	ldr	r0, [pc, #260]	@ (800f708 <__multiply+0x140>)
 800f602:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f606:	f7fe ff13 	bl	800e430 <__assert_func>
 800f60a:	f100 0414 	add.w	r4, r0, #20
 800f60e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f612:	4623      	mov	r3, r4
 800f614:	2200      	movs	r2, #0
 800f616:	4573      	cmp	r3, lr
 800f618:	d320      	bcc.n	800f65c <__multiply+0x94>
 800f61a:	f107 0814 	add.w	r8, r7, #20
 800f61e:	f109 0114 	add.w	r1, r9, #20
 800f622:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f626:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f62a:	9302      	str	r3, [sp, #8]
 800f62c:	1beb      	subs	r3, r5, r7
 800f62e:	3b15      	subs	r3, #21
 800f630:	f023 0303 	bic.w	r3, r3, #3
 800f634:	3304      	adds	r3, #4
 800f636:	3715      	adds	r7, #21
 800f638:	42bd      	cmp	r5, r7
 800f63a:	bf38      	it	cc
 800f63c:	2304      	movcc	r3, #4
 800f63e:	9301      	str	r3, [sp, #4]
 800f640:	9b02      	ldr	r3, [sp, #8]
 800f642:	9103      	str	r1, [sp, #12]
 800f644:	428b      	cmp	r3, r1
 800f646:	d80c      	bhi.n	800f662 <__multiply+0x9a>
 800f648:	2e00      	cmp	r6, #0
 800f64a:	dd03      	ble.n	800f654 <__multiply+0x8c>
 800f64c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f650:	2b00      	cmp	r3, #0
 800f652:	d055      	beq.n	800f700 <__multiply+0x138>
 800f654:	6106      	str	r6, [r0, #16]
 800f656:	b005      	add	sp, #20
 800f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65c:	f843 2b04 	str.w	r2, [r3], #4
 800f660:	e7d9      	b.n	800f616 <__multiply+0x4e>
 800f662:	f8b1 a000 	ldrh.w	sl, [r1]
 800f666:	f1ba 0f00 	cmp.w	sl, #0
 800f66a:	d01f      	beq.n	800f6ac <__multiply+0xe4>
 800f66c:	46c4      	mov	ip, r8
 800f66e:	46a1      	mov	r9, r4
 800f670:	2700      	movs	r7, #0
 800f672:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f676:	f8d9 3000 	ldr.w	r3, [r9]
 800f67a:	fa1f fb82 	uxth.w	fp, r2
 800f67e:	b29b      	uxth	r3, r3
 800f680:	fb0a 330b 	mla	r3, sl, fp, r3
 800f684:	443b      	add	r3, r7
 800f686:	f8d9 7000 	ldr.w	r7, [r9]
 800f68a:	0c12      	lsrs	r2, r2, #16
 800f68c:	0c3f      	lsrs	r7, r7, #16
 800f68e:	fb0a 7202 	mla	r2, sl, r2, r7
 800f692:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f696:	b29b      	uxth	r3, r3
 800f698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f69c:	4565      	cmp	r5, ip
 800f69e:	f849 3b04 	str.w	r3, [r9], #4
 800f6a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f6a6:	d8e4      	bhi.n	800f672 <__multiply+0xaa>
 800f6a8:	9b01      	ldr	r3, [sp, #4]
 800f6aa:	50e7      	str	r7, [r4, r3]
 800f6ac:	9b03      	ldr	r3, [sp, #12]
 800f6ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f6b2:	3104      	adds	r1, #4
 800f6b4:	f1b9 0f00 	cmp.w	r9, #0
 800f6b8:	d020      	beq.n	800f6fc <__multiply+0x134>
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	4647      	mov	r7, r8
 800f6be:	46a4      	mov	ip, r4
 800f6c0:	f04f 0a00 	mov.w	sl, #0
 800f6c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800f6c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f6cc:	fb09 220b 	mla	r2, r9, fp, r2
 800f6d0:	4452      	add	r2, sl
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6d8:	f84c 3b04 	str.w	r3, [ip], #4
 800f6dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800f6e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800f6e8:	fb09 330a 	mla	r3, r9, sl, r3
 800f6ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f6f0:	42bd      	cmp	r5, r7
 800f6f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6f6:	d8e5      	bhi.n	800f6c4 <__multiply+0xfc>
 800f6f8:	9a01      	ldr	r2, [sp, #4]
 800f6fa:	50a3      	str	r3, [r4, r2]
 800f6fc:	3404      	adds	r4, #4
 800f6fe:	e79f      	b.n	800f640 <__multiply+0x78>
 800f700:	3e01      	subs	r6, #1
 800f702:	e7a1      	b.n	800f648 <__multiply+0x80>
 800f704:	08012407 	.word	0x08012407
 800f708:	08012418 	.word	0x08012418

0800f70c <__pow5mult>:
 800f70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f710:	4615      	mov	r5, r2
 800f712:	f012 0203 	ands.w	r2, r2, #3
 800f716:	4607      	mov	r7, r0
 800f718:	460e      	mov	r6, r1
 800f71a:	d007      	beq.n	800f72c <__pow5mult+0x20>
 800f71c:	4c25      	ldr	r4, [pc, #148]	@ (800f7b4 <__pow5mult+0xa8>)
 800f71e:	3a01      	subs	r2, #1
 800f720:	2300      	movs	r3, #0
 800f722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f726:	f7ff fe5d 	bl	800f3e4 <__multadd>
 800f72a:	4606      	mov	r6, r0
 800f72c:	10ad      	asrs	r5, r5, #2
 800f72e:	d03d      	beq.n	800f7ac <__pow5mult+0xa0>
 800f730:	69fc      	ldr	r4, [r7, #28]
 800f732:	b97c      	cbnz	r4, 800f754 <__pow5mult+0x48>
 800f734:	2010      	movs	r0, #16
 800f736:	f7ff fd3d 	bl	800f1b4 <malloc>
 800f73a:	4602      	mov	r2, r0
 800f73c:	61f8      	str	r0, [r7, #28]
 800f73e:	b928      	cbnz	r0, 800f74c <__pow5mult+0x40>
 800f740:	4b1d      	ldr	r3, [pc, #116]	@ (800f7b8 <__pow5mult+0xac>)
 800f742:	481e      	ldr	r0, [pc, #120]	@ (800f7bc <__pow5mult+0xb0>)
 800f744:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f748:	f7fe fe72 	bl	800e430 <__assert_func>
 800f74c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f750:	6004      	str	r4, [r0, #0]
 800f752:	60c4      	str	r4, [r0, #12]
 800f754:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f75c:	b94c      	cbnz	r4, 800f772 <__pow5mult+0x66>
 800f75e:	f240 2171 	movw	r1, #625	@ 0x271
 800f762:	4638      	mov	r0, r7
 800f764:	f7ff ff1a 	bl	800f59c <__i2b>
 800f768:	2300      	movs	r3, #0
 800f76a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f76e:	4604      	mov	r4, r0
 800f770:	6003      	str	r3, [r0, #0]
 800f772:	f04f 0900 	mov.w	r9, #0
 800f776:	07eb      	lsls	r3, r5, #31
 800f778:	d50a      	bpl.n	800f790 <__pow5mult+0x84>
 800f77a:	4631      	mov	r1, r6
 800f77c:	4622      	mov	r2, r4
 800f77e:	4638      	mov	r0, r7
 800f780:	f7ff ff22 	bl	800f5c8 <__multiply>
 800f784:	4631      	mov	r1, r6
 800f786:	4680      	mov	r8, r0
 800f788:	4638      	mov	r0, r7
 800f78a:	f7ff fe09 	bl	800f3a0 <_Bfree>
 800f78e:	4646      	mov	r6, r8
 800f790:	106d      	asrs	r5, r5, #1
 800f792:	d00b      	beq.n	800f7ac <__pow5mult+0xa0>
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	b938      	cbnz	r0, 800f7a8 <__pow5mult+0x9c>
 800f798:	4622      	mov	r2, r4
 800f79a:	4621      	mov	r1, r4
 800f79c:	4638      	mov	r0, r7
 800f79e:	f7ff ff13 	bl	800f5c8 <__multiply>
 800f7a2:	6020      	str	r0, [r4, #0]
 800f7a4:	f8c0 9000 	str.w	r9, [r0]
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	e7e4      	b.n	800f776 <__pow5mult+0x6a>
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b2:	bf00      	nop
 800f7b4:	080124ec 	.word	0x080124ec
 800f7b8:	080122f5 	.word	0x080122f5
 800f7bc:	08012418 	.word	0x08012418

0800f7c0 <__lshift>:
 800f7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7c4:	460c      	mov	r4, r1
 800f7c6:	6849      	ldr	r1, [r1, #4]
 800f7c8:	6923      	ldr	r3, [r4, #16]
 800f7ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f7ce:	68a3      	ldr	r3, [r4, #8]
 800f7d0:	4607      	mov	r7, r0
 800f7d2:	4691      	mov	r9, r2
 800f7d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7d8:	f108 0601 	add.w	r6, r8, #1
 800f7dc:	42b3      	cmp	r3, r6
 800f7de:	db0b      	blt.n	800f7f8 <__lshift+0x38>
 800f7e0:	4638      	mov	r0, r7
 800f7e2:	f7ff fd9d 	bl	800f320 <_Balloc>
 800f7e6:	4605      	mov	r5, r0
 800f7e8:	b948      	cbnz	r0, 800f7fe <__lshift+0x3e>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	4b28      	ldr	r3, [pc, #160]	@ (800f890 <__lshift+0xd0>)
 800f7ee:	4829      	ldr	r0, [pc, #164]	@ (800f894 <__lshift+0xd4>)
 800f7f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7f4:	f7fe fe1c 	bl	800e430 <__assert_func>
 800f7f8:	3101      	adds	r1, #1
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	e7ee      	b.n	800f7dc <__lshift+0x1c>
 800f7fe:	2300      	movs	r3, #0
 800f800:	f100 0114 	add.w	r1, r0, #20
 800f804:	f100 0210 	add.w	r2, r0, #16
 800f808:	4618      	mov	r0, r3
 800f80a:	4553      	cmp	r3, sl
 800f80c:	db33      	blt.n	800f876 <__lshift+0xb6>
 800f80e:	6920      	ldr	r0, [r4, #16]
 800f810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f814:	f104 0314 	add.w	r3, r4, #20
 800f818:	f019 091f 	ands.w	r9, r9, #31
 800f81c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f820:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f824:	d02b      	beq.n	800f87e <__lshift+0xbe>
 800f826:	f1c9 0e20 	rsb	lr, r9, #32
 800f82a:	468a      	mov	sl, r1
 800f82c:	2200      	movs	r2, #0
 800f82e:	6818      	ldr	r0, [r3, #0]
 800f830:	fa00 f009 	lsl.w	r0, r0, r9
 800f834:	4310      	orrs	r0, r2
 800f836:	f84a 0b04 	str.w	r0, [sl], #4
 800f83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f83e:	459c      	cmp	ip, r3
 800f840:	fa22 f20e 	lsr.w	r2, r2, lr
 800f844:	d8f3      	bhi.n	800f82e <__lshift+0x6e>
 800f846:	ebac 0304 	sub.w	r3, ip, r4
 800f84a:	3b15      	subs	r3, #21
 800f84c:	f023 0303 	bic.w	r3, r3, #3
 800f850:	3304      	adds	r3, #4
 800f852:	f104 0015 	add.w	r0, r4, #21
 800f856:	4560      	cmp	r0, ip
 800f858:	bf88      	it	hi
 800f85a:	2304      	movhi	r3, #4
 800f85c:	50ca      	str	r2, [r1, r3]
 800f85e:	b10a      	cbz	r2, 800f864 <__lshift+0xa4>
 800f860:	f108 0602 	add.w	r6, r8, #2
 800f864:	3e01      	subs	r6, #1
 800f866:	4638      	mov	r0, r7
 800f868:	612e      	str	r6, [r5, #16]
 800f86a:	4621      	mov	r1, r4
 800f86c:	f7ff fd98 	bl	800f3a0 <_Bfree>
 800f870:	4628      	mov	r0, r5
 800f872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f876:	f842 0f04 	str.w	r0, [r2, #4]!
 800f87a:	3301      	adds	r3, #1
 800f87c:	e7c5      	b.n	800f80a <__lshift+0x4a>
 800f87e:	3904      	subs	r1, #4
 800f880:	f853 2b04 	ldr.w	r2, [r3], #4
 800f884:	f841 2f04 	str.w	r2, [r1, #4]!
 800f888:	459c      	cmp	ip, r3
 800f88a:	d8f9      	bhi.n	800f880 <__lshift+0xc0>
 800f88c:	e7ea      	b.n	800f864 <__lshift+0xa4>
 800f88e:	bf00      	nop
 800f890:	08012407 	.word	0x08012407
 800f894:	08012418 	.word	0x08012418

0800f898 <__mcmp>:
 800f898:	690a      	ldr	r2, [r1, #16]
 800f89a:	4603      	mov	r3, r0
 800f89c:	6900      	ldr	r0, [r0, #16]
 800f89e:	1a80      	subs	r0, r0, r2
 800f8a0:	b530      	push	{r4, r5, lr}
 800f8a2:	d10e      	bne.n	800f8c2 <__mcmp+0x2a>
 800f8a4:	3314      	adds	r3, #20
 800f8a6:	3114      	adds	r1, #20
 800f8a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f8ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8b8:	4295      	cmp	r5, r2
 800f8ba:	d003      	beq.n	800f8c4 <__mcmp+0x2c>
 800f8bc:	d205      	bcs.n	800f8ca <__mcmp+0x32>
 800f8be:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c2:	bd30      	pop	{r4, r5, pc}
 800f8c4:	42a3      	cmp	r3, r4
 800f8c6:	d3f3      	bcc.n	800f8b0 <__mcmp+0x18>
 800f8c8:	e7fb      	b.n	800f8c2 <__mcmp+0x2a>
 800f8ca:	2001      	movs	r0, #1
 800f8cc:	e7f9      	b.n	800f8c2 <__mcmp+0x2a>
	...

0800f8d0 <__mdiff>:
 800f8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	4689      	mov	r9, r1
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	4611      	mov	r1, r2
 800f8da:	4648      	mov	r0, r9
 800f8dc:	4614      	mov	r4, r2
 800f8de:	f7ff ffdb 	bl	800f898 <__mcmp>
 800f8e2:	1e05      	subs	r5, r0, #0
 800f8e4:	d112      	bne.n	800f90c <__mdiff+0x3c>
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	f7ff fd19 	bl	800f320 <_Balloc>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	b928      	cbnz	r0, 800f8fe <__mdiff+0x2e>
 800f8f2:	4b3f      	ldr	r3, [pc, #252]	@ (800f9f0 <__mdiff+0x120>)
 800f8f4:	f240 2137 	movw	r1, #567	@ 0x237
 800f8f8:	483e      	ldr	r0, [pc, #248]	@ (800f9f4 <__mdiff+0x124>)
 800f8fa:	f7fe fd99 	bl	800e430 <__assert_func>
 800f8fe:	2301      	movs	r3, #1
 800f900:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f904:	4610      	mov	r0, r2
 800f906:	b003      	add	sp, #12
 800f908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90c:	bfbc      	itt	lt
 800f90e:	464b      	movlt	r3, r9
 800f910:	46a1      	movlt	r9, r4
 800f912:	4630      	mov	r0, r6
 800f914:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f918:	bfba      	itte	lt
 800f91a:	461c      	movlt	r4, r3
 800f91c:	2501      	movlt	r5, #1
 800f91e:	2500      	movge	r5, #0
 800f920:	f7ff fcfe 	bl	800f320 <_Balloc>
 800f924:	4602      	mov	r2, r0
 800f926:	b918      	cbnz	r0, 800f930 <__mdiff+0x60>
 800f928:	4b31      	ldr	r3, [pc, #196]	@ (800f9f0 <__mdiff+0x120>)
 800f92a:	f240 2145 	movw	r1, #581	@ 0x245
 800f92e:	e7e3      	b.n	800f8f8 <__mdiff+0x28>
 800f930:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f934:	6926      	ldr	r6, [r4, #16]
 800f936:	60c5      	str	r5, [r0, #12]
 800f938:	f109 0310 	add.w	r3, r9, #16
 800f93c:	f109 0514 	add.w	r5, r9, #20
 800f940:	f104 0e14 	add.w	lr, r4, #20
 800f944:	f100 0b14 	add.w	fp, r0, #20
 800f948:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f94c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f950:	9301      	str	r3, [sp, #4]
 800f952:	46d9      	mov	r9, fp
 800f954:	f04f 0c00 	mov.w	ip, #0
 800f958:	9b01      	ldr	r3, [sp, #4]
 800f95a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f95e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	fa1f f38a 	uxth.w	r3, sl
 800f968:	4619      	mov	r1, r3
 800f96a:	b283      	uxth	r3, r0
 800f96c:	1acb      	subs	r3, r1, r3
 800f96e:	0c00      	lsrs	r0, r0, #16
 800f970:	4463      	add	r3, ip
 800f972:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f976:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f980:	4576      	cmp	r6, lr
 800f982:	f849 3b04 	str.w	r3, [r9], #4
 800f986:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f98a:	d8e5      	bhi.n	800f958 <__mdiff+0x88>
 800f98c:	1b33      	subs	r3, r6, r4
 800f98e:	3b15      	subs	r3, #21
 800f990:	f023 0303 	bic.w	r3, r3, #3
 800f994:	3415      	adds	r4, #21
 800f996:	3304      	adds	r3, #4
 800f998:	42a6      	cmp	r6, r4
 800f99a:	bf38      	it	cc
 800f99c:	2304      	movcc	r3, #4
 800f99e:	441d      	add	r5, r3
 800f9a0:	445b      	add	r3, fp
 800f9a2:	461e      	mov	r6, r3
 800f9a4:	462c      	mov	r4, r5
 800f9a6:	4544      	cmp	r4, r8
 800f9a8:	d30e      	bcc.n	800f9c8 <__mdiff+0xf8>
 800f9aa:	f108 0103 	add.w	r1, r8, #3
 800f9ae:	1b49      	subs	r1, r1, r5
 800f9b0:	f021 0103 	bic.w	r1, r1, #3
 800f9b4:	3d03      	subs	r5, #3
 800f9b6:	45a8      	cmp	r8, r5
 800f9b8:	bf38      	it	cc
 800f9ba:	2100      	movcc	r1, #0
 800f9bc:	440b      	add	r3, r1
 800f9be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9c2:	b191      	cbz	r1, 800f9ea <__mdiff+0x11a>
 800f9c4:	6117      	str	r7, [r2, #16]
 800f9c6:	e79d      	b.n	800f904 <__mdiff+0x34>
 800f9c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800f9cc:	46e6      	mov	lr, ip
 800f9ce:	0c08      	lsrs	r0, r1, #16
 800f9d0:	fa1c fc81 	uxtah	ip, ip, r1
 800f9d4:	4471      	add	r1, lr
 800f9d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9da:	b289      	uxth	r1, r1
 800f9dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9e0:	f846 1b04 	str.w	r1, [r6], #4
 800f9e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9e8:	e7dd      	b.n	800f9a6 <__mdiff+0xd6>
 800f9ea:	3f01      	subs	r7, #1
 800f9ec:	e7e7      	b.n	800f9be <__mdiff+0xee>
 800f9ee:	bf00      	nop
 800f9f0:	08012407 	.word	0x08012407
 800f9f4:	08012418 	.word	0x08012418

0800f9f8 <__ulp>:
 800f9f8:	b082      	sub	sp, #8
 800f9fa:	ed8d 0b00 	vstr	d0, [sp]
 800f9fe:	9a01      	ldr	r2, [sp, #4]
 800fa00:	4b0f      	ldr	r3, [pc, #60]	@ (800fa40 <__ulp+0x48>)
 800fa02:	4013      	ands	r3, r2
 800fa04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	dc08      	bgt.n	800fa1e <__ulp+0x26>
 800fa0c:	425b      	negs	r3, r3
 800fa0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa12:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa16:	da04      	bge.n	800fa22 <__ulp+0x2a>
 800fa18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa1c:	4113      	asrs	r3, r2
 800fa1e:	2200      	movs	r2, #0
 800fa20:	e008      	b.n	800fa34 <__ulp+0x3c>
 800fa22:	f1a2 0314 	sub.w	r3, r2, #20
 800fa26:	2b1e      	cmp	r3, #30
 800fa28:	bfda      	itte	le
 800fa2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fa2e:	40da      	lsrle	r2, r3
 800fa30:	2201      	movgt	r2, #1
 800fa32:	2300      	movs	r3, #0
 800fa34:	4619      	mov	r1, r3
 800fa36:	4610      	mov	r0, r2
 800fa38:	ec41 0b10 	vmov	d0, r0, r1
 800fa3c:	b002      	add	sp, #8
 800fa3e:	4770      	bx	lr
 800fa40:	7ff00000 	.word	0x7ff00000

0800fa44 <__b2d>:
 800fa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa48:	6906      	ldr	r6, [r0, #16]
 800fa4a:	f100 0814 	add.w	r8, r0, #20
 800fa4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa52:	1f37      	subs	r7, r6, #4
 800fa54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa58:	4610      	mov	r0, r2
 800fa5a:	f7ff fd53 	bl	800f504 <__hi0bits>
 800fa5e:	f1c0 0320 	rsb	r3, r0, #32
 800fa62:	280a      	cmp	r0, #10
 800fa64:	600b      	str	r3, [r1, #0]
 800fa66:	491b      	ldr	r1, [pc, #108]	@ (800fad4 <__b2d+0x90>)
 800fa68:	dc15      	bgt.n	800fa96 <__b2d+0x52>
 800fa6a:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa6e:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa72:	45b8      	cmp	r8, r7
 800fa74:	ea43 0501 	orr.w	r5, r3, r1
 800fa78:	bf34      	ite	cc
 800fa7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa7e:	2300      	movcs	r3, #0
 800fa80:	3015      	adds	r0, #21
 800fa82:	fa02 f000 	lsl.w	r0, r2, r0
 800fa86:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa8a:	4303      	orrs	r3, r0
 800fa8c:	461c      	mov	r4, r3
 800fa8e:	ec45 4b10 	vmov	d0, r4, r5
 800fa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa96:	45b8      	cmp	r8, r7
 800fa98:	bf3a      	itte	cc
 800fa9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa9e:	f1a6 0708 	subcc.w	r7, r6, #8
 800faa2:	2300      	movcs	r3, #0
 800faa4:	380b      	subs	r0, #11
 800faa6:	d012      	beq.n	800face <__b2d+0x8a>
 800faa8:	f1c0 0120 	rsb	r1, r0, #32
 800faac:	fa23 f401 	lsr.w	r4, r3, r1
 800fab0:	4082      	lsls	r2, r0
 800fab2:	4322      	orrs	r2, r4
 800fab4:	4547      	cmp	r7, r8
 800fab6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800faba:	bf8c      	ite	hi
 800fabc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fac0:	2200      	movls	r2, #0
 800fac2:	4083      	lsls	r3, r0
 800fac4:	40ca      	lsrs	r2, r1
 800fac6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800faca:	4313      	orrs	r3, r2
 800facc:	e7de      	b.n	800fa8c <__b2d+0x48>
 800face:	ea42 0501 	orr.w	r5, r2, r1
 800fad2:	e7db      	b.n	800fa8c <__b2d+0x48>
 800fad4:	3ff00000 	.word	0x3ff00000

0800fad8 <__d2b>:
 800fad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fadc:	460f      	mov	r7, r1
 800fade:	2101      	movs	r1, #1
 800fae0:	ec59 8b10 	vmov	r8, r9, d0
 800fae4:	4616      	mov	r6, r2
 800fae6:	f7ff fc1b 	bl	800f320 <_Balloc>
 800faea:	4604      	mov	r4, r0
 800faec:	b930      	cbnz	r0, 800fafc <__d2b+0x24>
 800faee:	4602      	mov	r2, r0
 800faf0:	4b23      	ldr	r3, [pc, #140]	@ (800fb80 <__d2b+0xa8>)
 800faf2:	4824      	ldr	r0, [pc, #144]	@ (800fb84 <__d2b+0xac>)
 800faf4:	f240 310f 	movw	r1, #783	@ 0x30f
 800faf8:	f7fe fc9a 	bl	800e430 <__assert_func>
 800fafc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb04:	b10d      	cbz	r5, 800fb0a <__d2b+0x32>
 800fb06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb0a:	9301      	str	r3, [sp, #4]
 800fb0c:	f1b8 0300 	subs.w	r3, r8, #0
 800fb10:	d023      	beq.n	800fb5a <__d2b+0x82>
 800fb12:	4668      	mov	r0, sp
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	f7ff fd14 	bl	800f542 <__lo0bits>
 800fb1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb1e:	b1d0      	cbz	r0, 800fb56 <__d2b+0x7e>
 800fb20:	f1c0 0320 	rsb	r3, r0, #32
 800fb24:	fa02 f303 	lsl.w	r3, r2, r3
 800fb28:	430b      	orrs	r3, r1
 800fb2a:	40c2      	lsrs	r2, r0
 800fb2c:	6163      	str	r3, [r4, #20]
 800fb2e:	9201      	str	r2, [sp, #4]
 800fb30:	9b01      	ldr	r3, [sp, #4]
 800fb32:	61a3      	str	r3, [r4, #24]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	bf0c      	ite	eq
 800fb38:	2201      	moveq	r2, #1
 800fb3a:	2202      	movne	r2, #2
 800fb3c:	6122      	str	r2, [r4, #16]
 800fb3e:	b1a5      	cbz	r5, 800fb6a <__d2b+0x92>
 800fb40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb44:	4405      	add	r5, r0
 800fb46:	603d      	str	r5, [r7, #0]
 800fb48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb4c:	6030      	str	r0, [r6, #0]
 800fb4e:	4620      	mov	r0, r4
 800fb50:	b003      	add	sp, #12
 800fb52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb56:	6161      	str	r1, [r4, #20]
 800fb58:	e7ea      	b.n	800fb30 <__d2b+0x58>
 800fb5a:	a801      	add	r0, sp, #4
 800fb5c:	f7ff fcf1 	bl	800f542 <__lo0bits>
 800fb60:	9b01      	ldr	r3, [sp, #4]
 800fb62:	6163      	str	r3, [r4, #20]
 800fb64:	3020      	adds	r0, #32
 800fb66:	2201      	movs	r2, #1
 800fb68:	e7e8      	b.n	800fb3c <__d2b+0x64>
 800fb6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb72:	6038      	str	r0, [r7, #0]
 800fb74:	6918      	ldr	r0, [r3, #16]
 800fb76:	f7ff fcc5 	bl	800f504 <__hi0bits>
 800fb7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb7e:	e7e5      	b.n	800fb4c <__d2b+0x74>
 800fb80:	08012407 	.word	0x08012407
 800fb84:	08012418 	.word	0x08012418

0800fb88 <__ratio>:
 800fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8c:	b085      	sub	sp, #20
 800fb8e:	e9cd 1000 	strd	r1, r0, [sp]
 800fb92:	a902      	add	r1, sp, #8
 800fb94:	f7ff ff56 	bl	800fa44 <__b2d>
 800fb98:	9800      	ldr	r0, [sp, #0]
 800fb9a:	a903      	add	r1, sp, #12
 800fb9c:	ec55 4b10 	vmov	r4, r5, d0
 800fba0:	f7ff ff50 	bl	800fa44 <__b2d>
 800fba4:	9b01      	ldr	r3, [sp, #4]
 800fba6:	6919      	ldr	r1, [r3, #16]
 800fba8:	9b00      	ldr	r3, [sp, #0]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	1ac9      	subs	r1, r1, r3
 800fbae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fbb2:	1a9b      	subs	r3, r3, r2
 800fbb4:	ec5b ab10 	vmov	sl, fp, d0
 800fbb8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	bfce      	itee	gt
 800fbc0:	462a      	movgt	r2, r5
 800fbc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fbc6:	465a      	movle	r2, fp
 800fbc8:	462f      	mov	r7, r5
 800fbca:	46d9      	mov	r9, fp
 800fbcc:	bfcc      	ite	gt
 800fbce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fbd2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fbd6:	464b      	mov	r3, r9
 800fbd8:	4652      	mov	r2, sl
 800fbda:	4620      	mov	r0, r4
 800fbdc:	4639      	mov	r1, r7
 800fbde:	f7f0 fe35 	bl	800084c <__aeabi_ddiv>
 800fbe2:	ec41 0b10 	vmov	d0, r0, r1
 800fbe6:	b005      	add	sp, #20
 800fbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbec <__copybits>:
 800fbec:	3901      	subs	r1, #1
 800fbee:	b570      	push	{r4, r5, r6, lr}
 800fbf0:	1149      	asrs	r1, r1, #5
 800fbf2:	6914      	ldr	r4, [r2, #16]
 800fbf4:	3101      	adds	r1, #1
 800fbf6:	f102 0314 	add.w	r3, r2, #20
 800fbfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc02:	1f05      	subs	r5, r0, #4
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d30c      	bcc.n	800fc22 <__copybits+0x36>
 800fc08:	1aa3      	subs	r3, r4, r2
 800fc0a:	3b11      	subs	r3, #17
 800fc0c:	f023 0303 	bic.w	r3, r3, #3
 800fc10:	3211      	adds	r2, #17
 800fc12:	42a2      	cmp	r2, r4
 800fc14:	bf88      	it	hi
 800fc16:	2300      	movhi	r3, #0
 800fc18:	4418      	add	r0, r3
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	4288      	cmp	r0, r1
 800fc1e:	d305      	bcc.n	800fc2c <__copybits+0x40>
 800fc20:	bd70      	pop	{r4, r5, r6, pc}
 800fc22:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc26:	f845 6f04 	str.w	r6, [r5, #4]!
 800fc2a:	e7eb      	b.n	800fc04 <__copybits+0x18>
 800fc2c:	f840 3b04 	str.w	r3, [r0], #4
 800fc30:	e7f4      	b.n	800fc1c <__copybits+0x30>

0800fc32 <__any_on>:
 800fc32:	f100 0214 	add.w	r2, r0, #20
 800fc36:	6900      	ldr	r0, [r0, #16]
 800fc38:	114b      	asrs	r3, r1, #5
 800fc3a:	4298      	cmp	r0, r3
 800fc3c:	b510      	push	{r4, lr}
 800fc3e:	db11      	blt.n	800fc64 <__any_on+0x32>
 800fc40:	dd0a      	ble.n	800fc58 <__any_on+0x26>
 800fc42:	f011 011f 	ands.w	r1, r1, #31
 800fc46:	d007      	beq.n	800fc58 <__any_on+0x26>
 800fc48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc4c:	fa24 f001 	lsr.w	r0, r4, r1
 800fc50:	fa00 f101 	lsl.w	r1, r0, r1
 800fc54:	428c      	cmp	r4, r1
 800fc56:	d10b      	bne.n	800fc70 <__any_on+0x3e>
 800fc58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d803      	bhi.n	800fc68 <__any_on+0x36>
 800fc60:	2000      	movs	r0, #0
 800fc62:	bd10      	pop	{r4, pc}
 800fc64:	4603      	mov	r3, r0
 800fc66:	e7f7      	b.n	800fc58 <__any_on+0x26>
 800fc68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc6c:	2900      	cmp	r1, #0
 800fc6e:	d0f5      	beq.n	800fc5c <__any_on+0x2a>
 800fc70:	2001      	movs	r0, #1
 800fc72:	e7f6      	b.n	800fc62 <__any_on+0x30>

0800fc74 <sulp>:
 800fc74:	b570      	push	{r4, r5, r6, lr}
 800fc76:	4604      	mov	r4, r0
 800fc78:	460d      	mov	r5, r1
 800fc7a:	ec45 4b10 	vmov	d0, r4, r5
 800fc7e:	4616      	mov	r6, r2
 800fc80:	f7ff feba 	bl	800f9f8 <__ulp>
 800fc84:	ec51 0b10 	vmov	r0, r1, d0
 800fc88:	b17e      	cbz	r6, 800fcaa <sulp+0x36>
 800fc8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	dd09      	ble.n	800fcaa <sulp+0x36>
 800fc96:	051b      	lsls	r3, r3, #20
 800fc98:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fc9c:	2400      	movs	r4, #0
 800fc9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fca2:	4622      	mov	r2, r4
 800fca4:	462b      	mov	r3, r5
 800fca6:	f7f0 fca7 	bl	80005f8 <__aeabi_dmul>
 800fcaa:	ec41 0b10 	vmov	d0, r0, r1
 800fcae:	bd70      	pop	{r4, r5, r6, pc}

0800fcb0 <_strtod_l>:
 800fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb4:	b09f      	sub	sp, #124	@ 0x7c
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fcba:	2200      	movs	r2, #0
 800fcbc:	921a      	str	r2, [sp, #104]	@ 0x68
 800fcbe:	9005      	str	r0, [sp, #20]
 800fcc0:	f04f 0a00 	mov.w	sl, #0
 800fcc4:	f04f 0b00 	mov.w	fp, #0
 800fcc8:	460a      	mov	r2, r1
 800fcca:	9219      	str	r2, [sp, #100]	@ 0x64
 800fccc:	7811      	ldrb	r1, [r2, #0]
 800fcce:	292b      	cmp	r1, #43	@ 0x2b
 800fcd0:	d04a      	beq.n	800fd68 <_strtod_l+0xb8>
 800fcd2:	d838      	bhi.n	800fd46 <_strtod_l+0x96>
 800fcd4:	290d      	cmp	r1, #13
 800fcd6:	d832      	bhi.n	800fd3e <_strtod_l+0x8e>
 800fcd8:	2908      	cmp	r1, #8
 800fcda:	d832      	bhi.n	800fd42 <_strtod_l+0x92>
 800fcdc:	2900      	cmp	r1, #0
 800fcde:	d03b      	beq.n	800fd58 <_strtod_l+0xa8>
 800fce0:	2200      	movs	r2, #0
 800fce2:	920e      	str	r2, [sp, #56]	@ 0x38
 800fce4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fce6:	782a      	ldrb	r2, [r5, #0]
 800fce8:	2a30      	cmp	r2, #48	@ 0x30
 800fcea:	f040 80b2 	bne.w	800fe52 <_strtod_l+0x1a2>
 800fcee:	786a      	ldrb	r2, [r5, #1]
 800fcf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fcf4:	2a58      	cmp	r2, #88	@ 0x58
 800fcf6:	d16e      	bne.n	800fdd6 <_strtod_l+0x126>
 800fcf8:	9302      	str	r3, [sp, #8]
 800fcfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	ab1a      	add	r3, sp, #104	@ 0x68
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	4a8f      	ldr	r2, [pc, #572]	@ (800ff40 <_strtod_l+0x290>)
 800fd04:	9805      	ldr	r0, [sp, #20]
 800fd06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fd08:	a919      	add	r1, sp, #100	@ 0x64
 800fd0a:	f001 fac7 	bl	801129c <__gethex>
 800fd0e:	f010 060f 	ands.w	r6, r0, #15
 800fd12:	4604      	mov	r4, r0
 800fd14:	d005      	beq.n	800fd22 <_strtod_l+0x72>
 800fd16:	2e06      	cmp	r6, #6
 800fd18:	d128      	bne.n	800fd6c <_strtod_l+0xbc>
 800fd1a:	3501      	adds	r5, #1
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800fd20:	930e      	str	r3, [sp, #56]	@ 0x38
 800fd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 858e 	bne.w	8010846 <_strtod_l+0xb96>
 800fd2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd2c:	b1cb      	cbz	r3, 800fd62 <_strtod_l+0xb2>
 800fd2e:	4652      	mov	r2, sl
 800fd30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fd34:	ec43 2b10 	vmov	d0, r2, r3
 800fd38:	b01f      	add	sp, #124	@ 0x7c
 800fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3e:	2920      	cmp	r1, #32
 800fd40:	d1ce      	bne.n	800fce0 <_strtod_l+0x30>
 800fd42:	3201      	adds	r2, #1
 800fd44:	e7c1      	b.n	800fcca <_strtod_l+0x1a>
 800fd46:	292d      	cmp	r1, #45	@ 0x2d
 800fd48:	d1ca      	bne.n	800fce0 <_strtod_l+0x30>
 800fd4a:	2101      	movs	r1, #1
 800fd4c:	910e      	str	r1, [sp, #56]	@ 0x38
 800fd4e:	1c51      	adds	r1, r2, #1
 800fd50:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd52:	7852      	ldrb	r2, [r2, #1]
 800fd54:	2a00      	cmp	r2, #0
 800fd56:	d1c5      	bne.n	800fce4 <_strtod_l+0x34>
 800fd58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f040 8570 	bne.w	8010842 <_strtod_l+0xb92>
 800fd62:	4652      	mov	r2, sl
 800fd64:	465b      	mov	r3, fp
 800fd66:	e7e5      	b.n	800fd34 <_strtod_l+0x84>
 800fd68:	2100      	movs	r1, #0
 800fd6a:	e7ef      	b.n	800fd4c <_strtod_l+0x9c>
 800fd6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd6e:	b13a      	cbz	r2, 800fd80 <_strtod_l+0xd0>
 800fd70:	2135      	movs	r1, #53	@ 0x35
 800fd72:	a81c      	add	r0, sp, #112	@ 0x70
 800fd74:	f7ff ff3a 	bl	800fbec <__copybits>
 800fd78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd7a:	9805      	ldr	r0, [sp, #20]
 800fd7c:	f7ff fb10 	bl	800f3a0 <_Bfree>
 800fd80:	3e01      	subs	r6, #1
 800fd82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd84:	2e04      	cmp	r6, #4
 800fd86:	d806      	bhi.n	800fd96 <_strtod_l+0xe6>
 800fd88:	e8df f006 	tbb	[pc, r6]
 800fd8c:	201d0314 	.word	0x201d0314
 800fd90:	14          	.byte	0x14
 800fd91:	00          	.byte	0x00
 800fd92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fd96:	05e1      	lsls	r1, r4, #23
 800fd98:	bf48      	it	mi
 800fd9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fd9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fda2:	0d1b      	lsrs	r3, r3, #20
 800fda4:	051b      	lsls	r3, r3, #20
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1bb      	bne.n	800fd22 <_strtod_l+0x72>
 800fdaa:	f7fe faff 	bl	800e3ac <__errno>
 800fdae:	2322      	movs	r3, #34	@ 0x22
 800fdb0:	6003      	str	r3, [r0, #0]
 800fdb2:	e7b6      	b.n	800fd22 <_strtod_l+0x72>
 800fdb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fdb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fdbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fdc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdc4:	e7e7      	b.n	800fd96 <_strtod_l+0xe6>
 800fdc6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ff48 <_strtod_l+0x298>
 800fdca:	e7e4      	b.n	800fd96 <_strtod_l+0xe6>
 800fdcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fdd0:	f04f 3aff 	mov.w	sl, #4294967295
 800fdd4:	e7df      	b.n	800fd96 <_strtod_l+0xe6>
 800fdd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdd8:	1c5a      	adds	r2, r3, #1
 800fdda:	9219      	str	r2, [sp, #100]	@ 0x64
 800fddc:	785b      	ldrb	r3, [r3, #1]
 800fdde:	2b30      	cmp	r3, #48	@ 0x30
 800fde0:	d0f9      	beq.n	800fdd6 <_strtod_l+0x126>
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d09d      	beq.n	800fd22 <_strtod_l+0x72>
 800fde6:	2301      	movs	r3, #1
 800fde8:	2700      	movs	r7, #0
 800fdea:	9308      	str	r3, [sp, #32]
 800fdec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdee:	930c      	str	r3, [sp, #48]	@ 0x30
 800fdf0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800fdf2:	46b9      	mov	r9, r7
 800fdf4:	220a      	movs	r2, #10
 800fdf6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fdf8:	7805      	ldrb	r5, [r0, #0]
 800fdfa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fdfe:	b2d9      	uxtb	r1, r3
 800fe00:	2909      	cmp	r1, #9
 800fe02:	d928      	bls.n	800fe56 <_strtod_l+0x1a6>
 800fe04:	494f      	ldr	r1, [pc, #316]	@ (800ff44 <_strtod_l+0x294>)
 800fe06:	2201      	movs	r2, #1
 800fe08:	f7fe f9ee 	bl	800e1e8 <strncmp>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d032      	beq.n	800fe76 <_strtod_l+0x1c6>
 800fe10:	2000      	movs	r0, #0
 800fe12:	462a      	mov	r2, r5
 800fe14:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe16:	464d      	mov	r5, r9
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2a65      	cmp	r2, #101	@ 0x65
 800fe1c:	d001      	beq.n	800fe22 <_strtod_l+0x172>
 800fe1e:	2a45      	cmp	r2, #69	@ 0x45
 800fe20:	d114      	bne.n	800fe4c <_strtod_l+0x19c>
 800fe22:	b91d      	cbnz	r5, 800fe2c <_strtod_l+0x17c>
 800fe24:	9a08      	ldr	r2, [sp, #32]
 800fe26:	4302      	orrs	r2, r0
 800fe28:	d096      	beq.n	800fd58 <_strtod_l+0xa8>
 800fe2a:	2500      	movs	r5, #0
 800fe2c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fe2e:	1c62      	adds	r2, r4, #1
 800fe30:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe32:	7862      	ldrb	r2, [r4, #1]
 800fe34:	2a2b      	cmp	r2, #43	@ 0x2b
 800fe36:	d07a      	beq.n	800ff2e <_strtod_l+0x27e>
 800fe38:	2a2d      	cmp	r2, #45	@ 0x2d
 800fe3a:	d07e      	beq.n	800ff3a <_strtod_l+0x28a>
 800fe3c:	f04f 0c00 	mov.w	ip, #0
 800fe40:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fe44:	2909      	cmp	r1, #9
 800fe46:	f240 8085 	bls.w	800ff54 <_strtod_l+0x2a4>
 800fe4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe4c:	f04f 0800 	mov.w	r8, #0
 800fe50:	e0a5      	b.n	800ff9e <_strtod_l+0x2ee>
 800fe52:	2300      	movs	r3, #0
 800fe54:	e7c8      	b.n	800fde8 <_strtod_l+0x138>
 800fe56:	f1b9 0f08 	cmp.w	r9, #8
 800fe5a:	bfd8      	it	le
 800fe5c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800fe5e:	f100 0001 	add.w	r0, r0, #1
 800fe62:	bfda      	itte	le
 800fe64:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe68:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800fe6a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800fe6e:	f109 0901 	add.w	r9, r9, #1
 800fe72:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe74:	e7bf      	b.n	800fdf6 <_strtod_l+0x146>
 800fe76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe78:	1c5a      	adds	r2, r3, #1
 800fe7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe7c:	785a      	ldrb	r2, [r3, #1]
 800fe7e:	f1b9 0f00 	cmp.w	r9, #0
 800fe82:	d03b      	beq.n	800fefc <_strtod_l+0x24c>
 800fe84:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe86:	464d      	mov	r5, r9
 800fe88:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fe8c:	2b09      	cmp	r3, #9
 800fe8e:	d912      	bls.n	800feb6 <_strtod_l+0x206>
 800fe90:	2301      	movs	r3, #1
 800fe92:	e7c2      	b.n	800fe1a <_strtod_l+0x16a>
 800fe94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe96:	1c5a      	adds	r2, r3, #1
 800fe98:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe9a:	785a      	ldrb	r2, [r3, #1]
 800fe9c:	3001      	adds	r0, #1
 800fe9e:	2a30      	cmp	r2, #48	@ 0x30
 800fea0:	d0f8      	beq.n	800fe94 <_strtod_l+0x1e4>
 800fea2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fea6:	2b08      	cmp	r3, #8
 800fea8:	f200 84d2 	bhi.w	8010850 <_strtod_l+0xba0>
 800feac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800feae:	900a      	str	r0, [sp, #40]	@ 0x28
 800feb0:	2000      	movs	r0, #0
 800feb2:	930c      	str	r3, [sp, #48]	@ 0x30
 800feb4:	4605      	mov	r5, r0
 800feb6:	3a30      	subs	r2, #48	@ 0x30
 800feb8:	f100 0301 	add.w	r3, r0, #1
 800febc:	d018      	beq.n	800fef0 <_strtod_l+0x240>
 800febe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fec0:	4419      	add	r1, r3
 800fec2:	910a      	str	r1, [sp, #40]	@ 0x28
 800fec4:	462e      	mov	r6, r5
 800fec6:	f04f 0e0a 	mov.w	lr, #10
 800feca:	1c71      	adds	r1, r6, #1
 800fecc:	eba1 0c05 	sub.w	ip, r1, r5
 800fed0:	4563      	cmp	r3, ip
 800fed2:	dc15      	bgt.n	800ff00 <_strtod_l+0x250>
 800fed4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800fed8:	182b      	adds	r3, r5, r0
 800feda:	2b08      	cmp	r3, #8
 800fedc:	f105 0501 	add.w	r5, r5, #1
 800fee0:	4405      	add	r5, r0
 800fee2:	dc1a      	bgt.n	800ff1a <_strtod_l+0x26a>
 800fee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fee6:	230a      	movs	r3, #10
 800fee8:	fb03 2301 	mla	r3, r3, r1, r2
 800feec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800feee:	2300      	movs	r3, #0
 800fef0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fef2:	1c51      	adds	r1, r2, #1
 800fef4:	9119      	str	r1, [sp, #100]	@ 0x64
 800fef6:	7852      	ldrb	r2, [r2, #1]
 800fef8:	4618      	mov	r0, r3
 800fefa:	e7c5      	b.n	800fe88 <_strtod_l+0x1d8>
 800fefc:	4648      	mov	r0, r9
 800fefe:	e7ce      	b.n	800fe9e <_strtod_l+0x1ee>
 800ff00:	2e08      	cmp	r6, #8
 800ff02:	dc05      	bgt.n	800ff10 <_strtod_l+0x260>
 800ff04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ff06:	fb0e f606 	mul.w	r6, lr, r6
 800ff0a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ff0c:	460e      	mov	r6, r1
 800ff0e:	e7dc      	b.n	800feca <_strtod_l+0x21a>
 800ff10:	2910      	cmp	r1, #16
 800ff12:	bfd8      	it	le
 800ff14:	fb0e f707 	mulle.w	r7, lr, r7
 800ff18:	e7f8      	b.n	800ff0c <_strtod_l+0x25c>
 800ff1a:	2b0f      	cmp	r3, #15
 800ff1c:	bfdc      	itt	le
 800ff1e:	230a      	movle	r3, #10
 800ff20:	fb03 2707 	mlale	r7, r3, r7, r2
 800ff24:	e7e3      	b.n	800feee <_strtod_l+0x23e>
 800ff26:	2300      	movs	r3, #0
 800ff28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e77a      	b.n	800fe24 <_strtod_l+0x174>
 800ff2e:	f04f 0c00 	mov.w	ip, #0
 800ff32:	1ca2      	adds	r2, r4, #2
 800ff34:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff36:	78a2      	ldrb	r2, [r4, #2]
 800ff38:	e782      	b.n	800fe40 <_strtod_l+0x190>
 800ff3a:	f04f 0c01 	mov.w	ip, #1
 800ff3e:	e7f8      	b.n	800ff32 <_strtod_l+0x282>
 800ff40:	080125fc 	.word	0x080125fc
 800ff44:	08012471 	.word	0x08012471
 800ff48:	7ff00000 	.word	0x7ff00000
 800ff4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff4e:	1c51      	adds	r1, r2, #1
 800ff50:	9119      	str	r1, [sp, #100]	@ 0x64
 800ff52:	7852      	ldrb	r2, [r2, #1]
 800ff54:	2a30      	cmp	r2, #48	@ 0x30
 800ff56:	d0f9      	beq.n	800ff4c <_strtod_l+0x29c>
 800ff58:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ff5c:	2908      	cmp	r1, #8
 800ff5e:	f63f af75 	bhi.w	800fe4c <_strtod_l+0x19c>
 800ff62:	3a30      	subs	r2, #48	@ 0x30
 800ff64:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff68:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ff6a:	f04f 080a 	mov.w	r8, #10
 800ff6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff70:	1c56      	adds	r6, r2, #1
 800ff72:	9619      	str	r6, [sp, #100]	@ 0x64
 800ff74:	7852      	ldrb	r2, [r2, #1]
 800ff76:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ff7a:	f1be 0f09 	cmp.w	lr, #9
 800ff7e:	d939      	bls.n	800fff4 <_strtod_l+0x344>
 800ff80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff82:	1a76      	subs	r6, r6, r1
 800ff84:	2e08      	cmp	r6, #8
 800ff86:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ff8a:	dc03      	bgt.n	800ff94 <_strtod_l+0x2e4>
 800ff8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff8e:	4588      	cmp	r8, r1
 800ff90:	bfa8      	it	ge
 800ff92:	4688      	movge	r8, r1
 800ff94:	f1bc 0f00 	cmp.w	ip, #0
 800ff98:	d001      	beq.n	800ff9e <_strtod_l+0x2ee>
 800ff9a:	f1c8 0800 	rsb	r8, r8, #0
 800ff9e:	2d00      	cmp	r5, #0
 800ffa0:	d14e      	bne.n	8010040 <_strtod_l+0x390>
 800ffa2:	9908      	ldr	r1, [sp, #32]
 800ffa4:	4308      	orrs	r0, r1
 800ffa6:	f47f aebc 	bne.w	800fd22 <_strtod_l+0x72>
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f47f aed4 	bne.w	800fd58 <_strtod_l+0xa8>
 800ffb0:	2a69      	cmp	r2, #105	@ 0x69
 800ffb2:	d028      	beq.n	8010006 <_strtod_l+0x356>
 800ffb4:	dc25      	bgt.n	8010002 <_strtod_l+0x352>
 800ffb6:	2a49      	cmp	r2, #73	@ 0x49
 800ffb8:	d025      	beq.n	8010006 <_strtod_l+0x356>
 800ffba:	2a4e      	cmp	r2, #78	@ 0x4e
 800ffbc:	f47f aecc 	bne.w	800fd58 <_strtod_l+0xa8>
 800ffc0:	499a      	ldr	r1, [pc, #616]	@ (801022c <_strtod_l+0x57c>)
 800ffc2:	a819      	add	r0, sp, #100	@ 0x64
 800ffc4:	f001 fb8c 	bl	80116e0 <__match>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	f43f aec5 	beq.w	800fd58 <_strtod_l+0xa8>
 800ffce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	2b28      	cmp	r3, #40	@ 0x28
 800ffd4:	d12e      	bne.n	8010034 <_strtod_l+0x384>
 800ffd6:	4996      	ldr	r1, [pc, #600]	@ (8010230 <_strtod_l+0x580>)
 800ffd8:	aa1c      	add	r2, sp, #112	@ 0x70
 800ffda:	a819      	add	r0, sp, #100	@ 0x64
 800ffdc:	f001 fb94 	bl	8011708 <__hexnan>
 800ffe0:	2805      	cmp	r0, #5
 800ffe2:	d127      	bne.n	8010034 <_strtod_l+0x384>
 800ffe4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffe6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ffea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ffee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fff2:	e696      	b.n	800fd22 <_strtod_l+0x72>
 800fff4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fff6:	fb08 2101 	mla	r1, r8, r1, r2
 800fffa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fffe:	9209      	str	r2, [sp, #36]	@ 0x24
 8010000:	e7b5      	b.n	800ff6e <_strtod_l+0x2be>
 8010002:	2a6e      	cmp	r2, #110	@ 0x6e
 8010004:	e7da      	b.n	800ffbc <_strtod_l+0x30c>
 8010006:	498b      	ldr	r1, [pc, #556]	@ (8010234 <_strtod_l+0x584>)
 8010008:	a819      	add	r0, sp, #100	@ 0x64
 801000a:	f001 fb69 	bl	80116e0 <__match>
 801000e:	2800      	cmp	r0, #0
 8010010:	f43f aea2 	beq.w	800fd58 <_strtod_l+0xa8>
 8010014:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010016:	4988      	ldr	r1, [pc, #544]	@ (8010238 <_strtod_l+0x588>)
 8010018:	3b01      	subs	r3, #1
 801001a:	a819      	add	r0, sp, #100	@ 0x64
 801001c:	9319      	str	r3, [sp, #100]	@ 0x64
 801001e:	f001 fb5f 	bl	80116e0 <__match>
 8010022:	b910      	cbnz	r0, 801002a <_strtod_l+0x37a>
 8010024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010026:	3301      	adds	r3, #1
 8010028:	9319      	str	r3, [sp, #100]	@ 0x64
 801002a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8010248 <_strtod_l+0x598>
 801002e:	f04f 0a00 	mov.w	sl, #0
 8010032:	e676      	b.n	800fd22 <_strtod_l+0x72>
 8010034:	4881      	ldr	r0, [pc, #516]	@ (801023c <_strtod_l+0x58c>)
 8010036:	f001 f8a7 	bl	8011188 <nan>
 801003a:	ec5b ab10 	vmov	sl, fp, d0
 801003e:	e670      	b.n	800fd22 <_strtod_l+0x72>
 8010040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010042:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010044:	eba8 0303 	sub.w	r3, r8, r3
 8010048:	f1b9 0f00 	cmp.w	r9, #0
 801004c:	bf08      	it	eq
 801004e:	46a9      	moveq	r9, r5
 8010050:	2d10      	cmp	r5, #16
 8010052:	9309      	str	r3, [sp, #36]	@ 0x24
 8010054:	462c      	mov	r4, r5
 8010056:	bfa8      	it	ge
 8010058:	2410      	movge	r4, #16
 801005a:	f7f0 fa53 	bl	8000504 <__aeabi_ui2d>
 801005e:	2d09      	cmp	r5, #9
 8010060:	4682      	mov	sl, r0
 8010062:	468b      	mov	fp, r1
 8010064:	dc13      	bgt.n	801008e <_strtod_l+0x3de>
 8010066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010068:	2b00      	cmp	r3, #0
 801006a:	f43f ae5a 	beq.w	800fd22 <_strtod_l+0x72>
 801006e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010070:	dd78      	ble.n	8010164 <_strtod_l+0x4b4>
 8010072:	2b16      	cmp	r3, #22
 8010074:	dc5f      	bgt.n	8010136 <_strtod_l+0x486>
 8010076:	4972      	ldr	r1, [pc, #456]	@ (8010240 <_strtod_l+0x590>)
 8010078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801007c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010080:	4652      	mov	r2, sl
 8010082:	465b      	mov	r3, fp
 8010084:	f7f0 fab8 	bl	80005f8 <__aeabi_dmul>
 8010088:	4682      	mov	sl, r0
 801008a:	468b      	mov	fp, r1
 801008c:	e649      	b.n	800fd22 <_strtod_l+0x72>
 801008e:	4b6c      	ldr	r3, [pc, #432]	@ (8010240 <_strtod_l+0x590>)
 8010090:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010094:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010098:	f7f0 faae 	bl	80005f8 <__aeabi_dmul>
 801009c:	4682      	mov	sl, r0
 801009e:	4638      	mov	r0, r7
 80100a0:	468b      	mov	fp, r1
 80100a2:	f7f0 fa2f 	bl	8000504 <__aeabi_ui2d>
 80100a6:	4602      	mov	r2, r0
 80100a8:	460b      	mov	r3, r1
 80100aa:	4650      	mov	r0, sl
 80100ac:	4659      	mov	r1, fp
 80100ae:	f7f0 f8ed 	bl	800028c <__adddf3>
 80100b2:	2d0f      	cmp	r5, #15
 80100b4:	4682      	mov	sl, r0
 80100b6:	468b      	mov	fp, r1
 80100b8:	ddd5      	ble.n	8010066 <_strtod_l+0x3b6>
 80100ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100bc:	1b2c      	subs	r4, r5, r4
 80100be:	441c      	add	r4, r3
 80100c0:	2c00      	cmp	r4, #0
 80100c2:	f340 8093 	ble.w	80101ec <_strtod_l+0x53c>
 80100c6:	f014 030f 	ands.w	r3, r4, #15
 80100ca:	d00a      	beq.n	80100e2 <_strtod_l+0x432>
 80100cc:	495c      	ldr	r1, [pc, #368]	@ (8010240 <_strtod_l+0x590>)
 80100ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100d2:	4652      	mov	r2, sl
 80100d4:	465b      	mov	r3, fp
 80100d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100da:	f7f0 fa8d 	bl	80005f8 <__aeabi_dmul>
 80100de:	4682      	mov	sl, r0
 80100e0:	468b      	mov	fp, r1
 80100e2:	f034 040f 	bics.w	r4, r4, #15
 80100e6:	d073      	beq.n	80101d0 <_strtod_l+0x520>
 80100e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80100ec:	dd49      	ble.n	8010182 <_strtod_l+0x4d2>
 80100ee:	2400      	movs	r4, #0
 80100f0:	46a0      	mov	r8, r4
 80100f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80100f4:	46a1      	mov	r9, r4
 80100f6:	9a05      	ldr	r2, [sp, #20]
 80100f8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8010248 <_strtod_l+0x598>
 80100fc:	2322      	movs	r3, #34	@ 0x22
 80100fe:	6013      	str	r3, [r2, #0]
 8010100:	f04f 0a00 	mov.w	sl, #0
 8010104:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010106:	2b00      	cmp	r3, #0
 8010108:	f43f ae0b 	beq.w	800fd22 <_strtod_l+0x72>
 801010c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801010e:	9805      	ldr	r0, [sp, #20]
 8010110:	f7ff f946 	bl	800f3a0 <_Bfree>
 8010114:	9805      	ldr	r0, [sp, #20]
 8010116:	4649      	mov	r1, r9
 8010118:	f7ff f942 	bl	800f3a0 <_Bfree>
 801011c:	9805      	ldr	r0, [sp, #20]
 801011e:	4641      	mov	r1, r8
 8010120:	f7ff f93e 	bl	800f3a0 <_Bfree>
 8010124:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010126:	9805      	ldr	r0, [sp, #20]
 8010128:	f7ff f93a 	bl	800f3a0 <_Bfree>
 801012c:	9805      	ldr	r0, [sp, #20]
 801012e:	4621      	mov	r1, r4
 8010130:	f7ff f936 	bl	800f3a0 <_Bfree>
 8010134:	e5f5      	b.n	800fd22 <_strtod_l+0x72>
 8010136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010138:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801013c:	4293      	cmp	r3, r2
 801013e:	dbbc      	blt.n	80100ba <_strtod_l+0x40a>
 8010140:	4c3f      	ldr	r4, [pc, #252]	@ (8010240 <_strtod_l+0x590>)
 8010142:	f1c5 050f 	rsb	r5, r5, #15
 8010146:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801014a:	4652      	mov	r2, sl
 801014c:	465b      	mov	r3, fp
 801014e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010152:	f7f0 fa51 	bl	80005f8 <__aeabi_dmul>
 8010156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010158:	1b5d      	subs	r5, r3, r5
 801015a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801015e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010162:	e78f      	b.n	8010084 <_strtod_l+0x3d4>
 8010164:	3316      	adds	r3, #22
 8010166:	dba8      	blt.n	80100ba <_strtod_l+0x40a>
 8010168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801016a:	eba3 0808 	sub.w	r8, r3, r8
 801016e:	4b34      	ldr	r3, [pc, #208]	@ (8010240 <_strtod_l+0x590>)
 8010170:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010174:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010178:	4650      	mov	r0, sl
 801017a:	4659      	mov	r1, fp
 801017c:	f7f0 fb66 	bl	800084c <__aeabi_ddiv>
 8010180:	e782      	b.n	8010088 <_strtod_l+0x3d8>
 8010182:	2300      	movs	r3, #0
 8010184:	4f2f      	ldr	r7, [pc, #188]	@ (8010244 <_strtod_l+0x594>)
 8010186:	1124      	asrs	r4, r4, #4
 8010188:	4650      	mov	r0, sl
 801018a:	4659      	mov	r1, fp
 801018c:	461e      	mov	r6, r3
 801018e:	2c01      	cmp	r4, #1
 8010190:	dc21      	bgt.n	80101d6 <_strtod_l+0x526>
 8010192:	b10b      	cbz	r3, 8010198 <_strtod_l+0x4e8>
 8010194:	4682      	mov	sl, r0
 8010196:	468b      	mov	fp, r1
 8010198:	492a      	ldr	r1, [pc, #168]	@ (8010244 <_strtod_l+0x594>)
 801019a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801019e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80101a2:	4652      	mov	r2, sl
 80101a4:	465b      	mov	r3, fp
 80101a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101aa:	f7f0 fa25 	bl	80005f8 <__aeabi_dmul>
 80101ae:	4b26      	ldr	r3, [pc, #152]	@ (8010248 <_strtod_l+0x598>)
 80101b0:	460a      	mov	r2, r1
 80101b2:	400b      	ands	r3, r1
 80101b4:	4925      	ldr	r1, [pc, #148]	@ (801024c <_strtod_l+0x59c>)
 80101b6:	428b      	cmp	r3, r1
 80101b8:	4682      	mov	sl, r0
 80101ba:	d898      	bhi.n	80100ee <_strtod_l+0x43e>
 80101bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80101c0:	428b      	cmp	r3, r1
 80101c2:	bf86      	itte	hi
 80101c4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8010250 <_strtod_l+0x5a0>
 80101c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80101cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80101d0:	2300      	movs	r3, #0
 80101d2:	9308      	str	r3, [sp, #32]
 80101d4:	e076      	b.n	80102c4 <_strtod_l+0x614>
 80101d6:	07e2      	lsls	r2, r4, #31
 80101d8:	d504      	bpl.n	80101e4 <_strtod_l+0x534>
 80101da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101de:	f7f0 fa0b 	bl	80005f8 <__aeabi_dmul>
 80101e2:	2301      	movs	r3, #1
 80101e4:	3601      	adds	r6, #1
 80101e6:	1064      	asrs	r4, r4, #1
 80101e8:	3708      	adds	r7, #8
 80101ea:	e7d0      	b.n	801018e <_strtod_l+0x4de>
 80101ec:	d0f0      	beq.n	80101d0 <_strtod_l+0x520>
 80101ee:	4264      	negs	r4, r4
 80101f0:	f014 020f 	ands.w	r2, r4, #15
 80101f4:	d00a      	beq.n	801020c <_strtod_l+0x55c>
 80101f6:	4b12      	ldr	r3, [pc, #72]	@ (8010240 <_strtod_l+0x590>)
 80101f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101fc:	4650      	mov	r0, sl
 80101fe:	4659      	mov	r1, fp
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7f0 fb22 	bl	800084c <__aeabi_ddiv>
 8010208:	4682      	mov	sl, r0
 801020a:	468b      	mov	fp, r1
 801020c:	1124      	asrs	r4, r4, #4
 801020e:	d0df      	beq.n	80101d0 <_strtod_l+0x520>
 8010210:	2c1f      	cmp	r4, #31
 8010212:	dd1f      	ble.n	8010254 <_strtod_l+0x5a4>
 8010214:	2400      	movs	r4, #0
 8010216:	46a0      	mov	r8, r4
 8010218:	940b      	str	r4, [sp, #44]	@ 0x2c
 801021a:	46a1      	mov	r9, r4
 801021c:	9a05      	ldr	r2, [sp, #20]
 801021e:	2322      	movs	r3, #34	@ 0x22
 8010220:	f04f 0a00 	mov.w	sl, #0
 8010224:	f04f 0b00 	mov.w	fp, #0
 8010228:	6013      	str	r3, [r2, #0]
 801022a:	e76b      	b.n	8010104 <_strtod_l+0x454>
 801022c:	080122c9 	.word	0x080122c9
 8010230:	080125e8 	.word	0x080125e8
 8010234:	080122c1 	.word	0x080122c1
 8010238:	080123a5 	.word	0x080123a5
 801023c:	080123a1 	.word	0x080123a1
 8010240:	08012520 	.word	0x08012520
 8010244:	080124f8 	.word	0x080124f8
 8010248:	7ff00000 	.word	0x7ff00000
 801024c:	7ca00000 	.word	0x7ca00000
 8010250:	7fefffff 	.word	0x7fefffff
 8010254:	f014 0310 	ands.w	r3, r4, #16
 8010258:	bf18      	it	ne
 801025a:	236a      	movne	r3, #106	@ 0x6a
 801025c:	4ea9      	ldr	r6, [pc, #676]	@ (8010504 <_strtod_l+0x854>)
 801025e:	9308      	str	r3, [sp, #32]
 8010260:	4650      	mov	r0, sl
 8010262:	4659      	mov	r1, fp
 8010264:	2300      	movs	r3, #0
 8010266:	07e7      	lsls	r7, r4, #31
 8010268:	d504      	bpl.n	8010274 <_strtod_l+0x5c4>
 801026a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801026e:	f7f0 f9c3 	bl	80005f8 <__aeabi_dmul>
 8010272:	2301      	movs	r3, #1
 8010274:	1064      	asrs	r4, r4, #1
 8010276:	f106 0608 	add.w	r6, r6, #8
 801027a:	d1f4      	bne.n	8010266 <_strtod_l+0x5b6>
 801027c:	b10b      	cbz	r3, 8010282 <_strtod_l+0x5d2>
 801027e:	4682      	mov	sl, r0
 8010280:	468b      	mov	fp, r1
 8010282:	9b08      	ldr	r3, [sp, #32]
 8010284:	b1b3      	cbz	r3, 80102b4 <_strtod_l+0x604>
 8010286:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801028a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801028e:	2b00      	cmp	r3, #0
 8010290:	4659      	mov	r1, fp
 8010292:	dd0f      	ble.n	80102b4 <_strtod_l+0x604>
 8010294:	2b1f      	cmp	r3, #31
 8010296:	dd56      	ble.n	8010346 <_strtod_l+0x696>
 8010298:	2b34      	cmp	r3, #52	@ 0x34
 801029a:	bfde      	ittt	le
 801029c:	f04f 33ff 	movle.w	r3, #4294967295
 80102a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80102a4:	4093      	lslle	r3, r2
 80102a6:	f04f 0a00 	mov.w	sl, #0
 80102aa:	bfcc      	ite	gt
 80102ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80102b0:	ea03 0b01 	andle.w	fp, r3, r1
 80102b4:	2200      	movs	r2, #0
 80102b6:	2300      	movs	r3, #0
 80102b8:	4650      	mov	r0, sl
 80102ba:	4659      	mov	r1, fp
 80102bc:	f7f0 fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d1a7      	bne.n	8010214 <_strtod_l+0x564>
 80102c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102ca:	9805      	ldr	r0, [sp, #20]
 80102cc:	462b      	mov	r3, r5
 80102ce:	464a      	mov	r2, r9
 80102d0:	f7ff f8ce 	bl	800f470 <__s2b>
 80102d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80102d6:	2800      	cmp	r0, #0
 80102d8:	f43f af09 	beq.w	80100ee <_strtod_l+0x43e>
 80102dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102e0:	2a00      	cmp	r2, #0
 80102e2:	eba3 0308 	sub.w	r3, r3, r8
 80102e6:	bfa8      	it	ge
 80102e8:	2300      	movge	r3, #0
 80102ea:	9312      	str	r3, [sp, #72]	@ 0x48
 80102ec:	2400      	movs	r4, #0
 80102ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80102f4:	46a0      	mov	r8, r4
 80102f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102f8:	9805      	ldr	r0, [sp, #20]
 80102fa:	6859      	ldr	r1, [r3, #4]
 80102fc:	f7ff f810 	bl	800f320 <_Balloc>
 8010300:	4681      	mov	r9, r0
 8010302:	2800      	cmp	r0, #0
 8010304:	f43f aef7 	beq.w	80100f6 <_strtod_l+0x446>
 8010308:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801030a:	691a      	ldr	r2, [r3, #16]
 801030c:	3202      	adds	r2, #2
 801030e:	f103 010c 	add.w	r1, r3, #12
 8010312:	0092      	lsls	r2, r2, #2
 8010314:	300c      	adds	r0, #12
 8010316:	f7fe f876 	bl	800e406 <memcpy>
 801031a:	ec4b ab10 	vmov	d0, sl, fp
 801031e:	9805      	ldr	r0, [sp, #20]
 8010320:	aa1c      	add	r2, sp, #112	@ 0x70
 8010322:	a91b      	add	r1, sp, #108	@ 0x6c
 8010324:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010328:	f7ff fbd6 	bl	800fad8 <__d2b>
 801032c:	901a      	str	r0, [sp, #104]	@ 0x68
 801032e:	2800      	cmp	r0, #0
 8010330:	f43f aee1 	beq.w	80100f6 <_strtod_l+0x446>
 8010334:	9805      	ldr	r0, [sp, #20]
 8010336:	2101      	movs	r1, #1
 8010338:	f7ff f930 	bl	800f59c <__i2b>
 801033c:	4680      	mov	r8, r0
 801033e:	b948      	cbnz	r0, 8010354 <_strtod_l+0x6a4>
 8010340:	f04f 0800 	mov.w	r8, #0
 8010344:	e6d7      	b.n	80100f6 <_strtod_l+0x446>
 8010346:	f04f 32ff 	mov.w	r2, #4294967295
 801034a:	fa02 f303 	lsl.w	r3, r2, r3
 801034e:	ea03 0a0a 	and.w	sl, r3, sl
 8010352:	e7af      	b.n	80102b4 <_strtod_l+0x604>
 8010354:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010356:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010358:	2d00      	cmp	r5, #0
 801035a:	bfab      	itete	ge
 801035c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801035e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010360:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010362:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010364:	bfac      	ite	ge
 8010366:	18ef      	addge	r7, r5, r3
 8010368:	1b5e      	sublt	r6, r3, r5
 801036a:	9b08      	ldr	r3, [sp, #32]
 801036c:	1aed      	subs	r5, r5, r3
 801036e:	4415      	add	r5, r2
 8010370:	4b65      	ldr	r3, [pc, #404]	@ (8010508 <_strtod_l+0x858>)
 8010372:	3d01      	subs	r5, #1
 8010374:	429d      	cmp	r5, r3
 8010376:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801037a:	da50      	bge.n	801041e <_strtod_l+0x76e>
 801037c:	1b5b      	subs	r3, r3, r5
 801037e:	2b1f      	cmp	r3, #31
 8010380:	eba2 0203 	sub.w	r2, r2, r3
 8010384:	f04f 0101 	mov.w	r1, #1
 8010388:	dc3d      	bgt.n	8010406 <_strtod_l+0x756>
 801038a:	fa01 f303 	lsl.w	r3, r1, r3
 801038e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010390:	2300      	movs	r3, #0
 8010392:	9310      	str	r3, [sp, #64]	@ 0x40
 8010394:	18bd      	adds	r5, r7, r2
 8010396:	9b08      	ldr	r3, [sp, #32]
 8010398:	42af      	cmp	r7, r5
 801039a:	4416      	add	r6, r2
 801039c:	441e      	add	r6, r3
 801039e:	463b      	mov	r3, r7
 80103a0:	bfa8      	it	ge
 80103a2:	462b      	movge	r3, r5
 80103a4:	42b3      	cmp	r3, r6
 80103a6:	bfa8      	it	ge
 80103a8:	4633      	movge	r3, r6
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	bfc2      	ittt	gt
 80103ae:	1aed      	subgt	r5, r5, r3
 80103b0:	1af6      	subgt	r6, r6, r3
 80103b2:	1aff      	subgt	r7, r7, r3
 80103b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	dd16      	ble.n	80103e8 <_strtod_l+0x738>
 80103ba:	4641      	mov	r1, r8
 80103bc:	9805      	ldr	r0, [sp, #20]
 80103be:	461a      	mov	r2, r3
 80103c0:	f7ff f9a4 	bl	800f70c <__pow5mult>
 80103c4:	4680      	mov	r8, r0
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d0ba      	beq.n	8010340 <_strtod_l+0x690>
 80103ca:	4601      	mov	r1, r0
 80103cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80103ce:	9805      	ldr	r0, [sp, #20]
 80103d0:	f7ff f8fa 	bl	800f5c8 <__multiply>
 80103d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80103d6:	2800      	cmp	r0, #0
 80103d8:	f43f ae8d 	beq.w	80100f6 <_strtod_l+0x446>
 80103dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80103de:	9805      	ldr	r0, [sp, #20]
 80103e0:	f7fe ffde 	bl	800f3a0 <_Bfree>
 80103e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80103e8:	2d00      	cmp	r5, #0
 80103ea:	dc1d      	bgt.n	8010428 <_strtod_l+0x778>
 80103ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	dd23      	ble.n	801043a <_strtod_l+0x78a>
 80103f2:	4649      	mov	r1, r9
 80103f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80103f6:	9805      	ldr	r0, [sp, #20]
 80103f8:	f7ff f988 	bl	800f70c <__pow5mult>
 80103fc:	4681      	mov	r9, r0
 80103fe:	b9e0      	cbnz	r0, 801043a <_strtod_l+0x78a>
 8010400:	f04f 0900 	mov.w	r9, #0
 8010404:	e677      	b.n	80100f6 <_strtod_l+0x446>
 8010406:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801040a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801040e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010412:	35e2      	adds	r5, #226	@ 0xe2
 8010414:	fa01 f305 	lsl.w	r3, r1, r5
 8010418:	9310      	str	r3, [sp, #64]	@ 0x40
 801041a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801041c:	e7ba      	b.n	8010394 <_strtod_l+0x6e4>
 801041e:	2300      	movs	r3, #0
 8010420:	9310      	str	r3, [sp, #64]	@ 0x40
 8010422:	2301      	movs	r3, #1
 8010424:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010426:	e7b5      	b.n	8010394 <_strtod_l+0x6e4>
 8010428:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801042a:	9805      	ldr	r0, [sp, #20]
 801042c:	462a      	mov	r2, r5
 801042e:	f7ff f9c7 	bl	800f7c0 <__lshift>
 8010432:	901a      	str	r0, [sp, #104]	@ 0x68
 8010434:	2800      	cmp	r0, #0
 8010436:	d1d9      	bne.n	80103ec <_strtod_l+0x73c>
 8010438:	e65d      	b.n	80100f6 <_strtod_l+0x446>
 801043a:	2e00      	cmp	r6, #0
 801043c:	dd07      	ble.n	801044e <_strtod_l+0x79e>
 801043e:	4649      	mov	r1, r9
 8010440:	9805      	ldr	r0, [sp, #20]
 8010442:	4632      	mov	r2, r6
 8010444:	f7ff f9bc 	bl	800f7c0 <__lshift>
 8010448:	4681      	mov	r9, r0
 801044a:	2800      	cmp	r0, #0
 801044c:	d0d8      	beq.n	8010400 <_strtod_l+0x750>
 801044e:	2f00      	cmp	r7, #0
 8010450:	dd08      	ble.n	8010464 <_strtod_l+0x7b4>
 8010452:	4641      	mov	r1, r8
 8010454:	9805      	ldr	r0, [sp, #20]
 8010456:	463a      	mov	r2, r7
 8010458:	f7ff f9b2 	bl	800f7c0 <__lshift>
 801045c:	4680      	mov	r8, r0
 801045e:	2800      	cmp	r0, #0
 8010460:	f43f ae49 	beq.w	80100f6 <_strtod_l+0x446>
 8010464:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010466:	9805      	ldr	r0, [sp, #20]
 8010468:	464a      	mov	r2, r9
 801046a:	f7ff fa31 	bl	800f8d0 <__mdiff>
 801046e:	4604      	mov	r4, r0
 8010470:	2800      	cmp	r0, #0
 8010472:	f43f ae40 	beq.w	80100f6 <_strtod_l+0x446>
 8010476:	68c3      	ldr	r3, [r0, #12]
 8010478:	930f      	str	r3, [sp, #60]	@ 0x3c
 801047a:	2300      	movs	r3, #0
 801047c:	60c3      	str	r3, [r0, #12]
 801047e:	4641      	mov	r1, r8
 8010480:	f7ff fa0a 	bl	800f898 <__mcmp>
 8010484:	2800      	cmp	r0, #0
 8010486:	da45      	bge.n	8010514 <_strtod_l+0x864>
 8010488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801048a:	ea53 030a 	orrs.w	r3, r3, sl
 801048e:	d16b      	bne.n	8010568 <_strtod_l+0x8b8>
 8010490:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010494:	2b00      	cmp	r3, #0
 8010496:	d167      	bne.n	8010568 <_strtod_l+0x8b8>
 8010498:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801049c:	0d1b      	lsrs	r3, r3, #20
 801049e:	051b      	lsls	r3, r3, #20
 80104a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104a4:	d960      	bls.n	8010568 <_strtod_l+0x8b8>
 80104a6:	6963      	ldr	r3, [r4, #20]
 80104a8:	b913      	cbnz	r3, 80104b0 <_strtod_l+0x800>
 80104aa:	6923      	ldr	r3, [r4, #16]
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	dd5b      	ble.n	8010568 <_strtod_l+0x8b8>
 80104b0:	4621      	mov	r1, r4
 80104b2:	2201      	movs	r2, #1
 80104b4:	9805      	ldr	r0, [sp, #20]
 80104b6:	f7ff f983 	bl	800f7c0 <__lshift>
 80104ba:	4641      	mov	r1, r8
 80104bc:	4604      	mov	r4, r0
 80104be:	f7ff f9eb 	bl	800f898 <__mcmp>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	dd50      	ble.n	8010568 <_strtod_l+0x8b8>
 80104c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104ca:	9a08      	ldr	r2, [sp, #32]
 80104cc:	0d1b      	lsrs	r3, r3, #20
 80104ce:	051b      	lsls	r3, r3, #20
 80104d0:	2a00      	cmp	r2, #0
 80104d2:	d06a      	beq.n	80105aa <_strtod_l+0x8fa>
 80104d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104d8:	d867      	bhi.n	80105aa <_strtod_l+0x8fa>
 80104da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80104de:	f67f ae9d 	bls.w	801021c <_strtod_l+0x56c>
 80104e2:	4b0a      	ldr	r3, [pc, #40]	@ (801050c <_strtod_l+0x85c>)
 80104e4:	4650      	mov	r0, sl
 80104e6:	4659      	mov	r1, fp
 80104e8:	2200      	movs	r2, #0
 80104ea:	f7f0 f885 	bl	80005f8 <__aeabi_dmul>
 80104ee:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <_strtod_l+0x860>)
 80104f0:	400b      	ands	r3, r1
 80104f2:	4682      	mov	sl, r0
 80104f4:	468b      	mov	fp, r1
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f47f ae08 	bne.w	801010c <_strtod_l+0x45c>
 80104fc:	9a05      	ldr	r2, [sp, #20]
 80104fe:	2322      	movs	r3, #34	@ 0x22
 8010500:	6013      	str	r3, [r2, #0]
 8010502:	e603      	b.n	801010c <_strtod_l+0x45c>
 8010504:	08012610 	.word	0x08012610
 8010508:	fffffc02 	.word	0xfffffc02
 801050c:	39500000 	.word	0x39500000
 8010510:	7ff00000 	.word	0x7ff00000
 8010514:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010518:	d165      	bne.n	80105e6 <_strtod_l+0x936>
 801051a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801051c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010520:	b35a      	cbz	r2, 801057a <_strtod_l+0x8ca>
 8010522:	4a9f      	ldr	r2, [pc, #636]	@ (80107a0 <_strtod_l+0xaf0>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d12b      	bne.n	8010580 <_strtod_l+0x8d0>
 8010528:	9b08      	ldr	r3, [sp, #32]
 801052a:	4651      	mov	r1, sl
 801052c:	b303      	cbz	r3, 8010570 <_strtod_l+0x8c0>
 801052e:	4b9d      	ldr	r3, [pc, #628]	@ (80107a4 <_strtod_l+0xaf4>)
 8010530:	465a      	mov	r2, fp
 8010532:	4013      	ands	r3, r2
 8010534:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010538:	f04f 32ff 	mov.w	r2, #4294967295
 801053c:	d81b      	bhi.n	8010576 <_strtod_l+0x8c6>
 801053e:	0d1b      	lsrs	r3, r3, #20
 8010540:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010544:	fa02 f303 	lsl.w	r3, r2, r3
 8010548:	4299      	cmp	r1, r3
 801054a:	d119      	bne.n	8010580 <_strtod_l+0x8d0>
 801054c:	4b96      	ldr	r3, [pc, #600]	@ (80107a8 <_strtod_l+0xaf8>)
 801054e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010550:	429a      	cmp	r2, r3
 8010552:	d102      	bne.n	801055a <_strtod_l+0x8aa>
 8010554:	3101      	adds	r1, #1
 8010556:	f43f adce 	beq.w	80100f6 <_strtod_l+0x446>
 801055a:	4b92      	ldr	r3, [pc, #584]	@ (80107a4 <_strtod_l+0xaf4>)
 801055c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801055e:	401a      	ands	r2, r3
 8010560:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010564:	f04f 0a00 	mov.w	sl, #0
 8010568:	9b08      	ldr	r3, [sp, #32]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d1b9      	bne.n	80104e2 <_strtod_l+0x832>
 801056e:	e5cd      	b.n	801010c <_strtod_l+0x45c>
 8010570:	f04f 33ff 	mov.w	r3, #4294967295
 8010574:	e7e8      	b.n	8010548 <_strtod_l+0x898>
 8010576:	4613      	mov	r3, r2
 8010578:	e7e6      	b.n	8010548 <_strtod_l+0x898>
 801057a:	ea53 030a 	orrs.w	r3, r3, sl
 801057e:	d0a2      	beq.n	80104c6 <_strtod_l+0x816>
 8010580:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010582:	b1db      	cbz	r3, 80105bc <_strtod_l+0x90c>
 8010584:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010586:	4213      	tst	r3, r2
 8010588:	d0ee      	beq.n	8010568 <_strtod_l+0x8b8>
 801058a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801058c:	9a08      	ldr	r2, [sp, #32]
 801058e:	4650      	mov	r0, sl
 8010590:	4659      	mov	r1, fp
 8010592:	b1bb      	cbz	r3, 80105c4 <_strtod_l+0x914>
 8010594:	f7ff fb6e 	bl	800fc74 <sulp>
 8010598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801059c:	ec53 2b10 	vmov	r2, r3, d0
 80105a0:	f7ef fe74 	bl	800028c <__adddf3>
 80105a4:	4682      	mov	sl, r0
 80105a6:	468b      	mov	fp, r1
 80105a8:	e7de      	b.n	8010568 <_strtod_l+0x8b8>
 80105aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80105ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80105b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80105b6:	f04f 3aff 	mov.w	sl, #4294967295
 80105ba:	e7d5      	b.n	8010568 <_strtod_l+0x8b8>
 80105bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105be:	ea13 0f0a 	tst.w	r3, sl
 80105c2:	e7e1      	b.n	8010588 <_strtod_l+0x8d8>
 80105c4:	f7ff fb56 	bl	800fc74 <sulp>
 80105c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105cc:	ec53 2b10 	vmov	r2, r3, d0
 80105d0:	f7ef fe5a 	bl	8000288 <__aeabi_dsub>
 80105d4:	2200      	movs	r2, #0
 80105d6:	2300      	movs	r3, #0
 80105d8:	4682      	mov	sl, r0
 80105da:	468b      	mov	fp, r1
 80105dc:	f7f0 fa74 	bl	8000ac8 <__aeabi_dcmpeq>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	d0c1      	beq.n	8010568 <_strtod_l+0x8b8>
 80105e4:	e61a      	b.n	801021c <_strtod_l+0x56c>
 80105e6:	4641      	mov	r1, r8
 80105e8:	4620      	mov	r0, r4
 80105ea:	f7ff facd 	bl	800fb88 <__ratio>
 80105ee:	ec57 6b10 	vmov	r6, r7, d0
 80105f2:	2200      	movs	r2, #0
 80105f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7f0 fa78 	bl	8000af0 <__aeabi_dcmple>
 8010600:	2800      	cmp	r0, #0
 8010602:	d06f      	beq.n	80106e4 <_strtod_l+0xa34>
 8010604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d17a      	bne.n	8010700 <_strtod_l+0xa50>
 801060a:	f1ba 0f00 	cmp.w	sl, #0
 801060e:	d158      	bne.n	80106c2 <_strtod_l+0xa12>
 8010610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010616:	2b00      	cmp	r3, #0
 8010618:	d15a      	bne.n	80106d0 <_strtod_l+0xa20>
 801061a:	4b64      	ldr	r3, [pc, #400]	@ (80107ac <_strtod_l+0xafc>)
 801061c:	2200      	movs	r2, #0
 801061e:	4630      	mov	r0, r6
 8010620:	4639      	mov	r1, r7
 8010622:	f7f0 fa5b 	bl	8000adc <__aeabi_dcmplt>
 8010626:	2800      	cmp	r0, #0
 8010628:	d159      	bne.n	80106de <_strtod_l+0xa2e>
 801062a:	4630      	mov	r0, r6
 801062c:	4639      	mov	r1, r7
 801062e:	4b60      	ldr	r3, [pc, #384]	@ (80107b0 <_strtod_l+0xb00>)
 8010630:	2200      	movs	r2, #0
 8010632:	f7ef ffe1 	bl	80005f8 <__aeabi_dmul>
 8010636:	4606      	mov	r6, r0
 8010638:	460f      	mov	r7, r1
 801063a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801063e:	9606      	str	r6, [sp, #24]
 8010640:	9307      	str	r3, [sp, #28]
 8010642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010646:	4d57      	ldr	r5, [pc, #348]	@ (80107a4 <_strtod_l+0xaf4>)
 8010648:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801064c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801064e:	401d      	ands	r5, r3
 8010650:	4b58      	ldr	r3, [pc, #352]	@ (80107b4 <_strtod_l+0xb04>)
 8010652:	429d      	cmp	r5, r3
 8010654:	f040 80b2 	bne.w	80107bc <_strtod_l+0xb0c>
 8010658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801065a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801065e:	ec4b ab10 	vmov	d0, sl, fp
 8010662:	f7ff f9c9 	bl	800f9f8 <__ulp>
 8010666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801066a:	ec51 0b10 	vmov	r0, r1, d0
 801066e:	f7ef ffc3 	bl	80005f8 <__aeabi_dmul>
 8010672:	4652      	mov	r2, sl
 8010674:	465b      	mov	r3, fp
 8010676:	f7ef fe09 	bl	800028c <__adddf3>
 801067a:	460b      	mov	r3, r1
 801067c:	4949      	ldr	r1, [pc, #292]	@ (80107a4 <_strtod_l+0xaf4>)
 801067e:	4a4e      	ldr	r2, [pc, #312]	@ (80107b8 <_strtod_l+0xb08>)
 8010680:	4019      	ands	r1, r3
 8010682:	4291      	cmp	r1, r2
 8010684:	4682      	mov	sl, r0
 8010686:	d942      	bls.n	801070e <_strtod_l+0xa5e>
 8010688:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801068a:	4b47      	ldr	r3, [pc, #284]	@ (80107a8 <_strtod_l+0xaf8>)
 801068c:	429a      	cmp	r2, r3
 801068e:	d103      	bne.n	8010698 <_strtod_l+0x9e8>
 8010690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010692:	3301      	adds	r3, #1
 8010694:	f43f ad2f 	beq.w	80100f6 <_strtod_l+0x446>
 8010698:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80107a8 <_strtod_l+0xaf8>
 801069c:	f04f 3aff 	mov.w	sl, #4294967295
 80106a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80106a2:	9805      	ldr	r0, [sp, #20]
 80106a4:	f7fe fe7c 	bl	800f3a0 <_Bfree>
 80106a8:	9805      	ldr	r0, [sp, #20]
 80106aa:	4649      	mov	r1, r9
 80106ac:	f7fe fe78 	bl	800f3a0 <_Bfree>
 80106b0:	9805      	ldr	r0, [sp, #20]
 80106b2:	4641      	mov	r1, r8
 80106b4:	f7fe fe74 	bl	800f3a0 <_Bfree>
 80106b8:	9805      	ldr	r0, [sp, #20]
 80106ba:	4621      	mov	r1, r4
 80106bc:	f7fe fe70 	bl	800f3a0 <_Bfree>
 80106c0:	e619      	b.n	80102f6 <_strtod_l+0x646>
 80106c2:	f1ba 0f01 	cmp.w	sl, #1
 80106c6:	d103      	bne.n	80106d0 <_strtod_l+0xa20>
 80106c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f43f ada6 	beq.w	801021c <_strtod_l+0x56c>
 80106d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010780 <_strtod_l+0xad0>
 80106d4:	4f35      	ldr	r7, [pc, #212]	@ (80107ac <_strtod_l+0xafc>)
 80106d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106da:	2600      	movs	r6, #0
 80106dc:	e7b1      	b.n	8010642 <_strtod_l+0x992>
 80106de:	4f34      	ldr	r7, [pc, #208]	@ (80107b0 <_strtod_l+0xb00>)
 80106e0:	2600      	movs	r6, #0
 80106e2:	e7aa      	b.n	801063a <_strtod_l+0x98a>
 80106e4:	4b32      	ldr	r3, [pc, #200]	@ (80107b0 <_strtod_l+0xb00>)
 80106e6:	4630      	mov	r0, r6
 80106e8:	4639      	mov	r1, r7
 80106ea:	2200      	movs	r2, #0
 80106ec:	f7ef ff84 	bl	80005f8 <__aeabi_dmul>
 80106f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106f2:	4606      	mov	r6, r0
 80106f4:	460f      	mov	r7, r1
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d09f      	beq.n	801063a <_strtod_l+0x98a>
 80106fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80106fe:	e7a0      	b.n	8010642 <_strtod_l+0x992>
 8010700:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010788 <_strtod_l+0xad8>
 8010704:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010708:	ec57 6b17 	vmov	r6, r7, d7
 801070c:	e799      	b.n	8010642 <_strtod_l+0x992>
 801070e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010712:	9b08      	ldr	r3, [sp, #32]
 8010714:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1c1      	bne.n	80106a0 <_strtod_l+0x9f0>
 801071c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010720:	0d1b      	lsrs	r3, r3, #20
 8010722:	051b      	lsls	r3, r3, #20
 8010724:	429d      	cmp	r5, r3
 8010726:	d1bb      	bne.n	80106a0 <_strtod_l+0x9f0>
 8010728:	4630      	mov	r0, r6
 801072a:	4639      	mov	r1, r7
 801072c:	f7f0 fac4 	bl	8000cb8 <__aeabi_d2lz>
 8010730:	f7ef ff34 	bl	800059c <__aeabi_l2d>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4630      	mov	r0, r6
 801073a:	4639      	mov	r1, r7
 801073c:	f7ef fda4 	bl	8000288 <__aeabi_dsub>
 8010740:	460b      	mov	r3, r1
 8010742:	4602      	mov	r2, r0
 8010744:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010748:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801074c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801074e:	ea46 060a 	orr.w	r6, r6, sl
 8010752:	431e      	orrs	r6, r3
 8010754:	d06f      	beq.n	8010836 <_strtod_l+0xb86>
 8010756:	a30e      	add	r3, pc, #56	@ (adr r3, 8010790 <_strtod_l+0xae0>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	f7f0 f9be 	bl	8000adc <__aeabi_dcmplt>
 8010760:	2800      	cmp	r0, #0
 8010762:	f47f acd3 	bne.w	801010c <_strtod_l+0x45c>
 8010766:	a30c      	add	r3, pc, #48	@ (adr r3, 8010798 <_strtod_l+0xae8>)
 8010768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010770:	f7f0 f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 8010774:	2800      	cmp	r0, #0
 8010776:	d093      	beq.n	80106a0 <_strtod_l+0x9f0>
 8010778:	e4c8      	b.n	801010c <_strtod_l+0x45c>
 801077a:	bf00      	nop
 801077c:	f3af 8000 	nop.w
 8010780:	00000000 	.word	0x00000000
 8010784:	bff00000 	.word	0xbff00000
 8010788:	00000000 	.word	0x00000000
 801078c:	3ff00000 	.word	0x3ff00000
 8010790:	94a03595 	.word	0x94a03595
 8010794:	3fdfffff 	.word	0x3fdfffff
 8010798:	35afe535 	.word	0x35afe535
 801079c:	3fe00000 	.word	0x3fe00000
 80107a0:	000fffff 	.word	0x000fffff
 80107a4:	7ff00000 	.word	0x7ff00000
 80107a8:	7fefffff 	.word	0x7fefffff
 80107ac:	3ff00000 	.word	0x3ff00000
 80107b0:	3fe00000 	.word	0x3fe00000
 80107b4:	7fe00000 	.word	0x7fe00000
 80107b8:	7c9fffff 	.word	0x7c9fffff
 80107bc:	9b08      	ldr	r3, [sp, #32]
 80107be:	b323      	cbz	r3, 801080a <_strtod_l+0xb5a>
 80107c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80107c4:	d821      	bhi.n	801080a <_strtod_l+0xb5a>
 80107c6:	a328      	add	r3, pc, #160	@ (adr r3, 8010868 <_strtod_l+0xbb8>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	4630      	mov	r0, r6
 80107ce:	4639      	mov	r1, r7
 80107d0:	f7f0 f98e 	bl	8000af0 <__aeabi_dcmple>
 80107d4:	b1a0      	cbz	r0, 8010800 <_strtod_l+0xb50>
 80107d6:	4639      	mov	r1, r7
 80107d8:	4630      	mov	r0, r6
 80107da:	f7f0 f9e5 	bl	8000ba8 <__aeabi_d2uiz>
 80107de:	2801      	cmp	r0, #1
 80107e0:	bf38      	it	cc
 80107e2:	2001      	movcc	r0, #1
 80107e4:	f7ef fe8e 	bl	8000504 <__aeabi_ui2d>
 80107e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107ea:	4606      	mov	r6, r0
 80107ec:	460f      	mov	r7, r1
 80107ee:	b9fb      	cbnz	r3, 8010830 <_strtod_l+0xb80>
 80107f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80107f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80107f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80107f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80107fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010800:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010802:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010806:	1b5b      	subs	r3, r3, r5
 8010808:	9311      	str	r3, [sp, #68]	@ 0x44
 801080a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801080e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010812:	f7ff f8f1 	bl	800f9f8 <__ulp>
 8010816:	4650      	mov	r0, sl
 8010818:	ec53 2b10 	vmov	r2, r3, d0
 801081c:	4659      	mov	r1, fp
 801081e:	f7ef feeb 	bl	80005f8 <__aeabi_dmul>
 8010822:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010826:	f7ef fd31 	bl	800028c <__adddf3>
 801082a:	4682      	mov	sl, r0
 801082c:	468b      	mov	fp, r1
 801082e:	e770      	b.n	8010712 <_strtod_l+0xa62>
 8010830:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010834:	e7e0      	b.n	80107f8 <_strtod_l+0xb48>
 8010836:	a30e      	add	r3, pc, #56	@ (adr r3, 8010870 <_strtod_l+0xbc0>)
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	f7f0 f94e 	bl	8000adc <__aeabi_dcmplt>
 8010840:	e798      	b.n	8010774 <_strtod_l+0xac4>
 8010842:	2300      	movs	r3, #0
 8010844:	930e      	str	r3, [sp, #56]	@ 0x38
 8010846:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801084a:	6013      	str	r3, [r2, #0]
 801084c:	f7ff ba6d 	b.w	800fd2a <_strtod_l+0x7a>
 8010850:	2a65      	cmp	r2, #101	@ 0x65
 8010852:	f43f ab68 	beq.w	800ff26 <_strtod_l+0x276>
 8010856:	2a45      	cmp	r2, #69	@ 0x45
 8010858:	f43f ab65 	beq.w	800ff26 <_strtod_l+0x276>
 801085c:	2301      	movs	r3, #1
 801085e:	f7ff bba0 	b.w	800ffa2 <_strtod_l+0x2f2>
 8010862:	bf00      	nop
 8010864:	f3af 8000 	nop.w
 8010868:	ffc00000 	.word	0xffc00000
 801086c:	41dfffff 	.word	0x41dfffff
 8010870:	94a03595 	.word	0x94a03595
 8010874:	3fcfffff 	.word	0x3fcfffff

08010878 <_strtod_r>:
 8010878:	4b01      	ldr	r3, [pc, #4]	@ (8010880 <_strtod_r+0x8>)
 801087a:	f7ff ba19 	b.w	800fcb0 <_strtod_l>
 801087e:	bf00      	nop
 8010880:	200000b0 	.word	0x200000b0

08010884 <_strtol_l.isra.0>:
 8010884:	2b24      	cmp	r3, #36	@ 0x24
 8010886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801088a:	4686      	mov	lr, r0
 801088c:	4690      	mov	r8, r2
 801088e:	d801      	bhi.n	8010894 <_strtol_l.isra.0+0x10>
 8010890:	2b01      	cmp	r3, #1
 8010892:	d106      	bne.n	80108a2 <_strtol_l.isra.0+0x1e>
 8010894:	f7fd fd8a 	bl	800e3ac <__errno>
 8010898:	2316      	movs	r3, #22
 801089a:	6003      	str	r3, [r0, #0]
 801089c:	2000      	movs	r0, #0
 801089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108a2:	4834      	ldr	r0, [pc, #208]	@ (8010974 <_strtol_l.isra.0+0xf0>)
 80108a4:	460d      	mov	r5, r1
 80108a6:	462a      	mov	r2, r5
 80108a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108ac:	5d06      	ldrb	r6, [r0, r4]
 80108ae:	f016 0608 	ands.w	r6, r6, #8
 80108b2:	d1f8      	bne.n	80108a6 <_strtol_l.isra.0+0x22>
 80108b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80108b6:	d110      	bne.n	80108da <_strtol_l.isra.0+0x56>
 80108b8:	782c      	ldrb	r4, [r5, #0]
 80108ba:	2601      	movs	r6, #1
 80108bc:	1c95      	adds	r5, r2, #2
 80108be:	f033 0210 	bics.w	r2, r3, #16
 80108c2:	d115      	bne.n	80108f0 <_strtol_l.isra.0+0x6c>
 80108c4:	2c30      	cmp	r4, #48	@ 0x30
 80108c6:	d10d      	bne.n	80108e4 <_strtol_l.isra.0+0x60>
 80108c8:	782a      	ldrb	r2, [r5, #0]
 80108ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80108ce:	2a58      	cmp	r2, #88	@ 0x58
 80108d0:	d108      	bne.n	80108e4 <_strtol_l.isra.0+0x60>
 80108d2:	786c      	ldrb	r4, [r5, #1]
 80108d4:	3502      	adds	r5, #2
 80108d6:	2310      	movs	r3, #16
 80108d8:	e00a      	b.n	80108f0 <_strtol_l.isra.0+0x6c>
 80108da:	2c2b      	cmp	r4, #43	@ 0x2b
 80108dc:	bf04      	itt	eq
 80108de:	782c      	ldrbeq	r4, [r5, #0]
 80108e0:	1c95      	addeq	r5, r2, #2
 80108e2:	e7ec      	b.n	80108be <_strtol_l.isra.0+0x3a>
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d1f6      	bne.n	80108d6 <_strtol_l.isra.0+0x52>
 80108e8:	2c30      	cmp	r4, #48	@ 0x30
 80108ea:	bf14      	ite	ne
 80108ec:	230a      	movne	r3, #10
 80108ee:	2308      	moveq	r3, #8
 80108f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80108f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80108f8:	2200      	movs	r2, #0
 80108fa:	fbbc f9f3 	udiv	r9, ip, r3
 80108fe:	4610      	mov	r0, r2
 8010900:	fb03 ca19 	mls	sl, r3, r9, ip
 8010904:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010908:	2f09      	cmp	r7, #9
 801090a:	d80f      	bhi.n	801092c <_strtol_l.isra.0+0xa8>
 801090c:	463c      	mov	r4, r7
 801090e:	42a3      	cmp	r3, r4
 8010910:	dd1b      	ble.n	801094a <_strtol_l.isra.0+0xc6>
 8010912:	1c57      	adds	r7, r2, #1
 8010914:	d007      	beq.n	8010926 <_strtol_l.isra.0+0xa2>
 8010916:	4581      	cmp	r9, r0
 8010918:	d314      	bcc.n	8010944 <_strtol_l.isra.0+0xc0>
 801091a:	d101      	bne.n	8010920 <_strtol_l.isra.0+0x9c>
 801091c:	45a2      	cmp	sl, r4
 801091e:	db11      	blt.n	8010944 <_strtol_l.isra.0+0xc0>
 8010920:	fb00 4003 	mla	r0, r0, r3, r4
 8010924:	2201      	movs	r2, #1
 8010926:	f815 4b01 	ldrb.w	r4, [r5], #1
 801092a:	e7eb      	b.n	8010904 <_strtol_l.isra.0+0x80>
 801092c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010930:	2f19      	cmp	r7, #25
 8010932:	d801      	bhi.n	8010938 <_strtol_l.isra.0+0xb4>
 8010934:	3c37      	subs	r4, #55	@ 0x37
 8010936:	e7ea      	b.n	801090e <_strtol_l.isra.0+0x8a>
 8010938:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801093c:	2f19      	cmp	r7, #25
 801093e:	d804      	bhi.n	801094a <_strtol_l.isra.0+0xc6>
 8010940:	3c57      	subs	r4, #87	@ 0x57
 8010942:	e7e4      	b.n	801090e <_strtol_l.isra.0+0x8a>
 8010944:	f04f 32ff 	mov.w	r2, #4294967295
 8010948:	e7ed      	b.n	8010926 <_strtol_l.isra.0+0xa2>
 801094a:	1c53      	adds	r3, r2, #1
 801094c:	d108      	bne.n	8010960 <_strtol_l.isra.0+0xdc>
 801094e:	2322      	movs	r3, #34	@ 0x22
 8010950:	f8ce 3000 	str.w	r3, [lr]
 8010954:	4660      	mov	r0, ip
 8010956:	f1b8 0f00 	cmp.w	r8, #0
 801095a:	d0a0      	beq.n	801089e <_strtol_l.isra.0+0x1a>
 801095c:	1e69      	subs	r1, r5, #1
 801095e:	e006      	b.n	801096e <_strtol_l.isra.0+0xea>
 8010960:	b106      	cbz	r6, 8010964 <_strtol_l.isra.0+0xe0>
 8010962:	4240      	negs	r0, r0
 8010964:	f1b8 0f00 	cmp.w	r8, #0
 8010968:	d099      	beq.n	801089e <_strtol_l.isra.0+0x1a>
 801096a:	2a00      	cmp	r2, #0
 801096c:	d1f6      	bne.n	801095c <_strtol_l.isra.0+0xd8>
 801096e:	f8c8 1000 	str.w	r1, [r8]
 8010972:	e794      	b.n	801089e <_strtol_l.isra.0+0x1a>
 8010974:	08012639 	.word	0x08012639

08010978 <_strtol_r>:
 8010978:	f7ff bf84 	b.w	8010884 <_strtol_l.isra.0>

0801097c <__ssputs_r>:
 801097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010980:	688e      	ldr	r6, [r1, #8]
 8010982:	461f      	mov	r7, r3
 8010984:	42be      	cmp	r6, r7
 8010986:	680b      	ldr	r3, [r1, #0]
 8010988:	4682      	mov	sl, r0
 801098a:	460c      	mov	r4, r1
 801098c:	4690      	mov	r8, r2
 801098e:	d82d      	bhi.n	80109ec <__ssputs_r+0x70>
 8010990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010994:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010998:	d026      	beq.n	80109e8 <__ssputs_r+0x6c>
 801099a:	6965      	ldr	r5, [r4, #20]
 801099c:	6909      	ldr	r1, [r1, #16]
 801099e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109a2:	eba3 0901 	sub.w	r9, r3, r1
 80109a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109aa:	1c7b      	adds	r3, r7, #1
 80109ac:	444b      	add	r3, r9
 80109ae:	106d      	asrs	r5, r5, #1
 80109b0:	429d      	cmp	r5, r3
 80109b2:	bf38      	it	cc
 80109b4:	461d      	movcc	r5, r3
 80109b6:	0553      	lsls	r3, r2, #21
 80109b8:	d527      	bpl.n	8010a0a <__ssputs_r+0x8e>
 80109ba:	4629      	mov	r1, r5
 80109bc:	f7fe fc24 	bl	800f208 <_malloc_r>
 80109c0:	4606      	mov	r6, r0
 80109c2:	b360      	cbz	r0, 8010a1e <__ssputs_r+0xa2>
 80109c4:	6921      	ldr	r1, [r4, #16]
 80109c6:	464a      	mov	r2, r9
 80109c8:	f7fd fd1d 	bl	800e406 <memcpy>
 80109cc:	89a3      	ldrh	r3, [r4, #12]
 80109ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80109d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109d6:	81a3      	strh	r3, [r4, #12]
 80109d8:	6126      	str	r6, [r4, #16]
 80109da:	6165      	str	r5, [r4, #20]
 80109dc:	444e      	add	r6, r9
 80109de:	eba5 0509 	sub.w	r5, r5, r9
 80109e2:	6026      	str	r6, [r4, #0]
 80109e4:	60a5      	str	r5, [r4, #8]
 80109e6:	463e      	mov	r6, r7
 80109e8:	42be      	cmp	r6, r7
 80109ea:	d900      	bls.n	80109ee <__ssputs_r+0x72>
 80109ec:	463e      	mov	r6, r7
 80109ee:	6820      	ldr	r0, [r4, #0]
 80109f0:	4632      	mov	r2, r6
 80109f2:	4641      	mov	r1, r8
 80109f4:	f000 fb7c 	bl	80110f0 <memmove>
 80109f8:	68a3      	ldr	r3, [r4, #8]
 80109fa:	1b9b      	subs	r3, r3, r6
 80109fc:	60a3      	str	r3, [r4, #8]
 80109fe:	6823      	ldr	r3, [r4, #0]
 8010a00:	4433      	add	r3, r6
 8010a02:	6023      	str	r3, [r4, #0]
 8010a04:	2000      	movs	r0, #0
 8010a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a0a:	462a      	mov	r2, r5
 8010a0c:	f000 ff29 	bl	8011862 <_realloc_r>
 8010a10:	4606      	mov	r6, r0
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d1e0      	bne.n	80109d8 <__ssputs_r+0x5c>
 8010a16:	6921      	ldr	r1, [r4, #16]
 8010a18:	4650      	mov	r0, sl
 8010a1a:	f7fe fb81 	bl	800f120 <_free_r>
 8010a1e:	230c      	movs	r3, #12
 8010a20:	f8ca 3000 	str.w	r3, [sl]
 8010a24:	89a3      	ldrh	r3, [r4, #12]
 8010a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a2a:	81a3      	strh	r3, [r4, #12]
 8010a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a30:	e7e9      	b.n	8010a06 <__ssputs_r+0x8a>
	...

08010a34 <_svfiprintf_r>:
 8010a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a38:	4698      	mov	r8, r3
 8010a3a:	898b      	ldrh	r3, [r1, #12]
 8010a3c:	061b      	lsls	r3, r3, #24
 8010a3e:	b09d      	sub	sp, #116	@ 0x74
 8010a40:	4607      	mov	r7, r0
 8010a42:	460d      	mov	r5, r1
 8010a44:	4614      	mov	r4, r2
 8010a46:	d510      	bpl.n	8010a6a <_svfiprintf_r+0x36>
 8010a48:	690b      	ldr	r3, [r1, #16]
 8010a4a:	b973      	cbnz	r3, 8010a6a <_svfiprintf_r+0x36>
 8010a4c:	2140      	movs	r1, #64	@ 0x40
 8010a4e:	f7fe fbdb 	bl	800f208 <_malloc_r>
 8010a52:	6028      	str	r0, [r5, #0]
 8010a54:	6128      	str	r0, [r5, #16]
 8010a56:	b930      	cbnz	r0, 8010a66 <_svfiprintf_r+0x32>
 8010a58:	230c      	movs	r3, #12
 8010a5a:	603b      	str	r3, [r7, #0]
 8010a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a60:	b01d      	add	sp, #116	@ 0x74
 8010a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a66:	2340      	movs	r3, #64	@ 0x40
 8010a68:	616b      	str	r3, [r5, #20]
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a6e:	2320      	movs	r3, #32
 8010a70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a78:	2330      	movs	r3, #48	@ 0x30
 8010a7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010c18 <_svfiprintf_r+0x1e4>
 8010a7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a82:	f04f 0901 	mov.w	r9, #1
 8010a86:	4623      	mov	r3, r4
 8010a88:	469a      	mov	sl, r3
 8010a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a8e:	b10a      	cbz	r2, 8010a94 <_svfiprintf_r+0x60>
 8010a90:	2a25      	cmp	r2, #37	@ 0x25
 8010a92:	d1f9      	bne.n	8010a88 <_svfiprintf_r+0x54>
 8010a94:	ebba 0b04 	subs.w	fp, sl, r4
 8010a98:	d00b      	beq.n	8010ab2 <_svfiprintf_r+0x7e>
 8010a9a:	465b      	mov	r3, fp
 8010a9c:	4622      	mov	r2, r4
 8010a9e:	4629      	mov	r1, r5
 8010aa0:	4638      	mov	r0, r7
 8010aa2:	f7ff ff6b 	bl	801097c <__ssputs_r>
 8010aa6:	3001      	adds	r0, #1
 8010aa8:	f000 80a7 	beq.w	8010bfa <_svfiprintf_r+0x1c6>
 8010aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010aae:	445a      	add	r2, fp
 8010ab0:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	f000 809f 	beq.w	8010bfa <_svfiprintf_r+0x1c6>
 8010abc:	2300      	movs	r3, #0
 8010abe:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ac6:	f10a 0a01 	add.w	sl, sl, #1
 8010aca:	9304      	str	r3, [sp, #16]
 8010acc:	9307      	str	r3, [sp, #28]
 8010ace:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ad2:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ad4:	4654      	mov	r4, sl
 8010ad6:	2205      	movs	r2, #5
 8010ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010adc:	484e      	ldr	r0, [pc, #312]	@ (8010c18 <_svfiprintf_r+0x1e4>)
 8010ade:	f7ef fb77 	bl	80001d0 <memchr>
 8010ae2:	9a04      	ldr	r2, [sp, #16]
 8010ae4:	b9d8      	cbnz	r0, 8010b1e <_svfiprintf_r+0xea>
 8010ae6:	06d0      	lsls	r0, r2, #27
 8010ae8:	bf44      	itt	mi
 8010aea:	2320      	movmi	r3, #32
 8010aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010af0:	0711      	lsls	r1, r2, #28
 8010af2:	bf44      	itt	mi
 8010af4:	232b      	movmi	r3, #43	@ 0x2b
 8010af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010afa:	f89a 3000 	ldrb.w	r3, [sl]
 8010afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b00:	d015      	beq.n	8010b2e <_svfiprintf_r+0xfa>
 8010b02:	9a07      	ldr	r2, [sp, #28]
 8010b04:	4654      	mov	r4, sl
 8010b06:	2000      	movs	r0, #0
 8010b08:	f04f 0c0a 	mov.w	ip, #10
 8010b0c:	4621      	mov	r1, r4
 8010b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b12:	3b30      	subs	r3, #48	@ 0x30
 8010b14:	2b09      	cmp	r3, #9
 8010b16:	d94b      	bls.n	8010bb0 <_svfiprintf_r+0x17c>
 8010b18:	b1b0      	cbz	r0, 8010b48 <_svfiprintf_r+0x114>
 8010b1a:	9207      	str	r2, [sp, #28]
 8010b1c:	e014      	b.n	8010b48 <_svfiprintf_r+0x114>
 8010b1e:	eba0 0308 	sub.w	r3, r0, r8
 8010b22:	fa09 f303 	lsl.w	r3, r9, r3
 8010b26:	4313      	orrs	r3, r2
 8010b28:	9304      	str	r3, [sp, #16]
 8010b2a:	46a2      	mov	sl, r4
 8010b2c:	e7d2      	b.n	8010ad4 <_svfiprintf_r+0xa0>
 8010b2e:	9b03      	ldr	r3, [sp, #12]
 8010b30:	1d19      	adds	r1, r3, #4
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	9103      	str	r1, [sp, #12]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	bfbb      	ittet	lt
 8010b3a:	425b      	neglt	r3, r3
 8010b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8010b40:	9307      	strge	r3, [sp, #28]
 8010b42:	9307      	strlt	r3, [sp, #28]
 8010b44:	bfb8      	it	lt
 8010b46:	9204      	strlt	r2, [sp, #16]
 8010b48:	7823      	ldrb	r3, [r4, #0]
 8010b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b4c:	d10a      	bne.n	8010b64 <_svfiprintf_r+0x130>
 8010b4e:	7863      	ldrb	r3, [r4, #1]
 8010b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b52:	d132      	bne.n	8010bba <_svfiprintf_r+0x186>
 8010b54:	9b03      	ldr	r3, [sp, #12]
 8010b56:	1d1a      	adds	r2, r3, #4
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	9203      	str	r2, [sp, #12]
 8010b5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b60:	3402      	adds	r4, #2
 8010b62:	9305      	str	r3, [sp, #20]
 8010b64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010c28 <_svfiprintf_r+0x1f4>
 8010b68:	7821      	ldrb	r1, [r4, #0]
 8010b6a:	2203      	movs	r2, #3
 8010b6c:	4650      	mov	r0, sl
 8010b6e:	f7ef fb2f 	bl	80001d0 <memchr>
 8010b72:	b138      	cbz	r0, 8010b84 <_svfiprintf_r+0x150>
 8010b74:	9b04      	ldr	r3, [sp, #16]
 8010b76:	eba0 000a 	sub.w	r0, r0, sl
 8010b7a:	2240      	movs	r2, #64	@ 0x40
 8010b7c:	4082      	lsls	r2, r0
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	3401      	adds	r4, #1
 8010b82:	9304      	str	r3, [sp, #16]
 8010b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b88:	4824      	ldr	r0, [pc, #144]	@ (8010c1c <_svfiprintf_r+0x1e8>)
 8010b8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b8e:	2206      	movs	r2, #6
 8010b90:	f7ef fb1e 	bl	80001d0 <memchr>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d036      	beq.n	8010c06 <_svfiprintf_r+0x1d2>
 8010b98:	4b21      	ldr	r3, [pc, #132]	@ (8010c20 <_svfiprintf_r+0x1ec>)
 8010b9a:	bb1b      	cbnz	r3, 8010be4 <_svfiprintf_r+0x1b0>
 8010b9c:	9b03      	ldr	r3, [sp, #12]
 8010b9e:	3307      	adds	r3, #7
 8010ba0:	f023 0307 	bic.w	r3, r3, #7
 8010ba4:	3308      	adds	r3, #8
 8010ba6:	9303      	str	r3, [sp, #12]
 8010ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010baa:	4433      	add	r3, r6
 8010bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bae:	e76a      	b.n	8010a86 <_svfiprintf_r+0x52>
 8010bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	2001      	movs	r0, #1
 8010bb8:	e7a8      	b.n	8010b0c <_svfiprintf_r+0xd8>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	3401      	adds	r4, #1
 8010bbe:	9305      	str	r3, [sp, #20]
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	f04f 0c0a 	mov.w	ip, #10
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bcc:	3a30      	subs	r2, #48	@ 0x30
 8010bce:	2a09      	cmp	r2, #9
 8010bd0:	d903      	bls.n	8010bda <_svfiprintf_r+0x1a6>
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d0c6      	beq.n	8010b64 <_svfiprintf_r+0x130>
 8010bd6:	9105      	str	r1, [sp, #20]
 8010bd8:	e7c4      	b.n	8010b64 <_svfiprintf_r+0x130>
 8010bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bde:	4604      	mov	r4, r0
 8010be0:	2301      	movs	r3, #1
 8010be2:	e7f0      	b.n	8010bc6 <_svfiprintf_r+0x192>
 8010be4:	ab03      	add	r3, sp, #12
 8010be6:	9300      	str	r3, [sp, #0]
 8010be8:	462a      	mov	r2, r5
 8010bea:	4b0e      	ldr	r3, [pc, #56]	@ (8010c24 <_svfiprintf_r+0x1f0>)
 8010bec:	a904      	add	r1, sp, #16
 8010bee:	4638      	mov	r0, r7
 8010bf0:	f7fc fb02 	bl	800d1f8 <_printf_float>
 8010bf4:	1c42      	adds	r2, r0, #1
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	d1d6      	bne.n	8010ba8 <_svfiprintf_r+0x174>
 8010bfa:	89ab      	ldrh	r3, [r5, #12]
 8010bfc:	065b      	lsls	r3, r3, #25
 8010bfe:	f53f af2d 	bmi.w	8010a5c <_svfiprintf_r+0x28>
 8010c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c04:	e72c      	b.n	8010a60 <_svfiprintf_r+0x2c>
 8010c06:	ab03      	add	r3, sp, #12
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	462a      	mov	r2, r5
 8010c0c:	4b05      	ldr	r3, [pc, #20]	@ (8010c24 <_svfiprintf_r+0x1f0>)
 8010c0e:	a904      	add	r1, sp, #16
 8010c10:	4638      	mov	r0, r7
 8010c12:	f7fc fd89 	bl	800d728 <_printf_i>
 8010c16:	e7ed      	b.n	8010bf4 <_svfiprintf_r+0x1c0>
 8010c18:	08012473 	.word	0x08012473
 8010c1c:	0801247d 	.word	0x0801247d
 8010c20:	0800d1f9 	.word	0x0800d1f9
 8010c24:	0801097d 	.word	0x0801097d
 8010c28:	08012479 	.word	0x08012479

08010c2c <__sfputc_r>:
 8010c2c:	6893      	ldr	r3, [r2, #8]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	b410      	push	{r4}
 8010c34:	6093      	str	r3, [r2, #8]
 8010c36:	da08      	bge.n	8010c4a <__sfputc_r+0x1e>
 8010c38:	6994      	ldr	r4, [r2, #24]
 8010c3a:	42a3      	cmp	r3, r4
 8010c3c:	db01      	blt.n	8010c42 <__sfputc_r+0x16>
 8010c3e:	290a      	cmp	r1, #10
 8010c40:	d103      	bne.n	8010c4a <__sfputc_r+0x1e>
 8010c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c46:	f7fd ba32 	b.w	800e0ae <__swbuf_r>
 8010c4a:	6813      	ldr	r3, [r2, #0]
 8010c4c:	1c58      	adds	r0, r3, #1
 8010c4e:	6010      	str	r0, [r2, #0]
 8010c50:	7019      	strb	r1, [r3, #0]
 8010c52:	4608      	mov	r0, r1
 8010c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <__sfputs_r>:
 8010c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5c:	4606      	mov	r6, r0
 8010c5e:	460f      	mov	r7, r1
 8010c60:	4614      	mov	r4, r2
 8010c62:	18d5      	adds	r5, r2, r3
 8010c64:	42ac      	cmp	r4, r5
 8010c66:	d101      	bne.n	8010c6c <__sfputs_r+0x12>
 8010c68:	2000      	movs	r0, #0
 8010c6a:	e007      	b.n	8010c7c <__sfputs_r+0x22>
 8010c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c70:	463a      	mov	r2, r7
 8010c72:	4630      	mov	r0, r6
 8010c74:	f7ff ffda 	bl	8010c2c <__sfputc_r>
 8010c78:	1c43      	adds	r3, r0, #1
 8010c7a:	d1f3      	bne.n	8010c64 <__sfputs_r+0xa>
 8010c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c80 <_vfiprintf_r>:
 8010c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c84:	460d      	mov	r5, r1
 8010c86:	b09d      	sub	sp, #116	@ 0x74
 8010c88:	4614      	mov	r4, r2
 8010c8a:	4698      	mov	r8, r3
 8010c8c:	4606      	mov	r6, r0
 8010c8e:	b118      	cbz	r0, 8010c98 <_vfiprintf_r+0x18>
 8010c90:	6a03      	ldr	r3, [r0, #32]
 8010c92:	b90b      	cbnz	r3, 8010c98 <_vfiprintf_r+0x18>
 8010c94:	f7fd f900 	bl	800de98 <__sinit>
 8010c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c9a:	07d9      	lsls	r1, r3, #31
 8010c9c:	d405      	bmi.n	8010caa <_vfiprintf_r+0x2a>
 8010c9e:	89ab      	ldrh	r3, [r5, #12]
 8010ca0:	059a      	lsls	r2, r3, #22
 8010ca2:	d402      	bmi.n	8010caa <_vfiprintf_r+0x2a>
 8010ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ca6:	f7fd fbac 	bl	800e402 <__retarget_lock_acquire_recursive>
 8010caa:	89ab      	ldrh	r3, [r5, #12]
 8010cac:	071b      	lsls	r3, r3, #28
 8010cae:	d501      	bpl.n	8010cb4 <_vfiprintf_r+0x34>
 8010cb0:	692b      	ldr	r3, [r5, #16]
 8010cb2:	b99b      	cbnz	r3, 8010cdc <_vfiprintf_r+0x5c>
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	f7fd fa38 	bl	800e12c <__swsetup_r>
 8010cbc:	b170      	cbz	r0, 8010cdc <_vfiprintf_r+0x5c>
 8010cbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cc0:	07dc      	lsls	r4, r3, #31
 8010cc2:	d504      	bpl.n	8010cce <_vfiprintf_r+0x4e>
 8010cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cc8:	b01d      	add	sp, #116	@ 0x74
 8010cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cce:	89ab      	ldrh	r3, [r5, #12]
 8010cd0:	0598      	lsls	r0, r3, #22
 8010cd2:	d4f7      	bmi.n	8010cc4 <_vfiprintf_r+0x44>
 8010cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cd6:	f7fd fb95 	bl	800e404 <__retarget_lock_release_recursive>
 8010cda:	e7f3      	b.n	8010cc4 <_vfiprintf_r+0x44>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ce0:	2320      	movs	r3, #32
 8010ce2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cea:	2330      	movs	r3, #48	@ 0x30
 8010cec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010e9c <_vfiprintf_r+0x21c>
 8010cf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010cf4:	f04f 0901 	mov.w	r9, #1
 8010cf8:	4623      	mov	r3, r4
 8010cfa:	469a      	mov	sl, r3
 8010cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d00:	b10a      	cbz	r2, 8010d06 <_vfiprintf_r+0x86>
 8010d02:	2a25      	cmp	r2, #37	@ 0x25
 8010d04:	d1f9      	bne.n	8010cfa <_vfiprintf_r+0x7a>
 8010d06:	ebba 0b04 	subs.w	fp, sl, r4
 8010d0a:	d00b      	beq.n	8010d24 <_vfiprintf_r+0xa4>
 8010d0c:	465b      	mov	r3, fp
 8010d0e:	4622      	mov	r2, r4
 8010d10:	4629      	mov	r1, r5
 8010d12:	4630      	mov	r0, r6
 8010d14:	f7ff ffa1 	bl	8010c5a <__sfputs_r>
 8010d18:	3001      	adds	r0, #1
 8010d1a:	f000 80a7 	beq.w	8010e6c <_vfiprintf_r+0x1ec>
 8010d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d20:	445a      	add	r2, fp
 8010d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d24:	f89a 3000 	ldrb.w	r3, [sl]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 809f 	beq.w	8010e6c <_vfiprintf_r+0x1ec>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	f04f 32ff 	mov.w	r2, #4294967295
 8010d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d38:	f10a 0a01 	add.w	sl, sl, #1
 8010d3c:	9304      	str	r3, [sp, #16]
 8010d3e:	9307      	str	r3, [sp, #28]
 8010d40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d44:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d46:	4654      	mov	r4, sl
 8010d48:	2205      	movs	r2, #5
 8010d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d4e:	4853      	ldr	r0, [pc, #332]	@ (8010e9c <_vfiprintf_r+0x21c>)
 8010d50:	f7ef fa3e 	bl	80001d0 <memchr>
 8010d54:	9a04      	ldr	r2, [sp, #16]
 8010d56:	b9d8      	cbnz	r0, 8010d90 <_vfiprintf_r+0x110>
 8010d58:	06d1      	lsls	r1, r2, #27
 8010d5a:	bf44      	itt	mi
 8010d5c:	2320      	movmi	r3, #32
 8010d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d62:	0713      	lsls	r3, r2, #28
 8010d64:	bf44      	itt	mi
 8010d66:	232b      	movmi	r3, #43	@ 0x2b
 8010d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d72:	d015      	beq.n	8010da0 <_vfiprintf_r+0x120>
 8010d74:	9a07      	ldr	r2, [sp, #28]
 8010d76:	4654      	mov	r4, sl
 8010d78:	2000      	movs	r0, #0
 8010d7a:	f04f 0c0a 	mov.w	ip, #10
 8010d7e:	4621      	mov	r1, r4
 8010d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d84:	3b30      	subs	r3, #48	@ 0x30
 8010d86:	2b09      	cmp	r3, #9
 8010d88:	d94b      	bls.n	8010e22 <_vfiprintf_r+0x1a2>
 8010d8a:	b1b0      	cbz	r0, 8010dba <_vfiprintf_r+0x13a>
 8010d8c:	9207      	str	r2, [sp, #28]
 8010d8e:	e014      	b.n	8010dba <_vfiprintf_r+0x13a>
 8010d90:	eba0 0308 	sub.w	r3, r0, r8
 8010d94:	fa09 f303 	lsl.w	r3, r9, r3
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	9304      	str	r3, [sp, #16]
 8010d9c:	46a2      	mov	sl, r4
 8010d9e:	e7d2      	b.n	8010d46 <_vfiprintf_r+0xc6>
 8010da0:	9b03      	ldr	r3, [sp, #12]
 8010da2:	1d19      	adds	r1, r3, #4
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	9103      	str	r1, [sp, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	bfbb      	ittet	lt
 8010dac:	425b      	neglt	r3, r3
 8010dae:	f042 0202 	orrlt.w	r2, r2, #2
 8010db2:	9307      	strge	r3, [sp, #28]
 8010db4:	9307      	strlt	r3, [sp, #28]
 8010db6:	bfb8      	it	lt
 8010db8:	9204      	strlt	r2, [sp, #16]
 8010dba:	7823      	ldrb	r3, [r4, #0]
 8010dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8010dbe:	d10a      	bne.n	8010dd6 <_vfiprintf_r+0x156>
 8010dc0:	7863      	ldrb	r3, [r4, #1]
 8010dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dc4:	d132      	bne.n	8010e2c <_vfiprintf_r+0x1ac>
 8010dc6:	9b03      	ldr	r3, [sp, #12]
 8010dc8:	1d1a      	adds	r2, r3, #4
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	9203      	str	r2, [sp, #12]
 8010dce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010dd2:	3402      	adds	r4, #2
 8010dd4:	9305      	str	r3, [sp, #20]
 8010dd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010eac <_vfiprintf_r+0x22c>
 8010dda:	7821      	ldrb	r1, [r4, #0]
 8010ddc:	2203      	movs	r2, #3
 8010dde:	4650      	mov	r0, sl
 8010de0:	f7ef f9f6 	bl	80001d0 <memchr>
 8010de4:	b138      	cbz	r0, 8010df6 <_vfiprintf_r+0x176>
 8010de6:	9b04      	ldr	r3, [sp, #16]
 8010de8:	eba0 000a 	sub.w	r0, r0, sl
 8010dec:	2240      	movs	r2, #64	@ 0x40
 8010dee:	4082      	lsls	r2, r0
 8010df0:	4313      	orrs	r3, r2
 8010df2:	3401      	adds	r4, #1
 8010df4:	9304      	str	r3, [sp, #16]
 8010df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dfa:	4829      	ldr	r0, [pc, #164]	@ (8010ea0 <_vfiprintf_r+0x220>)
 8010dfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e00:	2206      	movs	r2, #6
 8010e02:	f7ef f9e5 	bl	80001d0 <memchr>
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d03f      	beq.n	8010e8a <_vfiprintf_r+0x20a>
 8010e0a:	4b26      	ldr	r3, [pc, #152]	@ (8010ea4 <_vfiprintf_r+0x224>)
 8010e0c:	bb1b      	cbnz	r3, 8010e56 <_vfiprintf_r+0x1d6>
 8010e0e:	9b03      	ldr	r3, [sp, #12]
 8010e10:	3307      	adds	r3, #7
 8010e12:	f023 0307 	bic.w	r3, r3, #7
 8010e16:	3308      	adds	r3, #8
 8010e18:	9303      	str	r3, [sp, #12]
 8010e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e1c:	443b      	add	r3, r7
 8010e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e20:	e76a      	b.n	8010cf8 <_vfiprintf_r+0x78>
 8010e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e26:	460c      	mov	r4, r1
 8010e28:	2001      	movs	r0, #1
 8010e2a:	e7a8      	b.n	8010d7e <_vfiprintf_r+0xfe>
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	3401      	adds	r4, #1
 8010e30:	9305      	str	r3, [sp, #20]
 8010e32:	4619      	mov	r1, r3
 8010e34:	f04f 0c0a 	mov.w	ip, #10
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e3e:	3a30      	subs	r2, #48	@ 0x30
 8010e40:	2a09      	cmp	r2, #9
 8010e42:	d903      	bls.n	8010e4c <_vfiprintf_r+0x1cc>
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d0c6      	beq.n	8010dd6 <_vfiprintf_r+0x156>
 8010e48:	9105      	str	r1, [sp, #20]
 8010e4a:	e7c4      	b.n	8010dd6 <_vfiprintf_r+0x156>
 8010e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e50:	4604      	mov	r4, r0
 8010e52:	2301      	movs	r3, #1
 8010e54:	e7f0      	b.n	8010e38 <_vfiprintf_r+0x1b8>
 8010e56:	ab03      	add	r3, sp, #12
 8010e58:	9300      	str	r3, [sp, #0]
 8010e5a:	462a      	mov	r2, r5
 8010e5c:	4b12      	ldr	r3, [pc, #72]	@ (8010ea8 <_vfiprintf_r+0x228>)
 8010e5e:	a904      	add	r1, sp, #16
 8010e60:	4630      	mov	r0, r6
 8010e62:	f7fc f9c9 	bl	800d1f8 <_printf_float>
 8010e66:	4607      	mov	r7, r0
 8010e68:	1c78      	adds	r0, r7, #1
 8010e6a:	d1d6      	bne.n	8010e1a <_vfiprintf_r+0x19a>
 8010e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e6e:	07d9      	lsls	r1, r3, #31
 8010e70:	d405      	bmi.n	8010e7e <_vfiprintf_r+0x1fe>
 8010e72:	89ab      	ldrh	r3, [r5, #12]
 8010e74:	059a      	lsls	r2, r3, #22
 8010e76:	d402      	bmi.n	8010e7e <_vfiprintf_r+0x1fe>
 8010e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e7a:	f7fd fac3 	bl	800e404 <__retarget_lock_release_recursive>
 8010e7e:	89ab      	ldrh	r3, [r5, #12]
 8010e80:	065b      	lsls	r3, r3, #25
 8010e82:	f53f af1f 	bmi.w	8010cc4 <_vfiprintf_r+0x44>
 8010e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e88:	e71e      	b.n	8010cc8 <_vfiprintf_r+0x48>
 8010e8a:	ab03      	add	r3, sp, #12
 8010e8c:	9300      	str	r3, [sp, #0]
 8010e8e:	462a      	mov	r2, r5
 8010e90:	4b05      	ldr	r3, [pc, #20]	@ (8010ea8 <_vfiprintf_r+0x228>)
 8010e92:	a904      	add	r1, sp, #16
 8010e94:	4630      	mov	r0, r6
 8010e96:	f7fc fc47 	bl	800d728 <_printf_i>
 8010e9a:	e7e4      	b.n	8010e66 <_vfiprintf_r+0x1e6>
 8010e9c:	08012473 	.word	0x08012473
 8010ea0:	0801247d 	.word	0x0801247d
 8010ea4:	0800d1f9 	.word	0x0800d1f9
 8010ea8:	08010c5b 	.word	0x08010c5b
 8010eac:	08012479 	.word	0x08012479

08010eb0 <__sflush_r>:
 8010eb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb8:	0716      	lsls	r6, r2, #28
 8010eba:	4605      	mov	r5, r0
 8010ebc:	460c      	mov	r4, r1
 8010ebe:	d454      	bmi.n	8010f6a <__sflush_r+0xba>
 8010ec0:	684b      	ldr	r3, [r1, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	dc02      	bgt.n	8010ecc <__sflush_r+0x1c>
 8010ec6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	dd48      	ble.n	8010f5e <__sflush_r+0xae>
 8010ecc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ece:	2e00      	cmp	r6, #0
 8010ed0:	d045      	beq.n	8010f5e <__sflush_r+0xae>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ed8:	682f      	ldr	r7, [r5, #0]
 8010eda:	6a21      	ldr	r1, [r4, #32]
 8010edc:	602b      	str	r3, [r5, #0]
 8010ede:	d030      	beq.n	8010f42 <__sflush_r+0x92>
 8010ee0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010ee2:	89a3      	ldrh	r3, [r4, #12]
 8010ee4:	0759      	lsls	r1, r3, #29
 8010ee6:	d505      	bpl.n	8010ef4 <__sflush_r+0x44>
 8010ee8:	6863      	ldr	r3, [r4, #4]
 8010eea:	1ad2      	subs	r2, r2, r3
 8010eec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010eee:	b10b      	cbz	r3, 8010ef4 <__sflush_r+0x44>
 8010ef0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ef2:	1ad2      	subs	r2, r2, r3
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ef8:	6a21      	ldr	r1, [r4, #32]
 8010efa:	4628      	mov	r0, r5
 8010efc:	47b0      	blx	r6
 8010efe:	1c43      	adds	r3, r0, #1
 8010f00:	89a3      	ldrh	r3, [r4, #12]
 8010f02:	d106      	bne.n	8010f12 <__sflush_r+0x62>
 8010f04:	6829      	ldr	r1, [r5, #0]
 8010f06:	291d      	cmp	r1, #29
 8010f08:	d82b      	bhi.n	8010f62 <__sflush_r+0xb2>
 8010f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8010fb4 <__sflush_r+0x104>)
 8010f0c:	40ca      	lsrs	r2, r1
 8010f0e:	07d6      	lsls	r6, r2, #31
 8010f10:	d527      	bpl.n	8010f62 <__sflush_r+0xb2>
 8010f12:	2200      	movs	r2, #0
 8010f14:	6062      	str	r2, [r4, #4]
 8010f16:	04d9      	lsls	r1, r3, #19
 8010f18:	6922      	ldr	r2, [r4, #16]
 8010f1a:	6022      	str	r2, [r4, #0]
 8010f1c:	d504      	bpl.n	8010f28 <__sflush_r+0x78>
 8010f1e:	1c42      	adds	r2, r0, #1
 8010f20:	d101      	bne.n	8010f26 <__sflush_r+0x76>
 8010f22:	682b      	ldr	r3, [r5, #0]
 8010f24:	b903      	cbnz	r3, 8010f28 <__sflush_r+0x78>
 8010f26:	6560      	str	r0, [r4, #84]	@ 0x54
 8010f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f2a:	602f      	str	r7, [r5, #0]
 8010f2c:	b1b9      	cbz	r1, 8010f5e <__sflush_r+0xae>
 8010f2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f32:	4299      	cmp	r1, r3
 8010f34:	d002      	beq.n	8010f3c <__sflush_r+0x8c>
 8010f36:	4628      	mov	r0, r5
 8010f38:	f7fe f8f2 	bl	800f120 <_free_r>
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f40:	e00d      	b.n	8010f5e <__sflush_r+0xae>
 8010f42:	2301      	movs	r3, #1
 8010f44:	4628      	mov	r0, r5
 8010f46:	47b0      	blx	r6
 8010f48:	4602      	mov	r2, r0
 8010f4a:	1c50      	adds	r0, r2, #1
 8010f4c:	d1c9      	bne.n	8010ee2 <__sflush_r+0x32>
 8010f4e:	682b      	ldr	r3, [r5, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d0c6      	beq.n	8010ee2 <__sflush_r+0x32>
 8010f54:	2b1d      	cmp	r3, #29
 8010f56:	d001      	beq.n	8010f5c <__sflush_r+0xac>
 8010f58:	2b16      	cmp	r3, #22
 8010f5a:	d11e      	bne.n	8010f9a <__sflush_r+0xea>
 8010f5c:	602f      	str	r7, [r5, #0]
 8010f5e:	2000      	movs	r0, #0
 8010f60:	e022      	b.n	8010fa8 <__sflush_r+0xf8>
 8010f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f66:	b21b      	sxth	r3, r3
 8010f68:	e01b      	b.n	8010fa2 <__sflush_r+0xf2>
 8010f6a:	690f      	ldr	r7, [r1, #16]
 8010f6c:	2f00      	cmp	r7, #0
 8010f6e:	d0f6      	beq.n	8010f5e <__sflush_r+0xae>
 8010f70:	0793      	lsls	r3, r2, #30
 8010f72:	680e      	ldr	r6, [r1, #0]
 8010f74:	bf08      	it	eq
 8010f76:	694b      	ldreq	r3, [r1, #20]
 8010f78:	600f      	str	r7, [r1, #0]
 8010f7a:	bf18      	it	ne
 8010f7c:	2300      	movne	r3, #0
 8010f7e:	eba6 0807 	sub.w	r8, r6, r7
 8010f82:	608b      	str	r3, [r1, #8]
 8010f84:	f1b8 0f00 	cmp.w	r8, #0
 8010f88:	dde9      	ble.n	8010f5e <__sflush_r+0xae>
 8010f8a:	6a21      	ldr	r1, [r4, #32]
 8010f8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010f8e:	4643      	mov	r3, r8
 8010f90:	463a      	mov	r2, r7
 8010f92:	4628      	mov	r0, r5
 8010f94:	47b0      	blx	r6
 8010f96:	2800      	cmp	r0, #0
 8010f98:	dc08      	bgt.n	8010fac <__sflush_r+0xfc>
 8010f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fa2:	81a3      	strh	r3, [r4, #12]
 8010fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fac:	4407      	add	r7, r0
 8010fae:	eba8 0800 	sub.w	r8, r8, r0
 8010fb2:	e7e7      	b.n	8010f84 <__sflush_r+0xd4>
 8010fb4:	20400001 	.word	0x20400001

08010fb8 <_fflush_r>:
 8010fb8:	b538      	push	{r3, r4, r5, lr}
 8010fba:	690b      	ldr	r3, [r1, #16]
 8010fbc:	4605      	mov	r5, r0
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	b913      	cbnz	r3, 8010fc8 <_fflush_r+0x10>
 8010fc2:	2500      	movs	r5, #0
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	bd38      	pop	{r3, r4, r5, pc}
 8010fc8:	b118      	cbz	r0, 8010fd2 <_fflush_r+0x1a>
 8010fca:	6a03      	ldr	r3, [r0, #32]
 8010fcc:	b90b      	cbnz	r3, 8010fd2 <_fflush_r+0x1a>
 8010fce:	f7fc ff63 	bl	800de98 <__sinit>
 8010fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d0f3      	beq.n	8010fc2 <_fflush_r+0xa>
 8010fda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010fdc:	07d0      	lsls	r0, r2, #31
 8010fde:	d404      	bmi.n	8010fea <_fflush_r+0x32>
 8010fe0:	0599      	lsls	r1, r3, #22
 8010fe2:	d402      	bmi.n	8010fea <_fflush_r+0x32>
 8010fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010fe6:	f7fd fa0c 	bl	800e402 <__retarget_lock_acquire_recursive>
 8010fea:	4628      	mov	r0, r5
 8010fec:	4621      	mov	r1, r4
 8010fee:	f7ff ff5f 	bl	8010eb0 <__sflush_r>
 8010ff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ff4:	07da      	lsls	r2, r3, #31
 8010ff6:	4605      	mov	r5, r0
 8010ff8:	d4e4      	bmi.n	8010fc4 <_fflush_r+0xc>
 8010ffa:	89a3      	ldrh	r3, [r4, #12]
 8010ffc:	059b      	lsls	r3, r3, #22
 8010ffe:	d4e1      	bmi.n	8010fc4 <_fflush_r+0xc>
 8011000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011002:	f7fd f9ff 	bl	800e404 <__retarget_lock_release_recursive>
 8011006:	e7dd      	b.n	8010fc4 <_fflush_r+0xc>

08011008 <fiprintf>:
 8011008:	b40e      	push	{r1, r2, r3}
 801100a:	b503      	push	{r0, r1, lr}
 801100c:	4601      	mov	r1, r0
 801100e:	ab03      	add	r3, sp, #12
 8011010:	4805      	ldr	r0, [pc, #20]	@ (8011028 <fiprintf+0x20>)
 8011012:	f853 2b04 	ldr.w	r2, [r3], #4
 8011016:	6800      	ldr	r0, [r0, #0]
 8011018:	9301      	str	r3, [sp, #4]
 801101a:	f7ff fe31 	bl	8010c80 <_vfiprintf_r>
 801101e:	b002      	add	sp, #8
 8011020:	f85d eb04 	ldr.w	lr, [sp], #4
 8011024:	b003      	add	sp, #12
 8011026:	4770      	bx	lr
 8011028:	20000060 	.word	0x20000060

0801102c <__swhatbuf_r>:
 801102c:	b570      	push	{r4, r5, r6, lr}
 801102e:	460c      	mov	r4, r1
 8011030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011034:	2900      	cmp	r1, #0
 8011036:	b096      	sub	sp, #88	@ 0x58
 8011038:	4615      	mov	r5, r2
 801103a:	461e      	mov	r6, r3
 801103c:	da0d      	bge.n	801105a <__swhatbuf_r+0x2e>
 801103e:	89a3      	ldrh	r3, [r4, #12]
 8011040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011044:	f04f 0100 	mov.w	r1, #0
 8011048:	bf14      	ite	ne
 801104a:	2340      	movne	r3, #64	@ 0x40
 801104c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011050:	2000      	movs	r0, #0
 8011052:	6031      	str	r1, [r6, #0]
 8011054:	602b      	str	r3, [r5, #0]
 8011056:	b016      	add	sp, #88	@ 0x58
 8011058:	bd70      	pop	{r4, r5, r6, pc}
 801105a:	466a      	mov	r2, sp
 801105c:	f000 f862 	bl	8011124 <_fstat_r>
 8011060:	2800      	cmp	r0, #0
 8011062:	dbec      	blt.n	801103e <__swhatbuf_r+0x12>
 8011064:	9901      	ldr	r1, [sp, #4]
 8011066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801106a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801106e:	4259      	negs	r1, r3
 8011070:	4159      	adcs	r1, r3
 8011072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011076:	e7eb      	b.n	8011050 <__swhatbuf_r+0x24>

08011078 <__smakebuf_r>:
 8011078:	898b      	ldrh	r3, [r1, #12]
 801107a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801107c:	079d      	lsls	r5, r3, #30
 801107e:	4606      	mov	r6, r0
 8011080:	460c      	mov	r4, r1
 8011082:	d507      	bpl.n	8011094 <__smakebuf_r+0x1c>
 8011084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011088:	6023      	str	r3, [r4, #0]
 801108a:	6123      	str	r3, [r4, #16]
 801108c:	2301      	movs	r3, #1
 801108e:	6163      	str	r3, [r4, #20]
 8011090:	b003      	add	sp, #12
 8011092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011094:	ab01      	add	r3, sp, #4
 8011096:	466a      	mov	r2, sp
 8011098:	f7ff ffc8 	bl	801102c <__swhatbuf_r>
 801109c:	9f00      	ldr	r7, [sp, #0]
 801109e:	4605      	mov	r5, r0
 80110a0:	4639      	mov	r1, r7
 80110a2:	4630      	mov	r0, r6
 80110a4:	f7fe f8b0 	bl	800f208 <_malloc_r>
 80110a8:	b948      	cbnz	r0, 80110be <__smakebuf_r+0x46>
 80110aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ae:	059a      	lsls	r2, r3, #22
 80110b0:	d4ee      	bmi.n	8011090 <__smakebuf_r+0x18>
 80110b2:	f023 0303 	bic.w	r3, r3, #3
 80110b6:	f043 0302 	orr.w	r3, r3, #2
 80110ba:	81a3      	strh	r3, [r4, #12]
 80110bc:	e7e2      	b.n	8011084 <__smakebuf_r+0xc>
 80110be:	89a3      	ldrh	r3, [r4, #12]
 80110c0:	6020      	str	r0, [r4, #0]
 80110c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110c6:	81a3      	strh	r3, [r4, #12]
 80110c8:	9b01      	ldr	r3, [sp, #4]
 80110ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80110ce:	b15b      	cbz	r3, 80110e8 <__smakebuf_r+0x70>
 80110d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110d4:	4630      	mov	r0, r6
 80110d6:	f000 f837 	bl	8011148 <_isatty_r>
 80110da:	b128      	cbz	r0, 80110e8 <__smakebuf_r+0x70>
 80110dc:	89a3      	ldrh	r3, [r4, #12]
 80110de:	f023 0303 	bic.w	r3, r3, #3
 80110e2:	f043 0301 	orr.w	r3, r3, #1
 80110e6:	81a3      	strh	r3, [r4, #12]
 80110e8:	89a3      	ldrh	r3, [r4, #12]
 80110ea:	431d      	orrs	r5, r3
 80110ec:	81a5      	strh	r5, [r4, #12]
 80110ee:	e7cf      	b.n	8011090 <__smakebuf_r+0x18>

080110f0 <memmove>:
 80110f0:	4288      	cmp	r0, r1
 80110f2:	b510      	push	{r4, lr}
 80110f4:	eb01 0402 	add.w	r4, r1, r2
 80110f8:	d902      	bls.n	8011100 <memmove+0x10>
 80110fa:	4284      	cmp	r4, r0
 80110fc:	4623      	mov	r3, r4
 80110fe:	d807      	bhi.n	8011110 <memmove+0x20>
 8011100:	1e43      	subs	r3, r0, #1
 8011102:	42a1      	cmp	r1, r4
 8011104:	d008      	beq.n	8011118 <memmove+0x28>
 8011106:	f811 2b01 	ldrb.w	r2, [r1], #1
 801110a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801110e:	e7f8      	b.n	8011102 <memmove+0x12>
 8011110:	4402      	add	r2, r0
 8011112:	4601      	mov	r1, r0
 8011114:	428a      	cmp	r2, r1
 8011116:	d100      	bne.n	801111a <memmove+0x2a>
 8011118:	bd10      	pop	{r4, pc}
 801111a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801111e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011122:	e7f7      	b.n	8011114 <memmove+0x24>

08011124 <_fstat_r>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	4d07      	ldr	r5, [pc, #28]	@ (8011144 <_fstat_r+0x20>)
 8011128:	2300      	movs	r3, #0
 801112a:	4604      	mov	r4, r0
 801112c:	4608      	mov	r0, r1
 801112e:	4611      	mov	r1, r2
 8011130:	602b      	str	r3, [r5, #0]
 8011132:	f7f1 fffa 	bl	800312a <_fstat>
 8011136:	1c43      	adds	r3, r0, #1
 8011138:	d102      	bne.n	8011140 <_fstat_r+0x1c>
 801113a:	682b      	ldr	r3, [r5, #0]
 801113c:	b103      	cbz	r3, 8011140 <_fstat_r+0x1c>
 801113e:	6023      	str	r3, [r4, #0]
 8011140:	bd38      	pop	{r3, r4, r5, pc}
 8011142:	bf00      	nop
 8011144:	20004068 	.word	0x20004068

08011148 <_isatty_r>:
 8011148:	b538      	push	{r3, r4, r5, lr}
 801114a:	4d06      	ldr	r5, [pc, #24]	@ (8011164 <_isatty_r+0x1c>)
 801114c:	2300      	movs	r3, #0
 801114e:	4604      	mov	r4, r0
 8011150:	4608      	mov	r0, r1
 8011152:	602b      	str	r3, [r5, #0]
 8011154:	f7f1 fff9 	bl	800314a <_isatty>
 8011158:	1c43      	adds	r3, r0, #1
 801115a:	d102      	bne.n	8011162 <_isatty_r+0x1a>
 801115c:	682b      	ldr	r3, [r5, #0]
 801115e:	b103      	cbz	r3, 8011162 <_isatty_r+0x1a>
 8011160:	6023      	str	r3, [r4, #0]
 8011162:	bd38      	pop	{r3, r4, r5, pc}
 8011164:	20004068 	.word	0x20004068

08011168 <_sbrk_r>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	4d06      	ldr	r5, [pc, #24]	@ (8011184 <_sbrk_r+0x1c>)
 801116c:	2300      	movs	r3, #0
 801116e:	4604      	mov	r4, r0
 8011170:	4608      	mov	r0, r1
 8011172:	602b      	str	r3, [r5, #0]
 8011174:	f7f2 f802 	bl	800317c <_sbrk>
 8011178:	1c43      	adds	r3, r0, #1
 801117a:	d102      	bne.n	8011182 <_sbrk_r+0x1a>
 801117c:	682b      	ldr	r3, [r5, #0]
 801117e:	b103      	cbz	r3, 8011182 <_sbrk_r+0x1a>
 8011180:	6023      	str	r3, [r4, #0]
 8011182:	bd38      	pop	{r3, r4, r5, pc}
 8011184:	20004068 	.word	0x20004068

08011188 <nan>:
 8011188:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011190 <nan+0x8>
 801118c:	4770      	bx	lr
 801118e:	bf00      	nop
 8011190:	00000000 	.word	0x00000000
 8011194:	7ff80000 	.word	0x7ff80000

08011198 <abort>:
 8011198:	b508      	push	{r3, lr}
 801119a:	2006      	movs	r0, #6
 801119c:	f000 fbc4 	bl	8011928 <raise>
 80111a0:	2001      	movs	r0, #1
 80111a2:	f7f1 ff72 	bl	800308a <_exit>

080111a6 <_calloc_r>:
 80111a6:	b570      	push	{r4, r5, r6, lr}
 80111a8:	fba1 5402 	umull	r5, r4, r1, r2
 80111ac:	b934      	cbnz	r4, 80111bc <_calloc_r+0x16>
 80111ae:	4629      	mov	r1, r5
 80111b0:	f7fe f82a 	bl	800f208 <_malloc_r>
 80111b4:	4606      	mov	r6, r0
 80111b6:	b928      	cbnz	r0, 80111c4 <_calloc_r+0x1e>
 80111b8:	4630      	mov	r0, r6
 80111ba:	bd70      	pop	{r4, r5, r6, pc}
 80111bc:	220c      	movs	r2, #12
 80111be:	6002      	str	r2, [r0, #0]
 80111c0:	2600      	movs	r6, #0
 80111c2:	e7f9      	b.n	80111b8 <_calloc_r+0x12>
 80111c4:	462a      	mov	r2, r5
 80111c6:	4621      	mov	r1, r4
 80111c8:	f7fd f806 	bl	800e1d8 <memset>
 80111cc:	e7f4      	b.n	80111b8 <_calloc_r+0x12>

080111ce <rshift>:
 80111ce:	6903      	ldr	r3, [r0, #16]
 80111d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80111d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80111dc:	f100 0414 	add.w	r4, r0, #20
 80111e0:	dd45      	ble.n	801126e <rshift+0xa0>
 80111e2:	f011 011f 	ands.w	r1, r1, #31
 80111e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80111ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80111ee:	d10c      	bne.n	801120a <rshift+0x3c>
 80111f0:	f100 0710 	add.w	r7, r0, #16
 80111f4:	4629      	mov	r1, r5
 80111f6:	42b1      	cmp	r1, r6
 80111f8:	d334      	bcc.n	8011264 <rshift+0x96>
 80111fa:	1a9b      	subs	r3, r3, r2
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	1eea      	subs	r2, r5, #3
 8011200:	4296      	cmp	r6, r2
 8011202:	bf38      	it	cc
 8011204:	2300      	movcc	r3, #0
 8011206:	4423      	add	r3, r4
 8011208:	e015      	b.n	8011236 <rshift+0x68>
 801120a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801120e:	f1c1 0820 	rsb	r8, r1, #32
 8011212:	40cf      	lsrs	r7, r1
 8011214:	f105 0e04 	add.w	lr, r5, #4
 8011218:	46a1      	mov	r9, r4
 801121a:	4576      	cmp	r6, lr
 801121c:	46f4      	mov	ip, lr
 801121e:	d815      	bhi.n	801124c <rshift+0x7e>
 8011220:	1a9a      	subs	r2, r3, r2
 8011222:	0092      	lsls	r2, r2, #2
 8011224:	3a04      	subs	r2, #4
 8011226:	3501      	adds	r5, #1
 8011228:	42ae      	cmp	r6, r5
 801122a:	bf38      	it	cc
 801122c:	2200      	movcc	r2, #0
 801122e:	18a3      	adds	r3, r4, r2
 8011230:	50a7      	str	r7, [r4, r2]
 8011232:	b107      	cbz	r7, 8011236 <rshift+0x68>
 8011234:	3304      	adds	r3, #4
 8011236:	1b1a      	subs	r2, r3, r4
 8011238:	42a3      	cmp	r3, r4
 801123a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801123e:	bf08      	it	eq
 8011240:	2300      	moveq	r3, #0
 8011242:	6102      	str	r2, [r0, #16]
 8011244:	bf08      	it	eq
 8011246:	6143      	streq	r3, [r0, #20]
 8011248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801124c:	f8dc c000 	ldr.w	ip, [ip]
 8011250:	fa0c fc08 	lsl.w	ip, ip, r8
 8011254:	ea4c 0707 	orr.w	r7, ip, r7
 8011258:	f849 7b04 	str.w	r7, [r9], #4
 801125c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011260:	40cf      	lsrs	r7, r1
 8011262:	e7da      	b.n	801121a <rshift+0x4c>
 8011264:	f851 cb04 	ldr.w	ip, [r1], #4
 8011268:	f847 cf04 	str.w	ip, [r7, #4]!
 801126c:	e7c3      	b.n	80111f6 <rshift+0x28>
 801126e:	4623      	mov	r3, r4
 8011270:	e7e1      	b.n	8011236 <rshift+0x68>

08011272 <__hexdig_fun>:
 8011272:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011276:	2b09      	cmp	r3, #9
 8011278:	d802      	bhi.n	8011280 <__hexdig_fun+0xe>
 801127a:	3820      	subs	r0, #32
 801127c:	b2c0      	uxtb	r0, r0
 801127e:	4770      	bx	lr
 8011280:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011284:	2b05      	cmp	r3, #5
 8011286:	d801      	bhi.n	801128c <__hexdig_fun+0x1a>
 8011288:	3847      	subs	r0, #71	@ 0x47
 801128a:	e7f7      	b.n	801127c <__hexdig_fun+0xa>
 801128c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011290:	2b05      	cmp	r3, #5
 8011292:	d801      	bhi.n	8011298 <__hexdig_fun+0x26>
 8011294:	3827      	subs	r0, #39	@ 0x27
 8011296:	e7f1      	b.n	801127c <__hexdig_fun+0xa>
 8011298:	2000      	movs	r0, #0
 801129a:	4770      	bx	lr

0801129c <__gethex>:
 801129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a0:	b085      	sub	sp, #20
 80112a2:	468a      	mov	sl, r1
 80112a4:	9302      	str	r3, [sp, #8]
 80112a6:	680b      	ldr	r3, [r1, #0]
 80112a8:	9001      	str	r0, [sp, #4]
 80112aa:	4690      	mov	r8, r2
 80112ac:	1c9c      	adds	r4, r3, #2
 80112ae:	46a1      	mov	r9, r4
 80112b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80112b4:	2830      	cmp	r0, #48	@ 0x30
 80112b6:	d0fa      	beq.n	80112ae <__gethex+0x12>
 80112b8:	eba9 0303 	sub.w	r3, r9, r3
 80112bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80112c0:	f7ff ffd7 	bl	8011272 <__hexdig_fun>
 80112c4:	4605      	mov	r5, r0
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d168      	bne.n	801139c <__gethex+0x100>
 80112ca:	49a0      	ldr	r1, [pc, #640]	@ (801154c <__gethex+0x2b0>)
 80112cc:	2201      	movs	r2, #1
 80112ce:	4648      	mov	r0, r9
 80112d0:	f7fc ff8a 	bl	800e1e8 <strncmp>
 80112d4:	4607      	mov	r7, r0
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d167      	bne.n	80113aa <__gethex+0x10e>
 80112da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80112de:	4626      	mov	r6, r4
 80112e0:	f7ff ffc7 	bl	8011272 <__hexdig_fun>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d062      	beq.n	80113ae <__gethex+0x112>
 80112e8:	4623      	mov	r3, r4
 80112ea:	7818      	ldrb	r0, [r3, #0]
 80112ec:	2830      	cmp	r0, #48	@ 0x30
 80112ee:	4699      	mov	r9, r3
 80112f0:	f103 0301 	add.w	r3, r3, #1
 80112f4:	d0f9      	beq.n	80112ea <__gethex+0x4e>
 80112f6:	f7ff ffbc 	bl	8011272 <__hexdig_fun>
 80112fa:	fab0 f580 	clz	r5, r0
 80112fe:	096d      	lsrs	r5, r5, #5
 8011300:	f04f 0b01 	mov.w	fp, #1
 8011304:	464a      	mov	r2, r9
 8011306:	4616      	mov	r6, r2
 8011308:	3201      	adds	r2, #1
 801130a:	7830      	ldrb	r0, [r6, #0]
 801130c:	f7ff ffb1 	bl	8011272 <__hexdig_fun>
 8011310:	2800      	cmp	r0, #0
 8011312:	d1f8      	bne.n	8011306 <__gethex+0x6a>
 8011314:	498d      	ldr	r1, [pc, #564]	@ (801154c <__gethex+0x2b0>)
 8011316:	2201      	movs	r2, #1
 8011318:	4630      	mov	r0, r6
 801131a:	f7fc ff65 	bl	800e1e8 <strncmp>
 801131e:	2800      	cmp	r0, #0
 8011320:	d13f      	bne.n	80113a2 <__gethex+0x106>
 8011322:	b944      	cbnz	r4, 8011336 <__gethex+0x9a>
 8011324:	1c74      	adds	r4, r6, #1
 8011326:	4622      	mov	r2, r4
 8011328:	4616      	mov	r6, r2
 801132a:	3201      	adds	r2, #1
 801132c:	7830      	ldrb	r0, [r6, #0]
 801132e:	f7ff ffa0 	bl	8011272 <__hexdig_fun>
 8011332:	2800      	cmp	r0, #0
 8011334:	d1f8      	bne.n	8011328 <__gethex+0x8c>
 8011336:	1ba4      	subs	r4, r4, r6
 8011338:	00a7      	lsls	r7, r4, #2
 801133a:	7833      	ldrb	r3, [r6, #0]
 801133c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011340:	2b50      	cmp	r3, #80	@ 0x50
 8011342:	d13e      	bne.n	80113c2 <__gethex+0x126>
 8011344:	7873      	ldrb	r3, [r6, #1]
 8011346:	2b2b      	cmp	r3, #43	@ 0x2b
 8011348:	d033      	beq.n	80113b2 <__gethex+0x116>
 801134a:	2b2d      	cmp	r3, #45	@ 0x2d
 801134c:	d034      	beq.n	80113b8 <__gethex+0x11c>
 801134e:	1c71      	adds	r1, r6, #1
 8011350:	2400      	movs	r4, #0
 8011352:	7808      	ldrb	r0, [r1, #0]
 8011354:	f7ff ff8d 	bl	8011272 <__hexdig_fun>
 8011358:	1e43      	subs	r3, r0, #1
 801135a:	b2db      	uxtb	r3, r3
 801135c:	2b18      	cmp	r3, #24
 801135e:	d830      	bhi.n	80113c2 <__gethex+0x126>
 8011360:	f1a0 0210 	sub.w	r2, r0, #16
 8011364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011368:	f7ff ff83 	bl	8011272 <__hexdig_fun>
 801136c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011370:	fa5f fc8c 	uxtb.w	ip, ip
 8011374:	f1bc 0f18 	cmp.w	ip, #24
 8011378:	f04f 030a 	mov.w	r3, #10
 801137c:	d91e      	bls.n	80113bc <__gethex+0x120>
 801137e:	b104      	cbz	r4, 8011382 <__gethex+0xe6>
 8011380:	4252      	negs	r2, r2
 8011382:	4417      	add	r7, r2
 8011384:	f8ca 1000 	str.w	r1, [sl]
 8011388:	b1ed      	cbz	r5, 80113c6 <__gethex+0x12a>
 801138a:	f1bb 0f00 	cmp.w	fp, #0
 801138e:	bf0c      	ite	eq
 8011390:	2506      	moveq	r5, #6
 8011392:	2500      	movne	r5, #0
 8011394:	4628      	mov	r0, r5
 8011396:	b005      	add	sp, #20
 8011398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801139c:	2500      	movs	r5, #0
 801139e:	462c      	mov	r4, r5
 80113a0:	e7b0      	b.n	8011304 <__gethex+0x68>
 80113a2:	2c00      	cmp	r4, #0
 80113a4:	d1c7      	bne.n	8011336 <__gethex+0x9a>
 80113a6:	4627      	mov	r7, r4
 80113a8:	e7c7      	b.n	801133a <__gethex+0x9e>
 80113aa:	464e      	mov	r6, r9
 80113ac:	462f      	mov	r7, r5
 80113ae:	2501      	movs	r5, #1
 80113b0:	e7c3      	b.n	801133a <__gethex+0x9e>
 80113b2:	2400      	movs	r4, #0
 80113b4:	1cb1      	adds	r1, r6, #2
 80113b6:	e7cc      	b.n	8011352 <__gethex+0xb6>
 80113b8:	2401      	movs	r4, #1
 80113ba:	e7fb      	b.n	80113b4 <__gethex+0x118>
 80113bc:	fb03 0002 	mla	r0, r3, r2, r0
 80113c0:	e7ce      	b.n	8011360 <__gethex+0xc4>
 80113c2:	4631      	mov	r1, r6
 80113c4:	e7de      	b.n	8011384 <__gethex+0xe8>
 80113c6:	eba6 0309 	sub.w	r3, r6, r9
 80113ca:	3b01      	subs	r3, #1
 80113cc:	4629      	mov	r1, r5
 80113ce:	2b07      	cmp	r3, #7
 80113d0:	dc0a      	bgt.n	80113e8 <__gethex+0x14c>
 80113d2:	9801      	ldr	r0, [sp, #4]
 80113d4:	f7fd ffa4 	bl	800f320 <_Balloc>
 80113d8:	4604      	mov	r4, r0
 80113da:	b940      	cbnz	r0, 80113ee <__gethex+0x152>
 80113dc:	4b5c      	ldr	r3, [pc, #368]	@ (8011550 <__gethex+0x2b4>)
 80113de:	4602      	mov	r2, r0
 80113e0:	21e4      	movs	r1, #228	@ 0xe4
 80113e2:	485c      	ldr	r0, [pc, #368]	@ (8011554 <__gethex+0x2b8>)
 80113e4:	f7fd f824 	bl	800e430 <__assert_func>
 80113e8:	3101      	adds	r1, #1
 80113ea:	105b      	asrs	r3, r3, #1
 80113ec:	e7ef      	b.n	80113ce <__gethex+0x132>
 80113ee:	f100 0a14 	add.w	sl, r0, #20
 80113f2:	2300      	movs	r3, #0
 80113f4:	4655      	mov	r5, sl
 80113f6:	469b      	mov	fp, r3
 80113f8:	45b1      	cmp	r9, r6
 80113fa:	d337      	bcc.n	801146c <__gethex+0x1d0>
 80113fc:	f845 bb04 	str.w	fp, [r5], #4
 8011400:	eba5 050a 	sub.w	r5, r5, sl
 8011404:	10ad      	asrs	r5, r5, #2
 8011406:	6125      	str	r5, [r4, #16]
 8011408:	4658      	mov	r0, fp
 801140a:	f7fe f87b 	bl	800f504 <__hi0bits>
 801140e:	016d      	lsls	r5, r5, #5
 8011410:	f8d8 6000 	ldr.w	r6, [r8]
 8011414:	1a2d      	subs	r5, r5, r0
 8011416:	42b5      	cmp	r5, r6
 8011418:	dd54      	ble.n	80114c4 <__gethex+0x228>
 801141a:	1bad      	subs	r5, r5, r6
 801141c:	4629      	mov	r1, r5
 801141e:	4620      	mov	r0, r4
 8011420:	f7fe fc07 	bl	800fc32 <__any_on>
 8011424:	4681      	mov	r9, r0
 8011426:	b178      	cbz	r0, 8011448 <__gethex+0x1ac>
 8011428:	1e6b      	subs	r3, r5, #1
 801142a:	1159      	asrs	r1, r3, #5
 801142c:	f003 021f 	and.w	r2, r3, #31
 8011430:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011434:	f04f 0901 	mov.w	r9, #1
 8011438:	fa09 f202 	lsl.w	r2, r9, r2
 801143c:	420a      	tst	r2, r1
 801143e:	d003      	beq.n	8011448 <__gethex+0x1ac>
 8011440:	454b      	cmp	r3, r9
 8011442:	dc36      	bgt.n	80114b2 <__gethex+0x216>
 8011444:	f04f 0902 	mov.w	r9, #2
 8011448:	4629      	mov	r1, r5
 801144a:	4620      	mov	r0, r4
 801144c:	f7ff febf 	bl	80111ce <rshift>
 8011450:	442f      	add	r7, r5
 8011452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011456:	42bb      	cmp	r3, r7
 8011458:	da42      	bge.n	80114e0 <__gethex+0x244>
 801145a:	9801      	ldr	r0, [sp, #4]
 801145c:	4621      	mov	r1, r4
 801145e:	f7fd ff9f 	bl	800f3a0 <_Bfree>
 8011462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011464:	2300      	movs	r3, #0
 8011466:	6013      	str	r3, [r2, #0]
 8011468:	25a3      	movs	r5, #163	@ 0xa3
 801146a:	e793      	b.n	8011394 <__gethex+0xf8>
 801146c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011470:	2a2e      	cmp	r2, #46	@ 0x2e
 8011472:	d012      	beq.n	801149a <__gethex+0x1fe>
 8011474:	2b20      	cmp	r3, #32
 8011476:	d104      	bne.n	8011482 <__gethex+0x1e6>
 8011478:	f845 bb04 	str.w	fp, [r5], #4
 801147c:	f04f 0b00 	mov.w	fp, #0
 8011480:	465b      	mov	r3, fp
 8011482:	7830      	ldrb	r0, [r6, #0]
 8011484:	9303      	str	r3, [sp, #12]
 8011486:	f7ff fef4 	bl	8011272 <__hexdig_fun>
 801148a:	9b03      	ldr	r3, [sp, #12]
 801148c:	f000 000f 	and.w	r0, r0, #15
 8011490:	4098      	lsls	r0, r3
 8011492:	ea4b 0b00 	orr.w	fp, fp, r0
 8011496:	3304      	adds	r3, #4
 8011498:	e7ae      	b.n	80113f8 <__gethex+0x15c>
 801149a:	45b1      	cmp	r9, r6
 801149c:	d8ea      	bhi.n	8011474 <__gethex+0x1d8>
 801149e:	492b      	ldr	r1, [pc, #172]	@ (801154c <__gethex+0x2b0>)
 80114a0:	9303      	str	r3, [sp, #12]
 80114a2:	2201      	movs	r2, #1
 80114a4:	4630      	mov	r0, r6
 80114a6:	f7fc fe9f 	bl	800e1e8 <strncmp>
 80114aa:	9b03      	ldr	r3, [sp, #12]
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d1e1      	bne.n	8011474 <__gethex+0x1d8>
 80114b0:	e7a2      	b.n	80113f8 <__gethex+0x15c>
 80114b2:	1ea9      	subs	r1, r5, #2
 80114b4:	4620      	mov	r0, r4
 80114b6:	f7fe fbbc 	bl	800fc32 <__any_on>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d0c2      	beq.n	8011444 <__gethex+0x1a8>
 80114be:	f04f 0903 	mov.w	r9, #3
 80114c2:	e7c1      	b.n	8011448 <__gethex+0x1ac>
 80114c4:	da09      	bge.n	80114da <__gethex+0x23e>
 80114c6:	1b75      	subs	r5, r6, r5
 80114c8:	4621      	mov	r1, r4
 80114ca:	9801      	ldr	r0, [sp, #4]
 80114cc:	462a      	mov	r2, r5
 80114ce:	f7fe f977 	bl	800f7c0 <__lshift>
 80114d2:	1b7f      	subs	r7, r7, r5
 80114d4:	4604      	mov	r4, r0
 80114d6:	f100 0a14 	add.w	sl, r0, #20
 80114da:	f04f 0900 	mov.w	r9, #0
 80114de:	e7b8      	b.n	8011452 <__gethex+0x1b6>
 80114e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80114e4:	42bd      	cmp	r5, r7
 80114e6:	dd6f      	ble.n	80115c8 <__gethex+0x32c>
 80114e8:	1bed      	subs	r5, r5, r7
 80114ea:	42ae      	cmp	r6, r5
 80114ec:	dc34      	bgt.n	8011558 <__gethex+0x2bc>
 80114ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80114f2:	2b02      	cmp	r3, #2
 80114f4:	d022      	beq.n	801153c <__gethex+0x2a0>
 80114f6:	2b03      	cmp	r3, #3
 80114f8:	d024      	beq.n	8011544 <__gethex+0x2a8>
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d115      	bne.n	801152a <__gethex+0x28e>
 80114fe:	42ae      	cmp	r6, r5
 8011500:	d113      	bne.n	801152a <__gethex+0x28e>
 8011502:	2e01      	cmp	r6, #1
 8011504:	d10b      	bne.n	801151e <__gethex+0x282>
 8011506:	9a02      	ldr	r2, [sp, #8]
 8011508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801150c:	6013      	str	r3, [r2, #0]
 801150e:	2301      	movs	r3, #1
 8011510:	6123      	str	r3, [r4, #16]
 8011512:	f8ca 3000 	str.w	r3, [sl]
 8011516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011518:	2562      	movs	r5, #98	@ 0x62
 801151a:	601c      	str	r4, [r3, #0]
 801151c:	e73a      	b.n	8011394 <__gethex+0xf8>
 801151e:	1e71      	subs	r1, r6, #1
 8011520:	4620      	mov	r0, r4
 8011522:	f7fe fb86 	bl	800fc32 <__any_on>
 8011526:	2800      	cmp	r0, #0
 8011528:	d1ed      	bne.n	8011506 <__gethex+0x26a>
 801152a:	9801      	ldr	r0, [sp, #4]
 801152c:	4621      	mov	r1, r4
 801152e:	f7fd ff37 	bl	800f3a0 <_Bfree>
 8011532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011534:	2300      	movs	r3, #0
 8011536:	6013      	str	r3, [r2, #0]
 8011538:	2550      	movs	r5, #80	@ 0x50
 801153a:	e72b      	b.n	8011394 <__gethex+0xf8>
 801153c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1f3      	bne.n	801152a <__gethex+0x28e>
 8011542:	e7e0      	b.n	8011506 <__gethex+0x26a>
 8011544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011546:	2b00      	cmp	r3, #0
 8011548:	d1dd      	bne.n	8011506 <__gethex+0x26a>
 801154a:	e7ee      	b.n	801152a <__gethex+0x28e>
 801154c:	08012471 	.word	0x08012471
 8011550:	08012407 	.word	0x08012407
 8011554:	0801248c 	.word	0x0801248c
 8011558:	1e6f      	subs	r7, r5, #1
 801155a:	f1b9 0f00 	cmp.w	r9, #0
 801155e:	d130      	bne.n	80115c2 <__gethex+0x326>
 8011560:	b127      	cbz	r7, 801156c <__gethex+0x2d0>
 8011562:	4639      	mov	r1, r7
 8011564:	4620      	mov	r0, r4
 8011566:	f7fe fb64 	bl	800fc32 <__any_on>
 801156a:	4681      	mov	r9, r0
 801156c:	117a      	asrs	r2, r7, #5
 801156e:	2301      	movs	r3, #1
 8011570:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011574:	f007 071f 	and.w	r7, r7, #31
 8011578:	40bb      	lsls	r3, r7
 801157a:	4213      	tst	r3, r2
 801157c:	4629      	mov	r1, r5
 801157e:	4620      	mov	r0, r4
 8011580:	bf18      	it	ne
 8011582:	f049 0902 	orrne.w	r9, r9, #2
 8011586:	f7ff fe22 	bl	80111ce <rshift>
 801158a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801158e:	1b76      	subs	r6, r6, r5
 8011590:	2502      	movs	r5, #2
 8011592:	f1b9 0f00 	cmp.w	r9, #0
 8011596:	d047      	beq.n	8011628 <__gethex+0x38c>
 8011598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801159c:	2b02      	cmp	r3, #2
 801159e:	d015      	beq.n	80115cc <__gethex+0x330>
 80115a0:	2b03      	cmp	r3, #3
 80115a2:	d017      	beq.n	80115d4 <__gethex+0x338>
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d109      	bne.n	80115bc <__gethex+0x320>
 80115a8:	f019 0f02 	tst.w	r9, #2
 80115ac:	d006      	beq.n	80115bc <__gethex+0x320>
 80115ae:	f8da 3000 	ldr.w	r3, [sl]
 80115b2:	ea49 0903 	orr.w	r9, r9, r3
 80115b6:	f019 0f01 	tst.w	r9, #1
 80115ba:	d10e      	bne.n	80115da <__gethex+0x33e>
 80115bc:	f045 0510 	orr.w	r5, r5, #16
 80115c0:	e032      	b.n	8011628 <__gethex+0x38c>
 80115c2:	f04f 0901 	mov.w	r9, #1
 80115c6:	e7d1      	b.n	801156c <__gethex+0x2d0>
 80115c8:	2501      	movs	r5, #1
 80115ca:	e7e2      	b.n	8011592 <__gethex+0x2f6>
 80115cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115ce:	f1c3 0301 	rsb	r3, r3, #1
 80115d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80115d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d0f0      	beq.n	80115bc <__gethex+0x320>
 80115da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80115de:	f104 0314 	add.w	r3, r4, #20
 80115e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80115e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80115ea:	f04f 0c00 	mov.w	ip, #0
 80115ee:	4618      	mov	r0, r3
 80115f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80115f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80115f8:	d01b      	beq.n	8011632 <__gethex+0x396>
 80115fa:	3201      	adds	r2, #1
 80115fc:	6002      	str	r2, [r0, #0]
 80115fe:	2d02      	cmp	r5, #2
 8011600:	f104 0314 	add.w	r3, r4, #20
 8011604:	d13c      	bne.n	8011680 <__gethex+0x3e4>
 8011606:	f8d8 2000 	ldr.w	r2, [r8]
 801160a:	3a01      	subs	r2, #1
 801160c:	42b2      	cmp	r2, r6
 801160e:	d109      	bne.n	8011624 <__gethex+0x388>
 8011610:	1171      	asrs	r1, r6, #5
 8011612:	2201      	movs	r2, #1
 8011614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011618:	f006 061f 	and.w	r6, r6, #31
 801161c:	fa02 f606 	lsl.w	r6, r2, r6
 8011620:	421e      	tst	r6, r3
 8011622:	d13a      	bne.n	801169a <__gethex+0x3fe>
 8011624:	f045 0520 	orr.w	r5, r5, #32
 8011628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801162a:	601c      	str	r4, [r3, #0]
 801162c:	9b02      	ldr	r3, [sp, #8]
 801162e:	601f      	str	r7, [r3, #0]
 8011630:	e6b0      	b.n	8011394 <__gethex+0xf8>
 8011632:	4299      	cmp	r1, r3
 8011634:	f843 cc04 	str.w	ip, [r3, #-4]
 8011638:	d8d9      	bhi.n	80115ee <__gethex+0x352>
 801163a:	68a3      	ldr	r3, [r4, #8]
 801163c:	459b      	cmp	fp, r3
 801163e:	db17      	blt.n	8011670 <__gethex+0x3d4>
 8011640:	6861      	ldr	r1, [r4, #4]
 8011642:	9801      	ldr	r0, [sp, #4]
 8011644:	3101      	adds	r1, #1
 8011646:	f7fd fe6b 	bl	800f320 <_Balloc>
 801164a:	4681      	mov	r9, r0
 801164c:	b918      	cbnz	r0, 8011656 <__gethex+0x3ba>
 801164e:	4b1a      	ldr	r3, [pc, #104]	@ (80116b8 <__gethex+0x41c>)
 8011650:	4602      	mov	r2, r0
 8011652:	2184      	movs	r1, #132	@ 0x84
 8011654:	e6c5      	b.n	80113e2 <__gethex+0x146>
 8011656:	6922      	ldr	r2, [r4, #16]
 8011658:	3202      	adds	r2, #2
 801165a:	f104 010c 	add.w	r1, r4, #12
 801165e:	0092      	lsls	r2, r2, #2
 8011660:	300c      	adds	r0, #12
 8011662:	f7fc fed0 	bl	800e406 <memcpy>
 8011666:	4621      	mov	r1, r4
 8011668:	9801      	ldr	r0, [sp, #4]
 801166a:	f7fd fe99 	bl	800f3a0 <_Bfree>
 801166e:	464c      	mov	r4, r9
 8011670:	6923      	ldr	r3, [r4, #16]
 8011672:	1c5a      	adds	r2, r3, #1
 8011674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011678:	6122      	str	r2, [r4, #16]
 801167a:	2201      	movs	r2, #1
 801167c:	615a      	str	r2, [r3, #20]
 801167e:	e7be      	b.n	80115fe <__gethex+0x362>
 8011680:	6922      	ldr	r2, [r4, #16]
 8011682:	455a      	cmp	r2, fp
 8011684:	dd0b      	ble.n	801169e <__gethex+0x402>
 8011686:	2101      	movs	r1, #1
 8011688:	4620      	mov	r0, r4
 801168a:	f7ff fda0 	bl	80111ce <rshift>
 801168e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011692:	3701      	adds	r7, #1
 8011694:	42bb      	cmp	r3, r7
 8011696:	f6ff aee0 	blt.w	801145a <__gethex+0x1be>
 801169a:	2501      	movs	r5, #1
 801169c:	e7c2      	b.n	8011624 <__gethex+0x388>
 801169e:	f016 061f 	ands.w	r6, r6, #31
 80116a2:	d0fa      	beq.n	801169a <__gethex+0x3fe>
 80116a4:	4453      	add	r3, sl
 80116a6:	f1c6 0620 	rsb	r6, r6, #32
 80116aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80116ae:	f7fd ff29 	bl	800f504 <__hi0bits>
 80116b2:	42b0      	cmp	r0, r6
 80116b4:	dbe7      	blt.n	8011686 <__gethex+0x3ea>
 80116b6:	e7f0      	b.n	801169a <__gethex+0x3fe>
 80116b8:	08012407 	.word	0x08012407

080116bc <L_shift>:
 80116bc:	f1c2 0208 	rsb	r2, r2, #8
 80116c0:	0092      	lsls	r2, r2, #2
 80116c2:	b570      	push	{r4, r5, r6, lr}
 80116c4:	f1c2 0620 	rsb	r6, r2, #32
 80116c8:	6843      	ldr	r3, [r0, #4]
 80116ca:	6804      	ldr	r4, [r0, #0]
 80116cc:	fa03 f506 	lsl.w	r5, r3, r6
 80116d0:	432c      	orrs	r4, r5
 80116d2:	40d3      	lsrs	r3, r2
 80116d4:	6004      	str	r4, [r0, #0]
 80116d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80116da:	4288      	cmp	r0, r1
 80116dc:	d3f4      	bcc.n	80116c8 <L_shift+0xc>
 80116de:	bd70      	pop	{r4, r5, r6, pc}

080116e0 <__match>:
 80116e0:	b530      	push	{r4, r5, lr}
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	3301      	adds	r3, #1
 80116e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116ea:	b914      	cbnz	r4, 80116f2 <__match+0x12>
 80116ec:	6003      	str	r3, [r0, #0]
 80116ee:	2001      	movs	r0, #1
 80116f0:	bd30      	pop	{r4, r5, pc}
 80116f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80116fa:	2d19      	cmp	r5, #25
 80116fc:	bf98      	it	ls
 80116fe:	3220      	addls	r2, #32
 8011700:	42a2      	cmp	r2, r4
 8011702:	d0f0      	beq.n	80116e6 <__match+0x6>
 8011704:	2000      	movs	r0, #0
 8011706:	e7f3      	b.n	80116f0 <__match+0x10>

08011708 <__hexnan>:
 8011708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	680b      	ldr	r3, [r1, #0]
 801170e:	6801      	ldr	r1, [r0, #0]
 8011710:	115e      	asrs	r6, r3, #5
 8011712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011716:	f013 031f 	ands.w	r3, r3, #31
 801171a:	b087      	sub	sp, #28
 801171c:	bf18      	it	ne
 801171e:	3604      	addne	r6, #4
 8011720:	2500      	movs	r5, #0
 8011722:	1f37      	subs	r7, r6, #4
 8011724:	4682      	mov	sl, r0
 8011726:	4690      	mov	r8, r2
 8011728:	9301      	str	r3, [sp, #4]
 801172a:	f846 5c04 	str.w	r5, [r6, #-4]
 801172e:	46b9      	mov	r9, r7
 8011730:	463c      	mov	r4, r7
 8011732:	9502      	str	r5, [sp, #8]
 8011734:	46ab      	mov	fp, r5
 8011736:	784a      	ldrb	r2, [r1, #1]
 8011738:	1c4b      	adds	r3, r1, #1
 801173a:	9303      	str	r3, [sp, #12]
 801173c:	b342      	cbz	r2, 8011790 <__hexnan+0x88>
 801173e:	4610      	mov	r0, r2
 8011740:	9105      	str	r1, [sp, #20]
 8011742:	9204      	str	r2, [sp, #16]
 8011744:	f7ff fd95 	bl	8011272 <__hexdig_fun>
 8011748:	2800      	cmp	r0, #0
 801174a:	d151      	bne.n	80117f0 <__hexnan+0xe8>
 801174c:	9a04      	ldr	r2, [sp, #16]
 801174e:	9905      	ldr	r1, [sp, #20]
 8011750:	2a20      	cmp	r2, #32
 8011752:	d818      	bhi.n	8011786 <__hexnan+0x7e>
 8011754:	9b02      	ldr	r3, [sp, #8]
 8011756:	459b      	cmp	fp, r3
 8011758:	dd13      	ble.n	8011782 <__hexnan+0x7a>
 801175a:	454c      	cmp	r4, r9
 801175c:	d206      	bcs.n	801176c <__hexnan+0x64>
 801175e:	2d07      	cmp	r5, #7
 8011760:	dc04      	bgt.n	801176c <__hexnan+0x64>
 8011762:	462a      	mov	r2, r5
 8011764:	4649      	mov	r1, r9
 8011766:	4620      	mov	r0, r4
 8011768:	f7ff ffa8 	bl	80116bc <L_shift>
 801176c:	4544      	cmp	r4, r8
 801176e:	d952      	bls.n	8011816 <__hexnan+0x10e>
 8011770:	2300      	movs	r3, #0
 8011772:	f1a4 0904 	sub.w	r9, r4, #4
 8011776:	f844 3c04 	str.w	r3, [r4, #-4]
 801177a:	f8cd b008 	str.w	fp, [sp, #8]
 801177e:	464c      	mov	r4, r9
 8011780:	461d      	mov	r5, r3
 8011782:	9903      	ldr	r1, [sp, #12]
 8011784:	e7d7      	b.n	8011736 <__hexnan+0x2e>
 8011786:	2a29      	cmp	r2, #41	@ 0x29
 8011788:	d157      	bne.n	801183a <__hexnan+0x132>
 801178a:	3102      	adds	r1, #2
 801178c:	f8ca 1000 	str.w	r1, [sl]
 8011790:	f1bb 0f00 	cmp.w	fp, #0
 8011794:	d051      	beq.n	801183a <__hexnan+0x132>
 8011796:	454c      	cmp	r4, r9
 8011798:	d206      	bcs.n	80117a8 <__hexnan+0xa0>
 801179a:	2d07      	cmp	r5, #7
 801179c:	dc04      	bgt.n	80117a8 <__hexnan+0xa0>
 801179e:	462a      	mov	r2, r5
 80117a0:	4649      	mov	r1, r9
 80117a2:	4620      	mov	r0, r4
 80117a4:	f7ff ff8a 	bl	80116bc <L_shift>
 80117a8:	4544      	cmp	r4, r8
 80117aa:	d936      	bls.n	801181a <__hexnan+0x112>
 80117ac:	f1a8 0204 	sub.w	r2, r8, #4
 80117b0:	4623      	mov	r3, r4
 80117b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80117b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80117ba:	429f      	cmp	r7, r3
 80117bc:	d2f9      	bcs.n	80117b2 <__hexnan+0xaa>
 80117be:	1b3b      	subs	r3, r7, r4
 80117c0:	f023 0303 	bic.w	r3, r3, #3
 80117c4:	3304      	adds	r3, #4
 80117c6:	3401      	adds	r4, #1
 80117c8:	3e03      	subs	r6, #3
 80117ca:	42b4      	cmp	r4, r6
 80117cc:	bf88      	it	hi
 80117ce:	2304      	movhi	r3, #4
 80117d0:	4443      	add	r3, r8
 80117d2:	2200      	movs	r2, #0
 80117d4:	f843 2b04 	str.w	r2, [r3], #4
 80117d8:	429f      	cmp	r7, r3
 80117da:	d2fb      	bcs.n	80117d4 <__hexnan+0xcc>
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	b91b      	cbnz	r3, 80117e8 <__hexnan+0xe0>
 80117e0:	4547      	cmp	r7, r8
 80117e2:	d128      	bne.n	8011836 <__hexnan+0x12e>
 80117e4:	2301      	movs	r3, #1
 80117e6:	603b      	str	r3, [r7, #0]
 80117e8:	2005      	movs	r0, #5
 80117ea:	b007      	add	sp, #28
 80117ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f0:	3501      	adds	r5, #1
 80117f2:	2d08      	cmp	r5, #8
 80117f4:	f10b 0b01 	add.w	fp, fp, #1
 80117f8:	dd06      	ble.n	8011808 <__hexnan+0x100>
 80117fa:	4544      	cmp	r4, r8
 80117fc:	d9c1      	bls.n	8011782 <__hexnan+0x7a>
 80117fe:	2300      	movs	r3, #0
 8011800:	f844 3c04 	str.w	r3, [r4, #-4]
 8011804:	2501      	movs	r5, #1
 8011806:	3c04      	subs	r4, #4
 8011808:	6822      	ldr	r2, [r4, #0]
 801180a:	f000 000f 	and.w	r0, r0, #15
 801180e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011812:	6020      	str	r0, [r4, #0]
 8011814:	e7b5      	b.n	8011782 <__hexnan+0x7a>
 8011816:	2508      	movs	r5, #8
 8011818:	e7b3      	b.n	8011782 <__hexnan+0x7a>
 801181a:	9b01      	ldr	r3, [sp, #4]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d0dd      	beq.n	80117dc <__hexnan+0xd4>
 8011820:	f1c3 0320 	rsb	r3, r3, #32
 8011824:	f04f 32ff 	mov.w	r2, #4294967295
 8011828:	40da      	lsrs	r2, r3
 801182a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801182e:	4013      	ands	r3, r2
 8011830:	f846 3c04 	str.w	r3, [r6, #-4]
 8011834:	e7d2      	b.n	80117dc <__hexnan+0xd4>
 8011836:	3f04      	subs	r7, #4
 8011838:	e7d0      	b.n	80117dc <__hexnan+0xd4>
 801183a:	2004      	movs	r0, #4
 801183c:	e7d5      	b.n	80117ea <__hexnan+0xe2>

0801183e <__ascii_mbtowc>:
 801183e:	b082      	sub	sp, #8
 8011840:	b901      	cbnz	r1, 8011844 <__ascii_mbtowc+0x6>
 8011842:	a901      	add	r1, sp, #4
 8011844:	b142      	cbz	r2, 8011858 <__ascii_mbtowc+0x1a>
 8011846:	b14b      	cbz	r3, 801185c <__ascii_mbtowc+0x1e>
 8011848:	7813      	ldrb	r3, [r2, #0]
 801184a:	600b      	str	r3, [r1, #0]
 801184c:	7812      	ldrb	r2, [r2, #0]
 801184e:	1e10      	subs	r0, r2, #0
 8011850:	bf18      	it	ne
 8011852:	2001      	movne	r0, #1
 8011854:	b002      	add	sp, #8
 8011856:	4770      	bx	lr
 8011858:	4610      	mov	r0, r2
 801185a:	e7fb      	b.n	8011854 <__ascii_mbtowc+0x16>
 801185c:	f06f 0001 	mvn.w	r0, #1
 8011860:	e7f8      	b.n	8011854 <__ascii_mbtowc+0x16>

08011862 <_realloc_r>:
 8011862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011866:	4607      	mov	r7, r0
 8011868:	4614      	mov	r4, r2
 801186a:	460d      	mov	r5, r1
 801186c:	b921      	cbnz	r1, 8011878 <_realloc_r+0x16>
 801186e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011872:	4611      	mov	r1, r2
 8011874:	f7fd bcc8 	b.w	800f208 <_malloc_r>
 8011878:	b92a      	cbnz	r2, 8011886 <_realloc_r+0x24>
 801187a:	f7fd fc51 	bl	800f120 <_free_r>
 801187e:	4625      	mov	r5, r4
 8011880:	4628      	mov	r0, r5
 8011882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011886:	f000 f86b 	bl	8011960 <_malloc_usable_size_r>
 801188a:	4284      	cmp	r4, r0
 801188c:	4606      	mov	r6, r0
 801188e:	d802      	bhi.n	8011896 <_realloc_r+0x34>
 8011890:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011894:	d8f4      	bhi.n	8011880 <_realloc_r+0x1e>
 8011896:	4621      	mov	r1, r4
 8011898:	4638      	mov	r0, r7
 801189a:	f7fd fcb5 	bl	800f208 <_malloc_r>
 801189e:	4680      	mov	r8, r0
 80118a0:	b908      	cbnz	r0, 80118a6 <_realloc_r+0x44>
 80118a2:	4645      	mov	r5, r8
 80118a4:	e7ec      	b.n	8011880 <_realloc_r+0x1e>
 80118a6:	42b4      	cmp	r4, r6
 80118a8:	4622      	mov	r2, r4
 80118aa:	4629      	mov	r1, r5
 80118ac:	bf28      	it	cs
 80118ae:	4632      	movcs	r2, r6
 80118b0:	f7fc fda9 	bl	800e406 <memcpy>
 80118b4:	4629      	mov	r1, r5
 80118b6:	4638      	mov	r0, r7
 80118b8:	f7fd fc32 	bl	800f120 <_free_r>
 80118bc:	e7f1      	b.n	80118a2 <_realloc_r+0x40>

080118be <__ascii_wctomb>:
 80118be:	4603      	mov	r3, r0
 80118c0:	4608      	mov	r0, r1
 80118c2:	b141      	cbz	r1, 80118d6 <__ascii_wctomb+0x18>
 80118c4:	2aff      	cmp	r2, #255	@ 0xff
 80118c6:	d904      	bls.n	80118d2 <__ascii_wctomb+0x14>
 80118c8:	228a      	movs	r2, #138	@ 0x8a
 80118ca:	601a      	str	r2, [r3, #0]
 80118cc:	f04f 30ff 	mov.w	r0, #4294967295
 80118d0:	4770      	bx	lr
 80118d2:	700a      	strb	r2, [r1, #0]
 80118d4:	2001      	movs	r0, #1
 80118d6:	4770      	bx	lr

080118d8 <_raise_r>:
 80118d8:	291f      	cmp	r1, #31
 80118da:	b538      	push	{r3, r4, r5, lr}
 80118dc:	4605      	mov	r5, r0
 80118de:	460c      	mov	r4, r1
 80118e0:	d904      	bls.n	80118ec <_raise_r+0x14>
 80118e2:	2316      	movs	r3, #22
 80118e4:	6003      	str	r3, [r0, #0]
 80118e6:	f04f 30ff 	mov.w	r0, #4294967295
 80118ea:	bd38      	pop	{r3, r4, r5, pc}
 80118ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80118ee:	b112      	cbz	r2, 80118f6 <_raise_r+0x1e>
 80118f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118f4:	b94b      	cbnz	r3, 801190a <_raise_r+0x32>
 80118f6:	4628      	mov	r0, r5
 80118f8:	f000 f830 	bl	801195c <_getpid_r>
 80118fc:	4622      	mov	r2, r4
 80118fe:	4601      	mov	r1, r0
 8011900:	4628      	mov	r0, r5
 8011902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011906:	f000 b817 	b.w	8011938 <_kill_r>
 801190a:	2b01      	cmp	r3, #1
 801190c:	d00a      	beq.n	8011924 <_raise_r+0x4c>
 801190e:	1c59      	adds	r1, r3, #1
 8011910:	d103      	bne.n	801191a <_raise_r+0x42>
 8011912:	2316      	movs	r3, #22
 8011914:	6003      	str	r3, [r0, #0]
 8011916:	2001      	movs	r0, #1
 8011918:	e7e7      	b.n	80118ea <_raise_r+0x12>
 801191a:	2100      	movs	r1, #0
 801191c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011920:	4620      	mov	r0, r4
 8011922:	4798      	blx	r3
 8011924:	2000      	movs	r0, #0
 8011926:	e7e0      	b.n	80118ea <_raise_r+0x12>

08011928 <raise>:
 8011928:	4b02      	ldr	r3, [pc, #8]	@ (8011934 <raise+0xc>)
 801192a:	4601      	mov	r1, r0
 801192c:	6818      	ldr	r0, [r3, #0]
 801192e:	f7ff bfd3 	b.w	80118d8 <_raise_r>
 8011932:	bf00      	nop
 8011934:	20000060 	.word	0x20000060

08011938 <_kill_r>:
 8011938:	b538      	push	{r3, r4, r5, lr}
 801193a:	4d07      	ldr	r5, [pc, #28]	@ (8011958 <_kill_r+0x20>)
 801193c:	2300      	movs	r3, #0
 801193e:	4604      	mov	r4, r0
 8011940:	4608      	mov	r0, r1
 8011942:	4611      	mov	r1, r2
 8011944:	602b      	str	r3, [r5, #0]
 8011946:	f7f1 fb90 	bl	800306a <_kill>
 801194a:	1c43      	adds	r3, r0, #1
 801194c:	d102      	bne.n	8011954 <_kill_r+0x1c>
 801194e:	682b      	ldr	r3, [r5, #0]
 8011950:	b103      	cbz	r3, 8011954 <_kill_r+0x1c>
 8011952:	6023      	str	r3, [r4, #0]
 8011954:	bd38      	pop	{r3, r4, r5, pc}
 8011956:	bf00      	nop
 8011958:	20004068 	.word	0x20004068

0801195c <_getpid_r>:
 801195c:	f7f1 bb7d 	b.w	800305a <_getpid>

08011960 <_malloc_usable_size_r>:
 8011960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011964:	1f18      	subs	r0, r3, #4
 8011966:	2b00      	cmp	r3, #0
 8011968:	bfbc      	itt	lt
 801196a:	580b      	ldrlt	r3, [r1, r0]
 801196c:	18c0      	addlt	r0, r0, r3
 801196e:	4770      	bx	lr

08011970 <_init>:
 8011970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011972:	bf00      	nop
 8011974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011976:	bc08      	pop	{r3}
 8011978:	469e      	mov	lr, r3
 801197a:	4770      	bx	lr

0801197c <_fini>:
 801197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801197e:	bf00      	nop
 8011980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011982:	bc08      	pop	{r3}
 8011984:	469e      	mov	lr, r3
 8011986:	4770      	bx	lr
