
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f378  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  0800f508  0800f508  00010508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdac  0800fdac  00011224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fdac  0800fdac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdb4  0800fdb4  00011224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdb4  0800fdb4  00010db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fdb8  0800fdb8  00010db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800fdbc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d94  20000224  0800ffe0  00011224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fb8  0800ffe0  00011fb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028d20  00000000  00000000  00011254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e65  00000000  00000000  00039f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  0003fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bce  00000000  00000000  00042208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030d93  00000000  00000000  00043dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d9be  00000000  00000000  00074b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b092  00000000  00000000  000a2527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ad5b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acc8  00000000  00000000  001ad5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001b82c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4f0 	.word	0x0800f4f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800f4f0 	.word	0x0800f4f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8001026:	4b60      	ldr	r3, [pc, #384]	@ (80011a8 <MX_BlueNRG_MS_Init+0x188>)
 8001028:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 800102a:	f000 f8f5 	bl	8001218 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800102e:	2000      	movs	r0, #0
 8001030:	f001 ff22 	bl	8002e78 <BSP_PB_GetState>
 8001034:	4603      	mov	r3, r0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b5c      	ldr	r3, [pc, #368]	@ (80011ac <MX_BlueNRG_MS_Init+0x18c>)
 800103a:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 800103c:	2100      	movs	r1, #0
 800103e:	485c      	ldr	r0, [pc, #368]	@ (80011b0 <MX_BlueNRG_MS_Init+0x190>)
 8001040:	f008 f8b8 	bl	80091b4 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001044:	1dba      	adds	r2, r7, #6
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f007 ff26 	bl	8008e9e <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8001052:	f007 ff66 	bl	8008f22 <hci_reset>
  HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	@ 0x64
 8001058:	f002 fc7c 	bl	8003954 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 800105c:	7a3b      	ldrb	r3, [r7, #8]
 800105e:	4619      	mov	r1, r3
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	461a      	mov	r2, r3
 8001064:	4853      	ldr	r0, [pc, #332]	@ (80011b4 <MX_BlueNRG_MS_Init+0x194>)
 8001066:	f00a fd91 	bl	800bb8c <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800106a:	7a3b      	ldrb	r3, [r7, #8]
 800106c:	2b30      	cmp	r3, #48	@ 0x30
 800106e:	d902      	bls.n	8001076 <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;
 8001070:	4b51      	ldr	r3, [pc, #324]	@ (80011b8 <MX_BlueNRG_MS_Init+0x198>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8001076:	f107 0209 	add.w	r2, r7, #9
 800107a:	4b50      	ldr	r3, [pc, #320]	@ (80011bc <MX_BlueNRG_MS_Init+0x19c>)
 800107c:	2106      	movs	r1, #6
 800107e:	2080      	movs	r0, #128	@ 0x80
 8001080:	f007 fe87 	bl	8008d92 <aci_hal_read_config_data>
 8001084:	4603      	mov	r3, r0
 8001086:	617b      	str	r3, [r7, #20]

  if (ret) {
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 800108e:	484c      	ldr	r0, [pc, #304]	@ (80011c0 <MX_BlueNRG_MS_Init+0x1a0>)
 8001090:	f00a fde4 	bl	800bc5c <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001094:	4b49      	ldr	r3, [pc, #292]	@ (80011bc <MX_BlueNRG_MS_Init+0x19c>)
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800109c:	2bc0      	cmp	r3, #192	@ 0xc0
 800109e:	d004      	beq.n	80010aa <MX_BlueNRG_MS_Init+0x8a>
    PRINTF("Static Random address not well formed.\n");
 80010a0:	4848      	ldr	r0, [pc, #288]	@ (80011c4 <MX_BlueNRG_MS_Init+0x1a4>)
 80010a2:	f00a fddb 	bl	800bc5c <puts>
    while(1);
 80010a6:	bf00      	nop
 80010a8:	e7fd      	b.n	80010a6 <MX_BlueNRG_MS_Init+0x86>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 80010aa:	f007 fc36 	bl	800891a <aci_gatt_init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	617b      	str	r3, [r7, #20]
  if(ret){
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <MX_BlueNRG_MS_Init+0x9e>
    PRINTF("GATT_Init failed.\n");
 80010b8:	4843      	ldr	r0, [pc, #268]	@ (80011c8 <MX_BlueNRG_MS_Init+0x1a8>)
 80010ba:	f00a fdcf 	bl	800bc5c <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 80010be:	4b3e      	ldr	r3, [pc, #248]	@ (80011b8 <MX_BlueNRG_MS_Init+0x198>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d110      	bne.n	80010e8 <MX_BlueNRG_MS_Init+0xc8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010c6:	f107 020e 	add.w	r2, r7, #14
 80010ca:	f107 030a 	add.w	r3, r7, #10
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	4613      	mov	r3, r2
 80010d8:	2207      	movs	r2, #7
 80010da:	2100      	movs	r1, #0
 80010dc:	2001      	movs	r0, #1
 80010de:	f007 f9f0 	bl	80084c2 <aci_gap_init_IDB05A1>
 80010e2:	4603      	mov	r3, r0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e00a      	b.n	80010fe <MX_BlueNRG_MS_Init+0xde>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010e8:	f107 030a 	add.w	r3, r7, #10
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	f107 010e 	add.w	r1, r7, #14
 80010f4:	2001      	movs	r0, #1
 80010f6:	f007 fa34 	bl	8008562 <aci_gap_init_IDB04A1>
 80010fa:	4603      	mov	r3, r0
 80010fc:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <MX_BlueNRG_MS_Init+0xea>
    PRINTF("GAP_Init failed.\n");
 8001104:	4831      	ldr	r0, [pc, #196]	@ (80011cc <MX_BlueNRG_MS_Init+0x1ac>)
 8001106:	f00a fda9 	bl	800bc5c <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800110a:	89fc      	ldrh	r4, [r7, #14]
 800110c:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 800110e:	6938      	ldr	r0, [r7, #16]
 8001110:	f7ff f8ae 	bl	8000270 <strlen>
 8001114:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001116:	b2da      	uxtb	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	2200      	movs	r2, #0
 8001120:	4629      	mov	r1, r5
 8001122:	4620      	mov	r0, r4
 8001124:	f007 fd70 	bl	8008c08 <aci_gatt_update_char_value>
 8001128:	4603      	mov	r3, r0
 800112a:	617b      	str	r3, [r7, #20]
  if (ret) {
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d004      	beq.n	800113c <MX_BlueNRG_MS_Init+0x11c>
    PRINTF("aci_gatt_update_char_value failed.\n");
 8001132:	4827      	ldr	r0, [pc, #156]	@ (80011d0 <MX_BlueNRG_MS_Init+0x1b0>)
 8001134:	f00a fd92 	bl	800bc5c <puts>
    while(1);
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <MX_BlueNRG_MS_Init+0x118>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800113c:	2301      	movs	r3, #1
 800113e:	9303      	str	r3, [sp, #12]
 8001140:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <MX_BlueNRG_MS_Init+0x1b4>)
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	2300      	movs	r3, #0
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2310      	movs	r3, #16
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2307      	movs	r3, #7
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2001      	movs	r0, #1
 8001154:	f007 fb39 	bl	80087ca <aci_gap_set_auth_requirement>
 8001158:	4603      	mov	r3, r0
 800115a:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <MX_BlueNRG_MS_Init+0x14c>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001162:	481d      	ldr	r0, [pc, #116]	@ (80011d8 <MX_BlueNRG_MS_Init+0x1b8>)
 8001164:	f00a fd7a 	bl	800bc5c <puts>
    while(1);
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <MX_BlueNRG_MS_Init+0x148>
  }

  PRINTF("BLE Stack Initialized\n");
 800116c:	481b      	ldr	r0, [pc, #108]	@ (80011dc <MX_BlueNRG_MS_Init+0x1bc>)
 800116e:	f00a fd75 	bl	800bc5c <puts>
  //  } else {
  //     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
  //     while(1);
  //  }

    ret = Add_Accel_Service();
 8001172:	f000 f86f 	bl	8001254 <Add_Accel_Service>
 8001176:	4603      	mov	r3, r0
 8001178:	617b      	str	r3, [r7, #20]
	 if(ret == BLE_STATUS_SUCCESS) {
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <MX_BlueNRG_MS_Init+0x168>
		PRINTF("Accel_Service added successfully.\n");
 8001180:	4817      	ldr	r0, [pc, #92]	@ (80011e0 <MX_BlueNRG_MS_Init+0x1c0>)
 8001182:	f00a fd6b 	bl	800bc5c <puts>
 8001186:	e005      	b.n	8001194 <MX_BlueNRG_MS_Init+0x174>
	 } else {
		PRINTF("Error while adding BlueMS Accel_Service: 0x%02x\r\n", ret);
 8001188:	6979      	ldr	r1, [r7, #20]
 800118a:	4816      	ldr	r0, [pc, #88]	@ (80011e4 <MX_BlueNRG_MS_Init+0x1c4>)
 800118c:	f00a fcfe 	bl	800bb8c <iprintf>
		while(1);
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <MX_BlueNRG_MS_Init+0x170>
	 }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8001194:	2104      	movs	r1, #4
 8001196:	2001      	movs	r0, #1
 8001198:	f007 fe50 	bl	8008e3c <aci_hal_set_tx_power_level>
 800119c:	4603      	mov	r3, r0
 800119e:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdb0      	pop	{r4, r5, r7, pc}
 80011a8:	0800f508 	.word	0x0800f508
 80011ac:	20000000 	.word	0x20000000
 80011b0:	08001a09 	.word	0x08001a09
 80011b4:	0800f510 	.word	0x0800f510
 80011b8:	20000240 	.word	0x20000240
 80011bc:	20000244 	.word	0x20000244
 80011c0:	0800f524 	.word	0x0800f524
 80011c4:	0800f548 	.word	0x0800f548
 80011c8:	0800f570 	.word	0x0800f570
 80011cc:	0800f584 	.word	0x0800f584
 80011d0:	0800f598 	.word	0x0800f598
 80011d4:	0001e240 	.word	0x0001e240
 80011d8:	0800f5bc 	.word	0x0800f5bc
 80011dc:	0800f5ec 	.word	0x0800f5ec
 80011e0:	0800f604 	.word	0x0800f604
 80011e4:	0800f628 	.word	0x0800f628

080011e8 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  if (set_connectable)
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <MX_BlueNRG_MS_Process+0x28>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <MX_BlueNRG_MS_Process+0x1e>
  {
	PRINTF("Set_connectable\n");
 80011f6:	4807      	ldr	r0, [pc, #28]	@ (8001214 <MX_BlueNRG_MS_Process+0x2c>)
 80011f8:	f00a fd30 	bl	800bc5c <puts>
	Set_DeviceConnectable();
 80011fc:	f000 fb78 	bl	80018f0 <Set_DeviceConnectable>
	set_connectable = FALSE;
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <MX_BlueNRG_MS_Process+0x28>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
  }
  hci_user_evt_proc();
 8001206:	f008 f94f 	bl	80094a8 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000004 	.word	0x20000004
 8001214:	0800f65c 	.word	0x0800f65c

08001218 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800121c:	2101      	movs	r1, #1
 800121e:	2000      	movs	r0, #0
 8001220:	f001 fdd6 	bl	8002dd0 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8001224:	2000      	movs	r0, #0
 8001226:	f001 fd81 	bl	8002d2c <BSP_LED_Init>

  BSP_COM_Init(COM1);
 800122a:	2000      	movs	r0, #0
 800122c:	f001 fe82 	bl	8002f34 <BSP_COM_Init>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800123e:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <BSP_PB_Callback+0x1c>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	2000024a 	.word	0x2000024a

08001254 <Add_Accel_Service>:
/**
 * @brief  Add the Accelerometer Service and its characteristics
 * @retval Status
 */
tBleStatus Add_Accel_Service(void)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b08d      	sub	sp, #52	@ 0x34
 8001258:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  // Add Accelerometer Service
  COPY_ACCEL_SERVICE_UUID(uuid);
 800125a:	2300      	movs	r3, #0
 800125c:	713b      	strb	r3, [r7, #4]
 800125e:	2300      	movs	r3, #0
 8001260:	717b      	strb	r3, [r7, #5]
 8001262:	2300      	movs	r3, #0
 8001264:	71bb      	strb	r3, [r7, #6]
 8001266:	2300      	movs	r3, #0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	2300      	movs	r3, #0
 800126c:	723b      	strb	r3, [r7, #8]
 800126e:	2300      	movs	r3, #0
 8001270:	727b      	strb	r3, [r7, #9]
 8001272:	2300      	movs	r3, #0
 8001274:	72bb      	strb	r3, [r7, #10]
 8001276:	2300      	movs	r3, #0
 8001278:	72fb      	strb	r3, [r7, #11]
 800127a:	23b0      	movs	r3, #176	@ 0xb0
 800127c:	733b      	strb	r3, [r7, #12]
 800127e:	2300      	movs	r3, #0
 8001280:	737b      	strb	r3, [r7, #13]
 8001282:	2300      	movs	r3, #0
 8001284:	73bb      	strb	r3, [r7, #14]
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	2300      	movs	r3, #0
 800128c:	743b      	strb	r3, [r7, #16]
 800128e:	2300      	movs	r3, #0
 8001290:	747b      	strb	r3, [r7, #17]
 8001292:	2300      	movs	r3, #0
 8001294:	74bb      	strb	r3, [r7, #18]
 8001296:	2300      	movs	r3, #0
 8001298:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800129a:	4b5c      	ldr	r3, [pc, #368]	@ (800140c <Add_Accel_Service+0x1b8>)
 800129c:	461c      	mov	r4, r3
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80012a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001410 <Add_Accel_Service+0x1bc>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2306      	movs	r3, #6
 80012ac:	2201      	movs	r2, #1
 80012ae:	4957      	ldr	r1, [pc, #348]	@ (800140c <Add_Accel_Service+0x1b8>)
 80012b0:	2002      	movs	r0, #2
 80012b2:	f007 fb55 	bl	8008960 <aci_gatt_add_serv>
 80012b6:	4603      	mov	r3, r0
 80012b8:	75fb      	strb	r3, [r7, #23]
                          3*2, &AccelServiceHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <Add_Accel_Service+0x70>
    return BLE_STATUS_ERROR;
 80012c0:	2347      	movs	r3, #71	@ 0x47
 80012c2:	e09e      	b.n	8001402 <Add_Accel_Service+0x1ae>

  // Add Accelerometer Data Characteristic (notify)
  COPY_ACCEL_DATA_CHAR_UUID(uuid);
 80012c4:	2300      	movs	r3, #0
 80012c6:	713b      	strb	r3, [r7, #4]
 80012c8:	2300      	movs	r3, #0
 80012ca:	717b      	strb	r3, [r7, #5]
 80012cc:	2300      	movs	r3, #0
 80012ce:	71bb      	strb	r3, [r7, #6]
 80012d0:	2300      	movs	r3, #0
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	2300      	movs	r3, #0
 80012d6:	723b      	strb	r3, [r7, #8]
 80012d8:	2300      	movs	r3, #0
 80012da:	727b      	strb	r3, [r7, #9]
 80012dc:	2300      	movs	r3, #0
 80012de:	72bb      	strb	r3, [r7, #10]
 80012e0:	2300      	movs	r3, #0
 80012e2:	72fb      	strb	r3, [r7, #11]
 80012e4:	23b0      	movs	r3, #176	@ 0xb0
 80012e6:	733b      	strb	r3, [r7, #12]
 80012e8:	2300      	movs	r3, #0
 80012ea:	737b      	strb	r3, [r7, #13]
 80012ec:	2300      	movs	r3, #0
 80012ee:	73bb      	strb	r3, [r7, #14]
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	2301      	movs	r3, #1
 80012f6:	743b      	strb	r3, [r7, #16]
 80012f8:	2300      	movs	r3, #0
 80012fa:	747b      	strb	r3, [r7, #17]
 80012fc:	2300      	movs	r3, #0
 80012fe:	74bb      	strb	r3, [r7, #18]
 8001300:	2300      	movs	r3, #0
 8001302:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001304:	4b43      	ldr	r3, [pc, #268]	@ (8001414 <Add_Accel_Service+0x1c0>)
 8001306:	461c      	mov	r4, r3
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_char(AccelServiceHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001310:	4b3f      	ldr	r3, [pc, #252]	@ (8001410 <Add_Accel_Service+0x1bc>)
 8001312:	8818      	ldrh	r0, [r3, #0]
 8001314:	4b40      	ldr	r3, [pc, #256]	@ (8001418 <Add_Accel_Service+0x1c4>)
 8001316:	9305      	str	r3, [sp, #20]
 8001318:	2300      	movs	r3, #0
 800131a:	9304      	str	r3, [sp, #16]
 800131c:	2310      	movs	r3, #16
 800131e:	9303      	str	r3, [sp, #12]
 8001320:	2304      	movs	r3, #4
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2300      	movs	r3, #0
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	2312      	movs	r3, #18
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2306      	movs	r3, #6
 800132e:	4a39      	ldr	r2, [pc, #228]	@ (8001414 <Add_Accel_Service+0x1c0>)
 8001330:	2102      	movs	r1, #2
 8001332:	f007 fb9e 	bl	8008a72 <aci_gatt_add_char>
 8001336:	4603      	mov	r3, r0
 8001338:	75fb      	strb	r3, [r7, #23]
                          3*2,  // xyz(3*2)
                          CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          16, 0, &AccelDataCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <Add_Accel_Service+0xf0>
    return BLE_STATUS_ERROR;
 8001340:	2347      	movs	r3, #71	@ 0x47
 8001342:	e05e      	b.n	8001402 <Add_Accel_Service+0x1ae>

  // Add Accelerometer Frequency Characteristic (read/write)
  COPY_ACCEL_FREQ_CHAR_UUID(uuid);
 8001344:	2300      	movs	r3, #0
 8001346:	713b      	strb	r3, [r7, #4]
 8001348:	2300      	movs	r3, #0
 800134a:	717b      	strb	r3, [r7, #5]
 800134c:	2300      	movs	r3, #0
 800134e:	71bb      	strb	r3, [r7, #6]
 8001350:	2300      	movs	r3, #0
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	2300      	movs	r3, #0
 8001356:	723b      	strb	r3, [r7, #8]
 8001358:	2300      	movs	r3, #0
 800135a:	727b      	strb	r3, [r7, #9]
 800135c:	2300      	movs	r3, #0
 800135e:	72bb      	strb	r3, [r7, #10]
 8001360:	2300      	movs	r3, #0
 8001362:	72fb      	strb	r3, [r7, #11]
 8001364:	23b0      	movs	r3, #176	@ 0xb0
 8001366:	733b      	strb	r3, [r7, #12]
 8001368:	2300      	movs	r3, #0
 800136a:	737b      	strb	r3, [r7, #13]
 800136c:	2300      	movs	r3, #0
 800136e:	73bb      	strb	r3, [r7, #14]
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	2302      	movs	r3, #2
 8001376:	743b      	strb	r3, [r7, #16]
 8001378:	2300      	movs	r3, #0
 800137a:	747b      	strb	r3, [r7, #17]
 800137c:	2300      	movs	r3, #0
 800137e:	74bb      	strb	r3, [r7, #18]
 8001380:	2300      	movs	r3, #0
 8001382:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001384:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <Add_Accel_Service+0x1c0>)
 8001386:	461c      	mov	r4, r3
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_char(AccelServiceHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001390:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <Add_Accel_Service+0x1bc>)
 8001392:	8818      	ldrh	r0, [r3, #0]
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <Add_Accel_Service+0x1c8>)
 8001396:	9305      	str	r3, [sp, #20]
 8001398:	2300      	movs	r3, #0
 800139a:	9304      	str	r3, [sp, #16]
 800139c:	2310      	movs	r3, #16
 800139e:	9303      	str	r3, [sp, #12]
 80013a0:	2305      	movs	r3, #5
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2300      	movs	r3, #0
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	230a      	movs	r3, #10
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2302      	movs	r3, #2
 80013ae:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <Add_Accel_Service+0x1c0>)
 80013b0:	2102      	movs	r1, #2
 80013b2:	f007 fb5e 	bl	8008a72 <aci_gatt_add_char>
 80013b6:	4603      	mov	r3, r0
 80013b8:	75fb      	strb	r3, [r7, #23]
                          2,  // 2 bytes for frequency value (uint16_t)
                          CHAR_PROP_READ|CHAR_PROP_WRITE,
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE|GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          16, 0, &AccelFreqCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <Add_Accel_Service+0x170>
    return BLE_STATUS_ERROR;
 80013c0:	2347      	movs	r3, #71	@ 0x47
 80013c2:	e01e      	b.n	8001402 <Add_Accel_Service+0x1ae>

  // Initialize the frequency value
  uint8_t freqData[2];
  HOST_TO_LE_16(freqData, accelSamplingFreq);
 80013c4:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <Add_Accel_Service+0x1cc>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	703b      	strb	r3, [r7, #0]
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <Add_Accel_Service+0x1cc>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	707b      	strb	r3, [r7, #1]
  ret = aci_gatt_update_char_value(AccelServiceHandle, AccelFreqCharHandle,
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <Add_Accel_Service+0x1bc>)
 80013da:	8818      	ldrh	r0, [r3, #0]
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <Add_Accel_Service+0x1c8>)
 80013de:	8819      	ldrh	r1, [r3, #0]
 80013e0:	463b      	mov	r3, r7
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2302      	movs	r3, #2
 80013e6:	2200      	movs	r2, #0
 80013e8:	f007 fc0e 	bl	8008c08 <aci_gatt_update_char_value>
 80013ec:	4603      	mov	r3, r0
 80013ee:	75fb      	strb	r3, [r7, #23]
                                  0, 2, freqData);
  if (ret != BLE_STATUS_SUCCESS)
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <Add_Accel_Service+0x1a6>
    return BLE_STATUS_ERROR;
 80013f6:	2347      	movs	r3, #71	@ 0x47
 80013f8:	e003      	b.n	8001402 <Add_Accel_Service+0x1ae>

  PRINTF("Accelerometer Service added successfully.\n");
 80013fa:	480a      	ldr	r0, [pc, #40]	@ (8001424 <Add_Accel_Service+0x1d0>)
 80013fc:	f00a fc2e 	bl	800bc5c <puts>
  return BLE_STATUS_SUCCESS;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	371c      	adds	r7, #28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	bf00      	nop
 800140c:	20000254 	.word	0x20000254
 8001410:	20000274 	.word	0x20000274
 8001414:	20000264 	.word	0x20000264
 8001418:	20000276 	.word	0x20000276
 800141c:	20000278 	.word	0x20000278
 8001420:	20000002 	.word	0x20000002
 8001424:	0800f66c 	.word	0x0800f66c

08001428 <Accel_Update>:
 * @brief  Update accelerometer characteristic value and notify client
 * @param  accelData Array of XYZ acceleration values
 * @retval Status
 */
tBleStatus Accel_Update(int16_t *accelData)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
  uint8_t buff[6]; // 3*2 bytes XYZ data
  tBleStatus ret;

  // Add XYZ acceleration data
  HOST_TO_LE_16(buff, accelData[0]); // X
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	723b      	strb	r3, [r7, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	121b      	asrs	r3, r3, #8
 8001442:	b21b      	sxth	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	727b      	strb	r3, [r7, #9]
  HOST_TO_LE_16(buff+2, accelData[1]); // Y
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3302      	adds	r3, #2
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	72bb      	strb	r3, [r7, #10]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3302      	adds	r3, #2
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	121b      	asrs	r3, r3, #8
 800145e:	b21b      	sxth	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	72fb      	strb	r3, [r7, #11]
  HOST_TO_LE_16(buff+4, accelData[2]); // Z
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3304      	adds	r3, #4
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	733b      	strb	r3, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3304      	adds	r3, #4
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	121b      	asrs	r3, r3, #8
 800147a:	b21b      	sxth	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	737b      	strb	r3, [r7, #13]

  ret = aci_gatt_update_char_value(AccelServiceHandle, AccelDataCharHandle,
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <Accel_Update+0x90>)
 8001482:	8818      	ldrh	r0, [r3, #0]
 8001484:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <Accel_Update+0x94>)
 8001486:	8819      	ldrh	r1, [r3, #0]
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2306      	movs	r3, #6
 8001490:	2200      	movs	r2, #0
 8001492:	f007 fbb9 	bl	8008c08 <aci_gatt_update_char_value>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
                                   0, 6, buff);
  if (ret != BLE_STATUS_SUCCESS) {
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <Accel_Update+0x86>
    PRINTF("Error while updating Accelerometer data characteristic: 0x%02X\n", ret);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <Accel_Update+0x98>)
 80014a6:	f00a fb71 	bl	800bb8c <iprintf>
    return BLE_STATUS_ERROR;
 80014aa:	2347      	movs	r3, #71	@ 0x47
 80014ac:	e000      	b.n	80014b0 <Accel_Update+0x88>
  }

  return BLE_STATUS_SUCCESS;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000274 	.word	0x20000274
 80014bc:	20000276 	.word	0x20000276
 80014c0:	0800f698 	.word	0x0800f698

080014c4 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	@ 0x30
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80014d0:	f002 fa34 	bl	800393c <HAL_GetTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	743b      	strb	r3, [r7, #16]
 80014dc:	f002 fa2e 	bl	800393c <HAL_GetTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	0adb      	lsrs	r3, r3, #11
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	425b      	negs	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	74bb      	strb	r3, [r7, #18]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	425b      	negs	r3, r3
 80014fa:	121b      	asrs	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	753b      	strb	r3, [r7, #20]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	121b      	asrs	r3, r3, #8
 800150e:	b2db      	uxtb	r3, r3
 8001510:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	425b      	negs	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	75bb      	strb	r3, [r7, #22]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	425b      	negs	r3, r3
 8001524:	121b      	asrs	r3, r3, #8
 8001526:	b2db      	uxtb	r3, r3
 8001528:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	763b      	strb	r3, [r7, #24]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	121b      	asrs	r3, r3, #8
 8001538:	b2db      	uxtb	r3, r3
 800153a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	76bb      	strb	r3, [r7, #26]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	121b      	asrs	r3, r3, #8
 800154a:	b2db      	uxtb	r3, r3
 800154c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	773b      	strb	r3, [r7, #28]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	121b      	asrs	r3, r3, #8
 800155c:	b2db      	uxtb	r3, r3
 800155e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	77bb      	strb	r3, [r7, #30]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	121b      	asrs	r3, r3, #8
 800156e:	b2db      	uxtb	r3, r3
 8001570:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f887 3020 	strb.w	r3, [r7, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	121b      	asrs	r3, r3, #8
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	121b      	asrs	r3, r3, #8
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <Acc_Update+0x118>)
 80015a0:	8818      	ldrh	r0, [r3, #0]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <Acc_Update+0x11c>)
 80015a4:	8819      	ldrh	r1, [r3, #0]
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2314      	movs	r3, #20
 80015ae:	2200      	movs	r2, #0
 80015b0:	f007 fb2a 	bl	8008c08 <aci_gatt_update_char_value>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80015ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 80015c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015c6:	4619      	mov	r1, r3
 80015c8:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <Acc_Update+0x120>)
 80015ca:	f00a fadf 	bl	800bb8c <iprintf>
    return BLE_STATUS_ERROR ;
 80015ce:	2347      	movs	r3, #71	@ 0x47
 80015d0:	e000      	b.n	80015d4 <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000024c 	.word	0x2000024c
 80015e0:	20000250 	.word	0x20000250
 80015e4:	0800f6d8 	.word	0x0800f6d8

080015e8 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80015e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ec:	b08e      	sub	sp, #56	@ 0x38
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 80015f4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80015f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001768 <Read_Request_CB+0x180>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d105      	bne.n	800160c <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8001600:	4a5a      	ldr	r2, [pc, #360]	@ (800176c <Read_Request_CB+0x184>)
 8001602:	495b      	ldr	r1, [pc, #364]	@ (8001770 <Read_Request_CB+0x188>)
 8001604:	485b      	ldr	r0, [pc, #364]	@ (8001774 <Read_Request_CB+0x18c>)
 8001606:	f7ff ff5d 	bl	80014c4 <Acc_Update>
 800160a:	e091      	b.n	8001730 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 800160c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800160e:	4b5a      	ldr	r3, [pc, #360]	@ (8001778 <Read_Request_CB+0x190>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 808b 	bne.w	8001730 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 800161a:	f009 fb53 	bl	800acc4 <rand>
 800161e:	4603      	mov	r3, r0
 8001620:	17da      	asrs	r2, r3, #31
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	61fa      	str	r2, [r7, #28]
 8001626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	0099      	lsls	r1, r3, #2
 8001634:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001638:	0090      	lsls	r0, r2, #2
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	1851      	adds	r1, r2, r1
 8001642:	6139      	str	r1, [r7, #16]
 8001644:	69f9      	ldr	r1, [r7, #28]
 8001646:	eb43 0101 	adc.w	r1, r3, r1
 800164a:	6179      	str	r1, [r7, #20]
 800164c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001658:	f7ff fb16 	bl	8000c88 <__aeabi_uldivmod>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7fe ff92 	bl	800058c <__aeabi_ul2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b43      	ldr	r3, [pc, #268]	@ (800177c <Read_Request_CB+0x194>)
 800166e:	f7fe fe0d 	bl	800028c <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fab5 	bl	8000be8 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8001682:	f009 fb1f 	bl	800acc4 <rand>
 8001686:	4603      	mov	r3, r0
 8001688:	17da      	asrs	r2, r3, #31
 800168a:	4698      	mov	r8, r3
 800168c:	4691      	mov	r9, r2
 800168e:	4642      	mov	r2, r8
 8001690:	464b      	mov	r3, r9
 8001692:	1891      	adds	r1, r2, r2
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	415b      	adcs	r3, r3
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800169e:	eb12 0408 	adds.w	r4, r2, r8
 80016a2:	eb43 0509 	adc.w	r5, r3, r9
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	016b      	lsls	r3, r5, #5
 80016b0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80016b4:	0162      	lsls	r2, r4, #5
 80016b6:	eb14 0a02 	adds.w	sl, r4, r2
 80016ba:	eb45 0b03 	adc.w	fp, r5, r3
 80016be:	eb1a 0308 	adds.w	r3, sl, r8
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	eb4b 0309 	adc.w	r3, fp, r9
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016d6:	f7ff fad7 	bl	8000c88 <__aeabi_uldivmod>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7fe ff53 	bl	800058c <__aeabi_ul2d>
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <Read_Request_CB+0x198>)
 80016ec:	f7fe fdce 	bl	800028c <__adddf3>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa76 	bl	8000be8 <__aeabi_d2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001700:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001704:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001784 <Read_Request_CB+0x19c>
 8001708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001710:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001714:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001720:	ee17 3a90 	vmov	r3, s15
 8001724:	b21b      	sxth	r3, r3
 8001726:	4619      	mov	r1, r3
 8001728:	ee16 0a90 	vmov	r0, s13
 800172c:	f000 f894 	bl	8001858 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <Read_Request_CB+0x1a0>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d011      	beq.n	800175c <Read_Request_CB+0x174>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <Read_Request_CB+0x1a0>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f007 fafb 	bl	8008d38 <aci_gatt_allow_read>
 8001742:	4603      	mov	r3, r0
 8001744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
 8001748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <Read_Request_CB+0x174>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 8001750:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	@ (800178c <Read_Request_CB+0x1a4>)
 8001758:	f00a fa18 	bl	800bb8c <iprintf>
    }
  }
}
 800175c:	bf00      	nop
 800175e:	3738      	adds	r7, #56	@ 0x38
 8001760:	46bd      	mov	sp, r7
 8001762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001766:	bf00      	nop
 8001768:	20000250 	.word	0x20000250
 800176c:	2000029c 	.word	0x2000029c
 8001770:	20000290 	.word	0x20000290
 8001774:	20000284 	.word	0x20000284
 8001778:	2000024e 	.word	0x2000024e
 800177c:	403b0000 	.word	0x403b0000
 8001780:	408f4000 	.word	0x408f4000
 8001784:	42c80000 	.word	0x42c80000
 8001788:	2000027a 	.word	0x2000027a
 800178c:	0800f714 	.word	0x0800f714

08001790 <Write_Request_CB>:
 * @param  data_length Length of the data
 * @param  data Data to be written
 * @retval None
 */
void Write_Request_CB(uint16_t attr_handle, uint8_t data_length, uint8_t *data)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af02      	add	r7, sp, #8
 8001796:	4603      	mov	r3, r0
 8001798:	603a      	str	r2, [r7, #0]
 800179a:	80fb      	strh	r3, [r7, #6]
 800179c:	460b      	mov	r3, r1
 800179e:	717b      	strb	r3, [r7, #5]
  if(attr_handle == AccelFreqCharHandle + 1) {
 80017a0:	88fa      	ldrh	r2, [r7, #6]
 80017a2:	4b29      	ldr	r3, [pc, #164]	@ (8001848 <Write_Request_CB+0xb8>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d145      	bne.n	8001838 <Write_Request_CB+0xa8>
    // Extract frequency value from data (2 bytes, little-endian)
    accelSamplingFreq = LE_TO_HOST_16(data);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <Write_Request_CB+0xbc>)
 80017c6:	801a      	strh	r2, [r3, #0]

    // Validate the frequency (set bounds)
    if(accelSamplingFreq < 1) accelSamplingFreq = 1;     // Minimum 1 Hz
 80017c8:	4b20      	ldr	r3, [pc, #128]	@ (800184c <Write_Request_CB+0xbc>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <Write_Request_CB+0x46>
 80017d0:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <Write_Request_CB+0xbc>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	801a      	strh	r2, [r3, #0]
    if(accelSamplingFreq > 1000) accelSamplingFreq = 100; // Maximum 100 Hz
 80017d6:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <Write_Request_CB+0xbc>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017de:	d902      	bls.n	80017e6 <Write_Request_CB+0x56>
 80017e0:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <Write_Request_CB+0xbc>)
 80017e2:	2264      	movs	r2, #100	@ 0x64
 80017e4:	801a      	strh	r2, [r3, #0]

    PRINTF("New accelerometer sampling period: %.1f s\n", (float)accelSamplingFreq * 0.1);
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <Write_Request_CB+0xbc>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f2:	ee17 0a90 	vmov	r0, s15
 80017f6:	f7fe fea7 	bl	8000548 <__aeabi_f2d>
 80017fa:	a311      	add	r3, pc, #68	@ (adr r3, 8001840 <Write_Request_CB+0xb0>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fefa 	bl	80005f8 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4811      	ldr	r0, [pc, #68]	@ (8001850 <Write_Request_CB+0xc0>)
 800180a:	f00a f9bf 	bl	800bb8c <iprintf>

    // Update the characteristic value with validated frequency
    uint8_t freqData[2];
    HOST_TO_LE_16(freqData, accelSamplingFreq);
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <Write_Request_CB+0xbc>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	733b      	strb	r3, [r7, #12]
 8001816:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <Write_Request_CB+0xbc>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b29b      	uxth	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	737b      	strb	r3, [r7, #13]
    aci_gatt_update_char_value(AccelServiceHandle, AccelFreqCharHandle,
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <Write_Request_CB+0xc4>)
 8001824:	8818      	ldrh	r0, [r3, #0]
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <Write_Request_CB+0xb8>)
 8001828:	8819      	ldrh	r1, [r3, #0]
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2302      	movs	r3, #2
 8001832:	2200      	movs	r2, #0
 8001834:	f007 f9e8 	bl	8008c08 <aci_gatt_update_char_value>
                              0, 2, freqData);
  }
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	9999999a 	.word	0x9999999a
 8001844:	3fb99999 	.word	0x3fb99999
 8001848:	20000278 	.word	0x20000278
 800184c:	20000002 	.word	0x20000002
 8001850:	0800f73c 	.word	0x0800f73c
 8001854:	20000274 	.word	0x20000274

08001858 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8001864:	f002 f86a 	bl	800393c <HAL_GetTick>
 8001868:	4603      	mov	r3, r0
 800186a:	08db      	lsrs	r3, r3, #3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	733b      	strb	r3, [r7, #12]
 8001870:	f002 f864 	bl	800393c <HAL_GetTick>
 8001874:	4603      	mov	r3, r0
 8001876:	0adb      	lsrs	r3, r3, #11
 8001878:	b2db      	uxtb	r3, r3
 800187a:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	73bb      	strb	r3, [r7, #14]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	121b      	asrs	r3, r3, #8
 8001886:	b2db      	uxtb	r3, r3
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	141b      	asrs	r3, r3, #16
 800188e:	b2db      	uxtb	r3, r3
 8001890:	743b      	strb	r3, [r7, #16]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	161b      	asrs	r3, r3, #24
 8001896:	b2db      	uxtb	r3, r3
 8001898:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	74bb      	strb	r3, [r7, #18]
 80018a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 80018ac:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <BlueMS_Environmental_Update+0x8c>)
 80018ae:	8818      	ldrh	r0, [r3, #0]
 80018b0:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <BlueMS_Environmental_Update+0x90>)
 80018b2:	8819      	ldrh	r1, [r3, #0]
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2308      	movs	r3, #8
 80018bc:	2200      	movs	r2, #0
 80018be:	f007 f9a3 	bl	8008c08 <aci_gatt_update_char_value>
 80018c2:	4603      	mov	r3, r0
 80018c4:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <BlueMS_Environmental_Update+0x82>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4806      	ldr	r0, [pc, #24]	@ (80018ec <BlueMS_Environmental_Update+0x94>)
 80018d2:	f00a f95b 	bl	800bb8c <iprintf>
    return BLE_STATUS_ERROR ;
 80018d6:	2347      	movs	r3, #71	@ 0x47
 80018d8:	e000      	b.n	80018dc <BlueMS_Environmental_Update+0x84>
  }

  return BLE_STATUS_SUCCESS;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000024c 	.word	0x2000024c
 80018e8:	2000024e 	.word	0x2000024e
 80018ec:	0800f768 	.word	0x0800f768

080018f0 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b092      	sub	sp, #72	@ 0x48
 80018f4:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80018f6:	4a3f      	ldr	r2, [pc, #252]	@ (80019f4 <Set_DeviceConnectable+0x104>)
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001900:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8001904:	2302      	movs	r3, #2
 8001906:	703b      	strb	r3, [r7, #0]
 8001908:	230a      	movs	r3, #10
 800190a:	707b      	strb	r3, [r7, #1]
 800190c:	2300      	movs	r3, #0
 800190e:	70bb      	strb	r3, [r7, #2]
 8001910:	2308      	movs	r3, #8
 8001912:	70fb      	strb	r3, [r7, #3]
 8001914:	2309      	movs	r3, #9
 8001916:	713b      	strb	r3, [r7, #4]
 8001918:	2342      	movs	r3, #66	@ 0x42
 800191a:	717b      	strb	r3, [r7, #5]
 800191c:	236c      	movs	r3, #108	@ 0x6c
 800191e:	71bb      	strb	r3, [r7, #6]
 8001920:	2375      	movs	r3, #117	@ 0x75
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	2365      	movs	r3, #101	@ 0x65
 8001926:	723b      	strb	r3, [r7, #8]
 8001928:	234e      	movs	r3, #78	@ 0x4e
 800192a:	727b      	strb	r3, [r7, #9]
 800192c:	2352      	movs	r3, #82	@ 0x52
 800192e:	72bb      	strb	r3, [r7, #10]
 8001930:	2347      	movs	r3, #71	@ 0x47
 8001932:	72fb      	strb	r3, [r7, #11]
 8001934:	230d      	movs	r3, #13
 8001936:	733b      	strb	r3, [r7, #12]
 8001938:	23ff      	movs	r3, #255	@ 0xff
 800193a:	737b      	strb	r3, [r7, #13]
 800193c:	2301      	movs	r3, #1
 800193e:	73bb      	strb	r3, [r7, #14]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	2300      	movs	r3, #0
 8001946:	743b      	strb	r3, [r7, #16]
 8001948:	23f4      	movs	r3, #244	@ 0xf4
 800194a:	747b      	strb	r3, [r7, #17]
 800194c:	2300      	movs	r3, #0
 800194e:	74bb      	strb	r3, [r7, #18]
 8001950:	2300      	movs	r3, #0
 8001952:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <Set_DeviceConnectable+0x108>)
 8001956:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8001958:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 800195a:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <Set_DeviceConnectable+0x108>)
 800195c:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 800195e:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8001960:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <Set_DeviceConnectable+0x108>)
 8001962:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001964:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8001966:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <Set_DeviceConnectable+0x108>)
 8001968:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 800196a:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <Set_DeviceConnectable+0x108>)
 800196e:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8001970:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <Set_DeviceConnectable+0x108>)
 8001974:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8001976:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001978:	7cbb      	ldrb	r3, [r7, #18]
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f007 fb38 	bl	8008ffa <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");
 800198a:	481c      	ldr	r0, [pc, #112]	@ (80019fc <Set_DeviceConnectable+0x10c>)
 800198c:	f00a f966 	bl	800bc5c <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001990:	2300      	movs	r3, #0
 8001992:	9306      	str	r3, [sp, #24]
 8001994:	2300      	movs	r3, #0
 8001996:	9305      	str	r3, [sp, #20]
 8001998:	2300      	movs	r3, #0
 800199a:	9304      	str	r3, [sp, #16]
 800199c:	2300      	movs	r3, #0
 800199e:	9303      	str	r3, [sp, #12]
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	2308      	movs	r3, #8
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2300      	movs	r3, #0
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 80019b4:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80019b8:	2000      	movs	r0, #0
 80019ba:	f006 fe1c 	bl	80085f6 <aci_gap_set_discoverable>
 80019be:	4603      	mov	r3, r0
 80019c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	201a      	movs	r0, #26
 80019ca:	f006 ff55 	bl	8008878 <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 80019ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 80019d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019da:	4619      	mov	r1, r3
 80019dc:	4808      	ldr	r0, [pc, #32]	@ (8001a00 <Set_DeviceConnectable+0x110>)
 80019de:	f00a f8d5 	bl	800bb8c <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 80019e2:	e002      	b.n	80019ea <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 80019e4:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <Set_DeviceConnectable+0x114>)
 80019e6:	f00a f939 	bl	800bc5c <puts>
}
 80019ea:	bf00      	nop
 80019ec:	3728      	adds	r7, #40	@ 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	0800f810 	.word	0x0800f810
 80019f8:	20000244 	.word	0x20000244
 80019fc:	0800f79c 	.word	0x0800f79c
 8001a00:	0800f7bc 	.word	0x0800f7bc
 8001a04:	0800f7e8 	.word	0x0800f7e8

08001a08 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	3301      	adds	r3, #1
 8001a18:	623b      	str	r3, [r7, #32]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d14d      	bne.n	8001abe <user_notify+0xb6>
    return;

  switch(event_pckt->evt){
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2bff      	cmp	r3, #255	@ 0xff
 8001a28:	d01f      	beq.n	8001a6a <user_notify+0x62>
 8001a2a:	2bff      	cmp	r3, #255	@ 0xff
 8001a2c:	dc4c      	bgt.n	8001ac8 <user_notify+0xc0>
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d002      	beq.n	8001a38 <user_notify+0x30>
 8001a32:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a34:	d003      	beq.n	8001a3e <user_notify+0x36>
 8001a36:	e047      	b.n	8001ac8 <user_notify+0xc0>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001a38:	f000 f84c 	bl	8001ad4 <GAP_DisconnectionComplete_CB>
    }
    break;
 8001a3c:	e044      	b.n	8001ac8 <user_notify+0xc0>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	3302      	adds	r3, #2
 8001a42:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d13a      	bne.n	8001ac2 <user_notify+0xba>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1d5a      	adds	r2, r3, #5
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f000 f84f 	bl	8001b04 <GAP_ConnectionComplete_CB>
        }
        break;
 8001a66:	bf00      	nop
      }
    }
    break;
 8001a68:	e02b      	b.n	8001ac2 <user_notify+0xba>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f640 4201 	movw	r2, #3073	@ 0xc01
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d010      	beq.n	8001aa0 <user_notify+0x98>
 8001a7e:	f640 4214 	movw	r2, #3092	@ 0xc14
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d11f      	bne.n	8001ac6 <user_notify+0xbe>

		  case EVT_BLUE_GATT_READ_PERMIT_REQ:
			{
			  evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3302      	adds	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
			  Read_Request_CB(pr->attr_handle);
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	885b      	ldrh	r3, [r3, #2]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fda8 	bl	80015e8 <Read_Request_CB>
			  PRINTF("Read Request\n");
 8001a98:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <user_notify+0xc8>)
 8001a9a:	f00a f8df 	bl	800bc5c <puts>
			}
			break;
 8001a9e:	e00d      	b.n	8001abc <user_notify+0xb4>
		  case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
		  {
			 evt_gatt_attr_modified_IDB05A1 *evt = (void*)blue_evt->data;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
			 Write_Request_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	885b      	ldrh	r3, [r3, #2]
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	7919      	ldrb	r1, [r3, #4]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3307      	adds	r3, #7
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f7ff fe6b 	bl	8001790 <Write_Request_CB>
		  }
		  break;
 8001aba:	bf00      	nop
      }
    }
    break;
 8001abc:	e003      	b.n	8001ac6 <user_notify+0xbe>
    return;
 8001abe:	bf00      	nop
 8001ac0:	e002      	b.n	8001ac8 <user_notify+0xc0>
    break;
 8001ac2:	bf00      	nop
 8001ac4:	e000      	b.n	8001ac8 <user_notify+0xc0>
    break;
 8001ac6:	bf00      	nop
  }
}
 8001ac8:	3728      	adds	r7, #40	@ 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	0800f818 	.word	0x0800f818

08001ad4 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <GAP_DisconnectionComplete_CB+0x20>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 8001ade:	4806      	ldr	r0, [pc, #24]	@ (8001af8 <GAP_DisconnectionComplete_CB+0x24>)
 8001ae0:	f00a f8bc 	bl	800bc5c <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <GAP_DisconnectionComplete_CB+0x28>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <GAP_DisconnectionComplete_CB+0x2c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000280 	.word	0x20000280
 8001af8:	0800f828 	.word	0x0800f828
 8001afc:	20000004 	.word	0x20000004
 8001b00:	2000027c 	.word	0x2000027c

08001b04 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <GAP_ConnectionComplete_CB+0x54>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001b16:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <GAP_ConnectionComplete_CB+0x58>)
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
 8001b1c:	4810      	ldr	r0, [pc, #64]	@ (8001b60 <GAP_ConnectionComplete_CB+0x5c>)
 8001b1e:	f00a f835 	bl	800bb8c <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8001b22:	2305      	movs	r3, #5
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e00a      	b.n	8001b3e <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <GAP_ConnectionComplete_CB+0x60>)
 8001b34:	f00a f82a 	bl	800bb8c <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f1      	bne.n	8001b28 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <GAP_ConnectionComplete_CB+0x64>)
 8001b4c:	f00a f81e 	bl	800bb8c <iprintf>
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000280 	.word	0x20000280
 8001b5c:	2000027a 	.word	0x2000027a
 8001b60:	0800f838 	.word	0x0800f838
 8001b64:	0800f850 	.word	0x0800f850
 8001b68:	0800f858 	.word	0x0800f858

08001b6c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <HCI_TL_SPI_Init+0x88>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b78:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf4 <HCI_TL_SPI_Init+0x88>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b80:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <HCI_TL_SPI_Init+0x88>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001b8c:	2340      	movs	r3, #64	@ 0x40
 8001b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4815      	ldr	r0, [pc, #84]	@ (8001bf8 <HCI_TL_SPI_Init+0x8c>)
 8001ba2:	f002 f977 	bl	8003e94 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001ba6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc2:	f002 f967 	bl	8003e94 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <HCI_TL_SPI_Init+0x90>)
 8001be0:	f002 f958 	bl	8003e94 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8001be4:	f001 fbe2 	bl	80033ac <BSP_SPI3_Init>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48001000 	.word	0x48001000
 8001bfc:	48000c00 	.word	0x48000c00

08001c00 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001c04:	2140      	movs	r1, #64	@ 0x40
 8001c06:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <HCI_TL_SPI_DeInit+0x28>)
 8001c08:	f002 faee 	bl	80041e8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001c0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c10:	4806      	ldr	r0, [pc, #24]	@ (8001c2c <HCI_TL_SPI_DeInit+0x2c>)
 8001c12:	f002 fae9 	bl	80041e8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1e:	f002 fae3 	bl	80041e8 <HAL_GPIO_DeInit>
  return 0;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	48001000 	.word	0x48001000
 8001c2c:	48000c00 	.word	0x48000c00

08001c30 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c3a:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <HCI_TL_SPI_Reset+0x40>)
 8001c3c:	f002 fbe0 	bl	8004400 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4a:	f002 fbd9 	bl	8004400 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001c4e:	2005      	movs	r0, #5
 8001c50:	f001 fe80 	bl	8003954 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c5e:	f002 fbcf 	bl	8004400 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001c62:	2005      	movs	r0, #5
 8001c64:	f001 fe76 	bl	8003954 <HAL_Delay>
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	48000c00 	.word	0x48000c00

08001c74 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001c84:	23ff      	movs	r3, #255	@ 0xff
 8001c86:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001c88:	230b      	movs	r3, #11
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c96:	4822      	ldr	r0, [pc, #136]	@ (8001d20 <HCI_TL_SPI_Receive+0xac>)
 8001c98:	f002 fbb2 	bl	8004400 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001c9c:	f107 010c 	add.w	r1, r7, #12
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 fbb0 	bl	800340c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001cac:	7b3b      	ldrb	r3, [r7, #12]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d12a      	bne.n	8001d08 <HCI_TL_SPI_Receive+0x94>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001cb2:	7c3b      	ldrb	r3, [r7, #16]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001cc4:	8bfb      	ldrh	r3, [r7, #30]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01e      	beq.n	8001d08 <HCI_TL_SPI_Receive+0x94>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001cca:	8bfa      	ldrh	r2, [r7, #30]
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d901      	bls.n	8001cd6 <HCI_TL_SPI_Receive+0x62>
        byte_count = size;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	777b      	strb	r3, [r7, #29]
 8001cda:	e010      	b.n	8001cfe <HCI_TL_SPI_Receive+0x8a>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001cdc:	f107 011b 	add.w	r1, r7, #27
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 fb90 	bl	800340c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001cec:	7f7b      	ldrb	r3, [r7, #29]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	7efa      	ldrb	r2, [r7, #27]
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001cf8:	7f7b      	ldrb	r3, [r7, #29]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	777b      	strb	r3, [r7, #29]
 8001cfe:	7f7b      	ldrb	r3, [r7, #29]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8bfa      	ldrh	r2, [r7, #30]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8e9      	bhi.n	8001cdc <HCI_TL_SPI_Receive+0x68>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d0e:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <HCI_TL_SPI_Receive+0xac>)
 8001d10:	f002 fb76 	bl	8004400 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001d14:	7f7b      	ldrb	r3, [r7, #29]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	48000c00 	.word	0x48000c00

08001d24 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001d30:	230a      	movs	r3, #10
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	2300      	movs	r3, #0
 8001d36:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f001 fe00 	bl	800393c <HAL_GetTick>
 8001d3c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d48:	481c      	ldr	r0, [pc, #112]	@ (8001dbc <HCI_TL_SPI_Send+0x98>)
 8001d4a:	f002 fb59 	bl	8004400 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001d4e:	f107 0108 	add.w	r1, r7, #8
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	2205      	movs	r2, #5
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 fb57 	bl	800340c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001d5e:	7a3b      	ldrb	r3, [r7, #8]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d10f      	bne.n	8001d84 <HCI_TL_SPI_Send+0x60>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001d64:	7a7b      	ldrb	r3, [r7, #9]
 8001d66:	461a      	mov	r2, r3
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d806      	bhi.n	8001d7c <HCI_TL_SPI_Send+0x58>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4913      	ldr	r1, [pc, #76]	@ (8001dc0 <HCI_TL_SPI_Send+0x9c>)
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f001 fb49 	bl	800340c <BSP_SPI3_SendRecv>
 8001d7a:	e006      	b.n	8001d8a <HCI_TL_SPI_Send+0x66>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001d7c:	f06f 0301 	mvn.w	r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e002      	b.n	8001d8a <HCI_TL_SPI_Send+0x66>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d90:	480a      	ldr	r0, [pc, #40]	@ (8001dbc <HCI_TL_SPI_Send+0x98>)
 8001d92:	f002 fb35 	bl	8004400 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001d96:	f001 fdd1 	bl	800393c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d903      	bls.n	8001dac <HCI_TL_SPI_Send+0x88>
    {
      result = -3;
 8001da4:	f06f 0302 	mvn.w	r3, #2
 8001da8:	61fb      	str	r3, [r7, #28]
      break;
 8001daa:	e002      	b.n	8001db2 <HCI_TL_SPI_Send+0x8e>
    }
  } while(result < 0);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	dbc5      	blt.n	8001d3e <HCI_TL_SPI_Send+0x1a>

  return result;
 8001db2:	69fb      	ldr	r3, [r7, #28]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	48000c00 	.word	0x48000c00
 8001dc0:	200002b0 	.word	0x200002b0

08001dc4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001dc8:	2140      	movs	r1, #64	@ 0x40
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <IsDataAvailable+0x1c>)
 8001dcc:	f002 fb00 	bl	80043d0 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	48001000 	.word	0x48001000

08001de4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <hci_tl_lowlevel_init+0x50>)
 8001dec:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001dee:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <hci_tl_lowlevel_init+0x54>)
 8001df0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001df2:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <hci_tl_lowlevel_init+0x58>)
 8001df4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <hci_tl_lowlevel_init+0x5c>)
 8001df8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <hci_tl_lowlevel_init+0x60>)
 8001dfc:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <hci_tl_lowlevel_init+0x64>)
 8001e00:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	4618      	mov	r0, r3
 8001e06:	f007 fa17 	bl	8009238 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001e0a:	4910      	ldr	r1, [pc, #64]	@ (8001e4c <hci_tl_lowlevel_init+0x68>)
 8001e0c:	4810      	ldr	r0, [pc, #64]	@ (8001e50 <hci_tl_lowlevel_init+0x6c>)
 8001e0e:	f001 fffd 	bl	8003e0c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001e12:	4a10      	ldr	r2, [pc, #64]	@ (8001e54 <hci_tl_lowlevel_init+0x70>)
 8001e14:	2100      	movs	r1, #0
 8001e16:	480e      	ldr	r0, [pc, #56]	@ (8001e50 <hci_tl_lowlevel_init+0x6c>)
 8001e18:	f001 ffde 	bl	8003dd8 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2017      	movs	r0, #23
 8001e22:	f001 fe96 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e26:	2017      	movs	r0, #23
 8001e28:	f001 feaf 	bl	8003b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	08001b6d 	.word	0x08001b6d
 8001e38:	08001c01 	.word	0x08001c01
 8001e3c:	08001d25 	.word	0x08001d25
 8001e40:	08001c75 	.word	0x08001c75
 8001e44:	08001c31 	.word	0x08001c31
 8001e48:	0800344d 	.word	0x0800344d
 8001e4c:	16000006 	.word	0x16000006
 8001e50:	200002a8 	.word	0x200002a8
 8001e54:	08001e59 	.word	0x08001e59

08001e58 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001e5c:	e005      	b.n	8001e6a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f007 fb4e 	bl	8009500 <hci_notify_asynch_evt>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001e6a:	f7ff ffab 	bl	8001dc4 <IsDataAvailable>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f4      	bne.n	8001e5e <hci_tl_lowlevel_isr+0x6>
 8001e74:	e000      	b.n	8001e78 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001e76:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <vApplicationGetIdleTaskMemory+0x30>)
 8001e92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	200003b0 	.word	0x200003b0
 8001eac:	20000404 	.word	0x20000404

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08e      	sub	sp, #56	@ 0x38
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	TERMOUT("Hello World\n");
 8001eb6:	481f      	ldr	r0, [pc, #124]	@ (8001f34 <main+0x84>)
 8001eb8:	f009 fed0 	bl	800bc5c <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ebc:	f001 fcd6 	bl	800386c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec0:	f000 f842 	bl	8001f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec4:	f000 f99c 	bl	8002200 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001ec8:	f000 f8a0 	bl	800200c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001ecc:	f000 f8d6 	bl	800207c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001ed0:	f000 f912 	bl	80020f8 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8001ed4:	f000 f936 	bl	8002144 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ed8:	f000 f964 	bl	80021a4 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8001edc:	f7ff f8a0 	bl	8001020 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8001ee0:	f001 fb56 	bl	8003590 <BSP_ACCELERO_Init>
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of TASK_ACC */
  osThreadStaticDef(TASK_ACC, Start_TASK_ACC, osPriorityHigh, 0, 512, TASK_ACCBuffer, &TASK_ACCControlBlock);
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <main+0x88>)
 8001ee6:	f107 041c 	add.w	r4, r7, #28
 8001eea:	461d      	mov	r5, r3
 8001eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ef4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK_ACCHandle = osThreadCreate(osThread(TASK_ACC), NULL);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f007 fc80 	bl	8009804 <osThreadCreate>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4a0d      	ldr	r2, [pc, #52]	@ (8001f3c <main+0x8c>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK_BLE */
  osThreadStaticDef(TASK_BLE, StartTASK_BLE, osPriorityHigh, 0, 512, TASK_BLEBuffer, &TASK_BLEControlBlock);
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <main+0x90>)
 8001f0c:	463c      	mov	r4, r7
 8001f0e:	461d      	mov	r5, r3
 8001f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK_BLEHandle = osThreadCreate(osThread(TASK_BLE), NULL);
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f007 fc6f 	bl	8009804 <osThreadCreate>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a06      	ldr	r2, [pc, #24]	@ (8001f44 <main+0x94>)
 8001f2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001f2c:	f007 fc63 	bl	80097f6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <main+0x80>
 8001f34:	0800f860 	.word	0x0800f860
 8001f38:	0800f878 	.word	0x0800f878
 8001f3c:	20000c48 	.word	0x20000c48
 8001f40:	0800f8a0 	.word	0x0800f8a0
 8001f44:	200014a0 	.word	0x200014a0

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b096      	sub	sp, #88	@ 0x58
 8001f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	2244      	movs	r2, #68	@ 0x44
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f009 ff82 	bl	800be60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f6e:	f003 fa25 	bl	80053bc <HAL_PWREx_ControlVoltageScaling>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f78:	f000 fb2e 	bl	80025d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f7c:	f003 fa00 	bl	8005380 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f80:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <SystemClock_Config+0xc0>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	4a20      	ldr	r2, [pc, #128]	@ (8002008 <SystemClock_Config+0xc0>)
 8001f88:	f023 0318 	bic.w	r3, r3, #24
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001f90:	2314      	movs	r3, #20
 8001f92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fa0:	2360      	movs	r3, #96	@ 0x60
 8001fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001fb0:	2328      	movs	r3, #40	@ 0x28
 8001fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fb4:	2307      	movs	r3, #7
 8001fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 fb1b 	bl	8005600 <HAL_RCC_OscConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001fd0:	f000 fb02 	bl	80025d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2104      	movs	r1, #4
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 fee3 	bl	8005db8 <HAL_RCC_ClockConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ff8:	f000 faee 	bl	80025d8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ffc:	f004 fbea 	bl	80067d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002000:	bf00      	nop
 8002002:	3758      	adds	r7, #88	@ 0x58
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000

0800200c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002010:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002012:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <MX_DFSDM1_Init+0x6c>)
 8002014:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002016:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002018:	2201      	movs	r2, #1
 800201a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002024:	2202      	movs	r2, #2
 8002026:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800202e:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002036:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800203a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800203c:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002044:	2204      	movs	r2, #4
 8002046:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002048:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 800204a:	2200      	movs	r2, #0
 800204c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002050:	2201      	movs	r2, #1
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002054:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002056:	2200      	movs	r2, #0
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <MX_DFSDM1_Init+0x68>)
 8002062:	f001 fdad 	bl	8003bc0 <HAL_DFSDM_ChannelInit>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800206c:	f000 fab4 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000060c 	.word	0x2000060c
 8002078:	40016020 	.word	0x40016020

0800207c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002080:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <MX_I2C2_Init+0x74>)
 8002082:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <MX_I2C2_Init+0x78>)
 8002084:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <MX_I2C2_Init+0x74>)
 8002088:	f640 6214 	movw	r2, #3604	@ 0xe14
 800208c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800208e:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <MX_I2C2_Init+0x74>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002094:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <MX_I2C2_Init+0x74>)
 8002096:	2201      	movs	r2, #1
 8002098:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <MX_I2C2_Init+0x74>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <MX_I2C2_Init+0x74>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020a6:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <MX_I2C2_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ac:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <MX_I2C2_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020b2:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <MX_I2C2_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020b8:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <MX_I2C2_Init+0x74>)
 80020ba:	f002 f9dc 	bl	8004476 <HAL_I2C_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80020c4:	f000 fa88 	bl	80025d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020c8:	2100      	movs	r1, #0
 80020ca:	4809      	ldr	r0, [pc, #36]	@ (80020f0 <MX_I2C2_Init+0x74>)
 80020cc:	f002 ff8e 	bl	8004fec <HAL_I2CEx_ConfigAnalogFilter>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80020d6:	f000 fa7f 	bl	80025d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020da:	2100      	movs	r1, #0
 80020dc:	4804      	ldr	r0, [pc, #16]	@ (80020f0 <MX_I2C2_Init+0x74>)
 80020de:	f002 ffd0 	bl	8005082 <HAL_I2CEx_ConfigDigitalFilter>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80020e8:	f000 fa76 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000644 	.word	0x20000644
 80020f4:	40005800 	.word	0x40005800

080020f8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <MX_QUADSPI_Init+0x44>)
 80020fe:	4a10      	ldr	r2, [pc, #64]	@ (8002140 <MX_QUADSPI_Init+0x48>)
 8002100:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <MX_QUADSPI_Init+0x44>)
 8002104:	2202      	movs	r2, #2
 8002106:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002108:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <MX_QUADSPI_Init+0x44>)
 800210a:	2204      	movs	r2, #4
 800210c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800210e:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <MX_QUADSPI_Init+0x44>)
 8002110:	2210      	movs	r2, #16
 8002112:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002114:	4b09      	ldr	r3, [pc, #36]	@ (800213c <MX_QUADSPI_Init+0x44>)
 8002116:	2217      	movs	r2, #23
 8002118:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800211a:	4b08      	ldr	r3, [pc, #32]	@ (800213c <MX_QUADSPI_Init+0x44>)
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <MX_QUADSPI_Init+0x44>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002126:	4805      	ldr	r0, [pc, #20]	@ (800213c <MX_QUADSPI_Init+0x44>)
 8002128:	f003 f9ae 	bl	8005488 <HAL_QSPI_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002132:	f000 fa51 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000698 	.word	0x20000698
 8002140:	a0001000 	.word	0xa0001000

08002144 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_USART3_UART_Init+0x58>)
 800214a:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <MX_USART3_UART_Init+0x5c>)
 800214c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <MX_USART3_UART_Init+0x58>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b11      	ldr	r3, [pc, #68]	@ (800219c <MX_USART3_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <MX_USART3_UART_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <MX_USART3_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <MX_USART3_UART_Init+0x58>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <MX_USART3_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <MX_USART3_UART_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <MX_USART3_UART_Init+0x58>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <MX_USART3_UART_Init+0x58>)
 8002182:	2200      	movs	r2, #0
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_USART3_UART_Init+0x58>)
 8002188:	f005 f944 	bl	8007414 <HAL_UART_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002192:	f000 fa21 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200006dc 	.word	0x200006dc
 80021a0:	40004800 	.word	0x40004800

080021a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80021ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b2:	2206      	movs	r2, #6
 80021b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b8:	2202      	movs	r2, #2
 80021ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021be:	2202      	movs	r2, #2
 80021c0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021dc:	2200      	movs	r2, #0
 80021de:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	@ (80021fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e8:	f002 ff97 	bl	800511a <HAL_PCD_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021f2:	f000 f9f1 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000764 	.word	0x20000764

08002200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002216:	4bbd      	ldr	r3, [pc, #756]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4abc      	ldr	r2, [pc, #752]	@ (800250c <MX_GPIO_Init+0x30c>)
 800221c:	f043 0310 	orr.w	r3, r3, #16
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4bba      	ldr	r3, [pc, #744]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	4bb7      	ldr	r3, [pc, #732]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	4ab6      	ldr	r2, [pc, #728]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223a:	4bb4      	ldr	r3, [pc, #720]	@ (800250c <MX_GPIO_Init+0x30c>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	4bb1      	ldr	r3, [pc, #708]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	4ab0      	ldr	r2, [pc, #704]	@ (800250c <MX_GPIO_Init+0x30c>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002252:	4bae      	ldr	r3, [pc, #696]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	4bab      	ldr	r3, [pc, #684]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	4aaa      	ldr	r2, [pc, #680]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226a:	4ba8      	ldr	r3, [pc, #672]	@ (800250c <MX_GPIO_Init+0x30c>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002276:	4ba5      	ldr	r3, [pc, #660]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	4aa4      	ldr	r2, [pc, #656]	@ (800250c <MX_GPIO_Init+0x30c>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002282:	4ba2      	ldr	r3, [pc, #648]	@ (800250c <MX_GPIO_Init+0x30c>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002294:	489e      	ldr	r0, [pc, #632]	@ (8002510 <MX_GPIO_Init+0x310>)
 8002296:	f002 f8b3 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f248 1104 	movw	r1, #33028	@ 0x8104
 80022a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a4:	f002 f8ac 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80022a8:	2200      	movs	r2, #0
 80022aa:	f24b 0114 	movw	r1, #45076	@ 0xb014
 80022ae:	4899      	ldr	r0, [pc, #612]	@ (8002514 <MX_GPIO_Init+0x314>)
 80022b0:	f002 f8a6 	bl	8004400 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80022ba:	4897      	ldr	r0, [pc, #604]	@ (8002518 <MX_GPIO_Init+0x318>)
 80022bc:	f002 f8a0 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022c6:	4894      	ldr	r0, [pc, #592]	@ (8002518 <MX_GPIO_Init+0x318>)
 80022c8:	f002 f89a 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80022d2:	4892      	ldr	r0, [pc, #584]	@ (800251c <MX_GPIO_Init+0x31c>)
 80022d4:	f002 f894 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	2120      	movs	r1, #32
 80022dc:	488d      	ldr	r0, [pc, #564]	@ (8002514 <MX_GPIO_Init+0x314>)
 80022de:	f002 f88f 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2101      	movs	r1, #1
 80022e6:	488a      	ldr	r0, [pc, #552]	@ (8002510 <MX_GPIO_Init+0x310>)
 80022e8:	f002 f88a 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80022ec:	f240 1315 	movw	r3, #277	@ 0x115
 80022f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4882      	ldr	r0, [pc, #520]	@ (8002510 <MX_GPIO_Init+0x310>)
 8002306:	f001 fdc5 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800230a:	236a      	movs	r3, #106	@ 0x6a
 800230c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800230e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	487c      	ldr	r0, [pc, #496]	@ (8002510 <MX_GPIO_Init+0x310>)
 8002320:	f001 fdb8 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002324:	233f      	movs	r3, #63	@ 0x3f
 8002326:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002328:	230b      	movs	r3, #11
 800232a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4879      	ldr	r0, [pc, #484]	@ (800251c <MX_GPIO_Init+0x31c>)
 8002338:	f001 fdac 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800233c:	2303      	movs	r3, #3
 800233e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800234c:	2308      	movs	r3, #8
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235a:	f001 fd9b 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800235e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8002362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	2301      	movs	r3, #1
 8002366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800237a:	f001 fd8b 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800237e:	2308      	movs	r3, #8
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238e:	2301      	movs	r3, #1
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800239c:	f001 fd7a 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80023a0:	2310      	movs	r3, #16
 80023a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023a4:	230b      	movs	r3, #11
 80023a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b6:	f001 fd6d 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80023ba:	23e0      	movs	r3, #224	@ 0xe0
 80023bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ca:	2305      	movs	r3, #5
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d8:	f001 fd5c 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80023dc:	2301      	movs	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	4848      	ldr	r0, [pc, #288]	@ (8002514 <MX_GPIO_Init+0x314>)
 80023f2:	f001 fd4f 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80023f6:	2302      	movs	r3, #2
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023fa:	230b      	movs	r3, #11
 80023fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	4842      	ldr	r0, [pc, #264]	@ (8002514 <MX_GPIO_Init+0x314>)
 800240a:	f001 fd43 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800240e:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8002412:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	483b      	ldr	r0, [pc, #236]	@ (8002514 <MX_GPIO_Init+0x314>)
 8002428:	f001 fd34 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800242c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002430:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002432:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	4835      	ldr	r0, [pc, #212]	@ (8002518 <MX_GPIO_Init+0x318>)
 8002444:	f001 fd26 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002448:	f243 0381 	movw	r3, #12417	@ 0x3081
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244e:	2301      	movs	r3, #1
 8002450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	482d      	ldr	r0, [pc, #180]	@ (8002518 <MX_GPIO_Init+0x318>)
 8002462:	f001 fd17 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002466:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	4827      	ldr	r0, [pc, #156]	@ (800251c <MX_GPIO_Init+0x31c>)
 8002480:	f001 fd08 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002484:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800248e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	4820      	ldr	r0, [pc, #128]	@ (800251c <MX_GPIO_Init+0x31c>)
 800249c:	f001 fcfa 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80024a0:	2302      	movs	r3, #2
 80024a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024b0:	2305      	movs	r3, #5
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	4817      	ldr	r0, [pc, #92]	@ (8002518 <MX_GPIO_Init+0x318>)
 80024bc:	f001 fcea 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80024c0:	2378      	movs	r3, #120	@ 0x78
 80024c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024d0:	2307      	movs	r3, #7
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	480f      	ldr	r0, [pc, #60]	@ (8002518 <MX_GPIO_Init+0x318>)
 80024dc:	f001 fcda 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80024e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e6:	2312      	movs	r3, #18
 80024e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024f2:	2304      	movs	r3, #4
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	@ (8002514 <MX_GPIO_Init+0x314>)
 80024fe:	f001 fcc9 	bl	8003e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	2017      	movs	r0, #23
 8002508:	e00a      	b.n	8002520 <MX_GPIO_Init+0x320>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	48001000 	.word	0x48001000
 8002514:	48000400 	.word	0x48000400
 8002518:	48000c00 	.word	0x48000c00
 800251c:	48000800 	.word	0x48000800
 8002520:	f001 fb17 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002524:	2017      	movs	r0, #23
 8002526:	f001 fb30 	bl	8003b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2105      	movs	r1, #5
 800252e:	2028      	movs	r0, #40	@ 0x28
 8002530:	f001 fb0f 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002534:	2028      	movs	r0, #40	@ 0x28
 8002536:	f001 fb28 	bl	8003b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	@ 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop

08002544 <Start_TASK_ACC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_TASK_ACC */
void Start_TASK_ACC(void const * argument)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_TASK_ACC */
  /* Infinite loop */

	int16_t pDataXYZ[3];
	uint16_t currentFreq = accelSamplingFreq;
 800254c:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <Start_TASK_ACC+0x6c>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	81fb      	strh	r3, [r7, #14]
	lasttime = -6969;
 8002552:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <Start_TASK_ACC+0x70>)
 8002554:	4a18      	ldr	r2, [pc, #96]	@ (80025b8 <Start_TASK_ACC+0x74>)
 8002556:	601a      	str	r2, [r3, #0]
	currenttime = 0;
 8002558:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <Start_TASK_ACC+0x78>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
	for(;;)
	{
		currenttime = HAL_GetTick();
 800255e:	f001 f9ed 	bl	800393c <HAL_GetTick>
 8002562:	4603      	mov	r3, r0
 8002564:	4a15      	ldr	r2, [pc, #84]	@ (80025bc <Start_TASK_ACC+0x78>)
 8002566:	6013      	str	r3, [r2, #0]
		if(currentFreq != accelSamplingFreq || currenttime - lasttime >= 100 * currentFreq){
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <Start_TASK_ACC+0x6c>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	89fa      	ldrh	r2, [r7, #14]
 800256e:	429a      	cmp	r2, r3
 8002570:	d10a      	bne.n	8002588 <Start_TASK_ACC+0x44>
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <Start_TASK_ACC+0x78>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <Start_TASK_ACC+0x70>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	89fa      	ldrh	r2, [r7, #14]
 800257e:	2164      	movs	r1, #100	@ 0x64
 8002580:	fb01 f202 	mul.w	r2, r1, r2
 8002584:	4293      	cmp	r3, r2
 8002586:	d3ea      	bcc.n	800255e <Start_TASK_ACC+0x1a>
		  currentFreq = accelSamplingFreq;
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <Start_TASK_ACC+0x6c>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	81fb      	strh	r3, [r7, #14]
		  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	4618      	mov	r0, r3
 8002594:	f001 f83c 	bl	8003610 <BSP_ACCELERO_AccGetXYZ>
		  Accel_Update(pDataXYZ);
 8002598:	f107 0308 	add.w	r3, r7, #8
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe ff43 	bl	8001428 <Accel_Update>
		  lasttime = HAL_GetTick();
 80025a2:	f001 f9cb 	bl	800393c <HAL_GetTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a02      	ldr	r2, [pc, #8]	@ (80025b4 <Start_TASK_ACC+0x70>)
 80025aa:	6013      	str	r3, [r2, #0]
		currenttime = HAL_GetTick();
 80025ac:	e7d7      	b.n	800255e <Start_TASK_ACC+0x1a>
 80025ae:	bf00      	nop
 80025b0:	20000002 	.word	0x20000002
 80025b4:	20000604 	.word	0x20000604
 80025b8:	ffffe4c7 	.word	0xffffe4c7
 80025bc:	20000608 	.word	0x20000608

080025c0 <StartTASK_BLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTASK_BLE */
void StartTASK_BLE(void const * argument)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartTASK_BLE */
	while(1){
		MX_BlueNRG_MS_Process();
 80025c8:	f7fe fe0e 	bl	80011e8 <MX_BlueNRG_MS_Process>
		osDelay(1000);
 80025cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025d0:	f007 f964 	bl	800989c <osDelay>
		MX_BlueNRG_MS_Process();
 80025d4:	bf00      	nop
 80025d6:	e7f7      	b.n	80025c8 <StartTASK_BLE+0x8>

080025d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <Error_Handler+0x8>

080025e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <HAL_MspInit+0x4c>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ee:	4a10      	ldr	r2, [pc, #64]	@ (8002630 <HAL_MspInit+0x4c>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <HAL_MspInit+0x4c>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_MspInit+0x4c>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <HAL_MspInit+0x4c>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260c:	6593      	str	r3, [r2, #88]	@ 0x58
 800260e:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <HAL_MspInit+0x4c>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	210f      	movs	r1, #15
 800261e:	f06f 0001 	mvn.w	r0, #1
 8002622:	f001 fa96 	bl	8003b52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0ac      	sub	sp, #176	@ 0xb0
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2288      	movs	r2, #136	@ 0x88
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f009 fc03 	bl	800be60 <memset>
  if(DFSDM1_Init == 0)
 800265a:	4b25      	ldr	r3, [pc, #148]	@ (80026f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d142      	bne.n	80026e8 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002662:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002666:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4618      	mov	r0, r3
 8002674:	f003 fdc4 	bl	8006200 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800267e:	f7ff ffab 	bl	80025d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002682:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	4a1b      	ldr	r2, [pc, #108]	@ (80026f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002688:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800268c:	6613      	str	r3, [r2, #96]	@ 0x60
 800268e:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800269a:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269e:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80026a0:	f043 0310 	orr.w	r3, r3, #16
 80026a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a6:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80026b2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80026b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80026cc:	2306      	movs	r3, #6
 80026ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026d6:	4619      	mov	r1, r3
 80026d8:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80026da:	f001 fbdb 	bl	8003e94 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	4a02      	ldr	r2, [pc, #8]	@ (80026f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80026e6:	6013      	str	r3, [r2, #0]
  }

}
 80026e8:	bf00      	nop
 80026ea:	37b0      	adds	r7, #176	@ 0xb0
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20001cf8 	.word	0x20001cf8
 80026f4:	40021000 	.word	0x40021000
 80026f8:	48001000 	.word	0x48001000

080026fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b0ac      	sub	sp, #176	@ 0xb0
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	2288      	movs	r2, #136	@ 0x88
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f009 fb9f 	bl	800be60 <memset>
  if(hi2c->Instance==I2C2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a21      	ldr	r2, [pc, #132]	@ (80027ac <HAL_I2C_MspInit+0xb0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d13b      	bne.n	80027a4 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002730:	2300      	movs	r3, #0
 8002732:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4618      	mov	r0, r3
 800273a:	f003 fd61 	bl	8006200 <HAL_RCCEx_PeriphCLKConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002744:	f7ff ff48 	bl	80025d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002748:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <HAL_I2C_MspInit+0xb4>)
 800274a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274c:	4a18      	ldr	r2, [pc, #96]	@ (80027b0 <HAL_I2C_MspInit+0xb4>)
 800274e:	f043 0302 	orr.w	r3, r3, #2
 8002752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002754:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <HAL_I2C_MspInit+0xb4>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002760:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002768:	2312      	movs	r3, #18
 800276a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276e:	2301      	movs	r3, #1
 8002770:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800277a:	2304      	movs	r3, #4
 800277c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002780:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002784:	4619      	mov	r1, r3
 8002786:	480b      	ldr	r0, [pc, #44]	@ (80027b4 <HAL_I2C_MspInit+0xb8>)
 8002788:	f001 fb84 	bl	8003e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_I2C_MspInit+0xb4>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	4a07      	ldr	r2, [pc, #28]	@ (80027b0 <HAL_I2C_MspInit+0xb4>)
 8002792:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002796:	6593      	str	r3, [r2, #88]	@ 0x58
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_I2C_MspInit+0xb4>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80027a4:	bf00      	nop
 80027a6:	37b0      	adds	r7, #176	@ 0xb0
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40005800 	.word	0x40005800
 80027b0:	40021000 	.word	0x40021000
 80027b4:	48000400 	.word	0x48000400

080027b8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0b      	ldr	r2, [pc, #44]	@ (80027f4 <HAL_I2C_MspDeInit+0x3c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10f      	bne.n	80027ea <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_I2C_MspDeInit+0x40>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <HAL_I2C_MspDeInit+0x40>)
 80027d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80027d4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80027d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027da:	4808      	ldr	r0, [pc, #32]	@ (80027fc <HAL_I2C_MspDeInit+0x44>)
 80027dc:	f001 fd04 	bl	80041e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80027e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027e4:	4805      	ldr	r0, [pc, #20]	@ (80027fc <HAL_I2C_MspDeInit+0x44>)
 80027e6:	f001 fcff 	bl	80041e8 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40005800 	.word	0x40005800
 80027f8:	40021000 	.word	0x40021000
 80027fc:	48000400 	.word	0x48000400

08002800 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	@ 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a17      	ldr	r2, [pc, #92]	@ (800287c <HAL_QSPI_MspInit+0x7c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d128      	bne.n	8002874 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002822:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <HAL_QSPI_MspInit+0x80>)
 8002824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002826:	4a16      	ldr	r2, [pc, #88]	@ (8002880 <HAL_QSPI_MspInit+0x80>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282c:	6513      	str	r3, [r2, #80]	@ 0x50
 800282e:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_QSPI_MspInit+0x80>)
 8002830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_QSPI_MspInit+0x80>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <HAL_QSPI_MspInit+0x80>)
 8002840:	f043 0310 	orr.w	r3, r3, #16
 8002844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <HAL_QSPI_MspInit+0x80>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002852:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002856:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002860:	2303      	movs	r3, #3
 8002862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002864:	230a      	movs	r3, #10
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	4805      	ldr	r0, [pc, #20]	@ (8002884 <HAL_QSPI_MspInit+0x84>)
 8002870:	f001 fb10 	bl	8003e94 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002874:	bf00      	nop
 8002876:	3728      	adds	r7, #40	@ 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	a0001000 	.word	0xa0001000
 8002880:	40021000 	.word	0x40021000
 8002884:	48001000 	.word	0x48001000

08002888 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b0ac      	sub	sp, #176	@ 0xb0
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2288      	movs	r2, #136	@ 0x88
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f009 fad9 	bl	800be60 <memset>
  if(huart->Instance==USART3)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a21      	ldr	r2, [pc, #132]	@ (8002938 <HAL_UART_MspInit+0xb0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d13b      	bne.n	8002930 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028b8:	2304      	movs	r3, #4
 80028ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80028bc:	2300      	movs	r3, #0
 80028be:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fc9b 	bl	8006200 <HAL_RCCEx_PeriphCLKConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028d0:	f7ff fe82 	bl	80025d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d4:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_UART_MspInit+0xb4>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	4a18      	ldr	r2, [pc, #96]	@ (800293c <HAL_UART_MspInit+0xb4>)
 80028da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028de:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e0:	4b16      	ldr	r3, [pc, #88]	@ (800293c <HAL_UART_MspInit+0xb4>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_UART_MspInit+0xb4>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	4a12      	ldr	r2, [pc, #72]	@ (800293c <HAL_UART_MspInit+0xb4>)
 80028f2:	f043 0308 	orr.w	r3, r3, #8
 80028f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f8:	4b10      	ldr	r3, [pc, #64]	@ (800293c <HAL_UART_MspInit+0xb4>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002904:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800291e:	2307      	movs	r3, #7
 8002920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002924:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002928:	4619      	mov	r1, r3
 800292a:	4805      	ldr	r0, [pc, #20]	@ (8002940 <HAL_UART_MspInit+0xb8>)
 800292c:	f001 fab2 	bl	8003e94 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002930:	bf00      	nop
 8002932:	37b0      	adds	r7, #176	@ 0xb0
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40004800 	.word	0x40004800
 800293c:	40021000 	.word	0x40021000
 8002940:	48000c00 	.word	0x48000c00

08002944 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0ac      	sub	sp, #176	@ 0xb0
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2288      	movs	r2, #136	@ 0x88
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f009 fa7b 	bl	800be60 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002972:	d17c      	bne.n	8002a6e <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002974:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002978:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800297a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800297e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002982:	2301      	movs	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800298a:	2318      	movs	r3, #24
 800298c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800298e:	2307      	movs	r3, #7
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002992:	2302      	movs	r3, #2
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002996:	2302      	movs	r3, #2
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800299a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800299e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fc2b 	bl	8006200 <HAL_RCCEx_PeriphCLKConfig>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80029b0:	f7ff fe12 	bl	80025d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b4:	4b30      	ldr	r3, [pc, #192]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 80029c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80029cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029e4:	4619      	mov	r1, r3
 80029e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ea:	f001 fa53 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80029ee:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80029f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a08:	230a      	movs	r3, #10
 8002a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a12:	4619      	mov	r1, r3
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a18:	f001 fa3c 	bl	8003e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a1c:	4b16      	ldr	r3, [pc, #88]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	4a15      	ldr	r2, [pc, #84]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a28:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a34:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d114      	bne.n	8002a6a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	4a0c      	ldr	r2, [pc, #48]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002a58:	f002 fd06 	bl	8005468 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	4a05      	ldr	r2, [pc, #20]	@ (8002a78 <HAL_PCD_MspInit+0x134>)
 8002a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002a68:	e001      	b.n	8002a6e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002a6a:	f002 fcfd 	bl	8005468 <HAL_PWREx_EnableVddUSB>
}
 8002a6e:	bf00      	nop
 8002a70:	37b0      	adds	r7, #176	@ 0xb0
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000

08002a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <NMI_Handler+0x4>

08002a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <HardFault_Handler+0x4>

08002a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <MemManage_Handler+0x4>

08002a94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <BusFault_Handler+0x4>

08002a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <UsageFault_Handler+0x4>

08002aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab6:	f000 ff2d 	bl	8003914 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002aba:	f007 fc7f 	bl	800a3bc <xTaskGetSchedulerState>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d001      	beq.n	8002ac8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ac4:	f007 fec0 	bl	800a848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002ad0:	2020      	movs	r0, #32
 8002ad2:	f001 fcad 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002ad6:	4806      	ldr	r0, [pc, #24]	@ (8002af0 <EXTI9_5_IRQHandler+0x24>)
 8002ad8:	f001 f9ac 	bl	8003e34 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002adc:	2080      	movs	r0, #128	@ 0x80
 8002ade:	f001 fca7 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002ae2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ae6:	f001 fca3 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200002a8 	.word	0x200002a8

08002af4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002af8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002afc:	f001 fc98 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002b00:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002b04:	f001 fc94 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002b08:	4806      	ldr	r0, [pc, #24]	@ (8002b24 <EXTI15_10_IRQHandler+0x30>)
 8002b0a:	f001 f993 	bl	8003e34 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002b0e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b12:	f001 fc8d 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002b16:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002b1a:	f001 fc89 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000010 	.word	0x20000010

08002b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return 1;
 8002b2c:	2301      	movs	r3, #1
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_kill>:

int _kill(int pid, int sig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b42:	f009 f9df 	bl	800bf04 <__errno>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2216      	movs	r2, #22
 8002b4a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_exit>:

void _exit (int status)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ffe7 	bl	8002b38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b6a:	bf00      	nop
 8002b6c:	e7fd      	b.n	8002b6a <_exit+0x12>

08002b6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e00a      	b.n	8002b96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b80:	f3af 8000 	nop.w
 8002b84:	4601      	mov	r1, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	60ba      	str	r2, [r7, #8]
 8002b8c:	b2ca      	uxtb	r2, r1
 8002b8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3301      	adds	r3, #1
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	dbf0      	blt.n	8002b80 <_read+0x12>
  }

  return len;
 8002b9e:	687b      	ldr	r3, [r7, #4]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e009      	b.n	8002bce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	60ba      	str	r2, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fa28 	bl	8003018 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	dbf1      	blt.n	8002bba <_write+0x12>
  }
  return len;
 8002bd6:	687b      	ldr	r3, [r7, #4]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_close>:

int _close(int file)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c08:	605a      	str	r2, [r3, #4]
  return 0;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_isatty>:

int _isatty(int file)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c20:	2301      	movs	r3, #1
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c50:	4a14      	ldr	r2, [pc, #80]	@ (8002ca4 <_sbrk+0x5c>)
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <_sbrk+0x60>)
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c5c:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c64:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <_sbrk+0x64>)
 8002c66:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <_sbrk+0x68>)
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d207      	bcs.n	8002c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c78:	f009 f944 	bl	800bf04 <__errno>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	220c      	movs	r2, #12
 8002c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	e009      	b.n	8002c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c88:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <_sbrk+0x64>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8e:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	4a05      	ldr	r2, [pc, #20]	@ (8002cac <_sbrk+0x64>)
 8002c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20018000 	.word	0x20018000
 8002ca8:	00000400 	.word	0x00000400
 8002cac:	20001cfc 	.word	0x20001cfc
 8002cb0:	20002fb8 	.word	0x20002fb8

08002cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <SystemInit+0x20>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cbe:	4a05      	ldr	r2, [pc, #20]	@ (8002cd4 <SystemInit+0x20>)
 8002cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cdc:	f7ff ffea 	bl	8002cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce0:	480c      	ldr	r0, [pc, #48]	@ (8002d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ce2:	490d      	ldr	r1, [pc, #52]	@ (8002d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d1c <LoopForever+0xe>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce8:	e002      	b.n	8002cf0 <LoopCopyDataInit>

08002cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cee:	3304      	adds	r3, #4

08002cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf4:	d3f9      	bcc.n	8002cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8002d24 <LoopForever+0x16>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cfc:	e001      	b.n	8002d02 <LoopFillZerobss>

08002cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d00:	3204      	adds	r2, #4

08002d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d04:	d3fb      	bcc.n	8002cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d06:	f009 f903 	bl	800bf10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d0a:	f7ff f8d1 	bl	8001eb0 <main>

08002d0e <LoopForever>:

LoopForever:
    b LoopForever
 8002d0e:	e7fe      	b.n	8002d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d18:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002d1c:	0800fdbc 	.word	0x0800fdbc
  ldr r2, =_sbss
 8002d20:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002d24:	20002fb8 	.word	0x20002fb8

08002d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d28:	e7fe      	b.n	8002d28 <ADC1_2_IRQHandler>
	...

08002d2c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <BSP_LED_Init+0x20>)
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	0800f918 	.word	0x0800f918

08002d50 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <LED_USER_GPIO_Init+0x78>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <LED_USER_GPIO_Init+0x78>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d62:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <LED_USER_GPIO_Init+0x78>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <LED_USER_GPIO_Init+0x78>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	4a11      	ldr	r2, [pc, #68]	@ (8002dc8 <LED_USER_GPIO_Init+0x78>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <LED_USER_GPIO_Init+0x78>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d9c:	480b      	ldr	r0, [pc, #44]	@ (8002dcc <LED_USER_GPIO_Init+0x7c>)
 8002d9e:	f001 fb2f 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002da2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da8:	2301      	movs	r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	4619      	mov	r1, r3
 8002dba:	4804      	ldr	r0, [pc, #16]	@ (8002dcc <LED_USER_GPIO_Init+0x7c>)
 8002dbc:	f001 f86a 	bl	8003e94 <HAL_GPIO_Init>

}
 8002dc0:	bf00      	nop
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	48000400 	.word	0x48000400

08002dd0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460a      	mov	r2, r1
 8002dda:	71fb      	strb	r3, [r7, #7]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e64 <BSP_PB_Init+0x94>)
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002dee:	79bb      	ldrb	r3, [r7, #6]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d132      	bne.n	8002e5a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e68 <BSP_PB_Init+0x98>)
 8002dfa:	441a      	add	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	491b      	ldr	r1, [pc, #108]	@ (8002e6c <BSP_PB_Init+0x9c>)
 8002e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f001 f800 	bl	8003e0c <HAL_EXTI_GetHandle>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002e12:	f06f 0303 	mvn.w	r3, #3
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e01f      	b.n	8002e5a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4a12      	ldr	r2, [pc, #72]	@ (8002e68 <BSP_PB_Init+0x98>)
 8002e20:	1898      	adds	r0, r3, r2
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	4a12      	ldr	r2, [pc, #72]	@ (8002e70 <BSP_PB_Init+0xa0>)
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	f000 ffd3 	bl	8003dd8 <HAL_EXTI_RegisterCallback>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002e38:	f06f 0303 	mvn.w	r3, #3
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e00c      	b.n	8002e5a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002e40:	2028      	movs	r0, #40	@ 0x28
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	4a0b      	ldr	r2, [pc, #44]	@ (8002e74 <BSP_PB_Init+0xa4>)
 8002e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f000 fe80 	bl	8003b52 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002e52:	2328      	movs	r3, #40	@ 0x28
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fe98 	bl	8003b8a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	0800f91c 	.word	0x0800f91c
 8002e68:	20000010 	.word	0x20000010
 8002e6c:	0800f920 	.word	0x0800f920
 8002e70:	0800f924 	.word	0x0800f924
 8002e74:	0800f928 	.word	0x0800f928

08002e78 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	4a09      	ldr	r2, [pc, #36]	@ (8002eac <BSP_PB_GetState+0x34>)
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 fa9d 	bl	80043d0 <HAL_GPIO_ReadPin>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000000c 	.word	0x2000000c

08002eb0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fe f9bd 	bl	8001234 <BSP_PB_Callback>
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec6:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <BUTTON_USER_GPIO_Init+0x6c>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	4a18      	ldr	r2, [pc, #96]	@ (8002f2c <BUTTON_USER_GPIO_Init+0x6c>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ed2:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <BUTTON_USER_GPIO_Init+0x6c>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <BUTTON_USER_GPIO_Init+0x6c>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8002f2c <BUTTON_USER_GPIO_Init+0x6c>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <BUTTON_USER_GPIO_Init+0x6c>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002f06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f0c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002f16:	f107 030c 	add.w	r3, r7, #12
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4804      	ldr	r0, [pc, #16]	@ (8002f30 <BUTTON_USER_GPIO_Init+0x70>)
 8002f1e:	f000 ffb9 	bl	8003e94 <HAL_GPIO_Init>

}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	48000800 	.word	0x48000800

08002f34 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d903      	bls.n	8002f50 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f48:	f06f 0301 	mvn.w	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e025      	b.n	8002f9c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	79fa      	ldrb	r2, [r7, #7]
 8002f54:	4914      	ldr	r1, [pc, #80]	@ (8002fa8 <BSP_COM_Init+0x74>)
 8002f56:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002f5a:	4814      	ldr	r0, [pc, #80]	@ (8002fac <BSP_COM_Init+0x78>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4403      	add	r3, r0
 8002f66:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002f68:	79fa      	ldrb	r2, [r7, #7]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4a0e      	ldr	r2, [pc, #56]	@ (8002fac <BSP_COM_Init+0x78>)
 8002f74:	4413      	add	r3, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f86a 	bl	8003050 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002f7c:	79fa      	ldrb	r2, [r7, #7]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4a09      	ldr	r2, [pc, #36]	@ (8002fac <BSP_COM_Init+0x78>)
 8002f88:	4413      	add	r3, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f810 	bl	8002fb0 <MX_USART1_UART_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002f96:	f06f 0303 	mvn.w	r3, #3
 8002f9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000018 	.word	0x20000018
 8002fac:	20001d54 	.word	0x20001d54

08002fb0 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	@ (8003014 <MX_USART1_UART_Init+0x64>)
 8002fc0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fc8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	220c      	movs	r2, #12
 8002fe0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f004 fa0a 	bl	8007414 <HAL_UART_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40013800 	.word	0x40013800

08003018 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003020:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <__io_putchar+0x30>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4a07      	ldr	r2, [pc, #28]	@ (800304c <__io_putchar+0x34>)
 8003030:	1898      	adds	r0, r3, r2
 8003032:	1d39      	adds	r1, r7, #4
 8003034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003038:	2201      	movs	r2, #1
 800303a:	f004 fa39 	bl	80074b0 <HAL_UART_Transmit>
  return ch;
 800303e:	687b      	ldr	r3, [r7, #4]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20001ddc 	.word	0x20001ddc
 800304c:	20001d54 	.word	0x20001d54

08003050 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0ac      	sub	sp, #176	@ 0xb0
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	2288      	movs	r2, #136	@ 0x88
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f008 fefd 	bl	800be60 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003066:	2301      	movs	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800306a:	2300      	movs	r3, #0
 800306c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4618      	mov	r0, r3
 8003074:	f003 f8c4 	bl	8006200 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003078:	4b22      	ldr	r3, [pc, #136]	@ (8003104 <USART1_MspInit+0xb4>)
 800307a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307c:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <USART1_MspInit+0xb4>)
 800307e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003082:	6613      	str	r3, [r2, #96]	@ 0x60
 8003084:	4b1f      	ldr	r3, [pc, #124]	@ (8003104 <USART1_MspInit+0xb4>)
 8003086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003090:	4b1c      	ldr	r3, [pc, #112]	@ (8003104 <USART1_MspInit+0xb4>)
 8003092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003094:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <USART1_MspInit+0xb4>)
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <USART1_MspInit+0xb4>)
 800309e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 80030a8:	2340      	movs	r3, #64	@ 0x40
 80030aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ba:	2303      	movs	r3, #3
 80030bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80030c0:	2307      	movs	r3, #7
 80030c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80030c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030ca:	4619      	mov	r1, r3
 80030cc:	480e      	ldr	r0, [pc, #56]	@ (8003108 <USART1_MspInit+0xb8>)
 80030ce:	f000 fee1 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80030ea:	2307      	movs	r3, #7
 80030ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80030f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030f4:	4619      	mov	r1, r3
 80030f6:	4804      	ldr	r0, [pc, #16]	@ (8003108 <USART1_MspInit+0xb8>)
 80030f8:	f000 fecc 	bl	8003e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80030fc:	bf00      	nop
 80030fe:	37b0      	adds	r7, #176	@ 0xb0
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	48000400 	.word	0x48000400

0800310c <I2Cx_MspInit>:
  /* USER CODE END USART1_MspDeInit 1 */
}

/* USER CODE BEGIN note*/
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	@ 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003114:	4b27      	ldr	r3, [pc, #156]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 8003116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003118:	4a26      	ldr	r2, [pc, #152]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003120:	4b24      	ldr	r3, [pc, #144]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800312c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003130:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003132:	2312      	movs	r3, #18
 8003134:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003136:	2301      	movs	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313a:	2303      	movs	r3, #3
 800313c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800313e:	2304      	movs	r3, #4
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	4619      	mov	r1, r3
 8003148:	481b      	ldr	r0, [pc, #108]	@ (80031b8 <I2Cx_MspInit+0xac>)
 800314a:	f000 fea3 	bl	8003e94 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4619      	mov	r1, r3
 8003154:	4818      	ldr	r0, [pc, #96]	@ (80031b8 <I2Cx_MspInit+0xac>)
 8003156:	f000 fe9d 	bl	8003e94 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 8003160:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003164:	6593      	str	r3, [r2, #88]	@ 0x58
 8003166:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003172:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 8003174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003176:	4a0f      	ldr	r2, [pc, #60]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 8003178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800317c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	4a0c      	ldr	r2, [pc, #48]	@ (80031b4 <I2Cx_MspInit+0xa8>)
 8003184:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003188:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	210f      	movs	r1, #15
 800318e:	2021      	movs	r0, #33	@ 0x21
 8003190:	f000 fcdf 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003194:	2021      	movs	r0, #33	@ 0x21
 8003196:	f000 fcf8 	bl	8003b8a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	210f      	movs	r1, #15
 800319e:	2022      	movs	r0, #34	@ 0x22
 80031a0:	f000 fcd7 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80031a4:	2022      	movs	r0, #34	@ 0x22
 80031a6:	f000 fcf0 	bl	8003b8a <HAL_NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	@ 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	48000400 	.word	0x48000400

080031bc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a12      	ldr	r2, [pc, #72]	@ (8003210 <I2Cx_Init+0x54>)
 80031c8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a11      	ldr	r2, [pc, #68]	@ (8003214 <I2Cx_Init+0x58>)
 80031ce:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff89 	bl	800310c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f001 f93b 	bl	8004476 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8003200:	2100      	movs	r1, #0
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 fef2 	bl	8004fec <HAL_I2CEx_ConfigAnalogFilter>
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40005800 	.word	0x40005800
 8003214:	00702681 	.word	0x00702681

08003218 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af04      	add	r7, sp, #16
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	4608      	mov	r0, r1
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	4603      	mov	r3, r0
 8003228:	72fb      	strb	r3, [r7, #11]
 800322a:	460b      	mov	r3, r1
 800322c:	813b      	strh	r3, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	b299      	uxth	r1, r3
 800323a:	88f8      	ldrh	r0, [r7, #6]
 800323c:	893a      	ldrh	r2, [r7, #8]
 800323e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003242:	9302      	str	r3, [sp, #8]
 8003244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	4603      	mov	r3, r0
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f001 faf0 	bl	8004834 <HAL_I2C_Mem_Read>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	4619      	mov	r1, r3
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f832 	bl	80032cc <I2Cx_Error>
  }
  return status;
 8003268:	7dfb      	ldrb	r3, [r7, #23]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08a      	sub	sp, #40	@ 0x28
 8003276:	af04      	add	r7, sp, #16
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	4608      	mov	r0, r1
 800327c:	4611      	mov	r1, r2
 800327e:	461a      	mov	r2, r3
 8003280:	4603      	mov	r3, r0
 8003282:	72fb      	strb	r3, [r7, #11]
 8003284:	460b      	mov	r3, r1
 8003286:	813b      	strh	r3, [r7, #8]
 8003288:	4613      	mov	r3, r2
 800328a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003290:	7afb      	ldrb	r3, [r7, #11]
 8003292:	b299      	uxth	r1, r3
 8003294:	88f8      	ldrh	r0, [r7, #6]
 8003296:	893a      	ldrh	r2, [r7, #8]
 8003298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800329c:	9302      	str	r3, [sp, #8]
 800329e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4603      	mov	r3, r0
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f001 f9af 	bl	800460c <HAL_I2C_Mem_Write>
 80032ae:	4603      	mov	r3, r0
 80032b0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80032b8:	7afb      	ldrb	r3, [r7, #11]
 80032ba:	4619      	mov	r1, r3
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f805 	bl	80032cc <I2Cx_Error>
  }
  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f001 f967 	bl	80045ac <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff6c 	bl	80031bc <I2Cx_Init>
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <SENSOR_IO_Init+0x10>)
 80032f2:	f7ff ff63 	bl	80031bc <I2Cx_Init>
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20001d00 	.word	0x20001d00

08003300 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af02      	add	r7, sp, #8
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
 800330a:	460b      	mov	r3, r1
 800330c:	71bb      	strb	r3, [r7, #6]
 800330e:	4613      	mov	r3, r2
 8003310:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	b29a      	uxth	r2, r3
 8003316:	79f9      	ldrb	r1, [r7, #7]
 8003318:	2301      	movs	r3, #1
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	1d7b      	adds	r3, r7, #5
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2301      	movs	r3, #1
 8003322:	4803      	ldr	r0, [pc, #12]	@ (8003330 <SENSOR_IO_Write+0x30>)
 8003324:	f7ff ffa5 	bl	8003272 <I2Cx_WriteMultiple>
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20001d00 	.word	0x20001d00

08003334 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af02      	add	r7, sp, #8
 800333a:	4603      	mov	r3, r0
 800333c:	460a      	mov	r2, r1
 800333e:	71fb      	strb	r3, [r7, #7]
 8003340:	4613      	mov	r3, r2
 8003342:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003348:	79bb      	ldrb	r3, [r7, #6]
 800334a:	b29a      	uxth	r2, r3
 800334c:	79f9      	ldrb	r1, [r7, #7]
 800334e:	2301      	movs	r3, #1
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	f107 030f 	add.w	r3, r7, #15
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2301      	movs	r3, #1
 800335a:	4804      	ldr	r0, [pc, #16]	@ (800336c <SENSOR_IO_Read+0x38>)
 800335c:	f7ff ff5c 	bl	8003218 <I2Cx_ReadMultiple>

  return read_value;
 8003360:	7bfb      	ldrb	r3, [r7, #15]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20001d00 	.word	0x20001d00

08003370 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af02      	add	r7, sp, #8
 8003376:	603a      	str	r2, [r7, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	460b      	mov	r3, r1
 8003380:	71bb      	strb	r3, [r7, #6]
 8003382:	4613      	mov	r3, r2
 8003384:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003386:	79bb      	ldrb	r3, [r7, #6]
 8003388:	b29a      	uxth	r2, r3
 800338a:	79f9      	ldrb	r1, [r7, #7]
 800338c:	88bb      	ldrh	r3, [r7, #4]
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2301      	movs	r3, #1
 8003396:	4804      	ldr	r0, [pc, #16]	@ (80033a8 <SENSOR_IO_ReadMultiple+0x38>)
 8003398:	f7ff ff3e 	bl	8003218 <I2Cx_ReadMultiple>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20001d00 	.word	0x20001d00

080033ac <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <BSP_SPI3_Init+0x54>)
 80033b8:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <BSP_SPI3_Init+0x58>)
 80033ba:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80033bc:	4b12      	ldr	r3, [pc, #72]	@ (8003408 <BSP_SPI3_Init+0x5c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	4911      	ldr	r1, [pc, #68]	@ (8003408 <BSP_SPI3_Init+0x5c>)
 80033c4:	600a      	str	r2, [r1, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d114      	bne.n	80033f4 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80033ca:	480d      	ldr	r0, [pc, #52]	@ (8003400 <BSP_SPI3_Init+0x54>)
 80033cc:	f003 feb0 	bl	8007130 <HAL_SPI_GetState>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10e      	bne.n	80033f4 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80033d6:	480a      	ldr	r0, [pc, #40]	@ (8003400 <BSP_SPI3_Init+0x54>)
 80033d8:	f000 f882 	bl	80034e0 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80033e2:	4807      	ldr	r0, [pc, #28]	@ (8003400 <BSP_SPI3_Init+0x54>)
 80033e4:	f000 f83a 	bl	800345c <MX_SPI3_Init>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80033ee:	f06f 0307 	mvn.w	r3, #7
 80033f2:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80033f4:	687b      	ldr	r3, [r7, #4]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20001de0 	.word	0x20001de0
 8003404:	40003c00 	.word	0x40003c00
 8003408:	20001e44 	.word	0x20001e44

0800340c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	4613      	mov	r3, r2
 8003418:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003424:	9200      	str	r2, [sp, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	4807      	ldr	r0, [pc, #28]	@ (8003448 <BSP_SPI3_SendRecv+0x3c>)
 800342c:	f003 fc61 	bl	8006cf2 <HAL_SPI_TransmitReceive>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003436:	f06f 0305 	mvn.w	r3, #5
 800343a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800343c:	697b      	ldr	r3, [r7, #20]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20001de0 	.word	0x20001de0

0800344c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003450:	f000 fa74 	bl	800393c <HAL_GetTick>
 8003454:	4603      	mov	r3, r0
}
 8003456:	4618      	mov	r0, r3
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <MX_SPI3_Init+0x80>)
 800346c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003474:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003482:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003496:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2207      	movs	r2, #7
 80034b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2208      	movs	r2, #8
 80034c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f003 fb68 	bl	8006b98 <HAL_SPI_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40003c00 	.word	0x40003c00

080034e0 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034e8:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <SPI3_MspInit+0xa8>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <SPI3_MspInit+0xa8>)
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f4:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <SPI3_MspInit+0xa8>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003500:	4b21      	ldr	r3, [pc, #132]	@ (8003588 <SPI3_MspInit+0xa8>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003504:	4a20      	ldr	r2, [pc, #128]	@ (8003588 <SPI3_MspInit+0xa8>)
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350c:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <SPI3_MspInit+0xa8>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003526:	2303      	movs	r3, #3
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800352a:	2306      	movs	r3, #6
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4619      	mov	r1, r3
 8003534:	4815      	ldr	r0, [pc, #84]	@ (800358c <SPI3_MspInit+0xac>)
 8003536:	f000 fcad 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800353a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800353e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003548:	2303      	movs	r3, #3
 800354a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 800354c:	2306      	movs	r3, #6
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	4619      	mov	r1, r3
 8003556:	480d      	ldr	r0, [pc, #52]	@ (800358c <SPI3_MspInit+0xac>)
 8003558:	f000 fc9c 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 800355c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2303      	movs	r3, #3
 800356c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 800356e:	2306      	movs	r3, #6
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4619      	mov	r1, r3
 8003578:	4804      	ldr	r0, [pc, #16]	@ (800358c <SPI3_MspInit+0xac>)
 800357a:	f000 fc8b 	bl	8003e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 800357e:	bf00      	nop
 8003580:	3728      	adds	r7, #40	@ 0x28
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	48000800 	.word	0x48000800

08003590 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800359a:	2300      	movs	r3, #0
 800359c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800359e:	4b1a      	ldr	r3, [pc, #104]	@ (8003608 <BSP_ACCELERO_Init+0x78>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4798      	blx	r3
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b6a      	cmp	r3, #106	@ 0x6a
 80035a8:	d002      	beq.n	80035b0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	e025      	b.n	80035fc <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80035b0:	4b16      	ldr	r3, [pc, #88]	@ (800360c <BSP_ACCELERO_Init+0x7c>)
 80035b2:	4a15      	ldr	r2, [pc, #84]	@ (8003608 <BSP_ACCELERO_Init+0x78>)
 80035b4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80035b6:	2330      	movs	r3, #48	@ 0x30
 80035b8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80035be:	2300      	movs	r3, #0
 80035c0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80035c2:	2340      	movs	r3, #64	@ 0x40
 80035c4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80035ce:	797a      	ldrb	r2, [r7, #5]
 80035d0:	7abb      	ldrb	r3, [r7, #10]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80035d8:	7a3b      	ldrb	r3, [r7, #8]
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	b21a      	sxth	r2, r3
 80035e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80035f0:	4b06      	ldr	r3, [pc, #24]	@ (800360c <BSP_ACCELERO_Init+0x7c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	89ba      	ldrh	r2, [r7, #12]
 80035f8:	4610      	mov	r0, r2
 80035fa:	4798      	blx	r3
  }  

  return ret;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000001c 	.word	0x2000001c
 800360c:	20001e48 	.word	0x20001e48

08003610 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003618:	4b08      	ldr	r3, [pc, #32]	@ (800363c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800362a:	4b04      	ldr	r3, [pc, #16]	@ (800363c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
    }
  }
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20001e48 	.word	0x20001e48

08003640 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800364e:	2110      	movs	r1, #16
 8003650:	20d4      	movs	r0, #212	@ 0xd4
 8003652:	f7ff fe6f 	bl	8003334 <SENSOR_IO_Read>
 8003656:	4603      	mov	r3, r0
 8003658:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800365e:	7bbb      	ldrb	r3, [r7, #14]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003666:	7bba      	ldrb	r2, [r7, #14]
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	4313      	orrs	r3, r2
 800366c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800366e:	7bbb      	ldrb	r3, [r7, #14]
 8003670:	461a      	mov	r2, r3
 8003672:	2110      	movs	r1, #16
 8003674:	20d4      	movs	r0, #212	@ 0xd4
 8003676:	f7ff fe43 	bl	8003300 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800367a:	2112      	movs	r1, #18
 800367c:	20d4      	movs	r0, #212	@ 0xd4
 800367e:	f7ff fe59 	bl	8003334 <SENSOR_IO_Read>
 8003682:	4603      	mov	r3, r0
 8003684:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	b29b      	uxth	r3, r3
 800368c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003694:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003696:	7bba      	ldrb	r2, [r7, #14]
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	4313      	orrs	r3, r2
 800369c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800369e:	7bbb      	ldrb	r3, [r7, #14]
 80036a0:	461a      	mov	r2, r3
 80036a2:	2112      	movs	r1, #18
 80036a4:	20d4      	movs	r0, #212	@ 0xd4
 80036a6:	f7ff fe2b 	bl	8003300 <SENSOR_IO_Write>
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80036b8:	2300      	movs	r3, #0
 80036ba:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80036bc:	2110      	movs	r1, #16
 80036be:	20d4      	movs	r0, #212	@ 0xd4
 80036c0:	f7ff fe38 	bl	8003334 <SENSOR_IO_Read>
 80036c4:	4603      	mov	r3, r0
 80036c6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	461a      	mov	r2, r3
 80036d4:	2110      	movs	r1, #16
 80036d6:	20d4      	movs	r0, #212	@ 0xd4
 80036d8:	f7ff fe12 	bl	8003300 <SENSOR_IO_Write>
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80036e8:	f7ff fe00 	bl	80032ec <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80036ec:	210f      	movs	r1, #15
 80036ee:	20d4      	movs	r0, #212	@ 0xd4
 80036f0:	f7ff fe20 	bl	8003334 <SENSOR_IO_Read>
 80036f4:	4603      	mov	r3, r0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	bd80      	pop	{r7, pc}

080036fa <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003708:	2115      	movs	r1, #21
 800370a:	20d4      	movs	r0, #212	@ 0xd4
 800370c:	f7ff fe12 	bl	8003334 <SENSOR_IO_Read>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	f023 0310 	bic.w	r3, r3, #16
 800371a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	f043 0310 	orr.w	r3, r3, #16
 8003728:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	461a      	mov	r2, r3
 800372e:	2115      	movs	r1, #21
 8003730:	20d4      	movs	r0, #212	@ 0xd4
 8003732:	f7ff fde5 	bl	8003300 <SENSOR_IO_Write>
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003748:	2300      	movs	r3, #0
 800374a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003756:	2110      	movs	r1, #16
 8003758:	20d4      	movs	r0, #212	@ 0xd4
 800375a:	f7ff fdeb 	bl	8003334 <SENSOR_IO_Read>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003762:	f107 0208 	add.w	r2, r7, #8
 8003766:	2306      	movs	r3, #6
 8003768:	2128      	movs	r1, #40	@ 0x28
 800376a:	20d4      	movs	r0, #212	@ 0xd4
 800376c:	f7ff fe00 	bl	8003370 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003770:	2300      	movs	r3, #0
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e01a      	b.n	80037ac <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003776:	7ffb      	ldrb	r3, [r7, #31]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	3301      	adds	r3, #1
 800377c:	3320      	adds	r3, #32
 800377e:	443b      	add	r3, r7
 8003780:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	b29b      	uxth	r3, r3
 8003788:	7ffa      	ldrb	r2, [r7, #31]
 800378a:	0052      	lsls	r2, r2, #1
 800378c:	3220      	adds	r2, #32
 800378e:	443a      	add	r2, r7
 8003790:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003794:	4413      	add	r3, r2
 8003796:	b29a      	uxth	r2, r3
 8003798:	7ffb      	ldrb	r3, [r7, #31]
 800379a:	b212      	sxth	r2, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	3320      	adds	r3, #32
 80037a0:	443b      	add	r3, r7
 80037a2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80037a6:	7ffb      	ldrb	r3, [r7, #31]
 80037a8:	3301      	adds	r3, #1
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d9e1      	bls.n	8003776 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	d829      	bhi.n	8003810 <LSM6DSL_AccReadXYZ+0xd0>
 80037bc:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <LSM6DSL_AccReadXYZ+0x84>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	08003811 	.word	0x08003811
 80037cc:	08003811 	.word	0x08003811
 80037d0:	08003811 	.word	0x08003811
 80037d4:	0800380b 	.word	0x0800380b
 80037d8:	08003811 	.word	0x08003811
 80037dc:	08003811 	.word	0x08003811
 80037e0:	08003811 	.word	0x08003811
 80037e4:	080037ff 	.word	0x080037ff
 80037e8:	08003811 	.word	0x08003811
 80037ec:	08003811 	.word	0x08003811
 80037f0:	08003811 	.word	0x08003811
 80037f4:	08003805 	.word	0x08003805
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80037f8:	4b18      	ldr	r3, [pc, #96]	@ (800385c <LSM6DSL_AccReadXYZ+0x11c>)
 80037fa:	61bb      	str	r3, [r7, #24]
    break;
 80037fc:	e008      	b.n	8003810 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80037fe:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <LSM6DSL_AccReadXYZ+0x120>)
 8003800:	61bb      	str	r3, [r7, #24]
    break;
 8003802:	e005      	b.n	8003810 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003804:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <LSM6DSL_AccReadXYZ+0x124>)
 8003806:	61bb      	str	r3, [r7, #24]
    break;
 8003808:	e002      	b.n	8003810 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800380a:	4b17      	ldr	r3, [pc, #92]	@ (8003868 <LSM6DSL_AccReadXYZ+0x128>)
 800380c:	61bb      	str	r3, [r7, #24]
    break;    
 800380e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e01a      	b.n	800384c <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003816:	7ffb      	ldrb	r3, [r7, #31]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	3320      	adds	r3, #32
 800381c:	443b      	add	r3, r7
 800381e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800382a:	edd7 7a06 	vldr	s15, [r7, #24]
 800382e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003832:	7ffb      	ldrb	r3, [r7, #31]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800383e:	ee17 2a90 	vmov	r2, s15
 8003842:	b212      	sxth	r2, r2
 8003844:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003846:	7ffb      	ldrb	r3, [r7, #31]
 8003848:	3301      	adds	r3, #1
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	7ffb      	ldrb	r3, [r7, #31]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d9e1      	bls.n	8003816 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003852:	bf00      	nop
 8003854:	bf00      	nop
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	3d79db23 	.word	0x3d79db23
 8003860:	3df9db23 	.word	0x3df9db23
 8003864:	3e79db23 	.word	0x3e79db23
 8003868:	3ef9db23 	.word	0x3ef9db23

0800386c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003876:	2003      	movs	r0, #3
 8003878:	f000 f960 	bl	8003b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387c:	200f      	movs	r0, #15
 800387e:	f000 f80d 	bl	800389c <HAL_InitTick>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	71fb      	strb	r3, [r7, #7]
 800388c:	e001      	b.n	8003892 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800388e:	f7fe fea9 	bl	80025e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003892:	79fb      	ldrb	r3, [r7, #7]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038a8:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <HAL_InitTick+0x6c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d023      	beq.n	80038f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038b0:	4b16      	ldr	r3, [pc, #88]	@ (800390c <HAL_InitTick+0x70>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <HAL_InitTick+0x6c>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038be:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f96d 	bl	8003ba6 <HAL_SYSTICK_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d809      	bhi.n	80038ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f000 f937 	bl	8003b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003910 <HAL_InitTick+0x74>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e007      	b.n	80038fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e004      	b.n	80038fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	e001      	b.n	80038fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000054 	.word	0x20000054
 800390c:	20000008 	.word	0x20000008
 8003910:	20000050 	.word	0x20000050

08003914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <HAL_IncTick+0x20>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_IncTick+0x24>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4413      	add	r3, r2
 8003924:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <HAL_IncTick+0x24>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000054 	.word	0x20000054
 8003938:	20001e4c 	.word	0x20001e4c

0800393c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return uwTick;
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <HAL_GetTick+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20001e4c 	.word	0x20001e4c

08003954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff ffee 	bl	800393c <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d005      	beq.n	800397a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800396e:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <HAL_Delay+0x44>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800397a:	bf00      	nop
 800397c:	f7ff ffde 	bl	800393c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d8f7      	bhi.n	800397c <HAL_Delay+0x28>
  {
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000054 	.word	0x20000054

0800399c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ac:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039b8:	4013      	ands	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ce:	4a04      	ldr	r2, [pc, #16]	@ (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	60d3      	str	r3, [r2, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <__NVIC_GetPriorityGrouping+0x18>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 0307 	and.w	r3, r3, #7
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	db0b      	blt.n	8003a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	4907      	ldr	r1, [pc, #28]	@ (8003a38 <__NVIC_EnableIRQ+0x38>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2001      	movs	r0, #1
 8003a22:	fa00 f202 	lsl.w	r2, r0, r2
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000e100 	.word	0xe000e100

08003a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	6039      	str	r1, [r7, #0]
 8003a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db0a      	blt.n	8003a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	490c      	ldr	r1, [pc, #48]	@ (8003a88 <__NVIC_SetPriority+0x4c>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a64:	e00a      	b.n	8003a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4908      	ldr	r1, [pc, #32]	@ (8003a8c <__NVIC_SetPriority+0x50>)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	3b04      	subs	r3, #4
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	440b      	add	r3, r1
 8003a7a:	761a      	strb	r2, [r3, #24]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000e100 	.word	0xe000e100
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	@ 0x24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f1c3 0307 	rsb	r3, r3, #7
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	bf28      	it	cs
 8003aae:	2304      	movcs	r3, #4
 8003ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d902      	bls.n	8003ac0 <NVIC_EncodePriority+0x30>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3b03      	subs	r3, #3
 8003abe:	e000      	b.n	8003ac2 <NVIC_EncodePriority+0x32>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43d9      	mvns	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	4313      	orrs	r3, r2
         );
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	@ 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b08:	d301      	bcc.n	8003b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00f      	b.n	8003b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <SysTick_Config+0x40>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b16:	210f      	movs	r1, #15
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f7ff ff8e 	bl	8003a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <SysTick_Config+0x40>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b26:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <SysTick_Config+0x40>)
 8003b28:	2207      	movs	r2, #7
 8003b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000e010 	.word	0xe000e010

08003b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff29 	bl	800399c <__NVIC_SetPriorityGrouping>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b64:	f7ff ff3e 	bl	80039e4 <__NVIC_GetPriorityGrouping>
 8003b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	f7ff ff8e 	bl	8003a90 <NVIC_EncodePriority>
 8003b74:	4602      	mov	r2, r0
 8003b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff5d 	bl	8003a3c <__NVIC_SetPriority>
}
 8003b82:	bf00      	nop
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff31 	bl	8003a00 <__NVIC_EnableIRQ>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffa2 	bl	8003af8 <SysTick_Config>
 8003bb4:	4603      	mov	r3, r0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e0ac      	b.n	8003d2c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f8b2 	bl	8003d40 <DFSDM_GetChannelFromInstance>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4a55      	ldr	r2, [pc, #340]	@ (8003d34 <HAL_DFSDM_ChannelInit+0x174>)
 8003be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e09f      	b.n	8003d2c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fe fd21 	bl	8002634 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003bf2:	4b51      	ldr	r3, [pc, #324]	@ (8003d38 <HAL_DFSDM_ChannelInit+0x178>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8003d38 <HAL_DFSDM_ChannelInit+0x178>)
 8003bfa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8003d38 <HAL_DFSDM_ChannelInit+0x178>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d125      	bne.n	8003c50 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003c04:	4b4d      	ldr	r3, [pc, #308]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a4c      	ldr	r2, [pc, #304]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c0e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003c10:	4b4a      	ldr	r3, [pc, #296]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4948      	ldr	r1, [pc, #288]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003c1e:	4b47      	ldr	r3, [pc, #284]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a46      	ldr	r2, [pc, #280]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c24:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003c28:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	791b      	ldrb	r3, [r3, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d108      	bne.n	8003c44 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003c32:	4b42      	ldr	r3, [pc, #264]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	493f      	ldr	r1, [pc, #252]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003c44:	4b3d      	ldr	r3, [pc, #244]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a3c      	ldr	r2, [pc, #240]	@ (8003d3c <HAL_DFSDM_ChannelInit+0x17c>)
 8003c4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c4e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003c5e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c6e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c74:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 020f 	bic.w	r2, r2, #15
 8003c8c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003cb4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6899      	ldr	r1, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f002 0207 	and.w	r2, r2, #7
 8003ce0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d0c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f810 	bl	8003d40 <DFSDM_GetChannelFromInstance>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4904      	ldr	r1, [pc, #16]	@ (8003d34 <HAL_DFSDM_ChannelInit+0x174>)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20001e54 	.word	0x20001e54
 8003d38:	20001e50 	.word	0x20001e50
 8003d3c:	40016000 	.word	0x40016000

08003d40 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dbc <DFSDM_GetChannelFromInstance+0x7c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d102      	bne.n	8003d56 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e02b      	b.n	8003dae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a19      	ldr	r2, [pc, #100]	@ (8003dc0 <DFSDM_GetChannelFromInstance+0x80>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d102      	bne.n	8003d64 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e024      	b.n	8003dae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a17      	ldr	r2, [pc, #92]	@ (8003dc4 <DFSDM_GetChannelFromInstance+0x84>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d102      	bne.n	8003d72 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e01d      	b.n	8003dae <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a14      	ldr	r2, [pc, #80]	@ (8003dc8 <DFSDM_GetChannelFromInstance+0x88>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d102      	bne.n	8003d80 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e016      	b.n	8003dae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a12      	ldr	r2, [pc, #72]	@ (8003dcc <DFSDM_GetChannelFromInstance+0x8c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d102      	bne.n	8003d8e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003d88:	2305      	movs	r3, #5
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e00f      	b.n	8003dae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd0 <DFSDM_GetChannelFromInstance+0x90>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d102      	bne.n	8003d9c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003d96:	2306      	movs	r3, #6
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e008      	b.n	8003dae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd4 <DFSDM_GetChannelFromInstance+0x94>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d102      	bne.n	8003daa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003da4:	2307      	movs	r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e001      	b.n	8003dae <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003daa:	2303      	movs	r3, #3
 8003dac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003dae:	68fb      	ldr	r3, [r7, #12]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40016000 	.word	0x40016000
 8003dc0:	40016020 	.word	0x40016020
 8003dc4:	40016040 	.word	0x40016040
 8003dc8:	40016080 	.word	0x40016080
 8003dcc:	400160a0 	.word	0x400160a0
 8003dd0:	400160c0 	.word	0x400160c0
 8003dd4:	400160e0 	.word	0x400160e0

08003dd8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	460b      	mov	r3, r1
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	605a      	str	r2, [r3, #4]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	bf00      	nop
  }

  return status;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e003      	b.n	8003e28 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <HAL_EXTI_IRQHandler+0x5c>)
 8003e5e:	4413      	add	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4798      	blx	r3
    }
  }
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40010414 	.word	0x40010414

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea2:	e17f      	b.n	80041a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8171 	beq.w	800419e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d005      	beq.n	8003ed4 <HAL_GPIO_Init+0x40>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d130      	bne.n	8003f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	f003 0201 	and.w	r2, r3, #1
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d118      	bne.n	8003f74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f48:	2201      	movs	r2, #1
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	08db      	lsrs	r3, r3, #3
 8003f5e:	f003 0201 	and.w	r2, r3, #1
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d017      	beq.n	8003fb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d123      	bne.n	8004004 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	08da      	lsrs	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3208      	adds	r2, #8
 8003fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	220f      	movs	r2, #15
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	08da      	lsrs	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3208      	adds	r2, #8
 8003ffe:	6939      	ldr	r1, [r7, #16]
 8004000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	2203      	movs	r2, #3
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0203 	and.w	r2, r3, #3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80ac 	beq.w	800419e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004046:	4b5f      	ldr	r3, [pc, #380]	@ (80041c4 <HAL_GPIO_Init+0x330>)
 8004048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404a:	4a5e      	ldr	r2, [pc, #376]	@ (80041c4 <HAL_GPIO_Init+0x330>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6613      	str	r3, [r2, #96]	@ 0x60
 8004052:	4b5c      	ldr	r3, [pc, #368]	@ (80041c4 <HAL_GPIO_Init+0x330>)
 8004054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800405e:	4a5a      	ldr	r2, [pc, #360]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	3302      	adds	r3, #2
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004088:	d025      	beq.n	80040d6 <HAL_GPIO_Init+0x242>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4f      	ldr	r2, [pc, #316]	@ (80041cc <HAL_GPIO_Init+0x338>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <HAL_GPIO_Init+0x23e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4e      	ldr	r2, [pc, #312]	@ (80041d0 <HAL_GPIO_Init+0x33c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d019      	beq.n	80040ce <HAL_GPIO_Init+0x23a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4d      	ldr	r2, [pc, #308]	@ (80041d4 <HAL_GPIO_Init+0x340>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_GPIO_Init+0x236>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4c      	ldr	r2, [pc, #304]	@ (80041d8 <HAL_GPIO_Init+0x344>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_GPIO_Init+0x232>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4b      	ldr	r2, [pc, #300]	@ (80041dc <HAL_GPIO_Init+0x348>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_Init+0x22e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4a      	ldr	r2, [pc, #296]	@ (80041e0 <HAL_GPIO_Init+0x34c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_GPIO_Init+0x22a>
 80040ba:	2306      	movs	r3, #6
 80040bc:	e00c      	b.n	80040d8 <HAL_GPIO_Init+0x244>
 80040be:	2307      	movs	r3, #7
 80040c0:	e00a      	b.n	80040d8 <HAL_GPIO_Init+0x244>
 80040c2:	2305      	movs	r3, #5
 80040c4:	e008      	b.n	80040d8 <HAL_GPIO_Init+0x244>
 80040c6:	2304      	movs	r3, #4
 80040c8:	e006      	b.n	80040d8 <HAL_GPIO_Init+0x244>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e004      	b.n	80040d8 <HAL_GPIO_Init+0x244>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e002      	b.n	80040d8 <HAL_GPIO_Init+0x244>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_GPIO_Init+0x244>
 80040d6:	2300      	movs	r3, #0
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	f002 0203 	and.w	r2, r2, #3
 80040de:	0092      	lsls	r2, r2, #2
 80040e0:	4093      	lsls	r3, r2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040e8:	4937      	ldr	r1, [pc, #220]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	3302      	adds	r3, #2
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f6:	4b3b      	ldr	r3, [pc, #236]	@ (80041e4 <HAL_GPIO_Init+0x350>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	43db      	mvns	r3, r3
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4013      	ands	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800411a:	4a32      	ldr	r2, [pc, #200]	@ (80041e4 <HAL_GPIO_Init+0x350>)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004120:	4b30      	ldr	r3, [pc, #192]	@ (80041e4 <HAL_GPIO_Init+0x350>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	43db      	mvns	r3, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004144:	4a27      	ldr	r2, [pc, #156]	@ (80041e4 <HAL_GPIO_Init+0x350>)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <HAL_GPIO_Init+0x350>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800416e:	4a1d      	ldr	r2, [pc, #116]	@ (80041e4 <HAL_GPIO_Init+0x350>)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004174:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <HAL_GPIO_Init+0x350>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004198:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <HAL_GPIO_Init+0x350>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3301      	adds	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f47f ae78 	bne.w	8003ea4 <HAL_GPIO_Init+0x10>
  }
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40010000 	.word	0x40010000
 80041cc:	48000400 	.word	0x48000400
 80041d0:	48000800 	.word	0x48000800
 80041d4:	48000c00 	.word	0x48000c00
 80041d8:	48001000 	.word	0x48001000
 80041dc:	48001400 	.word	0x48001400
 80041e0:	48001800 	.word	0x48001800
 80041e4:	40010400 	.word	0x40010400

080041e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80041f6:	e0cd      	b.n	8004394 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80041f8:	2201      	movs	r2, #1
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80c0 	beq.w	800438e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800420e:	4a68      	ldr	r2, [pc, #416]	@ (80043b0 <HAL_GPIO_DeInit+0x1c8>)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	3302      	adds	r3, #2
 8004216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	220f      	movs	r2, #15
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004236:	d025      	beq.n	8004284 <HAL_GPIO_DeInit+0x9c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a5e      	ldr	r2, [pc, #376]	@ (80043b4 <HAL_GPIO_DeInit+0x1cc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d01f      	beq.n	8004280 <HAL_GPIO_DeInit+0x98>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a5d      	ldr	r2, [pc, #372]	@ (80043b8 <HAL_GPIO_DeInit+0x1d0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d019      	beq.n	800427c <HAL_GPIO_DeInit+0x94>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a5c      	ldr	r2, [pc, #368]	@ (80043bc <HAL_GPIO_DeInit+0x1d4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_GPIO_DeInit+0x90>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a5b      	ldr	r2, [pc, #364]	@ (80043c0 <HAL_GPIO_DeInit+0x1d8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00d      	beq.n	8004274 <HAL_GPIO_DeInit+0x8c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a5a      	ldr	r2, [pc, #360]	@ (80043c4 <HAL_GPIO_DeInit+0x1dc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <HAL_GPIO_DeInit+0x88>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a59      	ldr	r2, [pc, #356]	@ (80043c8 <HAL_GPIO_DeInit+0x1e0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_GPIO_DeInit+0x84>
 8004268:	2306      	movs	r3, #6
 800426a:	e00c      	b.n	8004286 <HAL_GPIO_DeInit+0x9e>
 800426c:	2307      	movs	r3, #7
 800426e:	e00a      	b.n	8004286 <HAL_GPIO_DeInit+0x9e>
 8004270:	2305      	movs	r3, #5
 8004272:	e008      	b.n	8004286 <HAL_GPIO_DeInit+0x9e>
 8004274:	2304      	movs	r3, #4
 8004276:	e006      	b.n	8004286 <HAL_GPIO_DeInit+0x9e>
 8004278:	2303      	movs	r3, #3
 800427a:	e004      	b.n	8004286 <HAL_GPIO_DeInit+0x9e>
 800427c:	2302      	movs	r3, #2
 800427e:	e002      	b.n	8004286 <HAL_GPIO_DeInit+0x9e>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_GPIO_DeInit+0x9e>
 8004284:	2300      	movs	r3, #0
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	f002 0203 	and.w	r2, r2, #3
 800428c:	0092      	lsls	r2, r2, #2
 800428e:	4093      	lsls	r3, r2
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	429a      	cmp	r2, r3
 8004294:	d132      	bne.n	80042fc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004296:	4b4d      	ldr	r3, [pc, #308]	@ (80043cc <HAL_GPIO_DeInit+0x1e4>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	43db      	mvns	r3, r3
 800429e:	494b      	ldr	r1, [pc, #300]	@ (80043cc <HAL_GPIO_DeInit+0x1e4>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80042a4:	4b49      	ldr	r3, [pc, #292]	@ (80043cc <HAL_GPIO_DeInit+0x1e4>)
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	4947      	ldr	r1, [pc, #284]	@ (80043cc <HAL_GPIO_DeInit+0x1e4>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80042b2:	4b46      	ldr	r3, [pc, #280]	@ (80043cc <HAL_GPIO_DeInit+0x1e4>)
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	4944      	ldr	r1, [pc, #272]	@ (80043cc <HAL_GPIO_DeInit+0x1e4>)
 80042bc:	4013      	ands	r3, r2
 80042be:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80042c0:	4b42      	ldr	r3, [pc, #264]	@ (80043cc <HAL_GPIO_DeInit+0x1e4>)
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	4940      	ldr	r1, [pc, #256]	@ (80043cc <HAL_GPIO_DeInit+0x1e4>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	220f      	movs	r2, #15
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80042de:	4a34      	ldr	r2, [pc, #208]	@ (80043b0 <HAL_GPIO_DeInit+0x1c8>)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	089b      	lsrs	r3, r3, #2
 80042e4:	3302      	adds	r3, #2
 80042e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	4830      	ldr	r0, [pc, #192]	@ (80043b0 <HAL_GPIO_DeInit+0x1c8>)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	400a      	ands	r2, r1
 80042f6:	3302      	adds	r3, #2
 80042f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	2103      	movs	r1, #3
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	08da      	lsrs	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3208      	adds	r2, #8
 8004318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	220f      	movs	r2, #15
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	08d2      	lsrs	r2, r2, #3
 8004330:	4019      	ands	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3208      	adds	r2, #8
 8004336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	2103      	movs	r1, #3
 8004344:	fa01 f303 	lsl.w	r3, r1, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	401a      	ands	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	2101      	movs	r1, #1
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	401a      	ands	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	2103      	movs	r1, #3
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	401a      	ands	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437e:	2101      	movs	r1, #1
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	401a      	ands	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3301      	adds	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	f47f af2b 	bne.w	80041f8 <HAL_GPIO_DeInit+0x10>
  }
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40010000 	.word	0x40010000
 80043b4:	48000400 	.word	0x48000400
 80043b8:	48000800 	.word	0x48000800
 80043bc:	48000c00 	.word	0x48000c00
 80043c0:	48001000 	.word	0x48001000
 80043c4:	48001400 	.word	0x48001400
 80043c8:	48001800 	.word	0x48001800
 80043cc:	40010400 	.word	0x40010400

080043d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	887b      	ldrh	r3, [r7, #2]
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e001      	b.n	80043f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ee:	2300      	movs	r3, #0
 80043f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004410:	787b      	ldrb	r3, [r7, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800441c:	e002      	b.n	8004424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800441e:	887a      	ldrh	r2, [r7, #2]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800443a:	4b08      	ldr	r3, [pc, #32]	@ (800445c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d006      	beq.n	8004454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004446:	4a05      	ldr	r2, [pc, #20]	@ (800445c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f806 	bl	8004460 <HAL_GPIO_EXTI_Callback>
  }
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40010400 	.word	0x40010400

08004460 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e08d      	b.n	80045a4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fe f92d 	bl	80026fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2224      	movs	r2, #36	@ 0x24
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d107      	bne.n	80044f0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044ec:	609a      	str	r2, [r3, #8]
 80044ee:	e006      	b.n	80044fe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d108      	bne.n	8004518 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	e007      	b.n	8004528 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004526:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800454a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69d9      	ldr	r1, [r3, #28]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1a      	ldr	r2, [r3, #32]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e021      	b.n	8004602 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2224      	movs	r2, #36	@ 0x24
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fe f8ee 	bl	80027b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	461a      	mov	r2, r3
 800461a:	4603      	mov	r3, r0
 800461c:	817b      	strh	r3, [r7, #10]
 800461e:	460b      	mov	r3, r1
 8004620:	813b      	strh	r3, [r7, #8]
 8004622:	4613      	mov	r3, r2
 8004624:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b20      	cmp	r3, #32
 8004630:	f040 80f9 	bne.w	8004826 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_I2C_Mem_Write+0x34>
 800463a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004646:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0ed      	b.n	8004828 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_I2C_Mem_Write+0x4e>
 8004656:	2302      	movs	r3, #2
 8004658:	e0e6      	b.n	8004828 <HAL_I2C_Mem_Write+0x21c>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004662:	f7ff f96b 	bl	800393c <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2319      	movs	r3, #25
 800466e:	2201      	movs	r2, #1
 8004670:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fac3 	bl	8004c00 <I2C_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0d1      	b.n	8004828 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2221      	movs	r2, #33	@ 0x21
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2240      	movs	r2, #64	@ 0x40
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ac:	88f8      	ldrh	r0, [r7, #6]
 80046ae:	893a      	ldrh	r2, [r7, #8]
 80046b0:	8979      	ldrh	r1, [r7, #10]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	4603      	mov	r3, r0
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f9d3 	bl	8004a68 <I2C_RequestMemoryWrite>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0a9      	b.n	8004828 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2bff      	cmp	r3, #255	@ 0xff
 80046dc:	d90e      	bls.n	80046fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	22ff      	movs	r2, #255	@ 0xff
 80046e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	8979      	ldrh	r1, [r7, #10]
 80046ec:	2300      	movs	r3, #0
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fc47 	bl	8004f88 <I2C_TransferConfig>
 80046fa:	e00f      	b.n	800471c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	b2da      	uxtb	r2, r3
 800470c:	8979      	ldrh	r1, [r7, #10]
 800470e:	2300      	movs	r3, #0
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fc36 	bl	8004f88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fac6 	bl	8004cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e07b      	b.n	8004828 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d034      	beq.n	80047d4 <HAL_I2C_Mem_Write+0x1c8>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d130      	bne.n	80047d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	2200      	movs	r2, #0
 800477a:	2180      	movs	r1, #128	@ 0x80
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fa3f 	bl	8004c00 <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e04d      	b.n	8004828 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2bff      	cmp	r3, #255	@ 0xff
 8004794:	d90e      	bls.n	80047b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	22ff      	movs	r2, #255	@ 0xff
 800479a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	8979      	ldrh	r1, [r7, #10]
 80047a4:	2300      	movs	r3, #0
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fbeb 	bl	8004f88 <I2C_TransferConfig>
 80047b2:	e00f      	b.n	80047d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	8979      	ldrh	r1, [r7, #10]
 80047c6:	2300      	movs	r3, #0
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fbda 	bl	8004f88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d19e      	bne.n	800471c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 faac 	bl	8004d40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e01a      	b.n	8004828 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2220      	movs	r2, #32
 80047f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <HAL_I2C_Mem_Write+0x224>)
 8004806:	400b      	ands	r3, r1
 8004808:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e000      	b.n	8004828 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	fe00e800 	.word	0xfe00e800

08004834 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	4608      	mov	r0, r1
 800483e:	4611      	mov	r1, r2
 8004840:	461a      	mov	r2, r3
 8004842:	4603      	mov	r3, r0
 8004844:	817b      	strh	r3, [r7, #10]
 8004846:	460b      	mov	r3, r1
 8004848:	813b      	strh	r3, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	f040 80fd 	bne.w	8004a56 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_I2C_Mem_Read+0x34>
 8004862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0f1      	b.n	8004a58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_I2C_Mem_Read+0x4e>
 800487e:	2302      	movs	r3, #2
 8004880:	e0ea      	b.n	8004a58 <HAL_I2C_Mem_Read+0x224>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800488a:	f7ff f857 	bl	800393c <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2319      	movs	r3, #25
 8004896:	2201      	movs	r2, #1
 8004898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f9af 	bl	8004c00 <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0d5      	b.n	8004a58 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2222      	movs	r2, #34	@ 0x22
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2240      	movs	r2, #64	@ 0x40
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80048cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048d4:	88f8      	ldrh	r0, [r7, #6]
 80048d6:	893a      	ldrh	r2, [r7, #8]
 80048d8:	8979      	ldrh	r1, [r7, #10]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4603      	mov	r3, r0
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f913 	bl	8004b10 <I2C_RequestMemoryRead>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0ad      	b.n	8004a58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2bff      	cmp	r3, #255	@ 0xff
 8004904:	d90e      	bls.n	8004924 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004910:	b2da      	uxtb	r2, r3
 8004912:	8979      	ldrh	r1, [r7, #10]
 8004914:	4b52      	ldr	r3, [pc, #328]	@ (8004a60 <HAL_I2C_Mem_Read+0x22c>)
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fb33 	bl	8004f88 <I2C_TransferConfig>
 8004922:	e00f      	b.n	8004944 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	b2da      	uxtb	r2, r3
 8004934:	8979      	ldrh	r1, [r7, #10]
 8004936:	4b4a      	ldr	r3, [pc, #296]	@ (8004a60 <HAL_I2C_Mem_Read+0x22c>)
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fb22 	bl	8004f88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	2200      	movs	r2, #0
 800494c:	2104      	movs	r1, #4
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f956 	bl	8004c00 <I2C_WaitOnFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e07c      	b.n	8004a58 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d034      	beq.n	8004a04 <HAL_I2C_Mem_Read+0x1d0>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d130      	bne.n	8004a04 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	2200      	movs	r2, #0
 80049aa:	2180      	movs	r1, #128	@ 0x80
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f927 	bl	8004c00 <I2C_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e04d      	b.n	8004a58 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2bff      	cmp	r3, #255	@ 0xff
 80049c4:	d90e      	bls.n	80049e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	8979      	ldrh	r1, [r7, #10]
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fad3 	bl	8004f88 <I2C_TransferConfig>
 80049e2:	e00f      	b.n	8004a04 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	8979      	ldrh	r1, [r7, #10]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fac2 	bl	8004f88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d19a      	bne.n	8004944 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f994 	bl	8004d40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e01a      	b.n	8004a58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2220      	movs	r2, #32
 8004a28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_I2C_Mem_Read+0x230>)
 8004a36:	400b      	ands	r3, r1
 8004a38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	80002400 	.word	0x80002400
 8004a64:	fe00e800 	.word	0xfe00e800

08004a68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	4608      	mov	r0, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	461a      	mov	r2, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	817b      	strh	r3, [r7, #10]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	813b      	strh	r3, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	8979      	ldrh	r1, [r7, #10]
 8004a88:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <I2C_RequestMemoryWrite+0xa4>)
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fa79 	bl	8004f88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	69b9      	ldr	r1, [r7, #24]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f909 	bl	8004cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e02c      	b.n	8004b04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab0:	893b      	ldrh	r3, [r7, #8]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004aba:	e015      	b.n	8004ae8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004abc:	893b      	ldrh	r3, [r7, #8]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	69b9      	ldr	r1, [r7, #24]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f8ef 	bl	8004cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e012      	b.n	8004b04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2200      	movs	r2, #0
 8004af0:	2180      	movs	r1, #128	@ 0x80
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f884 	bl	8004c00 <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	80002000 	.word	0x80002000

08004b10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	4608      	mov	r0, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4603      	mov	r3, r0
 8004b20:	817b      	strh	r3, [r7, #10]
 8004b22:	460b      	mov	r3, r1
 8004b24:	813b      	strh	r3, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	8979      	ldrh	r1, [r7, #10]
 8004b30:	4b20      	ldr	r3, [pc, #128]	@ (8004bb4 <I2C_RequestMemoryRead+0xa4>)
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fa26 	bl	8004f88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	69b9      	ldr	r1, [r7, #24]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f8b6 	bl	8004cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e02c      	b.n	8004baa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b56:	893b      	ldrh	r3, [r7, #8]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b60:	e015      	b.n	8004b8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b62:	893b      	ldrh	r3, [r7, #8]
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	69b9      	ldr	r1, [r7, #24]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f89c 	bl	8004cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e012      	b.n	8004baa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b84:	893b      	ldrh	r3, [r7, #8]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2140      	movs	r1, #64	@ 0x40
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f831 	bl	8004c00 <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	80002000 	.word	0x80002000

08004bb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d103      	bne.n	8004bd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d007      	beq.n	8004bf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	619a      	str	r2, [r3, #24]
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c10:	e03b      	b.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f8d6 	bl	8004dc8 <I2C_IsErrorOccurred>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e041      	b.n	8004caa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d02d      	beq.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fe fe85 	bl	800393c <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d122      	bne.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d113      	bne.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	f043 0220 	orr.w	r2, r3, #32
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00f      	b.n	8004caa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699a      	ldr	r2, [r3, #24]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4013      	ands	r3, r2
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d0b4      	beq.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cbe:	e033      	b.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f87f 	bl	8004dc8 <I2C_IsErrorOccurred>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e031      	b.n	8004d38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d025      	beq.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cdc:	f7fe fe2e 	bl	800393c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d302      	bcc.n	8004cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11a      	bne.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d013      	beq.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e007      	b.n	8004d38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d1c4      	bne.n	8004cc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d4c:	e02f      	b.n	8004dae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f838 	bl	8004dc8 <I2C_IsErrorOccurred>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e02d      	b.n	8004dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7fe fdeb 	bl	800393c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11a      	bne.n	8004dae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d013      	beq.n	8004dae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e007      	b.n	8004dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d1c8      	bne.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	@ 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d068      	beq.n	8004ec6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2210      	movs	r2, #16
 8004dfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dfc:	e049      	b.n	8004e92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d045      	beq.n	8004e92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fe fd99 	bl	800393c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <I2C_IsErrorOccurred+0x54>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d13a      	bne.n	8004e92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e3e:	d121      	bne.n	8004e84 <I2C_IsErrorOccurred+0xbc>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e46:	d01d      	beq.n	8004e84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d01a      	beq.n	8004e84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e5e:	f7fe fd6d 	bl	800393c <HAL_GetTick>
 8004e62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e64:	e00e      	b.n	8004e84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e66:	f7fe fd69 	bl	800393c <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b19      	cmp	r3, #25
 8004e72:	d907      	bls.n	8004e84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	f043 0320 	orr.w	r3, r3, #32
 8004e7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e82:	e006      	b.n	8004e92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d1e9      	bne.n	8004e66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d003      	beq.n	8004ea8 <I2C_IsErrorOccurred+0xe0>
 8004ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0aa      	beq.n	8004dfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	f043 0304 	orr.w	r3, r3, #4
 8004ebe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00b      	beq.n	8004ef0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ee8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	f043 0302 	orr.w	r3, r3, #2
 8004f22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01c      	beq.n	8004f76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff fe3b 	bl	8004bb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <I2C_IsErrorOccurred+0x1bc>)
 8004f4e:	400b      	ands	r3, r1
 8004f50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3728      	adds	r7, #40	@ 0x28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	fe00e800 	.word	0xfe00e800

08004f88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	817b      	strh	r3, [r7, #10]
 8004f96:	4613      	mov	r3, r2
 8004f98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f9a:	897b      	ldrh	r3, [r7, #10]
 8004f9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fa0:	7a7b      	ldrb	r3, [r7, #9]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fa8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fb6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	0d5b      	lsrs	r3, r3, #21
 8004fc2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004fc6:	4b08      	ldr	r3, [pc, #32]	@ (8004fe8 <I2C_TransferConfig+0x60>)
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	ea02 0103 	and.w	r1, r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	03ff63ff 	.word	0x03ff63ff

08004fec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d138      	bne.n	8005074 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800500c:	2302      	movs	r3, #2
 800500e:	e032      	b.n	8005076 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2224      	movs	r2, #36	@ 0x24
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800503e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6819      	ldr	r1, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005074:	2302      	movs	r3, #2
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b20      	cmp	r3, #32
 8005096:	d139      	bne.n	800510c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e033      	b.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2224      	movs	r2, #36	@ 0x24
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af02      	add	r7, sp, #8
 8005120:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e101      	b.n	8005330 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fd fbff 	bl	8002944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2203      	movs	r2, #3
 800514a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f002 ff33 	bl	8007fc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7c1a      	ldrb	r2, [r3, #16]
 8005166:	f88d 2000 	strb.w	r2, [sp]
 800516a:	3304      	adds	r3, #4
 800516c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800516e:	f002 fefc 	bl	8007f6a <USB_CoreInit>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0d5      	b.n	8005330 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f002 ff2b 	bl	8007fe6 <USB_SetCurrentMode>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0c6      	b.n	8005330 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
 80051a6:	e04a      	b.n	800523e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3315      	adds	r3, #21
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3314      	adds	r3, #20
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	b298      	uxth	r0, r3
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	332e      	adds	r3, #46	@ 0x2e
 80051e4:	4602      	mov	r2, r0
 80051e6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3318      	adds	r3, #24
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	331c      	adds	r3, #28
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005210:	7bfa      	ldrb	r2, [r7, #15]
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	3320      	adds	r3, #32
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	3324      	adds	r3, #36	@ 0x24
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	3301      	adds	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	791b      	ldrb	r3, [r3, #4]
 8005242:	7bfa      	ldrb	r2, [r7, #15]
 8005244:	429a      	cmp	r2, r3
 8005246:	d3af      	bcc.n	80051a8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	e044      	b.n	80052d8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800527a:	7bfa      	ldrb	r2, [r7, #15]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005290:	7bfa      	ldrb	r2, [r7, #15]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052a6:	7bfa      	ldrb	r2, [r7, #15]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052bc:	7bfa      	ldrb	r2, [r7, #15]
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	3301      	adds	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	791b      	ldrb	r3, [r3, #4]
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d3b5      	bcc.n	800524e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7c1a      	ldrb	r2, [r3, #16]
 80052ea:	f88d 2000 	strb.w	r2, [sp]
 80052ee:	3304      	adds	r3, #4
 80052f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052f2:	f002 fec5 	bl	8008080 <USB_DevInit>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e013      	b.n	8005330 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	7b1b      	ldrb	r3, [r3, #12]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d102      	bne.n	8005324 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f80a 	bl	8005338 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f003 f86a 	bl	8008402 <USB_DevDisconnect>

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800536a:	f043 0303 	orr.w	r3, r3, #3
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005384:	4b05      	ldr	r3, [pc, #20]	@ (800539c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a04      	ldr	r2, [pc, #16]	@ (800539c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800538a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800538e:	6013      	str	r3, [r2, #0]
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40007000 	.word	0x40007000

080053a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053a4:	4b04      	ldr	r3, [pc, #16]	@ (80053b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40007000 	.word	0x40007000

080053bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ca:	d130      	bne.n	800542e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053cc:	4b23      	ldr	r3, [pc, #140]	@ (800545c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053d8:	d038      	beq.n	800544c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053da:	4b20      	ldr	r3, [pc, #128]	@ (800545c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053e2:	4a1e      	ldr	r2, [pc, #120]	@ (800545c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005460 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2232      	movs	r2, #50	@ 0x32
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005464 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	0c9b      	lsrs	r3, r3, #18
 80053fc:	3301      	adds	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005400:	e002      	b.n	8005408 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3b01      	subs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005408:	4b14      	ldr	r3, [pc, #80]	@ (800545c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005414:	d102      	bne.n	800541c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f2      	bne.n	8005402 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800541c:	4b0f      	ldr	r3, [pc, #60]	@ (800545c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005428:	d110      	bne.n	800544c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e00f      	b.n	800544e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800542e:	4b0b      	ldr	r3, [pc, #44]	@ (800545c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d007      	beq.n	800544c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800543c:	4b07      	ldr	r3, [pc, #28]	@ (800545c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005444:	4a05      	ldr	r2, [pc, #20]	@ (800545c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800544a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40007000 	.word	0x40007000
 8005460:	20000008 	.word	0x20000008
 8005464:	431bde83 	.word	0x431bde83

08005468 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800546c:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <HAL_PWREx_EnableVddUSB+0x1c>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a04      	ldr	r2, [pc, #16]	@ (8005484 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005472:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005476:	6053      	str	r3, [r2, #4]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40007000 	.word	0x40007000

08005488 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af02      	add	r7, sp, #8
 800548e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005490:	f7fe fa54 	bl	800393c <HAL_GetTick>
 8005494:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e063      	b.n	8005568 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fd f9a3 	bl	8002800 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80054ba:	f241 3188 	movw	r1, #5000	@ 0x1388
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f858 	bl	8005574 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	021a      	lsls	r2, r3, #8
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	2120      	movs	r1, #32
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f850 	bl	8005590 <QSPI_WaitFlagStateUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d131      	bne.n	800555e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005504:	f023 0310 	bic.w	r3, r3, #16
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6852      	ldr	r2, [r2, #4]
 800550c:	0611      	lsls	r1, r2, #24
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68d2      	ldr	r2, [r2, #12]
 8005512:	4311      	orrs	r1, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	430b      	orrs	r3, r1
 800551a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	4b13      	ldr	r3, [pc, #76]	@ (8005570 <HAL_QSPI_Init+0xe8>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6912      	ldr	r2, [r2, #16]
 800552a:	0411      	lsls	r1, r2, #16
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6952      	ldr	r2, [r2, #20]
 8005530:	4311      	orrs	r1, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6992      	ldr	r2, [r2, #24]
 8005536:	4311      	orrs	r1, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	430b      	orrs	r3, r1
 800553e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8005566:	7afb      	ldrb	r3, [r7, #11]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	ffe0f8fe 	.word	0xffe0f8fe

08005574 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055a0:	e01a      	b.n	80055d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d016      	beq.n	80055d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fe f9c7 	bl	800393c <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2204      	movs	r2, #4
 80055c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	f043 0201 	orr.w	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e00e      	b.n	80055f6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d1d6      	bne.n	80055a2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e3ca      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005612:	4b97      	ldr	r3, [pc, #604]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800561c:	4b94      	ldr	r3, [pc, #592]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80e4 	beq.w	80057fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_RCC_OscConfig+0x4a>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	f040 808b 	bne.w	8005758 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b01      	cmp	r3, #1
 8005646:	f040 8087 	bne.w	8005758 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800564a:	4b89      	ldr	r3, [pc, #548]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_RCC_OscConfig+0x62>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e3a2      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	4b82      	ldr	r3, [pc, #520]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <HAL_RCC_OscConfig+0x7c>
 8005672:	4b7f      	ldr	r3, [pc, #508]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800567a:	e005      	b.n	8005688 <HAL_RCC_OscConfig+0x88>
 800567c:	4b7c      	ldr	r3, [pc, #496]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 800567e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005688:	4293      	cmp	r3, r2
 800568a:	d223      	bcs.n	80056d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fd55 	bl	8006140 <RCC_SetFlashLatencyFromMSIRange>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e383      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056a0:	4b73      	ldr	r3, [pc, #460]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a72      	ldr	r2, [pc, #456]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056a6:	f043 0308 	orr.w	r3, r3, #8
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b70      	ldr	r3, [pc, #448]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	496d      	ldr	r1, [pc, #436]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056be:	4b6c      	ldr	r3, [pc, #432]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	4968      	ldr	r1, [pc, #416]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	604b      	str	r3, [r1, #4]
 80056d2:	e025      	b.n	8005720 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056d4:	4b66      	ldr	r3, [pc, #408]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a65      	ldr	r2, [pc, #404]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056da:	f043 0308 	orr.w	r3, r3, #8
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b63      	ldr	r3, [pc, #396]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	4960      	ldr	r1, [pc, #384]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	495b      	ldr	r1, [pc, #364]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005702:	4313      	orrs	r3, r2
 8005704:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fd15 	bl	8006140 <RCC_SetFlashLatencyFromMSIRange>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e343      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005720:	f000 fc4a 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	4b52      	ldr	r3, [pc, #328]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	091b      	lsrs	r3, r3, #4
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	4950      	ldr	r1, [pc, #320]	@ (8005874 <HAL_RCC_OscConfig+0x274>)
 8005732:	5ccb      	ldrb	r3, [r1, r3]
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	fa22 f303 	lsr.w	r3, r2, r3
 800573c:	4a4e      	ldr	r2, [pc, #312]	@ (8005878 <HAL_RCC_OscConfig+0x278>)
 800573e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005740:	4b4e      	ldr	r3, [pc, #312]	@ (800587c <HAL_RCC_OscConfig+0x27c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7fe f8a9 	bl	800389c <HAL_InitTick>
 800574a:	4603      	mov	r3, r0
 800574c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d052      	beq.n	80057fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	e327      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d032      	beq.n	80057c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005760:	4b43      	ldr	r3, [pc, #268]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a42      	ldr	r2, [pc, #264]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800576c:	f7fe f8e6 	bl	800393c <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005774:	f7fe f8e2 	bl	800393c <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e310      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005786:	4b3a      	ldr	r3, [pc, #232]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005792:	4b37      	ldr	r3, [pc, #220]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a36      	ldr	r2, [pc, #216]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005798:	f043 0308 	orr.w	r3, r3, #8
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	4b34      	ldr	r3, [pc, #208]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	4931      	ldr	r1, [pc, #196]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	492c      	ldr	r1, [pc, #176]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
 80057c4:	e01a      	b.n	80057fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a29      	ldr	r2, [pc, #164]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057d2:	f7fe f8b3 	bl	800393c <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057da:	f7fe f8af 	bl	800393c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e2dd      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057ec:	4b20      	ldr	r3, [pc, #128]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f0      	bne.n	80057da <HAL_RCC_OscConfig+0x1da>
 80057f8:	e000      	b.n	80057fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d074      	beq.n	80058f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b08      	cmp	r3, #8
 800580c:	d005      	beq.n	800581a <HAL_RCC_OscConfig+0x21a>
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d10e      	bne.n	8005832 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d10b      	bne.n	8005832 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800581a:	4b15      	ldr	r3, [pc, #84]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d064      	beq.n	80058f0 <HAL_RCC_OscConfig+0x2f0>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d160      	bne.n	80058f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e2ba      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800583a:	d106      	bne.n	800584a <HAL_RCC_OscConfig+0x24a>
 800583c:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0b      	ldr	r2, [pc, #44]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	e026      	b.n	8005898 <HAL_RCC_OscConfig+0x298>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005852:	d115      	bne.n	8005880 <HAL_RCC_OscConfig+0x280>
 8005854:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a05      	ldr	r2, [pc, #20]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 800585a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	4b03      	ldr	r3, [pc, #12]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a02      	ldr	r2, [pc, #8]	@ (8005870 <HAL_RCC_OscConfig+0x270>)
 8005866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	e014      	b.n	8005898 <HAL_RCC_OscConfig+0x298>
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000
 8005874:	0800f8d0 	.word	0x0800f8d0
 8005878:	20000008 	.word	0x20000008
 800587c:	20000050 	.word	0x20000050
 8005880:	4ba0      	ldr	r3, [pc, #640]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a9f      	ldr	r2, [pc, #636]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	4b9d      	ldr	r3, [pc, #628]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a9c      	ldr	r2, [pc, #624]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fe f84c 	bl	800393c <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fe f848 	bl	800393c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	@ 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e276      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ba:	4b92      	ldr	r3, [pc, #584]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0x2a8>
 80058c6:	e014      	b.n	80058f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe f838 	bl	800393c <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fe f834 	bl	800393c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	@ 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e262      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058e2:	4b88      	ldr	r3, [pc, #544]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x2d0>
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d060      	beq.n	80059c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b04      	cmp	r3, #4
 8005902:	d005      	beq.n	8005910 <HAL_RCC_OscConfig+0x310>
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d119      	bne.n	800593e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d116      	bne.n	800593e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005910:	4b7c      	ldr	r3, [pc, #496]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_OscConfig+0x328>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e23f      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005928:	4b76      	ldr	r3, [pc, #472]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	4973      	ldr	r1, [pc, #460]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005938:	4313      	orrs	r3, r2
 800593a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800593c:	e040      	b.n	80059c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d023      	beq.n	800598e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005946:	4b6f      	ldr	r3, [pc, #444]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6e      	ldr	r2, [pc, #440]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 800594c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fd fff3 	bl	800393c <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800595a:	f7fd ffef 	bl	800393c <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e21d      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800596c:	4b65      	ldr	r3, [pc, #404]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f0      	beq.n	800595a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005978:	4b62      	ldr	r3, [pc, #392]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	061b      	lsls	r3, r3, #24
 8005986:	495f      	ldr	r1, [pc, #380]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]
 800598c:	e018      	b.n	80059c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800598e:	4b5d      	ldr	r3, [pc, #372]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5c      	ldr	r2, [pc, #368]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599a:	f7fd ffcf 	bl	800393c <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a2:	f7fd ffcb 	bl	800393c <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e1f9      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059b4:	4b53      	ldr	r3, [pc, #332]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f0      	bne.n	80059a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d03c      	beq.n	8005a46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01c      	beq.n	8005a0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 80059d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059da:	4a4a      	ldr	r2, [pc, #296]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fd ffaa 	bl	800393c <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ec:	f7fd ffa6 	bl	800393c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e1d4      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059fe:	4b41      	ldr	r3, [pc, #260]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ef      	beq.n	80059ec <HAL_RCC_OscConfig+0x3ec>
 8005a0c:	e01b      	b.n	8005a46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a14:	4a3b      	ldr	r2, [pc, #236]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fd ff8d 	bl	800393c <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a26:	f7fd ff89 	bl	800393c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e1b7      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a38:	4b32      	ldr	r3, [pc, #200]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1ef      	bne.n	8005a26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80a6 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a54:	2300      	movs	r3, #0
 8005a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a58:	4b2a      	ldr	r3, [pc, #168]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a64:	4b27      	ldr	r3, [pc, #156]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a68:	4a26      	ldr	r2, [pc, #152]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a70:	4b24      	ldr	r3, [pc, #144]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a80:	4b21      	ldr	r3, [pc, #132]	@ (8005b08 <HAL_RCC_OscConfig+0x508>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d118      	bne.n	8005abe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b08 <HAL_RCC_OscConfig+0x508>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1d      	ldr	r2, [pc, #116]	@ (8005b08 <HAL_RCC_OscConfig+0x508>)
 8005a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a98:	f7fd ff50 	bl	800393c <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa0:	f7fd ff4c 	bl	800393c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e17a      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab2:	4b15      	ldr	r3, [pc, #84]	@ (8005b08 <HAL_RCC_OscConfig+0x508>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d108      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x4d8>
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005acc:	4a0d      	ldr	r2, [pc, #52]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ad6:	e029      	b.n	8005b2c <HAL_RCC_OscConfig+0x52c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	d115      	bne.n	8005b0c <HAL_RCC_OscConfig+0x50c>
 8005ae0:	4b08      	ldr	r3, [pc, #32]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae6:	4a07      	ldr	r2, [pc, #28]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005ae8:	f043 0304 	orr.w	r3, r3, #4
 8005aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005af0:	4b04      	ldr	r3, [pc, #16]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	4a03      	ldr	r2, [pc, #12]	@ (8005b04 <HAL_RCC_OscConfig+0x504>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b00:	e014      	b.n	8005b2c <HAL_RCC_OscConfig+0x52c>
 8005b02:	bf00      	nop
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40007000 	.word	0x40007000
 8005b0c:	4b9c      	ldr	r3, [pc, #624]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b12:	4a9b      	ldr	r2, [pc, #620]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b1c:	4b98      	ldr	r3, [pc, #608]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b22:	4a97      	ldr	r2, [pc, #604]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005b24:	f023 0304 	bic.w	r3, r3, #4
 8005b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d016      	beq.n	8005b62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b34:	f7fd ff02 	bl	800393c <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b3a:	e00a      	b.n	8005b52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3c:	f7fd fefe 	bl	800393c <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e12a      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b52:	4b8b      	ldr	r3, [pc, #556]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ed      	beq.n	8005b3c <HAL_RCC_OscConfig+0x53c>
 8005b60:	e015      	b.n	8005b8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b62:	f7fd feeb 	bl	800393c <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b68:	e00a      	b.n	8005b80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6a:	f7fd fee7 	bl	800393c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e113      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b80:	4b7f      	ldr	r3, [pc, #508]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1ed      	bne.n	8005b6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b8e:	7ffb      	ldrb	r3, [r7, #31]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d105      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b94:	4b7a      	ldr	r3, [pc, #488]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b98:	4a79      	ldr	r2, [pc, #484]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80fe 	beq.w	8005da6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f040 80d0 	bne.w	8005d54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005bb4:	4b72      	ldr	r3, [pc, #456]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f003 0203 	and.w	r2, r3, #3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d130      	bne.n	8005c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d127      	bne.n	8005c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d11f      	bne.n	8005c2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bf4:	2a07      	cmp	r2, #7
 8005bf6:	bf14      	ite	ne
 8005bf8:	2201      	movne	r2, #1
 8005bfa:	2200      	moveq	r2, #0
 8005bfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d113      	bne.n	8005c2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d109      	bne.n	8005c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	3b01      	subs	r3, #1
 8005c24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d06e      	beq.n	8005d08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	d069      	beq.n	8005d04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c30:	4b53      	ldr	r3, [pc, #332]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d105      	bne.n	8005c48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005c3c:	4b50      	ldr	r3, [pc, #320]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0ad      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a4b      	ldr	r2, [pc, #300]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c58:	f7fd fe70 	bl	800393c <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c60:	f7fd fe6c 	bl	800393c <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e09a      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c72:	4b43      	ldr	r3, [pc, #268]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c7e:	4b40      	ldr	r3, [pc, #256]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	4b40      	ldr	r3, [pc, #256]	@ (8005d84 <HAL_RCC_OscConfig+0x784>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c8e:	3a01      	subs	r2, #1
 8005c90:	0112      	lsls	r2, r2, #4
 8005c92:	4311      	orrs	r1, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c98:	0212      	lsls	r2, r2, #8
 8005c9a:	4311      	orrs	r1, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ca0:	0852      	lsrs	r2, r2, #1
 8005ca2:	3a01      	subs	r2, #1
 8005ca4:	0552      	lsls	r2, r2, #21
 8005ca6:	4311      	orrs	r1, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005cac:	0852      	lsrs	r2, r2, #1
 8005cae:	3a01      	subs	r2, #1
 8005cb0:	0652      	lsls	r2, r2, #25
 8005cb2:	4311      	orrs	r1, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005cb8:	0912      	lsrs	r2, r2, #4
 8005cba:	0452      	lsls	r2, r2, #17
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	4930      	ldr	r1, [pc, #192]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cdc:	f7fd fe2e 	bl	800393c <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce4:	f7fd fe2a 	bl	800393c <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e058      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf6:	4b22      	ldr	r3, [pc, #136]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d02:	e050      	b.n	8005da6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e04f      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d08:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d148      	bne.n	8005da6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d14:	4b1a      	ldr	r3, [pc, #104]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a19      	ldr	r2, [pc, #100]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d20:	4b17      	ldr	r3, [pc, #92]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a16      	ldr	r2, [pc, #88]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d2c:	f7fd fe06 	bl	800393c <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d34:	f7fd fe02 	bl	800393c <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e030      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d46:	4b0e      	ldr	r3, [pc, #56]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0x734>
 8005d52:	e028      	b.n	8005da6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b0c      	cmp	r3, #12
 8005d58:	d023      	beq.n	8005da2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5a:	4b09      	ldr	r3, [pc, #36]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a08      	ldr	r2, [pc, #32]	@ (8005d80 <HAL_RCC_OscConfig+0x780>)
 8005d60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d66:	f7fd fde9 	bl	800393c <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d6c:	e00c      	b.n	8005d88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6e:	f7fd fde5 	bl	800393c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d905      	bls.n	8005d88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e013      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
 8005d80:	40021000 	.word	0x40021000
 8005d84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d88:	4b09      	ldr	r3, [pc, #36]	@ (8005db0 <HAL_RCC_OscConfig+0x7b0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1ec      	bne.n	8005d6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d94:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <HAL_RCC_OscConfig+0x7b0>)
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	4905      	ldr	r1, [pc, #20]	@ (8005db0 <HAL_RCC_OscConfig+0x7b0>)
 8005d9a:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <HAL_RCC_OscConfig+0x7b4>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60cb      	str	r3, [r1, #12]
 8005da0:	e001      	b.n	8005da6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40021000 	.word	0x40021000
 8005db4:	feeefffc 	.word	0xfeeefffc

08005db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0e7      	b.n	8005f9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dcc:	4b75      	ldr	r3, [pc, #468]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1ec>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d910      	bls.n	8005dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dda:	4b72      	ldr	r3, [pc, #456]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1ec>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 0207 	bic.w	r2, r3, #7
 8005de2:	4970      	ldr	r1, [pc, #448]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1ec>)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dea:	4b6e      	ldr	r3, [pc, #440]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1ec>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d001      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0cf      	b.n	8005f9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d010      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	4b66      	ldr	r3, [pc, #408]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d908      	bls.n	8005e2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e18:	4b63      	ldr	r3, [pc, #396]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4960      	ldr	r1, [pc, #384]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d04c      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d121      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e0a6      	b.n	8005f9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d107      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e56:	4b54      	ldr	r3, [pc, #336]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d115      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e09a      	b.n	8005f9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e08e      	b.n	8005f9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e086      	b.n	8005f9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e8e:	4b46      	ldr	r3, [pc, #280]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f023 0203 	bic.w	r2, r3, #3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4943      	ldr	r1, [pc, #268]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea0:	f7fd fd4c 	bl	800393c <HAL_GetTick>
 8005ea4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea6:	e00a      	b.n	8005ebe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea8:	f7fd fd48 	bl	800393c <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e06e      	b.n	8005f9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 020c 	and.w	r2, r3, #12
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d1eb      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d010      	beq.n	8005efe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	4b31      	ldr	r3, [pc, #196]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d208      	bcs.n	8005efe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eec:	4b2e      	ldr	r3, [pc, #184]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	492b      	ldr	r1, [pc, #172]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005efe:	4b29      	ldr	r3, [pc, #164]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d210      	bcs.n	8005f2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0c:	4b25      	ldr	r3, [pc, #148]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f023 0207 	bic.w	r2, r3, #7
 8005f14:	4923      	ldr	r1, [pc, #140]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1c:	4b21      	ldr	r3, [pc, #132]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e036      	b.n	8005f9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4918      	ldr	r1, [pc, #96]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f58:	4b13      	ldr	r3, [pc, #76]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4910      	ldr	r1, [pc, #64]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f6c:	f000 f824 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	490b      	ldr	r1, [pc, #44]	@ (8005fac <HAL_RCC_ClockConfig+0x1f4>)
 8005f7e:	5ccb      	ldrb	r3, [r1, r3]
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	4a09      	ldr	r2, [pc, #36]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f8c:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1fc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fd fc83 	bl	800389c <HAL_InitTick>
 8005f96:	4603      	mov	r3, r0
 8005f98:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40022000 	.word	0x40022000
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	0800f8d0 	.word	0x0800f8d0
 8005fb0:	20000008 	.word	0x20000008
 8005fb4:	20000050 	.word	0x20000050

08005fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b089      	sub	sp, #36	@ 0x24
 8005fbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <HAL_RCC_GetSysClockFreq+0x34>
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d121      	bne.n	800602a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d11e      	bne.n	800602a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fec:	4b34      	ldr	r3, [pc, #208]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ff8:	4b31      	ldr	r3, [pc, #196]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	61fb      	str	r3, [r7, #28]
 8006006:	e005      	b.n	8006014 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006008:	4b2d      	ldr	r3, [pc, #180]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006014:	4a2b      	ldr	r2, [pc, #172]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10d      	bne.n	8006040 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006028:	e00a      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b04      	cmp	r3, #4
 800602e:	d102      	bne.n	8006036 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006030:	4b25      	ldr	r3, [pc, #148]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	e004      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b08      	cmp	r3, #8
 800603a:	d101      	bne.n	8006040 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800603c:	4b23      	ldr	r3, [pc, #140]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x114>)
 800603e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b0c      	cmp	r3, #12
 8006044:	d134      	bne.n	80060b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006046:	4b1e      	ldr	r3, [pc, #120]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d003      	beq.n	800605e <HAL_RCC_GetSysClockFreq+0xa6>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d003      	beq.n	8006064 <HAL_RCC_GetSysClockFreq+0xac>
 800605c:	e005      	b.n	800606a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800605e:	4b1a      	ldr	r3, [pc, #104]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006060:	617b      	str	r3, [r7, #20]
      break;
 8006062:	e005      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006064:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x114>)
 8006066:	617b      	str	r3, [r7, #20]
      break;
 8006068:	e002      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	617b      	str	r3, [r7, #20]
      break;
 800606e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006070:	4b13      	ldr	r3, [pc, #76]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	3301      	adds	r3, #1
 800607c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800607e:	4b10      	ldr	r3, [pc, #64]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	fb03 f202 	mul.w	r2, r3, r2
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006096:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	0e5b      	lsrs	r3, r3, #25
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	3301      	adds	r3, #1
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060b0:	69bb      	ldr	r3, [r7, #24]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3724      	adds	r7, #36	@ 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40021000 	.word	0x40021000
 80060c4:	0800f8e8 	.word	0x0800f8e8
 80060c8:	00f42400 	.word	0x00f42400
 80060cc:	007a1200 	.word	0x007a1200

080060d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d4:	4b03      	ldr	r3, [pc, #12]	@ (80060e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060d6:	681b      	ldr	r3, [r3, #0]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000008 	.word	0x20000008

080060e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060ec:	f7ff fff0 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4b06      	ldr	r3, [pc, #24]	@ (800610c <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	4904      	ldr	r1, [pc, #16]	@ (8006110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060fe:	5ccb      	ldrb	r3, [r1, r3]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40021000 	.word	0x40021000
 8006110:	0800f8e0 	.word	0x0800f8e0

08006114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006118:	f7ff ffda 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	0adb      	lsrs	r3, r3, #11
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	4904      	ldr	r1, [pc, #16]	@ (800613c <HAL_RCC_GetPCLK2Freq+0x28>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40021000 	.word	0x40021000
 800613c:	0800f8e0 	.word	0x0800f8e0

08006140 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006148:	2300      	movs	r3, #0
 800614a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800614c:	4b2a      	ldr	r3, [pc, #168]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800614e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006158:	f7ff f922 	bl	80053a0 <HAL_PWREx_GetVoltageRange>
 800615c:	6178      	str	r0, [r7, #20]
 800615e:	e014      	b.n	800618a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006160:	4b25      	ldr	r3, [pc, #148]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006164:	4a24      	ldr	r2, [pc, #144]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800616a:	6593      	str	r3, [r2, #88]	@ 0x58
 800616c:	4b22      	ldr	r3, [pc, #136]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006178:	f7ff f912 	bl	80053a0 <HAL_PWREx_GetVoltageRange>
 800617c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800617e:	4b1e      	ldr	r3, [pc, #120]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006182:	4a1d      	ldr	r2, [pc, #116]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006188:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006190:	d10b      	bne.n	80061aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b80      	cmp	r3, #128	@ 0x80
 8006196:	d919      	bls.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2ba0      	cmp	r3, #160	@ 0xa0
 800619c:	d902      	bls.n	80061a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800619e:	2302      	movs	r3, #2
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e013      	b.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061a4:	2301      	movs	r3, #1
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	e010      	b.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b80      	cmp	r3, #128	@ 0x80
 80061ae:	d902      	bls.n	80061b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80061b0:	2303      	movs	r3, #3
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	e00a      	b.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b80      	cmp	r3, #128	@ 0x80
 80061ba:	d102      	bne.n	80061c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061bc:	2302      	movs	r3, #2
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	e004      	b.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b70      	cmp	r3, #112	@ 0x70
 80061c6:	d101      	bne.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061c8:	2301      	movs	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061cc:	4b0b      	ldr	r3, [pc, #44]	@ (80061fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f023 0207 	bic.w	r2, r3, #7
 80061d4:	4909      	ldr	r1, [pc, #36]	@ (80061fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80061dc:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d001      	beq.n	80061ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	40022000 	.word	0x40022000

08006200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006208:	2300      	movs	r3, #0
 800620a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800620c:	2300      	movs	r3, #0
 800620e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006218:	2b00      	cmp	r3, #0
 800621a:	d041      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006220:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006224:	d02a      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006226:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800622a:	d824      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800622c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006230:	d008      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006232:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006236:	d81e      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800623c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006240:	d010      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006242:	e018      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006244:	4b86      	ldr	r3, [pc, #536]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a85      	ldr	r2, [pc, #532]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800624e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006250:	e015      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3304      	adds	r3, #4
 8006256:	2100      	movs	r1, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f000 facb 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006262:	e00c      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3320      	adds	r3, #32
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fbb6 	bl	80069dc <RCCEx_PLLSAI2_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006274:	e003      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	74fb      	strb	r3, [r7, #19]
      break;
 800627a:	e000      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800627c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800627e:	7cfb      	ldrb	r3, [r7, #19]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006284:	4b76      	ldr	r3, [pc, #472]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006292:	4973      	ldr	r1, [pc, #460]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800629a:	e001      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d041      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062b4:	d02a      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80062b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062ba:	d824      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80062bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062c0:	d008      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062c6:	d81e      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80062cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062d0:	d010      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062d2:	e018      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062d4:	4b62      	ldr	r3, [pc, #392]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4a61      	ldr	r2, [pc, #388]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062e0:	e015      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fa83 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062f2:	e00c      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3320      	adds	r3, #32
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fb6e 	bl	80069dc <RCCEx_PLLSAI2_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	74fb      	strb	r3, [r7, #19]
      break;
 800630a:	e000      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800630c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800630e:	7cfb      	ldrb	r3, [r7, #19]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006314:	4b52      	ldr	r3, [pc, #328]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006322:	494f      	ldr	r1, [pc, #316]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800632a:	e001      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632c:	7cfb      	ldrb	r3, [r7, #19]
 800632e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80a0 	beq.w	800647e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006342:	4b47      	ldr	r3, [pc, #284]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006352:	2300      	movs	r3, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00d      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006358:	4b41      	ldr	r3, [pc, #260]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635c:	4a40      	ldr	r2, [pc, #256]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800635e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006362:	6593      	str	r3, [r2, #88]	@ 0x58
 8006364:	4b3e      	ldr	r3, [pc, #248]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006370:	2301      	movs	r3, #1
 8006372:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006374:	4b3b      	ldr	r3, [pc, #236]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a3a      	ldr	r2, [pc, #232]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800637a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800637e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006380:	f7fd fadc 	bl	800393c <HAL_GetTick>
 8006384:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006386:	e009      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006388:	f7fd fad8 	bl	800393c <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d902      	bls.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	74fb      	strb	r3, [r7, #19]
        break;
 800639a:	e005      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800639c:	4b31      	ldr	r3, [pc, #196]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0ef      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80063a8:	7cfb      	ldrb	r3, [r7, #19]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d15c      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01f      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d019      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063cc:	4b24      	ldr	r3, [pc, #144]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063d8:	4b21      	ldr	r3, [pc, #132]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	4a20      	ldr	r2, [pc, #128]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063f8:	4a19      	ldr	r2, [pc, #100]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640a:	f7fd fa97 	bl	800393c <HAL_GetTick>
 800640e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006410:	e00b      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006412:	f7fd fa93 	bl	800393c <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006420:	4293      	cmp	r3, r2
 8006422:	d902      	bls.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	74fb      	strb	r3, [r7, #19]
            break;
 8006428:	e006      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642a:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0ec      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006438:	7cfb      	ldrb	r3, [r7, #19]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10c      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800643e:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800644e:	4904      	ldr	r1, [pc, #16]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006456:	e009      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006458:	7cfb      	ldrb	r3, [r7, #19]
 800645a:	74bb      	strb	r3, [r7, #18]
 800645c:	e006      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800645e:	bf00      	nop
 8006460:	40021000 	.word	0x40021000
 8006464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006468:	7cfb      	ldrb	r3, [r7, #19]
 800646a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800646c:	7c7b      	ldrb	r3, [r7, #17]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006472:	4b9e      	ldr	r3, [pc, #632]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006476:	4a9d      	ldr	r2, [pc, #628]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800647c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800648a:	4b98      	ldr	r3, [pc, #608]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006490:	f023 0203 	bic.w	r2, r3, #3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	4994      	ldr	r1, [pc, #592]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064ac:	4b8f      	ldr	r3, [pc, #572]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b2:	f023 020c 	bic.w	r2, r3, #12
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ba:	498c      	ldr	r1, [pc, #560]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064ce:	4b87      	ldr	r3, [pc, #540]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	4983      	ldr	r1, [pc, #524]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064f0:	4b7e      	ldr	r3, [pc, #504]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fe:	497b      	ldr	r1, [pc, #492]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006512:	4b76      	ldr	r3, [pc, #472]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006518:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006520:	4972      	ldr	r1, [pc, #456]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006534:	4b6d      	ldr	r3, [pc, #436]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006542:	496a      	ldr	r1, [pc, #424]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006556:	4b65      	ldr	r3, [pc, #404]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006564:	4961      	ldr	r1, [pc, #388]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006578:	4b5c      	ldr	r3, [pc, #368]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006586:	4959      	ldr	r1, [pc, #356]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800659a:	4b54      	ldr	r3, [pc, #336]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a8:	4950      	ldr	r1, [pc, #320]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065bc:	4b4b      	ldr	r3, [pc, #300]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ca:	4948      	ldr	r1, [pc, #288]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065de:	4b43      	ldr	r3, [pc, #268]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ec:	493f      	ldr	r1, [pc, #252]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d028      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006600:	4b3a      	ldr	r3, [pc, #232]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006606:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800660e:	4937      	ldr	r1, [pc, #220]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800661a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800661e:	d106      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006620:	4b32      	ldr	r3, [pc, #200]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4a31      	ldr	r2, [pc, #196]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800662a:	60d3      	str	r3, [r2, #12]
 800662c:	e011      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006632:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006636:	d10c      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	2101      	movs	r1, #1
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f8d8 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006648:	7cfb      	ldrb	r3, [r7, #19]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800664e:	7cfb      	ldrb	r3, [r7, #19]
 8006650:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d028      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800665e:	4b23      	ldr	r3, [pc, #140]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006664:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666c:	491f      	ldr	r1, [pc, #124]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800667c:	d106      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800667e:	4b1b      	ldr	r3, [pc, #108]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	4a1a      	ldr	r2, [pc, #104]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006688:	60d3      	str	r3, [r2, #12]
 800668a:	e011      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006690:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006694:	d10c      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3304      	adds	r3, #4
 800669a:	2101      	movs	r1, #1
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f8a9 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066a6:	7cfb      	ldrb	r3, [r7, #19]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80066ac:	7cfb      	ldrb	r3, [r7, #19]
 80066ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d02b      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ca:	4908      	ldr	r1, [pc, #32]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066da:	d109      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066dc:	4b03      	ldr	r3, [pc, #12]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4a02      	ldr	r2, [pc, #8]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066e6:	60d3      	str	r3, [r2, #12]
 80066e8:	e014      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80066ea:	bf00      	nop
 80066ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066f8:	d10c      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3304      	adds	r3, #4
 80066fe:	2101      	movs	r1, #1
 8006700:	4618      	mov	r0, r3
 8006702:	f000 f877 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800670a:	7cfb      	ldrb	r3, [r7, #19]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006710:	7cfb      	ldrb	r3, [r7, #19]
 8006712:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d02f      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006720:	4b2b      	ldr	r3, [pc, #172]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006726:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800672e:	4928      	ldr	r1, [pc, #160]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800673a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800673e:	d10d      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	2102      	movs	r1, #2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f854 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006750:	7cfb      	ldrb	r3, [r7, #19]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d014      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006756:	7cfb      	ldrb	r3, [r7, #19]
 8006758:	74bb      	strb	r3, [r7, #18]
 800675a:	e011      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006764:	d10c      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3320      	adds	r3, #32
 800676a:	2102      	movs	r1, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f000 f935 	bl	80069dc <RCCEx_PLLSAI2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006776:	7cfb      	ldrb	r3, [r7, #19]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800677c:	7cfb      	ldrb	r3, [r7, #19]
 800677e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800678c:	4b10      	ldr	r3, [pc, #64]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006792:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800679a:	490d      	ldr	r1, [pc, #52]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067ae:	4b08      	ldr	r3, [pc, #32]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067be:	4904      	ldr	r1, [pc, #16]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40021000 	.word	0x40021000

080067d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80067d8:	4b05      	ldr	r3, [pc, #20]	@ (80067f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a04      	ldr	r2, [pc, #16]	@ (80067f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067de:	f043 0304 	orr.w	r3, r3, #4
 80067e2:	6013      	str	r3, [r2, #0]
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40021000 	.word	0x40021000

080067f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006802:	4b75      	ldr	r3, [pc, #468]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d018      	beq.n	8006840 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800680e:	4b72      	ldr	r3, [pc, #456]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0203 	and.w	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d10d      	bne.n	800683a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
       ||
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006826:	4b6c      	ldr	r3, [pc, #432]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	091b      	lsrs	r3, r3, #4
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
       ||
 8006836:	429a      	cmp	r2, r3
 8006838:	d047      	beq.n	80068ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	73fb      	strb	r3, [r7, #15]
 800683e:	e044      	b.n	80068ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d018      	beq.n	800687a <RCCEx_PLLSAI1_Config+0x86>
 8006848:	2b03      	cmp	r3, #3
 800684a:	d825      	bhi.n	8006898 <RCCEx_PLLSAI1_Config+0xa4>
 800684c:	2b01      	cmp	r3, #1
 800684e:	d002      	beq.n	8006856 <RCCEx_PLLSAI1_Config+0x62>
 8006850:	2b02      	cmp	r3, #2
 8006852:	d009      	beq.n	8006868 <RCCEx_PLLSAI1_Config+0x74>
 8006854:	e020      	b.n	8006898 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006856:	4b60      	ldr	r3, [pc, #384]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d11d      	bne.n	800689e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006866:	e01a      	b.n	800689e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006868:	4b5b      	ldr	r3, [pc, #364]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006870:	2b00      	cmp	r3, #0
 8006872:	d116      	bne.n	80068a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006878:	e013      	b.n	80068a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800687a:	4b57      	ldr	r3, [pc, #348]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10f      	bne.n	80068a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006886:	4b54      	ldr	r3, [pc, #336]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006896:	e006      	b.n	80068a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e004      	b.n	80068a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800689e:	bf00      	nop
 80068a0:	e002      	b.n	80068a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068a2:	bf00      	nop
 80068a4:	e000      	b.n	80068a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10d      	bne.n	80068ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068ae:	4b4a      	ldr	r3, [pc, #296]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6819      	ldr	r1, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	3b01      	subs	r3, #1
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	430b      	orrs	r3, r1
 80068c4:	4944      	ldr	r1, [pc, #272]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d17d      	bne.n	80069cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068d0:	4b41      	ldr	r3, [pc, #260]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a40      	ldr	r2, [pc, #256]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068dc:	f7fd f82e 	bl	800393c <HAL_GetTick>
 80068e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068e2:	e009      	b.n	80068f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068e4:	f7fd f82a 	bl	800393c <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d902      	bls.n	80068f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	73fb      	strb	r3, [r7, #15]
        break;
 80068f6:	e005      	b.n	8006904 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068f8:	4b37      	ldr	r3, [pc, #220]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1ef      	bne.n	80068e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d160      	bne.n	80069cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d111      	bne.n	8006934 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006910:	4b31      	ldr	r3, [pc, #196]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6892      	ldr	r2, [r2, #8]
 8006920:	0211      	lsls	r1, r2, #8
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	68d2      	ldr	r2, [r2, #12]
 8006926:	0912      	lsrs	r2, r2, #4
 8006928:	0452      	lsls	r2, r2, #17
 800692a:	430a      	orrs	r2, r1
 800692c:	492a      	ldr	r1, [pc, #168]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800692e:	4313      	orrs	r3, r2
 8006930:	610b      	str	r3, [r1, #16]
 8006932:	e027      	b.n	8006984 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d112      	bne.n	8006960 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800693a:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006942:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6892      	ldr	r2, [r2, #8]
 800694a:	0211      	lsls	r1, r2, #8
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6912      	ldr	r2, [r2, #16]
 8006950:	0852      	lsrs	r2, r2, #1
 8006952:	3a01      	subs	r2, #1
 8006954:	0552      	lsls	r2, r2, #21
 8006956:	430a      	orrs	r2, r1
 8006958:	491f      	ldr	r1, [pc, #124]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800695a:	4313      	orrs	r3, r2
 800695c:	610b      	str	r3, [r1, #16]
 800695e:	e011      	b.n	8006984 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006960:	4b1d      	ldr	r3, [pc, #116]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006968:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6892      	ldr	r2, [r2, #8]
 8006970:	0211      	lsls	r1, r2, #8
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6952      	ldr	r2, [r2, #20]
 8006976:	0852      	lsrs	r2, r2, #1
 8006978:	3a01      	subs	r2, #1
 800697a:	0652      	lsls	r2, r2, #25
 800697c:	430a      	orrs	r2, r1
 800697e:	4916      	ldr	r1, [pc, #88]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006980:	4313      	orrs	r3, r2
 8006982:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006984:	4b14      	ldr	r3, [pc, #80]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a13      	ldr	r2, [pc, #76]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800698a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800698e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006990:	f7fc ffd4 	bl	800393c <HAL_GetTick>
 8006994:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006996:	e009      	b.n	80069ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006998:	f7fc ffd0 	bl	800393c <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d902      	bls.n	80069ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	73fb      	strb	r3, [r7, #15]
          break;
 80069aa:	e005      	b.n	80069b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069ac:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0ef      	beq.n	8006998 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069be:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	4904      	ldr	r1, [pc, #16]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40021000 	.word	0x40021000

080069dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d018      	beq.n	8006a28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069f6:	4b67      	ldr	r3, [pc, #412]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0203 	and.w	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d10d      	bne.n	8006a22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
       ||
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006a0e:	4b61      	ldr	r3, [pc, #388]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	091b      	lsrs	r3, r3, #4
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
       ||
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d047      	beq.n	8006ab2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	73fb      	strb	r3, [r7, #15]
 8006a26:	e044      	b.n	8006ab2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d018      	beq.n	8006a62 <RCCEx_PLLSAI2_Config+0x86>
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d825      	bhi.n	8006a80 <RCCEx_PLLSAI2_Config+0xa4>
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d002      	beq.n	8006a3e <RCCEx_PLLSAI2_Config+0x62>
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d009      	beq.n	8006a50 <RCCEx_PLLSAI2_Config+0x74>
 8006a3c:	e020      	b.n	8006a80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a3e:	4b55      	ldr	r3, [pc, #340]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d11d      	bne.n	8006a86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a4e:	e01a      	b.n	8006a86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a50:	4b50      	ldr	r3, [pc, #320]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d116      	bne.n	8006a8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a60:	e013      	b.n	8006a8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a62:	4b4c      	ldr	r3, [pc, #304]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10f      	bne.n	8006a8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a6e:	4b49      	ldr	r3, [pc, #292]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a7e:	e006      	b.n	8006a8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
      break;
 8006a84:	e004      	b.n	8006a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a86:	bf00      	nop
 8006a88:	e002      	b.n	8006a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a8a:	bf00      	nop
 8006a8c:	e000      	b.n	8006a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10d      	bne.n	8006ab2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a96:	4b3f      	ldr	r3, [pc, #252]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	4939      	ldr	r1, [pc, #228]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d167      	bne.n	8006b88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ab8:	4b36      	ldr	r3, [pc, #216]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a35      	ldr	r2, [pc, #212]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ac4:	f7fc ff3a 	bl	800393c <HAL_GetTick>
 8006ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aca:	e009      	b.n	8006ae0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006acc:	f7fc ff36 	bl	800393c <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d902      	bls.n	8006ae0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	73fb      	strb	r3, [r7, #15]
        break;
 8006ade:	e005      	b.n	8006aec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1ef      	bne.n	8006acc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d14a      	bne.n	8006b88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d111      	bne.n	8006b1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006af8:	4b26      	ldr	r3, [pc, #152]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6892      	ldr	r2, [r2, #8]
 8006b08:	0211      	lsls	r1, r2, #8
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68d2      	ldr	r2, [r2, #12]
 8006b0e:	0912      	lsrs	r2, r2, #4
 8006b10:	0452      	lsls	r2, r2, #17
 8006b12:	430a      	orrs	r2, r1
 8006b14:	491f      	ldr	r1, [pc, #124]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	614b      	str	r3, [r1, #20]
 8006b1a:	e011      	b.n	8006b40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006b24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6892      	ldr	r2, [r2, #8]
 8006b2c:	0211      	lsls	r1, r2, #8
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6912      	ldr	r2, [r2, #16]
 8006b32:	0852      	lsrs	r2, r2, #1
 8006b34:	3a01      	subs	r2, #1
 8006b36:	0652      	lsls	r2, r2, #25
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	4916      	ldr	r1, [pc, #88]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b40:	4b14      	ldr	r3, [pc, #80]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a13      	ldr	r2, [pc, #76]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4c:	f7fc fef6 	bl	800393c <HAL_GetTick>
 8006b50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b52:	e009      	b.n	8006b68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b54:	f7fc fef2 	bl	800393c <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d902      	bls.n	8006b68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	73fb      	strb	r3, [r7, #15]
          break;
 8006b66:	e005      	b.n	8006b74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b68:	4b0a      	ldr	r3, [pc, #40]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0ef      	beq.n	8006b54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b7a:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b7c:	695a      	ldr	r2, [r3, #20]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	4904      	ldr	r1, [pc, #16]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40021000 	.word	0x40021000

08006b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e095      	b.n	8006cd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d108      	bne.n	8006bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bba:	d009      	beq.n	8006bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	61da      	str	r2, [r3, #28]
 8006bc2:	e005      	b.n	8006bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f877 	bl	8006cde <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c10:	d902      	bls.n	8006c18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	e002      	b.n	8006c1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c26:	d007      	beq.n	8006c38 <HAL_SPI_Init+0xa0>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7a:	ea42 0103 	orr.w	r1, r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	f003 0204 	and.w	r2, r3, #4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006cb4:	ea42 0103 	orr.w	r1, r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b08a      	sub	sp, #40	@ 0x28
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d00:	2301      	movs	r3, #1
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d04:	f7fc fe1a 	bl	800393c <HAL_GetTick>
 8006d08:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d10:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006d1c:	887b      	ldrh	r3, [r7, #2]
 8006d1e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d20:	7ffb      	ldrb	r3, [r7, #31]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d00c      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x4e>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d2c:	d106      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d102      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x4a>
 8006d36:	7ffb      	ldrb	r3, [r7, #31]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d001      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e1f3      	b.n	8007128 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <HAL_SPI_TransmitReceive+0x60>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_SPI_TransmitReceive+0x60>
 8006d4c:	887b      	ldrh	r3, [r7, #2]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e1e8      	b.n	8007128 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x72>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e1e1      	b.n	8007128 <HAL_SPI_TransmitReceive+0x436>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d003      	beq.n	8006d80 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2205      	movs	r2, #5
 8006d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	887a      	ldrh	r2, [r7, #2]
 8006d90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	887a      	ldrh	r2, [r7, #2]
 8006d98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	887a      	ldrh	r2, [r7, #2]
 8006da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	887a      	ldrh	r2, [r7, #2]
 8006dac:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006dc2:	d802      	bhi.n	8006dca <HAL_SPI_TransmitReceive+0xd8>
 8006dc4:	8abb      	ldrh	r3, [r7, #20]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d908      	bls.n	8006ddc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006dd8:	605a      	str	r2, [r3, #4]
 8006dda:	e007      	b.n	8006dec <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006dea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df6:	2b40      	cmp	r3, #64	@ 0x40
 8006df8:	d007      	beq.n	8006e0a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e12:	f240 8083 	bls.w	8006f1c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_TransmitReceive+0x132>
 8006e1e:	8afb      	ldrh	r3, [r7, #22]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d16f      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e28:	881a      	ldrh	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	1c9a      	adds	r2, r3, #2
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e48:	e05c      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d11b      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0x19e>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <HAL_SPI_TransmitReceive+0x19e>
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d113      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6c:	881a      	ldrh	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	1c9a      	adds	r2, r3, #2
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d11c      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x1e6>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb4:	b292      	uxth	r2, r2
 8006eb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	1c9a      	adds	r2, r3, #2
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ed8:	f7fc fd30 	bl	800393c <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d80d      	bhi.n	8006f04 <HAL_SPI_TransmitReceive+0x212>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eee:	d009      	beq.n	8006f04 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e111      	b.n	8007128 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d19d      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x158>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d197      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x158>
 8006f1a:	e0e5      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <HAL_SPI_TransmitReceive+0x23a>
 8006f24:	8afb      	ldrh	r3, [r7, #22]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	f040 80d1 	bne.w	80070ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d912      	bls.n	8006f5c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3a:	881a      	ldrh	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f46:	1c9a      	adds	r2, r3, #2
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b02      	subs	r3, #2
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f5a:	e0b8      	b.n	80070ce <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	330c      	adds	r3, #12
 8006f66:	7812      	ldrb	r2, [r2, #0]
 8006f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f82:	e0a4      	b.n	80070ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d134      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x30a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d02f      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x30a>
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d12c      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d912      	bls.n	8006fd2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	1c9a      	adds	r2, r3, #2
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b02      	subs	r3, #2
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fd0:	e012      	b.n	8006ff8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d148      	bne.n	800709c <HAL_SPI_TransmitReceive+0x3aa>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d042      	beq.n	800709c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d923      	bls.n	800706a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702c:	b292      	uxth	r2, r2
 800702e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007034:	1c9a      	adds	r2, r3, #2
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007040:	b29b      	uxth	r3, r3
 8007042:	3b02      	subs	r3, #2
 8007044:	b29a      	uxth	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d81f      	bhi.n	8007098 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007066:	605a      	str	r2, [r3, #4]
 8007068:	e016      	b.n	8007098 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f103 020c 	add.w	r2, r3, #12
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007098:	2301      	movs	r3, #1
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800709c:	f7fc fc4e 	bl	800393c <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d803      	bhi.n	80070b4 <HAL_SPI_TransmitReceive+0x3c2>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b2:	d102      	bne.n	80070ba <HAL_SPI_TransmitReceive+0x3c8>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e02c      	b.n	8007128 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f47f af55 	bne.w	8006f84 <HAL_SPI_TransmitReceive+0x292>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f47f af4e 	bne.w	8006f84 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070e8:	6a3a      	ldr	r2, [r7, #32]
 80070ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f94b 	bl	8007388 <SPI_EndRxTxTransaction>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2220      	movs	r2, #32
 80070fc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e00e      	b.n	8007128 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e000      	b.n	8007128 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007126:	2300      	movs	r3, #0
  }
}
 8007128:	4618      	mov	r0, r3
 800712a:	3728      	adds	r7, #40	@ 0x28
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800713e:	b2db      	uxtb	r3, r3
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800715c:	f7fc fbee 	bl	800393c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	4413      	add	r3, r2
 800716a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800716c:	f7fc fbe6 	bl	800393c <HAL_GetTick>
 8007170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007172:	4b39      	ldr	r3, [pc, #228]	@ (8007258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	015b      	lsls	r3, r3, #5
 8007178:	0d1b      	lsrs	r3, r3, #20
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	fb02 f303 	mul.w	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007182:	e054      	b.n	800722e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d050      	beq.n	800722e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800718c:	f7fc fbd6 	bl	800393c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	429a      	cmp	r2, r3
 800719a:	d902      	bls.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d13d      	bne.n	800721e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ba:	d111      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071c4:	d004      	beq.n	80071d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ce:	d107      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e8:	d10f      	bne.n	800720a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e017      	b.n	800724e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3b01      	subs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4013      	ands	r3, r2
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	429a      	cmp	r2, r3
 800723c:	bf0c      	ite	eq
 800723e:	2301      	moveq	r3, #1
 8007240:	2300      	movne	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	429a      	cmp	r2, r3
 800724a:	d19b      	bne.n	8007184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000008 	.word	0x20000008

0800725c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	@ 0x28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800726e:	f7fc fb65 	bl	800393c <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	4413      	add	r3, r2
 800727c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800727e:	f7fc fb5d 	bl	800393c <HAL_GetTick>
 8007282:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	330c      	adds	r3, #12
 800728a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800728c:	4b3d      	ldr	r3, [pc, #244]	@ (8007384 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	00da      	lsls	r2, r3, #3
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	0d1b      	lsrs	r3, r3, #20
 800729c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072a4:	e060      	b.n	8007368 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072ac:	d107      	bne.n	80072be <SPI_WaitFifoStateUntilTimeout+0x62>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d050      	beq.n	8007368 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072c6:	f7fc fb39 	bl	800393c <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d902      	bls.n	80072dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d13d      	bne.n	8007358 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072f4:	d111      	bne.n	800731a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072fe:	d004      	beq.n	800730a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007308:	d107      	bne.n	800731a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007318:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007322:	d10f      	bne.n	8007344 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007342:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e010      	b.n	800737a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	3b01      	subs	r3, #1
 8007366:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4013      	ands	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d196      	bne.n	80072a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3728      	adds	r7, #40	@ 0x28
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000008 	.word	0x20000008

08007388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff ff5b 	bl	800725c <SPI_WaitFifoStateUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b0:	f043 0220 	orr.w	r2, r3, #32
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e027      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	2180      	movs	r1, #128	@ 0x80
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7ff fec0 	bl	800714c <SPI_WaitFlagStateUntilTimeout>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073d6:	f043 0220 	orr.w	r2, r3, #32
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e014      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff ff34 	bl	800725c <SPI_WaitFifoStateUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073fe:	f043 0220 	orr.w	r2, r3, #32
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e000      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e040      	b.n	80074a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fb fa26 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2224      	movs	r2, #36	@ 0x24
 8007440:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 0201 	bic.w	r2, r2, #1
 8007450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fb6a 	bl	8007b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f8af 	bl	80075c4 <UART_SetConfig>
 8007466:	4603      	mov	r3, r0
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e01b      	b.n	80074a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800747e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800748e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fbe9 	bl	8007c78 <UART_CheckIdleState>
 80074a6:	4603      	mov	r3, r0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08a      	sub	sp, #40	@ 0x28
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d177      	bne.n	80075b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_UART_Transmit+0x24>
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e070      	b.n	80075ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2221      	movs	r2, #33	@ 0x21
 80074e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074e6:	f7fc fa29 	bl	800393c <HAL_GetTick>
 80074ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007504:	d108      	bne.n	8007518 <HAL_UART_Transmit+0x68>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	61bb      	str	r3, [r7, #24]
 8007516:	e003      	b.n	8007520 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800751c:	2300      	movs	r3, #0
 800751e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007520:	e02f      	b.n	8007582 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2200      	movs	r2, #0
 800752a:	2180      	movs	r1, #128	@ 0x80
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fc4b 	bl	8007dc8 <UART_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d004      	beq.n	8007542 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e03b      	b.n	80075ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	881a      	ldrh	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007554:	b292      	uxth	r2, r2
 8007556:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	3302      	adds	r3, #2
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	e007      	b.n	8007570 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	3301      	adds	r3, #1
 800756e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1c9      	bne.n	8007522 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2200      	movs	r2, #0
 8007596:	2140      	movs	r1, #64	@ 0x40
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fc15 	bl	8007dc8 <UART_WaitOnFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e005      	b.n	80075ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	e000      	b.n	80075ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80075b8:	2302      	movs	r3, #2
  }
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c8:	b08a      	sub	sp, #40	@ 0x28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	431a      	orrs	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4ba4      	ldr	r3, [pc, #656]	@ (8007884 <UART_SetConfig+0x2c0>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a99      	ldr	r2, [pc, #612]	@ (8007888 <UART_SetConfig+0x2c4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800762c:	4313      	orrs	r3, r2
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007640:	430a      	orrs	r2, r1
 8007642:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a90      	ldr	r2, [pc, #576]	@ (800788c <UART_SetConfig+0x2c8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d126      	bne.n	800769c <UART_SetConfig+0xd8>
 800764e:	4b90      	ldr	r3, [pc, #576]	@ (8007890 <UART_SetConfig+0x2cc>)
 8007650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	2b03      	cmp	r3, #3
 800765a:	d81b      	bhi.n	8007694 <UART_SetConfig+0xd0>
 800765c:	a201      	add	r2, pc, #4	@ (adr r2, 8007664 <UART_SetConfig+0xa0>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	08007675 	.word	0x08007675
 8007668:	08007685 	.word	0x08007685
 800766c:	0800767d 	.word	0x0800767d
 8007670:	0800768d 	.word	0x0800768d
 8007674:	2301      	movs	r3, #1
 8007676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800767a:	e116      	b.n	80078aa <UART_SetConfig+0x2e6>
 800767c:	2302      	movs	r3, #2
 800767e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007682:	e112      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007684:	2304      	movs	r3, #4
 8007686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768a:	e10e      	b.n	80078aa <UART_SetConfig+0x2e6>
 800768c:	2308      	movs	r3, #8
 800768e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007692:	e10a      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007694:	2310      	movs	r3, #16
 8007696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800769a:	e106      	b.n	80078aa <UART_SetConfig+0x2e6>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a7c      	ldr	r2, [pc, #496]	@ (8007894 <UART_SetConfig+0x2d0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d138      	bne.n	8007718 <UART_SetConfig+0x154>
 80076a6:	4b7a      	ldr	r3, [pc, #488]	@ (8007890 <UART_SetConfig+0x2cc>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ac:	f003 030c 	and.w	r3, r3, #12
 80076b0:	2b0c      	cmp	r3, #12
 80076b2:	d82d      	bhi.n	8007710 <UART_SetConfig+0x14c>
 80076b4:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <UART_SetConfig+0xf8>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	080076f1 	.word	0x080076f1
 80076c0:	08007711 	.word	0x08007711
 80076c4:	08007711 	.word	0x08007711
 80076c8:	08007711 	.word	0x08007711
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007711 	.word	0x08007711
 80076d4:	08007711 	.word	0x08007711
 80076d8:	08007711 	.word	0x08007711
 80076dc:	080076f9 	.word	0x080076f9
 80076e0:	08007711 	.word	0x08007711
 80076e4:	08007711 	.word	0x08007711
 80076e8:	08007711 	.word	0x08007711
 80076ec:	08007709 	.word	0x08007709
 80076f0:	2300      	movs	r3, #0
 80076f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f6:	e0d8      	b.n	80078aa <UART_SetConfig+0x2e6>
 80076f8:	2302      	movs	r3, #2
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076fe:	e0d4      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007700:	2304      	movs	r3, #4
 8007702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007706:	e0d0      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007708:	2308      	movs	r3, #8
 800770a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800770e:	e0cc      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007710:	2310      	movs	r3, #16
 8007712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007716:	e0c8      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a5e      	ldr	r2, [pc, #376]	@ (8007898 <UART_SetConfig+0x2d4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d125      	bne.n	800776e <UART_SetConfig+0x1aa>
 8007722:	4b5b      	ldr	r3, [pc, #364]	@ (8007890 <UART_SetConfig+0x2cc>)
 8007724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007728:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800772c:	2b30      	cmp	r3, #48	@ 0x30
 800772e:	d016      	beq.n	800775e <UART_SetConfig+0x19a>
 8007730:	2b30      	cmp	r3, #48	@ 0x30
 8007732:	d818      	bhi.n	8007766 <UART_SetConfig+0x1a2>
 8007734:	2b20      	cmp	r3, #32
 8007736:	d00a      	beq.n	800774e <UART_SetConfig+0x18a>
 8007738:	2b20      	cmp	r3, #32
 800773a:	d814      	bhi.n	8007766 <UART_SetConfig+0x1a2>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <UART_SetConfig+0x182>
 8007740:	2b10      	cmp	r3, #16
 8007742:	d008      	beq.n	8007756 <UART_SetConfig+0x192>
 8007744:	e00f      	b.n	8007766 <UART_SetConfig+0x1a2>
 8007746:	2300      	movs	r3, #0
 8007748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800774c:	e0ad      	b.n	80078aa <UART_SetConfig+0x2e6>
 800774e:	2302      	movs	r3, #2
 8007750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007754:	e0a9      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007756:	2304      	movs	r3, #4
 8007758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800775c:	e0a5      	b.n	80078aa <UART_SetConfig+0x2e6>
 800775e:	2308      	movs	r3, #8
 8007760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007764:	e0a1      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007766:	2310      	movs	r3, #16
 8007768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800776c:	e09d      	b.n	80078aa <UART_SetConfig+0x2e6>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a4a      	ldr	r2, [pc, #296]	@ (800789c <UART_SetConfig+0x2d8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d125      	bne.n	80077c4 <UART_SetConfig+0x200>
 8007778:	4b45      	ldr	r3, [pc, #276]	@ (8007890 <UART_SetConfig+0x2cc>)
 800777a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800777e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007782:	2bc0      	cmp	r3, #192	@ 0xc0
 8007784:	d016      	beq.n	80077b4 <UART_SetConfig+0x1f0>
 8007786:	2bc0      	cmp	r3, #192	@ 0xc0
 8007788:	d818      	bhi.n	80077bc <UART_SetConfig+0x1f8>
 800778a:	2b80      	cmp	r3, #128	@ 0x80
 800778c:	d00a      	beq.n	80077a4 <UART_SetConfig+0x1e0>
 800778e:	2b80      	cmp	r3, #128	@ 0x80
 8007790:	d814      	bhi.n	80077bc <UART_SetConfig+0x1f8>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <UART_SetConfig+0x1d8>
 8007796:	2b40      	cmp	r3, #64	@ 0x40
 8007798:	d008      	beq.n	80077ac <UART_SetConfig+0x1e8>
 800779a:	e00f      	b.n	80077bc <UART_SetConfig+0x1f8>
 800779c:	2300      	movs	r3, #0
 800779e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a2:	e082      	b.n	80078aa <UART_SetConfig+0x2e6>
 80077a4:	2302      	movs	r3, #2
 80077a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077aa:	e07e      	b.n	80078aa <UART_SetConfig+0x2e6>
 80077ac:	2304      	movs	r3, #4
 80077ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b2:	e07a      	b.n	80078aa <UART_SetConfig+0x2e6>
 80077b4:	2308      	movs	r3, #8
 80077b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ba:	e076      	b.n	80078aa <UART_SetConfig+0x2e6>
 80077bc:	2310      	movs	r3, #16
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077c2:	e072      	b.n	80078aa <UART_SetConfig+0x2e6>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a35      	ldr	r2, [pc, #212]	@ (80078a0 <UART_SetConfig+0x2dc>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d12a      	bne.n	8007824 <UART_SetConfig+0x260>
 80077ce:	4b30      	ldr	r3, [pc, #192]	@ (8007890 <UART_SetConfig+0x2cc>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077dc:	d01a      	beq.n	8007814 <UART_SetConfig+0x250>
 80077de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077e2:	d81b      	bhi.n	800781c <UART_SetConfig+0x258>
 80077e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077e8:	d00c      	beq.n	8007804 <UART_SetConfig+0x240>
 80077ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077ee:	d815      	bhi.n	800781c <UART_SetConfig+0x258>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <UART_SetConfig+0x238>
 80077f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077f8:	d008      	beq.n	800780c <UART_SetConfig+0x248>
 80077fa:	e00f      	b.n	800781c <UART_SetConfig+0x258>
 80077fc:	2300      	movs	r3, #0
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007802:	e052      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007804:	2302      	movs	r3, #2
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e04e      	b.n	80078aa <UART_SetConfig+0x2e6>
 800780c:	2304      	movs	r3, #4
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e04a      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007814:	2308      	movs	r3, #8
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781a:	e046      	b.n	80078aa <UART_SetConfig+0x2e6>
 800781c:	2310      	movs	r3, #16
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007822:	e042      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a17      	ldr	r2, [pc, #92]	@ (8007888 <UART_SetConfig+0x2c4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d13a      	bne.n	80078a4 <UART_SetConfig+0x2e0>
 800782e:	4b18      	ldr	r3, [pc, #96]	@ (8007890 <UART_SetConfig+0x2cc>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007834:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007838:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800783c:	d01a      	beq.n	8007874 <UART_SetConfig+0x2b0>
 800783e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007842:	d81b      	bhi.n	800787c <UART_SetConfig+0x2b8>
 8007844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007848:	d00c      	beq.n	8007864 <UART_SetConfig+0x2a0>
 800784a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800784e:	d815      	bhi.n	800787c <UART_SetConfig+0x2b8>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <UART_SetConfig+0x298>
 8007854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007858:	d008      	beq.n	800786c <UART_SetConfig+0x2a8>
 800785a:	e00f      	b.n	800787c <UART_SetConfig+0x2b8>
 800785c:	2300      	movs	r3, #0
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007862:	e022      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007864:	2302      	movs	r3, #2
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800786a:	e01e      	b.n	80078aa <UART_SetConfig+0x2e6>
 800786c:	2304      	movs	r3, #4
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007872:	e01a      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007874:	2308      	movs	r3, #8
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800787a:	e016      	b.n	80078aa <UART_SetConfig+0x2e6>
 800787c:	2310      	movs	r3, #16
 800787e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007882:	e012      	b.n	80078aa <UART_SetConfig+0x2e6>
 8007884:	efff69f3 	.word	0xefff69f3
 8007888:	40008000 	.word	0x40008000
 800788c:	40013800 	.word	0x40013800
 8007890:	40021000 	.word	0x40021000
 8007894:	40004400 	.word	0x40004400
 8007898:	40004800 	.word	0x40004800
 800789c:	40004c00 	.word	0x40004c00
 80078a0:	40005000 	.word	0x40005000
 80078a4:	2310      	movs	r3, #16
 80078a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a9f      	ldr	r2, [pc, #636]	@ (8007b2c <UART_SetConfig+0x568>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d17a      	bne.n	80079aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d824      	bhi.n	8007906 <UART_SetConfig+0x342>
 80078bc:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <UART_SetConfig+0x300>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078e9 	.word	0x080078e9
 80078c8:	08007907 	.word	0x08007907
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	08007907 	.word	0x08007907
 80078d4:	080078f7 	.word	0x080078f7
 80078d8:	08007907 	.word	0x08007907
 80078dc:	08007907 	.word	0x08007907
 80078e0:	08007907 	.word	0x08007907
 80078e4:	080078ff 	.word	0x080078ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e8:	f7fe fbfe 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80078ec:	61f8      	str	r0, [r7, #28]
        break;
 80078ee:	e010      	b.n	8007912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f0:	4b8f      	ldr	r3, [pc, #572]	@ (8007b30 <UART_SetConfig+0x56c>)
 80078f2:	61fb      	str	r3, [r7, #28]
        break;
 80078f4:	e00d      	b.n	8007912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078f6:	f7fe fb5f 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 80078fa:	61f8      	str	r0, [r7, #28]
        break;
 80078fc:	e009      	b.n	8007912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007902:	61fb      	str	r3, [r7, #28]
        break;
 8007904:	e005      	b.n	8007912 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80fb 	beq.w	8007b10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	4413      	add	r3, r2
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	429a      	cmp	r2, r3
 8007928:	d305      	bcc.n	8007936 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	429a      	cmp	r2, r3
 8007934:	d903      	bls.n	800793e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800793c:	e0e8      	b.n	8007b10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	2200      	movs	r2, #0
 8007942:	461c      	mov	r4, r3
 8007944:	4615      	mov	r5, r2
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	022b      	lsls	r3, r5, #8
 8007950:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007954:	0222      	lsls	r2, r4, #8
 8007956:	68f9      	ldr	r1, [r7, #12]
 8007958:	6849      	ldr	r1, [r1, #4]
 800795a:	0849      	lsrs	r1, r1, #1
 800795c:	2000      	movs	r0, #0
 800795e:	4688      	mov	r8, r1
 8007960:	4681      	mov	r9, r0
 8007962:	eb12 0a08 	adds.w	sl, r2, r8
 8007966:	eb43 0b09 	adc.w	fp, r3, r9
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007978:	4650      	mov	r0, sl
 800797a:	4659      	mov	r1, fp
 800797c:	f7f9 f984 	bl	8000c88 <__aeabi_uldivmod>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4613      	mov	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800798e:	d308      	bcc.n	80079a2 <UART_SetConfig+0x3de>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007996:	d204      	bcs.n	80079a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	60da      	str	r2, [r3, #12]
 80079a0:	e0b6      	b.n	8007b10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079a8:	e0b2      	b.n	8007b10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079b2:	d15e      	bne.n	8007a72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d828      	bhi.n	8007a0e <UART_SetConfig+0x44a>
 80079bc:	a201      	add	r2, pc, #4	@ (adr r2, 80079c4 <UART_SetConfig+0x400>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079e9 	.word	0x080079e9
 80079c8:	080079f1 	.word	0x080079f1
 80079cc:	080079f9 	.word	0x080079f9
 80079d0:	08007a0f 	.word	0x08007a0f
 80079d4:	080079ff 	.word	0x080079ff
 80079d8:	08007a0f 	.word	0x08007a0f
 80079dc:	08007a0f 	.word	0x08007a0f
 80079e0:	08007a0f 	.word	0x08007a0f
 80079e4:	08007a07 	.word	0x08007a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e8:	f7fe fb7e 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80079ec:	61f8      	str	r0, [r7, #28]
        break;
 80079ee:	e014      	b.n	8007a1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f0:	f7fe fb90 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 80079f4:	61f8      	str	r0, [r7, #28]
        break;
 80079f6:	e010      	b.n	8007a1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007b30 <UART_SetConfig+0x56c>)
 80079fa:	61fb      	str	r3, [r7, #28]
        break;
 80079fc:	e00d      	b.n	8007a1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079fe:	f7fe fadb 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8007a02:	61f8      	str	r0, [r7, #28]
        break;
 8007a04:	e009      	b.n	8007a1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a0a:	61fb      	str	r3, [r7, #28]
        break;
 8007a0c:	e005      	b.n	8007a1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d077      	beq.n	8007b10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	005a      	lsls	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	441a      	add	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2b0f      	cmp	r3, #15
 8007a3a:	d916      	bls.n	8007a6a <UART_SetConfig+0x4a6>
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a42:	d212      	bcs.n	8007a6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f023 030f 	bic.w	r3, r3, #15
 8007a4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	8afb      	ldrh	r3, [r7, #22]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	8afa      	ldrh	r2, [r7, #22]
 8007a66:	60da      	str	r2, [r3, #12]
 8007a68:	e052      	b.n	8007b10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a70:	e04e      	b.n	8007b10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d827      	bhi.n	8007aca <UART_SetConfig+0x506>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <UART_SetConfig+0x4bc>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007aa5 	.word	0x08007aa5
 8007a84:	08007aad 	.word	0x08007aad
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	08007acb 	.word	0x08007acb
 8007a90:	08007abb 	.word	0x08007abb
 8007a94:	08007acb 	.word	0x08007acb
 8007a98:	08007acb 	.word	0x08007acb
 8007a9c:	08007acb 	.word	0x08007acb
 8007aa0:	08007ac3 	.word	0x08007ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aa4:	f7fe fb20 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 8007aa8:	61f8      	str	r0, [r7, #28]
        break;
 8007aaa:	e014      	b.n	8007ad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aac:	f7fe fb32 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 8007ab0:	61f8      	str	r0, [r7, #28]
        break;
 8007ab2:	e010      	b.n	8007ad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8007b30 <UART_SetConfig+0x56c>)
 8007ab6:	61fb      	str	r3, [r7, #28]
        break;
 8007ab8:	e00d      	b.n	8007ad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aba:	f7fe fa7d 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8007abe:	61f8      	str	r0, [r7, #28]
        break;
 8007ac0:	e009      	b.n	8007ad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac6:	61fb      	str	r3, [r7, #28]
        break;
 8007ac8:	e005      	b.n	8007ad6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ad4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d019      	beq.n	8007b10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	085a      	lsrs	r2, r3, #1
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2b0f      	cmp	r3, #15
 8007af4:	d909      	bls.n	8007b0a <UART_SetConfig+0x546>
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007afc:	d205      	bcs.n	8007b0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60da      	str	r2, [r3, #12]
 8007b08:	e002      	b.n	8007b10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3728      	adds	r7, #40	@ 0x28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b2a:	bf00      	nop
 8007b2c:	40008000 	.word	0x40008000
 8007b30:	00f42400 	.word	0x00f42400

08007b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d01a      	beq.n	8007c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c32:	d10a      	bne.n	8007c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	605a      	str	r2, [r3, #4]
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b098      	sub	sp, #96	@ 0x60
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c88:	f7fb fe58 	bl	800393c <HAL_GetTick>
 8007c8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d12e      	bne.n	8007cfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f88c 	bl	8007dc8 <UART_WaitOnFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d021      	beq.n	8007cfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e6      	bne.n	8007cb6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2220      	movs	r2, #32
 8007cec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e062      	b.n	8007dc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d149      	bne.n	8007d9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d10:	2200      	movs	r2, #0
 8007d12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f856 	bl	8007dc8 <UART_WaitOnFlagUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d03c      	beq.n	8007d9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3308      	adds	r3, #8
 8007d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d74:	61fa      	str	r2, [r7, #28]
 8007d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	69b9      	ldr	r1, [r7, #24]
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	617b      	str	r3, [r7, #20]
   return(result);
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e5      	bne.n	8007d54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e011      	b.n	8007dc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3758      	adds	r7, #88	@ 0x58
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd8:	e04f      	b.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d04b      	beq.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de2:	f7fb fdab 	bl	800393c <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d302      	bcc.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e04e      	b.n	8007e9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0304 	and.w	r3, r3, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d037      	beq.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b80      	cmp	r3, #128	@ 0x80
 8007e0e:	d034      	beq.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b40      	cmp	r3, #64	@ 0x40
 8007e14:	d031      	beq.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d110      	bne.n	8007e46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2208      	movs	r2, #8
 8007e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 f838 	bl	8007ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2208      	movs	r2, #8
 8007e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e029      	b.n	8007e9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e54:	d111      	bne.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f81e 	bl	8007ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e00f      	b.n	8007e9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4013      	ands	r3, r2
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	bf0c      	ite	eq
 8007e8a:	2301      	moveq	r3, #1
 8007e8c:	2300      	movne	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d0a0      	beq.n	8007dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b095      	sub	sp, #84	@ 0x54
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ece:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e6      	bne.n	8007eaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f023 0301 	bic.w	r3, r3, #1
 8007ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e5      	bne.n	8007edc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d118      	bne.n	8007f4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0310 	bic.w	r3, r3, #16
 8007f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	613b      	str	r3, [r7, #16]
   return(result);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f5e:	bf00      	nop
 8007f60:	3754      	adds	r7, #84	@ 0x54
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	f107 001c 	add.w	r0, r7, #28
 8007f78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa69 	bl	8008460 <USB_CoreReset>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007f92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	639a      	str	r2, [r3, #56]	@ 0x38
 8007fa6:	e005      	b.n	8007fb4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fc0:	b004      	add	sp, #16
 8007fc2:	4770      	bx	lr

08007fc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f023 0201 	bic.w	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d115      	bne.n	8008034 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008014:	200a      	movs	r0, #10
 8008016:	f7fb fc9d 	bl	8003954 <HAL_Delay>
      ms += 10U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	330a      	adds	r3, #10
 800801e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fa0f 	bl	8008444 <USB_GetMode>
 8008026:	4603      	mov	r3, r0
 8008028:	2b01      	cmp	r3, #1
 800802a:	d01e      	beq.n	800806a <USB_SetCurrentMode+0x84>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008030:	d9f0      	bls.n	8008014 <USB_SetCurrentMode+0x2e>
 8008032:	e01a      	b.n	800806a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d115      	bne.n	8008066 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008046:	200a      	movs	r0, #10
 8008048:	f7fb fc84 	bl	8003954 <HAL_Delay>
      ms += 10U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	330a      	adds	r3, #10
 8008050:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f9f6 	bl	8008444 <USB_GetMode>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <USB_SetCurrentMode+0x84>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2bc7      	cmp	r3, #199	@ 0xc7
 8008062:	d9f0      	bls.n	8008046 <USB_SetCurrentMode+0x60>
 8008064:	e001      	b.n	800806a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e005      	b.n	8008076 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2bc8      	cmp	r3, #200	@ 0xc8
 800806e:	d101      	bne.n	8008074 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008080:	b084      	sub	sp, #16
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800808e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	e009      	b.n	80080b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	3340      	adds	r3, #64	@ 0x40
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3301      	adds	r3, #1
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2b0e      	cmp	r3, #14
 80080b8:	d9f2      	bls.n	80080a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d11c      	bne.n	80080fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e005      	b.n	8008108 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008100:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800810e:	461a      	mov	r2, r3
 8008110:	2300      	movs	r3, #0
 8008112:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008114:	2103      	movs	r1, #3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f95a 	bl	80083d0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800811c:	2110      	movs	r1, #16
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f8f6 	bl	8008310 <USB_FlushTxFifo>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f920 	bl	8008374 <USB_FlushRxFifo>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008144:	461a      	mov	r2, r3
 8008146:	2300      	movs	r3, #0
 8008148:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008150:	461a      	mov	r2, r3
 8008152:	2300      	movs	r3, #0
 8008154:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800815c:	461a      	mov	r2, r3
 800815e:	2300      	movs	r3, #0
 8008160:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	e043      	b.n	80081f0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800817a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800817e:	d118      	bne.n	80081b2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008192:	461a      	mov	r2, r3
 8008194:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e013      	b.n	80081c4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a8:	461a      	mov	r2, r3
 80081aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	e008      	b.n	80081c4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081be:	461a      	mov	r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d0:	461a      	mov	r2, r3
 80081d2:	2300      	movs	r3, #0
 80081d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e2:	461a      	mov	r2, r3
 80081e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3301      	adds	r3, #1
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081f4:	461a      	mov	r2, r3
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d3b5      	bcc.n	8008168 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	e043      	b.n	800828a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008218:	d118      	bne.n	800824c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822c:	461a      	mov	r2, r3
 800822e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	e013      	b.n	800825e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008242:	461a      	mov	r2, r3
 8008244:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	e008      	b.n	800825e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008258:	461a      	mov	r2, r3
 800825a:	2300      	movs	r3, #0
 800825c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826a:	461a      	mov	r2, r3
 800826c:	2300      	movs	r3, #0
 800826e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827c:	461a      	mov	r2, r3
 800827e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	3301      	adds	r3, #1
 8008288:	613b      	str	r3, [r7, #16]
 800828a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800828e:	461a      	mov	r2, r3
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	4293      	cmp	r3, r2
 8008294:	d3b5      	bcc.n	8008202 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80082b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f043 0210 	orr.w	r2, r3, #16
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	4b10      	ldr	r3, [pc, #64]	@ (800830c <USB_DevInit+0x28c>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d005      	beq.n	80082e4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	f043 0208 	orr.w	r2, r3, #8
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d107      	bne.n	80082fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082f4:	f043 0304 	orr.w	r3, r3, #4
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008308:	b004      	add	sp, #16
 800830a:	4770      	bx	lr
 800830c:	803c3800 	.word	0x803c3800

08008310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800832a:	d901      	bls.n	8008330 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e01b      	b.n	8008368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	daf2      	bge.n	800831e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	019b      	lsls	r3, r3, #6
 8008340:	f043 0220 	orr.w	r2, r3, #32
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008354:	d901      	bls.n	800835a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e006      	b.n	8008368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b20      	cmp	r3, #32
 8008364:	d0f0      	beq.n	8008348 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800838c:	d901      	bls.n	8008392 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e018      	b.n	80083c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	daf2      	bge.n	8008380 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2210      	movs	r2, #16
 80083a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083b0:	d901      	bls.n	80083b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e006      	b.n	80083c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b10      	cmp	r3, #16
 80083c0:	d0f0      	beq.n	80083a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083f0:	4313      	orrs	r3, r2
 80083f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008402:	b480      	push	{r7}
 8008404:	b085      	sub	sp, #20
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800841c:	f023 0303 	bic.w	r3, r3, #3
 8008420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008430:	f043 0302 	orr.w	r3, r3, #2
 8008434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	f003 0301 	and.w	r3, r3, #1
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3301      	adds	r3, #1
 8008470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008478:	d901      	bls.n	800847e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e01b      	b.n	80084b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	daf2      	bge.n	800846c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f043 0201 	orr.w	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084a2:	d901      	bls.n	80084a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e006      	b.n	80084b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d0f0      	beq.n	8008496 <USB_CoreReset+0x36>

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b08c      	sub	sp, #48	@ 0x30
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	603b      	str	r3, [r7, #0]
 80084ca:	4603      	mov	r3, r0
 80084cc:	71fb      	strb	r3, [r7, #7]
 80084ce:	460b      	mov	r3, r1
 80084d0:	71bb      	strb	r3, [r7, #6]
 80084d2:	4613      	mov	r3, r2
 80084d4:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80084da:	79bb      	ldrb	r3, [r7, #6]
 80084dc:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80084de:	797b      	ldrb	r3, [r7, #5]
 80084e0:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80084e2:	f107 030c 	add.w	r3, r7, #12
 80084e6:	2207      	movs	r2, #7
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f003 fcb8 	bl	800be60 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80084f0:	f107 0318 	add.w	r3, r7, #24
 80084f4:	2218      	movs	r2, #24
 80084f6:	2100      	movs	r1, #0
 80084f8:	4618      	mov	r0, r3
 80084fa:	f003 fcb1 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80084fe:	233f      	movs	r3, #63	@ 0x3f
 8008500:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8008502:	238a      	movs	r3, #138	@ 0x8a
 8008504:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8008506:	f107 0314 	add.w	r3, r7, #20
 800850a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800850c:	2303      	movs	r3, #3
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8008510:	f107 030c 	add.w	r3, r7, #12
 8008514:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8008516:	2307      	movs	r3, #7
 8008518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800851a:	f107 0318 	add.w	r3, r7, #24
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fea9 	bl	8009278 <hci_send_req>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	da01      	bge.n	8008530 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800852c:	23ff      	movs	r3, #255	@ 0xff
 800852e:	e014      	b.n	800855a <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8008530:	7b3b      	ldrb	r3, [r7, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8008536:	7b3b      	ldrb	r3, [r7, #12]
 8008538:	e00f      	b.n	800855a <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800853a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800853e:	b29a      	uxth	r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008544:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008548:	b29a      	uxth	r2, r3
 800854a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800854e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8008552:	b29a      	uxth	r2, r3
 8008554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008556:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3730      	adds	r7, #48	@ 0x30
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b08e      	sub	sp, #56	@ 0x38
 8008566:	af00      	add	r7, sp, #0
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	4603      	mov	r3, r0
 8008570:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008576:	f107 0314 	add.w	r3, r7, #20
 800857a:	2207      	movs	r2, #7
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f003 fc6e 	bl	800be60 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008584:	f107 0320 	add.w	r3, r7, #32
 8008588:	2218      	movs	r2, #24
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f003 fc67 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008592:	233f      	movs	r3, #63	@ 0x3f
 8008594:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8008596:	238a      	movs	r3, #138	@ 0x8a
 8008598:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 800859a:	f107 031c 	add.w	r3, r7, #28
 800859e:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 80085a0:	2301      	movs	r3, #1
 80085a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80085a4:	f107 0314 	add.w	r3, r7, #20
 80085a8:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80085aa:	2307      	movs	r3, #7
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80085ae:	f107 0320 	add.w	r3, r7, #32
 80085b2:	2100      	movs	r1, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fe5f 	bl	8009278 <hci_send_req>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	da01      	bge.n	80085c4 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80085c0:	23ff      	movs	r3, #255	@ 0xff
 80085c2:	e014      	b.n	80085ee <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80085c4:	7d3b      	ldrb	r3, [r7, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80085ca:	7d3b      	ldrb	r3, [r7, #20]
 80085cc:	e00f      	b.n	80085ee <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80085ce:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80085d8:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80085e2:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3738      	adds	r7, #56	@ 0x38
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80085f6:	b590      	push	{r4, r7, lr}
 80085f8:	b095      	sub	sp, #84	@ 0x54
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	4604      	mov	r4, r0
 80085fe:	4608      	mov	r0, r1
 8008600:	4611      	mov	r1, r2
 8008602:	461a      	mov	r2, r3
 8008604:	4623      	mov	r3, r4
 8008606:	71fb      	strb	r3, [r7, #7]
 8008608:	4603      	mov	r3, r0
 800860a:	80bb      	strh	r3, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	807b      	strh	r3, [r7, #2]
 8008610:	4613      	mov	r3, r2
 8008612:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800861a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800861e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008622:	4413      	add	r3, r2
 8008624:	330e      	adds	r3, #14
 8008626:	2b28      	cmp	r3, #40	@ 0x28
 8008628:	d901      	bls.n	800862e <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800862a:	2342      	movs	r3, #66	@ 0x42
 800862c:	e0c9      	b.n	80087c2 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800862e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008632:	3350      	adds	r3, #80	@ 0x50
 8008634:	443b      	add	r3, r7
 8008636:	79fa      	ldrb	r2, [r7, #7]
 8008638:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800863c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008640:	3301      	adds	r3, #1
 8008642:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008646:	88bb      	ldrh	r3, [r7, #4]
 8008648:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800864a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800864e:	f107 0208 	add.w	r2, r7, #8
 8008652:	4413      	add	r3, r2
 8008654:	88ba      	ldrh	r2, [r7, #4]
 8008656:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008658:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800865c:	3302      	adds	r3, #2
 800865e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8008662:	887b      	ldrh	r3, [r7, #2]
 8008664:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8008666:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800866a:	f107 0208 	add.w	r2, r7, #8
 800866e:	4413      	add	r3, r2
 8008670:	887a      	ldrh	r2, [r7, #2]
 8008672:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008674:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008678:	3302      	adds	r3, #2
 800867a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 800867e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008682:	3350      	adds	r3, #80	@ 0x50
 8008684:	443b      	add	r3, r7
 8008686:	79ba      	ldrb	r2, [r7, #6]
 8008688:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800868c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008690:	3301      	adds	r3, #1
 8008692:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8008696:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800869a:	3350      	adds	r3, #80	@ 0x50
 800869c:	443b      	add	r3, r7
 800869e:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80086a2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80086a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086aa:	3301      	adds	r3, #1
 80086ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 80086b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086b4:	3350      	adds	r3, #80	@ 0x50
 80086b6:	443b      	add	r3, r7
 80086b8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80086bc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80086c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086c4:	3301      	adds	r3, #1
 80086c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80086ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086ce:	f107 0208 	add.w	r2, r7, #8
 80086d2:	4413      	add	r3, r2
 80086d4:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80086d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086da:	4618      	mov	r0, r3
 80086dc:	f003 fc3f 	bl	800bf5e <memcpy>
  indx +=  LocalNameLen;
 80086e0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80086e4:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80086e8:	4413      	add	r3, r2
 80086ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80086ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086f2:	3350      	adds	r3, #80	@ 0x50
 80086f4:	443b      	add	r3, r7
 80086f6:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80086fa:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80086fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008702:	3301      	adds	r3, #1
 8008704:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008708:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800870c:	f107 0208 	add.w	r2, r7, #8
 8008710:	4413      	add	r3, r2
 8008712:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008716:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008718:	4618      	mov	r0, r3
 800871a:	f003 fc20 	bl	800bf5e <memcpy>
  indx +=  ServiceUUIDLen;  
 800871e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008722:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008726:	4413      	add	r3, r2
 8008728:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800872c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8008730:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008734:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008738:	f107 0208 	add.w	r2, r7, #8
 800873c:	4413      	add	r3, r2
 800873e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8008742:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008744:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008748:	3302      	adds	r3, #2
 800874a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800874e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8008752:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8008756:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800875a:	f107 0208 	add.w	r2, r7, #8
 800875e:	4413      	add	r3, r2
 8008760:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8008764:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8008766:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800876a:	3302      	adds	r3, #2
 800876c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008770:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008774:	2218      	movs	r2, #24
 8008776:	2100      	movs	r1, #0
 8008778:	4618      	mov	r0, r3
 800877a:	f003 fb71 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800877e:	233f      	movs	r3, #63	@ 0x3f
 8008780:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008782:	2383      	movs	r3, #131	@ 0x83
 8008784:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8008786:	f107 0308 	add.w	r3, r7, #8
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 800878c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008790:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8008792:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8008796:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8008798:	2301      	movs	r3, #1
 800879a:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800879c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80087a0:	2100      	movs	r1, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fd68 	bl	8009278 <hci_send_req>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	da01      	bge.n	80087b2 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80087ae:	23ff      	movs	r3, #255	@ 0xff
 80087b0:	e007      	b.n	80087c2 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 80087b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <aci_gap_set_discoverable+0x1ca>
    return status;
 80087ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087be:	e000      	b.n	80087c2 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3754      	adds	r7, #84	@ 0x54
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd90      	pop	{r4, r7, pc}

080087ca <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80087ca:	b590      	push	{r4, r7, lr}
 80087cc:	b091      	sub	sp, #68	@ 0x44
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	603a      	str	r2, [r7, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	4603      	mov	r3, r0
 80087d6:	71fb      	strb	r3, [r7, #7]
 80087d8:	460b      	mov	r3, r1
 80087da:	71bb      	strb	r3, [r7, #6]
 80087dc:	4613      	mov	r3, r2
 80087de:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80087e4:	79bb      	ldrb	r3, [r7, #6]
 80087e6:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80087e8:	79bb      	ldrb	r3, [r7, #6]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	f107 030e 	add.w	r3, r7, #14
 80087f4:	6814      	ldr	r4, [r2, #0]
 80087f6:	6850      	ldr	r0, [r2, #4]
 80087f8:	6891      	ldr	r1, [r2, #8]
 80087fa:	68d2      	ldr	r2, [r2, #12]
 80087fc:	601c      	str	r4, [r3, #0]
 80087fe:	6058      	str	r0, [r3, #4]
 8008800:	6099      	str	r1, [r3, #8]
 8008802:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008804:	797b      	ldrb	r3, [r7, #5]
 8008806:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008808:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800880c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800880e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008812:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008818:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 800881c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8008820:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008824:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008828:	2218      	movs	r2, #24
 800882a:	2100      	movs	r1, #0
 800882c:	4618      	mov	r0, r3
 800882e:	f003 fb17 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008832:	233f      	movs	r3, #63	@ 0x3f
 8008834:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008836:	2386      	movs	r3, #134	@ 0x86
 8008838:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 800883a:	f107 030c 	add.w	r3, r7, #12
 800883e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8008840:	231a      	movs	r3, #26
 8008842:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8008844:	f107 030b 	add.w	r3, r7, #11
 8008848:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 800884a:	2301      	movs	r3, #1
 800884c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800884e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fd0f 	bl	8009278 <hci_send_req>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	da01      	bge.n	8008864 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008860:	23ff      	movs	r3, #255	@ 0xff
 8008862:	e005      	b.n	8008870 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008864:	7afb      	ldrb	r3, [r7, #11]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <aci_gap_set_auth_requirement+0xa4>
    return status;
 800886a:	7afb      	ldrb	r3, [r7, #11]
 800886c:	e000      	b.n	8008870 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3744      	adds	r7, #68	@ 0x44
 8008874:	46bd      	mov	sp, r7
 8008876:	bd90      	pop	{r4, r7, pc}

08008878 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b092      	sub	sp, #72	@ 0x48
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	6039      	str	r1, [r7, #0]
 8008882:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	2b1f      	cmp	r3, #31
 800888e:	d901      	bls.n	8008894 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008890:	2342      	movs	r3, #66	@ 0x42
 8008892:	e03e      	b.n	8008912 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8008894:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008898:	3348      	adds	r3, #72	@ 0x48
 800889a:	443b      	add	r3, r7
 800889c:	79fa      	ldrb	r2, [r7, #7]
 800889e:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 80088a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088a6:	3301      	adds	r3, #1
 80088a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80088ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088b0:	f107 0208 	add.w	r2, r7, #8
 80088b4:	4413      	add	r3, r2
 80088b6:	79fa      	ldrb	r2, [r7, #7]
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f003 fb4f 	bl	800bf5e <memcpy>
  indx +=  AdvLen;
 80088c0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	4413      	add	r3, r2
 80088c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088d0:	2218      	movs	r2, #24
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f003 fac3 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80088da:	233f      	movs	r3, #63	@ 0x3f
 80088dc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 80088de:	238e      	movs	r3, #142	@ 0x8e
 80088e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80088e2:	f107 0308 	add.w	r3, r7, #8
 80088e6:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 80088e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 80088ee:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80088f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 80088f4:	2301      	movs	r3, #1
 80088f6:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 80088f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fcba 	bl	8009278 <hci_send_req>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	da01      	bge.n	800890e <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 800890a:	23ff      	movs	r3, #255	@ 0xff
 800890c:	e001      	b.n	8008912 <aci_gap_update_adv_data+0x9a>
    
  return status;
 800890e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008912:	4618      	mov	r0, r3
 8008914:	3748      	adds	r7, #72	@ 0x48
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b088      	sub	sp, #32
 800891e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008920:	f107 0308 	add.w	r3, r7, #8
 8008924:	2218      	movs	r2, #24
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f003 fa99 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800892e:	233f      	movs	r3, #63	@ 0x3f
 8008930:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008932:	f240 1301 	movw	r3, #257	@ 0x101
 8008936:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008938:	1dfb      	adds	r3, r7, #7
 800893a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800893c:	2301      	movs	r3, #1
 800893e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008940:	f107 0308 	add.w	r3, r7, #8
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fc96 	bl	8009278 <hci_send_req>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	da01      	bge.n	8008956 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008952:	23ff      	movs	r3, #255	@ 0xff
 8008954:	e000      	b.n	8008958 <aci_gatt_init+0x3e>

  return status;
 8008956:	79fb      	ldrb	r3, [r7, #7]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b090      	sub	sp, #64	@ 0x40
 8008964:	af00      	add	r7, sp, #0
 8008966:	6039      	str	r1, [r7, #0]
 8008968:	4611      	mov	r1, r2
 800896a:	461a      	mov	r2, r3
 800896c:	4603      	mov	r3, r0
 800896e:	71fb      	strb	r3, [r7, #7]
 8008970:	460b      	mov	r3, r1
 8008972:	71bb      	strb	r3, [r7, #6]
 8008974:	4613      	mov	r3, r2
 8008976:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 800897e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008982:	3340      	adds	r3, #64	@ 0x40
 8008984:	443b      	add	r3, r7
 8008986:	79fa      	ldrb	r2, [r7, #7]
 8008988:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800898c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008990:	3301      	adds	r3, #1
 8008992:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d103      	bne.n	80089a4 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800899c:	2302      	movs	r3, #2
 800899e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80089a2:	e002      	b.n	80089aa <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80089aa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80089ae:	f107 020c 	add.w	r2, r7, #12
 80089b2:	4413      	add	r3, r2
 80089b4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f003 facf 	bl	800bf5e <memcpy>
  indx +=  uuid_len;
 80089c0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80089c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80089c8:	4413      	add	r3, r2
 80089ca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 80089ce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80089d2:	3340      	adds	r3, #64	@ 0x40
 80089d4:	443b      	add	r3, r7
 80089d6:	79ba      	ldrb	r2, [r7, #6]
 80089d8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80089dc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80089e0:	3301      	adds	r3, #1
 80089e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 80089e6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80089ea:	3340      	adds	r3, #64	@ 0x40
 80089ec:	443b      	add	r3, r7
 80089ee:	797a      	ldrb	r2, [r7, #5]
 80089f0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80089f4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80089f8:	3301      	adds	r3, #1
 80089fa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80089fe:	f107 0320 	add.w	r3, r7, #32
 8008a02:	2203      	movs	r2, #3
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f003 fa2a 	bl	800be60 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a10:	2218      	movs	r2, #24
 8008a12:	2100      	movs	r1, #0
 8008a14:	4618      	mov	r0, r3
 8008a16:	f003 fa23 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a1a:	233f      	movs	r3, #63	@ 0x3f
 8008a1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8008a1e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008a22:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8008a2a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8008a30:	f107 0320 	add.w	r3, r7, #32
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008a36:	2303      	movs	r3, #3
 8008a38:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fc19 	bl	8009278 <hci_send_req>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	da01      	bge.n	8008a50 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8008a4c:	23ff      	movs	r3, #255	@ 0xff
 8008a4e:	e00c      	b.n	8008a6a <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8008a50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <aci_gatt_add_serv+0xfe>
    return resp.status;
 8008a58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a5c:	e005      	b.n	8008a6a <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008a5e:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a66:	801a      	strh	r2, [r3, #0]

  return 0;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3740      	adds	r7, #64	@ 0x40
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b092      	sub	sp, #72	@ 0x48
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	603a      	str	r2, [r7, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	80fb      	strh	r3, [r7, #6]
 8008a80:	460b      	mov	r3, r1
 8008a82:	717b      	strb	r3, [r7, #5]
 8008a84:	4613      	mov	r3, r2
 8008a86:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008a92:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a96:	f107 020c 	add.w	r2, r7, #12
 8008a9a:	4413      	add	r3, r2
 8008a9c:	88fa      	ldrh	r2, [r7, #6]
 8008a9e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008aa0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8008aaa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008aae:	3348      	adds	r3, #72	@ 0x48
 8008ab0:	443b      	add	r3, r7
 8008ab2:	797a      	ldrb	r2, [r7, #5]
 8008ab4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008ab8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008abc:	3301      	adds	r3, #1
 8008abe:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008ac2:	797b      	ldrb	r3, [r7, #5]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d103      	bne.n	8008ad0 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ace:	e002      	b.n	8008ad6 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008ad6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ada:	f107 020c 	add.w	r2, r7, #12
 8008ade:	4413      	add	r3, r2
 8008ae0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f003 fa39 	bl	800bf5e <memcpy>
  indx +=  uuid_len;
 8008aec:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008af0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008af4:	4413      	add	r3, r2
 8008af6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8008afa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008afe:	3348      	adds	r3, #72	@ 0x48
 8008b00:	443b      	add	r3, r7
 8008b02:	793a      	ldrb	r2, [r7, #4]
 8008b04:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b08:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8008b12:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b16:	3348      	adds	r3, #72	@ 0x48
 8008b18:	443b      	add	r3, r7
 8008b1a:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008b1e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b22:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b26:	3301      	adds	r3, #1
 8008b28:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8008b2c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b30:	3348      	adds	r3, #72	@ 0x48
 8008b32:	443b      	add	r3, r7
 8008b34:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008b38:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b3c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b40:	3301      	adds	r3, #1
 8008b42:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8008b46:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b4a:	3348      	adds	r3, #72	@ 0x48
 8008b4c:	443b      	add	r3, r7
 8008b4e:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8008b52:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b56:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8008b60:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b64:	3348      	adds	r3, #72	@ 0x48
 8008b66:	443b      	add	r3, r7
 8008b68:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008b6c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b70:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b74:	3301      	adds	r3, #1
 8008b76:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8008b7a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b7e:	3348      	adds	r3, #72	@ 0x48
 8008b80:	443b      	add	r3, r7
 8008b82:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008b86:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b8a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b8e:	3301      	adds	r3, #1
 8008b90:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008b98:	2203      	movs	r2, #3
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f003 f95f 	bl	800be60 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008ba6:	2218      	movs	r2, #24
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f003 f958 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008bb0:	233f      	movs	r3, #63	@ 0x3f
 8008bb2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008bb4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008bb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008bba:	f107 030c 	add.w	r3, r7, #12
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008bc0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8008bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fb4e 	bl	8009278 <hci_send_req>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da01      	bge.n	8008be6 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8008be2:	23ff      	movs	r3, #255	@ 0xff
 8008be4:	e00c      	b.n	8008c00 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8008be6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <aci_gatt_add_char+0x182>
    return resp.status;
 8008bee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008bf2:	e005      	b.n	8008c00 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8008bf4:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bfc:	801a      	strh	r2, [r3, #0]

  return 0;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3748      	adds	r7, #72	@ 0x48
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008c08:	b590      	push	{r4, r7, lr}
 8008c0a:	b0ab      	sub	sp, #172	@ 0xac
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	461a      	mov	r2, r3
 8008c16:	4623      	mov	r3, r4
 8008c18:	80fb      	strh	r3, [r7, #6]
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	80bb      	strh	r3, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
 8008c22:	4613      	mov	r3, r2
 8008c24:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008c2c:	78bb      	ldrb	r3, [r7, #2]
 8008c2e:	2b7a      	cmp	r3, #122	@ 0x7a
 8008c30:	d901      	bls.n	8008c36 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8008c32:	2342      	movs	r3, #66	@ 0x42
 8008c34:	e07a      	b.n	8008d2c <aci_gatt_update_char_value+0x124>

  servHandle = htobs(servHandle);
 8008c36:	88fb      	ldrh	r3, [r7, #6]
 8008c38:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008c3a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c3e:	f107 0208 	add.w	r2, r7, #8
 8008c42:	4413      	add	r3, r2
 8008c44:	88fa      	ldrh	r2, [r7, #6]
 8008c46:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008c48:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c4c:	3302      	adds	r3, #2
 8008c4e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8008c52:	88bb      	ldrh	r3, [r7, #4]
 8008c54:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008c56:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c5a:	f107 0208 	add.w	r2, r7, #8
 8008c5e:	4413      	add	r3, r2
 8008c60:	88ba      	ldrh	r2, [r7, #4]
 8008c62:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008c64:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c68:	3302      	adds	r3, #2
 8008c6a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8008c6e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c72:	33a8      	adds	r3, #168	@ 0xa8
 8008c74:	443b      	add	r3, r7
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008c7c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c80:	3301      	adds	r3, #1
 8008c82:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8008c86:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c8a:	33a8      	adds	r3, #168	@ 0xa8
 8008c8c:	443b      	add	r3, r7
 8008c8e:	78ba      	ldrb	r2, [r7, #2]
 8008c90:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008c94:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008c9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008ca2:	f107 0208 	add.w	r2, r7, #8
 8008ca6:	4413      	add	r3, r2
 8008ca8:	78ba      	ldrb	r2, [r7, #2]
 8008caa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f003 f955 	bl	800bf5e <memcpy>
  indx +=  charValueLen;
 8008cb4:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8008cb8:	78bb      	ldrb	r3, [r7, #2]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008cc0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008cc4:	2218      	movs	r2, #24
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f003 f8c9 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008cce:	233f      	movs	r3, #63	@ 0x3f
 8008cd0:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008cd4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008cd8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008ce4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8008cec:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8008cf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008cfa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fab9 	bl	8009278 <hci_send_req>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	da01      	bge.n	8008d10 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8008d0c:	23ff      	movs	r3, #255	@ 0xff
 8008d0e:	e00d      	b.n	8008d2c <aci_gatt_update_char_value+0x124>

  if (status) {
 8008d10:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d008      	beq.n	8008d2a <aci_gatt_update_char_value+0x122>
	PRINTF("status=%x\n",status);
 8008d18:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4805      	ldr	r0, [pc, #20]	@ (8008d34 <aci_gatt_update_char_value+0x12c>)
 8008d20:	f002 ff34 	bl	800bb8c <iprintf>
    return status;
 8008d24:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008d28:	e000      	b.n	8008d2c <aci_gatt_update_char_value+0x124>
  }

  return 0;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	37ac      	adds	r7, #172	@ 0xac
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd90      	pop	{r4, r7, pc}
 8008d34:	0800f8bc 	.word	0x0800f8bc

08008d38 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08a      	sub	sp, #40	@ 0x28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d46:	f107 0310 	add.w	r3, r7, #16
 8008d4a:	2218      	movs	r2, #24
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f003 f886 	bl	800be60 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008d54:	233f      	movs	r3, #63	@ 0x3f
 8008d56:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008d58:	f240 1327 	movw	r3, #295	@ 0x127
 8008d5c:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8008d5e:	f107 030c 	add.w	r3, r7, #12
 8008d62:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008d64:	2302      	movs	r3, #2
 8008d66:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008d68:	f107 030b 	add.w	r3, r7, #11
 8008d6c:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8008d72:	f107 0310 	add.w	r3, r7, #16
 8008d76:	2100      	movs	r1, #0
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fa7d 	bl	8009278 <hci_send_req>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da01      	bge.n	8008d88 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008d84:	23ff      	movs	r3, #255	@ 0xff
 8008d86:	e000      	b.n	8008d8a <aci_gatt_allow_read+0x52>

    return status;
 8008d88:	7afb      	ldrb	r3, [r7, #11]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3728      	adds	r7, #40	@ 0x28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b0ac      	sub	sp, #176	@ 0xb0
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60ba      	str	r2, [r7, #8]
 8008d9a:	607b      	str	r3, [r7, #4]
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
 8008da0:	460b      	mov	r3, r1
 8008da2:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008daa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008dae:	2218      	movs	r2, #24
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f003 f854 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008db8:	233f      	movs	r3, #63	@ 0x3f
 8008dba:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8008dbe:	230d      	movs	r3, #13
 8008dc0:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8008dc4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008dc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8008dd2:	f107 0314 	add.w	r3, r7, #20
 8008dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008de0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fa46 	bl	8009278 <hci_send_req>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	da01      	bge.n	8008df6 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8008df2:	23ff      	movs	r3, #255	@ 0xff
 8008df4:	e01e      	b.n	8008e34 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8008df6:	7d3b      	ldrb	r3, [r7, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8008dfc:	7d3b      	ldrb	r3, [r7, #20]
 8008dfe:	e019      	b.n	8008e34 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8008e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	89bb      	ldrh	r3, [r7, #12]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d201      	bcs.n	8008e1e <aci_hal_read_config_data+0x8c>
 8008e1a:	89ba      	ldrh	r2, [r7, #12]
 8008e1c:	e002      	b.n	8008e24 <aci_hal_read_config_data+0x92>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f107 0314 	add.w	r3, r7, #20
 8008e28:	3301      	adds	r3, #1
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f003 f896 	bl	800bf5e <memcpy>
  
  return 0;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	37b0      	adds	r7, #176	@ 0xb0
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	@ 0x28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	460a      	mov	r2, r1
 8008e46:	71fb      	strb	r3, [r7, #7]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008e50:	79bb      	ldrb	r3, [r7, #6]
 8008e52:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e54:	f107 0310 	add.w	r3, r7, #16
 8008e58:	2218      	movs	r2, #24
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 ffff 	bl	800be60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e62:	233f      	movs	r3, #63	@ 0x3f
 8008e64:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008e66:	230f      	movs	r3, #15
 8008e68:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008e6a:	f107 030c 	add.w	r3, r7, #12
 8008e6e:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008e70:	2302      	movs	r3, #2
 8008e72:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008e74:	f107 030b 	add.w	r3, r7, #11
 8008e78:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008e7e:	f107 0310 	add.w	r3, r7, #16
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f9f7 	bl	8009278 <hci_send_req>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da01      	bge.n	8008e94 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008e90:	23ff      	movs	r3, #255	@ 0xff
 8008e92:	e000      	b.n	8008e96 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008e94:	7afb      	ldrb	r3, [r7, #11]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3728      	adds	r7, #40	@ 0x28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008e9e:	b590      	push	{r4, r7, lr}
 8008ea0:	b089      	sub	sp, #36	@ 0x24
 8008ea2:	af02      	add	r7, sp, #8
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008ea8:	f107 0410 	add.w	r4, r7, #16
 8008eac:	f107 0215 	add.w	r2, r7, #21
 8008eb0:	f107 0112 	add.w	r1, r7, #18
 8008eb4:	f107 0016 	add.w	r0, r7, #22
 8008eb8:	f107 030e 	add.w	r3, r7, #14
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	f000 f851 	bl	8008f66 <hci_le_read_local_version>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d124      	bne.n	8008f18 <getBlueNRGVersion+0x7a>
    *hwVersion = hci_revision >> 8;
 8008ece:	8a7b      	ldrh	r3, [r7, #18]
 8008ed0:	0a1b      	lsrs	r3, r3, #8
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008eda:	8a7b      	ldrh	r3, [r7, #18]
 8008edc:	021b      	lsls	r3, r3, #8
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	b21a      	sxth	r2, r3
 8008eea:	89fb      	ldrh	r3, [r7, #14]
 8008eec:	b21b      	sxth	r3, r3
 8008eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ef2:	b21b      	sxth	r3, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b21b      	sxth	r3, r3
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	b21a      	sxth	r2, r3
 8008f04:	89fb      	ldrh	r3, [r7, #14]
 8008f06:	b21b      	sxth	r3, r3
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	b21b      	sxth	r3, r3
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd90      	pop	{r4, r7, pc}

08008f22 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b088      	sub	sp, #32
 8008f26:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f28:	f107 0308 	add.w	r3, r7, #8
 8008f2c:	2218      	movs	r2, #24
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f002 ff95 	bl	800be60 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008f36:	2303      	movs	r3, #3
 8008f38:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f3e:	1dfb      	adds	r3, r7, #7
 8008f40:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f42:	2301      	movs	r3, #1
 8008f44:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 f993 	bl	8009278 <hci_send_req>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	da01      	bge.n	8008f5c <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008f58:	23ff      	movs	r3, #255	@ 0xff
 8008f5a:	e000      	b.n	8008f5e <hci_reset+0x3c>
  
  return status;  
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b08e      	sub	sp, #56	@ 0x38
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008f74:	f107 0314 	add.w	r3, r7, #20
 8008f78:	2209      	movs	r2, #9
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f002 ff6f 	bl	800be60 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f82:	f107 0320 	add.w	r3, r7, #32
 8008f86:	2218      	movs	r2, #24
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 ff68 	bl	800be60 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008f90:	2304      	movs	r3, #4
 8008f92:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008f94:	2301      	movs	r3, #1
 8008f96:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008fa0:	f107 0314 	add.w	r3, r7, #20
 8008fa4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008fa6:	2309      	movs	r3, #9
 8008fa8:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008faa:	f107 0320 	add.w	r3, r7, #32
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f961 	bl	8009278 <hci_send_req>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da01      	bge.n	8008fc0 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008fbc:	23ff      	movs	r3, #255	@ 0xff
 8008fbe:	e018      	b.n	8008ff2 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008fc0:	7d3b      	ldrb	r3, [r7, #20]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <hci_le_read_local_version+0x64>
    return resp.status;
 8008fc6:	7d3b      	ldrb	r3, [r7, #20]
 8008fc8:	e013      	b.n	8008ff2 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008fca:	7d7a      	ldrb	r2, [r7, #21]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008fd0:	8afa      	ldrh	r2, [r7, #22]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008fd6:	7e3a      	ldrb	r2, [r7, #24]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008fdc:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008fe6:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fee:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3738      	adds	r7, #56	@ 0x38
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b092      	sub	sp, #72	@ 0x48
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	4603      	mov	r3, r0
 8009002:	6039      	str	r1, [r7, #0]
 8009004:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009006:	f107 0310 	add.w	r3, r7, #16
 800900a:	2220      	movs	r2, #32
 800900c:	2100      	movs	r1, #0
 800900e:	4618      	mov	r0, r3
 8009010:	f002 ff26 	bl	800be60 <memset>
  scan_resp_cp.length = length;
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	2b1f      	cmp	r3, #31
 800901c:	bf28      	it	cs
 800901e:	231f      	movcs	r3, #31
 8009020:	b2db      	uxtb	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	f107 0310 	add.w	r3, r7, #16
 8009028:	3301      	adds	r3, #1
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	4618      	mov	r0, r3
 800902e:	f002 ff96 	bl	800bf5e <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009032:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009036:	2218      	movs	r2, #24
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f002 ff10 	bl	800be60 <memset>
  rq.ogf = OGF_LE_CTL;
 8009040:	2308      	movs	r3, #8
 8009042:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009044:	2309      	movs	r3, #9
 8009046:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8009048:	f107 0310 	add.w	r3, r7, #16
 800904c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800904e:	2320      	movs	r3, #32
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8009052:	f107 030f 	add.w	r3, r7, #15
 8009056:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8009058:	2301      	movs	r3, #1
 800905a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800905c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f000 f908 	bl	8009278 <hci_send_req>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	da01      	bge.n	8009072 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800906e:	23ff      	movs	r3, #255	@ 0xff
 8009070:	e000      	b.n	8009074 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3748      	adds	r7, #72	@ 0x48
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3308      	adds	r3, #8
 8009088:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b04      	cmp	r3, #4
 8009090:	d001      	beq.n	8009096 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009092:	2301      	movs	r3, #1
 8009094:	e00c      	b.n	80090b0 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3302      	adds	r3, #2
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80090a4:	3b03      	subs	r3, #3
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d001      	beq.n	80090ae <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80090aa:	2302      	movs	r3, #2
 80090ac:	e000      	b.n	80090b0 <verify_packet+0x34>
  
  return 0;      
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b0a6      	sub	sp, #152	@ 0x98
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	607b      	str	r3, [r7, #4]
 80090c4:	4603      	mov	r3, r0
 80090c6:	81fb      	strh	r3, [r7, #14]
 80090c8:	460b      	mov	r3, r1
 80090ca:	81bb      	strh	r3, [r7, #12]
 80090cc:	4613      	mov	r3, r2
 80090ce:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80090d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80090d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090d8:	b21a      	sxth	r2, r3
 80090da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090de:	029b      	lsls	r3, r3, #10
 80090e0:	b21b      	sxth	r3, r3
 80090e2:	4313      	orrs	r3, r2
 80090e4:	b21b      	sxth	r3, r3
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80090ee:	2301      	movs	r3, #1
 80090f0:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80090f2:	f107 0318 	add.w	r3, r7, #24
 80090f6:	3301      	adds	r3, #1
 80090f8:	461a      	mov	r2, r3
 80090fa:	f107 0314 	add.w	r3, r7, #20
 80090fe:	8819      	ldrh	r1, [r3, #0]
 8009100:	789b      	ldrb	r3, [r3, #2]
 8009102:	8011      	strh	r1, [r2, #0]
 8009104:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009106:	f107 0318 	add.w	r3, r7, #24
 800910a:	3304      	adds	r3, #4
 800910c:	7afa      	ldrb	r2, [r7, #11]
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	4618      	mov	r0, r3
 8009112:	f002 ff24 	bl	800bf5e <memcpy>
  
  if (hciContext.io.Send)
 8009116:	4b09      	ldr	r3, [pc, #36]	@ (800913c <send_cmd+0x80>)
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d009      	beq.n	8009132 <send_cmd+0x76>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800911e:	4b07      	ldr	r3, [pc, #28]	@ (800913c <send_cmd+0x80>)
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	7afa      	ldrb	r2, [r7, #11]
 8009124:	b292      	uxth	r2, r2
 8009126:	3204      	adds	r2, #4
 8009128:	b291      	uxth	r1, r2
 800912a:	f107 0218 	add.w	r2, r7, #24
 800912e:	4610      	mov	r0, r2
 8009130:	4798      	blx	r3
  }
}
 8009132:	bf00      	nop
 8009134:	3798      	adds	r7, #152	@ 0x98
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20002140 	.word	0x20002140

08009140 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800914a:	e00a      	b.n	8009162 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800914c:	f107 030c 	add.w	r3, r7, #12
 8009150:	4619      	mov	r1, r3
 8009152:	6838      	ldr	r0, [r7, #0]
 8009154:	f000 fae8 	bl	8009728 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fa4f 	bl	8009600 <list_insert_head>
  while (!list_is_empty(src_list))
 8009162:	6838      	ldr	r0, [r7, #0]
 8009164:	f000 fa2a 	bl	80095bc <list_is_empty>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0ee      	beq.n	800914c <move_list+0xc>
  }
}
 800916e:	bf00      	nop
 8009170:	bf00      	nop
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800917e:	e009      	b.n	8009194 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009180:	1d3b      	adds	r3, r7, #4
 8009182:	4619      	mov	r1, r3
 8009184:	4809      	ldr	r0, [pc, #36]	@ (80091ac <free_event_list+0x34>)
 8009186:	f000 faa8 	bl	80096da <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4619      	mov	r1, r3
 800918e:	4808      	ldr	r0, [pc, #32]	@ (80091b0 <free_event_list+0x38>)
 8009190:	f000 fa5c 	bl	800964c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009194:	4806      	ldr	r0, [pc, #24]	@ (80091b0 <free_event_list+0x38>)
 8009196:	f000 faee 	bl	8009776 <list_get_size>
 800919a:	4603      	mov	r3, r0
 800919c:	2b01      	cmp	r3, #1
 800919e:	ddef      	ble.n	8009180 <free_event_list+0x8>
  }
}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20001e7c 	.word	0x20001e7c
 80091b0:	20001e74 	.word	0x20001e74

080091b4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80091c4:	4a18      	ldr	r2, [pc, #96]	@ (8009228 <hci_init+0x74>)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80091ca:	4818      	ldr	r0, [pc, #96]	@ (800922c <hci_init+0x78>)
 80091cc:	f000 f9e6 	bl	800959c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80091d0:	4817      	ldr	r0, [pc, #92]	@ (8009230 <hci_init+0x7c>)
 80091d2:	f000 f9e3 	bl	800959c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80091d6:	f7f8 fe05 	bl	8001de4 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]
 80091de:	e00c      	b.n	80091fa <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	228c      	movs	r2, #140	@ 0x8c
 80091e4:	fb02 f303 	mul.w	r3, r2, r3
 80091e8:	4a12      	ldr	r2, [pc, #72]	@ (8009234 <hci_init+0x80>)
 80091ea:	4413      	add	r3, r2
 80091ec:	4619      	mov	r1, r3
 80091ee:	480f      	ldr	r0, [pc, #60]	@ (800922c <hci_init+0x78>)
 80091f0:	f000 fa2c 	bl	800964c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	3301      	adds	r3, #1
 80091f8:	73fb      	strb	r3, [r7, #15]
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d9ef      	bls.n	80091e0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009200:	4b09      	ldr	r3, [pc, #36]	@ (8009228 <hci_init+0x74>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <hci_init+0x5c>
 8009208:	4b07      	ldr	r3, [pc, #28]	@ (8009228 <hci_init+0x74>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2000      	movs	r0, #0
 800920e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009210:	4b05      	ldr	r3, [pc, #20]	@ (8009228 <hci_init+0x74>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <hci_init+0x6a>
 8009218:	4b03      	ldr	r3, [pc, #12]	@ (8009228 <hci_init+0x74>)
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	4798      	blx	r3
}
 800921e:	bf00      	nop
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20002140 	.word	0x20002140
 800922c:	20001e74 	.word	0x20001e74
 8009230:	20001e7c 	.word	0x20001e7c
 8009234:	20001e84 	.word	0x20001e84

08009238 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a0b      	ldr	r2, [pc, #44]	@ (8009274 <hci_register_io_bus+0x3c>)
 8009246:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	4a09      	ldr	r2, [pc, #36]	@ (8009274 <hci_register_io_bus+0x3c>)
 800924e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	4a07      	ldr	r2, [pc, #28]	@ (8009274 <hci_register_io_bus+0x3c>)
 8009256:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	4a05      	ldr	r2, [pc, #20]	@ (8009274 <hci_register_io_bus+0x3c>)
 800925e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	4a03      	ldr	r2, [pc, #12]	@ (8009274 <hci_register_io_bus+0x3c>)
 8009266:	6093      	str	r3, [r2, #8]
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	20002140 	.word	0x20002140

08009278 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08e      	sub	sp, #56	@ 0x38
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	885b      	ldrh	r3, [r3, #2]
 8009288:	b21b      	sxth	r3, r3
 800928a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800928e:	b21a      	sxth	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b21b      	sxth	r3, r3
 8009296:	029b      	lsls	r3, r3, #10
 8009298:	b21b      	sxth	r3, r3
 800929a:	4313      	orrs	r3, r2
 800929c:	b21b      	sxth	r3, r3
 800929e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80092a4:	f107 0308 	add.w	r3, r7, #8
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f977 	bl	800959c <list_init_head>

  free_event_list();
 80092ae:	f7ff ff63 	bl	8009178 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	8818      	ldrh	r0, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	8859      	ldrh	r1, [r3, #2]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f7ff fefa 	bl	80090bc <send_cmd>
  
  if (async)
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <hci_send_req+0x5a>
  {
    return 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	e0e2      	b.n	8009498 <hci_send_req+0x220>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80092d2:	f7fa fb33 	bl	800393c <HAL_GetTick>
 80092d6:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80092d8:	f7fa fb30 	bl	800393c <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092e6:	f200 80b3 	bhi.w	8009450 <hci_send_req+0x1d8>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80092ea:	486d      	ldr	r0, [pc, #436]	@ (80094a0 <hci_send_req+0x228>)
 80092ec:	f000 f966 	bl	80095bc <list_is_empty>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d000      	beq.n	80092f8 <hci_send_req+0x80>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80092f6:	e7ef      	b.n	80092d8 <hci_send_req+0x60>
      {
        break;
 80092f8:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80092fa:	f107 0310 	add.w	r3, r7, #16
 80092fe:	4619      	mov	r1, r3
 8009300:	4867      	ldr	r0, [pc, #412]	@ (80094a0 <hci_send_req+0x228>)
 8009302:	f000 f9ea 	bl	80096da <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	3308      	adds	r3, #8
 800930a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800930c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b04      	cmp	r3, #4
 8009312:	d17f      	bne.n	8009414 <hci_send_req+0x19c>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009316:	3301      	adds	r3, #1
 8009318:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	3308      	adds	r3, #8
 800931e:	3303      	adds	r3, #3
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009328:	3b03      	subs	r3, #3
 800932a:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b3e      	cmp	r3, #62	@ 0x3e
 8009332:	d04c      	beq.n	80093ce <hci_send_req+0x156>
 8009334:	2b3e      	cmp	r3, #62	@ 0x3e
 8009336:	dc68      	bgt.n	800940a <hci_send_req+0x192>
 8009338:	2b10      	cmp	r3, #16
 800933a:	f000 808b 	beq.w	8009454 <hci_send_req+0x1dc>
 800933e:	2b10      	cmp	r3, #16
 8009340:	dc63      	bgt.n	800940a <hci_send_req+0x192>
 8009342:	2b0e      	cmp	r3, #14
 8009344:	d023      	beq.n	800938e <hci_send_req+0x116>
 8009346:	2b0f      	cmp	r3, #15
 8009348:	d15f      	bne.n	800940a <hci_send_req+0x192>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934c:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	b29b      	uxth	r3, r3
 8009354:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009356:	429a      	cmp	r2, r3
 8009358:	d17e      	bne.n	8009458 <hci_send_req+0x1e0>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2b0f      	cmp	r3, #15
 8009360:	d004      	beq.n	800936c <hci_send_req+0xf4>
          if (cs->status) {
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d051      	beq.n	800940e <hci_send_req+0x196>
            goto failed;
 800936a:	e078      	b.n	800945e <hci_send_req+0x1e6>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	695a      	ldr	r2, [r3, #20]
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	429a      	cmp	r2, r3
 8009374:	bf28      	it	cs
 8009376:	461a      	movcs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6918      	ldr	r0, [r3, #16]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	461a      	mov	r2, r3
 8009386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009388:	f002 fde9 	bl	800bf5e <memcpy>
        goto done;
 800938c:	e078      	b.n	8009480 <hci_send_req+0x208>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009398:	b29b      	uxth	r3, r3
 800939a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800939c:	429a      	cmp	r2, r3
 800939e:	d15d      	bne.n	800945c <hci_send_req+0x1e4>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80093a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a2:	3303      	adds	r3, #3
 80093a4:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	3b03      	subs	r3, #3
 80093aa:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	695a      	ldr	r2, [r3, #20]
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	bf28      	it	cs
 80093b6:	461a      	movcs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6918      	ldr	r0, [r3, #16]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093c8:	f002 fdc9 	bl	800bf5e <memcpy>
        goto done;
 80093cc:	e058      	b.n	8009480 <hci_send_req+0x208>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d118      	bne.n	8009412 <hci_send_req+0x19a>
          break;
      
        len -= 1;
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695a      	ldr	r2, [r3, #20]
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	bf28      	it	cs
 80093f0:	461a      	movcs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6918      	ldr	r0, [r3, #16]
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	1c59      	adds	r1, r3, #1
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	461a      	mov	r2, r3
 8009404:	f002 fdab 	bl	800bf5e <memcpy>
        goto done;
 8009408:	e03a      	b.n	8009480 <hci_send_req+0x208>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800940a:	bf00      	nop
 800940c:	e002      	b.n	8009414 <hci_send_req+0x19c>
          break;
 800940e:	bf00      	nop
 8009410:	e000      	b.n	8009414 <hci_send_req+0x19c>
          break;
 8009412:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009414:	4823      	ldr	r0, [pc, #140]	@ (80094a4 <hci_send_req+0x22c>)
 8009416:	f000 f8d1 	bl	80095bc <list_is_empty>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00d      	beq.n	800943c <hci_send_req+0x1c4>
 8009420:	481f      	ldr	r0, [pc, #124]	@ (80094a0 <hci_send_req+0x228>)
 8009422:	f000 f8cb 	bl	80095bc <list_is_empty>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d007      	beq.n	800943c <hci_send_req+0x1c4>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4619      	mov	r1, r3
 8009430:	481c      	ldr	r0, [pc, #112]	@ (80094a4 <hci_send_req+0x22c>)
 8009432:	f000 f90b 	bl	800964c <list_insert_tail>
      hciReadPacket=NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	613b      	str	r3, [r7, #16]
 800943a:	e008      	b.n	800944e <hci_send_req+0x1d6>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	f107 0308 	add.w	r3, r7, #8
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f901 	bl	800964c <list_insert_tail>
      hciReadPacket=NULL;
 800944a:	2300      	movs	r3, #0
 800944c:	613b      	str	r3, [r7, #16]
  {
 800944e:	e740      	b.n	80092d2 <hci_send_req+0x5a>
        goto failed;
 8009450:	bf00      	nop
 8009452:	e004      	b.n	800945e <hci_send_req+0x1e6>
        goto failed;
 8009454:	bf00      	nop
 8009456:	e002      	b.n	800945e <hci_send_req+0x1e6>
          goto failed;
 8009458:	bf00      	nop
 800945a:	e000      	b.n	800945e <hci_send_req+0x1e6>
          goto failed;
 800945c:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d004      	beq.n	800946e <hci_send_req+0x1f6>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	4619      	mov	r1, r3
 8009468:	480e      	ldr	r0, [pc, #56]	@ (80094a4 <hci_send_req+0x22c>)
 800946a:	f000 f8c9 	bl	8009600 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800946e:	f107 0308 	add.w	r3, r7, #8
 8009472:	4619      	mov	r1, r3
 8009474:	480a      	ldr	r0, [pc, #40]	@ (80094a0 <hci_send_req+0x228>)
 8009476:	f7ff fe63 	bl	8009140 <move_list>

  return -1;
 800947a:	f04f 33ff 	mov.w	r3, #4294967295
 800947e:	e00b      	b.n	8009498 <hci_send_req+0x220>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	4619      	mov	r1, r3
 8009484:	4807      	ldr	r0, [pc, #28]	@ (80094a4 <hci_send_req+0x22c>)
 8009486:	f000 f8bb 	bl	8009600 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	4619      	mov	r1, r3
 8009490:	4803      	ldr	r0, [pc, #12]	@ (80094a0 <hci_send_req+0x228>)
 8009492:	f7ff fe55 	bl	8009140 <move_list>

  return 0;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3738      	adds	r7, #56	@ 0x38
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20001e7c 	.word	0x20001e7c
 80094a4:	20001e74 	.word	0x20001e74

080094a8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80094b2:	e013      	b.n	80094dc <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	480e      	ldr	r0, [pc, #56]	@ (80094f4 <hci_user_evt_proc+0x4c>)
 80094ba:	f000 f90e 	bl	80096da <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80094be:	4b0e      	ldr	r3, [pc, #56]	@ (80094f8 <hci_user_evt_proc+0x50>)
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80094c6:	4b0c      	ldr	r3, [pc, #48]	@ (80094f8 <hci_user_evt_proc+0x50>)
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	3208      	adds	r2, #8
 80094ce:	4610      	mov	r0, r2
 80094d0:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4619      	mov	r1, r3
 80094d6:	4809      	ldr	r0, [pc, #36]	@ (80094fc <hci_user_evt_proc+0x54>)
 80094d8:	f000 f8b8 	bl	800964c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80094dc:	4805      	ldr	r0, [pc, #20]	@ (80094f4 <hci_user_evt_proc+0x4c>)
 80094de:	f000 f86d 	bl	80095bc <list_is_empty>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0e5      	beq.n	80094b4 <hci_user_evt_proc+0xc>
  }
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20001e7c 	.word	0x20001e7c
 80094f8:	20002140 	.word	0x20002140
 80094fc:	20001e74 	.word	0x20001e74

08009500 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009510:	481f      	ldr	r0, [pc, #124]	@ (8009590 <hci_notify_asynch_evt+0x90>)
 8009512:	f000 f853 	bl	80095bc <list_is_empty>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d132      	bne.n	8009582 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	4619      	mov	r1, r3
 8009522:	481b      	ldr	r0, [pc, #108]	@ (8009590 <hci_notify_asynch_evt+0x90>)
 8009524:	f000 f8d9 	bl	80096da <list_remove_head>
    
    if (hciContext.io.Receive)
 8009528:	4b1a      	ldr	r3, [pc, #104]	@ (8009594 <hci_notify_asynch_evt+0x94>)
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d02a      	beq.n	8009586 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009530:	4b18      	ldr	r3, [pc, #96]	@ (8009594 <hci_notify_asynch_evt+0x94>)
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	3208      	adds	r2, #8
 8009538:	2180      	movs	r1, #128	@ 0x80
 800953a:	4610      	mov	r0, r2
 800953c:	4798      	blx	r3
 800953e:	4603      	mov	r3, r0
 8009540:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009542:	7cfb      	ldrb	r3, [r7, #19]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d016      	beq.n	8009576 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	7cfa      	ldrb	r2, [r7, #19]
 800954c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff fd92 	bl	800907c <verify_packet>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4619      	mov	r1, r3
 8009562:	480d      	ldr	r0, [pc, #52]	@ (8009598 <hci_notify_asynch_evt+0x98>)
 8009564:	f000 f872 	bl	800964c <list_insert_tail>
 8009568:	e00d      	b.n	8009586 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4619      	mov	r1, r3
 800956e:	4808      	ldr	r0, [pc, #32]	@ (8009590 <hci_notify_asynch_evt+0x90>)
 8009570:	f000 f846 	bl	8009600 <list_insert_head>
 8009574:	e007      	b.n	8009586 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4619      	mov	r1, r3
 800957a:	4805      	ldr	r0, [pc, #20]	@ (8009590 <hci_notify_asynch_evt+0x90>)
 800957c:	f000 f840 	bl	8009600 <list_insert_head>
 8009580:	e001      	b.n	8009586 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009582:	2301      	movs	r3, #1
 8009584:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009586:	697b      	ldr	r3, [r7, #20]

}
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20001e74 	.word	0x20001e74
 8009594:	20002140 	.word	0x20002140
 8009598:	20001e7c 	.word	0x20001e7c

0800959c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	605a      	str	r2, [r3, #4]
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095c4:	f3ef 8310 	mrs	r3, PRIMASK
 80095c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80095ca:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80095ce:	b672      	cpsid	i
}
 80095d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d102      	bne.n	80095e2 <list_is_empty+0x26>
  {
    return_value = 1;
 80095dc:	2301      	movs	r3, #1
 80095de:	75fb      	strb	r3, [r7, #23]
 80095e0:	e001      	b.n	80095e6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75fb      	strb	r3, [r7, #23]
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f383 8810 	msr	PRIMASK, r3
}
 80095f0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800960a:	f3ef 8310 	mrs	r3, PRIMASK
 800960e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009610:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009614:	b672      	cpsid	i
}
 8009616:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	605a      	str	r2, [r3, #4]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	f383 8810 	msr	PRIMASK, r3
}
 800963e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009656:	f3ef 8310 	mrs	r3, PRIMASK
 800965a:	60fb      	str	r3, [r7, #12]
  return(result);
 800965c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800965e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009660:	b672      	cpsid	i
}
 8009662:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f383 8810 	msr	PRIMASK, r3
}
 800968a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800968c:	bf00      	nop
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096a0:	f3ef 8310 	mrs	r3, PRIMASK
 80096a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80096a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096aa:	b672      	cpsid	i
}
 80096ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	6852      	ldr	r2, [r2, #4]
 80096c0:	605a      	str	r2, [r3, #4]
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f383 8810 	msr	PRIMASK, r3
}
 80096cc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80096ce:	bf00      	nop
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b086      	sub	sp, #24
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096e4:	f3ef 8310 	mrs	r3, PRIMASK
 80096e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80096ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096ee:	b672      	cpsid	i
}
 80096f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff ffca 	bl	8009698 <list_remove_node>
  (*node)->next = NULL;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2200      	movs	r2, #0
 8009712:	605a      	str	r2, [r3, #4]
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f383 8810 	msr	PRIMASK, r3
}
 800971e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009720:	bf00      	nop
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009732:	f3ef 8310 	mrs	r3, PRIMASK
 8009736:	60fb      	str	r3, [r7, #12]
  return(result);
 8009738:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800973a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800973c:	b672      	cpsid	i
}
 800973e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	4618      	mov	r0, r3
 800974e:	f7ff ffa3 	bl	8009698 <list_remove_node>
  (*node)->next = NULL;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2200      	movs	r2, #0
 8009760:	605a      	str	r2, [r3, #4]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	f383 8810 	msr	PRIMASK, r3
}
 800976c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800976e:	bf00      	nop
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009776:	b480      	push	{r7}
 8009778:	b089      	sub	sp, #36	@ 0x24
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009782:	f3ef 8310 	mrs	r3, PRIMASK
 8009786:	613b      	str	r3, [r7, #16]
  return(result);
 8009788:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800978a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800978c:	b672      	cpsid	i
}
 800978e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009796:	e005      	b.n	80097a4 <list_get_size+0x2e>
  {
    size++;
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	3301      	adds	r3, #1
 800979c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d1f5      	bne.n	8009798 <list_get_size+0x22>
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f383 8810 	msr	PRIMASK, r3
}
 80097b6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80097b8:	69fb      	ldr	r3, [r7, #28]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3724      	adds	r7, #36	@ 0x24
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b085      	sub	sp, #20
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	4603      	mov	r3, r0
 80097ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80097d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097d8:	2b84      	cmp	r3, #132	@ 0x84
 80097da:	d005      	beq.n	80097e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80097dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	3303      	adds	r3, #3
 80097e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80097e8:	68fb      	ldr	r3, [r7, #12]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097fa:	f000 fae5 	bl	8009dc8 <vTaskStartScheduler>
  
  return osOK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	bd80      	pop	{r7, pc}

08009804 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009806:	b089      	sub	sp, #36	@ 0x24
 8009808:	af04      	add	r7, sp, #16
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d020      	beq.n	8009858 <osThreadCreate+0x54>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d01c      	beq.n	8009858 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685c      	ldr	r4, [r3, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691e      	ldr	r6, [r3, #16]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ffc8 	bl	80097c6 <makeFreeRtosPriority>
 8009836:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009840:	9202      	str	r2, [sp, #8]
 8009842:	9301      	str	r3, [sp, #4]
 8009844:	9100      	str	r1, [sp, #0]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	4632      	mov	r2, r6
 800984a:	4629      	mov	r1, r5
 800984c:	4620      	mov	r0, r4
 800984e:	f000 f8ed 	bl	8009a2c <xTaskCreateStatic>
 8009852:	4603      	mov	r3, r0
 8009854:	60fb      	str	r3, [r7, #12]
 8009856:	e01c      	b.n	8009892 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685c      	ldr	r4, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009864:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800986c:	4618      	mov	r0, r3
 800986e:	f7ff ffaa 	bl	80097c6 <makeFreeRtosPriority>
 8009872:	4602      	mov	r2, r0
 8009874:	f107 030c 	add.w	r3, r7, #12
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	9200      	str	r2, [sp, #0]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	4632      	mov	r2, r6
 8009880:	4629      	mov	r1, r5
 8009882:	4620      	mov	r0, r4
 8009884:	f000 f932 	bl	8009aec <xTaskCreate>
 8009888:	4603      	mov	r3, r0
 800988a:	2b01      	cmp	r3, #1
 800988c:	d001      	beq.n	8009892 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800988e:	2300      	movs	r3, #0
 8009890:	e000      	b.n	8009894 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009892:	68fb      	ldr	r3, [r7, #12]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800989c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <osDelay+0x16>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	e000      	b.n	80098b4 <osDelay+0x18>
 80098b2:	2301      	movs	r3, #1
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 fa51 	bl	8009d5c <vTaskDelay>
  
  return osOK;
 80098ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f103 0208 	add.w	r2, r3, #8
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f04f 32ff 	mov.w	r2, #4294967295
 80098dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f103 0208 	add.w	r2, r3, #8
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f103 0208 	add.w	r2, r3, #8
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800991e:	b480      	push	{r7}
 8009920:	b085      	sub	sp, #20
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	601a      	str	r2, [r3, #0]
}
 800995a:	bf00      	nop
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009966:	b480      	push	{r7}
 8009968:	b085      	sub	sp, #20
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997c:	d103      	bne.n	8009986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	e00c      	b.n	80099a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3308      	adds	r3, #8
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	e002      	b.n	8009994 <vListInsert+0x2e>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	429a      	cmp	r2, r3
 800999e:	d2f6      	bcs.n	800998e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	601a      	str	r2, [r3, #0]
}
 80099cc:	bf00      	nop
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	6892      	ldr	r2, [r2, #8]
 80099ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6852      	ldr	r2, [r2, #4]
 80099f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d103      	bne.n	8009a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689a      	ldr	r2, [r3, #8]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	1e5a      	subs	r2, r3, #1
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08e      	sub	sp, #56	@ 0x38
 8009a30:	af04      	add	r7, sp, #16
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	e7fd      	b.n	8009a54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	61fb      	str	r3, [r7, #28]
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	e7fd      	b.n	8009a72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a76:	2354      	movs	r3, #84	@ 0x54
 8009a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2b54      	cmp	r3, #84	@ 0x54
 8009a7e:	d00b      	beq.n	8009a98 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	61bb      	str	r3, [r7, #24]
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	e7fd      	b.n	8009a94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d01e      	beq.n	8009ade <xTaskCreateStatic+0xb2>
 8009aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d01b      	beq.n	8009ade <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009aae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9303      	str	r3, [sp, #12]
 8009abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abe:	9302      	str	r3, [sp, #8]
 8009ac0:	f107 0314 	add.w	r3, r7, #20
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 f850 	bl	8009b76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ad6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009ad8:	f000 f8d6 	bl	8009c88 <prvAddNewTaskToReadyList>
 8009adc:	e001      	b.n	8009ae2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ae2:	697b      	ldr	r3, [r7, #20]
	}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3728      	adds	r7, #40	@ 0x28
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08c      	sub	sp, #48	@ 0x30
 8009af0:	af04      	add	r7, sp, #16
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	4613      	mov	r3, r2
 8009afa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009afc:	88fb      	ldrh	r3, [r7, #6]
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fef1 	bl	800a8e8 <pvPortMalloc>
 8009b06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00e      	beq.n	8009b2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b0e:	2054      	movs	r0, #84	@ 0x54
 8009b10:	f000 feea 	bl	800a8e8 <pvPortMalloc>
 8009b14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b22:	e005      	b.n	8009b30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b24:	6978      	ldr	r0, [r7, #20]
 8009b26:	f000 ffad 	bl	800aa84 <vPortFree>
 8009b2a:	e001      	b.n	8009b30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d017      	beq.n	8009b66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b3e:	88fa      	ldrh	r2, [r7, #6]
 8009b40:	2300      	movs	r3, #0
 8009b42:	9303      	str	r3, [sp, #12]
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	9302      	str	r3, [sp, #8]
 8009b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 f80e 	bl	8009b76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b5a:	69f8      	ldr	r0, [r7, #28]
 8009b5c:	f000 f894 	bl	8009c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b60:	2301      	movs	r3, #1
 8009b62:	61bb      	str	r3, [r7, #24]
 8009b64:	e002      	b.n	8009b6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b6c:	69bb      	ldr	r3, [r7, #24]
	}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3720      	adds	r7, #32
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b088      	sub	sp, #32
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	60f8      	str	r0, [r7, #12]
 8009b7e:	60b9      	str	r1, [r7, #8]
 8009b80:	607a      	str	r2, [r7, #4]
 8009b82:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f023 0307 	bic.w	r3, r3, #7
 8009b9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	f003 0307 	and.w	r3, r3, #7
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	617b      	str	r3, [r7, #20]
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d01f      	beq.n	8009c06 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61fb      	str	r3, [r7, #28]
 8009bca:	e012      	b.n	8009bf2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	7819      	ldrb	r1, [r3, #0]
 8009bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	4413      	add	r3, r2
 8009bda:	3334      	adds	r3, #52	@ 0x34
 8009bdc:	460a      	mov	r2, r1
 8009bde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	4413      	add	r3, r2
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d006      	beq.n	8009bfa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	2b0f      	cmp	r3, #15
 8009bf6:	d9e9      	bls.n	8009bcc <prvInitialiseNewTask+0x56>
 8009bf8:	e000      	b.n	8009bfc <prvInitialiseNewTask+0x86>
			{
				break;
 8009bfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c04:	e003      	b.n	8009c0e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c10:	2b06      	cmp	r3, #6
 8009c12:	d901      	bls.n	8009c18 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c14:	2306      	movs	r3, #6
 8009c16:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c22:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	2200      	movs	r2, #0
 8009c28:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7ff fe68 	bl	8009904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	3318      	adds	r3, #24
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff fe63 	bl	8009904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c46:	f1c3 0207 	rsb	r2, r3, #7
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c52:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c56:	2200      	movs	r2, #0
 8009c58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	68f9      	ldr	r1, [r7, #12]
 8009c66:	69b8      	ldr	r0, [r7, #24]
 8009c68:	f000 fc2c 	bl	800a4c4 <pxPortInitialiseStack>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c7e:	bf00      	nop
 8009c80:	3720      	adds	r7, #32
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c90:	f000 fd4a 	bl	800a728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c94:	4b2a      	ldr	r3, [pc, #168]	@ (8009d40 <prvAddNewTaskToReadyList+0xb8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	4a29      	ldr	r2, [pc, #164]	@ (8009d40 <prvAddNewTaskToReadyList+0xb8>)
 8009c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c9e:	4b29      	ldr	r3, [pc, #164]	@ (8009d44 <prvAddNewTaskToReadyList+0xbc>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d109      	bne.n	8009cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ca6:	4a27      	ldr	r2, [pc, #156]	@ (8009d44 <prvAddNewTaskToReadyList+0xbc>)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cac:	4b24      	ldr	r3, [pc, #144]	@ (8009d40 <prvAddNewTaskToReadyList+0xb8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d110      	bne.n	8009cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cb4:	f000 fac4 	bl	800a240 <prvInitialiseTaskLists>
 8009cb8:	e00d      	b.n	8009cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cba:	4b23      	ldr	r3, [pc, #140]	@ (8009d48 <prvAddNewTaskToReadyList+0xc0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d109      	bne.n	8009cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cc2:	4b20      	ldr	r3, [pc, #128]	@ (8009d44 <prvAddNewTaskToReadyList+0xbc>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d802      	bhi.n	8009cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8009d44 <prvAddNewTaskToReadyList+0xbc>)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8009d4c <prvAddNewTaskToReadyList+0xc4>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8009d4c <prvAddNewTaskToReadyList+0xc4>)
 8009cde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	409a      	lsls	r2, r3
 8009ce8:	4b19      	ldr	r3, [pc, #100]	@ (8009d50 <prvAddNewTaskToReadyList+0xc8>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	4a18      	ldr	r2, [pc, #96]	@ (8009d50 <prvAddNewTaskToReadyList+0xc8>)
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4a15      	ldr	r2, [pc, #84]	@ (8009d54 <prvAddNewTaskToReadyList+0xcc>)
 8009d00:	441a      	add	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3304      	adds	r3, #4
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f7ff fe08 	bl	800991e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d0e:	f000 fd3d 	bl	800a78c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d12:	4b0d      	ldr	r3, [pc, #52]	@ (8009d48 <prvAddNewTaskToReadyList+0xc0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00e      	beq.n	8009d38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d44 <prvAddNewTaskToReadyList+0xbc>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d207      	bcs.n	8009d38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d28:	4b0b      	ldr	r3, [pc, #44]	@ (8009d58 <prvAddNewTaskToReadyList+0xd0>)
 8009d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d38:	bf00      	nop
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20002260 	.word	0x20002260
 8009d44:	20002160 	.word	0x20002160
 8009d48:	2000226c 	.word	0x2000226c
 8009d4c:	2000227c 	.word	0x2000227c
 8009d50:	20002268 	.word	0x20002268
 8009d54:	20002164 	.word	0x20002164
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d64:	2300      	movs	r3, #0
 8009d66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d018      	beq.n	8009da0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d6e:	4b14      	ldr	r3, [pc, #80]	@ (8009dc0 <vTaskDelay+0x64>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00b      	beq.n	8009d8e <vTaskDelay+0x32>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60bb      	str	r3, [r7, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d8e:	f000 f87d 	bl	8009e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d92:	2100      	movs	r1, #0
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fb2f 	bl	800a3f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d9a:	f000 f885 	bl	8009ea8 <xTaskResumeAll>
 8009d9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d107      	bne.n	8009db6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009da6:	4b07      	ldr	r3, [pc, #28]	@ (8009dc4 <vTaskDelay+0x68>)
 8009da8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20002288 	.word	0x20002288
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	@ 0x28
 8009dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dd6:	463a      	mov	r2, r7
 8009dd8:	1d39      	adds	r1, r7, #4
 8009dda:	f107 0308 	add.w	r3, r7, #8
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7f8 f84c 	bl	8001e7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	9202      	str	r2, [sp, #8]
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	2300      	movs	r3, #0
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	2300      	movs	r3, #0
 8009df4:	460a      	mov	r2, r1
 8009df6:	491f      	ldr	r1, [pc, #124]	@ (8009e74 <vTaskStartScheduler+0xac>)
 8009df8:	481f      	ldr	r0, [pc, #124]	@ (8009e78 <vTaskStartScheduler+0xb0>)
 8009dfa:	f7ff fe17 	bl	8009a2c <xTaskCreateStatic>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	4a1e      	ldr	r2, [pc, #120]	@ (8009e7c <vTaskStartScheduler+0xb4>)
 8009e02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e04:	4b1d      	ldr	r3, [pc, #116]	@ (8009e7c <vTaskStartScheduler+0xb4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	e001      	b.n	8009e16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d116      	bne.n	8009e4a <vTaskStartScheduler+0x82>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	613b      	str	r3, [r7, #16]
}
 8009e2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e30:	4b13      	ldr	r3, [pc, #76]	@ (8009e80 <vTaskStartScheduler+0xb8>)
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295
 8009e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e38:	4b12      	ldr	r3, [pc, #72]	@ (8009e84 <vTaskStartScheduler+0xbc>)
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e3e:	4b12      	ldr	r3, [pc, #72]	@ (8009e88 <vTaskStartScheduler+0xc0>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e44:	f000 fbcc 	bl	800a5e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e48:	e00f      	b.n	8009e6a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e50:	d10b      	bne.n	8009e6a <vTaskStartScheduler+0xa2>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	60fb      	str	r3, [r7, #12]
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	e7fd      	b.n	8009e66 <vTaskStartScheduler+0x9e>
}
 8009e6a:	bf00      	nop
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	0800f8c8 	.word	0x0800f8c8
 8009e78:	0800a211 	.word	0x0800a211
 8009e7c:	20002284 	.word	0x20002284
 8009e80:	20002280 	.word	0x20002280
 8009e84:	2000226c 	.word	0x2000226c
 8009e88:	20002264 	.word	0x20002264

08009e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e90:	4b04      	ldr	r3, [pc, #16]	@ (8009ea4 <vTaskSuspendAll+0x18>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3301      	adds	r3, #1
 8009e96:	4a03      	ldr	r2, [pc, #12]	@ (8009ea4 <vTaskSuspendAll+0x18>)
 8009e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e9a:	bf00      	nop
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	20002288 	.word	0x20002288

08009ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009eb6:	4b42      	ldr	r3, [pc, #264]	@ (8009fc0 <xTaskResumeAll+0x118>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10b      	bne.n	8009ed6 <xTaskResumeAll+0x2e>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	603b      	str	r3, [r7, #0]
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	e7fd      	b.n	8009ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ed6:	f000 fc27 	bl	800a728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009eda:	4b39      	ldr	r3, [pc, #228]	@ (8009fc0 <xTaskResumeAll+0x118>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	4a37      	ldr	r2, [pc, #220]	@ (8009fc0 <xTaskResumeAll+0x118>)
 8009ee2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ee4:	4b36      	ldr	r3, [pc, #216]	@ (8009fc0 <xTaskResumeAll+0x118>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d161      	bne.n	8009fb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009eec:	4b35      	ldr	r3, [pc, #212]	@ (8009fc4 <xTaskResumeAll+0x11c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d05d      	beq.n	8009fb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ef4:	e02e      	b.n	8009f54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef6:	4b34      	ldr	r3, [pc, #208]	@ (8009fc8 <xTaskResumeAll+0x120>)
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3318      	adds	r3, #24
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff fd68 	bl	80099d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff fd63 	bl	80099d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f16:	2201      	movs	r2, #1
 8009f18:	409a      	lsls	r2, r3
 8009f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009fcc <xTaskResumeAll+0x124>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	4a2a      	ldr	r2, [pc, #168]	@ (8009fcc <xTaskResumeAll+0x124>)
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4a27      	ldr	r2, [pc, #156]	@ (8009fd0 <xTaskResumeAll+0x128>)
 8009f32:	441a      	add	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3304      	adds	r3, #4
 8009f38:	4619      	mov	r1, r3
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	f7ff fcef 	bl	800991e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f44:	4b23      	ldr	r3, [pc, #140]	@ (8009fd4 <xTaskResumeAll+0x12c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d302      	bcc.n	8009f54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f4e:	4b22      	ldr	r3, [pc, #136]	@ (8009fd8 <xTaskResumeAll+0x130>)
 8009f50:	2201      	movs	r2, #1
 8009f52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f54:	4b1c      	ldr	r3, [pc, #112]	@ (8009fc8 <xTaskResumeAll+0x120>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1cc      	bne.n	8009ef6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f62:	f000 fa0b 	bl	800a37c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f66:	4b1d      	ldr	r3, [pc, #116]	@ (8009fdc <xTaskResumeAll+0x134>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d010      	beq.n	8009f94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f72:	f000 f837 	bl	8009fe4 <xTaskIncrementTick>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f7c:	4b16      	ldr	r3, [pc, #88]	@ (8009fd8 <xTaskResumeAll+0x130>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1f1      	bne.n	8009f72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f8e:	4b13      	ldr	r3, [pc, #76]	@ (8009fdc <xTaskResumeAll+0x134>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f94:	4b10      	ldr	r3, [pc, #64]	@ (8009fd8 <xTaskResumeAll+0x130>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d009      	beq.n	8009fb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe0 <xTaskResumeAll+0x138>)
 8009fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fb0:	f000 fbec 	bl	800a78c <vPortExitCritical>

	return xAlreadyYielded;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20002288 	.word	0x20002288
 8009fc4:	20002260 	.word	0x20002260
 8009fc8:	20002220 	.word	0x20002220
 8009fcc:	20002268 	.word	0x20002268
 8009fd0:	20002164 	.word	0x20002164
 8009fd4:	20002160 	.word	0x20002160
 8009fd8:	20002274 	.word	0x20002274
 8009fdc:	20002270 	.word	0x20002270
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009fea:	2300      	movs	r3, #0
 8009fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fee:	4b4f      	ldr	r3, [pc, #316]	@ (800a12c <xTaskIncrementTick+0x148>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f040 808f 	bne.w	800a116 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ff8:	4b4d      	ldr	r3, [pc, #308]	@ (800a130 <xTaskIncrementTick+0x14c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a000:	4a4b      	ldr	r2, [pc, #300]	@ (800a130 <xTaskIncrementTick+0x14c>)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d121      	bne.n	800a050 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a00c:	4b49      	ldr	r3, [pc, #292]	@ (800a134 <xTaskIncrementTick+0x150>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00b      	beq.n	800a02e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	603b      	str	r3, [r7, #0]
}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	e7fd      	b.n	800a02a <xTaskIncrementTick+0x46>
 800a02e:	4b41      	ldr	r3, [pc, #260]	@ (800a134 <xTaskIncrementTick+0x150>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	4b40      	ldr	r3, [pc, #256]	@ (800a138 <xTaskIncrementTick+0x154>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a3e      	ldr	r2, [pc, #248]	@ (800a134 <xTaskIncrementTick+0x150>)
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	4a3e      	ldr	r2, [pc, #248]	@ (800a138 <xTaskIncrementTick+0x154>)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	4b3e      	ldr	r3, [pc, #248]	@ (800a13c <xTaskIncrementTick+0x158>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3301      	adds	r3, #1
 800a048:	4a3c      	ldr	r2, [pc, #240]	@ (800a13c <xTaskIncrementTick+0x158>)
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	f000 f996 	bl	800a37c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a050:	4b3b      	ldr	r3, [pc, #236]	@ (800a140 <xTaskIncrementTick+0x15c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	429a      	cmp	r2, r3
 800a058:	d348      	bcc.n	800a0ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a05a:	4b36      	ldr	r3, [pc, #216]	@ (800a134 <xTaskIncrementTick+0x150>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d104      	bne.n	800a06e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a064:	4b36      	ldr	r3, [pc, #216]	@ (800a140 <xTaskIncrementTick+0x15c>)
 800a066:	f04f 32ff 	mov.w	r2, #4294967295
 800a06a:	601a      	str	r2, [r3, #0]
					break;
 800a06c:	e03e      	b.n	800a0ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a06e:	4b31      	ldr	r3, [pc, #196]	@ (800a134 <xTaskIncrementTick+0x150>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d203      	bcs.n	800a08e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a086:	4a2e      	ldr	r2, [pc, #184]	@ (800a140 <xTaskIncrementTick+0x15c>)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a08c:	e02e      	b.n	800a0ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	3304      	adds	r3, #4
 800a092:	4618      	mov	r0, r3
 800a094:	f7ff fca0 	bl	80099d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d004      	beq.n	800a0aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	3318      	adds	r3, #24
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fc97 	bl	80099d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	409a      	lsls	r2, r3
 800a0b2:	4b24      	ldr	r3, [pc, #144]	@ (800a144 <xTaskIncrementTick+0x160>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	4a22      	ldr	r2, [pc, #136]	@ (800a144 <xTaskIncrementTick+0x160>)
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4a1f      	ldr	r2, [pc, #124]	@ (800a148 <xTaskIncrementTick+0x164>)
 800a0ca:	441a      	add	r2, r3
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7ff fc23 	bl	800991e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0dc:	4b1b      	ldr	r3, [pc, #108]	@ (800a14c <xTaskIncrementTick+0x168>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d3b9      	bcc.n	800a05a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ea:	e7b6      	b.n	800a05a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0ec:	4b17      	ldr	r3, [pc, #92]	@ (800a14c <xTaskIncrementTick+0x168>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f2:	4915      	ldr	r1, [pc, #84]	@ (800a148 <xTaskIncrementTick+0x164>)
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	440b      	add	r3, r1
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d901      	bls.n	800a108 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a104:	2301      	movs	r3, #1
 800a106:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a108:	4b11      	ldr	r3, [pc, #68]	@ (800a150 <xTaskIncrementTick+0x16c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	e004      	b.n	800a120 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a116:	4b0f      	ldr	r3, [pc, #60]	@ (800a154 <xTaskIncrementTick+0x170>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3301      	adds	r3, #1
 800a11c:	4a0d      	ldr	r2, [pc, #52]	@ (800a154 <xTaskIncrementTick+0x170>)
 800a11e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a120:	697b      	ldr	r3, [r7, #20]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20002288 	.word	0x20002288
 800a130:	20002264 	.word	0x20002264
 800a134:	20002218 	.word	0x20002218
 800a138:	2000221c 	.word	0x2000221c
 800a13c:	20002278 	.word	0x20002278
 800a140:	20002280 	.word	0x20002280
 800a144:	20002268 	.word	0x20002268
 800a148:	20002164 	.word	0x20002164
 800a14c:	20002160 	.word	0x20002160
 800a150:	20002274 	.word	0x20002274
 800a154:	20002270 	.word	0x20002270

0800a158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a15e:	4b27      	ldr	r3, [pc, #156]	@ (800a1fc <vTaskSwitchContext+0xa4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a166:	4b26      	ldr	r3, [pc, #152]	@ (800a200 <vTaskSwitchContext+0xa8>)
 800a168:	2201      	movs	r2, #1
 800a16a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a16c:	e040      	b.n	800a1f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a16e:	4b24      	ldr	r3, [pc, #144]	@ (800a200 <vTaskSwitchContext+0xa8>)
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a174:	4b23      	ldr	r3, [pc, #140]	@ (800a204 <vTaskSwitchContext+0xac>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	fab3 f383 	clz	r3, r3
 800a180:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a182:	7afb      	ldrb	r3, [r7, #11]
 800a184:	f1c3 031f 	rsb	r3, r3, #31
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	491f      	ldr	r1, [pc, #124]	@ (800a208 <vTaskSwitchContext+0xb0>)
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	4613      	mov	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	440b      	add	r3, r1
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10b      	bne.n	800a1b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	e7fd      	b.n	800a1b2 <vTaskSwitchContext+0x5a>
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4a11      	ldr	r2, [pc, #68]	@ (800a208 <vTaskSwitchContext+0xb0>)
 800a1c2:	4413      	add	r3, r2
 800a1c4:	613b      	str	r3, [r7, #16]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	605a      	str	r2, [r3, #4]
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d104      	bne.n	800a1e6 <vTaskSwitchContext+0x8e>
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	605a      	str	r2, [r3, #4]
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	4a07      	ldr	r2, [pc, #28]	@ (800a20c <vTaskSwitchContext+0xb4>)
 800a1ee:	6013      	str	r3, [r2, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	371c      	adds	r7, #28
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	20002288 	.word	0x20002288
 800a200:	20002274 	.word	0x20002274
 800a204:	20002268 	.word	0x20002268
 800a208:	20002164 	.word	0x20002164
 800a20c:	20002160 	.word	0x20002160

0800a210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a218:	f000 f852 	bl	800a2c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a21c:	4b06      	ldr	r3, [pc, #24]	@ (800a238 <prvIdleTask+0x28>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d9f9      	bls.n	800a218 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a224:	4b05      	ldr	r3, [pc, #20]	@ (800a23c <prvIdleTask+0x2c>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a234:	e7f0      	b.n	800a218 <prvIdleTask+0x8>
 800a236:	bf00      	nop
 800a238:	20002164 	.word	0x20002164
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a246:	2300      	movs	r3, #0
 800a248:	607b      	str	r3, [r7, #4]
 800a24a:	e00c      	b.n	800a266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4613      	mov	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4a12      	ldr	r2, [pc, #72]	@ (800a2a0 <prvInitialiseTaskLists+0x60>)
 800a258:	4413      	add	r3, r2
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7ff fb32 	bl	80098c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3301      	adds	r3, #1
 800a264:	607b      	str	r3, [r7, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b06      	cmp	r3, #6
 800a26a:	d9ef      	bls.n	800a24c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a26c:	480d      	ldr	r0, [pc, #52]	@ (800a2a4 <prvInitialiseTaskLists+0x64>)
 800a26e:	f7ff fb29 	bl	80098c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a272:	480d      	ldr	r0, [pc, #52]	@ (800a2a8 <prvInitialiseTaskLists+0x68>)
 800a274:	f7ff fb26 	bl	80098c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a278:	480c      	ldr	r0, [pc, #48]	@ (800a2ac <prvInitialiseTaskLists+0x6c>)
 800a27a:	f7ff fb23 	bl	80098c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a27e:	480c      	ldr	r0, [pc, #48]	@ (800a2b0 <prvInitialiseTaskLists+0x70>)
 800a280:	f7ff fb20 	bl	80098c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a284:	480b      	ldr	r0, [pc, #44]	@ (800a2b4 <prvInitialiseTaskLists+0x74>)
 800a286:	f7ff fb1d 	bl	80098c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a28a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b8 <prvInitialiseTaskLists+0x78>)
 800a28c:	4a05      	ldr	r2, [pc, #20]	@ (800a2a4 <prvInitialiseTaskLists+0x64>)
 800a28e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a290:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <prvInitialiseTaskLists+0x7c>)
 800a292:	4a05      	ldr	r2, [pc, #20]	@ (800a2a8 <prvInitialiseTaskLists+0x68>)
 800a294:	601a      	str	r2, [r3, #0]
}
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20002164 	.word	0x20002164
 800a2a4:	200021f0 	.word	0x200021f0
 800a2a8:	20002204 	.word	0x20002204
 800a2ac:	20002220 	.word	0x20002220
 800a2b0:	20002234 	.word	0x20002234
 800a2b4:	2000224c 	.word	0x2000224c
 800a2b8:	20002218 	.word	0x20002218
 800a2bc:	2000221c 	.word	0x2000221c

0800a2c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2c6:	e019      	b.n	800a2fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2c8:	f000 fa2e 	bl	800a728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2cc:	4b10      	ldr	r3, [pc, #64]	@ (800a310 <prvCheckTasksWaitingTermination+0x50>)
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff fb7d 	bl	80099d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2de:	4b0d      	ldr	r3, [pc, #52]	@ (800a314 <prvCheckTasksWaitingTermination+0x54>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	4a0b      	ldr	r2, [pc, #44]	@ (800a314 <prvCheckTasksWaitingTermination+0x54>)
 800a2e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a318 <prvCheckTasksWaitingTermination+0x58>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	4a0a      	ldr	r2, [pc, #40]	@ (800a318 <prvCheckTasksWaitingTermination+0x58>)
 800a2f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2f2:	f000 fa4b 	bl	800a78c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f810 	bl	800a31c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2fc:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <prvCheckTasksWaitingTermination+0x58>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e1      	bne.n	800a2c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20002234 	.word	0x20002234
 800a314:	20002260 	.word	0x20002260
 800a318:	20002248 	.word	0x20002248

0800a31c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d108      	bne.n	800a340 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fba6 	bl	800aa84 <vPortFree>
				vPortFree( pxTCB );
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fba3 	bl	800aa84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a33e:	e019      	b.n	800a374 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a346:	2b01      	cmp	r3, #1
 800a348:	d103      	bne.n	800a352 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fb9a 	bl	800aa84 <vPortFree>
	}
 800a350:	e010      	b.n	800a374 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d00b      	beq.n	800a374 <prvDeleteTCB+0x58>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	60fb      	str	r3, [r7, #12]
}
 800a36e:	bf00      	nop
 800a370:	bf00      	nop
 800a372:	e7fd      	b.n	800a370 <prvDeleteTCB+0x54>
	}
 800a374:	bf00      	nop
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a382:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b4 <prvResetNextTaskUnblockTime+0x38>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d104      	bne.n	800a396 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a38c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b8 <prvResetNextTaskUnblockTime+0x3c>)
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295
 800a392:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a394:	e008      	b.n	800a3a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a396:	4b07      	ldr	r3, [pc, #28]	@ (800a3b4 <prvResetNextTaskUnblockTime+0x38>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	4a04      	ldr	r2, [pc, #16]	@ (800a3b8 <prvResetNextTaskUnblockTime+0x3c>)
 800a3a6:	6013      	str	r3, [r2, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	20002218 	.word	0x20002218
 800a3b8:	20002280 	.word	0x20002280

0800a3bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f0 <xTaskGetSchedulerState+0x34>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d102      	bne.n	800a3d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	607b      	str	r3, [r7, #4]
 800a3ce:	e008      	b.n	800a3e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3d0:	4b08      	ldr	r3, [pc, #32]	@ (800a3f4 <xTaskGetSchedulerState+0x38>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3d8:	2302      	movs	r3, #2
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	e001      	b.n	800a3e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3e2:	687b      	ldr	r3, [r7, #4]
	}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	2000226c 	.word	0x2000226c
 800a3f4:	20002288 	.word	0x20002288

0800a3f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a402:	4b29      	ldr	r3, [pc, #164]	@ (800a4a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a408:	4b28      	ldr	r3, [pc, #160]	@ (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3304      	adds	r3, #4
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fae2 	bl	80099d8 <uxListRemove>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10b      	bne.n	800a432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a41a:	4b24      	ldr	r3, [pc, #144]	@ (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a420:	2201      	movs	r2, #1
 800a422:	fa02 f303 	lsl.w	r3, r2, r3
 800a426:	43da      	mvns	r2, r3
 800a428:	4b21      	ldr	r3, [pc, #132]	@ (800a4b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4013      	ands	r3, r2
 800a42e:	4a20      	ldr	r2, [pc, #128]	@ (800a4b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a438:	d10a      	bne.n	800a450 <prvAddCurrentTaskToDelayedList+0x58>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d007      	beq.n	800a450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a440:	4b1a      	ldr	r3, [pc, #104]	@ (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3304      	adds	r3, #4
 800a446:	4619      	mov	r1, r3
 800a448:	481a      	ldr	r0, [pc, #104]	@ (800a4b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a44a:	f7ff fa68 	bl	800991e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a44e:	e026      	b.n	800a49e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4413      	add	r3, r2
 800a456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a458:	4b14      	ldr	r3, [pc, #80]	@ (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	429a      	cmp	r2, r3
 800a466:	d209      	bcs.n	800a47c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a468:	4b13      	ldr	r3, [pc, #76]	@ (800a4b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	4610      	mov	r0, r2
 800a476:	f7ff fa76 	bl	8009966 <vListInsert>
}
 800a47a:	e010      	b.n	800a49e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a47c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3304      	adds	r3, #4
 800a486:	4619      	mov	r1, r3
 800a488:	4610      	mov	r0, r2
 800a48a:	f7ff fa6c 	bl	8009966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a48e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	429a      	cmp	r2, r3
 800a496:	d202      	bcs.n	800a49e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a498:	4a09      	ldr	r2, [pc, #36]	@ (800a4c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	6013      	str	r3, [r2, #0]
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20002264 	.word	0x20002264
 800a4ac:	20002160 	.word	0x20002160
 800a4b0:	20002268 	.word	0x20002268
 800a4b4:	2000224c 	.word	0x2000224c
 800a4b8:	2000221c 	.word	0x2000221c
 800a4bc:	20002218 	.word	0x20002218
 800a4c0:	20002280 	.word	0x20002280

0800a4c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3b04      	subs	r3, #4
 800a4d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3b04      	subs	r3, #4
 800a4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f023 0201 	bic.w	r2, r3, #1
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3b04      	subs	r3, #4
 800a4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4f4:	4a0c      	ldr	r2, [pc, #48]	@ (800a528 <pxPortInitialiseStack+0x64>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3b14      	subs	r3, #20
 800a4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b04      	subs	r3, #4
 800a50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f06f 0202 	mvn.w	r2, #2
 800a512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3b20      	subs	r3, #32
 800a518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a51a:	68fb      	ldr	r3, [r7, #12]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	0800a52d 	.word	0x0800a52d

0800a52c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a536:	4b13      	ldr	r3, [pc, #76]	@ (800a584 <prvTaskExitError+0x58>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53e:	d00b      	beq.n	800a558 <prvTaskExitError+0x2c>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	60fb      	str	r3, [r7, #12]
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	e7fd      	b.n	800a554 <prvTaskExitError+0x28>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	60bb      	str	r3, [r7, #8]
}
 800a56a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a56c:	bf00      	nop
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0fc      	beq.n	800a56e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	20000058 	.word	0x20000058
	...

0800a590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a590:	4b07      	ldr	r3, [pc, #28]	@ (800a5b0 <pxCurrentTCBConst2>)
 800a592:	6819      	ldr	r1, [r3, #0]
 800a594:	6808      	ldr	r0, [r1, #0]
 800a596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59a:	f380 8809 	msr	PSP, r0
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f04f 0000 	mov.w	r0, #0
 800a5a6:	f380 8811 	msr	BASEPRI, r0
 800a5aa:	4770      	bx	lr
 800a5ac:	f3af 8000 	nop.w

0800a5b0 <pxCurrentTCBConst2>:
 800a5b0:	20002160 	.word	0x20002160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop

0800a5b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5b8:	4808      	ldr	r0, [pc, #32]	@ (800a5dc <prvPortStartFirstTask+0x24>)
 800a5ba:	6800      	ldr	r0, [r0, #0]
 800a5bc:	6800      	ldr	r0, [r0, #0]
 800a5be:	f380 8808 	msr	MSP, r0
 800a5c2:	f04f 0000 	mov.w	r0, #0
 800a5c6:	f380 8814 	msr	CONTROL, r0
 800a5ca:	b662      	cpsie	i
 800a5cc:	b661      	cpsie	f
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	df00      	svc	0
 800a5d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5da:	bf00      	nop
 800a5dc:	e000ed08 	.word	0xe000ed08

0800a5e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5e6:	4b47      	ldr	r3, [pc, #284]	@ (800a704 <xPortStartScheduler+0x124>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a47      	ldr	r2, [pc, #284]	@ (800a708 <xPortStartScheduler+0x128>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d10b      	bne.n	800a608 <xPortStartScheduler+0x28>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	60fb      	str	r3, [r7, #12]
}
 800a602:	bf00      	nop
 800a604:	bf00      	nop
 800a606:	e7fd      	b.n	800a604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a608:	4b3e      	ldr	r3, [pc, #248]	@ (800a704 <xPortStartScheduler+0x124>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a3f      	ldr	r2, [pc, #252]	@ (800a70c <xPortStartScheduler+0x12c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d10b      	bne.n	800a62a <xPortStartScheduler+0x4a>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	613b      	str	r3, [r7, #16]
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	e7fd      	b.n	800a626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a62a:	4b39      	ldr	r3, [pc, #228]	@ (800a710 <xPortStartScheduler+0x130>)
 800a62c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	22ff      	movs	r2, #255	@ 0xff
 800a63a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	4b31      	ldr	r3, [pc, #196]	@ (800a714 <xPortStartScheduler+0x134>)
 800a650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a652:	4b31      	ldr	r3, [pc, #196]	@ (800a718 <xPortStartScheduler+0x138>)
 800a654:	2207      	movs	r2, #7
 800a656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a658:	e009      	b.n	800a66e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a65a:	4b2f      	ldr	r3, [pc, #188]	@ (800a718 <xPortStartScheduler+0x138>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3b01      	subs	r3, #1
 800a660:	4a2d      	ldr	r2, [pc, #180]	@ (800a718 <xPortStartScheduler+0x138>)
 800a662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a66e:	78fb      	ldrb	r3, [r7, #3]
 800a670:	b2db      	uxtb	r3, r3
 800a672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a676:	2b80      	cmp	r3, #128	@ 0x80
 800a678:	d0ef      	beq.n	800a65a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a67a:	4b27      	ldr	r3, [pc, #156]	@ (800a718 <xPortStartScheduler+0x138>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f1c3 0307 	rsb	r3, r3, #7
 800a682:	2b04      	cmp	r3, #4
 800a684:	d00b      	beq.n	800a69e <xPortStartScheduler+0xbe>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	60bb      	str	r3, [r7, #8]
}
 800a698:	bf00      	nop
 800a69a:	bf00      	nop
 800a69c:	e7fd      	b.n	800a69a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a69e:	4b1e      	ldr	r3, [pc, #120]	@ (800a718 <xPortStartScheduler+0x138>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a718 <xPortStartScheduler+0x138>)
 800a6a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a718 <xPortStartScheduler+0x138>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a6b0:	4a19      	ldr	r2, [pc, #100]	@ (800a718 <xPortStartScheduler+0x138>)
 800a6b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6bc:	4b17      	ldr	r3, [pc, #92]	@ (800a71c <xPortStartScheduler+0x13c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a16      	ldr	r2, [pc, #88]	@ (800a71c <xPortStartScheduler+0x13c>)
 800a6c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a6c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6c8:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <xPortStartScheduler+0x13c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a13      	ldr	r2, [pc, #76]	@ (800a71c <xPortStartScheduler+0x13c>)
 800a6ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a6d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6d4:	f000 f8da 	bl	800a88c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6d8:	4b11      	ldr	r3, [pc, #68]	@ (800a720 <xPortStartScheduler+0x140>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6de:	f000 f8f9 	bl	800a8d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6e2:	4b10      	ldr	r3, [pc, #64]	@ (800a724 <xPortStartScheduler+0x144>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a724 <xPortStartScheduler+0x144>)
 800a6e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a6ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6ee:	f7ff ff63 	bl	800a5b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6f2:	f7ff fd31 	bl	800a158 <vTaskSwitchContext>
	prvTaskExitError();
 800a6f6:	f7ff ff19 	bl	800a52c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	e000ed00 	.word	0xe000ed00
 800a708:	410fc271 	.word	0x410fc271
 800a70c:	410fc270 	.word	0x410fc270
 800a710:	e000e400 	.word	0xe000e400
 800a714:	2000228c 	.word	0x2000228c
 800a718:	20002290 	.word	0x20002290
 800a71c:	e000ed20 	.word	0xe000ed20
 800a720:	20000058 	.word	0x20000058
 800a724:	e000ef34 	.word	0xe000ef34

0800a728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	607b      	str	r3, [r7, #4]
}
 800a740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a742:	4b10      	ldr	r3, [pc, #64]	@ (800a784 <vPortEnterCritical+0x5c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3301      	adds	r3, #1
 800a748:	4a0e      	ldr	r2, [pc, #56]	@ (800a784 <vPortEnterCritical+0x5c>)
 800a74a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a74c:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <vPortEnterCritical+0x5c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d110      	bne.n	800a776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a754:	4b0c      	ldr	r3, [pc, #48]	@ (800a788 <vPortEnterCritical+0x60>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00b      	beq.n	800a776 <vPortEnterCritical+0x4e>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	603b      	str	r3, [r7, #0]
}
 800a770:	bf00      	nop
 800a772:	bf00      	nop
 800a774:	e7fd      	b.n	800a772 <vPortEnterCritical+0x4a>
	}
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	20000058 	.word	0x20000058
 800a788:	e000ed04 	.word	0xe000ed04

0800a78c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a792:	4b12      	ldr	r3, [pc, #72]	@ (800a7dc <vPortExitCritical+0x50>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10b      	bne.n	800a7b2 <vPortExitCritical+0x26>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	607b      	str	r3, [r7, #4]
}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	e7fd      	b.n	800a7ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7dc <vPortExitCritical+0x50>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	4a08      	ldr	r2, [pc, #32]	@ (800a7dc <vPortExitCritical+0x50>)
 800a7ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7bc:	4b07      	ldr	r3, [pc, #28]	@ (800a7dc <vPortExitCritical+0x50>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d105      	bne.n	800a7d0 <vPortExitCritical+0x44>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a7ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	20000058 	.word	0x20000058

0800a7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7e0:	f3ef 8009 	mrs	r0, PSP
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	4b15      	ldr	r3, [pc, #84]	@ (800a840 <pxCurrentTCBConst>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	f01e 0f10 	tst.w	lr, #16
 800a7f0:	bf08      	it	eq
 800a7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fa:	6010      	str	r0, [r2, #0]
 800a7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a804:	f380 8811 	msr	BASEPRI, r0
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f7ff fca2 	bl	800a158 <vTaskSwitchContext>
 800a814:	f04f 0000 	mov.w	r0, #0
 800a818:	f380 8811 	msr	BASEPRI, r0
 800a81c:	bc09      	pop	{r0, r3}
 800a81e:	6819      	ldr	r1, [r3, #0]
 800a820:	6808      	ldr	r0, [r1, #0]
 800a822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a826:	f01e 0f10 	tst.w	lr, #16
 800a82a:	bf08      	it	eq
 800a82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a830:	f380 8809 	msr	PSP, r0
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	f3af 8000 	nop.w

0800a840 <pxCurrentTCBConst>:
 800a840:	20002160 	.word	0x20002160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop

0800a848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	607b      	str	r3, [r7, #4]
}
 800a860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a862:	f7ff fbbf 	bl	8009fe4 <xTaskIncrementTick>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <xPortSysTickHandler+0x40>)
 800a86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	2300      	movs	r3, #0
 800a876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f383 8811 	msr	BASEPRI, r3
}
 800a87e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a88c:	b480      	push	{r7}
 800a88e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a890:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c0 <vPortSetupTimerInterrupt+0x34>)
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a896:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c4 <vPortSetupTimerInterrupt+0x38>)
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a89c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c8 <vPortSetupTimerInterrupt+0x3c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a8cc <vPortSetupTimerInterrupt+0x40>)
 800a8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a6:	099b      	lsrs	r3, r3, #6
 800a8a8:	4a09      	ldr	r2, [pc, #36]	@ (800a8d0 <vPortSetupTimerInterrupt+0x44>)
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8ae:	4b04      	ldr	r3, [pc, #16]	@ (800a8c0 <vPortSetupTimerInterrupt+0x34>)
 800a8b0:	2207      	movs	r2, #7
 800a8b2:	601a      	str	r2, [r3, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	e000e010 	.word	0xe000e010
 800a8c4:	e000e018 	.word	0xe000e018
 800a8c8:	20000008 	.word	0x20000008
 800a8cc:	10624dd3 	.word	0x10624dd3
 800a8d0:	e000e014 	.word	0xe000e014

0800a8d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a8e4 <vPortEnableVFP+0x10>
 800a8d8:	6801      	ldr	r1, [r0, #0]
 800a8da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a8de:	6001      	str	r1, [r0, #0]
 800a8e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8e2:	bf00      	nop
 800a8e4:	e000ed88 	.word	0xe000ed88

0800a8e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08a      	sub	sp, #40	@ 0x28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8f4:	f7ff faca 	bl	8009e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8f8:	4b5c      	ldr	r3, [pc, #368]	@ (800aa6c <pvPortMalloc+0x184>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a900:	f000 f924 	bl	800ab4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a904:	4b5a      	ldr	r3, [pc, #360]	@ (800aa70 <pvPortMalloc+0x188>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4013      	ands	r3, r2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 8095 	bne.w	800aa3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d01e      	beq.n	800a956 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a918:	2208      	movs	r2, #8
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4413      	add	r3, r2
 800a91e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f003 0307 	and.w	r3, r3, #7
 800a926:	2b00      	cmp	r3, #0
 800a928:	d015      	beq.n	800a956 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f023 0307 	bic.w	r3, r3, #7
 800a930:	3308      	adds	r3, #8
 800a932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <pvPortMalloc+0x6e>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	617b      	str	r3, [r7, #20]
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop
 800a954:	e7fd      	b.n	800a952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d06f      	beq.n	800aa3c <pvPortMalloc+0x154>
 800a95c:	4b45      	ldr	r3, [pc, #276]	@ (800aa74 <pvPortMalloc+0x18c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	429a      	cmp	r2, r3
 800a964:	d86a      	bhi.n	800aa3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a966:	4b44      	ldr	r3, [pc, #272]	@ (800aa78 <pvPortMalloc+0x190>)
 800a968:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a96a:	4b43      	ldr	r3, [pc, #268]	@ (800aa78 <pvPortMalloc+0x190>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a970:	e004      	b.n	800a97c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	429a      	cmp	r2, r3
 800a984:	d903      	bls.n	800a98e <pvPortMalloc+0xa6>
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1f1      	bne.n	800a972 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a98e:	4b37      	ldr	r3, [pc, #220]	@ (800aa6c <pvPortMalloc+0x184>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a994:	429a      	cmp	r2, r3
 800a996:	d051      	beq.n	800aa3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2208      	movs	r2, #8
 800a99e:	4413      	add	r3, r2
 800a9a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	1ad2      	subs	r2, r2, r3
 800a9b2:	2308      	movs	r3, #8
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d920      	bls.n	800a9fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4413      	add	r3, r2
 800a9c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00b      	beq.n	800a9e4 <pvPortMalloc+0xfc>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	613b      	str	r3, [r7, #16]
}
 800a9de:	bf00      	nop
 800a9e0:	bf00      	nop
 800a9e2:	e7fd      	b.n	800a9e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	1ad2      	subs	r2, r2, r3
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9f6:	69b8      	ldr	r0, [r7, #24]
 800a9f8:	f000 f90a 	bl	800ac10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9fc:	4b1d      	ldr	r3, [pc, #116]	@ (800aa74 <pvPortMalloc+0x18c>)
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	4a1b      	ldr	r2, [pc, #108]	@ (800aa74 <pvPortMalloc+0x18c>)
 800aa08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa0a:	4b1a      	ldr	r3, [pc, #104]	@ (800aa74 <pvPortMalloc+0x18c>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa7c <pvPortMalloc+0x194>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d203      	bcs.n	800aa1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa16:	4b17      	ldr	r3, [pc, #92]	@ (800aa74 <pvPortMalloc+0x18c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a18      	ldr	r2, [pc, #96]	@ (800aa7c <pvPortMalloc+0x194>)
 800aa1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	4b13      	ldr	r3, [pc, #76]	@ (800aa70 <pvPortMalloc+0x188>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	431a      	orrs	r2, r3
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	2200      	movs	r2, #0
 800aa30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa32:	4b13      	ldr	r3, [pc, #76]	@ (800aa80 <pvPortMalloc+0x198>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3301      	adds	r3, #1
 800aa38:	4a11      	ldr	r2, [pc, #68]	@ (800aa80 <pvPortMalloc+0x198>)
 800aa3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa3c:	f7ff fa34 	bl	8009ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	f003 0307 	and.w	r3, r3, #7
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00b      	beq.n	800aa62 <pvPortMalloc+0x17a>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	60fb      	str	r3, [r7, #12]
}
 800aa5c:	bf00      	nop
 800aa5e:	bf00      	nop
 800aa60:	e7fd      	b.n	800aa5e <pvPortMalloc+0x176>
	return pvReturn;
 800aa62:	69fb      	ldr	r3, [r7, #28]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3728      	adds	r7, #40	@ 0x28
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	20002e54 	.word	0x20002e54
 800aa70:	20002e68 	.word	0x20002e68
 800aa74:	20002e58 	.word	0x20002e58
 800aa78:	20002e4c 	.word	0x20002e4c
 800aa7c:	20002e5c 	.word	0x20002e5c
 800aa80:	20002e60 	.word	0x20002e60

0800aa84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d04f      	beq.n	800ab36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa96:	2308      	movs	r3, #8
 800aa98:	425b      	negs	r3, r3
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	4b25      	ldr	r3, [pc, #148]	@ (800ab40 <vPortFree+0xbc>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4013      	ands	r3, r2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10b      	bne.n	800aaca <vPortFree+0x46>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	60fb      	str	r3, [r7, #12]
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop
 800aac8:	e7fd      	b.n	800aac6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00b      	beq.n	800aaea <vPortFree+0x66>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	60bb      	str	r3, [r7, #8]
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
 800aae8:	e7fd      	b.n	800aae6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	4b14      	ldr	r3, [pc, #80]	@ (800ab40 <vPortFree+0xbc>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d01e      	beq.n	800ab36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d11a      	bne.n	800ab36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	4b0e      	ldr	r3, [pc, #56]	@ (800ab40 <vPortFree+0xbc>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	43db      	mvns	r3, r3
 800ab0a:	401a      	ands	r2, r3
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab10:	f7ff f9bc 	bl	8009e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	4b0a      	ldr	r3, [pc, #40]	@ (800ab44 <vPortFree+0xc0>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	4a09      	ldr	r2, [pc, #36]	@ (800ab44 <vPortFree+0xc0>)
 800ab20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab22:	6938      	ldr	r0, [r7, #16]
 800ab24:	f000 f874 	bl	800ac10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab28:	4b07      	ldr	r3, [pc, #28]	@ (800ab48 <vPortFree+0xc4>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	4a06      	ldr	r2, [pc, #24]	@ (800ab48 <vPortFree+0xc4>)
 800ab30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab32:	f7ff f9b9 	bl	8009ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab36:	bf00      	nop
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20002e68 	.word	0x20002e68
 800ab44:	20002e58 	.word	0x20002e58
 800ab48:	20002e64 	.word	0x20002e64

0800ab4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab52:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ab56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab58:	4b27      	ldr	r3, [pc, #156]	@ (800abf8 <prvHeapInit+0xac>)
 800ab5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f003 0307 	and.w	r3, r3, #7
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00c      	beq.n	800ab80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3307      	adds	r3, #7
 800ab6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f023 0307 	bic.w	r3, r3, #7
 800ab72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	4a1f      	ldr	r2, [pc, #124]	@ (800abf8 <prvHeapInit+0xac>)
 800ab7c:	4413      	add	r3, r2
 800ab7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab84:	4a1d      	ldr	r2, [pc, #116]	@ (800abfc <prvHeapInit+0xb0>)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab8a:	4b1c      	ldr	r3, [pc, #112]	@ (800abfc <prvHeapInit+0xb0>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	4413      	add	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab98:	2208      	movs	r2, #8
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	1a9b      	subs	r3, r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f023 0307 	bic.w	r3, r3, #7
 800aba6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	4a15      	ldr	r2, [pc, #84]	@ (800ac00 <prvHeapInit+0xb4>)
 800abac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abae:	4b14      	ldr	r3, [pc, #80]	@ (800ac00 <prvHeapInit+0xb4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abb6:	4b12      	ldr	r3, [pc, #72]	@ (800ac00 <prvHeapInit+0xb4>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2200      	movs	r2, #0
 800abbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	1ad2      	subs	r2, r2, r3
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abcc:	4b0c      	ldr	r3, [pc, #48]	@ (800ac00 <prvHeapInit+0xb4>)
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	4a0a      	ldr	r2, [pc, #40]	@ (800ac04 <prvHeapInit+0xb8>)
 800abda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	4a09      	ldr	r2, [pc, #36]	@ (800ac08 <prvHeapInit+0xbc>)
 800abe2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abe4:	4b09      	ldr	r3, [pc, #36]	@ (800ac0c <prvHeapInit+0xc0>)
 800abe6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800abea:	601a      	str	r2, [r3, #0]
}
 800abec:	bf00      	nop
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	20002294 	.word	0x20002294
 800abfc:	20002e4c 	.word	0x20002e4c
 800ac00:	20002e54 	.word	0x20002e54
 800ac04:	20002e5c 	.word	0x20002e5c
 800ac08:	20002e58 	.word	0x20002e58
 800ac0c:	20002e68 	.word	0x20002e68

0800ac10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac18:	4b28      	ldr	r3, [pc, #160]	@ (800acbc <prvInsertBlockIntoFreeList+0xac>)
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	e002      	b.n	800ac24 <prvInsertBlockIntoFreeList+0x14>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d8f7      	bhi.n	800ac1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	4413      	add	r3, r2
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d108      	bne.n	800ac52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	441a      	add	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d118      	bne.n	800ac98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	4b15      	ldr	r3, [pc, #84]	@ (800acc0 <prvInsertBlockIntoFreeList+0xb0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d00d      	beq.n	800ac8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	441a      	add	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	601a      	str	r2, [r3, #0]
 800ac8c:	e008      	b.n	800aca0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac8e:	4b0c      	ldr	r3, [pc, #48]	@ (800acc0 <prvInsertBlockIntoFreeList+0xb0>)
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	e003      	b.n	800aca0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d002      	beq.n	800acae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acae:	bf00      	nop
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	20002e4c 	.word	0x20002e4c
 800acc0:	20002e54 	.word	0x20002e54

0800acc4 <rand>:
 800acc4:	4b16      	ldr	r3, [pc, #88]	@ (800ad20 <rand+0x5c>)
 800acc6:	b510      	push	{r4, lr}
 800acc8:	681c      	ldr	r4, [r3, #0]
 800acca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800accc:	b9b3      	cbnz	r3, 800acfc <rand+0x38>
 800acce:	2018      	movs	r0, #24
 800acd0:	f002 f81c 	bl	800cd0c <malloc>
 800acd4:	4602      	mov	r2, r0
 800acd6:	6320      	str	r0, [r4, #48]	@ 0x30
 800acd8:	b920      	cbnz	r0, 800ace4 <rand+0x20>
 800acda:	4b12      	ldr	r3, [pc, #72]	@ (800ad24 <rand+0x60>)
 800acdc:	4812      	ldr	r0, [pc, #72]	@ (800ad28 <rand+0x64>)
 800acde:	2152      	movs	r1, #82	@ 0x52
 800ace0:	f001 f952 	bl	800bf88 <__assert_func>
 800ace4:	4911      	ldr	r1, [pc, #68]	@ (800ad2c <rand+0x68>)
 800ace6:	4b12      	ldr	r3, [pc, #72]	@ (800ad30 <rand+0x6c>)
 800ace8:	e9c0 1300 	strd	r1, r3, [r0]
 800acec:	4b11      	ldr	r3, [pc, #68]	@ (800ad34 <rand+0x70>)
 800acee:	6083      	str	r3, [r0, #8]
 800acf0:	230b      	movs	r3, #11
 800acf2:	8183      	strh	r3, [r0, #12]
 800acf4:	2100      	movs	r1, #0
 800acf6:	2001      	movs	r0, #1
 800acf8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800acfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800acfe:	480e      	ldr	r0, [pc, #56]	@ (800ad38 <rand+0x74>)
 800ad00:	690b      	ldr	r3, [r1, #16]
 800ad02:	694c      	ldr	r4, [r1, #20]
 800ad04:	4a0d      	ldr	r2, [pc, #52]	@ (800ad3c <rand+0x78>)
 800ad06:	4358      	muls	r0, r3
 800ad08:	fb02 0004 	mla	r0, r2, r4, r0
 800ad0c:	fba3 3202 	umull	r3, r2, r3, r2
 800ad10:	3301      	adds	r3, #1
 800ad12:	eb40 0002 	adc.w	r0, r0, r2
 800ad16:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ad1a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ad1e:	bd10      	pop	{r4, pc}
 800ad20:	20000068 	.word	0x20000068
 800ad24:	0800f92c 	.word	0x0800f92c
 800ad28:	0800f943 	.word	0x0800f943
 800ad2c:	abcd330e 	.word	0xabcd330e
 800ad30:	e66d1234 	.word	0xe66d1234
 800ad34:	0005deec 	.word	0x0005deec
 800ad38:	5851f42d 	.word	0x5851f42d
 800ad3c:	4c957f2d 	.word	0x4c957f2d

0800ad40 <__cvt>:
 800ad40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad44:	ec57 6b10 	vmov	r6, r7, d0
 800ad48:	2f00      	cmp	r7, #0
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	463b      	mov	r3, r7
 800ad50:	bfbb      	ittet	lt
 800ad52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad56:	461f      	movlt	r7, r3
 800ad58:	2300      	movge	r3, #0
 800ad5a:	232d      	movlt	r3, #45	@ 0x2d
 800ad5c:	700b      	strb	r3, [r1, #0]
 800ad5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad64:	4691      	mov	r9, r2
 800ad66:	f023 0820 	bic.w	r8, r3, #32
 800ad6a:	bfbc      	itt	lt
 800ad6c:	4632      	movlt	r2, r6
 800ad6e:	4616      	movlt	r6, r2
 800ad70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad74:	d005      	beq.n	800ad82 <__cvt+0x42>
 800ad76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad7a:	d100      	bne.n	800ad7e <__cvt+0x3e>
 800ad7c:	3401      	adds	r4, #1
 800ad7e:	2102      	movs	r1, #2
 800ad80:	e000      	b.n	800ad84 <__cvt+0x44>
 800ad82:	2103      	movs	r1, #3
 800ad84:	ab03      	add	r3, sp, #12
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	ab02      	add	r3, sp, #8
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	ec47 6b10 	vmov	d0, r6, r7
 800ad90:	4653      	mov	r3, sl
 800ad92:	4622      	mov	r2, r4
 800ad94:	f001 f9a0 	bl	800c0d8 <_dtoa_r>
 800ad98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	d119      	bne.n	800add4 <__cvt+0x94>
 800ada0:	f019 0f01 	tst.w	r9, #1
 800ada4:	d00e      	beq.n	800adc4 <__cvt+0x84>
 800ada6:	eb00 0904 	add.w	r9, r0, r4
 800adaa:	2200      	movs	r2, #0
 800adac:	2300      	movs	r3, #0
 800adae:	4630      	mov	r0, r6
 800adb0:	4639      	mov	r1, r7
 800adb2:	f7f5 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 800adb6:	b108      	cbz	r0, 800adbc <__cvt+0x7c>
 800adb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800adbc:	2230      	movs	r2, #48	@ 0x30
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	454b      	cmp	r3, r9
 800adc2:	d31e      	bcc.n	800ae02 <__cvt+0xc2>
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adc8:	1b5b      	subs	r3, r3, r5
 800adca:	4628      	mov	r0, r5
 800adcc:	6013      	str	r3, [r2, #0]
 800adce:	b004      	add	sp, #16
 800add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800add8:	eb00 0904 	add.w	r9, r0, r4
 800addc:	d1e5      	bne.n	800adaa <__cvt+0x6a>
 800adde:	7803      	ldrb	r3, [r0, #0]
 800ade0:	2b30      	cmp	r3, #48	@ 0x30
 800ade2:	d10a      	bne.n	800adfa <__cvt+0xba>
 800ade4:	2200      	movs	r2, #0
 800ade6:	2300      	movs	r3, #0
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800adf0:	b918      	cbnz	r0, 800adfa <__cvt+0xba>
 800adf2:	f1c4 0401 	rsb	r4, r4, #1
 800adf6:	f8ca 4000 	str.w	r4, [sl]
 800adfa:	f8da 3000 	ldr.w	r3, [sl]
 800adfe:	4499      	add	r9, r3
 800ae00:	e7d3      	b.n	800adaa <__cvt+0x6a>
 800ae02:	1c59      	adds	r1, r3, #1
 800ae04:	9103      	str	r1, [sp, #12]
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	e7d9      	b.n	800adbe <__cvt+0x7e>

0800ae0a <__exponent>:
 800ae0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae0c:	2900      	cmp	r1, #0
 800ae0e:	bfba      	itte	lt
 800ae10:	4249      	neglt	r1, r1
 800ae12:	232d      	movlt	r3, #45	@ 0x2d
 800ae14:	232b      	movge	r3, #43	@ 0x2b
 800ae16:	2909      	cmp	r1, #9
 800ae18:	7002      	strb	r2, [r0, #0]
 800ae1a:	7043      	strb	r3, [r0, #1]
 800ae1c:	dd29      	ble.n	800ae72 <__exponent+0x68>
 800ae1e:	f10d 0307 	add.w	r3, sp, #7
 800ae22:	461d      	mov	r5, r3
 800ae24:	270a      	movs	r7, #10
 800ae26:	461a      	mov	r2, r3
 800ae28:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae2c:	fb07 1416 	mls	r4, r7, r6, r1
 800ae30:	3430      	adds	r4, #48	@ 0x30
 800ae32:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae36:	460c      	mov	r4, r1
 800ae38:	2c63      	cmp	r4, #99	@ 0x63
 800ae3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae3e:	4631      	mov	r1, r6
 800ae40:	dcf1      	bgt.n	800ae26 <__exponent+0x1c>
 800ae42:	3130      	adds	r1, #48	@ 0x30
 800ae44:	1e94      	subs	r4, r2, #2
 800ae46:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae4a:	1c41      	adds	r1, r0, #1
 800ae4c:	4623      	mov	r3, r4
 800ae4e:	42ab      	cmp	r3, r5
 800ae50:	d30a      	bcc.n	800ae68 <__exponent+0x5e>
 800ae52:	f10d 0309 	add.w	r3, sp, #9
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	42ac      	cmp	r4, r5
 800ae5a:	bf88      	it	hi
 800ae5c:	2300      	movhi	r3, #0
 800ae5e:	3302      	adds	r3, #2
 800ae60:	4403      	add	r3, r0
 800ae62:	1a18      	subs	r0, r3, r0
 800ae64:	b003      	add	sp, #12
 800ae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae68:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae70:	e7ed      	b.n	800ae4e <__exponent+0x44>
 800ae72:	2330      	movs	r3, #48	@ 0x30
 800ae74:	3130      	adds	r1, #48	@ 0x30
 800ae76:	7083      	strb	r3, [r0, #2]
 800ae78:	70c1      	strb	r1, [r0, #3]
 800ae7a:	1d03      	adds	r3, r0, #4
 800ae7c:	e7f1      	b.n	800ae62 <__exponent+0x58>
	...

0800ae80 <_printf_float>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	b08d      	sub	sp, #52	@ 0x34
 800ae86:	460c      	mov	r4, r1
 800ae88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae8c:	4616      	mov	r6, r2
 800ae8e:	461f      	mov	r7, r3
 800ae90:	4605      	mov	r5, r0
 800ae92:	f000 ffed 	bl	800be70 <_localeconv_r>
 800ae96:	6803      	ldr	r3, [r0, #0]
 800ae98:	9304      	str	r3, [sp, #16]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7f5 f9e8 	bl	8000270 <strlen>
 800aea0:	2300      	movs	r3, #0
 800aea2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aea4:	f8d8 3000 	ldr.w	r3, [r8]
 800aea8:	9005      	str	r0, [sp, #20]
 800aeaa:	3307      	adds	r3, #7
 800aeac:	f023 0307 	bic.w	r3, r3, #7
 800aeb0:	f103 0208 	add.w	r2, r3, #8
 800aeb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aeb8:	f8d4 b000 	ldr.w	fp, [r4]
 800aebc:	f8c8 2000 	str.w	r2, [r8]
 800aec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aec4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aec8:	9307      	str	r3, [sp, #28]
 800aeca:	f8cd 8018 	str.w	r8, [sp, #24]
 800aece:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aed6:	4b9c      	ldr	r3, [pc, #624]	@ (800b148 <_printf_float+0x2c8>)
 800aed8:	f04f 32ff 	mov.w	r2, #4294967295
 800aedc:	f7f5 fe26 	bl	8000b2c <__aeabi_dcmpun>
 800aee0:	bb70      	cbnz	r0, 800af40 <_printf_float+0xc0>
 800aee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aee6:	4b98      	ldr	r3, [pc, #608]	@ (800b148 <_printf_float+0x2c8>)
 800aee8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeec:	f7f5 fe00 	bl	8000af0 <__aeabi_dcmple>
 800aef0:	bb30      	cbnz	r0, 800af40 <_printf_float+0xc0>
 800aef2:	2200      	movs	r2, #0
 800aef4:	2300      	movs	r3, #0
 800aef6:	4640      	mov	r0, r8
 800aef8:	4649      	mov	r1, r9
 800aefa:	f7f5 fdef 	bl	8000adc <__aeabi_dcmplt>
 800aefe:	b110      	cbz	r0, 800af06 <_printf_float+0x86>
 800af00:	232d      	movs	r3, #45	@ 0x2d
 800af02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af06:	4a91      	ldr	r2, [pc, #580]	@ (800b14c <_printf_float+0x2cc>)
 800af08:	4b91      	ldr	r3, [pc, #580]	@ (800b150 <_printf_float+0x2d0>)
 800af0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af0e:	bf8c      	ite	hi
 800af10:	4690      	movhi	r8, r2
 800af12:	4698      	movls	r8, r3
 800af14:	2303      	movs	r3, #3
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	f02b 0304 	bic.w	r3, fp, #4
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	f04f 0900 	mov.w	r9, #0
 800af22:	9700      	str	r7, [sp, #0]
 800af24:	4633      	mov	r3, r6
 800af26:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af28:	4621      	mov	r1, r4
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f9d2 	bl	800b2d4 <_printf_common>
 800af30:	3001      	adds	r0, #1
 800af32:	f040 808d 	bne.w	800b050 <_printf_float+0x1d0>
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	b00d      	add	sp, #52	@ 0x34
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	4642      	mov	r2, r8
 800af42:	464b      	mov	r3, r9
 800af44:	4640      	mov	r0, r8
 800af46:	4649      	mov	r1, r9
 800af48:	f7f5 fdf0 	bl	8000b2c <__aeabi_dcmpun>
 800af4c:	b140      	cbz	r0, 800af60 <_printf_float+0xe0>
 800af4e:	464b      	mov	r3, r9
 800af50:	2b00      	cmp	r3, #0
 800af52:	bfbc      	itt	lt
 800af54:	232d      	movlt	r3, #45	@ 0x2d
 800af56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af5a:	4a7e      	ldr	r2, [pc, #504]	@ (800b154 <_printf_float+0x2d4>)
 800af5c:	4b7e      	ldr	r3, [pc, #504]	@ (800b158 <_printf_float+0x2d8>)
 800af5e:	e7d4      	b.n	800af0a <_printf_float+0x8a>
 800af60:	6863      	ldr	r3, [r4, #4]
 800af62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af66:	9206      	str	r2, [sp, #24]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	d13b      	bne.n	800afe4 <_printf_float+0x164>
 800af6c:	2306      	movs	r3, #6
 800af6e:	6063      	str	r3, [r4, #4]
 800af70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af74:	2300      	movs	r3, #0
 800af76:	6022      	str	r2, [r4, #0]
 800af78:	9303      	str	r3, [sp, #12]
 800af7a:	ab0a      	add	r3, sp, #40	@ 0x28
 800af7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af80:	ab09      	add	r3, sp, #36	@ 0x24
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	6861      	ldr	r1, [r4, #4]
 800af86:	ec49 8b10 	vmov	d0, r8, r9
 800af8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af8e:	4628      	mov	r0, r5
 800af90:	f7ff fed6 	bl	800ad40 <__cvt>
 800af94:	9b06      	ldr	r3, [sp, #24]
 800af96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af98:	2b47      	cmp	r3, #71	@ 0x47
 800af9a:	4680      	mov	r8, r0
 800af9c:	d129      	bne.n	800aff2 <_printf_float+0x172>
 800af9e:	1cc8      	adds	r0, r1, #3
 800afa0:	db02      	blt.n	800afa8 <_printf_float+0x128>
 800afa2:	6863      	ldr	r3, [r4, #4]
 800afa4:	4299      	cmp	r1, r3
 800afa6:	dd41      	ble.n	800b02c <_printf_float+0x1ac>
 800afa8:	f1aa 0a02 	sub.w	sl, sl, #2
 800afac:	fa5f fa8a 	uxtb.w	sl, sl
 800afb0:	3901      	subs	r1, #1
 800afb2:	4652      	mov	r2, sl
 800afb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800afb8:	9109      	str	r1, [sp, #36]	@ 0x24
 800afba:	f7ff ff26 	bl	800ae0a <__exponent>
 800afbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afc0:	1813      	adds	r3, r2, r0
 800afc2:	2a01      	cmp	r2, #1
 800afc4:	4681      	mov	r9, r0
 800afc6:	6123      	str	r3, [r4, #16]
 800afc8:	dc02      	bgt.n	800afd0 <_printf_float+0x150>
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	07d2      	lsls	r2, r2, #31
 800afce:	d501      	bpl.n	800afd4 <_printf_float+0x154>
 800afd0:	3301      	adds	r3, #1
 800afd2:	6123      	str	r3, [r4, #16]
 800afd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0a2      	beq.n	800af22 <_printf_float+0xa2>
 800afdc:	232d      	movs	r3, #45	@ 0x2d
 800afde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe2:	e79e      	b.n	800af22 <_printf_float+0xa2>
 800afe4:	9a06      	ldr	r2, [sp, #24]
 800afe6:	2a47      	cmp	r2, #71	@ 0x47
 800afe8:	d1c2      	bne.n	800af70 <_printf_float+0xf0>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1c0      	bne.n	800af70 <_printf_float+0xf0>
 800afee:	2301      	movs	r3, #1
 800aff0:	e7bd      	b.n	800af6e <_printf_float+0xee>
 800aff2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aff6:	d9db      	bls.n	800afb0 <_printf_float+0x130>
 800aff8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800affc:	d118      	bne.n	800b030 <_printf_float+0x1b0>
 800affe:	2900      	cmp	r1, #0
 800b000:	6863      	ldr	r3, [r4, #4]
 800b002:	dd0b      	ble.n	800b01c <_printf_float+0x19c>
 800b004:	6121      	str	r1, [r4, #16]
 800b006:	b913      	cbnz	r3, 800b00e <_printf_float+0x18e>
 800b008:	6822      	ldr	r2, [r4, #0]
 800b00a:	07d0      	lsls	r0, r2, #31
 800b00c:	d502      	bpl.n	800b014 <_printf_float+0x194>
 800b00e:	3301      	adds	r3, #1
 800b010:	440b      	add	r3, r1
 800b012:	6123      	str	r3, [r4, #16]
 800b014:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b016:	f04f 0900 	mov.w	r9, #0
 800b01a:	e7db      	b.n	800afd4 <_printf_float+0x154>
 800b01c:	b913      	cbnz	r3, 800b024 <_printf_float+0x1a4>
 800b01e:	6822      	ldr	r2, [r4, #0]
 800b020:	07d2      	lsls	r2, r2, #31
 800b022:	d501      	bpl.n	800b028 <_printf_float+0x1a8>
 800b024:	3302      	adds	r3, #2
 800b026:	e7f4      	b.n	800b012 <_printf_float+0x192>
 800b028:	2301      	movs	r3, #1
 800b02a:	e7f2      	b.n	800b012 <_printf_float+0x192>
 800b02c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b032:	4299      	cmp	r1, r3
 800b034:	db05      	blt.n	800b042 <_printf_float+0x1c2>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	6121      	str	r1, [r4, #16]
 800b03a:	07d8      	lsls	r0, r3, #31
 800b03c:	d5ea      	bpl.n	800b014 <_printf_float+0x194>
 800b03e:	1c4b      	adds	r3, r1, #1
 800b040:	e7e7      	b.n	800b012 <_printf_float+0x192>
 800b042:	2900      	cmp	r1, #0
 800b044:	bfd4      	ite	le
 800b046:	f1c1 0202 	rsble	r2, r1, #2
 800b04a:	2201      	movgt	r2, #1
 800b04c:	4413      	add	r3, r2
 800b04e:	e7e0      	b.n	800b012 <_printf_float+0x192>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	055a      	lsls	r2, r3, #21
 800b054:	d407      	bmi.n	800b066 <_printf_float+0x1e6>
 800b056:	6923      	ldr	r3, [r4, #16]
 800b058:	4642      	mov	r2, r8
 800b05a:	4631      	mov	r1, r6
 800b05c:	4628      	mov	r0, r5
 800b05e:	47b8      	blx	r7
 800b060:	3001      	adds	r0, #1
 800b062:	d12b      	bne.n	800b0bc <_printf_float+0x23c>
 800b064:	e767      	b.n	800af36 <_printf_float+0xb6>
 800b066:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b06a:	f240 80dd 	bls.w	800b228 <_printf_float+0x3a8>
 800b06e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b072:	2200      	movs	r2, #0
 800b074:	2300      	movs	r3, #0
 800b076:	f7f5 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d033      	beq.n	800b0e6 <_printf_float+0x266>
 800b07e:	4a37      	ldr	r2, [pc, #220]	@ (800b15c <_printf_float+0x2dc>)
 800b080:	2301      	movs	r3, #1
 800b082:	4631      	mov	r1, r6
 800b084:	4628      	mov	r0, r5
 800b086:	47b8      	blx	r7
 800b088:	3001      	adds	r0, #1
 800b08a:	f43f af54 	beq.w	800af36 <_printf_float+0xb6>
 800b08e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b092:	4543      	cmp	r3, r8
 800b094:	db02      	blt.n	800b09c <_printf_float+0x21c>
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	07d8      	lsls	r0, r3, #31
 800b09a:	d50f      	bpl.n	800b0bc <_printf_float+0x23c>
 800b09c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	47b8      	blx	r7
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	f43f af45 	beq.w	800af36 <_printf_float+0xb6>
 800b0ac:	f04f 0900 	mov.w	r9, #0
 800b0b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0b4:	f104 0a1a 	add.w	sl, r4, #26
 800b0b8:	45c8      	cmp	r8, r9
 800b0ba:	dc09      	bgt.n	800b0d0 <_printf_float+0x250>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	079b      	lsls	r3, r3, #30
 800b0c0:	f100 8103 	bmi.w	800b2ca <_printf_float+0x44a>
 800b0c4:	68e0      	ldr	r0, [r4, #12]
 800b0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c8:	4298      	cmp	r0, r3
 800b0ca:	bfb8      	it	lt
 800b0cc:	4618      	movlt	r0, r3
 800b0ce:	e734      	b.n	800af3a <_printf_float+0xba>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	4631      	mov	r1, r6
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	47b8      	blx	r7
 800b0da:	3001      	adds	r0, #1
 800b0dc:	f43f af2b 	beq.w	800af36 <_printf_float+0xb6>
 800b0e0:	f109 0901 	add.w	r9, r9, #1
 800b0e4:	e7e8      	b.n	800b0b8 <_printf_float+0x238>
 800b0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dc39      	bgt.n	800b160 <_printf_float+0x2e0>
 800b0ec:	4a1b      	ldr	r2, [pc, #108]	@ (800b15c <_printf_float+0x2dc>)
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	47b8      	blx	r7
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	f43f af1d 	beq.w	800af36 <_printf_float+0xb6>
 800b0fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b100:	ea59 0303 	orrs.w	r3, r9, r3
 800b104:	d102      	bne.n	800b10c <_printf_float+0x28c>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	07d9      	lsls	r1, r3, #31
 800b10a:	d5d7      	bpl.n	800b0bc <_printf_float+0x23c>
 800b10c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b110:	4631      	mov	r1, r6
 800b112:	4628      	mov	r0, r5
 800b114:	47b8      	blx	r7
 800b116:	3001      	adds	r0, #1
 800b118:	f43f af0d 	beq.w	800af36 <_printf_float+0xb6>
 800b11c:	f04f 0a00 	mov.w	sl, #0
 800b120:	f104 0b1a 	add.w	fp, r4, #26
 800b124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b126:	425b      	negs	r3, r3
 800b128:	4553      	cmp	r3, sl
 800b12a:	dc01      	bgt.n	800b130 <_printf_float+0x2b0>
 800b12c:	464b      	mov	r3, r9
 800b12e:	e793      	b.n	800b058 <_printf_float+0x1d8>
 800b130:	2301      	movs	r3, #1
 800b132:	465a      	mov	r2, fp
 800b134:	4631      	mov	r1, r6
 800b136:	4628      	mov	r0, r5
 800b138:	47b8      	blx	r7
 800b13a:	3001      	adds	r0, #1
 800b13c:	f43f aefb 	beq.w	800af36 <_printf_float+0xb6>
 800b140:	f10a 0a01 	add.w	sl, sl, #1
 800b144:	e7ee      	b.n	800b124 <_printf_float+0x2a4>
 800b146:	bf00      	nop
 800b148:	7fefffff 	.word	0x7fefffff
 800b14c:	0800f99f 	.word	0x0800f99f
 800b150:	0800f99b 	.word	0x0800f99b
 800b154:	0800f9a7 	.word	0x0800f9a7
 800b158:	0800f9a3 	.word	0x0800f9a3
 800b15c:	0800f9ab 	.word	0x0800f9ab
 800b160:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b162:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b166:	4553      	cmp	r3, sl
 800b168:	bfa8      	it	ge
 800b16a:	4653      	movge	r3, sl
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	4699      	mov	r9, r3
 800b170:	dc36      	bgt.n	800b1e0 <_printf_float+0x360>
 800b172:	f04f 0b00 	mov.w	fp, #0
 800b176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b17a:	f104 021a 	add.w	r2, r4, #26
 800b17e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b180:	9306      	str	r3, [sp, #24]
 800b182:	eba3 0309 	sub.w	r3, r3, r9
 800b186:	455b      	cmp	r3, fp
 800b188:	dc31      	bgt.n	800b1ee <_printf_float+0x36e>
 800b18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b18c:	459a      	cmp	sl, r3
 800b18e:	dc3a      	bgt.n	800b206 <_printf_float+0x386>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	07da      	lsls	r2, r3, #31
 800b194:	d437      	bmi.n	800b206 <_printf_float+0x386>
 800b196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b198:	ebaa 0903 	sub.w	r9, sl, r3
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	ebaa 0303 	sub.w	r3, sl, r3
 800b1a2:	4599      	cmp	r9, r3
 800b1a4:	bfa8      	it	ge
 800b1a6:	4699      	movge	r9, r3
 800b1a8:	f1b9 0f00 	cmp.w	r9, #0
 800b1ac:	dc33      	bgt.n	800b216 <_printf_float+0x396>
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1b6:	f104 0b1a 	add.w	fp, r4, #26
 800b1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1bc:	ebaa 0303 	sub.w	r3, sl, r3
 800b1c0:	eba3 0309 	sub.w	r3, r3, r9
 800b1c4:	4543      	cmp	r3, r8
 800b1c6:	f77f af79 	ble.w	800b0bc <_printf_float+0x23c>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	465a      	mov	r2, fp
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	47b8      	blx	r7
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	f43f aeae 	beq.w	800af36 <_printf_float+0xb6>
 800b1da:	f108 0801 	add.w	r8, r8, #1
 800b1de:	e7ec      	b.n	800b1ba <_printf_float+0x33a>
 800b1e0:	4642      	mov	r2, r8
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	47b8      	blx	r7
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d1c2      	bne.n	800b172 <_printf_float+0x2f2>
 800b1ec:	e6a3      	b.n	800af36 <_printf_float+0xb6>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	4631      	mov	r1, r6
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	9206      	str	r2, [sp, #24]
 800b1f6:	47b8      	blx	r7
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	f43f ae9c 	beq.w	800af36 <_printf_float+0xb6>
 800b1fe:	9a06      	ldr	r2, [sp, #24]
 800b200:	f10b 0b01 	add.w	fp, fp, #1
 800b204:	e7bb      	b.n	800b17e <_printf_float+0x2fe>
 800b206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b20a:	4631      	mov	r1, r6
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b8      	blx	r7
 800b210:	3001      	adds	r0, #1
 800b212:	d1c0      	bne.n	800b196 <_printf_float+0x316>
 800b214:	e68f      	b.n	800af36 <_printf_float+0xb6>
 800b216:	9a06      	ldr	r2, [sp, #24]
 800b218:	464b      	mov	r3, r9
 800b21a:	4442      	add	r2, r8
 800b21c:	4631      	mov	r1, r6
 800b21e:	4628      	mov	r0, r5
 800b220:	47b8      	blx	r7
 800b222:	3001      	adds	r0, #1
 800b224:	d1c3      	bne.n	800b1ae <_printf_float+0x32e>
 800b226:	e686      	b.n	800af36 <_printf_float+0xb6>
 800b228:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b22c:	f1ba 0f01 	cmp.w	sl, #1
 800b230:	dc01      	bgt.n	800b236 <_printf_float+0x3b6>
 800b232:	07db      	lsls	r3, r3, #31
 800b234:	d536      	bpl.n	800b2a4 <_printf_float+0x424>
 800b236:	2301      	movs	r3, #1
 800b238:	4642      	mov	r2, r8
 800b23a:	4631      	mov	r1, r6
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b8      	blx	r7
 800b240:	3001      	adds	r0, #1
 800b242:	f43f ae78 	beq.w	800af36 <_printf_float+0xb6>
 800b246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24a:	4631      	mov	r1, r6
 800b24c:	4628      	mov	r0, r5
 800b24e:	47b8      	blx	r7
 800b250:	3001      	adds	r0, #1
 800b252:	f43f ae70 	beq.w	800af36 <_printf_float+0xb6>
 800b256:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b25a:	2200      	movs	r2, #0
 800b25c:	2300      	movs	r3, #0
 800b25e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b262:	f7f5 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 800b266:	b9c0      	cbnz	r0, 800b29a <_printf_float+0x41a>
 800b268:	4653      	mov	r3, sl
 800b26a:	f108 0201 	add.w	r2, r8, #1
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	d10c      	bne.n	800b292 <_printf_float+0x412>
 800b278:	e65d      	b.n	800af36 <_printf_float+0xb6>
 800b27a:	2301      	movs	r3, #1
 800b27c:	465a      	mov	r2, fp
 800b27e:	4631      	mov	r1, r6
 800b280:	4628      	mov	r0, r5
 800b282:	47b8      	blx	r7
 800b284:	3001      	adds	r0, #1
 800b286:	f43f ae56 	beq.w	800af36 <_printf_float+0xb6>
 800b28a:	f108 0801 	add.w	r8, r8, #1
 800b28e:	45d0      	cmp	r8, sl
 800b290:	dbf3      	blt.n	800b27a <_printf_float+0x3fa>
 800b292:	464b      	mov	r3, r9
 800b294:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b298:	e6df      	b.n	800b05a <_printf_float+0x1da>
 800b29a:	f04f 0800 	mov.w	r8, #0
 800b29e:	f104 0b1a 	add.w	fp, r4, #26
 800b2a2:	e7f4      	b.n	800b28e <_printf_float+0x40e>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	e7e1      	b.n	800b26e <_printf_float+0x3ee>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	464a      	mov	r2, r9
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b8      	blx	r7
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	f43f ae3e 	beq.w	800af36 <_printf_float+0xb6>
 800b2ba:	f108 0801 	add.w	r8, r8, #1
 800b2be:	68e3      	ldr	r3, [r4, #12]
 800b2c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2c2:	1a5b      	subs	r3, r3, r1
 800b2c4:	4543      	cmp	r3, r8
 800b2c6:	dcf0      	bgt.n	800b2aa <_printf_float+0x42a>
 800b2c8:	e6fc      	b.n	800b0c4 <_printf_float+0x244>
 800b2ca:	f04f 0800 	mov.w	r8, #0
 800b2ce:	f104 0919 	add.w	r9, r4, #25
 800b2d2:	e7f4      	b.n	800b2be <_printf_float+0x43e>

0800b2d4 <_printf_common>:
 800b2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d8:	4616      	mov	r6, r2
 800b2da:	4698      	mov	r8, r3
 800b2dc:	688a      	ldr	r2, [r1, #8]
 800b2de:	690b      	ldr	r3, [r1, #16]
 800b2e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	bfb8      	it	lt
 800b2e8:	4613      	movlt	r3, r2
 800b2ea:	6033      	str	r3, [r6, #0]
 800b2ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	b10a      	cbz	r2, 800b2fa <_printf_common+0x26>
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	6033      	str	r3, [r6, #0]
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	0699      	lsls	r1, r3, #26
 800b2fe:	bf42      	ittt	mi
 800b300:	6833      	ldrmi	r3, [r6, #0]
 800b302:	3302      	addmi	r3, #2
 800b304:	6033      	strmi	r3, [r6, #0]
 800b306:	6825      	ldr	r5, [r4, #0]
 800b308:	f015 0506 	ands.w	r5, r5, #6
 800b30c:	d106      	bne.n	800b31c <_printf_common+0x48>
 800b30e:	f104 0a19 	add.w	sl, r4, #25
 800b312:	68e3      	ldr	r3, [r4, #12]
 800b314:	6832      	ldr	r2, [r6, #0]
 800b316:	1a9b      	subs	r3, r3, r2
 800b318:	42ab      	cmp	r3, r5
 800b31a:	dc26      	bgt.n	800b36a <_printf_common+0x96>
 800b31c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	3b00      	subs	r3, #0
 800b324:	bf18      	it	ne
 800b326:	2301      	movne	r3, #1
 800b328:	0692      	lsls	r2, r2, #26
 800b32a:	d42b      	bmi.n	800b384 <_printf_common+0xb0>
 800b32c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b330:	4641      	mov	r1, r8
 800b332:	4638      	mov	r0, r7
 800b334:	47c8      	blx	r9
 800b336:	3001      	adds	r0, #1
 800b338:	d01e      	beq.n	800b378 <_printf_common+0xa4>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	6922      	ldr	r2, [r4, #16]
 800b33e:	f003 0306 	and.w	r3, r3, #6
 800b342:	2b04      	cmp	r3, #4
 800b344:	bf02      	ittt	eq
 800b346:	68e5      	ldreq	r5, [r4, #12]
 800b348:	6833      	ldreq	r3, [r6, #0]
 800b34a:	1aed      	subeq	r5, r5, r3
 800b34c:	68a3      	ldr	r3, [r4, #8]
 800b34e:	bf0c      	ite	eq
 800b350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b354:	2500      	movne	r5, #0
 800b356:	4293      	cmp	r3, r2
 800b358:	bfc4      	itt	gt
 800b35a:	1a9b      	subgt	r3, r3, r2
 800b35c:	18ed      	addgt	r5, r5, r3
 800b35e:	2600      	movs	r6, #0
 800b360:	341a      	adds	r4, #26
 800b362:	42b5      	cmp	r5, r6
 800b364:	d11a      	bne.n	800b39c <_printf_common+0xc8>
 800b366:	2000      	movs	r0, #0
 800b368:	e008      	b.n	800b37c <_printf_common+0xa8>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4652      	mov	r2, sl
 800b36e:	4641      	mov	r1, r8
 800b370:	4638      	mov	r0, r7
 800b372:	47c8      	blx	r9
 800b374:	3001      	adds	r0, #1
 800b376:	d103      	bne.n	800b380 <_printf_common+0xac>
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b380:	3501      	adds	r5, #1
 800b382:	e7c6      	b.n	800b312 <_printf_common+0x3e>
 800b384:	18e1      	adds	r1, r4, r3
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	2030      	movs	r0, #48	@ 0x30
 800b38a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b38e:	4422      	add	r2, r4
 800b390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b398:	3302      	adds	r3, #2
 800b39a:	e7c7      	b.n	800b32c <_printf_common+0x58>
 800b39c:	2301      	movs	r3, #1
 800b39e:	4622      	mov	r2, r4
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	47c8      	blx	r9
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	d0e6      	beq.n	800b378 <_printf_common+0xa4>
 800b3aa:	3601      	adds	r6, #1
 800b3ac:	e7d9      	b.n	800b362 <_printf_common+0x8e>
	...

0800b3b0 <_printf_i>:
 800b3b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b4:	7e0f      	ldrb	r7, [r1, #24]
 800b3b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3b8:	2f78      	cmp	r7, #120	@ 0x78
 800b3ba:	4691      	mov	r9, r2
 800b3bc:	4680      	mov	r8, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	469a      	mov	sl, r3
 800b3c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3c6:	d807      	bhi.n	800b3d8 <_printf_i+0x28>
 800b3c8:	2f62      	cmp	r7, #98	@ 0x62
 800b3ca:	d80a      	bhi.n	800b3e2 <_printf_i+0x32>
 800b3cc:	2f00      	cmp	r7, #0
 800b3ce:	f000 80d1 	beq.w	800b574 <_printf_i+0x1c4>
 800b3d2:	2f58      	cmp	r7, #88	@ 0x58
 800b3d4:	f000 80b8 	beq.w	800b548 <_printf_i+0x198>
 800b3d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3e0:	e03a      	b.n	800b458 <_printf_i+0xa8>
 800b3e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3e6:	2b15      	cmp	r3, #21
 800b3e8:	d8f6      	bhi.n	800b3d8 <_printf_i+0x28>
 800b3ea:	a101      	add	r1, pc, #4	@ (adr r1, 800b3f0 <_printf_i+0x40>)
 800b3ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3f0:	0800b449 	.word	0x0800b449
 800b3f4:	0800b45d 	.word	0x0800b45d
 800b3f8:	0800b3d9 	.word	0x0800b3d9
 800b3fc:	0800b3d9 	.word	0x0800b3d9
 800b400:	0800b3d9 	.word	0x0800b3d9
 800b404:	0800b3d9 	.word	0x0800b3d9
 800b408:	0800b45d 	.word	0x0800b45d
 800b40c:	0800b3d9 	.word	0x0800b3d9
 800b410:	0800b3d9 	.word	0x0800b3d9
 800b414:	0800b3d9 	.word	0x0800b3d9
 800b418:	0800b3d9 	.word	0x0800b3d9
 800b41c:	0800b55b 	.word	0x0800b55b
 800b420:	0800b487 	.word	0x0800b487
 800b424:	0800b515 	.word	0x0800b515
 800b428:	0800b3d9 	.word	0x0800b3d9
 800b42c:	0800b3d9 	.word	0x0800b3d9
 800b430:	0800b57d 	.word	0x0800b57d
 800b434:	0800b3d9 	.word	0x0800b3d9
 800b438:	0800b487 	.word	0x0800b487
 800b43c:	0800b3d9 	.word	0x0800b3d9
 800b440:	0800b3d9 	.word	0x0800b3d9
 800b444:	0800b51d 	.word	0x0800b51d
 800b448:	6833      	ldr	r3, [r6, #0]
 800b44a:	1d1a      	adds	r2, r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6032      	str	r2, [r6, #0]
 800b450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b458:	2301      	movs	r3, #1
 800b45a:	e09c      	b.n	800b596 <_printf_i+0x1e6>
 800b45c:	6833      	ldr	r3, [r6, #0]
 800b45e:	6820      	ldr	r0, [r4, #0]
 800b460:	1d19      	adds	r1, r3, #4
 800b462:	6031      	str	r1, [r6, #0]
 800b464:	0606      	lsls	r6, r0, #24
 800b466:	d501      	bpl.n	800b46c <_printf_i+0xbc>
 800b468:	681d      	ldr	r5, [r3, #0]
 800b46a:	e003      	b.n	800b474 <_printf_i+0xc4>
 800b46c:	0645      	lsls	r5, r0, #25
 800b46e:	d5fb      	bpl.n	800b468 <_printf_i+0xb8>
 800b470:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b474:	2d00      	cmp	r5, #0
 800b476:	da03      	bge.n	800b480 <_printf_i+0xd0>
 800b478:	232d      	movs	r3, #45	@ 0x2d
 800b47a:	426d      	negs	r5, r5
 800b47c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b480:	4858      	ldr	r0, [pc, #352]	@ (800b5e4 <_printf_i+0x234>)
 800b482:	230a      	movs	r3, #10
 800b484:	e011      	b.n	800b4aa <_printf_i+0xfa>
 800b486:	6821      	ldr	r1, [r4, #0]
 800b488:	6833      	ldr	r3, [r6, #0]
 800b48a:	0608      	lsls	r0, r1, #24
 800b48c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b490:	d402      	bmi.n	800b498 <_printf_i+0xe8>
 800b492:	0649      	lsls	r1, r1, #25
 800b494:	bf48      	it	mi
 800b496:	b2ad      	uxthmi	r5, r5
 800b498:	2f6f      	cmp	r7, #111	@ 0x6f
 800b49a:	4852      	ldr	r0, [pc, #328]	@ (800b5e4 <_printf_i+0x234>)
 800b49c:	6033      	str	r3, [r6, #0]
 800b49e:	bf14      	ite	ne
 800b4a0:	230a      	movne	r3, #10
 800b4a2:	2308      	moveq	r3, #8
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4aa:	6866      	ldr	r6, [r4, #4]
 800b4ac:	60a6      	str	r6, [r4, #8]
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	db05      	blt.n	800b4be <_printf_i+0x10e>
 800b4b2:	6821      	ldr	r1, [r4, #0]
 800b4b4:	432e      	orrs	r6, r5
 800b4b6:	f021 0104 	bic.w	r1, r1, #4
 800b4ba:	6021      	str	r1, [r4, #0]
 800b4bc:	d04b      	beq.n	800b556 <_printf_i+0x1a6>
 800b4be:	4616      	mov	r6, r2
 800b4c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4c4:	fb03 5711 	mls	r7, r3, r1, r5
 800b4c8:	5dc7      	ldrb	r7, [r0, r7]
 800b4ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4ce:	462f      	mov	r7, r5
 800b4d0:	42bb      	cmp	r3, r7
 800b4d2:	460d      	mov	r5, r1
 800b4d4:	d9f4      	bls.n	800b4c0 <_printf_i+0x110>
 800b4d6:	2b08      	cmp	r3, #8
 800b4d8:	d10b      	bne.n	800b4f2 <_printf_i+0x142>
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	07df      	lsls	r7, r3, #31
 800b4de:	d508      	bpl.n	800b4f2 <_printf_i+0x142>
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	6861      	ldr	r1, [r4, #4]
 800b4e4:	4299      	cmp	r1, r3
 800b4e6:	bfde      	ittt	le
 800b4e8:	2330      	movle	r3, #48	@ 0x30
 800b4ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4f2:	1b92      	subs	r2, r2, r6
 800b4f4:	6122      	str	r2, [r4, #16]
 800b4f6:	f8cd a000 	str.w	sl, [sp]
 800b4fa:	464b      	mov	r3, r9
 800b4fc:	aa03      	add	r2, sp, #12
 800b4fe:	4621      	mov	r1, r4
 800b500:	4640      	mov	r0, r8
 800b502:	f7ff fee7 	bl	800b2d4 <_printf_common>
 800b506:	3001      	adds	r0, #1
 800b508:	d14a      	bne.n	800b5a0 <_printf_i+0x1f0>
 800b50a:	f04f 30ff 	mov.w	r0, #4294967295
 800b50e:	b004      	add	sp, #16
 800b510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	f043 0320 	orr.w	r3, r3, #32
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	4832      	ldr	r0, [pc, #200]	@ (800b5e8 <_printf_i+0x238>)
 800b51e:	2778      	movs	r7, #120	@ 0x78
 800b520:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	6831      	ldr	r1, [r6, #0]
 800b528:	061f      	lsls	r7, r3, #24
 800b52a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b52e:	d402      	bmi.n	800b536 <_printf_i+0x186>
 800b530:	065f      	lsls	r7, r3, #25
 800b532:	bf48      	it	mi
 800b534:	b2ad      	uxthmi	r5, r5
 800b536:	6031      	str	r1, [r6, #0]
 800b538:	07d9      	lsls	r1, r3, #31
 800b53a:	bf44      	itt	mi
 800b53c:	f043 0320 	orrmi.w	r3, r3, #32
 800b540:	6023      	strmi	r3, [r4, #0]
 800b542:	b11d      	cbz	r5, 800b54c <_printf_i+0x19c>
 800b544:	2310      	movs	r3, #16
 800b546:	e7ad      	b.n	800b4a4 <_printf_i+0xf4>
 800b548:	4826      	ldr	r0, [pc, #152]	@ (800b5e4 <_printf_i+0x234>)
 800b54a:	e7e9      	b.n	800b520 <_printf_i+0x170>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	f023 0320 	bic.w	r3, r3, #32
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	e7f6      	b.n	800b544 <_printf_i+0x194>
 800b556:	4616      	mov	r6, r2
 800b558:	e7bd      	b.n	800b4d6 <_printf_i+0x126>
 800b55a:	6833      	ldr	r3, [r6, #0]
 800b55c:	6825      	ldr	r5, [r4, #0]
 800b55e:	6961      	ldr	r1, [r4, #20]
 800b560:	1d18      	adds	r0, r3, #4
 800b562:	6030      	str	r0, [r6, #0]
 800b564:	062e      	lsls	r6, r5, #24
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	d501      	bpl.n	800b56e <_printf_i+0x1be>
 800b56a:	6019      	str	r1, [r3, #0]
 800b56c:	e002      	b.n	800b574 <_printf_i+0x1c4>
 800b56e:	0668      	lsls	r0, r5, #25
 800b570:	d5fb      	bpl.n	800b56a <_printf_i+0x1ba>
 800b572:	8019      	strh	r1, [r3, #0]
 800b574:	2300      	movs	r3, #0
 800b576:	6123      	str	r3, [r4, #16]
 800b578:	4616      	mov	r6, r2
 800b57a:	e7bc      	b.n	800b4f6 <_printf_i+0x146>
 800b57c:	6833      	ldr	r3, [r6, #0]
 800b57e:	1d1a      	adds	r2, r3, #4
 800b580:	6032      	str	r2, [r6, #0]
 800b582:	681e      	ldr	r6, [r3, #0]
 800b584:	6862      	ldr	r2, [r4, #4]
 800b586:	2100      	movs	r1, #0
 800b588:	4630      	mov	r0, r6
 800b58a:	f7f4 fe21 	bl	80001d0 <memchr>
 800b58e:	b108      	cbz	r0, 800b594 <_printf_i+0x1e4>
 800b590:	1b80      	subs	r0, r0, r6
 800b592:	6060      	str	r0, [r4, #4]
 800b594:	6863      	ldr	r3, [r4, #4]
 800b596:	6123      	str	r3, [r4, #16]
 800b598:	2300      	movs	r3, #0
 800b59a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b59e:	e7aa      	b.n	800b4f6 <_printf_i+0x146>
 800b5a0:	6923      	ldr	r3, [r4, #16]
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	47d0      	blx	sl
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	d0ad      	beq.n	800b50a <_printf_i+0x15a>
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	079b      	lsls	r3, r3, #30
 800b5b2:	d413      	bmi.n	800b5dc <_printf_i+0x22c>
 800b5b4:	68e0      	ldr	r0, [r4, #12]
 800b5b6:	9b03      	ldr	r3, [sp, #12]
 800b5b8:	4298      	cmp	r0, r3
 800b5ba:	bfb8      	it	lt
 800b5bc:	4618      	movlt	r0, r3
 800b5be:	e7a6      	b.n	800b50e <_printf_i+0x15e>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	4632      	mov	r2, r6
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	47d0      	blx	sl
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	d09d      	beq.n	800b50a <_printf_i+0x15a>
 800b5ce:	3501      	adds	r5, #1
 800b5d0:	68e3      	ldr	r3, [r4, #12]
 800b5d2:	9903      	ldr	r1, [sp, #12]
 800b5d4:	1a5b      	subs	r3, r3, r1
 800b5d6:	42ab      	cmp	r3, r5
 800b5d8:	dcf2      	bgt.n	800b5c0 <_printf_i+0x210>
 800b5da:	e7eb      	b.n	800b5b4 <_printf_i+0x204>
 800b5dc:	2500      	movs	r5, #0
 800b5de:	f104 0619 	add.w	r6, r4, #25
 800b5e2:	e7f5      	b.n	800b5d0 <_printf_i+0x220>
 800b5e4:	0800f9ad 	.word	0x0800f9ad
 800b5e8:	0800f9be 	.word	0x0800f9be

0800b5ec <_scanf_float>:
 800b5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	b087      	sub	sp, #28
 800b5f2:	4691      	mov	r9, r2
 800b5f4:	9303      	str	r3, [sp, #12]
 800b5f6:	688b      	ldr	r3, [r1, #8]
 800b5f8:	1e5a      	subs	r2, r3, #1
 800b5fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b5fe:	bf81      	itttt	hi
 800b600:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b604:	eb03 0b05 	addhi.w	fp, r3, r5
 800b608:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b60c:	608b      	strhi	r3, [r1, #8]
 800b60e:	680b      	ldr	r3, [r1, #0]
 800b610:	460a      	mov	r2, r1
 800b612:	f04f 0500 	mov.w	r5, #0
 800b616:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b61a:	f842 3b1c 	str.w	r3, [r2], #28
 800b61e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b622:	4680      	mov	r8, r0
 800b624:	460c      	mov	r4, r1
 800b626:	bf98      	it	ls
 800b628:	f04f 0b00 	movls.w	fp, #0
 800b62c:	9201      	str	r2, [sp, #4]
 800b62e:	4616      	mov	r6, r2
 800b630:	46aa      	mov	sl, r5
 800b632:	462f      	mov	r7, r5
 800b634:	9502      	str	r5, [sp, #8]
 800b636:	68a2      	ldr	r2, [r4, #8]
 800b638:	b15a      	cbz	r2, 800b652 <_scanf_float+0x66>
 800b63a:	f8d9 3000 	ldr.w	r3, [r9]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b4e      	cmp	r3, #78	@ 0x4e
 800b642:	d863      	bhi.n	800b70c <_scanf_float+0x120>
 800b644:	2b40      	cmp	r3, #64	@ 0x40
 800b646:	d83b      	bhi.n	800b6c0 <_scanf_float+0xd4>
 800b648:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b64c:	b2c8      	uxtb	r0, r1
 800b64e:	280e      	cmp	r0, #14
 800b650:	d939      	bls.n	800b6c6 <_scanf_float+0xda>
 800b652:	b11f      	cbz	r7, 800b65c <_scanf_float+0x70>
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b65a:	6023      	str	r3, [r4, #0]
 800b65c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b660:	f1ba 0f01 	cmp.w	sl, #1
 800b664:	f200 8114 	bhi.w	800b890 <_scanf_float+0x2a4>
 800b668:	9b01      	ldr	r3, [sp, #4]
 800b66a:	429e      	cmp	r6, r3
 800b66c:	f200 8105 	bhi.w	800b87a <_scanf_float+0x28e>
 800b670:	2001      	movs	r0, #1
 800b672:	b007      	add	sp, #28
 800b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b678:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b67c:	2a0d      	cmp	r2, #13
 800b67e:	d8e8      	bhi.n	800b652 <_scanf_float+0x66>
 800b680:	a101      	add	r1, pc, #4	@ (adr r1, 800b688 <_scanf_float+0x9c>)
 800b682:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b686:	bf00      	nop
 800b688:	0800b7d1 	.word	0x0800b7d1
 800b68c:	0800b653 	.word	0x0800b653
 800b690:	0800b653 	.word	0x0800b653
 800b694:	0800b653 	.word	0x0800b653
 800b698:	0800b82d 	.word	0x0800b82d
 800b69c:	0800b807 	.word	0x0800b807
 800b6a0:	0800b653 	.word	0x0800b653
 800b6a4:	0800b653 	.word	0x0800b653
 800b6a8:	0800b7df 	.word	0x0800b7df
 800b6ac:	0800b653 	.word	0x0800b653
 800b6b0:	0800b653 	.word	0x0800b653
 800b6b4:	0800b653 	.word	0x0800b653
 800b6b8:	0800b653 	.word	0x0800b653
 800b6bc:	0800b79b 	.word	0x0800b79b
 800b6c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b6c4:	e7da      	b.n	800b67c <_scanf_float+0x90>
 800b6c6:	290e      	cmp	r1, #14
 800b6c8:	d8c3      	bhi.n	800b652 <_scanf_float+0x66>
 800b6ca:	a001      	add	r0, pc, #4	@ (adr r0, 800b6d0 <_scanf_float+0xe4>)
 800b6cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b6d0:	0800b78b 	.word	0x0800b78b
 800b6d4:	0800b653 	.word	0x0800b653
 800b6d8:	0800b78b 	.word	0x0800b78b
 800b6dc:	0800b81b 	.word	0x0800b81b
 800b6e0:	0800b653 	.word	0x0800b653
 800b6e4:	0800b72d 	.word	0x0800b72d
 800b6e8:	0800b771 	.word	0x0800b771
 800b6ec:	0800b771 	.word	0x0800b771
 800b6f0:	0800b771 	.word	0x0800b771
 800b6f4:	0800b771 	.word	0x0800b771
 800b6f8:	0800b771 	.word	0x0800b771
 800b6fc:	0800b771 	.word	0x0800b771
 800b700:	0800b771 	.word	0x0800b771
 800b704:	0800b771 	.word	0x0800b771
 800b708:	0800b771 	.word	0x0800b771
 800b70c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b70e:	d809      	bhi.n	800b724 <_scanf_float+0x138>
 800b710:	2b60      	cmp	r3, #96	@ 0x60
 800b712:	d8b1      	bhi.n	800b678 <_scanf_float+0x8c>
 800b714:	2b54      	cmp	r3, #84	@ 0x54
 800b716:	d07b      	beq.n	800b810 <_scanf_float+0x224>
 800b718:	2b59      	cmp	r3, #89	@ 0x59
 800b71a:	d19a      	bne.n	800b652 <_scanf_float+0x66>
 800b71c:	2d07      	cmp	r5, #7
 800b71e:	d198      	bne.n	800b652 <_scanf_float+0x66>
 800b720:	2508      	movs	r5, #8
 800b722:	e02f      	b.n	800b784 <_scanf_float+0x198>
 800b724:	2b74      	cmp	r3, #116	@ 0x74
 800b726:	d073      	beq.n	800b810 <_scanf_float+0x224>
 800b728:	2b79      	cmp	r3, #121	@ 0x79
 800b72a:	e7f6      	b.n	800b71a <_scanf_float+0x12e>
 800b72c:	6821      	ldr	r1, [r4, #0]
 800b72e:	05c8      	lsls	r0, r1, #23
 800b730:	d51e      	bpl.n	800b770 <_scanf_float+0x184>
 800b732:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b736:	6021      	str	r1, [r4, #0]
 800b738:	3701      	adds	r7, #1
 800b73a:	f1bb 0f00 	cmp.w	fp, #0
 800b73e:	d003      	beq.n	800b748 <_scanf_float+0x15c>
 800b740:	3201      	adds	r2, #1
 800b742:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b746:	60a2      	str	r2, [r4, #8]
 800b748:	68a3      	ldr	r3, [r4, #8]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	60a3      	str	r3, [r4, #8]
 800b74e:	6923      	ldr	r3, [r4, #16]
 800b750:	3301      	adds	r3, #1
 800b752:	6123      	str	r3, [r4, #16]
 800b754:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b758:	3b01      	subs	r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f8c9 3004 	str.w	r3, [r9, #4]
 800b760:	f340 8082 	ble.w	800b868 <_scanf_float+0x27c>
 800b764:	f8d9 3000 	ldr.w	r3, [r9]
 800b768:	3301      	adds	r3, #1
 800b76a:	f8c9 3000 	str.w	r3, [r9]
 800b76e:	e762      	b.n	800b636 <_scanf_float+0x4a>
 800b770:	eb1a 0105 	adds.w	r1, sl, r5
 800b774:	f47f af6d 	bne.w	800b652 <_scanf_float+0x66>
 800b778:	6822      	ldr	r2, [r4, #0]
 800b77a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b77e:	6022      	str	r2, [r4, #0]
 800b780:	460d      	mov	r5, r1
 800b782:	468a      	mov	sl, r1
 800b784:	f806 3b01 	strb.w	r3, [r6], #1
 800b788:	e7de      	b.n	800b748 <_scanf_float+0x15c>
 800b78a:	6822      	ldr	r2, [r4, #0]
 800b78c:	0610      	lsls	r0, r2, #24
 800b78e:	f57f af60 	bpl.w	800b652 <_scanf_float+0x66>
 800b792:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b796:	6022      	str	r2, [r4, #0]
 800b798:	e7f4      	b.n	800b784 <_scanf_float+0x198>
 800b79a:	f1ba 0f00 	cmp.w	sl, #0
 800b79e:	d10c      	bne.n	800b7ba <_scanf_float+0x1ce>
 800b7a0:	b977      	cbnz	r7, 800b7c0 <_scanf_float+0x1d4>
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b7a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b7ac:	d108      	bne.n	800b7c0 <_scanf_float+0x1d4>
 800b7ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7b2:	6022      	str	r2, [r4, #0]
 800b7b4:	f04f 0a01 	mov.w	sl, #1
 800b7b8:	e7e4      	b.n	800b784 <_scanf_float+0x198>
 800b7ba:	f1ba 0f02 	cmp.w	sl, #2
 800b7be:	d050      	beq.n	800b862 <_scanf_float+0x276>
 800b7c0:	2d01      	cmp	r5, #1
 800b7c2:	d002      	beq.n	800b7ca <_scanf_float+0x1de>
 800b7c4:	2d04      	cmp	r5, #4
 800b7c6:	f47f af44 	bne.w	800b652 <_scanf_float+0x66>
 800b7ca:	3501      	adds	r5, #1
 800b7cc:	b2ed      	uxtb	r5, r5
 800b7ce:	e7d9      	b.n	800b784 <_scanf_float+0x198>
 800b7d0:	f1ba 0f01 	cmp.w	sl, #1
 800b7d4:	f47f af3d 	bne.w	800b652 <_scanf_float+0x66>
 800b7d8:	f04f 0a02 	mov.w	sl, #2
 800b7dc:	e7d2      	b.n	800b784 <_scanf_float+0x198>
 800b7de:	b975      	cbnz	r5, 800b7fe <_scanf_float+0x212>
 800b7e0:	2f00      	cmp	r7, #0
 800b7e2:	f47f af37 	bne.w	800b654 <_scanf_float+0x68>
 800b7e6:	6822      	ldr	r2, [r4, #0]
 800b7e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b7ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b7f0:	f040 8103 	bne.w	800b9fa <_scanf_float+0x40e>
 800b7f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7f8:	6022      	str	r2, [r4, #0]
 800b7fa:	2501      	movs	r5, #1
 800b7fc:	e7c2      	b.n	800b784 <_scanf_float+0x198>
 800b7fe:	2d03      	cmp	r5, #3
 800b800:	d0e3      	beq.n	800b7ca <_scanf_float+0x1de>
 800b802:	2d05      	cmp	r5, #5
 800b804:	e7df      	b.n	800b7c6 <_scanf_float+0x1da>
 800b806:	2d02      	cmp	r5, #2
 800b808:	f47f af23 	bne.w	800b652 <_scanf_float+0x66>
 800b80c:	2503      	movs	r5, #3
 800b80e:	e7b9      	b.n	800b784 <_scanf_float+0x198>
 800b810:	2d06      	cmp	r5, #6
 800b812:	f47f af1e 	bne.w	800b652 <_scanf_float+0x66>
 800b816:	2507      	movs	r5, #7
 800b818:	e7b4      	b.n	800b784 <_scanf_float+0x198>
 800b81a:	6822      	ldr	r2, [r4, #0]
 800b81c:	0591      	lsls	r1, r2, #22
 800b81e:	f57f af18 	bpl.w	800b652 <_scanf_float+0x66>
 800b822:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b826:	6022      	str	r2, [r4, #0]
 800b828:	9702      	str	r7, [sp, #8]
 800b82a:	e7ab      	b.n	800b784 <_scanf_float+0x198>
 800b82c:	6822      	ldr	r2, [r4, #0]
 800b82e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b832:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b836:	d005      	beq.n	800b844 <_scanf_float+0x258>
 800b838:	0550      	lsls	r0, r2, #21
 800b83a:	f57f af0a 	bpl.w	800b652 <_scanf_float+0x66>
 800b83e:	2f00      	cmp	r7, #0
 800b840:	f000 80db 	beq.w	800b9fa <_scanf_float+0x40e>
 800b844:	0591      	lsls	r1, r2, #22
 800b846:	bf58      	it	pl
 800b848:	9902      	ldrpl	r1, [sp, #8]
 800b84a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b84e:	bf58      	it	pl
 800b850:	1a79      	subpl	r1, r7, r1
 800b852:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b856:	bf58      	it	pl
 800b858:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b85c:	6022      	str	r2, [r4, #0]
 800b85e:	2700      	movs	r7, #0
 800b860:	e790      	b.n	800b784 <_scanf_float+0x198>
 800b862:	f04f 0a03 	mov.w	sl, #3
 800b866:	e78d      	b.n	800b784 <_scanf_float+0x198>
 800b868:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b86c:	4649      	mov	r1, r9
 800b86e:	4640      	mov	r0, r8
 800b870:	4798      	blx	r3
 800b872:	2800      	cmp	r0, #0
 800b874:	f43f aedf 	beq.w	800b636 <_scanf_float+0x4a>
 800b878:	e6eb      	b.n	800b652 <_scanf_float+0x66>
 800b87a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b87e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b882:	464a      	mov	r2, r9
 800b884:	4640      	mov	r0, r8
 800b886:	4798      	blx	r3
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	3b01      	subs	r3, #1
 800b88c:	6123      	str	r3, [r4, #16]
 800b88e:	e6eb      	b.n	800b668 <_scanf_float+0x7c>
 800b890:	1e6b      	subs	r3, r5, #1
 800b892:	2b06      	cmp	r3, #6
 800b894:	d824      	bhi.n	800b8e0 <_scanf_float+0x2f4>
 800b896:	2d02      	cmp	r5, #2
 800b898:	d836      	bhi.n	800b908 <_scanf_float+0x31c>
 800b89a:	9b01      	ldr	r3, [sp, #4]
 800b89c:	429e      	cmp	r6, r3
 800b89e:	f67f aee7 	bls.w	800b670 <_scanf_float+0x84>
 800b8a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8aa:	464a      	mov	r2, r9
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	4798      	blx	r3
 800b8b0:	6923      	ldr	r3, [r4, #16]
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	6123      	str	r3, [r4, #16]
 800b8b6:	e7f0      	b.n	800b89a <_scanf_float+0x2ae>
 800b8b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b8c0:	464a      	mov	r2, r9
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	4798      	blx	r3
 800b8c6:	6923      	ldr	r3, [r4, #16]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8d0:	fa5f fa8a 	uxtb.w	sl, sl
 800b8d4:	f1ba 0f02 	cmp.w	sl, #2
 800b8d8:	d1ee      	bne.n	800b8b8 <_scanf_float+0x2cc>
 800b8da:	3d03      	subs	r5, #3
 800b8dc:	b2ed      	uxtb	r5, r5
 800b8de:	1b76      	subs	r6, r6, r5
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	05da      	lsls	r2, r3, #23
 800b8e4:	d530      	bpl.n	800b948 <_scanf_float+0x35c>
 800b8e6:	055b      	lsls	r3, r3, #21
 800b8e8:	d511      	bpl.n	800b90e <_scanf_float+0x322>
 800b8ea:	9b01      	ldr	r3, [sp, #4]
 800b8ec:	429e      	cmp	r6, r3
 800b8ee:	f67f aebf 	bls.w	800b670 <_scanf_float+0x84>
 800b8f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8fa:	464a      	mov	r2, r9
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	4798      	blx	r3
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	3b01      	subs	r3, #1
 800b904:	6123      	str	r3, [r4, #16]
 800b906:	e7f0      	b.n	800b8ea <_scanf_float+0x2fe>
 800b908:	46aa      	mov	sl, r5
 800b90a:	46b3      	mov	fp, r6
 800b90c:	e7de      	b.n	800b8cc <_scanf_float+0x2e0>
 800b90e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	2965      	cmp	r1, #101	@ 0x65
 800b916:	f103 33ff 	add.w	r3, r3, #4294967295
 800b91a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b91e:	6123      	str	r3, [r4, #16]
 800b920:	d00c      	beq.n	800b93c <_scanf_float+0x350>
 800b922:	2945      	cmp	r1, #69	@ 0x45
 800b924:	d00a      	beq.n	800b93c <_scanf_float+0x350>
 800b926:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b92a:	464a      	mov	r2, r9
 800b92c:	4640      	mov	r0, r8
 800b92e:	4798      	blx	r3
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b936:	3b01      	subs	r3, #1
 800b938:	1eb5      	subs	r5, r6, #2
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b940:	464a      	mov	r2, r9
 800b942:	4640      	mov	r0, r8
 800b944:	4798      	blx	r3
 800b946:	462e      	mov	r6, r5
 800b948:	6822      	ldr	r2, [r4, #0]
 800b94a:	f012 0210 	ands.w	r2, r2, #16
 800b94e:	d001      	beq.n	800b954 <_scanf_float+0x368>
 800b950:	2000      	movs	r0, #0
 800b952:	e68e      	b.n	800b672 <_scanf_float+0x86>
 800b954:	7032      	strb	r2, [r6, #0]
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b95c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b960:	d125      	bne.n	800b9ae <_scanf_float+0x3c2>
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	429f      	cmp	r7, r3
 800b966:	d00a      	beq.n	800b97e <_scanf_float+0x392>
 800b968:	1bda      	subs	r2, r3, r7
 800b96a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b96e:	429e      	cmp	r6, r3
 800b970:	bf28      	it	cs
 800b972:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b976:	4922      	ldr	r1, [pc, #136]	@ (800ba00 <_scanf_float+0x414>)
 800b978:	4630      	mov	r0, r6
 800b97a:	f000 f977 	bl	800bc6c <siprintf>
 800b97e:	9901      	ldr	r1, [sp, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	4640      	mov	r0, r8
 800b984:	f002 fd24 	bl	800e3d0 <_strtod_r>
 800b988:	9b03      	ldr	r3, [sp, #12]
 800b98a:	6821      	ldr	r1, [r4, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f011 0f02 	tst.w	r1, #2
 800b992:	ec57 6b10 	vmov	r6, r7, d0
 800b996:	f103 0204 	add.w	r2, r3, #4
 800b99a:	d015      	beq.n	800b9c8 <_scanf_float+0x3dc>
 800b99c:	9903      	ldr	r1, [sp, #12]
 800b99e:	600a      	str	r2, [r1, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	e9c3 6700 	strd	r6, r7, [r3]
 800b9a6:	68e3      	ldr	r3, [r4, #12]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	60e3      	str	r3, [r4, #12]
 800b9ac:	e7d0      	b.n	800b950 <_scanf_float+0x364>
 800b9ae:	9b04      	ldr	r3, [sp, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d0e4      	beq.n	800b97e <_scanf_float+0x392>
 800b9b4:	9905      	ldr	r1, [sp, #20]
 800b9b6:	230a      	movs	r3, #10
 800b9b8:	3101      	adds	r1, #1
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	f002 fd88 	bl	800e4d0 <_strtol_r>
 800b9c0:	9b04      	ldr	r3, [sp, #16]
 800b9c2:	9e05      	ldr	r6, [sp, #20]
 800b9c4:	1ac2      	subs	r2, r0, r3
 800b9c6:	e7d0      	b.n	800b96a <_scanf_float+0x37e>
 800b9c8:	f011 0f04 	tst.w	r1, #4
 800b9cc:	9903      	ldr	r1, [sp, #12]
 800b9ce:	600a      	str	r2, [r1, #0]
 800b9d0:	d1e6      	bne.n	800b9a0 <_scanf_float+0x3b4>
 800b9d2:	681d      	ldr	r5, [r3, #0]
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	463b      	mov	r3, r7
 800b9d8:	4630      	mov	r0, r6
 800b9da:	4639      	mov	r1, r7
 800b9dc:	f7f5 f8a6 	bl	8000b2c <__aeabi_dcmpun>
 800b9e0:	b128      	cbz	r0, 800b9ee <_scanf_float+0x402>
 800b9e2:	4808      	ldr	r0, [pc, #32]	@ (800ba04 <_scanf_float+0x418>)
 800b9e4:	f000 faca 	bl	800bf7c <nanf>
 800b9e8:	ed85 0a00 	vstr	s0, [r5]
 800b9ec:	e7db      	b.n	800b9a6 <_scanf_float+0x3ba>
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	f7f5 f8f9 	bl	8000be8 <__aeabi_d2f>
 800b9f6:	6028      	str	r0, [r5, #0]
 800b9f8:	e7d5      	b.n	800b9a6 <_scanf_float+0x3ba>
 800b9fa:	2700      	movs	r7, #0
 800b9fc:	e62e      	b.n	800b65c <_scanf_float+0x70>
 800b9fe:	bf00      	nop
 800ba00:	0800f9cf 	.word	0x0800f9cf
 800ba04:	0800fa0f 	.word	0x0800fa0f

0800ba08 <std>:
 800ba08:	2300      	movs	r3, #0
 800ba0a:	b510      	push	{r4, lr}
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ba12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba16:	6083      	str	r3, [r0, #8]
 800ba18:	8181      	strh	r1, [r0, #12]
 800ba1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba1c:	81c2      	strh	r2, [r0, #14]
 800ba1e:	6183      	str	r3, [r0, #24]
 800ba20:	4619      	mov	r1, r3
 800ba22:	2208      	movs	r2, #8
 800ba24:	305c      	adds	r0, #92	@ 0x5c
 800ba26:	f000 fa1b 	bl	800be60 <memset>
 800ba2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba60 <std+0x58>)
 800ba2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba64 <std+0x5c>)
 800ba30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba32:	4b0d      	ldr	r3, [pc, #52]	@ (800ba68 <std+0x60>)
 800ba34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba36:	4b0d      	ldr	r3, [pc, #52]	@ (800ba6c <std+0x64>)
 800ba38:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba70 <std+0x68>)
 800ba3c:	6224      	str	r4, [r4, #32]
 800ba3e:	429c      	cmp	r4, r3
 800ba40:	d006      	beq.n	800ba50 <std+0x48>
 800ba42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba46:	4294      	cmp	r4, r2
 800ba48:	d002      	beq.n	800ba50 <std+0x48>
 800ba4a:	33d0      	adds	r3, #208	@ 0xd0
 800ba4c:	429c      	cmp	r4, r3
 800ba4e:	d105      	bne.n	800ba5c <std+0x54>
 800ba50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba58:	f000 ba7e 	b.w	800bf58 <__retarget_lock_init_recursive>
 800ba5c:	bd10      	pop	{r4, pc}
 800ba5e:	bf00      	nop
 800ba60:	0800bcb1 	.word	0x0800bcb1
 800ba64:	0800bcd3 	.word	0x0800bcd3
 800ba68:	0800bd0b 	.word	0x0800bd0b
 800ba6c:	0800bd2f 	.word	0x0800bd2f
 800ba70:	20002e6c 	.word	0x20002e6c

0800ba74 <stdio_exit_handler>:
 800ba74:	4a02      	ldr	r2, [pc, #8]	@ (800ba80 <stdio_exit_handler+0xc>)
 800ba76:	4903      	ldr	r1, [pc, #12]	@ (800ba84 <stdio_exit_handler+0x10>)
 800ba78:	4803      	ldr	r0, [pc, #12]	@ (800ba88 <stdio_exit_handler+0x14>)
 800ba7a:	f000 b869 	b.w	800bb50 <_fwalk_sglue>
 800ba7e:	bf00      	nop
 800ba80:	2000005c 	.word	0x2000005c
 800ba84:	0800eb11 	.word	0x0800eb11
 800ba88:	2000006c 	.word	0x2000006c

0800ba8c <cleanup_stdio>:
 800ba8c:	6841      	ldr	r1, [r0, #4]
 800ba8e:	4b0c      	ldr	r3, [pc, #48]	@ (800bac0 <cleanup_stdio+0x34>)
 800ba90:	4299      	cmp	r1, r3
 800ba92:	b510      	push	{r4, lr}
 800ba94:	4604      	mov	r4, r0
 800ba96:	d001      	beq.n	800ba9c <cleanup_stdio+0x10>
 800ba98:	f003 f83a 	bl	800eb10 <_fflush_r>
 800ba9c:	68a1      	ldr	r1, [r4, #8]
 800ba9e:	4b09      	ldr	r3, [pc, #36]	@ (800bac4 <cleanup_stdio+0x38>)
 800baa0:	4299      	cmp	r1, r3
 800baa2:	d002      	beq.n	800baaa <cleanup_stdio+0x1e>
 800baa4:	4620      	mov	r0, r4
 800baa6:	f003 f833 	bl	800eb10 <_fflush_r>
 800baaa:	68e1      	ldr	r1, [r4, #12]
 800baac:	4b06      	ldr	r3, [pc, #24]	@ (800bac8 <cleanup_stdio+0x3c>)
 800baae:	4299      	cmp	r1, r3
 800bab0:	d004      	beq.n	800babc <cleanup_stdio+0x30>
 800bab2:	4620      	mov	r0, r4
 800bab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bab8:	f003 b82a 	b.w	800eb10 <_fflush_r>
 800babc:	bd10      	pop	{r4, pc}
 800babe:	bf00      	nop
 800bac0:	20002e6c 	.word	0x20002e6c
 800bac4:	20002ed4 	.word	0x20002ed4
 800bac8:	20002f3c 	.word	0x20002f3c

0800bacc <global_stdio_init.part.0>:
 800bacc:	b510      	push	{r4, lr}
 800bace:	4b0b      	ldr	r3, [pc, #44]	@ (800bafc <global_stdio_init.part.0+0x30>)
 800bad0:	4c0b      	ldr	r4, [pc, #44]	@ (800bb00 <global_stdio_init.part.0+0x34>)
 800bad2:	4a0c      	ldr	r2, [pc, #48]	@ (800bb04 <global_stdio_init.part.0+0x38>)
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	4620      	mov	r0, r4
 800bad8:	2200      	movs	r2, #0
 800bada:	2104      	movs	r1, #4
 800badc:	f7ff ff94 	bl	800ba08 <std>
 800bae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bae4:	2201      	movs	r2, #1
 800bae6:	2109      	movs	r1, #9
 800bae8:	f7ff ff8e 	bl	800ba08 <std>
 800baec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800baf0:	2202      	movs	r2, #2
 800baf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baf6:	2112      	movs	r1, #18
 800baf8:	f7ff bf86 	b.w	800ba08 <std>
 800bafc:	20002fa4 	.word	0x20002fa4
 800bb00:	20002e6c 	.word	0x20002e6c
 800bb04:	0800ba75 	.word	0x0800ba75

0800bb08 <__sfp_lock_acquire>:
 800bb08:	4801      	ldr	r0, [pc, #4]	@ (800bb10 <__sfp_lock_acquire+0x8>)
 800bb0a:	f000 ba26 	b.w	800bf5a <__retarget_lock_acquire_recursive>
 800bb0e:	bf00      	nop
 800bb10:	20002fad 	.word	0x20002fad

0800bb14 <__sfp_lock_release>:
 800bb14:	4801      	ldr	r0, [pc, #4]	@ (800bb1c <__sfp_lock_release+0x8>)
 800bb16:	f000 ba21 	b.w	800bf5c <__retarget_lock_release_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	20002fad 	.word	0x20002fad

0800bb20 <__sinit>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	4604      	mov	r4, r0
 800bb24:	f7ff fff0 	bl	800bb08 <__sfp_lock_acquire>
 800bb28:	6a23      	ldr	r3, [r4, #32]
 800bb2a:	b11b      	cbz	r3, 800bb34 <__sinit+0x14>
 800bb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb30:	f7ff bff0 	b.w	800bb14 <__sfp_lock_release>
 800bb34:	4b04      	ldr	r3, [pc, #16]	@ (800bb48 <__sinit+0x28>)
 800bb36:	6223      	str	r3, [r4, #32]
 800bb38:	4b04      	ldr	r3, [pc, #16]	@ (800bb4c <__sinit+0x2c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1f5      	bne.n	800bb2c <__sinit+0xc>
 800bb40:	f7ff ffc4 	bl	800bacc <global_stdio_init.part.0>
 800bb44:	e7f2      	b.n	800bb2c <__sinit+0xc>
 800bb46:	bf00      	nop
 800bb48:	0800ba8d 	.word	0x0800ba8d
 800bb4c:	20002fa4 	.word	0x20002fa4

0800bb50 <_fwalk_sglue>:
 800bb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb54:	4607      	mov	r7, r0
 800bb56:	4688      	mov	r8, r1
 800bb58:	4614      	mov	r4, r2
 800bb5a:	2600      	movs	r6, #0
 800bb5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb60:	f1b9 0901 	subs.w	r9, r9, #1
 800bb64:	d505      	bpl.n	800bb72 <_fwalk_sglue+0x22>
 800bb66:	6824      	ldr	r4, [r4, #0]
 800bb68:	2c00      	cmp	r4, #0
 800bb6a:	d1f7      	bne.n	800bb5c <_fwalk_sglue+0xc>
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb72:	89ab      	ldrh	r3, [r5, #12]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d907      	bls.n	800bb88 <_fwalk_sglue+0x38>
 800bb78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	d003      	beq.n	800bb88 <_fwalk_sglue+0x38>
 800bb80:	4629      	mov	r1, r5
 800bb82:	4638      	mov	r0, r7
 800bb84:	47c0      	blx	r8
 800bb86:	4306      	orrs	r6, r0
 800bb88:	3568      	adds	r5, #104	@ 0x68
 800bb8a:	e7e9      	b.n	800bb60 <_fwalk_sglue+0x10>

0800bb8c <iprintf>:
 800bb8c:	b40f      	push	{r0, r1, r2, r3}
 800bb8e:	b507      	push	{r0, r1, r2, lr}
 800bb90:	4906      	ldr	r1, [pc, #24]	@ (800bbac <iprintf+0x20>)
 800bb92:	ab04      	add	r3, sp, #16
 800bb94:	6808      	ldr	r0, [r1, #0]
 800bb96:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb9a:	6881      	ldr	r1, [r0, #8]
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	f002 fe1b 	bl	800e7d8 <_vfiprintf_r>
 800bba2:	b003      	add	sp, #12
 800bba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bba8:	b004      	add	sp, #16
 800bbaa:	4770      	bx	lr
 800bbac:	20000068 	.word	0x20000068

0800bbb0 <_puts_r>:
 800bbb0:	6a03      	ldr	r3, [r0, #32]
 800bbb2:	b570      	push	{r4, r5, r6, lr}
 800bbb4:	6884      	ldr	r4, [r0, #8]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	460e      	mov	r6, r1
 800bbba:	b90b      	cbnz	r3, 800bbc0 <_puts_r+0x10>
 800bbbc:	f7ff ffb0 	bl	800bb20 <__sinit>
 800bbc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbc2:	07db      	lsls	r3, r3, #31
 800bbc4:	d405      	bmi.n	800bbd2 <_puts_r+0x22>
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	0598      	lsls	r0, r3, #22
 800bbca:	d402      	bmi.n	800bbd2 <_puts_r+0x22>
 800bbcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbce:	f000 f9c4 	bl	800bf5a <__retarget_lock_acquire_recursive>
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	0719      	lsls	r1, r3, #28
 800bbd6:	d502      	bpl.n	800bbde <_puts_r+0x2e>
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d135      	bne.n	800bc4a <_puts_r+0x9a>
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f000 f8e7 	bl	800bdb4 <__swsetup_r>
 800bbe6:	b380      	cbz	r0, 800bc4a <_puts_r+0x9a>
 800bbe8:	f04f 35ff 	mov.w	r5, #4294967295
 800bbec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbee:	07da      	lsls	r2, r3, #31
 800bbf0:	d405      	bmi.n	800bbfe <_puts_r+0x4e>
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	059b      	lsls	r3, r3, #22
 800bbf6:	d402      	bmi.n	800bbfe <_puts_r+0x4e>
 800bbf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbfa:	f000 f9af 	bl	800bf5c <__retarget_lock_release_recursive>
 800bbfe:	4628      	mov	r0, r5
 800bc00:	bd70      	pop	{r4, r5, r6, pc}
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da04      	bge.n	800bc10 <_puts_r+0x60>
 800bc06:	69a2      	ldr	r2, [r4, #24]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	dc17      	bgt.n	800bc3c <_puts_r+0x8c>
 800bc0c:	290a      	cmp	r1, #10
 800bc0e:	d015      	beq.n	800bc3c <_puts_r+0x8c>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	6022      	str	r2, [r4, #0]
 800bc16:	7019      	strb	r1, [r3, #0]
 800bc18:	68a3      	ldr	r3, [r4, #8]
 800bc1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	60a3      	str	r3, [r4, #8]
 800bc22:	2900      	cmp	r1, #0
 800bc24:	d1ed      	bne.n	800bc02 <_puts_r+0x52>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	da11      	bge.n	800bc4e <_puts_r+0x9e>
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	210a      	movs	r1, #10
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 f881 	bl	800bd36 <__swbuf_r>
 800bc34:	3001      	adds	r0, #1
 800bc36:	d0d7      	beq.n	800bbe8 <_puts_r+0x38>
 800bc38:	250a      	movs	r5, #10
 800bc3a:	e7d7      	b.n	800bbec <_puts_r+0x3c>
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f000 f879 	bl	800bd36 <__swbuf_r>
 800bc44:	3001      	adds	r0, #1
 800bc46:	d1e7      	bne.n	800bc18 <_puts_r+0x68>
 800bc48:	e7ce      	b.n	800bbe8 <_puts_r+0x38>
 800bc4a:	3e01      	subs	r6, #1
 800bc4c:	e7e4      	b.n	800bc18 <_puts_r+0x68>
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	1c5a      	adds	r2, r3, #1
 800bc52:	6022      	str	r2, [r4, #0]
 800bc54:	220a      	movs	r2, #10
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	e7ee      	b.n	800bc38 <_puts_r+0x88>
	...

0800bc5c <puts>:
 800bc5c:	4b02      	ldr	r3, [pc, #8]	@ (800bc68 <puts+0xc>)
 800bc5e:	4601      	mov	r1, r0
 800bc60:	6818      	ldr	r0, [r3, #0]
 800bc62:	f7ff bfa5 	b.w	800bbb0 <_puts_r>
 800bc66:	bf00      	nop
 800bc68:	20000068 	.word	0x20000068

0800bc6c <siprintf>:
 800bc6c:	b40e      	push	{r1, r2, r3}
 800bc6e:	b510      	push	{r4, lr}
 800bc70:	b09d      	sub	sp, #116	@ 0x74
 800bc72:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bc74:	9002      	str	r0, [sp, #8]
 800bc76:	9006      	str	r0, [sp, #24]
 800bc78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc7c:	480a      	ldr	r0, [pc, #40]	@ (800bca8 <siprintf+0x3c>)
 800bc7e:	9107      	str	r1, [sp, #28]
 800bc80:	9104      	str	r1, [sp, #16]
 800bc82:	490a      	ldr	r1, [pc, #40]	@ (800bcac <siprintf+0x40>)
 800bc84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc88:	9105      	str	r1, [sp, #20]
 800bc8a:	2400      	movs	r4, #0
 800bc8c:	a902      	add	r1, sp, #8
 800bc8e:	6800      	ldr	r0, [r0, #0]
 800bc90:	9301      	str	r3, [sp, #4]
 800bc92:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bc94:	f002 fc7a 	bl	800e58c <_svfiprintf_r>
 800bc98:	9b02      	ldr	r3, [sp, #8]
 800bc9a:	701c      	strb	r4, [r3, #0]
 800bc9c:	b01d      	add	sp, #116	@ 0x74
 800bc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bca2:	b003      	add	sp, #12
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	20000068 	.word	0x20000068
 800bcac:	ffff0208 	.word	0xffff0208

0800bcb0 <__sread>:
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb8:	f000 f900 	bl	800bebc <_read_r>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	bfab      	itete	ge
 800bcc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcc2:	89a3      	ldrhlt	r3, [r4, #12]
 800bcc4:	181b      	addge	r3, r3, r0
 800bcc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bcca:	bfac      	ite	ge
 800bccc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcce:	81a3      	strhlt	r3, [r4, #12]
 800bcd0:	bd10      	pop	{r4, pc}

0800bcd2 <__swrite>:
 800bcd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd6:	461f      	mov	r7, r3
 800bcd8:	898b      	ldrh	r3, [r1, #12]
 800bcda:	05db      	lsls	r3, r3, #23
 800bcdc:	4605      	mov	r5, r0
 800bcde:	460c      	mov	r4, r1
 800bce0:	4616      	mov	r6, r2
 800bce2:	d505      	bpl.n	800bcf0 <__swrite+0x1e>
 800bce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce8:	2302      	movs	r3, #2
 800bcea:	2200      	movs	r2, #0
 800bcec:	f000 f8d4 	bl	800be98 <_lseek_r>
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcfa:	81a3      	strh	r3, [r4, #12]
 800bcfc:	4632      	mov	r2, r6
 800bcfe:	463b      	mov	r3, r7
 800bd00:	4628      	mov	r0, r5
 800bd02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd06:	f000 b8eb 	b.w	800bee0 <_write_r>

0800bd0a <__sseek>:
 800bd0a:	b510      	push	{r4, lr}
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd12:	f000 f8c1 	bl	800be98 <_lseek_r>
 800bd16:	1c43      	adds	r3, r0, #1
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	bf15      	itete	ne
 800bd1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd26:	81a3      	strheq	r3, [r4, #12]
 800bd28:	bf18      	it	ne
 800bd2a:	81a3      	strhne	r3, [r4, #12]
 800bd2c:	bd10      	pop	{r4, pc}

0800bd2e <__sclose>:
 800bd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd32:	f000 b8a1 	b.w	800be78 <_close_r>

0800bd36 <__swbuf_r>:
 800bd36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd38:	460e      	mov	r6, r1
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	b118      	cbz	r0, 800bd48 <__swbuf_r+0x12>
 800bd40:	6a03      	ldr	r3, [r0, #32]
 800bd42:	b90b      	cbnz	r3, 800bd48 <__swbuf_r+0x12>
 800bd44:	f7ff feec 	bl	800bb20 <__sinit>
 800bd48:	69a3      	ldr	r3, [r4, #24]
 800bd4a:	60a3      	str	r3, [r4, #8]
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	071a      	lsls	r2, r3, #28
 800bd50:	d501      	bpl.n	800bd56 <__swbuf_r+0x20>
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	b943      	cbnz	r3, 800bd68 <__swbuf_r+0x32>
 800bd56:	4621      	mov	r1, r4
 800bd58:	4628      	mov	r0, r5
 800bd5a:	f000 f82b 	bl	800bdb4 <__swsetup_r>
 800bd5e:	b118      	cbz	r0, 800bd68 <__swbuf_r+0x32>
 800bd60:	f04f 37ff 	mov.w	r7, #4294967295
 800bd64:	4638      	mov	r0, r7
 800bd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	6922      	ldr	r2, [r4, #16]
 800bd6c:	1a98      	subs	r0, r3, r2
 800bd6e:	6963      	ldr	r3, [r4, #20]
 800bd70:	b2f6      	uxtb	r6, r6
 800bd72:	4283      	cmp	r3, r0
 800bd74:	4637      	mov	r7, r6
 800bd76:	dc05      	bgt.n	800bd84 <__swbuf_r+0x4e>
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f002 fec8 	bl	800eb10 <_fflush_r>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d1ed      	bne.n	800bd60 <__swbuf_r+0x2a>
 800bd84:	68a3      	ldr	r3, [r4, #8]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	60a3      	str	r3, [r4, #8]
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	6022      	str	r2, [r4, #0]
 800bd90:	701e      	strb	r6, [r3, #0]
 800bd92:	6962      	ldr	r2, [r4, #20]
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d004      	beq.n	800bda4 <__swbuf_r+0x6e>
 800bd9a:	89a3      	ldrh	r3, [r4, #12]
 800bd9c:	07db      	lsls	r3, r3, #31
 800bd9e:	d5e1      	bpl.n	800bd64 <__swbuf_r+0x2e>
 800bda0:	2e0a      	cmp	r6, #10
 800bda2:	d1df      	bne.n	800bd64 <__swbuf_r+0x2e>
 800bda4:	4621      	mov	r1, r4
 800bda6:	4628      	mov	r0, r5
 800bda8:	f002 feb2 	bl	800eb10 <_fflush_r>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d0d9      	beq.n	800bd64 <__swbuf_r+0x2e>
 800bdb0:	e7d6      	b.n	800bd60 <__swbuf_r+0x2a>
	...

0800bdb4 <__swsetup_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4b29      	ldr	r3, [pc, #164]	@ (800be5c <__swsetup_r+0xa8>)
 800bdb8:	4605      	mov	r5, r0
 800bdba:	6818      	ldr	r0, [r3, #0]
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	b118      	cbz	r0, 800bdc8 <__swsetup_r+0x14>
 800bdc0:	6a03      	ldr	r3, [r0, #32]
 800bdc2:	b90b      	cbnz	r3, 800bdc8 <__swsetup_r+0x14>
 800bdc4:	f7ff feac 	bl	800bb20 <__sinit>
 800bdc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdcc:	0719      	lsls	r1, r3, #28
 800bdce:	d422      	bmi.n	800be16 <__swsetup_r+0x62>
 800bdd0:	06da      	lsls	r2, r3, #27
 800bdd2:	d407      	bmi.n	800bde4 <__swsetup_r+0x30>
 800bdd4:	2209      	movs	r2, #9
 800bdd6:	602a      	str	r2, [r5, #0]
 800bdd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	f04f 30ff 	mov.w	r0, #4294967295
 800bde2:	e033      	b.n	800be4c <__swsetup_r+0x98>
 800bde4:	0758      	lsls	r0, r3, #29
 800bde6:	d512      	bpl.n	800be0e <__swsetup_r+0x5a>
 800bde8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdea:	b141      	cbz	r1, 800bdfe <__swsetup_r+0x4a>
 800bdec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdf0:	4299      	cmp	r1, r3
 800bdf2:	d002      	beq.n	800bdfa <__swsetup_r+0x46>
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f000 ff3f 	bl	800cc78 <_free_r>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	2300      	movs	r3, #0
 800be08:	6063      	str	r3, [r4, #4]
 800be0a:	6923      	ldr	r3, [r4, #16]
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f043 0308 	orr.w	r3, r3, #8
 800be14:	81a3      	strh	r3, [r4, #12]
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	b94b      	cbnz	r3, 800be2e <__swsetup_r+0x7a>
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be24:	d003      	beq.n	800be2e <__swsetup_r+0x7a>
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f002 fed1 	bl	800ebd0 <__smakebuf_r>
 800be2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be32:	f013 0201 	ands.w	r2, r3, #1
 800be36:	d00a      	beq.n	800be4e <__swsetup_r+0x9a>
 800be38:	2200      	movs	r2, #0
 800be3a:	60a2      	str	r2, [r4, #8]
 800be3c:	6962      	ldr	r2, [r4, #20]
 800be3e:	4252      	negs	r2, r2
 800be40:	61a2      	str	r2, [r4, #24]
 800be42:	6922      	ldr	r2, [r4, #16]
 800be44:	b942      	cbnz	r2, 800be58 <__swsetup_r+0xa4>
 800be46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be4a:	d1c5      	bne.n	800bdd8 <__swsetup_r+0x24>
 800be4c:	bd38      	pop	{r3, r4, r5, pc}
 800be4e:	0799      	lsls	r1, r3, #30
 800be50:	bf58      	it	pl
 800be52:	6962      	ldrpl	r2, [r4, #20]
 800be54:	60a2      	str	r2, [r4, #8]
 800be56:	e7f4      	b.n	800be42 <__swsetup_r+0x8e>
 800be58:	2000      	movs	r0, #0
 800be5a:	e7f7      	b.n	800be4c <__swsetup_r+0x98>
 800be5c:	20000068 	.word	0x20000068

0800be60 <memset>:
 800be60:	4402      	add	r2, r0
 800be62:	4603      	mov	r3, r0
 800be64:	4293      	cmp	r3, r2
 800be66:	d100      	bne.n	800be6a <memset+0xa>
 800be68:	4770      	bx	lr
 800be6a:	f803 1b01 	strb.w	r1, [r3], #1
 800be6e:	e7f9      	b.n	800be64 <memset+0x4>

0800be70 <_localeconv_r>:
 800be70:	4800      	ldr	r0, [pc, #0]	@ (800be74 <_localeconv_r+0x4>)
 800be72:	4770      	bx	lr
 800be74:	200001a8 	.word	0x200001a8

0800be78 <_close_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4d06      	ldr	r5, [pc, #24]	@ (800be94 <_close_r+0x1c>)
 800be7c:	2300      	movs	r3, #0
 800be7e:	4604      	mov	r4, r0
 800be80:	4608      	mov	r0, r1
 800be82:	602b      	str	r3, [r5, #0]
 800be84:	f7f6 feac 	bl	8002be0 <_close>
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	d102      	bne.n	800be92 <_close_r+0x1a>
 800be8c:	682b      	ldr	r3, [r5, #0]
 800be8e:	b103      	cbz	r3, 800be92 <_close_r+0x1a>
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	20002fa8 	.word	0x20002fa8

0800be98 <_lseek_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d07      	ldr	r5, [pc, #28]	@ (800beb8 <_lseek_r+0x20>)
 800be9c:	4604      	mov	r4, r0
 800be9e:	4608      	mov	r0, r1
 800bea0:	4611      	mov	r1, r2
 800bea2:	2200      	movs	r2, #0
 800bea4:	602a      	str	r2, [r5, #0]
 800bea6:	461a      	mov	r2, r3
 800bea8:	f7f6 fec1 	bl	8002c2e <_lseek>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_lseek_r+0x1e>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_lseek_r+0x1e>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	20002fa8 	.word	0x20002fa8

0800bebc <_read_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d07      	ldr	r5, [pc, #28]	@ (800bedc <_read_r+0x20>)
 800bec0:	4604      	mov	r4, r0
 800bec2:	4608      	mov	r0, r1
 800bec4:	4611      	mov	r1, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	602a      	str	r2, [r5, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f7f6 fe4f 	bl	8002b6e <_read>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_read_r+0x1e>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_read_r+0x1e>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	20002fa8 	.word	0x20002fa8

0800bee0 <_write_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4d07      	ldr	r5, [pc, #28]	@ (800bf00 <_write_r+0x20>)
 800bee4:	4604      	mov	r4, r0
 800bee6:	4608      	mov	r0, r1
 800bee8:	4611      	mov	r1, r2
 800beea:	2200      	movs	r2, #0
 800beec:	602a      	str	r2, [r5, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	f7f6 fe5a 	bl	8002ba8 <_write>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_write_r+0x1e>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_write_r+0x1e>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	20002fa8 	.word	0x20002fa8

0800bf04 <__errno>:
 800bf04:	4b01      	ldr	r3, [pc, #4]	@ (800bf0c <__errno+0x8>)
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	20000068 	.word	0x20000068

0800bf10 <__libc_init_array>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	4d0d      	ldr	r5, [pc, #52]	@ (800bf48 <__libc_init_array+0x38>)
 800bf14:	4c0d      	ldr	r4, [pc, #52]	@ (800bf4c <__libc_init_array+0x3c>)
 800bf16:	1b64      	subs	r4, r4, r5
 800bf18:	10a4      	asrs	r4, r4, #2
 800bf1a:	2600      	movs	r6, #0
 800bf1c:	42a6      	cmp	r6, r4
 800bf1e:	d109      	bne.n	800bf34 <__libc_init_array+0x24>
 800bf20:	4d0b      	ldr	r5, [pc, #44]	@ (800bf50 <__libc_init_array+0x40>)
 800bf22:	4c0c      	ldr	r4, [pc, #48]	@ (800bf54 <__libc_init_array+0x44>)
 800bf24:	f003 fae4 	bl	800f4f0 <_init>
 800bf28:	1b64      	subs	r4, r4, r5
 800bf2a:	10a4      	asrs	r4, r4, #2
 800bf2c:	2600      	movs	r6, #0
 800bf2e:	42a6      	cmp	r6, r4
 800bf30:	d105      	bne.n	800bf3e <__libc_init_array+0x2e>
 800bf32:	bd70      	pop	{r4, r5, r6, pc}
 800bf34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf38:	4798      	blx	r3
 800bf3a:	3601      	adds	r6, #1
 800bf3c:	e7ee      	b.n	800bf1c <__libc_init_array+0xc>
 800bf3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf42:	4798      	blx	r3
 800bf44:	3601      	adds	r6, #1
 800bf46:	e7f2      	b.n	800bf2e <__libc_init_array+0x1e>
 800bf48:	0800fdb4 	.word	0x0800fdb4
 800bf4c:	0800fdb4 	.word	0x0800fdb4
 800bf50:	0800fdb4 	.word	0x0800fdb4
 800bf54:	0800fdb8 	.word	0x0800fdb8

0800bf58 <__retarget_lock_init_recursive>:
 800bf58:	4770      	bx	lr

0800bf5a <__retarget_lock_acquire_recursive>:
 800bf5a:	4770      	bx	lr

0800bf5c <__retarget_lock_release_recursive>:
 800bf5c:	4770      	bx	lr

0800bf5e <memcpy>:
 800bf5e:	440a      	add	r2, r1
 800bf60:	4291      	cmp	r1, r2
 800bf62:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf66:	d100      	bne.n	800bf6a <memcpy+0xc>
 800bf68:	4770      	bx	lr
 800bf6a:	b510      	push	{r4, lr}
 800bf6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf74:	4291      	cmp	r1, r2
 800bf76:	d1f9      	bne.n	800bf6c <memcpy+0xe>
 800bf78:	bd10      	pop	{r4, pc}
	...

0800bf7c <nanf>:
 800bf7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bf84 <nanf+0x8>
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	7fc00000 	.word	0x7fc00000

0800bf88 <__assert_func>:
 800bf88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf8a:	4614      	mov	r4, r2
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4b09      	ldr	r3, [pc, #36]	@ (800bfb4 <__assert_func+0x2c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4605      	mov	r5, r0
 800bf94:	68d8      	ldr	r0, [r3, #12]
 800bf96:	b14c      	cbz	r4, 800bfac <__assert_func+0x24>
 800bf98:	4b07      	ldr	r3, [pc, #28]	@ (800bfb8 <__assert_func+0x30>)
 800bf9a:	9100      	str	r1, [sp, #0]
 800bf9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfa0:	4906      	ldr	r1, [pc, #24]	@ (800bfbc <__assert_func+0x34>)
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	f002 fddc 	bl	800eb60 <fiprintf>
 800bfa8:	f002 feb6 	bl	800ed18 <abort>
 800bfac:	4b04      	ldr	r3, [pc, #16]	@ (800bfc0 <__assert_func+0x38>)
 800bfae:	461c      	mov	r4, r3
 800bfb0:	e7f3      	b.n	800bf9a <__assert_func+0x12>
 800bfb2:	bf00      	nop
 800bfb4:	20000068 	.word	0x20000068
 800bfb8:	0800f9d4 	.word	0x0800f9d4
 800bfbc:	0800f9e1 	.word	0x0800f9e1
 800bfc0:	0800fa0f 	.word	0x0800fa0f

0800bfc4 <quorem>:
 800bfc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc8:	6903      	ldr	r3, [r0, #16]
 800bfca:	690c      	ldr	r4, [r1, #16]
 800bfcc:	42a3      	cmp	r3, r4
 800bfce:	4607      	mov	r7, r0
 800bfd0:	db7e      	blt.n	800c0d0 <quorem+0x10c>
 800bfd2:	3c01      	subs	r4, #1
 800bfd4:	f101 0814 	add.w	r8, r1, #20
 800bfd8:	00a3      	lsls	r3, r4, #2
 800bfda:	f100 0514 	add.w	r5, r0, #20
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfee:	3301      	adds	r3, #1
 800bff0:	429a      	cmp	r2, r3
 800bff2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bff6:	fbb2 f6f3 	udiv	r6, r2, r3
 800bffa:	d32e      	bcc.n	800c05a <quorem+0x96>
 800bffc:	f04f 0a00 	mov.w	sl, #0
 800c000:	46c4      	mov	ip, r8
 800c002:	46ae      	mov	lr, r5
 800c004:	46d3      	mov	fp, sl
 800c006:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c00a:	b298      	uxth	r0, r3
 800c00c:	fb06 a000 	mla	r0, r6, r0, sl
 800c010:	0c02      	lsrs	r2, r0, #16
 800c012:	0c1b      	lsrs	r3, r3, #16
 800c014:	fb06 2303 	mla	r3, r6, r3, r2
 800c018:	f8de 2000 	ldr.w	r2, [lr]
 800c01c:	b280      	uxth	r0, r0
 800c01e:	b292      	uxth	r2, r2
 800c020:	1a12      	subs	r2, r2, r0
 800c022:	445a      	add	r2, fp
 800c024:	f8de 0000 	ldr.w	r0, [lr]
 800c028:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c032:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c036:	b292      	uxth	r2, r2
 800c038:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c03c:	45e1      	cmp	r9, ip
 800c03e:	f84e 2b04 	str.w	r2, [lr], #4
 800c042:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c046:	d2de      	bcs.n	800c006 <quorem+0x42>
 800c048:	9b00      	ldr	r3, [sp, #0]
 800c04a:	58eb      	ldr	r3, [r5, r3]
 800c04c:	b92b      	cbnz	r3, 800c05a <quorem+0x96>
 800c04e:	9b01      	ldr	r3, [sp, #4]
 800c050:	3b04      	subs	r3, #4
 800c052:	429d      	cmp	r5, r3
 800c054:	461a      	mov	r2, r3
 800c056:	d32f      	bcc.n	800c0b8 <quorem+0xf4>
 800c058:	613c      	str	r4, [r7, #16]
 800c05a:	4638      	mov	r0, r7
 800c05c:	f001 f9c8 	bl	800d3f0 <__mcmp>
 800c060:	2800      	cmp	r0, #0
 800c062:	db25      	blt.n	800c0b0 <quorem+0xec>
 800c064:	4629      	mov	r1, r5
 800c066:	2000      	movs	r0, #0
 800c068:	f858 2b04 	ldr.w	r2, [r8], #4
 800c06c:	f8d1 c000 	ldr.w	ip, [r1]
 800c070:	fa1f fe82 	uxth.w	lr, r2
 800c074:	fa1f f38c 	uxth.w	r3, ip
 800c078:	eba3 030e 	sub.w	r3, r3, lr
 800c07c:	4403      	add	r3, r0
 800c07e:	0c12      	lsrs	r2, r2, #16
 800c080:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c084:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c088:	b29b      	uxth	r3, r3
 800c08a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c08e:	45c1      	cmp	r9, r8
 800c090:	f841 3b04 	str.w	r3, [r1], #4
 800c094:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c098:	d2e6      	bcs.n	800c068 <quorem+0xa4>
 800c09a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c09e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0a2:	b922      	cbnz	r2, 800c0ae <quorem+0xea>
 800c0a4:	3b04      	subs	r3, #4
 800c0a6:	429d      	cmp	r5, r3
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	d30b      	bcc.n	800c0c4 <quorem+0x100>
 800c0ac:	613c      	str	r4, [r7, #16]
 800c0ae:	3601      	adds	r6, #1
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	b003      	add	sp, #12
 800c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b8:	6812      	ldr	r2, [r2, #0]
 800c0ba:	3b04      	subs	r3, #4
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	d1cb      	bne.n	800c058 <quorem+0x94>
 800c0c0:	3c01      	subs	r4, #1
 800c0c2:	e7c6      	b.n	800c052 <quorem+0x8e>
 800c0c4:	6812      	ldr	r2, [r2, #0]
 800c0c6:	3b04      	subs	r3, #4
 800c0c8:	2a00      	cmp	r2, #0
 800c0ca:	d1ef      	bne.n	800c0ac <quorem+0xe8>
 800c0cc:	3c01      	subs	r4, #1
 800c0ce:	e7ea      	b.n	800c0a6 <quorem+0xe2>
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	e7ee      	b.n	800c0b2 <quorem+0xee>
 800c0d4:	0000      	movs	r0, r0
	...

0800c0d8 <_dtoa_r>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	69c7      	ldr	r7, [r0, #28]
 800c0de:	b097      	sub	sp, #92	@ 0x5c
 800c0e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c0e4:	ec55 4b10 	vmov	r4, r5, d0
 800c0e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c0ea:	9107      	str	r1, [sp, #28]
 800c0ec:	4681      	mov	r9, r0
 800c0ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800c0f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c0f2:	b97f      	cbnz	r7, 800c114 <_dtoa_r+0x3c>
 800c0f4:	2010      	movs	r0, #16
 800c0f6:	f000 fe09 	bl	800cd0c <malloc>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	f8c9 001c 	str.w	r0, [r9, #28]
 800c100:	b920      	cbnz	r0, 800c10c <_dtoa_r+0x34>
 800c102:	4ba9      	ldr	r3, [pc, #676]	@ (800c3a8 <_dtoa_r+0x2d0>)
 800c104:	21ef      	movs	r1, #239	@ 0xef
 800c106:	48a9      	ldr	r0, [pc, #676]	@ (800c3ac <_dtoa_r+0x2d4>)
 800c108:	f7ff ff3e 	bl	800bf88 <__assert_func>
 800c10c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c110:	6007      	str	r7, [r0, #0]
 800c112:	60c7      	str	r7, [r0, #12]
 800c114:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c118:	6819      	ldr	r1, [r3, #0]
 800c11a:	b159      	cbz	r1, 800c134 <_dtoa_r+0x5c>
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	604a      	str	r2, [r1, #4]
 800c120:	2301      	movs	r3, #1
 800c122:	4093      	lsls	r3, r2
 800c124:	608b      	str	r3, [r1, #8]
 800c126:	4648      	mov	r0, r9
 800c128:	f000 fee6 	bl	800cef8 <_Bfree>
 800c12c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c130:	2200      	movs	r2, #0
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	1e2b      	subs	r3, r5, #0
 800c136:	bfb9      	ittee	lt
 800c138:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c13c:	9305      	strlt	r3, [sp, #20]
 800c13e:	2300      	movge	r3, #0
 800c140:	6033      	strge	r3, [r6, #0]
 800c142:	9f05      	ldr	r7, [sp, #20]
 800c144:	4b9a      	ldr	r3, [pc, #616]	@ (800c3b0 <_dtoa_r+0x2d8>)
 800c146:	bfbc      	itt	lt
 800c148:	2201      	movlt	r2, #1
 800c14a:	6032      	strlt	r2, [r6, #0]
 800c14c:	43bb      	bics	r3, r7
 800c14e:	d112      	bne.n	800c176 <_dtoa_r+0x9e>
 800c150:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c152:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c156:	6013      	str	r3, [r2, #0]
 800c158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c15c:	4323      	orrs	r3, r4
 800c15e:	f000 855a 	beq.w	800cc16 <_dtoa_r+0xb3e>
 800c162:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c164:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c3c4 <_dtoa_r+0x2ec>
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 855c 	beq.w	800cc26 <_dtoa_r+0xb4e>
 800c16e:	f10a 0303 	add.w	r3, sl, #3
 800c172:	f000 bd56 	b.w	800cc22 <_dtoa_r+0xb4a>
 800c176:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c17a:	2200      	movs	r2, #0
 800c17c:	ec51 0b17 	vmov	r0, r1, d7
 800c180:	2300      	movs	r3, #0
 800c182:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c186:	f7f4 fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c18a:	4680      	mov	r8, r0
 800c18c:	b158      	cbz	r0, 800c1a6 <_dtoa_r+0xce>
 800c18e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c190:	2301      	movs	r3, #1
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c196:	b113      	cbz	r3, 800c19e <_dtoa_r+0xc6>
 800c198:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c19a:	4b86      	ldr	r3, [pc, #536]	@ (800c3b4 <_dtoa_r+0x2dc>)
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c3c8 <_dtoa_r+0x2f0>
 800c1a2:	f000 bd40 	b.w	800cc26 <_dtoa_r+0xb4e>
 800c1a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c1aa:	aa14      	add	r2, sp, #80	@ 0x50
 800c1ac:	a915      	add	r1, sp, #84	@ 0x54
 800c1ae:	4648      	mov	r0, r9
 800c1b0:	f001 fa3e 	bl	800d630 <__d2b>
 800c1b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c1b8:	9002      	str	r0, [sp, #8]
 800c1ba:	2e00      	cmp	r6, #0
 800c1bc:	d078      	beq.n	800c2b0 <_dtoa_r+0x1d8>
 800c1be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c1c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c1d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c1d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c1d8:	4619      	mov	r1, r3
 800c1da:	2200      	movs	r2, #0
 800c1dc:	4b76      	ldr	r3, [pc, #472]	@ (800c3b8 <_dtoa_r+0x2e0>)
 800c1de:	f7f4 f853 	bl	8000288 <__aeabi_dsub>
 800c1e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c390 <_dtoa_r+0x2b8>)
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	f7f4 fa06 	bl	80005f8 <__aeabi_dmul>
 800c1ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800c398 <_dtoa_r+0x2c0>)
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	f7f4 f84b 	bl	800028c <__adddf3>
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	460d      	mov	r5, r1
 800c1fc:	f7f4 f992 	bl	8000524 <__aeabi_i2d>
 800c200:	a367      	add	r3, pc, #412	@ (adr r3, 800c3a0 <_dtoa_r+0x2c8>)
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	f7f4 f9f7 	bl	80005f8 <__aeabi_dmul>
 800c20a:	4602      	mov	r2, r0
 800c20c:	460b      	mov	r3, r1
 800c20e:	4620      	mov	r0, r4
 800c210:	4629      	mov	r1, r5
 800c212:	f7f4 f83b 	bl	800028c <__adddf3>
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
 800c21a:	f7f4 fc9d 	bl	8000b58 <__aeabi_d2iz>
 800c21e:	2200      	movs	r2, #0
 800c220:	4607      	mov	r7, r0
 800c222:	2300      	movs	r3, #0
 800c224:	4620      	mov	r0, r4
 800c226:	4629      	mov	r1, r5
 800c228:	f7f4 fc58 	bl	8000adc <__aeabi_dcmplt>
 800c22c:	b140      	cbz	r0, 800c240 <_dtoa_r+0x168>
 800c22e:	4638      	mov	r0, r7
 800c230:	f7f4 f978 	bl	8000524 <__aeabi_i2d>
 800c234:	4622      	mov	r2, r4
 800c236:	462b      	mov	r3, r5
 800c238:	f7f4 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800c23c:	b900      	cbnz	r0, 800c240 <_dtoa_r+0x168>
 800c23e:	3f01      	subs	r7, #1
 800c240:	2f16      	cmp	r7, #22
 800c242:	d852      	bhi.n	800c2ea <_dtoa_r+0x212>
 800c244:	4b5d      	ldr	r3, [pc, #372]	@ (800c3bc <_dtoa_r+0x2e4>)
 800c246:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c252:	f7f4 fc43 	bl	8000adc <__aeabi_dcmplt>
 800c256:	2800      	cmp	r0, #0
 800c258:	d049      	beq.n	800c2ee <_dtoa_r+0x216>
 800c25a:	3f01      	subs	r7, #1
 800c25c:	2300      	movs	r3, #0
 800c25e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c260:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c262:	1b9b      	subs	r3, r3, r6
 800c264:	1e5a      	subs	r2, r3, #1
 800c266:	bf45      	ittet	mi
 800c268:	f1c3 0301 	rsbmi	r3, r3, #1
 800c26c:	9300      	strmi	r3, [sp, #0]
 800c26e:	2300      	movpl	r3, #0
 800c270:	2300      	movmi	r3, #0
 800c272:	9206      	str	r2, [sp, #24]
 800c274:	bf54      	ite	pl
 800c276:	9300      	strpl	r3, [sp, #0]
 800c278:	9306      	strmi	r3, [sp, #24]
 800c27a:	2f00      	cmp	r7, #0
 800c27c:	db39      	blt.n	800c2f2 <_dtoa_r+0x21a>
 800c27e:	9b06      	ldr	r3, [sp, #24]
 800c280:	970d      	str	r7, [sp, #52]	@ 0x34
 800c282:	443b      	add	r3, r7
 800c284:	9306      	str	r3, [sp, #24]
 800c286:	2300      	movs	r3, #0
 800c288:	9308      	str	r3, [sp, #32]
 800c28a:	9b07      	ldr	r3, [sp, #28]
 800c28c:	2b09      	cmp	r3, #9
 800c28e:	d863      	bhi.n	800c358 <_dtoa_r+0x280>
 800c290:	2b05      	cmp	r3, #5
 800c292:	bfc4      	itt	gt
 800c294:	3b04      	subgt	r3, #4
 800c296:	9307      	strgt	r3, [sp, #28]
 800c298:	9b07      	ldr	r3, [sp, #28]
 800c29a:	f1a3 0302 	sub.w	r3, r3, #2
 800c29e:	bfcc      	ite	gt
 800c2a0:	2400      	movgt	r4, #0
 800c2a2:	2401      	movle	r4, #1
 800c2a4:	2b03      	cmp	r3, #3
 800c2a6:	d863      	bhi.n	800c370 <_dtoa_r+0x298>
 800c2a8:	e8df f003 	tbb	[pc, r3]
 800c2ac:	2b375452 	.word	0x2b375452
 800c2b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c2b4:	441e      	add	r6, r3
 800c2b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c2ba:	2b20      	cmp	r3, #32
 800c2bc:	bfc1      	itttt	gt
 800c2be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c2c2:	409f      	lslgt	r7, r3
 800c2c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c2c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c2cc:	bfd6      	itet	le
 800c2ce:	f1c3 0320 	rsble	r3, r3, #32
 800c2d2:	ea47 0003 	orrgt.w	r0, r7, r3
 800c2d6:	fa04 f003 	lslle.w	r0, r4, r3
 800c2da:	f7f4 f913 	bl	8000504 <__aeabi_ui2d>
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c2e4:	3e01      	subs	r6, #1
 800c2e6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c2e8:	e776      	b.n	800c1d8 <_dtoa_r+0x100>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e7b7      	b.n	800c25e <_dtoa_r+0x186>
 800c2ee:	9010      	str	r0, [sp, #64]	@ 0x40
 800c2f0:	e7b6      	b.n	800c260 <_dtoa_r+0x188>
 800c2f2:	9b00      	ldr	r3, [sp, #0]
 800c2f4:	1bdb      	subs	r3, r3, r7
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	427b      	negs	r3, r7
 800c2fa:	9308      	str	r3, [sp, #32]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800c300:	e7c3      	b.n	800c28a <_dtoa_r+0x1b2>
 800c302:	2301      	movs	r3, #1
 800c304:	9309      	str	r3, [sp, #36]	@ 0x24
 800c306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c308:	eb07 0b03 	add.w	fp, r7, r3
 800c30c:	f10b 0301 	add.w	r3, fp, #1
 800c310:	2b01      	cmp	r3, #1
 800c312:	9303      	str	r3, [sp, #12]
 800c314:	bfb8      	it	lt
 800c316:	2301      	movlt	r3, #1
 800c318:	e006      	b.n	800c328 <_dtoa_r+0x250>
 800c31a:	2301      	movs	r3, #1
 800c31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c31e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c320:	2b00      	cmp	r3, #0
 800c322:	dd28      	ble.n	800c376 <_dtoa_r+0x29e>
 800c324:	469b      	mov	fp, r3
 800c326:	9303      	str	r3, [sp, #12]
 800c328:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c32c:	2100      	movs	r1, #0
 800c32e:	2204      	movs	r2, #4
 800c330:	f102 0514 	add.w	r5, r2, #20
 800c334:	429d      	cmp	r5, r3
 800c336:	d926      	bls.n	800c386 <_dtoa_r+0x2ae>
 800c338:	6041      	str	r1, [r0, #4]
 800c33a:	4648      	mov	r0, r9
 800c33c:	f000 fd9c 	bl	800ce78 <_Balloc>
 800c340:	4682      	mov	sl, r0
 800c342:	2800      	cmp	r0, #0
 800c344:	d142      	bne.n	800c3cc <_dtoa_r+0x2f4>
 800c346:	4b1e      	ldr	r3, [pc, #120]	@ (800c3c0 <_dtoa_r+0x2e8>)
 800c348:	4602      	mov	r2, r0
 800c34a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c34e:	e6da      	b.n	800c106 <_dtoa_r+0x2e>
 800c350:	2300      	movs	r3, #0
 800c352:	e7e3      	b.n	800c31c <_dtoa_r+0x244>
 800c354:	2300      	movs	r3, #0
 800c356:	e7d5      	b.n	800c304 <_dtoa_r+0x22c>
 800c358:	2401      	movs	r4, #1
 800c35a:	2300      	movs	r3, #0
 800c35c:	9307      	str	r3, [sp, #28]
 800c35e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c360:	f04f 3bff 	mov.w	fp, #4294967295
 800c364:	2200      	movs	r2, #0
 800c366:	f8cd b00c 	str.w	fp, [sp, #12]
 800c36a:	2312      	movs	r3, #18
 800c36c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c36e:	e7db      	b.n	800c328 <_dtoa_r+0x250>
 800c370:	2301      	movs	r3, #1
 800c372:	9309      	str	r3, [sp, #36]	@ 0x24
 800c374:	e7f4      	b.n	800c360 <_dtoa_r+0x288>
 800c376:	f04f 0b01 	mov.w	fp, #1
 800c37a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c37e:	465b      	mov	r3, fp
 800c380:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c384:	e7d0      	b.n	800c328 <_dtoa_r+0x250>
 800c386:	3101      	adds	r1, #1
 800c388:	0052      	lsls	r2, r2, #1
 800c38a:	e7d1      	b.n	800c330 <_dtoa_r+0x258>
 800c38c:	f3af 8000 	nop.w
 800c390:	636f4361 	.word	0x636f4361
 800c394:	3fd287a7 	.word	0x3fd287a7
 800c398:	8b60c8b3 	.word	0x8b60c8b3
 800c39c:	3fc68a28 	.word	0x3fc68a28
 800c3a0:	509f79fb 	.word	0x509f79fb
 800c3a4:	3fd34413 	.word	0x3fd34413
 800c3a8:	0800f92c 	.word	0x0800f92c
 800c3ac:	0800fa1d 	.word	0x0800fa1d
 800c3b0:	7ff00000 	.word	0x7ff00000
 800c3b4:	0800f9ac 	.word	0x0800f9ac
 800c3b8:	3ff80000 	.word	0x3ff80000
 800c3bc:	0800fb90 	.word	0x0800fb90
 800c3c0:	0800fa75 	.word	0x0800fa75
 800c3c4:	0800fa19 	.word	0x0800fa19
 800c3c8:	0800f9ab 	.word	0x0800f9ab
 800c3cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3d0:	6018      	str	r0, [r3, #0]
 800c3d2:	9b03      	ldr	r3, [sp, #12]
 800c3d4:	2b0e      	cmp	r3, #14
 800c3d6:	f200 80a1 	bhi.w	800c51c <_dtoa_r+0x444>
 800c3da:	2c00      	cmp	r4, #0
 800c3dc:	f000 809e 	beq.w	800c51c <_dtoa_r+0x444>
 800c3e0:	2f00      	cmp	r7, #0
 800c3e2:	dd33      	ble.n	800c44c <_dtoa_r+0x374>
 800c3e4:	4b9c      	ldr	r3, [pc, #624]	@ (800c658 <_dtoa_r+0x580>)
 800c3e6:	f007 020f 	and.w	r2, r7, #15
 800c3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3ee:	ed93 7b00 	vldr	d7, [r3]
 800c3f2:	05f8      	lsls	r0, r7, #23
 800c3f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c3f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c3fc:	d516      	bpl.n	800c42c <_dtoa_r+0x354>
 800c3fe:	4b97      	ldr	r3, [pc, #604]	@ (800c65c <_dtoa_r+0x584>)
 800c400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c408:	f7f4 fa20 	bl	800084c <__aeabi_ddiv>
 800c40c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c410:	f004 040f 	and.w	r4, r4, #15
 800c414:	2603      	movs	r6, #3
 800c416:	4d91      	ldr	r5, [pc, #580]	@ (800c65c <_dtoa_r+0x584>)
 800c418:	b954      	cbnz	r4, 800c430 <_dtoa_r+0x358>
 800c41a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c422:	f7f4 fa13 	bl	800084c <__aeabi_ddiv>
 800c426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c42a:	e028      	b.n	800c47e <_dtoa_r+0x3a6>
 800c42c:	2602      	movs	r6, #2
 800c42e:	e7f2      	b.n	800c416 <_dtoa_r+0x33e>
 800c430:	07e1      	lsls	r1, r4, #31
 800c432:	d508      	bpl.n	800c446 <_dtoa_r+0x36e>
 800c434:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c43c:	f7f4 f8dc 	bl	80005f8 <__aeabi_dmul>
 800c440:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c444:	3601      	adds	r6, #1
 800c446:	1064      	asrs	r4, r4, #1
 800c448:	3508      	adds	r5, #8
 800c44a:	e7e5      	b.n	800c418 <_dtoa_r+0x340>
 800c44c:	f000 80af 	beq.w	800c5ae <_dtoa_r+0x4d6>
 800c450:	427c      	negs	r4, r7
 800c452:	4b81      	ldr	r3, [pc, #516]	@ (800c658 <_dtoa_r+0x580>)
 800c454:	4d81      	ldr	r5, [pc, #516]	@ (800c65c <_dtoa_r+0x584>)
 800c456:	f004 020f 	and.w	r2, r4, #15
 800c45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c466:	f7f4 f8c7 	bl	80005f8 <__aeabi_dmul>
 800c46a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c46e:	1124      	asrs	r4, r4, #4
 800c470:	2300      	movs	r3, #0
 800c472:	2602      	movs	r6, #2
 800c474:	2c00      	cmp	r4, #0
 800c476:	f040 808f 	bne.w	800c598 <_dtoa_r+0x4c0>
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1d3      	bne.n	800c426 <_dtoa_r+0x34e>
 800c47e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c480:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 8094 	beq.w	800c5b2 <_dtoa_r+0x4da>
 800c48a:	4b75      	ldr	r3, [pc, #468]	@ (800c660 <_dtoa_r+0x588>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	4620      	mov	r0, r4
 800c490:	4629      	mov	r1, r5
 800c492:	f7f4 fb23 	bl	8000adc <__aeabi_dcmplt>
 800c496:	2800      	cmp	r0, #0
 800c498:	f000 808b 	beq.w	800c5b2 <_dtoa_r+0x4da>
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 8087 	beq.w	800c5b2 <_dtoa_r+0x4da>
 800c4a4:	f1bb 0f00 	cmp.w	fp, #0
 800c4a8:	dd34      	ble.n	800c514 <_dtoa_r+0x43c>
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	4b6d      	ldr	r3, [pc, #436]	@ (800c664 <_dtoa_r+0x58c>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f4 f8a1 	bl	80005f8 <__aeabi_dmul>
 800c4b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800c4be:	3601      	adds	r6, #1
 800c4c0:	465c      	mov	r4, fp
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7f4 f82e 	bl	8000524 <__aeabi_i2d>
 800c4c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4cc:	f7f4 f894 	bl	80005f8 <__aeabi_dmul>
 800c4d0:	4b65      	ldr	r3, [pc, #404]	@ (800c668 <_dtoa_r+0x590>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f7f3 feda 	bl	800028c <__adddf3>
 800c4d8:	4605      	mov	r5, r0
 800c4da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c4de:	2c00      	cmp	r4, #0
 800c4e0:	d16a      	bne.n	800c5b8 <_dtoa_r+0x4e0>
 800c4e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4e6:	4b61      	ldr	r3, [pc, #388]	@ (800c66c <_dtoa_r+0x594>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f7f3 fecd 	bl	8000288 <__aeabi_dsub>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4f6:	462a      	mov	r2, r5
 800c4f8:	4633      	mov	r3, r6
 800c4fa:	f7f4 fb0d 	bl	8000b18 <__aeabi_dcmpgt>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	f040 8298 	bne.w	800ca34 <_dtoa_r+0x95c>
 800c504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c508:	462a      	mov	r2, r5
 800c50a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c50e:	f7f4 fae5 	bl	8000adc <__aeabi_dcmplt>
 800c512:	bb38      	cbnz	r0, 800c564 <_dtoa_r+0x48c>
 800c514:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c518:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c51c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f2c0 8157 	blt.w	800c7d2 <_dtoa_r+0x6fa>
 800c524:	2f0e      	cmp	r7, #14
 800c526:	f300 8154 	bgt.w	800c7d2 <_dtoa_r+0x6fa>
 800c52a:	4b4b      	ldr	r3, [pc, #300]	@ (800c658 <_dtoa_r+0x580>)
 800c52c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c530:	ed93 7b00 	vldr	d7, [r3]
 800c534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c536:	2b00      	cmp	r3, #0
 800c538:	ed8d 7b00 	vstr	d7, [sp]
 800c53c:	f280 80e5 	bge.w	800c70a <_dtoa_r+0x632>
 800c540:	9b03      	ldr	r3, [sp, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f300 80e1 	bgt.w	800c70a <_dtoa_r+0x632>
 800c548:	d10c      	bne.n	800c564 <_dtoa_r+0x48c>
 800c54a:	4b48      	ldr	r3, [pc, #288]	@ (800c66c <_dtoa_r+0x594>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	ec51 0b17 	vmov	r0, r1, d7
 800c552:	f7f4 f851 	bl	80005f8 <__aeabi_dmul>
 800c556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c55a:	f7f4 fad3 	bl	8000b04 <__aeabi_dcmpge>
 800c55e:	2800      	cmp	r0, #0
 800c560:	f000 8266 	beq.w	800ca30 <_dtoa_r+0x958>
 800c564:	2400      	movs	r4, #0
 800c566:	4625      	mov	r5, r4
 800c568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c56a:	4656      	mov	r6, sl
 800c56c:	ea6f 0803 	mvn.w	r8, r3
 800c570:	2700      	movs	r7, #0
 800c572:	4621      	mov	r1, r4
 800c574:	4648      	mov	r0, r9
 800c576:	f000 fcbf 	bl	800cef8 <_Bfree>
 800c57a:	2d00      	cmp	r5, #0
 800c57c:	f000 80bd 	beq.w	800c6fa <_dtoa_r+0x622>
 800c580:	b12f      	cbz	r7, 800c58e <_dtoa_r+0x4b6>
 800c582:	42af      	cmp	r7, r5
 800c584:	d003      	beq.n	800c58e <_dtoa_r+0x4b6>
 800c586:	4639      	mov	r1, r7
 800c588:	4648      	mov	r0, r9
 800c58a:	f000 fcb5 	bl	800cef8 <_Bfree>
 800c58e:	4629      	mov	r1, r5
 800c590:	4648      	mov	r0, r9
 800c592:	f000 fcb1 	bl	800cef8 <_Bfree>
 800c596:	e0b0      	b.n	800c6fa <_dtoa_r+0x622>
 800c598:	07e2      	lsls	r2, r4, #31
 800c59a:	d505      	bpl.n	800c5a8 <_dtoa_r+0x4d0>
 800c59c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5a0:	f7f4 f82a 	bl	80005f8 <__aeabi_dmul>
 800c5a4:	3601      	adds	r6, #1
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	1064      	asrs	r4, r4, #1
 800c5aa:	3508      	adds	r5, #8
 800c5ac:	e762      	b.n	800c474 <_dtoa_r+0x39c>
 800c5ae:	2602      	movs	r6, #2
 800c5b0:	e765      	b.n	800c47e <_dtoa_r+0x3a6>
 800c5b2:	9c03      	ldr	r4, [sp, #12]
 800c5b4:	46b8      	mov	r8, r7
 800c5b6:	e784      	b.n	800c4c2 <_dtoa_r+0x3ea>
 800c5b8:	4b27      	ldr	r3, [pc, #156]	@ (800c658 <_dtoa_r+0x580>)
 800c5ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5c4:	4454      	add	r4, sl
 800c5c6:	2900      	cmp	r1, #0
 800c5c8:	d054      	beq.n	800c674 <_dtoa_r+0x59c>
 800c5ca:	4929      	ldr	r1, [pc, #164]	@ (800c670 <_dtoa_r+0x598>)
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	f7f4 f93d 	bl	800084c <__aeabi_ddiv>
 800c5d2:	4633      	mov	r3, r6
 800c5d4:	462a      	mov	r2, r5
 800c5d6:	f7f3 fe57 	bl	8000288 <__aeabi_dsub>
 800c5da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c5de:	4656      	mov	r6, sl
 800c5e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5e4:	f7f4 fab8 	bl	8000b58 <__aeabi_d2iz>
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	f7f3 ff9b 	bl	8000524 <__aeabi_i2d>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5f6:	f7f3 fe47 	bl	8000288 <__aeabi_dsub>
 800c5fa:	3530      	adds	r5, #48	@ 0x30
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c604:	f806 5b01 	strb.w	r5, [r6], #1
 800c608:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c60c:	f7f4 fa66 	bl	8000adc <__aeabi_dcmplt>
 800c610:	2800      	cmp	r0, #0
 800c612:	d172      	bne.n	800c6fa <_dtoa_r+0x622>
 800c614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c618:	4911      	ldr	r1, [pc, #68]	@ (800c660 <_dtoa_r+0x588>)
 800c61a:	2000      	movs	r0, #0
 800c61c:	f7f3 fe34 	bl	8000288 <__aeabi_dsub>
 800c620:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c624:	f7f4 fa5a 	bl	8000adc <__aeabi_dcmplt>
 800c628:	2800      	cmp	r0, #0
 800c62a:	f040 80b4 	bne.w	800c796 <_dtoa_r+0x6be>
 800c62e:	42a6      	cmp	r6, r4
 800c630:	f43f af70 	beq.w	800c514 <_dtoa_r+0x43c>
 800c634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c638:	4b0a      	ldr	r3, [pc, #40]	@ (800c664 <_dtoa_r+0x58c>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	f7f3 ffdc 	bl	80005f8 <__aeabi_dmul>
 800c640:	4b08      	ldr	r3, [pc, #32]	@ (800c664 <_dtoa_r+0x58c>)
 800c642:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c646:	2200      	movs	r2, #0
 800c648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c64c:	f7f3 ffd4 	bl	80005f8 <__aeabi_dmul>
 800c650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c654:	e7c4      	b.n	800c5e0 <_dtoa_r+0x508>
 800c656:	bf00      	nop
 800c658:	0800fb90 	.word	0x0800fb90
 800c65c:	0800fb68 	.word	0x0800fb68
 800c660:	3ff00000 	.word	0x3ff00000
 800c664:	40240000 	.word	0x40240000
 800c668:	401c0000 	.word	0x401c0000
 800c66c:	40140000 	.word	0x40140000
 800c670:	3fe00000 	.word	0x3fe00000
 800c674:	4631      	mov	r1, r6
 800c676:	4628      	mov	r0, r5
 800c678:	f7f3 ffbe 	bl	80005f8 <__aeabi_dmul>
 800c67c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c680:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c682:	4656      	mov	r6, sl
 800c684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c688:	f7f4 fa66 	bl	8000b58 <__aeabi_d2iz>
 800c68c:	4605      	mov	r5, r0
 800c68e:	f7f3 ff49 	bl	8000524 <__aeabi_i2d>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c69a:	f7f3 fdf5 	bl	8000288 <__aeabi_dsub>
 800c69e:	3530      	adds	r5, #48	@ 0x30
 800c6a0:	f806 5b01 	strb.w	r5, [r6], #1
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	42a6      	cmp	r6, r4
 800c6aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c6ae:	f04f 0200 	mov.w	r2, #0
 800c6b2:	d124      	bne.n	800c6fe <_dtoa_r+0x626>
 800c6b4:	4baf      	ldr	r3, [pc, #700]	@ (800c974 <_dtoa_r+0x89c>)
 800c6b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c6ba:	f7f3 fde7 	bl	800028c <__adddf3>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6c6:	f7f4 fa27 	bl	8000b18 <__aeabi_dcmpgt>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d163      	bne.n	800c796 <_dtoa_r+0x6be>
 800c6ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6d2:	49a8      	ldr	r1, [pc, #672]	@ (800c974 <_dtoa_r+0x89c>)
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	f7f3 fdd7 	bl	8000288 <__aeabi_dsub>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6e2:	f7f4 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	f43f af14 	beq.w	800c514 <_dtoa_r+0x43c>
 800c6ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c6ee:	1e73      	subs	r3, r6, #1
 800c6f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6f6:	2b30      	cmp	r3, #48	@ 0x30
 800c6f8:	d0f8      	beq.n	800c6ec <_dtoa_r+0x614>
 800c6fa:	4647      	mov	r7, r8
 800c6fc:	e03b      	b.n	800c776 <_dtoa_r+0x69e>
 800c6fe:	4b9e      	ldr	r3, [pc, #632]	@ (800c978 <_dtoa_r+0x8a0>)
 800c700:	f7f3 ff7a 	bl	80005f8 <__aeabi_dmul>
 800c704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c708:	e7bc      	b.n	800c684 <_dtoa_r+0x5ac>
 800c70a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c70e:	4656      	mov	r6, sl
 800c710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	f7f4 f898 	bl	800084c <__aeabi_ddiv>
 800c71c:	f7f4 fa1c 	bl	8000b58 <__aeabi_d2iz>
 800c720:	4680      	mov	r8, r0
 800c722:	f7f3 feff 	bl	8000524 <__aeabi_i2d>
 800c726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c72a:	f7f3 ff65 	bl	80005f8 <__aeabi_dmul>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4620      	mov	r0, r4
 800c734:	4629      	mov	r1, r5
 800c736:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c73a:	f7f3 fda5 	bl	8000288 <__aeabi_dsub>
 800c73e:	f806 4b01 	strb.w	r4, [r6], #1
 800c742:	9d03      	ldr	r5, [sp, #12]
 800c744:	eba6 040a 	sub.w	r4, r6, sl
 800c748:	42a5      	cmp	r5, r4
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	d133      	bne.n	800c7b8 <_dtoa_r+0x6e0>
 800c750:	f7f3 fd9c 	bl	800028c <__adddf3>
 800c754:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c758:	4604      	mov	r4, r0
 800c75a:	460d      	mov	r5, r1
 800c75c:	f7f4 f9dc 	bl	8000b18 <__aeabi_dcmpgt>
 800c760:	b9c0      	cbnz	r0, 800c794 <_dtoa_r+0x6bc>
 800c762:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c766:	4620      	mov	r0, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	f7f4 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800c76e:	b110      	cbz	r0, 800c776 <_dtoa_r+0x69e>
 800c770:	f018 0f01 	tst.w	r8, #1
 800c774:	d10e      	bne.n	800c794 <_dtoa_r+0x6bc>
 800c776:	9902      	ldr	r1, [sp, #8]
 800c778:	4648      	mov	r0, r9
 800c77a:	f000 fbbd 	bl	800cef8 <_Bfree>
 800c77e:	2300      	movs	r3, #0
 800c780:	7033      	strb	r3, [r6, #0]
 800c782:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c784:	3701      	adds	r7, #1
 800c786:	601f      	str	r7, [r3, #0]
 800c788:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f000 824b 	beq.w	800cc26 <_dtoa_r+0xb4e>
 800c790:	601e      	str	r6, [r3, #0]
 800c792:	e248      	b.n	800cc26 <_dtoa_r+0xb4e>
 800c794:	46b8      	mov	r8, r7
 800c796:	4633      	mov	r3, r6
 800c798:	461e      	mov	r6, r3
 800c79a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c79e:	2a39      	cmp	r2, #57	@ 0x39
 800c7a0:	d106      	bne.n	800c7b0 <_dtoa_r+0x6d8>
 800c7a2:	459a      	cmp	sl, r3
 800c7a4:	d1f8      	bne.n	800c798 <_dtoa_r+0x6c0>
 800c7a6:	2230      	movs	r2, #48	@ 0x30
 800c7a8:	f108 0801 	add.w	r8, r8, #1
 800c7ac:	f88a 2000 	strb.w	r2, [sl]
 800c7b0:	781a      	ldrb	r2, [r3, #0]
 800c7b2:	3201      	adds	r2, #1
 800c7b4:	701a      	strb	r2, [r3, #0]
 800c7b6:	e7a0      	b.n	800c6fa <_dtoa_r+0x622>
 800c7b8:	4b6f      	ldr	r3, [pc, #444]	@ (800c978 <_dtoa_r+0x8a0>)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f7f3 ff1c 	bl	80005f8 <__aeabi_dmul>
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	460d      	mov	r5, r1
 800c7c8:	f7f4 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	d09f      	beq.n	800c710 <_dtoa_r+0x638>
 800c7d0:	e7d1      	b.n	800c776 <_dtoa_r+0x69e>
 800c7d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7d4:	2a00      	cmp	r2, #0
 800c7d6:	f000 80ea 	beq.w	800c9ae <_dtoa_r+0x8d6>
 800c7da:	9a07      	ldr	r2, [sp, #28]
 800c7dc:	2a01      	cmp	r2, #1
 800c7de:	f300 80cd 	bgt.w	800c97c <_dtoa_r+0x8a4>
 800c7e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	f000 80c1 	beq.w	800c96c <_dtoa_r+0x894>
 800c7ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c7ee:	9c08      	ldr	r4, [sp, #32]
 800c7f0:	9e00      	ldr	r6, [sp, #0]
 800c7f2:	9a00      	ldr	r2, [sp, #0]
 800c7f4:	441a      	add	r2, r3
 800c7f6:	9200      	str	r2, [sp, #0]
 800c7f8:	9a06      	ldr	r2, [sp, #24]
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	441a      	add	r2, r3
 800c7fe:	4648      	mov	r0, r9
 800c800:	9206      	str	r2, [sp, #24]
 800c802:	f000 fc77 	bl	800d0f4 <__i2b>
 800c806:	4605      	mov	r5, r0
 800c808:	b166      	cbz	r6, 800c824 <_dtoa_r+0x74c>
 800c80a:	9b06      	ldr	r3, [sp, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dd09      	ble.n	800c824 <_dtoa_r+0x74c>
 800c810:	42b3      	cmp	r3, r6
 800c812:	9a00      	ldr	r2, [sp, #0]
 800c814:	bfa8      	it	ge
 800c816:	4633      	movge	r3, r6
 800c818:	1ad2      	subs	r2, r2, r3
 800c81a:	9200      	str	r2, [sp, #0]
 800c81c:	9a06      	ldr	r2, [sp, #24]
 800c81e:	1af6      	subs	r6, r6, r3
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	9306      	str	r3, [sp, #24]
 800c824:	9b08      	ldr	r3, [sp, #32]
 800c826:	b30b      	cbz	r3, 800c86c <_dtoa_r+0x794>
 800c828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f000 80c6 	beq.w	800c9bc <_dtoa_r+0x8e4>
 800c830:	2c00      	cmp	r4, #0
 800c832:	f000 80c0 	beq.w	800c9b6 <_dtoa_r+0x8de>
 800c836:	4629      	mov	r1, r5
 800c838:	4622      	mov	r2, r4
 800c83a:	4648      	mov	r0, r9
 800c83c:	f000 fd12 	bl	800d264 <__pow5mult>
 800c840:	9a02      	ldr	r2, [sp, #8]
 800c842:	4601      	mov	r1, r0
 800c844:	4605      	mov	r5, r0
 800c846:	4648      	mov	r0, r9
 800c848:	f000 fc6a 	bl	800d120 <__multiply>
 800c84c:	9902      	ldr	r1, [sp, #8]
 800c84e:	4680      	mov	r8, r0
 800c850:	4648      	mov	r0, r9
 800c852:	f000 fb51 	bl	800cef8 <_Bfree>
 800c856:	9b08      	ldr	r3, [sp, #32]
 800c858:	1b1b      	subs	r3, r3, r4
 800c85a:	9308      	str	r3, [sp, #32]
 800c85c:	f000 80b1 	beq.w	800c9c2 <_dtoa_r+0x8ea>
 800c860:	9a08      	ldr	r2, [sp, #32]
 800c862:	4641      	mov	r1, r8
 800c864:	4648      	mov	r0, r9
 800c866:	f000 fcfd 	bl	800d264 <__pow5mult>
 800c86a:	9002      	str	r0, [sp, #8]
 800c86c:	2101      	movs	r1, #1
 800c86e:	4648      	mov	r0, r9
 800c870:	f000 fc40 	bl	800d0f4 <__i2b>
 800c874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c876:	4604      	mov	r4, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 81d8 	beq.w	800cc2e <_dtoa_r+0xb56>
 800c87e:	461a      	mov	r2, r3
 800c880:	4601      	mov	r1, r0
 800c882:	4648      	mov	r0, r9
 800c884:	f000 fcee 	bl	800d264 <__pow5mult>
 800c888:	9b07      	ldr	r3, [sp, #28]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	4604      	mov	r4, r0
 800c88e:	f300 809f 	bgt.w	800c9d0 <_dtoa_r+0x8f8>
 800c892:	9b04      	ldr	r3, [sp, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	f040 8097 	bne.w	800c9c8 <_dtoa_r+0x8f0>
 800c89a:	9b05      	ldr	r3, [sp, #20]
 800c89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f040 8093 	bne.w	800c9cc <_dtoa_r+0x8f4>
 800c8a6:	9b05      	ldr	r3, [sp, #20]
 800c8a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8ac:	0d1b      	lsrs	r3, r3, #20
 800c8ae:	051b      	lsls	r3, r3, #20
 800c8b0:	b133      	cbz	r3, 800c8c0 <_dtoa_r+0x7e8>
 800c8b2:	9b00      	ldr	r3, [sp, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	9b06      	ldr	r3, [sp, #24]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	9306      	str	r3, [sp, #24]
 800c8be:	2301      	movs	r3, #1
 800c8c0:	9308      	str	r3, [sp, #32]
 800c8c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 81b8 	beq.w	800cc3a <_dtoa_r+0xb62>
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8d0:	6918      	ldr	r0, [r3, #16]
 800c8d2:	f000 fbc3 	bl	800d05c <__hi0bits>
 800c8d6:	f1c0 0020 	rsb	r0, r0, #32
 800c8da:	9b06      	ldr	r3, [sp, #24]
 800c8dc:	4418      	add	r0, r3
 800c8de:	f010 001f 	ands.w	r0, r0, #31
 800c8e2:	f000 8082 	beq.w	800c9ea <_dtoa_r+0x912>
 800c8e6:	f1c0 0320 	rsb	r3, r0, #32
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	dd73      	ble.n	800c9d6 <_dtoa_r+0x8fe>
 800c8ee:	9b00      	ldr	r3, [sp, #0]
 800c8f0:	f1c0 001c 	rsb	r0, r0, #28
 800c8f4:	4403      	add	r3, r0
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	9b06      	ldr	r3, [sp, #24]
 800c8fa:	4403      	add	r3, r0
 800c8fc:	4406      	add	r6, r0
 800c8fe:	9306      	str	r3, [sp, #24]
 800c900:	9b00      	ldr	r3, [sp, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	dd05      	ble.n	800c912 <_dtoa_r+0x83a>
 800c906:	9902      	ldr	r1, [sp, #8]
 800c908:	461a      	mov	r2, r3
 800c90a:	4648      	mov	r0, r9
 800c90c:	f000 fd04 	bl	800d318 <__lshift>
 800c910:	9002      	str	r0, [sp, #8]
 800c912:	9b06      	ldr	r3, [sp, #24]
 800c914:	2b00      	cmp	r3, #0
 800c916:	dd05      	ble.n	800c924 <_dtoa_r+0x84c>
 800c918:	4621      	mov	r1, r4
 800c91a:	461a      	mov	r2, r3
 800c91c:	4648      	mov	r0, r9
 800c91e:	f000 fcfb 	bl	800d318 <__lshift>
 800c922:	4604      	mov	r4, r0
 800c924:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c926:	2b00      	cmp	r3, #0
 800c928:	d061      	beq.n	800c9ee <_dtoa_r+0x916>
 800c92a:	9802      	ldr	r0, [sp, #8]
 800c92c:	4621      	mov	r1, r4
 800c92e:	f000 fd5f 	bl	800d3f0 <__mcmp>
 800c932:	2800      	cmp	r0, #0
 800c934:	da5b      	bge.n	800c9ee <_dtoa_r+0x916>
 800c936:	2300      	movs	r3, #0
 800c938:	9902      	ldr	r1, [sp, #8]
 800c93a:	220a      	movs	r2, #10
 800c93c:	4648      	mov	r0, r9
 800c93e:	f000 fafd 	bl	800cf3c <__multadd>
 800c942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c944:	9002      	str	r0, [sp, #8]
 800c946:	f107 38ff 	add.w	r8, r7, #4294967295
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f000 8177 	beq.w	800cc3e <_dtoa_r+0xb66>
 800c950:	4629      	mov	r1, r5
 800c952:	2300      	movs	r3, #0
 800c954:	220a      	movs	r2, #10
 800c956:	4648      	mov	r0, r9
 800c958:	f000 faf0 	bl	800cf3c <__multadd>
 800c95c:	f1bb 0f00 	cmp.w	fp, #0
 800c960:	4605      	mov	r5, r0
 800c962:	dc6f      	bgt.n	800ca44 <_dtoa_r+0x96c>
 800c964:	9b07      	ldr	r3, [sp, #28]
 800c966:	2b02      	cmp	r3, #2
 800c968:	dc49      	bgt.n	800c9fe <_dtoa_r+0x926>
 800c96a:	e06b      	b.n	800ca44 <_dtoa_r+0x96c>
 800c96c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c96e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c972:	e73c      	b.n	800c7ee <_dtoa_r+0x716>
 800c974:	3fe00000 	.word	0x3fe00000
 800c978:	40240000 	.word	0x40240000
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	1e5c      	subs	r4, r3, #1
 800c980:	9b08      	ldr	r3, [sp, #32]
 800c982:	42a3      	cmp	r3, r4
 800c984:	db09      	blt.n	800c99a <_dtoa_r+0x8c2>
 800c986:	1b1c      	subs	r4, r3, r4
 800c988:	9b03      	ldr	r3, [sp, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f6bf af30 	bge.w	800c7f0 <_dtoa_r+0x718>
 800c990:	9b00      	ldr	r3, [sp, #0]
 800c992:	9a03      	ldr	r2, [sp, #12]
 800c994:	1a9e      	subs	r6, r3, r2
 800c996:	2300      	movs	r3, #0
 800c998:	e72b      	b.n	800c7f2 <_dtoa_r+0x71a>
 800c99a:	9b08      	ldr	r3, [sp, #32]
 800c99c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c99e:	9408      	str	r4, [sp, #32]
 800c9a0:	1ae3      	subs	r3, r4, r3
 800c9a2:	441a      	add	r2, r3
 800c9a4:	9e00      	ldr	r6, [sp, #0]
 800c9a6:	9b03      	ldr	r3, [sp, #12]
 800c9a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800c9aa:	2400      	movs	r4, #0
 800c9ac:	e721      	b.n	800c7f2 <_dtoa_r+0x71a>
 800c9ae:	9c08      	ldr	r4, [sp, #32]
 800c9b0:	9e00      	ldr	r6, [sp, #0]
 800c9b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c9b4:	e728      	b.n	800c808 <_dtoa_r+0x730>
 800c9b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c9ba:	e751      	b.n	800c860 <_dtoa_r+0x788>
 800c9bc:	9a08      	ldr	r2, [sp, #32]
 800c9be:	9902      	ldr	r1, [sp, #8]
 800c9c0:	e750      	b.n	800c864 <_dtoa_r+0x78c>
 800c9c2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c9c6:	e751      	b.n	800c86c <_dtoa_r+0x794>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e779      	b.n	800c8c0 <_dtoa_r+0x7e8>
 800c9cc:	9b04      	ldr	r3, [sp, #16]
 800c9ce:	e777      	b.n	800c8c0 <_dtoa_r+0x7e8>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9308      	str	r3, [sp, #32]
 800c9d4:	e779      	b.n	800c8ca <_dtoa_r+0x7f2>
 800c9d6:	d093      	beq.n	800c900 <_dtoa_r+0x828>
 800c9d8:	9a00      	ldr	r2, [sp, #0]
 800c9da:	331c      	adds	r3, #28
 800c9dc:	441a      	add	r2, r3
 800c9de:	9200      	str	r2, [sp, #0]
 800c9e0:	9a06      	ldr	r2, [sp, #24]
 800c9e2:	441a      	add	r2, r3
 800c9e4:	441e      	add	r6, r3
 800c9e6:	9206      	str	r2, [sp, #24]
 800c9e8:	e78a      	b.n	800c900 <_dtoa_r+0x828>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	e7f4      	b.n	800c9d8 <_dtoa_r+0x900>
 800c9ee:	9b03      	ldr	r3, [sp, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	46b8      	mov	r8, r7
 800c9f4:	dc20      	bgt.n	800ca38 <_dtoa_r+0x960>
 800c9f6:	469b      	mov	fp, r3
 800c9f8:	9b07      	ldr	r3, [sp, #28]
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	dd1e      	ble.n	800ca3c <_dtoa_r+0x964>
 800c9fe:	f1bb 0f00 	cmp.w	fp, #0
 800ca02:	f47f adb1 	bne.w	800c568 <_dtoa_r+0x490>
 800ca06:	4621      	mov	r1, r4
 800ca08:	465b      	mov	r3, fp
 800ca0a:	2205      	movs	r2, #5
 800ca0c:	4648      	mov	r0, r9
 800ca0e:	f000 fa95 	bl	800cf3c <__multadd>
 800ca12:	4601      	mov	r1, r0
 800ca14:	4604      	mov	r4, r0
 800ca16:	9802      	ldr	r0, [sp, #8]
 800ca18:	f000 fcea 	bl	800d3f0 <__mcmp>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	f77f ada3 	ble.w	800c568 <_dtoa_r+0x490>
 800ca22:	4656      	mov	r6, sl
 800ca24:	2331      	movs	r3, #49	@ 0x31
 800ca26:	f806 3b01 	strb.w	r3, [r6], #1
 800ca2a:	f108 0801 	add.w	r8, r8, #1
 800ca2e:	e59f      	b.n	800c570 <_dtoa_r+0x498>
 800ca30:	9c03      	ldr	r4, [sp, #12]
 800ca32:	46b8      	mov	r8, r7
 800ca34:	4625      	mov	r5, r4
 800ca36:	e7f4      	b.n	800ca22 <_dtoa_r+0x94a>
 800ca38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ca3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 8101 	beq.w	800cc46 <_dtoa_r+0xb6e>
 800ca44:	2e00      	cmp	r6, #0
 800ca46:	dd05      	ble.n	800ca54 <_dtoa_r+0x97c>
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4632      	mov	r2, r6
 800ca4c:	4648      	mov	r0, r9
 800ca4e:	f000 fc63 	bl	800d318 <__lshift>
 800ca52:	4605      	mov	r5, r0
 800ca54:	9b08      	ldr	r3, [sp, #32]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d05c      	beq.n	800cb14 <_dtoa_r+0xa3c>
 800ca5a:	6869      	ldr	r1, [r5, #4]
 800ca5c:	4648      	mov	r0, r9
 800ca5e:	f000 fa0b 	bl	800ce78 <_Balloc>
 800ca62:	4606      	mov	r6, r0
 800ca64:	b928      	cbnz	r0, 800ca72 <_dtoa_r+0x99a>
 800ca66:	4b82      	ldr	r3, [pc, #520]	@ (800cc70 <_dtoa_r+0xb98>)
 800ca68:	4602      	mov	r2, r0
 800ca6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca6e:	f7ff bb4a 	b.w	800c106 <_dtoa_r+0x2e>
 800ca72:	692a      	ldr	r2, [r5, #16]
 800ca74:	3202      	adds	r2, #2
 800ca76:	0092      	lsls	r2, r2, #2
 800ca78:	f105 010c 	add.w	r1, r5, #12
 800ca7c:	300c      	adds	r0, #12
 800ca7e:	f7ff fa6e 	bl	800bf5e <memcpy>
 800ca82:	2201      	movs	r2, #1
 800ca84:	4631      	mov	r1, r6
 800ca86:	4648      	mov	r0, r9
 800ca88:	f000 fc46 	bl	800d318 <__lshift>
 800ca8c:	f10a 0301 	add.w	r3, sl, #1
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	eb0a 030b 	add.w	r3, sl, fp
 800ca96:	9308      	str	r3, [sp, #32]
 800ca98:	9b04      	ldr	r3, [sp, #16]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	462f      	mov	r7, r5
 800caa0:	9306      	str	r3, [sp, #24]
 800caa2:	4605      	mov	r5, r0
 800caa4:	9b00      	ldr	r3, [sp, #0]
 800caa6:	9802      	ldr	r0, [sp, #8]
 800caa8:	4621      	mov	r1, r4
 800caaa:	f103 3bff 	add.w	fp, r3, #4294967295
 800caae:	f7ff fa89 	bl	800bfc4 <quorem>
 800cab2:	4603      	mov	r3, r0
 800cab4:	3330      	adds	r3, #48	@ 0x30
 800cab6:	9003      	str	r0, [sp, #12]
 800cab8:	4639      	mov	r1, r7
 800caba:	9802      	ldr	r0, [sp, #8]
 800cabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cabe:	f000 fc97 	bl	800d3f0 <__mcmp>
 800cac2:	462a      	mov	r2, r5
 800cac4:	9004      	str	r0, [sp, #16]
 800cac6:	4621      	mov	r1, r4
 800cac8:	4648      	mov	r0, r9
 800caca:	f000 fcad 	bl	800d428 <__mdiff>
 800cace:	68c2      	ldr	r2, [r0, #12]
 800cad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cad2:	4606      	mov	r6, r0
 800cad4:	bb02      	cbnz	r2, 800cb18 <_dtoa_r+0xa40>
 800cad6:	4601      	mov	r1, r0
 800cad8:	9802      	ldr	r0, [sp, #8]
 800cada:	f000 fc89 	bl	800d3f0 <__mcmp>
 800cade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cae0:	4602      	mov	r2, r0
 800cae2:	4631      	mov	r1, r6
 800cae4:	4648      	mov	r0, r9
 800cae6:	920c      	str	r2, [sp, #48]	@ 0x30
 800cae8:	9309      	str	r3, [sp, #36]	@ 0x24
 800caea:	f000 fa05 	bl	800cef8 <_Bfree>
 800caee:	9b07      	ldr	r3, [sp, #28]
 800caf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800caf2:	9e00      	ldr	r6, [sp, #0]
 800caf4:	ea42 0103 	orr.w	r1, r2, r3
 800caf8:	9b06      	ldr	r3, [sp, #24]
 800cafa:	4319      	orrs	r1, r3
 800cafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cafe:	d10d      	bne.n	800cb1c <_dtoa_r+0xa44>
 800cb00:	2b39      	cmp	r3, #57	@ 0x39
 800cb02:	d027      	beq.n	800cb54 <_dtoa_r+0xa7c>
 800cb04:	9a04      	ldr	r2, [sp, #16]
 800cb06:	2a00      	cmp	r2, #0
 800cb08:	dd01      	ble.n	800cb0e <_dtoa_r+0xa36>
 800cb0a:	9b03      	ldr	r3, [sp, #12]
 800cb0c:	3331      	adds	r3, #49	@ 0x31
 800cb0e:	f88b 3000 	strb.w	r3, [fp]
 800cb12:	e52e      	b.n	800c572 <_dtoa_r+0x49a>
 800cb14:	4628      	mov	r0, r5
 800cb16:	e7b9      	b.n	800ca8c <_dtoa_r+0x9b4>
 800cb18:	2201      	movs	r2, #1
 800cb1a:	e7e2      	b.n	800cae2 <_dtoa_r+0xa0a>
 800cb1c:	9904      	ldr	r1, [sp, #16]
 800cb1e:	2900      	cmp	r1, #0
 800cb20:	db04      	blt.n	800cb2c <_dtoa_r+0xa54>
 800cb22:	9807      	ldr	r0, [sp, #28]
 800cb24:	4301      	orrs	r1, r0
 800cb26:	9806      	ldr	r0, [sp, #24]
 800cb28:	4301      	orrs	r1, r0
 800cb2a:	d120      	bne.n	800cb6e <_dtoa_r+0xa96>
 800cb2c:	2a00      	cmp	r2, #0
 800cb2e:	ddee      	ble.n	800cb0e <_dtoa_r+0xa36>
 800cb30:	9902      	ldr	r1, [sp, #8]
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	2201      	movs	r2, #1
 800cb36:	4648      	mov	r0, r9
 800cb38:	f000 fbee 	bl	800d318 <__lshift>
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	9002      	str	r0, [sp, #8]
 800cb40:	f000 fc56 	bl	800d3f0 <__mcmp>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	9b00      	ldr	r3, [sp, #0]
 800cb48:	dc02      	bgt.n	800cb50 <_dtoa_r+0xa78>
 800cb4a:	d1e0      	bne.n	800cb0e <_dtoa_r+0xa36>
 800cb4c:	07da      	lsls	r2, r3, #31
 800cb4e:	d5de      	bpl.n	800cb0e <_dtoa_r+0xa36>
 800cb50:	2b39      	cmp	r3, #57	@ 0x39
 800cb52:	d1da      	bne.n	800cb0a <_dtoa_r+0xa32>
 800cb54:	2339      	movs	r3, #57	@ 0x39
 800cb56:	f88b 3000 	strb.w	r3, [fp]
 800cb5a:	4633      	mov	r3, r6
 800cb5c:	461e      	mov	r6, r3
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb64:	2a39      	cmp	r2, #57	@ 0x39
 800cb66:	d04e      	beq.n	800cc06 <_dtoa_r+0xb2e>
 800cb68:	3201      	adds	r2, #1
 800cb6a:	701a      	strb	r2, [r3, #0]
 800cb6c:	e501      	b.n	800c572 <_dtoa_r+0x49a>
 800cb6e:	2a00      	cmp	r2, #0
 800cb70:	dd03      	ble.n	800cb7a <_dtoa_r+0xaa2>
 800cb72:	2b39      	cmp	r3, #57	@ 0x39
 800cb74:	d0ee      	beq.n	800cb54 <_dtoa_r+0xa7c>
 800cb76:	3301      	adds	r3, #1
 800cb78:	e7c9      	b.n	800cb0e <_dtoa_r+0xa36>
 800cb7a:	9a00      	ldr	r2, [sp, #0]
 800cb7c:	9908      	ldr	r1, [sp, #32]
 800cb7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cb82:	428a      	cmp	r2, r1
 800cb84:	d028      	beq.n	800cbd8 <_dtoa_r+0xb00>
 800cb86:	9902      	ldr	r1, [sp, #8]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	220a      	movs	r2, #10
 800cb8c:	4648      	mov	r0, r9
 800cb8e:	f000 f9d5 	bl	800cf3c <__multadd>
 800cb92:	42af      	cmp	r7, r5
 800cb94:	9002      	str	r0, [sp, #8]
 800cb96:	f04f 0300 	mov.w	r3, #0
 800cb9a:	f04f 020a 	mov.w	r2, #10
 800cb9e:	4639      	mov	r1, r7
 800cba0:	4648      	mov	r0, r9
 800cba2:	d107      	bne.n	800cbb4 <_dtoa_r+0xadc>
 800cba4:	f000 f9ca 	bl	800cf3c <__multadd>
 800cba8:	4607      	mov	r7, r0
 800cbaa:	4605      	mov	r5, r0
 800cbac:	9b00      	ldr	r3, [sp, #0]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	e777      	b.n	800caa4 <_dtoa_r+0x9cc>
 800cbb4:	f000 f9c2 	bl	800cf3c <__multadd>
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4607      	mov	r7, r0
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	220a      	movs	r2, #10
 800cbc0:	4648      	mov	r0, r9
 800cbc2:	f000 f9bb 	bl	800cf3c <__multadd>
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	e7f0      	b.n	800cbac <_dtoa_r+0xad4>
 800cbca:	f1bb 0f00 	cmp.w	fp, #0
 800cbce:	bfcc      	ite	gt
 800cbd0:	465e      	movgt	r6, fp
 800cbd2:	2601      	movle	r6, #1
 800cbd4:	4456      	add	r6, sl
 800cbd6:	2700      	movs	r7, #0
 800cbd8:	9902      	ldr	r1, [sp, #8]
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	4648      	mov	r0, r9
 800cbe0:	f000 fb9a 	bl	800d318 <__lshift>
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	9002      	str	r0, [sp, #8]
 800cbe8:	f000 fc02 	bl	800d3f0 <__mcmp>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	dcb4      	bgt.n	800cb5a <_dtoa_r+0xa82>
 800cbf0:	d102      	bne.n	800cbf8 <_dtoa_r+0xb20>
 800cbf2:	9b00      	ldr	r3, [sp, #0]
 800cbf4:	07db      	lsls	r3, r3, #31
 800cbf6:	d4b0      	bmi.n	800cb5a <_dtoa_r+0xa82>
 800cbf8:	4633      	mov	r3, r6
 800cbfa:	461e      	mov	r6, r3
 800cbfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc00:	2a30      	cmp	r2, #48	@ 0x30
 800cc02:	d0fa      	beq.n	800cbfa <_dtoa_r+0xb22>
 800cc04:	e4b5      	b.n	800c572 <_dtoa_r+0x49a>
 800cc06:	459a      	cmp	sl, r3
 800cc08:	d1a8      	bne.n	800cb5c <_dtoa_r+0xa84>
 800cc0a:	2331      	movs	r3, #49	@ 0x31
 800cc0c:	f108 0801 	add.w	r8, r8, #1
 800cc10:	f88a 3000 	strb.w	r3, [sl]
 800cc14:	e4ad      	b.n	800c572 <_dtoa_r+0x49a>
 800cc16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cc74 <_dtoa_r+0xb9c>
 800cc1c:	b11b      	cbz	r3, 800cc26 <_dtoa_r+0xb4e>
 800cc1e:	f10a 0308 	add.w	r3, sl, #8
 800cc22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cc24:	6013      	str	r3, [r2, #0]
 800cc26:	4650      	mov	r0, sl
 800cc28:	b017      	add	sp, #92	@ 0x5c
 800cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2e:	9b07      	ldr	r3, [sp, #28]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	f77f ae2e 	ble.w	800c892 <_dtoa_r+0x7ba>
 800cc36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc38:	9308      	str	r3, [sp, #32]
 800cc3a:	2001      	movs	r0, #1
 800cc3c:	e64d      	b.n	800c8da <_dtoa_r+0x802>
 800cc3e:	f1bb 0f00 	cmp.w	fp, #0
 800cc42:	f77f aed9 	ble.w	800c9f8 <_dtoa_r+0x920>
 800cc46:	4656      	mov	r6, sl
 800cc48:	9802      	ldr	r0, [sp, #8]
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	f7ff f9ba 	bl	800bfc4 <quorem>
 800cc50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cc54:	f806 3b01 	strb.w	r3, [r6], #1
 800cc58:	eba6 020a 	sub.w	r2, r6, sl
 800cc5c:	4593      	cmp	fp, r2
 800cc5e:	ddb4      	ble.n	800cbca <_dtoa_r+0xaf2>
 800cc60:	9902      	ldr	r1, [sp, #8]
 800cc62:	2300      	movs	r3, #0
 800cc64:	220a      	movs	r2, #10
 800cc66:	4648      	mov	r0, r9
 800cc68:	f000 f968 	bl	800cf3c <__multadd>
 800cc6c:	9002      	str	r0, [sp, #8]
 800cc6e:	e7eb      	b.n	800cc48 <_dtoa_r+0xb70>
 800cc70:	0800fa75 	.word	0x0800fa75
 800cc74:	0800fa10 	.word	0x0800fa10

0800cc78 <_free_r>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	d041      	beq.n	800cd04 <_free_r+0x8c>
 800cc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc84:	1f0c      	subs	r4, r1, #4
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	bfb8      	it	lt
 800cc8a:	18e4      	addlt	r4, r4, r3
 800cc8c:	f000 f8e8 	bl	800ce60 <__malloc_lock>
 800cc90:	4a1d      	ldr	r2, [pc, #116]	@ (800cd08 <_free_r+0x90>)
 800cc92:	6813      	ldr	r3, [r2, #0]
 800cc94:	b933      	cbnz	r3, 800cca4 <_free_r+0x2c>
 800cc96:	6063      	str	r3, [r4, #4]
 800cc98:	6014      	str	r4, [r2, #0]
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cca0:	f000 b8e4 	b.w	800ce6c <__malloc_unlock>
 800cca4:	42a3      	cmp	r3, r4
 800cca6:	d908      	bls.n	800ccba <_free_r+0x42>
 800cca8:	6820      	ldr	r0, [r4, #0]
 800ccaa:	1821      	adds	r1, r4, r0
 800ccac:	428b      	cmp	r3, r1
 800ccae:	bf01      	itttt	eq
 800ccb0:	6819      	ldreq	r1, [r3, #0]
 800ccb2:	685b      	ldreq	r3, [r3, #4]
 800ccb4:	1809      	addeq	r1, r1, r0
 800ccb6:	6021      	streq	r1, [r4, #0]
 800ccb8:	e7ed      	b.n	800cc96 <_free_r+0x1e>
 800ccba:	461a      	mov	r2, r3
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	b10b      	cbz	r3, 800ccc4 <_free_r+0x4c>
 800ccc0:	42a3      	cmp	r3, r4
 800ccc2:	d9fa      	bls.n	800ccba <_free_r+0x42>
 800ccc4:	6811      	ldr	r1, [r2, #0]
 800ccc6:	1850      	adds	r0, r2, r1
 800ccc8:	42a0      	cmp	r0, r4
 800ccca:	d10b      	bne.n	800cce4 <_free_r+0x6c>
 800cccc:	6820      	ldr	r0, [r4, #0]
 800ccce:	4401      	add	r1, r0
 800ccd0:	1850      	adds	r0, r2, r1
 800ccd2:	4283      	cmp	r3, r0
 800ccd4:	6011      	str	r1, [r2, #0]
 800ccd6:	d1e0      	bne.n	800cc9a <_free_r+0x22>
 800ccd8:	6818      	ldr	r0, [r3, #0]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	6053      	str	r3, [r2, #4]
 800ccde:	4408      	add	r0, r1
 800cce0:	6010      	str	r0, [r2, #0]
 800cce2:	e7da      	b.n	800cc9a <_free_r+0x22>
 800cce4:	d902      	bls.n	800ccec <_free_r+0x74>
 800cce6:	230c      	movs	r3, #12
 800cce8:	602b      	str	r3, [r5, #0]
 800ccea:	e7d6      	b.n	800cc9a <_free_r+0x22>
 800ccec:	6820      	ldr	r0, [r4, #0]
 800ccee:	1821      	adds	r1, r4, r0
 800ccf0:	428b      	cmp	r3, r1
 800ccf2:	bf04      	itt	eq
 800ccf4:	6819      	ldreq	r1, [r3, #0]
 800ccf6:	685b      	ldreq	r3, [r3, #4]
 800ccf8:	6063      	str	r3, [r4, #4]
 800ccfa:	bf04      	itt	eq
 800ccfc:	1809      	addeq	r1, r1, r0
 800ccfe:	6021      	streq	r1, [r4, #0]
 800cd00:	6054      	str	r4, [r2, #4]
 800cd02:	e7ca      	b.n	800cc9a <_free_r+0x22>
 800cd04:	bd38      	pop	{r3, r4, r5, pc}
 800cd06:	bf00      	nop
 800cd08:	20002fb4 	.word	0x20002fb4

0800cd0c <malloc>:
 800cd0c:	4b02      	ldr	r3, [pc, #8]	@ (800cd18 <malloc+0xc>)
 800cd0e:	4601      	mov	r1, r0
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	f000 b825 	b.w	800cd60 <_malloc_r>
 800cd16:	bf00      	nop
 800cd18:	20000068 	.word	0x20000068

0800cd1c <sbrk_aligned>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4e0f      	ldr	r6, [pc, #60]	@ (800cd5c <sbrk_aligned+0x40>)
 800cd20:	460c      	mov	r4, r1
 800cd22:	6831      	ldr	r1, [r6, #0]
 800cd24:	4605      	mov	r5, r0
 800cd26:	b911      	cbnz	r1, 800cd2e <sbrk_aligned+0x12>
 800cd28:	f001 ffdc 	bl	800ece4 <_sbrk_r>
 800cd2c:	6030      	str	r0, [r6, #0]
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4628      	mov	r0, r5
 800cd32:	f001 ffd7 	bl	800ece4 <_sbrk_r>
 800cd36:	1c43      	adds	r3, r0, #1
 800cd38:	d103      	bne.n	800cd42 <sbrk_aligned+0x26>
 800cd3a:	f04f 34ff 	mov.w	r4, #4294967295
 800cd3e:	4620      	mov	r0, r4
 800cd40:	bd70      	pop	{r4, r5, r6, pc}
 800cd42:	1cc4      	adds	r4, r0, #3
 800cd44:	f024 0403 	bic.w	r4, r4, #3
 800cd48:	42a0      	cmp	r0, r4
 800cd4a:	d0f8      	beq.n	800cd3e <sbrk_aligned+0x22>
 800cd4c:	1a21      	subs	r1, r4, r0
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f001 ffc8 	bl	800ece4 <_sbrk_r>
 800cd54:	3001      	adds	r0, #1
 800cd56:	d1f2      	bne.n	800cd3e <sbrk_aligned+0x22>
 800cd58:	e7ef      	b.n	800cd3a <sbrk_aligned+0x1e>
 800cd5a:	bf00      	nop
 800cd5c:	20002fb0 	.word	0x20002fb0

0800cd60 <_malloc_r>:
 800cd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd64:	1ccd      	adds	r5, r1, #3
 800cd66:	f025 0503 	bic.w	r5, r5, #3
 800cd6a:	3508      	adds	r5, #8
 800cd6c:	2d0c      	cmp	r5, #12
 800cd6e:	bf38      	it	cc
 800cd70:	250c      	movcc	r5, #12
 800cd72:	2d00      	cmp	r5, #0
 800cd74:	4606      	mov	r6, r0
 800cd76:	db01      	blt.n	800cd7c <_malloc_r+0x1c>
 800cd78:	42a9      	cmp	r1, r5
 800cd7a:	d904      	bls.n	800cd86 <_malloc_r+0x26>
 800cd7c:	230c      	movs	r3, #12
 800cd7e:	6033      	str	r3, [r6, #0]
 800cd80:	2000      	movs	r0, #0
 800cd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce5c <_malloc_r+0xfc>
 800cd8a:	f000 f869 	bl	800ce60 <__malloc_lock>
 800cd8e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd92:	461c      	mov	r4, r3
 800cd94:	bb44      	cbnz	r4, 800cde8 <_malloc_r+0x88>
 800cd96:	4629      	mov	r1, r5
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff ffbf 	bl	800cd1c <sbrk_aligned>
 800cd9e:	1c43      	adds	r3, r0, #1
 800cda0:	4604      	mov	r4, r0
 800cda2:	d158      	bne.n	800ce56 <_malloc_r+0xf6>
 800cda4:	f8d8 4000 	ldr.w	r4, [r8]
 800cda8:	4627      	mov	r7, r4
 800cdaa:	2f00      	cmp	r7, #0
 800cdac:	d143      	bne.n	800ce36 <_malloc_r+0xd6>
 800cdae:	2c00      	cmp	r4, #0
 800cdb0:	d04b      	beq.n	800ce4a <_malloc_r+0xea>
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	eb04 0903 	add.w	r9, r4, r3
 800cdbc:	f001 ff92 	bl	800ece4 <_sbrk_r>
 800cdc0:	4581      	cmp	r9, r0
 800cdc2:	d142      	bne.n	800ce4a <_malloc_r+0xea>
 800cdc4:	6821      	ldr	r1, [r4, #0]
 800cdc6:	1a6d      	subs	r5, r5, r1
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7ff ffa6 	bl	800cd1c <sbrk_aligned>
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d03a      	beq.n	800ce4a <_malloc_r+0xea>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	442b      	add	r3, r5
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	f8d8 3000 	ldr.w	r3, [r8]
 800cdde:	685a      	ldr	r2, [r3, #4]
 800cde0:	bb62      	cbnz	r2, 800ce3c <_malloc_r+0xdc>
 800cde2:	f8c8 7000 	str.w	r7, [r8]
 800cde6:	e00f      	b.n	800ce08 <_malloc_r+0xa8>
 800cde8:	6822      	ldr	r2, [r4, #0]
 800cdea:	1b52      	subs	r2, r2, r5
 800cdec:	d420      	bmi.n	800ce30 <_malloc_r+0xd0>
 800cdee:	2a0b      	cmp	r2, #11
 800cdf0:	d917      	bls.n	800ce22 <_malloc_r+0xc2>
 800cdf2:	1961      	adds	r1, r4, r5
 800cdf4:	42a3      	cmp	r3, r4
 800cdf6:	6025      	str	r5, [r4, #0]
 800cdf8:	bf18      	it	ne
 800cdfa:	6059      	strne	r1, [r3, #4]
 800cdfc:	6863      	ldr	r3, [r4, #4]
 800cdfe:	bf08      	it	eq
 800ce00:	f8c8 1000 	streq.w	r1, [r8]
 800ce04:	5162      	str	r2, [r4, r5]
 800ce06:	604b      	str	r3, [r1, #4]
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f000 f82f 	bl	800ce6c <__malloc_unlock>
 800ce0e:	f104 000b 	add.w	r0, r4, #11
 800ce12:	1d23      	adds	r3, r4, #4
 800ce14:	f020 0007 	bic.w	r0, r0, #7
 800ce18:	1ac2      	subs	r2, r0, r3
 800ce1a:	bf1c      	itt	ne
 800ce1c:	1a1b      	subne	r3, r3, r0
 800ce1e:	50a3      	strne	r3, [r4, r2]
 800ce20:	e7af      	b.n	800cd82 <_malloc_r+0x22>
 800ce22:	6862      	ldr	r2, [r4, #4]
 800ce24:	42a3      	cmp	r3, r4
 800ce26:	bf0c      	ite	eq
 800ce28:	f8c8 2000 	streq.w	r2, [r8]
 800ce2c:	605a      	strne	r2, [r3, #4]
 800ce2e:	e7eb      	b.n	800ce08 <_malloc_r+0xa8>
 800ce30:	4623      	mov	r3, r4
 800ce32:	6864      	ldr	r4, [r4, #4]
 800ce34:	e7ae      	b.n	800cd94 <_malloc_r+0x34>
 800ce36:	463c      	mov	r4, r7
 800ce38:	687f      	ldr	r7, [r7, #4]
 800ce3a:	e7b6      	b.n	800cdaa <_malloc_r+0x4a>
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	42a3      	cmp	r3, r4
 800ce42:	d1fb      	bne.n	800ce3c <_malloc_r+0xdc>
 800ce44:	2300      	movs	r3, #0
 800ce46:	6053      	str	r3, [r2, #4]
 800ce48:	e7de      	b.n	800ce08 <_malloc_r+0xa8>
 800ce4a:	230c      	movs	r3, #12
 800ce4c:	6033      	str	r3, [r6, #0]
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f000 f80c 	bl	800ce6c <__malloc_unlock>
 800ce54:	e794      	b.n	800cd80 <_malloc_r+0x20>
 800ce56:	6005      	str	r5, [r0, #0]
 800ce58:	e7d6      	b.n	800ce08 <_malloc_r+0xa8>
 800ce5a:	bf00      	nop
 800ce5c:	20002fb4 	.word	0x20002fb4

0800ce60 <__malloc_lock>:
 800ce60:	4801      	ldr	r0, [pc, #4]	@ (800ce68 <__malloc_lock+0x8>)
 800ce62:	f7ff b87a 	b.w	800bf5a <__retarget_lock_acquire_recursive>
 800ce66:	bf00      	nop
 800ce68:	20002fac 	.word	0x20002fac

0800ce6c <__malloc_unlock>:
 800ce6c:	4801      	ldr	r0, [pc, #4]	@ (800ce74 <__malloc_unlock+0x8>)
 800ce6e:	f7ff b875 	b.w	800bf5c <__retarget_lock_release_recursive>
 800ce72:	bf00      	nop
 800ce74:	20002fac 	.word	0x20002fac

0800ce78 <_Balloc>:
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	69c6      	ldr	r6, [r0, #28]
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	460d      	mov	r5, r1
 800ce80:	b976      	cbnz	r6, 800cea0 <_Balloc+0x28>
 800ce82:	2010      	movs	r0, #16
 800ce84:	f7ff ff42 	bl	800cd0c <malloc>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	61e0      	str	r0, [r4, #28]
 800ce8c:	b920      	cbnz	r0, 800ce98 <_Balloc+0x20>
 800ce8e:	4b18      	ldr	r3, [pc, #96]	@ (800cef0 <_Balloc+0x78>)
 800ce90:	4818      	ldr	r0, [pc, #96]	@ (800cef4 <_Balloc+0x7c>)
 800ce92:	216b      	movs	r1, #107	@ 0x6b
 800ce94:	f7ff f878 	bl	800bf88 <__assert_func>
 800ce98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce9c:	6006      	str	r6, [r0, #0]
 800ce9e:	60c6      	str	r6, [r0, #12]
 800cea0:	69e6      	ldr	r6, [r4, #28]
 800cea2:	68f3      	ldr	r3, [r6, #12]
 800cea4:	b183      	cbz	r3, 800cec8 <_Balloc+0x50>
 800cea6:	69e3      	ldr	r3, [r4, #28]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ceae:	b9b8      	cbnz	r0, 800cee0 <_Balloc+0x68>
 800ceb0:	2101      	movs	r1, #1
 800ceb2:	fa01 f605 	lsl.w	r6, r1, r5
 800ceb6:	1d72      	adds	r2, r6, #5
 800ceb8:	0092      	lsls	r2, r2, #2
 800ceba:	4620      	mov	r0, r4
 800cebc:	f001 ff33 	bl	800ed26 <_calloc_r>
 800cec0:	b160      	cbz	r0, 800cedc <_Balloc+0x64>
 800cec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cec6:	e00e      	b.n	800cee6 <_Balloc+0x6e>
 800cec8:	2221      	movs	r2, #33	@ 0x21
 800ceca:	2104      	movs	r1, #4
 800cecc:	4620      	mov	r0, r4
 800cece:	f001 ff2a 	bl	800ed26 <_calloc_r>
 800ced2:	69e3      	ldr	r3, [r4, #28]
 800ced4:	60f0      	str	r0, [r6, #12]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e4      	bne.n	800cea6 <_Balloc+0x2e>
 800cedc:	2000      	movs	r0, #0
 800cede:	bd70      	pop	{r4, r5, r6, pc}
 800cee0:	6802      	ldr	r2, [r0, #0]
 800cee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cee6:	2300      	movs	r3, #0
 800cee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ceec:	e7f7      	b.n	800cede <_Balloc+0x66>
 800ceee:	bf00      	nop
 800cef0:	0800f92c 	.word	0x0800f92c
 800cef4:	0800fa86 	.word	0x0800fa86

0800cef8 <_Bfree>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	69c6      	ldr	r6, [r0, #28]
 800cefc:	4605      	mov	r5, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	b976      	cbnz	r6, 800cf20 <_Bfree+0x28>
 800cf02:	2010      	movs	r0, #16
 800cf04:	f7ff ff02 	bl	800cd0c <malloc>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	61e8      	str	r0, [r5, #28]
 800cf0c:	b920      	cbnz	r0, 800cf18 <_Bfree+0x20>
 800cf0e:	4b09      	ldr	r3, [pc, #36]	@ (800cf34 <_Bfree+0x3c>)
 800cf10:	4809      	ldr	r0, [pc, #36]	@ (800cf38 <_Bfree+0x40>)
 800cf12:	218f      	movs	r1, #143	@ 0x8f
 800cf14:	f7ff f838 	bl	800bf88 <__assert_func>
 800cf18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf1c:	6006      	str	r6, [r0, #0]
 800cf1e:	60c6      	str	r6, [r0, #12]
 800cf20:	b13c      	cbz	r4, 800cf32 <_Bfree+0x3a>
 800cf22:	69eb      	ldr	r3, [r5, #28]
 800cf24:	6862      	ldr	r2, [r4, #4]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf2c:	6021      	str	r1, [r4, #0]
 800cf2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
 800cf34:	0800f92c 	.word	0x0800f92c
 800cf38:	0800fa86 	.word	0x0800fa86

0800cf3c <__multadd>:
 800cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf40:	690d      	ldr	r5, [r1, #16]
 800cf42:	4607      	mov	r7, r0
 800cf44:	460c      	mov	r4, r1
 800cf46:	461e      	mov	r6, r3
 800cf48:	f101 0c14 	add.w	ip, r1, #20
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	f8dc 3000 	ldr.w	r3, [ip]
 800cf52:	b299      	uxth	r1, r3
 800cf54:	fb02 6101 	mla	r1, r2, r1, r6
 800cf58:	0c1e      	lsrs	r6, r3, #16
 800cf5a:	0c0b      	lsrs	r3, r1, #16
 800cf5c:	fb02 3306 	mla	r3, r2, r6, r3
 800cf60:	b289      	uxth	r1, r1
 800cf62:	3001      	adds	r0, #1
 800cf64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf68:	4285      	cmp	r5, r0
 800cf6a:	f84c 1b04 	str.w	r1, [ip], #4
 800cf6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf72:	dcec      	bgt.n	800cf4e <__multadd+0x12>
 800cf74:	b30e      	cbz	r6, 800cfba <__multadd+0x7e>
 800cf76:	68a3      	ldr	r3, [r4, #8]
 800cf78:	42ab      	cmp	r3, r5
 800cf7a:	dc19      	bgt.n	800cfb0 <__multadd+0x74>
 800cf7c:	6861      	ldr	r1, [r4, #4]
 800cf7e:	4638      	mov	r0, r7
 800cf80:	3101      	adds	r1, #1
 800cf82:	f7ff ff79 	bl	800ce78 <_Balloc>
 800cf86:	4680      	mov	r8, r0
 800cf88:	b928      	cbnz	r0, 800cf96 <__multadd+0x5a>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc0 <__multadd+0x84>)
 800cf8e:	480d      	ldr	r0, [pc, #52]	@ (800cfc4 <__multadd+0x88>)
 800cf90:	21ba      	movs	r1, #186	@ 0xba
 800cf92:	f7fe fff9 	bl	800bf88 <__assert_func>
 800cf96:	6922      	ldr	r2, [r4, #16]
 800cf98:	3202      	adds	r2, #2
 800cf9a:	f104 010c 	add.w	r1, r4, #12
 800cf9e:	0092      	lsls	r2, r2, #2
 800cfa0:	300c      	adds	r0, #12
 800cfa2:	f7fe ffdc 	bl	800bf5e <memcpy>
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	f7ff ffa5 	bl	800cef8 <_Bfree>
 800cfae:	4644      	mov	r4, r8
 800cfb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfb4:	3501      	adds	r5, #1
 800cfb6:	615e      	str	r6, [r3, #20]
 800cfb8:	6125      	str	r5, [r4, #16]
 800cfba:	4620      	mov	r0, r4
 800cfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc0:	0800fa75 	.word	0x0800fa75
 800cfc4:	0800fa86 	.word	0x0800fa86

0800cfc8 <__s2b>:
 800cfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfcc:	460c      	mov	r4, r1
 800cfce:	4615      	mov	r5, r2
 800cfd0:	461f      	mov	r7, r3
 800cfd2:	2209      	movs	r2, #9
 800cfd4:	3308      	adds	r3, #8
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfdc:	2100      	movs	r1, #0
 800cfde:	2201      	movs	r2, #1
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	db09      	blt.n	800cff8 <__s2b+0x30>
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7ff ff47 	bl	800ce78 <_Balloc>
 800cfea:	b940      	cbnz	r0, 800cffe <__s2b+0x36>
 800cfec:	4602      	mov	r2, r0
 800cfee:	4b19      	ldr	r3, [pc, #100]	@ (800d054 <__s2b+0x8c>)
 800cff0:	4819      	ldr	r0, [pc, #100]	@ (800d058 <__s2b+0x90>)
 800cff2:	21d3      	movs	r1, #211	@ 0xd3
 800cff4:	f7fe ffc8 	bl	800bf88 <__assert_func>
 800cff8:	0052      	lsls	r2, r2, #1
 800cffa:	3101      	adds	r1, #1
 800cffc:	e7f0      	b.n	800cfe0 <__s2b+0x18>
 800cffe:	9b08      	ldr	r3, [sp, #32]
 800d000:	6143      	str	r3, [r0, #20]
 800d002:	2d09      	cmp	r5, #9
 800d004:	f04f 0301 	mov.w	r3, #1
 800d008:	6103      	str	r3, [r0, #16]
 800d00a:	dd16      	ble.n	800d03a <__s2b+0x72>
 800d00c:	f104 0909 	add.w	r9, r4, #9
 800d010:	46c8      	mov	r8, r9
 800d012:	442c      	add	r4, r5
 800d014:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d018:	4601      	mov	r1, r0
 800d01a:	3b30      	subs	r3, #48	@ 0x30
 800d01c:	220a      	movs	r2, #10
 800d01e:	4630      	mov	r0, r6
 800d020:	f7ff ff8c 	bl	800cf3c <__multadd>
 800d024:	45a0      	cmp	r8, r4
 800d026:	d1f5      	bne.n	800d014 <__s2b+0x4c>
 800d028:	f1a5 0408 	sub.w	r4, r5, #8
 800d02c:	444c      	add	r4, r9
 800d02e:	1b2d      	subs	r5, r5, r4
 800d030:	1963      	adds	r3, r4, r5
 800d032:	42bb      	cmp	r3, r7
 800d034:	db04      	blt.n	800d040 <__s2b+0x78>
 800d036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d03a:	340a      	adds	r4, #10
 800d03c:	2509      	movs	r5, #9
 800d03e:	e7f6      	b.n	800d02e <__s2b+0x66>
 800d040:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d044:	4601      	mov	r1, r0
 800d046:	3b30      	subs	r3, #48	@ 0x30
 800d048:	220a      	movs	r2, #10
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7ff ff76 	bl	800cf3c <__multadd>
 800d050:	e7ee      	b.n	800d030 <__s2b+0x68>
 800d052:	bf00      	nop
 800d054:	0800fa75 	.word	0x0800fa75
 800d058:	0800fa86 	.word	0x0800fa86

0800d05c <__hi0bits>:
 800d05c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d060:	4603      	mov	r3, r0
 800d062:	bf36      	itet	cc
 800d064:	0403      	lslcc	r3, r0, #16
 800d066:	2000      	movcs	r0, #0
 800d068:	2010      	movcc	r0, #16
 800d06a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d06e:	bf3c      	itt	cc
 800d070:	021b      	lslcc	r3, r3, #8
 800d072:	3008      	addcc	r0, #8
 800d074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d078:	bf3c      	itt	cc
 800d07a:	011b      	lslcc	r3, r3, #4
 800d07c:	3004      	addcc	r0, #4
 800d07e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d082:	bf3c      	itt	cc
 800d084:	009b      	lslcc	r3, r3, #2
 800d086:	3002      	addcc	r0, #2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	db05      	blt.n	800d098 <__hi0bits+0x3c>
 800d08c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d090:	f100 0001 	add.w	r0, r0, #1
 800d094:	bf08      	it	eq
 800d096:	2020      	moveq	r0, #32
 800d098:	4770      	bx	lr

0800d09a <__lo0bits>:
 800d09a:	6803      	ldr	r3, [r0, #0]
 800d09c:	4602      	mov	r2, r0
 800d09e:	f013 0007 	ands.w	r0, r3, #7
 800d0a2:	d00b      	beq.n	800d0bc <__lo0bits+0x22>
 800d0a4:	07d9      	lsls	r1, r3, #31
 800d0a6:	d421      	bmi.n	800d0ec <__lo0bits+0x52>
 800d0a8:	0798      	lsls	r0, r3, #30
 800d0aa:	bf49      	itett	mi
 800d0ac:	085b      	lsrmi	r3, r3, #1
 800d0ae:	089b      	lsrpl	r3, r3, #2
 800d0b0:	2001      	movmi	r0, #1
 800d0b2:	6013      	strmi	r3, [r2, #0]
 800d0b4:	bf5c      	itt	pl
 800d0b6:	6013      	strpl	r3, [r2, #0]
 800d0b8:	2002      	movpl	r0, #2
 800d0ba:	4770      	bx	lr
 800d0bc:	b299      	uxth	r1, r3
 800d0be:	b909      	cbnz	r1, 800d0c4 <__lo0bits+0x2a>
 800d0c0:	0c1b      	lsrs	r3, r3, #16
 800d0c2:	2010      	movs	r0, #16
 800d0c4:	b2d9      	uxtb	r1, r3
 800d0c6:	b909      	cbnz	r1, 800d0cc <__lo0bits+0x32>
 800d0c8:	3008      	adds	r0, #8
 800d0ca:	0a1b      	lsrs	r3, r3, #8
 800d0cc:	0719      	lsls	r1, r3, #28
 800d0ce:	bf04      	itt	eq
 800d0d0:	091b      	lsreq	r3, r3, #4
 800d0d2:	3004      	addeq	r0, #4
 800d0d4:	0799      	lsls	r1, r3, #30
 800d0d6:	bf04      	itt	eq
 800d0d8:	089b      	lsreq	r3, r3, #2
 800d0da:	3002      	addeq	r0, #2
 800d0dc:	07d9      	lsls	r1, r3, #31
 800d0de:	d403      	bmi.n	800d0e8 <__lo0bits+0x4e>
 800d0e0:	085b      	lsrs	r3, r3, #1
 800d0e2:	f100 0001 	add.w	r0, r0, #1
 800d0e6:	d003      	beq.n	800d0f0 <__lo0bits+0x56>
 800d0e8:	6013      	str	r3, [r2, #0]
 800d0ea:	4770      	bx	lr
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	4770      	bx	lr
 800d0f0:	2020      	movs	r0, #32
 800d0f2:	4770      	bx	lr

0800d0f4 <__i2b>:
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	f7ff febd 	bl	800ce78 <_Balloc>
 800d0fe:	4602      	mov	r2, r0
 800d100:	b928      	cbnz	r0, 800d10e <__i2b+0x1a>
 800d102:	4b05      	ldr	r3, [pc, #20]	@ (800d118 <__i2b+0x24>)
 800d104:	4805      	ldr	r0, [pc, #20]	@ (800d11c <__i2b+0x28>)
 800d106:	f240 1145 	movw	r1, #325	@ 0x145
 800d10a:	f7fe ff3d 	bl	800bf88 <__assert_func>
 800d10e:	2301      	movs	r3, #1
 800d110:	6144      	str	r4, [r0, #20]
 800d112:	6103      	str	r3, [r0, #16]
 800d114:	bd10      	pop	{r4, pc}
 800d116:	bf00      	nop
 800d118:	0800fa75 	.word	0x0800fa75
 800d11c:	0800fa86 	.word	0x0800fa86

0800d120 <__multiply>:
 800d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	4617      	mov	r7, r2
 800d126:	690a      	ldr	r2, [r1, #16]
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	bfa8      	it	ge
 800d12e:	463b      	movge	r3, r7
 800d130:	4689      	mov	r9, r1
 800d132:	bfa4      	itt	ge
 800d134:	460f      	movge	r7, r1
 800d136:	4699      	movge	r9, r3
 800d138:	693d      	ldr	r5, [r7, #16]
 800d13a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	6879      	ldr	r1, [r7, #4]
 800d142:	eb05 060a 	add.w	r6, r5, sl
 800d146:	42b3      	cmp	r3, r6
 800d148:	b085      	sub	sp, #20
 800d14a:	bfb8      	it	lt
 800d14c:	3101      	addlt	r1, #1
 800d14e:	f7ff fe93 	bl	800ce78 <_Balloc>
 800d152:	b930      	cbnz	r0, 800d162 <__multiply+0x42>
 800d154:	4602      	mov	r2, r0
 800d156:	4b41      	ldr	r3, [pc, #260]	@ (800d25c <__multiply+0x13c>)
 800d158:	4841      	ldr	r0, [pc, #260]	@ (800d260 <__multiply+0x140>)
 800d15a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d15e:	f7fe ff13 	bl	800bf88 <__assert_func>
 800d162:	f100 0414 	add.w	r4, r0, #20
 800d166:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d16a:	4623      	mov	r3, r4
 800d16c:	2200      	movs	r2, #0
 800d16e:	4573      	cmp	r3, lr
 800d170:	d320      	bcc.n	800d1b4 <__multiply+0x94>
 800d172:	f107 0814 	add.w	r8, r7, #20
 800d176:	f109 0114 	add.w	r1, r9, #20
 800d17a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d17e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d182:	9302      	str	r3, [sp, #8]
 800d184:	1beb      	subs	r3, r5, r7
 800d186:	3b15      	subs	r3, #21
 800d188:	f023 0303 	bic.w	r3, r3, #3
 800d18c:	3304      	adds	r3, #4
 800d18e:	3715      	adds	r7, #21
 800d190:	42bd      	cmp	r5, r7
 800d192:	bf38      	it	cc
 800d194:	2304      	movcc	r3, #4
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	9b02      	ldr	r3, [sp, #8]
 800d19a:	9103      	str	r1, [sp, #12]
 800d19c:	428b      	cmp	r3, r1
 800d19e:	d80c      	bhi.n	800d1ba <__multiply+0x9a>
 800d1a0:	2e00      	cmp	r6, #0
 800d1a2:	dd03      	ble.n	800d1ac <__multiply+0x8c>
 800d1a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d055      	beq.n	800d258 <__multiply+0x138>
 800d1ac:	6106      	str	r6, [r0, #16]
 800d1ae:	b005      	add	sp, #20
 800d1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b4:	f843 2b04 	str.w	r2, [r3], #4
 800d1b8:	e7d9      	b.n	800d16e <__multiply+0x4e>
 800d1ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1be:	f1ba 0f00 	cmp.w	sl, #0
 800d1c2:	d01f      	beq.n	800d204 <__multiply+0xe4>
 800d1c4:	46c4      	mov	ip, r8
 800d1c6:	46a1      	mov	r9, r4
 800d1c8:	2700      	movs	r7, #0
 800d1ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1ce:	f8d9 3000 	ldr.w	r3, [r9]
 800d1d2:	fa1f fb82 	uxth.w	fp, r2
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1dc:	443b      	add	r3, r7
 800d1de:	f8d9 7000 	ldr.w	r7, [r9]
 800d1e2:	0c12      	lsrs	r2, r2, #16
 800d1e4:	0c3f      	lsrs	r7, r7, #16
 800d1e6:	fb0a 7202 	mla	r2, sl, r2, r7
 800d1ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1f4:	4565      	cmp	r5, ip
 800d1f6:	f849 3b04 	str.w	r3, [r9], #4
 800d1fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d1fe:	d8e4      	bhi.n	800d1ca <__multiply+0xaa>
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	50e7      	str	r7, [r4, r3]
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d20a:	3104      	adds	r1, #4
 800d20c:	f1b9 0f00 	cmp.w	r9, #0
 800d210:	d020      	beq.n	800d254 <__multiply+0x134>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	4647      	mov	r7, r8
 800d216:	46a4      	mov	ip, r4
 800d218:	f04f 0a00 	mov.w	sl, #0
 800d21c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d220:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d224:	fb09 220b 	mla	r2, r9, fp, r2
 800d228:	4452      	add	r2, sl
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d230:	f84c 3b04 	str.w	r3, [ip], #4
 800d234:	f857 3b04 	ldr.w	r3, [r7], #4
 800d238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d23c:	f8bc 3000 	ldrh.w	r3, [ip]
 800d240:	fb09 330a 	mla	r3, r9, sl, r3
 800d244:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d248:	42bd      	cmp	r5, r7
 800d24a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d24e:	d8e5      	bhi.n	800d21c <__multiply+0xfc>
 800d250:	9a01      	ldr	r2, [sp, #4]
 800d252:	50a3      	str	r3, [r4, r2]
 800d254:	3404      	adds	r4, #4
 800d256:	e79f      	b.n	800d198 <__multiply+0x78>
 800d258:	3e01      	subs	r6, #1
 800d25a:	e7a1      	b.n	800d1a0 <__multiply+0x80>
 800d25c:	0800fa75 	.word	0x0800fa75
 800d260:	0800fa86 	.word	0x0800fa86

0800d264 <__pow5mult>:
 800d264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d268:	4615      	mov	r5, r2
 800d26a:	f012 0203 	ands.w	r2, r2, #3
 800d26e:	4607      	mov	r7, r0
 800d270:	460e      	mov	r6, r1
 800d272:	d007      	beq.n	800d284 <__pow5mult+0x20>
 800d274:	4c25      	ldr	r4, [pc, #148]	@ (800d30c <__pow5mult+0xa8>)
 800d276:	3a01      	subs	r2, #1
 800d278:	2300      	movs	r3, #0
 800d27a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d27e:	f7ff fe5d 	bl	800cf3c <__multadd>
 800d282:	4606      	mov	r6, r0
 800d284:	10ad      	asrs	r5, r5, #2
 800d286:	d03d      	beq.n	800d304 <__pow5mult+0xa0>
 800d288:	69fc      	ldr	r4, [r7, #28]
 800d28a:	b97c      	cbnz	r4, 800d2ac <__pow5mult+0x48>
 800d28c:	2010      	movs	r0, #16
 800d28e:	f7ff fd3d 	bl	800cd0c <malloc>
 800d292:	4602      	mov	r2, r0
 800d294:	61f8      	str	r0, [r7, #28]
 800d296:	b928      	cbnz	r0, 800d2a4 <__pow5mult+0x40>
 800d298:	4b1d      	ldr	r3, [pc, #116]	@ (800d310 <__pow5mult+0xac>)
 800d29a:	481e      	ldr	r0, [pc, #120]	@ (800d314 <__pow5mult+0xb0>)
 800d29c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2a0:	f7fe fe72 	bl	800bf88 <__assert_func>
 800d2a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2a8:	6004      	str	r4, [r0, #0]
 800d2aa:	60c4      	str	r4, [r0, #12]
 800d2ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2b4:	b94c      	cbnz	r4, 800d2ca <__pow5mult+0x66>
 800d2b6:	f240 2171 	movw	r1, #625	@ 0x271
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	f7ff ff1a 	bl	800d0f4 <__i2b>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	6003      	str	r3, [r0, #0]
 800d2ca:	f04f 0900 	mov.w	r9, #0
 800d2ce:	07eb      	lsls	r3, r5, #31
 800d2d0:	d50a      	bpl.n	800d2e8 <__pow5mult+0x84>
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	f7ff ff22 	bl	800d120 <__multiply>
 800d2dc:	4631      	mov	r1, r6
 800d2de:	4680      	mov	r8, r0
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f7ff fe09 	bl	800cef8 <_Bfree>
 800d2e6:	4646      	mov	r6, r8
 800d2e8:	106d      	asrs	r5, r5, #1
 800d2ea:	d00b      	beq.n	800d304 <__pow5mult+0xa0>
 800d2ec:	6820      	ldr	r0, [r4, #0]
 800d2ee:	b938      	cbnz	r0, 800d300 <__pow5mult+0x9c>
 800d2f0:	4622      	mov	r2, r4
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f7ff ff13 	bl	800d120 <__multiply>
 800d2fa:	6020      	str	r0, [r4, #0]
 800d2fc:	f8c0 9000 	str.w	r9, [r0]
 800d300:	4604      	mov	r4, r0
 800d302:	e7e4      	b.n	800d2ce <__pow5mult+0x6a>
 800d304:	4630      	mov	r0, r6
 800d306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d30a:	bf00      	nop
 800d30c:	0800fb5c 	.word	0x0800fb5c
 800d310:	0800f92c 	.word	0x0800f92c
 800d314:	0800fa86 	.word	0x0800fa86

0800d318 <__lshift>:
 800d318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d31c:	460c      	mov	r4, r1
 800d31e:	6849      	ldr	r1, [r1, #4]
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d326:	68a3      	ldr	r3, [r4, #8]
 800d328:	4607      	mov	r7, r0
 800d32a:	4691      	mov	r9, r2
 800d32c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d330:	f108 0601 	add.w	r6, r8, #1
 800d334:	42b3      	cmp	r3, r6
 800d336:	db0b      	blt.n	800d350 <__lshift+0x38>
 800d338:	4638      	mov	r0, r7
 800d33a:	f7ff fd9d 	bl	800ce78 <_Balloc>
 800d33e:	4605      	mov	r5, r0
 800d340:	b948      	cbnz	r0, 800d356 <__lshift+0x3e>
 800d342:	4602      	mov	r2, r0
 800d344:	4b28      	ldr	r3, [pc, #160]	@ (800d3e8 <__lshift+0xd0>)
 800d346:	4829      	ldr	r0, [pc, #164]	@ (800d3ec <__lshift+0xd4>)
 800d348:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d34c:	f7fe fe1c 	bl	800bf88 <__assert_func>
 800d350:	3101      	adds	r1, #1
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	e7ee      	b.n	800d334 <__lshift+0x1c>
 800d356:	2300      	movs	r3, #0
 800d358:	f100 0114 	add.w	r1, r0, #20
 800d35c:	f100 0210 	add.w	r2, r0, #16
 800d360:	4618      	mov	r0, r3
 800d362:	4553      	cmp	r3, sl
 800d364:	db33      	blt.n	800d3ce <__lshift+0xb6>
 800d366:	6920      	ldr	r0, [r4, #16]
 800d368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d36c:	f104 0314 	add.w	r3, r4, #20
 800d370:	f019 091f 	ands.w	r9, r9, #31
 800d374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d37c:	d02b      	beq.n	800d3d6 <__lshift+0xbe>
 800d37e:	f1c9 0e20 	rsb	lr, r9, #32
 800d382:	468a      	mov	sl, r1
 800d384:	2200      	movs	r2, #0
 800d386:	6818      	ldr	r0, [r3, #0]
 800d388:	fa00 f009 	lsl.w	r0, r0, r9
 800d38c:	4310      	orrs	r0, r2
 800d38e:	f84a 0b04 	str.w	r0, [sl], #4
 800d392:	f853 2b04 	ldr.w	r2, [r3], #4
 800d396:	459c      	cmp	ip, r3
 800d398:	fa22 f20e 	lsr.w	r2, r2, lr
 800d39c:	d8f3      	bhi.n	800d386 <__lshift+0x6e>
 800d39e:	ebac 0304 	sub.w	r3, ip, r4
 800d3a2:	3b15      	subs	r3, #21
 800d3a4:	f023 0303 	bic.w	r3, r3, #3
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	f104 0015 	add.w	r0, r4, #21
 800d3ae:	4560      	cmp	r0, ip
 800d3b0:	bf88      	it	hi
 800d3b2:	2304      	movhi	r3, #4
 800d3b4:	50ca      	str	r2, [r1, r3]
 800d3b6:	b10a      	cbz	r2, 800d3bc <__lshift+0xa4>
 800d3b8:	f108 0602 	add.w	r6, r8, #2
 800d3bc:	3e01      	subs	r6, #1
 800d3be:	4638      	mov	r0, r7
 800d3c0:	612e      	str	r6, [r5, #16]
 800d3c2:	4621      	mov	r1, r4
 800d3c4:	f7ff fd98 	bl	800cef8 <_Bfree>
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	e7c5      	b.n	800d362 <__lshift+0x4a>
 800d3d6:	3904      	subs	r1, #4
 800d3d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3e0:	459c      	cmp	ip, r3
 800d3e2:	d8f9      	bhi.n	800d3d8 <__lshift+0xc0>
 800d3e4:	e7ea      	b.n	800d3bc <__lshift+0xa4>
 800d3e6:	bf00      	nop
 800d3e8:	0800fa75 	.word	0x0800fa75
 800d3ec:	0800fa86 	.word	0x0800fa86

0800d3f0 <__mcmp>:
 800d3f0:	690a      	ldr	r2, [r1, #16]
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	6900      	ldr	r0, [r0, #16]
 800d3f6:	1a80      	subs	r0, r0, r2
 800d3f8:	b530      	push	{r4, r5, lr}
 800d3fa:	d10e      	bne.n	800d41a <__mcmp+0x2a>
 800d3fc:	3314      	adds	r3, #20
 800d3fe:	3114      	adds	r1, #20
 800d400:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d404:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d408:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d40c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d410:	4295      	cmp	r5, r2
 800d412:	d003      	beq.n	800d41c <__mcmp+0x2c>
 800d414:	d205      	bcs.n	800d422 <__mcmp+0x32>
 800d416:	f04f 30ff 	mov.w	r0, #4294967295
 800d41a:	bd30      	pop	{r4, r5, pc}
 800d41c:	42a3      	cmp	r3, r4
 800d41e:	d3f3      	bcc.n	800d408 <__mcmp+0x18>
 800d420:	e7fb      	b.n	800d41a <__mcmp+0x2a>
 800d422:	2001      	movs	r0, #1
 800d424:	e7f9      	b.n	800d41a <__mcmp+0x2a>
	...

0800d428 <__mdiff>:
 800d428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	4689      	mov	r9, r1
 800d42e:	4606      	mov	r6, r0
 800d430:	4611      	mov	r1, r2
 800d432:	4648      	mov	r0, r9
 800d434:	4614      	mov	r4, r2
 800d436:	f7ff ffdb 	bl	800d3f0 <__mcmp>
 800d43a:	1e05      	subs	r5, r0, #0
 800d43c:	d112      	bne.n	800d464 <__mdiff+0x3c>
 800d43e:	4629      	mov	r1, r5
 800d440:	4630      	mov	r0, r6
 800d442:	f7ff fd19 	bl	800ce78 <_Balloc>
 800d446:	4602      	mov	r2, r0
 800d448:	b928      	cbnz	r0, 800d456 <__mdiff+0x2e>
 800d44a:	4b3f      	ldr	r3, [pc, #252]	@ (800d548 <__mdiff+0x120>)
 800d44c:	f240 2137 	movw	r1, #567	@ 0x237
 800d450:	483e      	ldr	r0, [pc, #248]	@ (800d54c <__mdiff+0x124>)
 800d452:	f7fe fd99 	bl	800bf88 <__assert_func>
 800d456:	2301      	movs	r3, #1
 800d458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d45c:	4610      	mov	r0, r2
 800d45e:	b003      	add	sp, #12
 800d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d464:	bfbc      	itt	lt
 800d466:	464b      	movlt	r3, r9
 800d468:	46a1      	movlt	r9, r4
 800d46a:	4630      	mov	r0, r6
 800d46c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d470:	bfba      	itte	lt
 800d472:	461c      	movlt	r4, r3
 800d474:	2501      	movlt	r5, #1
 800d476:	2500      	movge	r5, #0
 800d478:	f7ff fcfe 	bl	800ce78 <_Balloc>
 800d47c:	4602      	mov	r2, r0
 800d47e:	b918      	cbnz	r0, 800d488 <__mdiff+0x60>
 800d480:	4b31      	ldr	r3, [pc, #196]	@ (800d548 <__mdiff+0x120>)
 800d482:	f240 2145 	movw	r1, #581	@ 0x245
 800d486:	e7e3      	b.n	800d450 <__mdiff+0x28>
 800d488:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d48c:	6926      	ldr	r6, [r4, #16]
 800d48e:	60c5      	str	r5, [r0, #12]
 800d490:	f109 0310 	add.w	r3, r9, #16
 800d494:	f109 0514 	add.w	r5, r9, #20
 800d498:	f104 0e14 	add.w	lr, r4, #20
 800d49c:	f100 0b14 	add.w	fp, r0, #20
 800d4a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4a8:	9301      	str	r3, [sp, #4]
 800d4aa:	46d9      	mov	r9, fp
 800d4ac:	f04f 0c00 	mov.w	ip, #0
 800d4b0:	9b01      	ldr	r3, [sp, #4]
 800d4b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4ba:	9301      	str	r3, [sp, #4]
 800d4bc:	fa1f f38a 	uxth.w	r3, sl
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	b283      	uxth	r3, r0
 800d4c4:	1acb      	subs	r3, r1, r3
 800d4c6:	0c00      	lsrs	r0, r0, #16
 800d4c8:	4463      	add	r3, ip
 800d4ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4d8:	4576      	cmp	r6, lr
 800d4da:	f849 3b04 	str.w	r3, [r9], #4
 800d4de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4e2:	d8e5      	bhi.n	800d4b0 <__mdiff+0x88>
 800d4e4:	1b33      	subs	r3, r6, r4
 800d4e6:	3b15      	subs	r3, #21
 800d4e8:	f023 0303 	bic.w	r3, r3, #3
 800d4ec:	3415      	adds	r4, #21
 800d4ee:	3304      	adds	r3, #4
 800d4f0:	42a6      	cmp	r6, r4
 800d4f2:	bf38      	it	cc
 800d4f4:	2304      	movcc	r3, #4
 800d4f6:	441d      	add	r5, r3
 800d4f8:	445b      	add	r3, fp
 800d4fa:	461e      	mov	r6, r3
 800d4fc:	462c      	mov	r4, r5
 800d4fe:	4544      	cmp	r4, r8
 800d500:	d30e      	bcc.n	800d520 <__mdiff+0xf8>
 800d502:	f108 0103 	add.w	r1, r8, #3
 800d506:	1b49      	subs	r1, r1, r5
 800d508:	f021 0103 	bic.w	r1, r1, #3
 800d50c:	3d03      	subs	r5, #3
 800d50e:	45a8      	cmp	r8, r5
 800d510:	bf38      	it	cc
 800d512:	2100      	movcc	r1, #0
 800d514:	440b      	add	r3, r1
 800d516:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d51a:	b191      	cbz	r1, 800d542 <__mdiff+0x11a>
 800d51c:	6117      	str	r7, [r2, #16]
 800d51e:	e79d      	b.n	800d45c <__mdiff+0x34>
 800d520:	f854 1b04 	ldr.w	r1, [r4], #4
 800d524:	46e6      	mov	lr, ip
 800d526:	0c08      	lsrs	r0, r1, #16
 800d528:	fa1c fc81 	uxtah	ip, ip, r1
 800d52c:	4471      	add	r1, lr
 800d52e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d532:	b289      	uxth	r1, r1
 800d534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d538:	f846 1b04 	str.w	r1, [r6], #4
 800d53c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d540:	e7dd      	b.n	800d4fe <__mdiff+0xd6>
 800d542:	3f01      	subs	r7, #1
 800d544:	e7e7      	b.n	800d516 <__mdiff+0xee>
 800d546:	bf00      	nop
 800d548:	0800fa75 	.word	0x0800fa75
 800d54c:	0800fa86 	.word	0x0800fa86

0800d550 <__ulp>:
 800d550:	b082      	sub	sp, #8
 800d552:	ed8d 0b00 	vstr	d0, [sp]
 800d556:	9a01      	ldr	r2, [sp, #4]
 800d558:	4b0f      	ldr	r3, [pc, #60]	@ (800d598 <__ulp+0x48>)
 800d55a:	4013      	ands	r3, r2
 800d55c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d560:	2b00      	cmp	r3, #0
 800d562:	dc08      	bgt.n	800d576 <__ulp+0x26>
 800d564:	425b      	negs	r3, r3
 800d566:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d56a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d56e:	da04      	bge.n	800d57a <__ulp+0x2a>
 800d570:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d574:	4113      	asrs	r3, r2
 800d576:	2200      	movs	r2, #0
 800d578:	e008      	b.n	800d58c <__ulp+0x3c>
 800d57a:	f1a2 0314 	sub.w	r3, r2, #20
 800d57e:	2b1e      	cmp	r3, #30
 800d580:	bfda      	itte	le
 800d582:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d586:	40da      	lsrle	r2, r3
 800d588:	2201      	movgt	r2, #1
 800d58a:	2300      	movs	r3, #0
 800d58c:	4619      	mov	r1, r3
 800d58e:	4610      	mov	r0, r2
 800d590:	ec41 0b10 	vmov	d0, r0, r1
 800d594:	b002      	add	sp, #8
 800d596:	4770      	bx	lr
 800d598:	7ff00000 	.word	0x7ff00000

0800d59c <__b2d>:
 800d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	6906      	ldr	r6, [r0, #16]
 800d5a2:	f100 0814 	add.w	r8, r0, #20
 800d5a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d5aa:	1f37      	subs	r7, r6, #4
 800d5ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	f7ff fd53 	bl	800d05c <__hi0bits>
 800d5b6:	f1c0 0320 	rsb	r3, r0, #32
 800d5ba:	280a      	cmp	r0, #10
 800d5bc:	600b      	str	r3, [r1, #0]
 800d5be:	491b      	ldr	r1, [pc, #108]	@ (800d62c <__b2d+0x90>)
 800d5c0:	dc15      	bgt.n	800d5ee <__b2d+0x52>
 800d5c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d5c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d5ca:	45b8      	cmp	r8, r7
 800d5cc:	ea43 0501 	orr.w	r5, r3, r1
 800d5d0:	bf34      	ite	cc
 800d5d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5d6:	2300      	movcs	r3, #0
 800d5d8:	3015      	adds	r0, #21
 800d5da:	fa02 f000 	lsl.w	r0, r2, r0
 800d5de:	fa23 f30c 	lsr.w	r3, r3, ip
 800d5e2:	4303      	orrs	r3, r0
 800d5e4:	461c      	mov	r4, r3
 800d5e6:	ec45 4b10 	vmov	d0, r4, r5
 800d5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ee:	45b8      	cmp	r8, r7
 800d5f0:	bf3a      	itte	cc
 800d5f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800d5fa:	2300      	movcs	r3, #0
 800d5fc:	380b      	subs	r0, #11
 800d5fe:	d012      	beq.n	800d626 <__b2d+0x8a>
 800d600:	f1c0 0120 	rsb	r1, r0, #32
 800d604:	fa23 f401 	lsr.w	r4, r3, r1
 800d608:	4082      	lsls	r2, r0
 800d60a:	4322      	orrs	r2, r4
 800d60c:	4547      	cmp	r7, r8
 800d60e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d612:	bf8c      	ite	hi
 800d614:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d618:	2200      	movls	r2, #0
 800d61a:	4083      	lsls	r3, r0
 800d61c:	40ca      	lsrs	r2, r1
 800d61e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d622:	4313      	orrs	r3, r2
 800d624:	e7de      	b.n	800d5e4 <__b2d+0x48>
 800d626:	ea42 0501 	orr.w	r5, r2, r1
 800d62a:	e7db      	b.n	800d5e4 <__b2d+0x48>
 800d62c:	3ff00000 	.word	0x3ff00000

0800d630 <__d2b>:
 800d630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d634:	460f      	mov	r7, r1
 800d636:	2101      	movs	r1, #1
 800d638:	ec59 8b10 	vmov	r8, r9, d0
 800d63c:	4616      	mov	r6, r2
 800d63e:	f7ff fc1b 	bl	800ce78 <_Balloc>
 800d642:	4604      	mov	r4, r0
 800d644:	b930      	cbnz	r0, 800d654 <__d2b+0x24>
 800d646:	4602      	mov	r2, r0
 800d648:	4b23      	ldr	r3, [pc, #140]	@ (800d6d8 <__d2b+0xa8>)
 800d64a:	4824      	ldr	r0, [pc, #144]	@ (800d6dc <__d2b+0xac>)
 800d64c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d650:	f7fe fc9a 	bl	800bf88 <__assert_func>
 800d654:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d65c:	b10d      	cbz	r5, 800d662 <__d2b+0x32>
 800d65e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d662:	9301      	str	r3, [sp, #4]
 800d664:	f1b8 0300 	subs.w	r3, r8, #0
 800d668:	d023      	beq.n	800d6b2 <__d2b+0x82>
 800d66a:	4668      	mov	r0, sp
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	f7ff fd14 	bl	800d09a <__lo0bits>
 800d672:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d676:	b1d0      	cbz	r0, 800d6ae <__d2b+0x7e>
 800d678:	f1c0 0320 	rsb	r3, r0, #32
 800d67c:	fa02 f303 	lsl.w	r3, r2, r3
 800d680:	430b      	orrs	r3, r1
 800d682:	40c2      	lsrs	r2, r0
 800d684:	6163      	str	r3, [r4, #20]
 800d686:	9201      	str	r2, [sp, #4]
 800d688:	9b01      	ldr	r3, [sp, #4]
 800d68a:	61a3      	str	r3, [r4, #24]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	bf0c      	ite	eq
 800d690:	2201      	moveq	r2, #1
 800d692:	2202      	movne	r2, #2
 800d694:	6122      	str	r2, [r4, #16]
 800d696:	b1a5      	cbz	r5, 800d6c2 <__d2b+0x92>
 800d698:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d69c:	4405      	add	r5, r0
 800d69e:	603d      	str	r5, [r7, #0]
 800d6a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d6a4:	6030      	str	r0, [r6, #0]
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	b003      	add	sp, #12
 800d6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6ae:	6161      	str	r1, [r4, #20]
 800d6b0:	e7ea      	b.n	800d688 <__d2b+0x58>
 800d6b2:	a801      	add	r0, sp, #4
 800d6b4:	f7ff fcf1 	bl	800d09a <__lo0bits>
 800d6b8:	9b01      	ldr	r3, [sp, #4]
 800d6ba:	6163      	str	r3, [r4, #20]
 800d6bc:	3020      	adds	r0, #32
 800d6be:	2201      	movs	r2, #1
 800d6c0:	e7e8      	b.n	800d694 <__d2b+0x64>
 800d6c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d6ca:	6038      	str	r0, [r7, #0]
 800d6cc:	6918      	ldr	r0, [r3, #16]
 800d6ce:	f7ff fcc5 	bl	800d05c <__hi0bits>
 800d6d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6d6:	e7e5      	b.n	800d6a4 <__d2b+0x74>
 800d6d8:	0800fa75 	.word	0x0800fa75
 800d6dc:	0800fa86 	.word	0x0800fa86

0800d6e0 <__ratio>:
 800d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	b085      	sub	sp, #20
 800d6e6:	e9cd 1000 	strd	r1, r0, [sp]
 800d6ea:	a902      	add	r1, sp, #8
 800d6ec:	f7ff ff56 	bl	800d59c <__b2d>
 800d6f0:	9800      	ldr	r0, [sp, #0]
 800d6f2:	a903      	add	r1, sp, #12
 800d6f4:	ec55 4b10 	vmov	r4, r5, d0
 800d6f8:	f7ff ff50 	bl	800d59c <__b2d>
 800d6fc:	9b01      	ldr	r3, [sp, #4]
 800d6fe:	6919      	ldr	r1, [r3, #16]
 800d700:	9b00      	ldr	r3, [sp, #0]
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	1ac9      	subs	r1, r1, r3
 800d706:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d70a:	1a9b      	subs	r3, r3, r2
 800d70c:	ec5b ab10 	vmov	sl, fp, d0
 800d710:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d714:	2b00      	cmp	r3, #0
 800d716:	bfce      	itee	gt
 800d718:	462a      	movgt	r2, r5
 800d71a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d71e:	465a      	movle	r2, fp
 800d720:	462f      	mov	r7, r5
 800d722:	46d9      	mov	r9, fp
 800d724:	bfcc      	ite	gt
 800d726:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d72a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d72e:	464b      	mov	r3, r9
 800d730:	4652      	mov	r2, sl
 800d732:	4620      	mov	r0, r4
 800d734:	4639      	mov	r1, r7
 800d736:	f7f3 f889 	bl	800084c <__aeabi_ddiv>
 800d73a:	ec41 0b10 	vmov	d0, r0, r1
 800d73e:	b005      	add	sp, #20
 800d740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d744 <__copybits>:
 800d744:	3901      	subs	r1, #1
 800d746:	b570      	push	{r4, r5, r6, lr}
 800d748:	1149      	asrs	r1, r1, #5
 800d74a:	6914      	ldr	r4, [r2, #16]
 800d74c:	3101      	adds	r1, #1
 800d74e:	f102 0314 	add.w	r3, r2, #20
 800d752:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d756:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d75a:	1f05      	subs	r5, r0, #4
 800d75c:	42a3      	cmp	r3, r4
 800d75e:	d30c      	bcc.n	800d77a <__copybits+0x36>
 800d760:	1aa3      	subs	r3, r4, r2
 800d762:	3b11      	subs	r3, #17
 800d764:	f023 0303 	bic.w	r3, r3, #3
 800d768:	3211      	adds	r2, #17
 800d76a:	42a2      	cmp	r2, r4
 800d76c:	bf88      	it	hi
 800d76e:	2300      	movhi	r3, #0
 800d770:	4418      	add	r0, r3
 800d772:	2300      	movs	r3, #0
 800d774:	4288      	cmp	r0, r1
 800d776:	d305      	bcc.n	800d784 <__copybits+0x40>
 800d778:	bd70      	pop	{r4, r5, r6, pc}
 800d77a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d77e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d782:	e7eb      	b.n	800d75c <__copybits+0x18>
 800d784:	f840 3b04 	str.w	r3, [r0], #4
 800d788:	e7f4      	b.n	800d774 <__copybits+0x30>

0800d78a <__any_on>:
 800d78a:	f100 0214 	add.w	r2, r0, #20
 800d78e:	6900      	ldr	r0, [r0, #16]
 800d790:	114b      	asrs	r3, r1, #5
 800d792:	4298      	cmp	r0, r3
 800d794:	b510      	push	{r4, lr}
 800d796:	db11      	blt.n	800d7bc <__any_on+0x32>
 800d798:	dd0a      	ble.n	800d7b0 <__any_on+0x26>
 800d79a:	f011 011f 	ands.w	r1, r1, #31
 800d79e:	d007      	beq.n	800d7b0 <__any_on+0x26>
 800d7a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d7a4:	fa24 f001 	lsr.w	r0, r4, r1
 800d7a8:	fa00 f101 	lsl.w	r1, r0, r1
 800d7ac:	428c      	cmp	r4, r1
 800d7ae:	d10b      	bne.n	800d7c8 <__any_on+0x3e>
 800d7b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d803      	bhi.n	800d7c0 <__any_on+0x36>
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	bd10      	pop	{r4, pc}
 800d7bc:	4603      	mov	r3, r0
 800d7be:	e7f7      	b.n	800d7b0 <__any_on+0x26>
 800d7c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7c4:	2900      	cmp	r1, #0
 800d7c6:	d0f5      	beq.n	800d7b4 <__any_on+0x2a>
 800d7c8:	2001      	movs	r0, #1
 800d7ca:	e7f6      	b.n	800d7ba <__any_on+0x30>

0800d7cc <sulp>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	460d      	mov	r5, r1
 800d7d2:	ec45 4b10 	vmov	d0, r4, r5
 800d7d6:	4616      	mov	r6, r2
 800d7d8:	f7ff feba 	bl	800d550 <__ulp>
 800d7dc:	ec51 0b10 	vmov	r0, r1, d0
 800d7e0:	b17e      	cbz	r6, 800d802 <sulp+0x36>
 800d7e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d7e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	dd09      	ble.n	800d802 <sulp+0x36>
 800d7ee:	051b      	lsls	r3, r3, #20
 800d7f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d7f4:	2400      	movs	r4, #0
 800d7f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	462b      	mov	r3, r5
 800d7fe:	f7f2 fefb 	bl	80005f8 <__aeabi_dmul>
 800d802:	ec41 0b10 	vmov	d0, r0, r1
 800d806:	bd70      	pop	{r4, r5, r6, pc}

0800d808 <_strtod_l>:
 800d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	b09f      	sub	sp, #124	@ 0x7c
 800d80e:	460c      	mov	r4, r1
 800d810:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d812:	2200      	movs	r2, #0
 800d814:	921a      	str	r2, [sp, #104]	@ 0x68
 800d816:	9005      	str	r0, [sp, #20]
 800d818:	f04f 0a00 	mov.w	sl, #0
 800d81c:	f04f 0b00 	mov.w	fp, #0
 800d820:	460a      	mov	r2, r1
 800d822:	9219      	str	r2, [sp, #100]	@ 0x64
 800d824:	7811      	ldrb	r1, [r2, #0]
 800d826:	292b      	cmp	r1, #43	@ 0x2b
 800d828:	d04a      	beq.n	800d8c0 <_strtod_l+0xb8>
 800d82a:	d838      	bhi.n	800d89e <_strtod_l+0x96>
 800d82c:	290d      	cmp	r1, #13
 800d82e:	d832      	bhi.n	800d896 <_strtod_l+0x8e>
 800d830:	2908      	cmp	r1, #8
 800d832:	d832      	bhi.n	800d89a <_strtod_l+0x92>
 800d834:	2900      	cmp	r1, #0
 800d836:	d03b      	beq.n	800d8b0 <_strtod_l+0xa8>
 800d838:	2200      	movs	r2, #0
 800d83a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d83c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d83e:	782a      	ldrb	r2, [r5, #0]
 800d840:	2a30      	cmp	r2, #48	@ 0x30
 800d842:	f040 80b2 	bne.w	800d9aa <_strtod_l+0x1a2>
 800d846:	786a      	ldrb	r2, [r5, #1]
 800d848:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d84c:	2a58      	cmp	r2, #88	@ 0x58
 800d84e:	d16e      	bne.n	800d92e <_strtod_l+0x126>
 800d850:	9302      	str	r3, [sp, #8]
 800d852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	ab1a      	add	r3, sp, #104	@ 0x68
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	4a8f      	ldr	r2, [pc, #572]	@ (800da98 <_strtod_l+0x290>)
 800d85c:	9805      	ldr	r0, [sp, #20]
 800d85e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d860:	a919      	add	r1, sp, #100	@ 0x64
 800d862:	f001 fadb 	bl	800ee1c <__gethex>
 800d866:	f010 060f 	ands.w	r6, r0, #15
 800d86a:	4604      	mov	r4, r0
 800d86c:	d005      	beq.n	800d87a <_strtod_l+0x72>
 800d86e:	2e06      	cmp	r6, #6
 800d870:	d128      	bne.n	800d8c4 <_strtod_l+0xbc>
 800d872:	3501      	adds	r5, #1
 800d874:	2300      	movs	r3, #0
 800d876:	9519      	str	r5, [sp, #100]	@ 0x64
 800d878:	930e      	str	r3, [sp, #56]	@ 0x38
 800d87a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f040 858e 	bne.w	800e39e <_strtod_l+0xb96>
 800d882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d884:	b1cb      	cbz	r3, 800d8ba <_strtod_l+0xb2>
 800d886:	4652      	mov	r2, sl
 800d888:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d88c:	ec43 2b10 	vmov	d0, r2, r3
 800d890:	b01f      	add	sp, #124	@ 0x7c
 800d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d896:	2920      	cmp	r1, #32
 800d898:	d1ce      	bne.n	800d838 <_strtod_l+0x30>
 800d89a:	3201      	adds	r2, #1
 800d89c:	e7c1      	b.n	800d822 <_strtod_l+0x1a>
 800d89e:	292d      	cmp	r1, #45	@ 0x2d
 800d8a0:	d1ca      	bne.n	800d838 <_strtod_l+0x30>
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	910e      	str	r1, [sp, #56]	@ 0x38
 800d8a6:	1c51      	adds	r1, r2, #1
 800d8a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8aa:	7852      	ldrb	r2, [r2, #1]
 800d8ac:	2a00      	cmp	r2, #0
 800d8ae:	d1c5      	bne.n	800d83c <_strtod_l+0x34>
 800d8b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f040 8570 	bne.w	800e39a <_strtod_l+0xb92>
 800d8ba:	4652      	mov	r2, sl
 800d8bc:	465b      	mov	r3, fp
 800d8be:	e7e5      	b.n	800d88c <_strtod_l+0x84>
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	e7ef      	b.n	800d8a4 <_strtod_l+0x9c>
 800d8c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d8c6:	b13a      	cbz	r2, 800d8d8 <_strtod_l+0xd0>
 800d8c8:	2135      	movs	r1, #53	@ 0x35
 800d8ca:	a81c      	add	r0, sp, #112	@ 0x70
 800d8cc:	f7ff ff3a 	bl	800d744 <__copybits>
 800d8d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8d2:	9805      	ldr	r0, [sp, #20]
 800d8d4:	f7ff fb10 	bl	800cef8 <_Bfree>
 800d8d8:	3e01      	subs	r6, #1
 800d8da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d8dc:	2e04      	cmp	r6, #4
 800d8de:	d806      	bhi.n	800d8ee <_strtod_l+0xe6>
 800d8e0:	e8df f006 	tbb	[pc, r6]
 800d8e4:	201d0314 	.word	0x201d0314
 800d8e8:	14          	.byte	0x14
 800d8e9:	00          	.byte	0x00
 800d8ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d8ee:	05e1      	lsls	r1, r4, #23
 800d8f0:	bf48      	it	mi
 800d8f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d8f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8fa:	0d1b      	lsrs	r3, r3, #20
 800d8fc:	051b      	lsls	r3, r3, #20
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1bb      	bne.n	800d87a <_strtod_l+0x72>
 800d902:	f7fe faff 	bl	800bf04 <__errno>
 800d906:	2322      	movs	r3, #34	@ 0x22
 800d908:	6003      	str	r3, [r0, #0]
 800d90a:	e7b6      	b.n	800d87a <_strtod_l+0x72>
 800d90c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d910:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d914:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d918:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d91c:	e7e7      	b.n	800d8ee <_strtod_l+0xe6>
 800d91e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800daa0 <_strtod_l+0x298>
 800d922:	e7e4      	b.n	800d8ee <_strtod_l+0xe6>
 800d924:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d928:	f04f 3aff 	mov.w	sl, #4294967295
 800d92c:	e7df      	b.n	800d8ee <_strtod_l+0xe6>
 800d92e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	9219      	str	r2, [sp, #100]	@ 0x64
 800d934:	785b      	ldrb	r3, [r3, #1]
 800d936:	2b30      	cmp	r3, #48	@ 0x30
 800d938:	d0f9      	beq.n	800d92e <_strtod_l+0x126>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d09d      	beq.n	800d87a <_strtod_l+0x72>
 800d93e:	2301      	movs	r3, #1
 800d940:	2700      	movs	r7, #0
 800d942:	9308      	str	r3, [sp, #32]
 800d944:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d946:	930c      	str	r3, [sp, #48]	@ 0x30
 800d948:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d94a:	46b9      	mov	r9, r7
 800d94c:	220a      	movs	r2, #10
 800d94e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d950:	7805      	ldrb	r5, [r0, #0]
 800d952:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d956:	b2d9      	uxtb	r1, r3
 800d958:	2909      	cmp	r1, #9
 800d95a:	d928      	bls.n	800d9ae <_strtod_l+0x1a6>
 800d95c:	494f      	ldr	r1, [pc, #316]	@ (800da9c <_strtod_l+0x294>)
 800d95e:	2201      	movs	r2, #1
 800d960:	f001 f98c 	bl	800ec7c <strncmp>
 800d964:	2800      	cmp	r0, #0
 800d966:	d032      	beq.n	800d9ce <_strtod_l+0x1c6>
 800d968:	2000      	movs	r0, #0
 800d96a:	462a      	mov	r2, r5
 800d96c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d96e:	464d      	mov	r5, r9
 800d970:	4603      	mov	r3, r0
 800d972:	2a65      	cmp	r2, #101	@ 0x65
 800d974:	d001      	beq.n	800d97a <_strtod_l+0x172>
 800d976:	2a45      	cmp	r2, #69	@ 0x45
 800d978:	d114      	bne.n	800d9a4 <_strtod_l+0x19c>
 800d97a:	b91d      	cbnz	r5, 800d984 <_strtod_l+0x17c>
 800d97c:	9a08      	ldr	r2, [sp, #32]
 800d97e:	4302      	orrs	r2, r0
 800d980:	d096      	beq.n	800d8b0 <_strtod_l+0xa8>
 800d982:	2500      	movs	r5, #0
 800d984:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d986:	1c62      	adds	r2, r4, #1
 800d988:	9219      	str	r2, [sp, #100]	@ 0x64
 800d98a:	7862      	ldrb	r2, [r4, #1]
 800d98c:	2a2b      	cmp	r2, #43	@ 0x2b
 800d98e:	d07a      	beq.n	800da86 <_strtod_l+0x27e>
 800d990:	2a2d      	cmp	r2, #45	@ 0x2d
 800d992:	d07e      	beq.n	800da92 <_strtod_l+0x28a>
 800d994:	f04f 0c00 	mov.w	ip, #0
 800d998:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d99c:	2909      	cmp	r1, #9
 800d99e:	f240 8085 	bls.w	800daac <_strtod_l+0x2a4>
 800d9a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d9a4:	f04f 0800 	mov.w	r8, #0
 800d9a8:	e0a5      	b.n	800daf6 <_strtod_l+0x2ee>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	e7c8      	b.n	800d940 <_strtod_l+0x138>
 800d9ae:	f1b9 0f08 	cmp.w	r9, #8
 800d9b2:	bfd8      	it	le
 800d9b4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d9b6:	f100 0001 	add.w	r0, r0, #1
 800d9ba:	bfda      	itte	le
 800d9bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9c0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d9c2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d9c6:	f109 0901 	add.w	r9, r9, #1
 800d9ca:	9019      	str	r0, [sp, #100]	@ 0x64
 800d9cc:	e7bf      	b.n	800d94e <_strtod_l+0x146>
 800d9ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9d0:	1c5a      	adds	r2, r3, #1
 800d9d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9d4:	785a      	ldrb	r2, [r3, #1]
 800d9d6:	f1b9 0f00 	cmp.w	r9, #0
 800d9da:	d03b      	beq.n	800da54 <_strtod_l+0x24c>
 800d9dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d9de:	464d      	mov	r5, r9
 800d9e0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d9e4:	2b09      	cmp	r3, #9
 800d9e6:	d912      	bls.n	800da0e <_strtod_l+0x206>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e7c2      	b.n	800d972 <_strtod_l+0x16a>
 800d9ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9ee:	1c5a      	adds	r2, r3, #1
 800d9f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9f2:	785a      	ldrb	r2, [r3, #1]
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	2a30      	cmp	r2, #48	@ 0x30
 800d9f8:	d0f8      	beq.n	800d9ec <_strtod_l+0x1e4>
 800d9fa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	f200 84d2 	bhi.w	800e3a8 <_strtod_l+0xba0>
 800da04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da06:	900a      	str	r0, [sp, #40]	@ 0x28
 800da08:	2000      	movs	r0, #0
 800da0a:	930c      	str	r3, [sp, #48]	@ 0x30
 800da0c:	4605      	mov	r5, r0
 800da0e:	3a30      	subs	r2, #48	@ 0x30
 800da10:	f100 0301 	add.w	r3, r0, #1
 800da14:	d018      	beq.n	800da48 <_strtod_l+0x240>
 800da16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da18:	4419      	add	r1, r3
 800da1a:	910a      	str	r1, [sp, #40]	@ 0x28
 800da1c:	462e      	mov	r6, r5
 800da1e:	f04f 0e0a 	mov.w	lr, #10
 800da22:	1c71      	adds	r1, r6, #1
 800da24:	eba1 0c05 	sub.w	ip, r1, r5
 800da28:	4563      	cmp	r3, ip
 800da2a:	dc15      	bgt.n	800da58 <_strtod_l+0x250>
 800da2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800da30:	182b      	adds	r3, r5, r0
 800da32:	2b08      	cmp	r3, #8
 800da34:	f105 0501 	add.w	r5, r5, #1
 800da38:	4405      	add	r5, r0
 800da3a:	dc1a      	bgt.n	800da72 <_strtod_l+0x26a>
 800da3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da3e:	230a      	movs	r3, #10
 800da40:	fb03 2301 	mla	r3, r3, r1, r2
 800da44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da46:	2300      	movs	r3, #0
 800da48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da4a:	1c51      	adds	r1, r2, #1
 800da4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800da4e:	7852      	ldrb	r2, [r2, #1]
 800da50:	4618      	mov	r0, r3
 800da52:	e7c5      	b.n	800d9e0 <_strtod_l+0x1d8>
 800da54:	4648      	mov	r0, r9
 800da56:	e7ce      	b.n	800d9f6 <_strtod_l+0x1ee>
 800da58:	2e08      	cmp	r6, #8
 800da5a:	dc05      	bgt.n	800da68 <_strtod_l+0x260>
 800da5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800da5e:	fb0e f606 	mul.w	r6, lr, r6
 800da62:	960b      	str	r6, [sp, #44]	@ 0x2c
 800da64:	460e      	mov	r6, r1
 800da66:	e7dc      	b.n	800da22 <_strtod_l+0x21a>
 800da68:	2910      	cmp	r1, #16
 800da6a:	bfd8      	it	le
 800da6c:	fb0e f707 	mulle.w	r7, lr, r7
 800da70:	e7f8      	b.n	800da64 <_strtod_l+0x25c>
 800da72:	2b0f      	cmp	r3, #15
 800da74:	bfdc      	itt	le
 800da76:	230a      	movle	r3, #10
 800da78:	fb03 2707 	mlale	r7, r3, r7, r2
 800da7c:	e7e3      	b.n	800da46 <_strtod_l+0x23e>
 800da7e:	2300      	movs	r3, #0
 800da80:	930a      	str	r3, [sp, #40]	@ 0x28
 800da82:	2301      	movs	r3, #1
 800da84:	e77a      	b.n	800d97c <_strtod_l+0x174>
 800da86:	f04f 0c00 	mov.w	ip, #0
 800da8a:	1ca2      	adds	r2, r4, #2
 800da8c:	9219      	str	r2, [sp, #100]	@ 0x64
 800da8e:	78a2      	ldrb	r2, [r4, #2]
 800da90:	e782      	b.n	800d998 <_strtod_l+0x190>
 800da92:	f04f 0c01 	mov.w	ip, #1
 800da96:	e7f8      	b.n	800da8a <_strtod_l+0x282>
 800da98:	0800fc6c 	.word	0x0800fc6c
 800da9c:	0800fadf 	.word	0x0800fadf
 800daa0:	7ff00000 	.word	0x7ff00000
 800daa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800daa6:	1c51      	adds	r1, r2, #1
 800daa8:	9119      	str	r1, [sp, #100]	@ 0x64
 800daaa:	7852      	ldrb	r2, [r2, #1]
 800daac:	2a30      	cmp	r2, #48	@ 0x30
 800daae:	d0f9      	beq.n	800daa4 <_strtod_l+0x29c>
 800dab0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dab4:	2908      	cmp	r1, #8
 800dab6:	f63f af75 	bhi.w	800d9a4 <_strtod_l+0x19c>
 800daba:	3a30      	subs	r2, #48	@ 0x30
 800dabc:	9209      	str	r2, [sp, #36]	@ 0x24
 800dabe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dac0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dac2:	f04f 080a 	mov.w	r8, #10
 800dac6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dac8:	1c56      	adds	r6, r2, #1
 800daca:	9619      	str	r6, [sp, #100]	@ 0x64
 800dacc:	7852      	ldrb	r2, [r2, #1]
 800dace:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dad2:	f1be 0f09 	cmp.w	lr, #9
 800dad6:	d939      	bls.n	800db4c <_strtod_l+0x344>
 800dad8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dada:	1a76      	subs	r6, r6, r1
 800dadc:	2e08      	cmp	r6, #8
 800dade:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dae2:	dc03      	bgt.n	800daec <_strtod_l+0x2e4>
 800dae4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dae6:	4588      	cmp	r8, r1
 800dae8:	bfa8      	it	ge
 800daea:	4688      	movge	r8, r1
 800daec:	f1bc 0f00 	cmp.w	ip, #0
 800daf0:	d001      	beq.n	800daf6 <_strtod_l+0x2ee>
 800daf2:	f1c8 0800 	rsb	r8, r8, #0
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	d14e      	bne.n	800db98 <_strtod_l+0x390>
 800dafa:	9908      	ldr	r1, [sp, #32]
 800dafc:	4308      	orrs	r0, r1
 800dafe:	f47f aebc 	bne.w	800d87a <_strtod_l+0x72>
 800db02:	2b00      	cmp	r3, #0
 800db04:	f47f aed4 	bne.w	800d8b0 <_strtod_l+0xa8>
 800db08:	2a69      	cmp	r2, #105	@ 0x69
 800db0a:	d028      	beq.n	800db5e <_strtod_l+0x356>
 800db0c:	dc25      	bgt.n	800db5a <_strtod_l+0x352>
 800db0e:	2a49      	cmp	r2, #73	@ 0x49
 800db10:	d025      	beq.n	800db5e <_strtod_l+0x356>
 800db12:	2a4e      	cmp	r2, #78	@ 0x4e
 800db14:	f47f aecc 	bne.w	800d8b0 <_strtod_l+0xa8>
 800db18:	499a      	ldr	r1, [pc, #616]	@ (800dd84 <_strtod_l+0x57c>)
 800db1a:	a819      	add	r0, sp, #100	@ 0x64
 800db1c:	f001 fba0 	bl	800f260 <__match>
 800db20:	2800      	cmp	r0, #0
 800db22:	f43f aec5 	beq.w	800d8b0 <_strtod_l+0xa8>
 800db26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b28      	cmp	r3, #40	@ 0x28
 800db2c:	d12e      	bne.n	800db8c <_strtod_l+0x384>
 800db2e:	4996      	ldr	r1, [pc, #600]	@ (800dd88 <_strtod_l+0x580>)
 800db30:	aa1c      	add	r2, sp, #112	@ 0x70
 800db32:	a819      	add	r0, sp, #100	@ 0x64
 800db34:	f001 fba8 	bl	800f288 <__hexnan>
 800db38:	2805      	cmp	r0, #5
 800db3a:	d127      	bne.n	800db8c <_strtod_l+0x384>
 800db3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db3e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800db42:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800db46:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800db4a:	e696      	b.n	800d87a <_strtod_l+0x72>
 800db4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db4e:	fb08 2101 	mla	r1, r8, r1, r2
 800db52:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800db56:	9209      	str	r2, [sp, #36]	@ 0x24
 800db58:	e7b5      	b.n	800dac6 <_strtod_l+0x2be>
 800db5a:	2a6e      	cmp	r2, #110	@ 0x6e
 800db5c:	e7da      	b.n	800db14 <_strtod_l+0x30c>
 800db5e:	498b      	ldr	r1, [pc, #556]	@ (800dd8c <_strtod_l+0x584>)
 800db60:	a819      	add	r0, sp, #100	@ 0x64
 800db62:	f001 fb7d 	bl	800f260 <__match>
 800db66:	2800      	cmp	r0, #0
 800db68:	f43f aea2 	beq.w	800d8b0 <_strtod_l+0xa8>
 800db6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db6e:	4988      	ldr	r1, [pc, #544]	@ (800dd90 <_strtod_l+0x588>)
 800db70:	3b01      	subs	r3, #1
 800db72:	a819      	add	r0, sp, #100	@ 0x64
 800db74:	9319      	str	r3, [sp, #100]	@ 0x64
 800db76:	f001 fb73 	bl	800f260 <__match>
 800db7a:	b910      	cbnz	r0, 800db82 <_strtod_l+0x37a>
 800db7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db7e:	3301      	adds	r3, #1
 800db80:	9319      	str	r3, [sp, #100]	@ 0x64
 800db82:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800dda0 <_strtod_l+0x598>
 800db86:	f04f 0a00 	mov.w	sl, #0
 800db8a:	e676      	b.n	800d87a <_strtod_l+0x72>
 800db8c:	4881      	ldr	r0, [pc, #516]	@ (800dd94 <_strtod_l+0x58c>)
 800db8e:	f001 f8bb 	bl	800ed08 <nan>
 800db92:	ec5b ab10 	vmov	sl, fp, d0
 800db96:	e670      	b.n	800d87a <_strtod_l+0x72>
 800db98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800db9c:	eba8 0303 	sub.w	r3, r8, r3
 800dba0:	f1b9 0f00 	cmp.w	r9, #0
 800dba4:	bf08      	it	eq
 800dba6:	46a9      	moveq	r9, r5
 800dba8:	2d10      	cmp	r5, #16
 800dbaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbac:	462c      	mov	r4, r5
 800dbae:	bfa8      	it	ge
 800dbb0:	2410      	movge	r4, #16
 800dbb2:	f7f2 fca7 	bl	8000504 <__aeabi_ui2d>
 800dbb6:	2d09      	cmp	r5, #9
 800dbb8:	4682      	mov	sl, r0
 800dbba:	468b      	mov	fp, r1
 800dbbc:	dc13      	bgt.n	800dbe6 <_strtod_l+0x3de>
 800dbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f43f ae5a 	beq.w	800d87a <_strtod_l+0x72>
 800dbc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc8:	dd78      	ble.n	800dcbc <_strtod_l+0x4b4>
 800dbca:	2b16      	cmp	r3, #22
 800dbcc:	dc5f      	bgt.n	800dc8e <_strtod_l+0x486>
 800dbce:	4972      	ldr	r1, [pc, #456]	@ (800dd98 <_strtod_l+0x590>)
 800dbd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbd8:	4652      	mov	r2, sl
 800dbda:	465b      	mov	r3, fp
 800dbdc:	f7f2 fd0c 	bl	80005f8 <__aeabi_dmul>
 800dbe0:	4682      	mov	sl, r0
 800dbe2:	468b      	mov	fp, r1
 800dbe4:	e649      	b.n	800d87a <_strtod_l+0x72>
 800dbe6:	4b6c      	ldr	r3, [pc, #432]	@ (800dd98 <_strtod_l+0x590>)
 800dbe8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dbf0:	f7f2 fd02 	bl	80005f8 <__aeabi_dmul>
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	468b      	mov	fp, r1
 800dbfa:	f7f2 fc83 	bl	8000504 <__aeabi_ui2d>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	460b      	mov	r3, r1
 800dc02:	4650      	mov	r0, sl
 800dc04:	4659      	mov	r1, fp
 800dc06:	f7f2 fb41 	bl	800028c <__adddf3>
 800dc0a:	2d0f      	cmp	r5, #15
 800dc0c:	4682      	mov	sl, r0
 800dc0e:	468b      	mov	fp, r1
 800dc10:	ddd5      	ble.n	800dbbe <_strtod_l+0x3b6>
 800dc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc14:	1b2c      	subs	r4, r5, r4
 800dc16:	441c      	add	r4, r3
 800dc18:	2c00      	cmp	r4, #0
 800dc1a:	f340 8093 	ble.w	800dd44 <_strtod_l+0x53c>
 800dc1e:	f014 030f 	ands.w	r3, r4, #15
 800dc22:	d00a      	beq.n	800dc3a <_strtod_l+0x432>
 800dc24:	495c      	ldr	r1, [pc, #368]	@ (800dd98 <_strtod_l+0x590>)
 800dc26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc2a:	4652      	mov	r2, sl
 800dc2c:	465b      	mov	r3, fp
 800dc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc32:	f7f2 fce1 	bl	80005f8 <__aeabi_dmul>
 800dc36:	4682      	mov	sl, r0
 800dc38:	468b      	mov	fp, r1
 800dc3a:	f034 040f 	bics.w	r4, r4, #15
 800dc3e:	d073      	beq.n	800dd28 <_strtod_l+0x520>
 800dc40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dc44:	dd49      	ble.n	800dcda <_strtod_l+0x4d2>
 800dc46:	2400      	movs	r4, #0
 800dc48:	46a0      	mov	r8, r4
 800dc4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dc4c:	46a1      	mov	r9, r4
 800dc4e:	9a05      	ldr	r2, [sp, #20]
 800dc50:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800dda0 <_strtod_l+0x598>
 800dc54:	2322      	movs	r3, #34	@ 0x22
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	f04f 0a00 	mov.w	sl, #0
 800dc5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f43f ae0b 	beq.w	800d87a <_strtod_l+0x72>
 800dc64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc66:	9805      	ldr	r0, [sp, #20]
 800dc68:	f7ff f946 	bl	800cef8 <_Bfree>
 800dc6c:	9805      	ldr	r0, [sp, #20]
 800dc6e:	4649      	mov	r1, r9
 800dc70:	f7ff f942 	bl	800cef8 <_Bfree>
 800dc74:	9805      	ldr	r0, [sp, #20]
 800dc76:	4641      	mov	r1, r8
 800dc78:	f7ff f93e 	bl	800cef8 <_Bfree>
 800dc7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc7e:	9805      	ldr	r0, [sp, #20]
 800dc80:	f7ff f93a 	bl	800cef8 <_Bfree>
 800dc84:	9805      	ldr	r0, [sp, #20]
 800dc86:	4621      	mov	r1, r4
 800dc88:	f7ff f936 	bl	800cef8 <_Bfree>
 800dc8c:	e5f5      	b.n	800d87a <_strtod_l+0x72>
 800dc8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dc94:	4293      	cmp	r3, r2
 800dc96:	dbbc      	blt.n	800dc12 <_strtod_l+0x40a>
 800dc98:	4c3f      	ldr	r4, [pc, #252]	@ (800dd98 <_strtod_l+0x590>)
 800dc9a:	f1c5 050f 	rsb	r5, r5, #15
 800dc9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dca2:	4652      	mov	r2, sl
 800dca4:	465b      	mov	r3, fp
 800dca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcaa:	f7f2 fca5 	bl	80005f8 <__aeabi_dmul>
 800dcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcb0:	1b5d      	subs	r5, r3, r5
 800dcb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dcb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dcba:	e78f      	b.n	800dbdc <_strtod_l+0x3d4>
 800dcbc:	3316      	adds	r3, #22
 800dcbe:	dba8      	blt.n	800dc12 <_strtod_l+0x40a>
 800dcc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcc2:	eba3 0808 	sub.w	r8, r3, r8
 800dcc6:	4b34      	ldr	r3, [pc, #208]	@ (800dd98 <_strtod_l+0x590>)
 800dcc8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dccc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dcd0:	4650      	mov	r0, sl
 800dcd2:	4659      	mov	r1, fp
 800dcd4:	f7f2 fdba 	bl	800084c <__aeabi_ddiv>
 800dcd8:	e782      	b.n	800dbe0 <_strtod_l+0x3d8>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	4f2f      	ldr	r7, [pc, #188]	@ (800dd9c <_strtod_l+0x594>)
 800dcde:	1124      	asrs	r4, r4, #4
 800dce0:	4650      	mov	r0, sl
 800dce2:	4659      	mov	r1, fp
 800dce4:	461e      	mov	r6, r3
 800dce6:	2c01      	cmp	r4, #1
 800dce8:	dc21      	bgt.n	800dd2e <_strtod_l+0x526>
 800dcea:	b10b      	cbz	r3, 800dcf0 <_strtod_l+0x4e8>
 800dcec:	4682      	mov	sl, r0
 800dcee:	468b      	mov	fp, r1
 800dcf0:	492a      	ldr	r1, [pc, #168]	@ (800dd9c <_strtod_l+0x594>)
 800dcf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dcf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dcfa:	4652      	mov	r2, sl
 800dcfc:	465b      	mov	r3, fp
 800dcfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd02:	f7f2 fc79 	bl	80005f8 <__aeabi_dmul>
 800dd06:	4b26      	ldr	r3, [pc, #152]	@ (800dda0 <_strtod_l+0x598>)
 800dd08:	460a      	mov	r2, r1
 800dd0a:	400b      	ands	r3, r1
 800dd0c:	4925      	ldr	r1, [pc, #148]	@ (800dda4 <_strtod_l+0x59c>)
 800dd0e:	428b      	cmp	r3, r1
 800dd10:	4682      	mov	sl, r0
 800dd12:	d898      	bhi.n	800dc46 <_strtod_l+0x43e>
 800dd14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dd18:	428b      	cmp	r3, r1
 800dd1a:	bf86      	itte	hi
 800dd1c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800dda8 <_strtod_l+0x5a0>
 800dd20:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dd28:	2300      	movs	r3, #0
 800dd2a:	9308      	str	r3, [sp, #32]
 800dd2c:	e076      	b.n	800de1c <_strtod_l+0x614>
 800dd2e:	07e2      	lsls	r2, r4, #31
 800dd30:	d504      	bpl.n	800dd3c <_strtod_l+0x534>
 800dd32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd36:	f7f2 fc5f 	bl	80005f8 <__aeabi_dmul>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	3601      	adds	r6, #1
 800dd3e:	1064      	asrs	r4, r4, #1
 800dd40:	3708      	adds	r7, #8
 800dd42:	e7d0      	b.n	800dce6 <_strtod_l+0x4de>
 800dd44:	d0f0      	beq.n	800dd28 <_strtod_l+0x520>
 800dd46:	4264      	negs	r4, r4
 800dd48:	f014 020f 	ands.w	r2, r4, #15
 800dd4c:	d00a      	beq.n	800dd64 <_strtod_l+0x55c>
 800dd4e:	4b12      	ldr	r3, [pc, #72]	@ (800dd98 <_strtod_l+0x590>)
 800dd50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd54:	4650      	mov	r0, sl
 800dd56:	4659      	mov	r1, fp
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f7f2 fd76 	bl	800084c <__aeabi_ddiv>
 800dd60:	4682      	mov	sl, r0
 800dd62:	468b      	mov	fp, r1
 800dd64:	1124      	asrs	r4, r4, #4
 800dd66:	d0df      	beq.n	800dd28 <_strtod_l+0x520>
 800dd68:	2c1f      	cmp	r4, #31
 800dd6a:	dd1f      	ble.n	800ddac <_strtod_l+0x5a4>
 800dd6c:	2400      	movs	r4, #0
 800dd6e:	46a0      	mov	r8, r4
 800dd70:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dd72:	46a1      	mov	r9, r4
 800dd74:	9a05      	ldr	r2, [sp, #20]
 800dd76:	2322      	movs	r3, #34	@ 0x22
 800dd78:	f04f 0a00 	mov.w	sl, #0
 800dd7c:	f04f 0b00 	mov.w	fp, #0
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	e76b      	b.n	800dc5c <_strtod_l+0x454>
 800dd84:	0800f9a8 	.word	0x0800f9a8
 800dd88:	0800fc58 	.word	0x0800fc58
 800dd8c:	0800f9a0 	.word	0x0800f9a0
 800dd90:	0800fa13 	.word	0x0800fa13
 800dd94:	0800fa0f 	.word	0x0800fa0f
 800dd98:	0800fb90 	.word	0x0800fb90
 800dd9c:	0800fb68 	.word	0x0800fb68
 800dda0:	7ff00000 	.word	0x7ff00000
 800dda4:	7ca00000 	.word	0x7ca00000
 800dda8:	7fefffff 	.word	0x7fefffff
 800ddac:	f014 0310 	ands.w	r3, r4, #16
 800ddb0:	bf18      	it	ne
 800ddb2:	236a      	movne	r3, #106	@ 0x6a
 800ddb4:	4ea9      	ldr	r6, [pc, #676]	@ (800e05c <_strtod_l+0x854>)
 800ddb6:	9308      	str	r3, [sp, #32]
 800ddb8:	4650      	mov	r0, sl
 800ddba:	4659      	mov	r1, fp
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	07e7      	lsls	r7, r4, #31
 800ddc0:	d504      	bpl.n	800ddcc <_strtod_l+0x5c4>
 800ddc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddc6:	f7f2 fc17 	bl	80005f8 <__aeabi_dmul>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	1064      	asrs	r4, r4, #1
 800ddce:	f106 0608 	add.w	r6, r6, #8
 800ddd2:	d1f4      	bne.n	800ddbe <_strtod_l+0x5b6>
 800ddd4:	b10b      	cbz	r3, 800ddda <_strtod_l+0x5d2>
 800ddd6:	4682      	mov	sl, r0
 800ddd8:	468b      	mov	fp, r1
 800ddda:	9b08      	ldr	r3, [sp, #32]
 800dddc:	b1b3      	cbz	r3, 800de0c <_strtod_l+0x604>
 800ddde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dde2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	4659      	mov	r1, fp
 800ddea:	dd0f      	ble.n	800de0c <_strtod_l+0x604>
 800ddec:	2b1f      	cmp	r3, #31
 800ddee:	dd56      	ble.n	800de9e <_strtod_l+0x696>
 800ddf0:	2b34      	cmp	r3, #52	@ 0x34
 800ddf2:	bfde      	ittt	le
 800ddf4:	f04f 33ff 	movle.w	r3, #4294967295
 800ddf8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ddfc:	4093      	lslle	r3, r2
 800ddfe:	f04f 0a00 	mov.w	sl, #0
 800de02:	bfcc      	ite	gt
 800de04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de08:	ea03 0b01 	andle.w	fp, r3, r1
 800de0c:	2200      	movs	r2, #0
 800de0e:	2300      	movs	r3, #0
 800de10:	4650      	mov	r0, sl
 800de12:	4659      	mov	r1, fp
 800de14:	f7f2 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d1a7      	bne.n	800dd6c <_strtod_l+0x564>
 800de1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800de22:	9805      	ldr	r0, [sp, #20]
 800de24:	462b      	mov	r3, r5
 800de26:	464a      	mov	r2, r9
 800de28:	f7ff f8ce 	bl	800cfc8 <__s2b>
 800de2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800de2e:	2800      	cmp	r0, #0
 800de30:	f43f af09 	beq.w	800dc46 <_strtod_l+0x43e>
 800de34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de38:	2a00      	cmp	r2, #0
 800de3a:	eba3 0308 	sub.w	r3, r3, r8
 800de3e:	bfa8      	it	ge
 800de40:	2300      	movge	r3, #0
 800de42:	9312      	str	r3, [sp, #72]	@ 0x48
 800de44:	2400      	movs	r4, #0
 800de46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de4a:	9316      	str	r3, [sp, #88]	@ 0x58
 800de4c:	46a0      	mov	r8, r4
 800de4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de50:	9805      	ldr	r0, [sp, #20]
 800de52:	6859      	ldr	r1, [r3, #4]
 800de54:	f7ff f810 	bl	800ce78 <_Balloc>
 800de58:	4681      	mov	r9, r0
 800de5a:	2800      	cmp	r0, #0
 800de5c:	f43f aef7 	beq.w	800dc4e <_strtod_l+0x446>
 800de60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de62:	691a      	ldr	r2, [r3, #16]
 800de64:	3202      	adds	r2, #2
 800de66:	f103 010c 	add.w	r1, r3, #12
 800de6a:	0092      	lsls	r2, r2, #2
 800de6c:	300c      	adds	r0, #12
 800de6e:	f7fe f876 	bl	800bf5e <memcpy>
 800de72:	ec4b ab10 	vmov	d0, sl, fp
 800de76:	9805      	ldr	r0, [sp, #20]
 800de78:	aa1c      	add	r2, sp, #112	@ 0x70
 800de7a:	a91b      	add	r1, sp, #108	@ 0x6c
 800de7c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800de80:	f7ff fbd6 	bl	800d630 <__d2b>
 800de84:	901a      	str	r0, [sp, #104]	@ 0x68
 800de86:	2800      	cmp	r0, #0
 800de88:	f43f aee1 	beq.w	800dc4e <_strtod_l+0x446>
 800de8c:	9805      	ldr	r0, [sp, #20]
 800de8e:	2101      	movs	r1, #1
 800de90:	f7ff f930 	bl	800d0f4 <__i2b>
 800de94:	4680      	mov	r8, r0
 800de96:	b948      	cbnz	r0, 800deac <_strtod_l+0x6a4>
 800de98:	f04f 0800 	mov.w	r8, #0
 800de9c:	e6d7      	b.n	800dc4e <_strtod_l+0x446>
 800de9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dea2:	fa02 f303 	lsl.w	r3, r2, r3
 800dea6:	ea03 0a0a 	and.w	sl, r3, sl
 800deaa:	e7af      	b.n	800de0c <_strtod_l+0x604>
 800deac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800deae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	bfab      	itete	ge
 800deb4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800deb6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800deb8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800deba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800debc:	bfac      	ite	ge
 800debe:	18ef      	addge	r7, r5, r3
 800dec0:	1b5e      	sublt	r6, r3, r5
 800dec2:	9b08      	ldr	r3, [sp, #32]
 800dec4:	1aed      	subs	r5, r5, r3
 800dec6:	4415      	add	r5, r2
 800dec8:	4b65      	ldr	r3, [pc, #404]	@ (800e060 <_strtod_l+0x858>)
 800deca:	3d01      	subs	r5, #1
 800decc:	429d      	cmp	r5, r3
 800dece:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ded2:	da50      	bge.n	800df76 <_strtod_l+0x76e>
 800ded4:	1b5b      	subs	r3, r3, r5
 800ded6:	2b1f      	cmp	r3, #31
 800ded8:	eba2 0203 	sub.w	r2, r2, r3
 800dedc:	f04f 0101 	mov.w	r1, #1
 800dee0:	dc3d      	bgt.n	800df5e <_strtod_l+0x756>
 800dee2:	fa01 f303 	lsl.w	r3, r1, r3
 800dee6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dee8:	2300      	movs	r3, #0
 800deea:	9310      	str	r3, [sp, #64]	@ 0x40
 800deec:	18bd      	adds	r5, r7, r2
 800deee:	9b08      	ldr	r3, [sp, #32]
 800def0:	42af      	cmp	r7, r5
 800def2:	4416      	add	r6, r2
 800def4:	441e      	add	r6, r3
 800def6:	463b      	mov	r3, r7
 800def8:	bfa8      	it	ge
 800defa:	462b      	movge	r3, r5
 800defc:	42b3      	cmp	r3, r6
 800defe:	bfa8      	it	ge
 800df00:	4633      	movge	r3, r6
 800df02:	2b00      	cmp	r3, #0
 800df04:	bfc2      	ittt	gt
 800df06:	1aed      	subgt	r5, r5, r3
 800df08:	1af6      	subgt	r6, r6, r3
 800df0a:	1aff      	subgt	r7, r7, r3
 800df0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df0e:	2b00      	cmp	r3, #0
 800df10:	dd16      	ble.n	800df40 <_strtod_l+0x738>
 800df12:	4641      	mov	r1, r8
 800df14:	9805      	ldr	r0, [sp, #20]
 800df16:	461a      	mov	r2, r3
 800df18:	f7ff f9a4 	bl	800d264 <__pow5mult>
 800df1c:	4680      	mov	r8, r0
 800df1e:	2800      	cmp	r0, #0
 800df20:	d0ba      	beq.n	800de98 <_strtod_l+0x690>
 800df22:	4601      	mov	r1, r0
 800df24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800df26:	9805      	ldr	r0, [sp, #20]
 800df28:	f7ff f8fa 	bl	800d120 <__multiply>
 800df2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800df2e:	2800      	cmp	r0, #0
 800df30:	f43f ae8d 	beq.w	800dc4e <_strtod_l+0x446>
 800df34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df36:	9805      	ldr	r0, [sp, #20]
 800df38:	f7fe ffde 	bl	800cef8 <_Bfree>
 800df3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800df40:	2d00      	cmp	r5, #0
 800df42:	dc1d      	bgt.n	800df80 <_strtod_l+0x778>
 800df44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df46:	2b00      	cmp	r3, #0
 800df48:	dd23      	ble.n	800df92 <_strtod_l+0x78a>
 800df4a:	4649      	mov	r1, r9
 800df4c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df4e:	9805      	ldr	r0, [sp, #20]
 800df50:	f7ff f988 	bl	800d264 <__pow5mult>
 800df54:	4681      	mov	r9, r0
 800df56:	b9e0      	cbnz	r0, 800df92 <_strtod_l+0x78a>
 800df58:	f04f 0900 	mov.w	r9, #0
 800df5c:	e677      	b.n	800dc4e <_strtod_l+0x446>
 800df5e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800df62:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800df66:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800df6a:	35e2      	adds	r5, #226	@ 0xe2
 800df6c:	fa01 f305 	lsl.w	r3, r1, r5
 800df70:	9310      	str	r3, [sp, #64]	@ 0x40
 800df72:	9113      	str	r1, [sp, #76]	@ 0x4c
 800df74:	e7ba      	b.n	800deec <_strtod_l+0x6e4>
 800df76:	2300      	movs	r3, #0
 800df78:	9310      	str	r3, [sp, #64]	@ 0x40
 800df7a:	2301      	movs	r3, #1
 800df7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df7e:	e7b5      	b.n	800deec <_strtod_l+0x6e4>
 800df80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df82:	9805      	ldr	r0, [sp, #20]
 800df84:	462a      	mov	r2, r5
 800df86:	f7ff f9c7 	bl	800d318 <__lshift>
 800df8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d1d9      	bne.n	800df44 <_strtod_l+0x73c>
 800df90:	e65d      	b.n	800dc4e <_strtod_l+0x446>
 800df92:	2e00      	cmp	r6, #0
 800df94:	dd07      	ble.n	800dfa6 <_strtod_l+0x79e>
 800df96:	4649      	mov	r1, r9
 800df98:	9805      	ldr	r0, [sp, #20]
 800df9a:	4632      	mov	r2, r6
 800df9c:	f7ff f9bc 	bl	800d318 <__lshift>
 800dfa0:	4681      	mov	r9, r0
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d0d8      	beq.n	800df58 <_strtod_l+0x750>
 800dfa6:	2f00      	cmp	r7, #0
 800dfa8:	dd08      	ble.n	800dfbc <_strtod_l+0x7b4>
 800dfaa:	4641      	mov	r1, r8
 800dfac:	9805      	ldr	r0, [sp, #20]
 800dfae:	463a      	mov	r2, r7
 800dfb0:	f7ff f9b2 	bl	800d318 <__lshift>
 800dfb4:	4680      	mov	r8, r0
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	f43f ae49 	beq.w	800dc4e <_strtod_l+0x446>
 800dfbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfbe:	9805      	ldr	r0, [sp, #20]
 800dfc0:	464a      	mov	r2, r9
 800dfc2:	f7ff fa31 	bl	800d428 <__mdiff>
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	f43f ae40 	beq.w	800dc4e <_strtod_l+0x446>
 800dfce:	68c3      	ldr	r3, [r0, #12]
 800dfd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60c3      	str	r3, [r0, #12]
 800dfd6:	4641      	mov	r1, r8
 800dfd8:	f7ff fa0a 	bl	800d3f0 <__mcmp>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	da45      	bge.n	800e06c <_strtod_l+0x864>
 800dfe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfe2:	ea53 030a 	orrs.w	r3, r3, sl
 800dfe6:	d16b      	bne.n	800e0c0 <_strtod_l+0x8b8>
 800dfe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d167      	bne.n	800e0c0 <_strtod_l+0x8b8>
 800dff0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dff4:	0d1b      	lsrs	r3, r3, #20
 800dff6:	051b      	lsls	r3, r3, #20
 800dff8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dffc:	d960      	bls.n	800e0c0 <_strtod_l+0x8b8>
 800dffe:	6963      	ldr	r3, [r4, #20]
 800e000:	b913      	cbnz	r3, 800e008 <_strtod_l+0x800>
 800e002:	6923      	ldr	r3, [r4, #16]
 800e004:	2b01      	cmp	r3, #1
 800e006:	dd5b      	ble.n	800e0c0 <_strtod_l+0x8b8>
 800e008:	4621      	mov	r1, r4
 800e00a:	2201      	movs	r2, #1
 800e00c:	9805      	ldr	r0, [sp, #20]
 800e00e:	f7ff f983 	bl	800d318 <__lshift>
 800e012:	4641      	mov	r1, r8
 800e014:	4604      	mov	r4, r0
 800e016:	f7ff f9eb 	bl	800d3f0 <__mcmp>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	dd50      	ble.n	800e0c0 <_strtod_l+0x8b8>
 800e01e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e022:	9a08      	ldr	r2, [sp, #32]
 800e024:	0d1b      	lsrs	r3, r3, #20
 800e026:	051b      	lsls	r3, r3, #20
 800e028:	2a00      	cmp	r2, #0
 800e02a:	d06a      	beq.n	800e102 <_strtod_l+0x8fa>
 800e02c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e030:	d867      	bhi.n	800e102 <_strtod_l+0x8fa>
 800e032:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e036:	f67f ae9d 	bls.w	800dd74 <_strtod_l+0x56c>
 800e03a:	4b0a      	ldr	r3, [pc, #40]	@ (800e064 <_strtod_l+0x85c>)
 800e03c:	4650      	mov	r0, sl
 800e03e:	4659      	mov	r1, fp
 800e040:	2200      	movs	r2, #0
 800e042:	f7f2 fad9 	bl	80005f8 <__aeabi_dmul>
 800e046:	4b08      	ldr	r3, [pc, #32]	@ (800e068 <_strtod_l+0x860>)
 800e048:	400b      	ands	r3, r1
 800e04a:	4682      	mov	sl, r0
 800e04c:	468b      	mov	fp, r1
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f47f ae08 	bne.w	800dc64 <_strtod_l+0x45c>
 800e054:	9a05      	ldr	r2, [sp, #20]
 800e056:	2322      	movs	r3, #34	@ 0x22
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	e603      	b.n	800dc64 <_strtod_l+0x45c>
 800e05c:	0800fc80 	.word	0x0800fc80
 800e060:	fffffc02 	.word	0xfffffc02
 800e064:	39500000 	.word	0x39500000
 800e068:	7ff00000 	.word	0x7ff00000
 800e06c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e070:	d165      	bne.n	800e13e <_strtod_l+0x936>
 800e072:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e074:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e078:	b35a      	cbz	r2, 800e0d2 <_strtod_l+0x8ca>
 800e07a:	4a9f      	ldr	r2, [pc, #636]	@ (800e2f8 <_strtod_l+0xaf0>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d12b      	bne.n	800e0d8 <_strtod_l+0x8d0>
 800e080:	9b08      	ldr	r3, [sp, #32]
 800e082:	4651      	mov	r1, sl
 800e084:	b303      	cbz	r3, 800e0c8 <_strtod_l+0x8c0>
 800e086:	4b9d      	ldr	r3, [pc, #628]	@ (800e2fc <_strtod_l+0xaf4>)
 800e088:	465a      	mov	r2, fp
 800e08a:	4013      	ands	r3, r2
 800e08c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e090:	f04f 32ff 	mov.w	r2, #4294967295
 800e094:	d81b      	bhi.n	800e0ce <_strtod_l+0x8c6>
 800e096:	0d1b      	lsrs	r3, r3, #20
 800e098:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e09c:	fa02 f303 	lsl.w	r3, r2, r3
 800e0a0:	4299      	cmp	r1, r3
 800e0a2:	d119      	bne.n	800e0d8 <_strtod_l+0x8d0>
 800e0a4:	4b96      	ldr	r3, [pc, #600]	@ (800e300 <_strtod_l+0xaf8>)
 800e0a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d102      	bne.n	800e0b2 <_strtod_l+0x8aa>
 800e0ac:	3101      	adds	r1, #1
 800e0ae:	f43f adce 	beq.w	800dc4e <_strtod_l+0x446>
 800e0b2:	4b92      	ldr	r3, [pc, #584]	@ (800e2fc <_strtod_l+0xaf4>)
 800e0b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0b6:	401a      	ands	r2, r3
 800e0b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e0bc:	f04f 0a00 	mov.w	sl, #0
 800e0c0:	9b08      	ldr	r3, [sp, #32]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d1b9      	bne.n	800e03a <_strtod_l+0x832>
 800e0c6:	e5cd      	b.n	800dc64 <_strtod_l+0x45c>
 800e0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0cc:	e7e8      	b.n	800e0a0 <_strtod_l+0x898>
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	e7e6      	b.n	800e0a0 <_strtod_l+0x898>
 800e0d2:	ea53 030a 	orrs.w	r3, r3, sl
 800e0d6:	d0a2      	beq.n	800e01e <_strtod_l+0x816>
 800e0d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0da:	b1db      	cbz	r3, 800e114 <_strtod_l+0x90c>
 800e0dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0de:	4213      	tst	r3, r2
 800e0e0:	d0ee      	beq.n	800e0c0 <_strtod_l+0x8b8>
 800e0e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0e4:	9a08      	ldr	r2, [sp, #32]
 800e0e6:	4650      	mov	r0, sl
 800e0e8:	4659      	mov	r1, fp
 800e0ea:	b1bb      	cbz	r3, 800e11c <_strtod_l+0x914>
 800e0ec:	f7ff fb6e 	bl	800d7cc <sulp>
 800e0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0f4:	ec53 2b10 	vmov	r2, r3, d0
 800e0f8:	f7f2 f8c8 	bl	800028c <__adddf3>
 800e0fc:	4682      	mov	sl, r0
 800e0fe:	468b      	mov	fp, r1
 800e100:	e7de      	b.n	800e0c0 <_strtod_l+0x8b8>
 800e102:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e106:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e10a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e10e:	f04f 3aff 	mov.w	sl, #4294967295
 800e112:	e7d5      	b.n	800e0c0 <_strtod_l+0x8b8>
 800e114:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e116:	ea13 0f0a 	tst.w	r3, sl
 800e11a:	e7e1      	b.n	800e0e0 <_strtod_l+0x8d8>
 800e11c:	f7ff fb56 	bl	800d7cc <sulp>
 800e120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e124:	ec53 2b10 	vmov	r2, r3, d0
 800e128:	f7f2 f8ae 	bl	8000288 <__aeabi_dsub>
 800e12c:	2200      	movs	r2, #0
 800e12e:	2300      	movs	r3, #0
 800e130:	4682      	mov	sl, r0
 800e132:	468b      	mov	fp, r1
 800e134:	f7f2 fcc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d0c1      	beq.n	800e0c0 <_strtod_l+0x8b8>
 800e13c:	e61a      	b.n	800dd74 <_strtod_l+0x56c>
 800e13e:	4641      	mov	r1, r8
 800e140:	4620      	mov	r0, r4
 800e142:	f7ff facd 	bl	800d6e0 <__ratio>
 800e146:	ec57 6b10 	vmov	r6, r7, d0
 800e14a:	2200      	movs	r2, #0
 800e14c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e150:	4630      	mov	r0, r6
 800e152:	4639      	mov	r1, r7
 800e154:	f7f2 fccc 	bl	8000af0 <__aeabi_dcmple>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d06f      	beq.n	800e23c <_strtod_l+0xa34>
 800e15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d17a      	bne.n	800e258 <_strtod_l+0xa50>
 800e162:	f1ba 0f00 	cmp.w	sl, #0
 800e166:	d158      	bne.n	800e21a <_strtod_l+0xa12>
 800e168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e16a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d15a      	bne.n	800e228 <_strtod_l+0xa20>
 800e172:	4b64      	ldr	r3, [pc, #400]	@ (800e304 <_strtod_l+0xafc>)
 800e174:	2200      	movs	r2, #0
 800e176:	4630      	mov	r0, r6
 800e178:	4639      	mov	r1, r7
 800e17a:	f7f2 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d159      	bne.n	800e236 <_strtod_l+0xa2e>
 800e182:	4630      	mov	r0, r6
 800e184:	4639      	mov	r1, r7
 800e186:	4b60      	ldr	r3, [pc, #384]	@ (800e308 <_strtod_l+0xb00>)
 800e188:	2200      	movs	r2, #0
 800e18a:	f7f2 fa35 	bl	80005f8 <__aeabi_dmul>
 800e18e:	4606      	mov	r6, r0
 800e190:	460f      	mov	r7, r1
 800e192:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e196:	9606      	str	r6, [sp, #24]
 800e198:	9307      	str	r3, [sp, #28]
 800e19a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e19e:	4d57      	ldr	r5, [pc, #348]	@ (800e2fc <_strtod_l+0xaf4>)
 800e1a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e1a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1a6:	401d      	ands	r5, r3
 800e1a8:	4b58      	ldr	r3, [pc, #352]	@ (800e30c <_strtod_l+0xb04>)
 800e1aa:	429d      	cmp	r5, r3
 800e1ac:	f040 80b2 	bne.w	800e314 <_strtod_l+0xb0c>
 800e1b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e1b6:	ec4b ab10 	vmov	d0, sl, fp
 800e1ba:	f7ff f9c9 	bl	800d550 <__ulp>
 800e1be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1c2:	ec51 0b10 	vmov	r0, r1, d0
 800e1c6:	f7f2 fa17 	bl	80005f8 <__aeabi_dmul>
 800e1ca:	4652      	mov	r2, sl
 800e1cc:	465b      	mov	r3, fp
 800e1ce:	f7f2 f85d 	bl	800028c <__adddf3>
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4949      	ldr	r1, [pc, #292]	@ (800e2fc <_strtod_l+0xaf4>)
 800e1d6:	4a4e      	ldr	r2, [pc, #312]	@ (800e310 <_strtod_l+0xb08>)
 800e1d8:	4019      	ands	r1, r3
 800e1da:	4291      	cmp	r1, r2
 800e1dc:	4682      	mov	sl, r0
 800e1de:	d942      	bls.n	800e266 <_strtod_l+0xa5e>
 800e1e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1e2:	4b47      	ldr	r3, [pc, #284]	@ (800e300 <_strtod_l+0xaf8>)
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d103      	bne.n	800e1f0 <_strtod_l+0x9e8>
 800e1e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	f43f ad2f 	beq.w	800dc4e <_strtod_l+0x446>
 800e1f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e300 <_strtod_l+0xaf8>
 800e1f4:	f04f 3aff 	mov.w	sl, #4294967295
 800e1f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1fa:	9805      	ldr	r0, [sp, #20]
 800e1fc:	f7fe fe7c 	bl	800cef8 <_Bfree>
 800e200:	9805      	ldr	r0, [sp, #20]
 800e202:	4649      	mov	r1, r9
 800e204:	f7fe fe78 	bl	800cef8 <_Bfree>
 800e208:	9805      	ldr	r0, [sp, #20]
 800e20a:	4641      	mov	r1, r8
 800e20c:	f7fe fe74 	bl	800cef8 <_Bfree>
 800e210:	9805      	ldr	r0, [sp, #20]
 800e212:	4621      	mov	r1, r4
 800e214:	f7fe fe70 	bl	800cef8 <_Bfree>
 800e218:	e619      	b.n	800de4e <_strtod_l+0x646>
 800e21a:	f1ba 0f01 	cmp.w	sl, #1
 800e21e:	d103      	bne.n	800e228 <_strtod_l+0xa20>
 800e220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e222:	2b00      	cmp	r3, #0
 800e224:	f43f ada6 	beq.w	800dd74 <_strtod_l+0x56c>
 800e228:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e2d8 <_strtod_l+0xad0>
 800e22c:	4f35      	ldr	r7, [pc, #212]	@ (800e304 <_strtod_l+0xafc>)
 800e22e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e232:	2600      	movs	r6, #0
 800e234:	e7b1      	b.n	800e19a <_strtod_l+0x992>
 800e236:	4f34      	ldr	r7, [pc, #208]	@ (800e308 <_strtod_l+0xb00>)
 800e238:	2600      	movs	r6, #0
 800e23a:	e7aa      	b.n	800e192 <_strtod_l+0x98a>
 800e23c:	4b32      	ldr	r3, [pc, #200]	@ (800e308 <_strtod_l+0xb00>)
 800e23e:	4630      	mov	r0, r6
 800e240:	4639      	mov	r1, r7
 800e242:	2200      	movs	r2, #0
 800e244:	f7f2 f9d8 	bl	80005f8 <__aeabi_dmul>
 800e248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e24a:	4606      	mov	r6, r0
 800e24c:	460f      	mov	r7, r1
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d09f      	beq.n	800e192 <_strtod_l+0x98a>
 800e252:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e256:	e7a0      	b.n	800e19a <_strtod_l+0x992>
 800e258:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e2e0 <_strtod_l+0xad8>
 800e25c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e260:	ec57 6b17 	vmov	r6, r7, d7
 800e264:	e799      	b.n	800e19a <_strtod_l+0x992>
 800e266:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e26a:	9b08      	ldr	r3, [sp, #32]
 800e26c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e270:	2b00      	cmp	r3, #0
 800e272:	d1c1      	bne.n	800e1f8 <_strtod_l+0x9f0>
 800e274:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e278:	0d1b      	lsrs	r3, r3, #20
 800e27a:	051b      	lsls	r3, r3, #20
 800e27c:	429d      	cmp	r5, r3
 800e27e:	d1bb      	bne.n	800e1f8 <_strtod_l+0x9f0>
 800e280:	4630      	mov	r0, r6
 800e282:	4639      	mov	r1, r7
 800e284:	f7f2 fd18 	bl	8000cb8 <__aeabi_d2lz>
 800e288:	f7f2 f988 	bl	800059c <__aeabi_l2d>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	4630      	mov	r0, r6
 800e292:	4639      	mov	r1, r7
 800e294:	f7f1 fff8 	bl	8000288 <__aeabi_dsub>
 800e298:	460b      	mov	r3, r1
 800e29a:	4602      	mov	r2, r0
 800e29c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e2a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2a6:	ea46 060a 	orr.w	r6, r6, sl
 800e2aa:	431e      	orrs	r6, r3
 800e2ac:	d06f      	beq.n	800e38e <_strtod_l+0xb86>
 800e2ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800e2e8 <_strtod_l+0xae0>)
 800e2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b4:	f7f2 fc12 	bl	8000adc <__aeabi_dcmplt>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	f47f acd3 	bne.w	800dc64 <_strtod_l+0x45c>
 800e2be:	a30c      	add	r3, pc, #48	@ (adr r3, 800e2f0 <_strtod_l+0xae8>)
 800e2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2c8:	f7f2 fc26 	bl	8000b18 <__aeabi_dcmpgt>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d093      	beq.n	800e1f8 <_strtod_l+0x9f0>
 800e2d0:	e4c8      	b.n	800dc64 <_strtod_l+0x45c>
 800e2d2:	bf00      	nop
 800e2d4:	f3af 8000 	nop.w
 800e2d8:	00000000 	.word	0x00000000
 800e2dc:	bff00000 	.word	0xbff00000
 800e2e0:	00000000 	.word	0x00000000
 800e2e4:	3ff00000 	.word	0x3ff00000
 800e2e8:	94a03595 	.word	0x94a03595
 800e2ec:	3fdfffff 	.word	0x3fdfffff
 800e2f0:	35afe535 	.word	0x35afe535
 800e2f4:	3fe00000 	.word	0x3fe00000
 800e2f8:	000fffff 	.word	0x000fffff
 800e2fc:	7ff00000 	.word	0x7ff00000
 800e300:	7fefffff 	.word	0x7fefffff
 800e304:	3ff00000 	.word	0x3ff00000
 800e308:	3fe00000 	.word	0x3fe00000
 800e30c:	7fe00000 	.word	0x7fe00000
 800e310:	7c9fffff 	.word	0x7c9fffff
 800e314:	9b08      	ldr	r3, [sp, #32]
 800e316:	b323      	cbz	r3, 800e362 <_strtod_l+0xb5a>
 800e318:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e31c:	d821      	bhi.n	800e362 <_strtod_l+0xb5a>
 800e31e:	a328      	add	r3, pc, #160	@ (adr r3, 800e3c0 <_strtod_l+0xbb8>)
 800e320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e324:	4630      	mov	r0, r6
 800e326:	4639      	mov	r1, r7
 800e328:	f7f2 fbe2 	bl	8000af0 <__aeabi_dcmple>
 800e32c:	b1a0      	cbz	r0, 800e358 <_strtod_l+0xb50>
 800e32e:	4639      	mov	r1, r7
 800e330:	4630      	mov	r0, r6
 800e332:	f7f2 fc39 	bl	8000ba8 <__aeabi_d2uiz>
 800e336:	2801      	cmp	r0, #1
 800e338:	bf38      	it	cc
 800e33a:	2001      	movcc	r0, #1
 800e33c:	f7f2 f8e2 	bl	8000504 <__aeabi_ui2d>
 800e340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e342:	4606      	mov	r6, r0
 800e344:	460f      	mov	r7, r1
 800e346:	b9fb      	cbnz	r3, 800e388 <_strtod_l+0xb80>
 800e348:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e34c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e34e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e350:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e354:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e358:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e35a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e35e:	1b5b      	subs	r3, r3, r5
 800e360:	9311      	str	r3, [sp, #68]	@ 0x44
 800e362:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e366:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e36a:	f7ff f8f1 	bl	800d550 <__ulp>
 800e36e:	4650      	mov	r0, sl
 800e370:	ec53 2b10 	vmov	r2, r3, d0
 800e374:	4659      	mov	r1, fp
 800e376:	f7f2 f93f 	bl	80005f8 <__aeabi_dmul>
 800e37a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e37e:	f7f1 ff85 	bl	800028c <__adddf3>
 800e382:	4682      	mov	sl, r0
 800e384:	468b      	mov	fp, r1
 800e386:	e770      	b.n	800e26a <_strtod_l+0xa62>
 800e388:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e38c:	e7e0      	b.n	800e350 <_strtod_l+0xb48>
 800e38e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e3c8 <_strtod_l+0xbc0>)
 800e390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e394:	f7f2 fba2 	bl	8000adc <__aeabi_dcmplt>
 800e398:	e798      	b.n	800e2cc <_strtod_l+0xac4>
 800e39a:	2300      	movs	r3, #0
 800e39c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e39e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e3a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3a2:	6013      	str	r3, [r2, #0]
 800e3a4:	f7ff ba6d 	b.w	800d882 <_strtod_l+0x7a>
 800e3a8:	2a65      	cmp	r2, #101	@ 0x65
 800e3aa:	f43f ab68 	beq.w	800da7e <_strtod_l+0x276>
 800e3ae:	2a45      	cmp	r2, #69	@ 0x45
 800e3b0:	f43f ab65 	beq.w	800da7e <_strtod_l+0x276>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	f7ff bba0 	b.w	800dafa <_strtod_l+0x2f2>
 800e3ba:	bf00      	nop
 800e3bc:	f3af 8000 	nop.w
 800e3c0:	ffc00000 	.word	0xffc00000
 800e3c4:	41dfffff 	.word	0x41dfffff
 800e3c8:	94a03595 	.word	0x94a03595
 800e3cc:	3fcfffff 	.word	0x3fcfffff

0800e3d0 <_strtod_r>:
 800e3d0:	4b01      	ldr	r3, [pc, #4]	@ (800e3d8 <_strtod_r+0x8>)
 800e3d2:	f7ff ba19 	b.w	800d808 <_strtod_l>
 800e3d6:	bf00      	nop
 800e3d8:	200000b8 	.word	0x200000b8

0800e3dc <_strtol_l.isra.0>:
 800e3dc:	2b24      	cmp	r3, #36	@ 0x24
 800e3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e2:	4686      	mov	lr, r0
 800e3e4:	4690      	mov	r8, r2
 800e3e6:	d801      	bhi.n	800e3ec <_strtol_l.isra.0+0x10>
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d106      	bne.n	800e3fa <_strtol_l.isra.0+0x1e>
 800e3ec:	f7fd fd8a 	bl	800bf04 <__errno>
 800e3f0:	2316      	movs	r3, #22
 800e3f2:	6003      	str	r3, [r0, #0]
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3fa:	4834      	ldr	r0, [pc, #208]	@ (800e4cc <_strtol_l.isra.0+0xf0>)
 800e3fc:	460d      	mov	r5, r1
 800e3fe:	462a      	mov	r2, r5
 800e400:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e404:	5d06      	ldrb	r6, [r0, r4]
 800e406:	f016 0608 	ands.w	r6, r6, #8
 800e40a:	d1f8      	bne.n	800e3fe <_strtol_l.isra.0+0x22>
 800e40c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e40e:	d110      	bne.n	800e432 <_strtol_l.isra.0+0x56>
 800e410:	782c      	ldrb	r4, [r5, #0]
 800e412:	2601      	movs	r6, #1
 800e414:	1c95      	adds	r5, r2, #2
 800e416:	f033 0210 	bics.w	r2, r3, #16
 800e41a:	d115      	bne.n	800e448 <_strtol_l.isra.0+0x6c>
 800e41c:	2c30      	cmp	r4, #48	@ 0x30
 800e41e:	d10d      	bne.n	800e43c <_strtol_l.isra.0+0x60>
 800e420:	782a      	ldrb	r2, [r5, #0]
 800e422:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e426:	2a58      	cmp	r2, #88	@ 0x58
 800e428:	d108      	bne.n	800e43c <_strtol_l.isra.0+0x60>
 800e42a:	786c      	ldrb	r4, [r5, #1]
 800e42c:	3502      	adds	r5, #2
 800e42e:	2310      	movs	r3, #16
 800e430:	e00a      	b.n	800e448 <_strtol_l.isra.0+0x6c>
 800e432:	2c2b      	cmp	r4, #43	@ 0x2b
 800e434:	bf04      	itt	eq
 800e436:	782c      	ldrbeq	r4, [r5, #0]
 800e438:	1c95      	addeq	r5, r2, #2
 800e43a:	e7ec      	b.n	800e416 <_strtol_l.isra.0+0x3a>
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1f6      	bne.n	800e42e <_strtol_l.isra.0+0x52>
 800e440:	2c30      	cmp	r4, #48	@ 0x30
 800e442:	bf14      	ite	ne
 800e444:	230a      	movne	r3, #10
 800e446:	2308      	moveq	r3, #8
 800e448:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e44c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e450:	2200      	movs	r2, #0
 800e452:	fbbc f9f3 	udiv	r9, ip, r3
 800e456:	4610      	mov	r0, r2
 800e458:	fb03 ca19 	mls	sl, r3, r9, ip
 800e45c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e460:	2f09      	cmp	r7, #9
 800e462:	d80f      	bhi.n	800e484 <_strtol_l.isra.0+0xa8>
 800e464:	463c      	mov	r4, r7
 800e466:	42a3      	cmp	r3, r4
 800e468:	dd1b      	ble.n	800e4a2 <_strtol_l.isra.0+0xc6>
 800e46a:	1c57      	adds	r7, r2, #1
 800e46c:	d007      	beq.n	800e47e <_strtol_l.isra.0+0xa2>
 800e46e:	4581      	cmp	r9, r0
 800e470:	d314      	bcc.n	800e49c <_strtol_l.isra.0+0xc0>
 800e472:	d101      	bne.n	800e478 <_strtol_l.isra.0+0x9c>
 800e474:	45a2      	cmp	sl, r4
 800e476:	db11      	blt.n	800e49c <_strtol_l.isra.0+0xc0>
 800e478:	fb00 4003 	mla	r0, r0, r3, r4
 800e47c:	2201      	movs	r2, #1
 800e47e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e482:	e7eb      	b.n	800e45c <_strtol_l.isra.0+0x80>
 800e484:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e488:	2f19      	cmp	r7, #25
 800e48a:	d801      	bhi.n	800e490 <_strtol_l.isra.0+0xb4>
 800e48c:	3c37      	subs	r4, #55	@ 0x37
 800e48e:	e7ea      	b.n	800e466 <_strtol_l.isra.0+0x8a>
 800e490:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e494:	2f19      	cmp	r7, #25
 800e496:	d804      	bhi.n	800e4a2 <_strtol_l.isra.0+0xc6>
 800e498:	3c57      	subs	r4, #87	@ 0x57
 800e49a:	e7e4      	b.n	800e466 <_strtol_l.isra.0+0x8a>
 800e49c:	f04f 32ff 	mov.w	r2, #4294967295
 800e4a0:	e7ed      	b.n	800e47e <_strtol_l.isra.0+0xa2>
 800e4a2:	1c53      	adds	r3, r2, #1
 800e4a4:	d108      	bne.n	800e4b8 <_strtol_l.isra.0+0xdc>
 800e4a6:	2322      	movs	r3, #34	@ 0x22
 800e4a8:	f8ce 3000 	str.w	r3, [lr]
 800e4ac:	4660      	mov	r0, ip
 800e4ae:	f1b8 0f00 	cmp.w	r8, #0
 800e4b2:	d0a0      	beq.n	800e3f6 <_strtol_l.isra.0+0x1a>
 800e4b4:	1e69      	subs	r1, r5, #1
 800e4b6:	e006      	b.n	800e4c6 <_strtol_l.isra.0+0xea>
 800e4b8:	b106      	cbz	r6, 800e4bc <_strtol_l.isra.0+0xe0>
 800e4ba:	4240      	negs	r0, r0
 800e4bc:	f1b8 0f00 	cmp.w	r8, #0
 800e4c0:	d099      	beq.n	800e3f6 <_strtol_l.isra.0+0x1a>
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	d1f6      	bne.n	800e4b4 <_strtol_l.isra.0+0xd8>
 800e4c6:	f8c8 1000 	str.w	r1, [r8]
 800e4ca:	e794      	b.n	800e3f6 <_strtol_l.isra.0+0x1a>
 800e4cc:	0800fca9 	.word	0x0800fca9

0800e4d0 <_strtol_r>:
 800e4d0:	f7ff bf84 	b.w	800e3dc <_strtol_l.isra.0>

0800e4d4 <__ssputs_r>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	688e      	ldr	r6, [r1, #8]
 800e4da:	461f      	mov	r7, r3
 800e4dc:	42be      	cmp	r6, r7
 800e4de:	680b      	ldr	r3, [r1, #0]
 800e4e0:	4682      	mov	sl, r0
 800e4e2:	460c      	mov	r4, r1
 800e4e4:	4690      	mov	r8, r2
 800e4e6:	d82d      	bhi.n	800e544 <__ssputs_r+0x70>
 800e4e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e4f0:	d026      	beq.n	800e540 <__ssputs_r+0x6c>
 800e4f2:	6965      	ldr	r5, [r4, #20]
 800e4f4:	6909      	ldr	r1, [r1, #16]
 800e4f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e4fa:	eba3 0901 	sub.w	r9, r3, r1
 800e4fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e502:	1c7b      	adds	r3, r7, #1
 800e504:	444b      	add	r3, r9
 800e506:	106d      	asrs	r5, r5, #1
 800e508:	429d      	cmp	r5, r3
 800e50a:	bf38      	it	cc
 800e50c:	461d      	movcc	r5, r3
 800e50e:	0553      	lsls	r3, r2, #21
 800e510:	d527      	bpl.n	800e562 <__ssputs_r+0x8e>
 800e512:	4629      	mov	r1, r5
 800e514:	f7fe fc24 	bl	800cd60 <_malloc_r>
 800e518:	4606      	mov	r6, r0
 800e51a:	b360      	cbz	r0, 800e576 <__ssputs_r+0xa2>
 800e51c:	6921      	ldr	r1, [r4, #16]
 800e51e:	464a      	mov	r2, r9
 800e520:	f7fd fd1d 	bl	800bf5e <memcpy>
 800e524:	89a3      	ldrh	r3, [r4, #12]
 800e526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e52e:	81a3      	strh	r3, [r4, #12]
 800e530:	6126      	str	r6, [r4, #16]
 800e532:	6165      	str	r5, [r4, #20]
 800e534:	444e      	add	r6, r9
 800e536:	eba5 0509 	sub.w	r5, r5, r9
 800e53a:	6026      	str	r6, [r4, #0]
 800e53c:	60a5      	str	r5, [r4, #8]
 800e53e:	463e      	mov	r6, r7
 800e540:	42be      	cmp	r6, r7
 800e542:	d900      	bls.n	800e546 <__ssputs_r+0x72>
 800e544:	463e      	mov	r6, r7
 800e546:	6820      	ldr	r0, [r4, #0]
 800e548:	4632      	mov	r2, r6
 800e54a:	4641      	mov	r1, r8
 800e54c:	f000 fb7c 	bl	800ec48 <memmove>
 800e550:	68a3      	ldr	r3, [r4, #8]
 800e552:	1b9b      	subs	r3, r3, r6
 800e554:	60a3      	str	r3, [r4, #8]
 800e556:	6823      	ldr	r3, [r4, #0]
 800e558:	4433      	add	r3, r6
 800e55a:	6023      	str	r3, [r4, #0]
 800e55c:	2000      	movs	r0, #0
 800e55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e562:	462a      	mov	r2, r5
 800e564:	f000 ff3d 	bl	800f3e2 <_realloc_r>
 800e568:	4606      	mov	r6, r0
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d1e0      	bne.n	800e530 <__ssputs_r+0x5c>
 800e56e:	6921      	ldr	r1, [r4, #16]
 800e570:	4650      	mov	r0, sl
 800e572:	f7fe fb81 	bl	800cc78 <_free_r>
 800e576:	230c      	movs	r3, #12
 800e578:	f8ca 3000 	str.w	r3, [sl]
 800e57c:	89a3      	ldrh	r3, [r4, #12]
 800e57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e582:	81a3      	strh	r3, [r4, #12]
 800e584:	f04f 30ff 	mov.w	r0, #4294967295
 800e588:	e7e9      	b.n	800e55e <__ssputs_r+0x8a>
	...

0800e58c <_svfiprintf_r>:
 800e58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e590:	4698      	mov	r8, r3
 800e592:	898b      	ldrh	r3, [r1, #12]
 800e594:	061b      	lsls	r3, r3, #24
 800e596:	b09d      	sub	sp, #116	@ 0x74
 800e598:	4607      	mov	r7, r0
 800e59a:	460d      	mov	r5, r1
 800e59c:	4614      	mov	r4, r2
 800e59e:	d510      	bpl.n	800e5c2 <_svfiprintf_r+0x36>
 800e5a0:	690b      	ldr	r3, [r1, #16]
 800e5a2:	b973      	cbnz	r3, 800e5c2 <_svfiprintf_r+0x36>
 800e5a4:	2140      	movs	r1, #64	@ 0x40
 800e5a6:	f7fe fbdb 	bl	800cd60 <_malloc_r>
 800e5aa:	6028      	str	r0, [r5, #0]
 800e5ac:	6128      	str	r0, [r5, #16]
 800e5ae:	b930      	cbnz	r0, 800e5be <_svfiprintf_r+0x32>
 800e5b0:	230c      	movs	r3, #12
 800e5b2:	603b      	str	r3, [r7, #0]
 800e5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b8:	b01d      	add	sp, #116	@ 0x74
 800e5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5be:	2340      	movs	r3, #64	@ 0x40
 800e5c0:	616b      	str	r3, [r5, #20]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5c6:	2320      	movs	r3, #32
 800e5c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5d0:	2330      	movs	r3, #48	@ 0x30
 800e5d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e770 <_svfiprintf_r+0x1e4>
 800e5d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5da:	f04f 0901 	mov.w	r9, #1
 800e5de:	4623      	mov	r3, r4
 800e5e0:	469a      	mov	sl, r3
 800e5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5e6:	b10a      	cbz	r2, 800e5ec <_svfiprintf_r+0x60>
 800e5e8:	2a25      	cmp	r2, #37	@ 0x25
 800e5ea:	d1f9      	bne.n	800e5e0 <_svfiprintf_r+0x54>
 800e5ec:	ebba 0b04 	subs.w	fp, sl, r4
 800e5f0:	d00b      	beq.n	800e60a <_svfiprintf_r+0x7e>
 800e5f2:	465b      	mov	r3, fp
 800e5f4:	4622      	mov	r2, r4
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4638      	mov	r0, r7
 800e5fa:	f7ff ff6b 	bl	800e4d4 <__ssputs_r>
 800e5fe:	3001      	adds	r0, #1
 800e600:	f000 80a7 	beq.w	800e752 <_svfiprintf_r+0x1c6>
 800e604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e606:	445a      	add	r2, fp
 800e608:	9209      	str	r2, [sp, #36]	@ 0x24
 800e60a:	f89a 3000 	ldrb.w	r3, [sl]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 809f 	beq.w	800e752 <_svfiprintf_r+0x1c6>
 800e614:	2300      	movs	r3, #0
 800e616:	f04f 32ff 	mov.w	r2, #4294967295
 800e61a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e61e:	f10a 0a01 	add.w	sl, sl, #1
 800e622:	9304      	str	r3, [sp, #16]
 800e624:	9307      	str	r3, [sp, #28]
 800e626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e62a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e62c:	4654      	mov	r4, sl
 800e62e:	2205      	movs	r2, #5
 800e630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e634:	484e      	ldr	r0, [pc, #312]	@ (800e770 <_svfiprintf_r+0x1e4>)
 800e636:	f7f1 fdcb 	bl	80001d0 <memchr>
 800e63a:	9a04      	ldr	r2, [sp, #16]
 800e63c:	b9d8      	cbnz	r0, 800e676 <_svfiprintf_r+0xea>
 800e63e:	06d0      	lsls	r0, r2, #27
 800e640:	bf44      	itt	mi
 800e642:	2320      	movmi	r3, #32
 800e644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e648:	0711      	lsls	r1, r2, #28
 800e64a:	bf44      	itt	mi
 800e64c:	232b      	movmi	r3, #43	@ 0x2b
 800e64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e652:	f89a 3000 	ldrb.w	r3, [sl]
 800e656:	2b2a      	cmp	r3, #42	@ 0x2a
 800e658:	d015      	beq.n	800e686 <_svfiprintf_r+0xfa>
 800e65a:	9a07      	ldr	r2, [sp, #28]
 800e65c:	4654      	mov	r4, sl
 800e65e:	2000      	movs	r0, #0
 800e660:	f04f 0c0a 	mov.w	ip, #10
 800e664:	4621      	mov	r1, r4
 800e666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e66a:	3b30      	subs	r3, #48	@ 0x30
 800e66c:	2b09      	cmp	r3, #9
 800e66e:	d94b      	bls.n	800e708 <_svfiprintf_r+0x17c>
 800e670:	b1b0      	cbz	r0, 800e6a0 <_svfiprintf_r+0x114>
 800e672:	9207      	str	r2, [sp, #28]
 800e674:	e014      	b.n	800e6a0 <_svfiprintf_r+0x114>
 800e676:	eba0 0308 	sub.w	r3, r0, r8
 800e67a:	fa09 f303 	lsl.w	r3, r9, r3
 800e67e:	4313      	orrs	r3, r2
 800e680:	9304      	str	r3, [sp, #16]
 800e682:	46a2      	mov	sl, r4
 800e684:	e7d2      	b.n	800e62c <_svfiprintf_r+0xa0>
 800e686:	9b03      	ldr	r3, [sp, #12]
 800e688:	1d19      	adds	r1, r3, #4
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	9103      	str	r1, [sp, #12]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	bfbb      	ittet	lt
 800e692:	425b      	neglt	r3, r3
 800e694:	f042 0202 	orrlt.w	r2, r2, #2
 800e698:	9307      	strge	r3, [sp, #28]
 800e69a:	9307      	strlt	r3, [sp, #28]
 800e69c:	bfb8      	it	lt
 800e69e:	9204      	strlt	r2, [sp, #16]
 800e6a0:	7823      	ldrb	r3, [r4, #0]
 800e6a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6a4:	d10a      	bne.n	800e6bc <_svfiprintf_r+0x130>
 800e6a6:	7863      	ldrb	r3, [r4, #1]
 800e6a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6aa:	d132      	bne.n	800e712 <_svfiprintf_r+0x186>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	1d1a      	adds	r2, r3, #4
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	9203      	str	r2, [sp, #12]
 800e6b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6b8:	3402      	adds	r4, #2
 800e6ba:	9305      	str	r3, [sp, #20]
 800e6bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e780 <_svfiprintf_r+0x1f4>
 800e6c0:	7821      	ldrb	r1, [r4, #0]
 800e6c2:	2203      	movs	r2, #3
 800e6c4:	4650      	mov	r0, sl
 800e6c6:	f7f1 fd83 	bl	80001d0 <memchr>
 800e6ca:	b138      	cbz	r0, 800e6dc <_svfiprintf_r+0x150>
 800e6cc:	9b04      	ldr	r3, [sp, #16]
 800e6ce:	eba0 000a 	sub.w	r0, r0, sl
 800e6d2:	2240      	movs	r2, #64	@ 0x40
 800e6d4:	4082      	lsls	r2, r0
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	3401      	adds	r4, #1
 800e6da:	9304      	str	r3, [sp, #16]
 800e6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6e0:	4824      	ldr	r0, [pc, #144]	@ (800e774 <_svfiprintf_r+0x1e8>)
 800e6e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6e6:	2206      	movs	r2, #6
 800e6e8:	f7f1 fd72 	bl	80001d0 <memchr>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d036      	beq.n	800e75e <_svfiprintf_r+0x1d2>
 800e6f0:	4b21      	ldr	r3, [pc, #132]	@ (800e778 <_svfiprintf_r+0x1ec>)
 800e6f2:	bb1b      	cbnz	r3, 800e73c <_svfiprintf_r+0x1b0>
 800e6f4:	9b03      	ldr	r3, [sp, #12]
 800e6f6:	3307      	adds	r3, #7
 800e6f8:	f023 0307 	bic.w	r3, r3, #7
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	9303      	str	r3, [sp, #12]
 800e700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e702:	4433      	add	r3, r6
 800e704:	9309      	str	r3, [sp, #36]	@ 0x24
 800e706:	e76a      	b.n	800e5de <_svfiprintf_r+0x52>
 800e708:	fb0c 3202 	mla	r2, ip, r2, r3
 800e70c:	460c      	mov	r4, r1
 800e70e:	2001      	movs	r0, #1
 800e710:	e7a8      	b.n	800e664 <_svfiprintf_r+0xd8>
 800e712:	2300      	movs	r3, #0
 800e714:	3401      	adds	r4, #1
 800e716:	9305      	str	r3, [sp, #20]
 800e718:	4619      	mov	r1, r3
 800e71a:	f04f 0c0a 	mov.w	ip, #10
 800e71e:	4620      	mov	r0, r4
 800e720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e724:	3a30      	subs	r2, #48	@ 0x30
 800e726:	2a09      	cmp	r2, #9
 800e728:	d903      	bls.n	800e732 <_svfiprintf_r+0x1a6>
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d0c6      	beq.n	800e6bc <_svfiprintf_r+0x130>
 800e72e:	9105      	str	r1, [sp, #20]
 800e730:	e7c4      	b.n	800e6bc <_svfiprintf_r+0x130>
 800e732:	fb0c 2101 	mla	r1, ip, r1, r2
 800e736:	4604      	mov	r4, r0
 800e738:	2301      	movs	r3, #1
 800e73a:	e7f0      	b.n	800e71e <_svfiprintf_r+0x192>
 800e73c:	ab03      	add	r3, sp, #12
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	462a      	mov	r2, r5
 800e742:	4b0e      	ldr	r3, [pc, #56]	@ (800e77c <_svfiprintf_r+0x1f0>)
 800e744:	a904      	add	r1, sp, #16
 800e746:	4638      	mov	r0, r7
 800e748:	f7fc fb9a 	bl	800ae80 <_printf_float>
 800e74c:	1c42      	adds	r2, r0, #1
 800e74e:	4606      	mov	r6, r0
 800e750:	d1d6      	bne.n	800e700 <_svfiprintf_r+0x174>
 800e752:	89ab      	ldrh	r3, [r5, #12]
 800e754:	065b      	lsls	r3, r3, #25
 800e756:	f53f af2d 	bmi.w	800e5b4 <_svfiprintf_r+0x28>
 800e75a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e75c:	e72c      	b.n	800e5b8 <_svfiprintf_r+0x2c>
 800e75e:	ab03      	add	r3, sp, #12
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	462a      	mov	r2, r5
 800e764:	4b05      	ldr	r3, [pc, #20]	@ (800e77c <_svfiprintf_r+0x1f0>)
 800e766:	a904      	add	r1, sp, #16
 800e768:	4638      	mov	r0, r7
 800e76a:	f7fc fe21 	bl	800b3b0 <_printf_i>
 800e76e:	e7ed      	b.n	800e74c <_svfiprintf_r+0x1c0>
 800e770:	0800fae1 	.word	0x0800fae1
 800e774:	0800faeb 	.word	0x0800faeb
 800e778:	0800ae81 	.word	0x0800ae81
 800e77c:	0800e4d5 	.word	0x0800e4d5
 800e780:	0800fae7 	.word	0x0800fae7

0800e784 <__sfputc_r>:
 800e784:	6893      	ldr	r3, [r2, #8]
 800e786:	3b01      	subs	r3, #1
 800e788:	2b00      	cmp	r3, #0
 800e78a:	b410      	push	{r4}
 800e78c:	6093      	str	r3, [r2, #8]
 800e78e:	da08      	bge.n	800e7a2 <__sfputc_r+0x1e>
 800e790:	6994      	ldr	r4, [r2, #24]
 800e792:	42a3      	cmp	r3, r4
 800e794:	db01      	blt.n	800e79a <__sfputc_r+0x16>
 800e796:	290a      	cmp	r1, #10
 800e798:	d103      	bne.n	800e7a2 <__sfputc_r+0x1e>
 800e79a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e79e:	f7fd baca 	b.w	800bd36 <__swbuf_r>
 800e7a2:	6813      	ldr	r3, [r2, #0]
 800e7a4:	1c58      	adds	r0, r3, #1
 800e7a6:	6010      	str	r0, [r2, #0]
 800e7a8:	7019      	strb	r1, [r3, #0]
 800e7aa:	4608      	mov	r0, r1
 800e7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <__sfputs_r>:
 800e7b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	460f      	mov	r7, r1
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	18d5      	adds	r5, r2, r3
 800e7bc:	42ac      	cmp	r4, r5
 800e7be:	d101      	bne.n	800e7c4 <__sfputs_r+0x12>
 800e7c0:	2000      	movs	r0, #0
 800e7c2:	e007      	b.n	800e7d4 <__sfputs_r+0x22>
 800e7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7c8:	463a      	mov	r2, r7
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	f7ff ffda 	bl	800e784 <__sfputc_r>
 800e7d0:	1c43      	adds	r3, r0, #1
 800e7d2:	d1f3      	bne.n	800e7bc <__sfputs_r+0xa>
 800e7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e7d8 <_vfiprintf_r>:
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	460d      	mov	r5, r1
 800e7de:	b09d      	sub	sp, #116	@ 0x74
 800e7e0:	4614      	mov	r4, r2
 800e7e2:	4698      	mov	r8, r3
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	b118      	cbz	r0, 800e7f0 <_vfiprintf_r+0x18>
 800e7e8:	6a03      	ldr	r3, [r0, #32]
 800e7ea:	b90b      	cbnz	r3, 800e7f0 <_vfiprintf_r+0x18>
 800e7ec:	f7fd f998 	bl	800bb20 <__sinit>
 800e7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7f2:	07d9      	lsls	r1, r3, #31
 800e7f4:	d405      	bmi.n	800e802 <_vfiprintf_r+0x2a>
 800e7f6:	89ab      	ldrh	r3, [r5, #12]
 800e7f8:	059a      	lsls	r2, r3, #22
 800e7fa:	d402      	bmi.n	800e802 <_vfiprintf_r+0x2a>
 800e7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7fe:	f7fd fbac 	bl	800bf5a <__retarget_lock_acquire_recursive>
 800e802:	89ab      	ldrh	r3, [r5, #12]
 800e804:	071b      	lsls	r3, r3, #28
 800e806:	d501      	bpl.n	800e80c <_vfiprintf_r+0x34>
 800e808:	692b      	ldr	r3, [r5, #16]
 800e80a:	b99b      	cbnz	r3, 800e834 <_vfiprintf_r+0x5c>
 800e80c:	4629      	mov	r1, r5
 800e80e:	4630      	mov	r0, r6
 800e810:	f7fd fad0 	bl	800bdb4 <__swsetup_r>
 800e814:	b170      	cbz	r0, 800e834 <_vfiprintf_r+0x5c>
 800e816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e818:	07dc      	lsls	r4, r3, #31
 800e81a:	d504      	bpl.n	800e826 <_vfiprintf_r+0x4e>
 800e81c:	f04f 30ff 	mov.w	r0, #4294967295
 800e820:	b01d      	add	sp, #116	@ 0x74
 800e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e826:	89ab      	ldrh	r3, [r5, #12]
 800e828:	0598      	lsls	r0, r3, #22
 800e82a:	d4f7      	bmi.n	800e81c <_vfiprintf_r+0x44>
 800e82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e82e:	f7fd fb95 	bl	800bf5c <__retarget_lock_release_recursive>
 800e832:	e7f3      	b.n	800e81c <_vfiprintf_r+0x44>
 800e834:	2300      	movs	r3, #0
 800e836:	9309      	str	r3, [sp, #36]	@ 0x24
 800e838:	2320      	movs	r3, #32
 800e83a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e842:	2330      	movs	r3, #48	@ 0x30
 800e844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e9f4 <_vfiprintf_r+0x21c>
 800e848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e84c:	f04f 0901 	mov.w	r9, #1
 800e850:	4623      	mov	r3, r4
 800e852:	469a      	mov	sl, r3
 800e854:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e858:	b10a      	cbz	r2, 800e85e <_vfiprintf_r+0x86>
 800e85a:	2a25      	cmp	r2, #37	@ 0x25
 800e85c:	d1f9      	bne.n	800e852 <_vfiprintf_r+0x7a>
 800e85e:	ebba 0b04 	subs.w	fp, sl, r4
 800e862:	d00b      	beq.n	800e87c <_vfiprintf_r+0xa4>
 800e864:	465b      	mov	r3, fp
 800e866:	4622      	mov	r2, r4
 800e868:	4629      	mov	r1, r5
 800e86a:	4630      	mov	r0, r6
 800e86c:	f7ff ffa1 	bl	800e7b2 <__sfputs_r>
 800e870:	3001      	adds	r0, #1
 800e872:	f000 80a7 	beq.w	800e9c4 <_vfiprintf_r+0x1ec>
 800e876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e878:	445a      	add	r2, fp
 800e87a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e87c:	f89a 3000 	ldrb.w	r3, [sl]
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 809f 	beq.w	800e9c4 <_vfiprintf_r+0x1ec>
 800e886:	2300      	movs	r3, #0
 800e888:	f04f 32ff 	mov.w	r2, #4294967295
 800e88c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e890:	f10a 0a01 	add.w	sl, sl, #1
 800e894:	9304      	str	r3, [sp, #16]
 800e896:	9307      	str	r3, [sp, #28]
 800e898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e89c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e89e:	4654      	mov	r4, sl
 800e8a0:	2205      	movs	r2, #5
 800e8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a6:	4853      	ldr	r0, [pc, #332]	@ (800e9f4 <_vfiprintf_r+0x21c>)
 800e8a8:	f7f1 fc92 	bl	80001d0 <memchr>
 800e8ac:	9a04      	ldr	r2, [sp, #16]
 800e8ae:	b9d8      	cbnz	r0, 800e8e8 <_vfiprintf_r+0x110>
 800e8b0:	06d1      	lsls	r1, r2, #27
 800e8b2:	bf44      	itt	mi
 800e8b4:	2320      	movmi	r3, #32
 800e8b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8ba:	0713      	lsls	r3, r2, #28
 800e8bc:	bf44      	itt	mi
 800e8be:	232b      	movmi	r3, #43	@ 0x2b
 800e8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8ca:	d015      	beq.n	800e8f8 <_vfiprintf_r+0x120>
 800e8cc:	9a07      	ldr	r2, [sp, #28]
 800e8ce:	4654      	mov	r4, sl
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	f04f 0c0a 	mov.w	ip, #10
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8dc:	3b30      	subs	r3, #48	@ 0x30
 800e8de:	2b09      	cmp	r3, #9
 800e8e0:	d94b      	bls.n	800e97a <_vfiprintf_r+0x1a2>
 800e8e2:	b1b0      	cbz	r0, 800e912 <_vfiprintf_r+0x13a>
 800e8e4:	9207      	str	r2, [sp, #28]
 800e8e6:	e014      	b.n	800e912 <_vfiprintf_r+0x13a>
 800e8e8:	eba0 0308 	sub.w	r3, r0, r8
 800e8ec:	fa09 f303 	lsl.w	r3, r9, r3
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	9304      	str	r3, [sp, #16]
 800e8f4:	46a2      	mov	sl, r4
 800e8f6:	e7d2      	b.n	800e89e <_vfiprintf_r+0xc6>
 800e8f8:	9b03      	ldr	r3, [sp, #12]
 800e8fa:	1d19      	adds	r1, r3, #4
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	9103      	str	r1, [sp, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	bfbb      	ittet	lt
 800e904:	425b      	neglt	r3, r3
 800e906:	f042 0202 	orrlt.w	r2, r2, #2
 800e90a:	9307      	strge	r3, [sp, #28]
 800e90c:	9307      	strlt	r3, [sp, #28]
 800e90e:	bfb8      	it	lt
 800e910:	9204      	strlt	r2, [sp, #16]
 800e912:	7823      	ldrb	r3, [r4, #0]
 800e914:	2b2e      	cmp	r3, #46	@ 0x2e
 800e916:	d10a      	bne.n	800e92e <_vfiprintf_r+0x156>
 800e918:	7863      	ldrb	r3, [r4, #1]
 800e91a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e91c:	d132      	bne.n	800e984 <_vfiprintf_r+0x1ac>
 800e91e:	9b03      	ldr	r3, [sp, #12]
 800e920:	1d1a      	adds	r2, r3, #4
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	9203      	str	r2, [sp, #12]
 800e926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e92a:	3402      	adds	r4, #2
 800e92c:	9305      	str	r3, [sp, #20]
 800e92e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea04 <_vfiprintf_r+0x22c>
 800e932:	7821      	ldrb	r1, [r4, #0]
 800e934:	2203      	movs	r2, #3
 800e936:	4650      	mov	r0, sl
 800e938:	f7f1 fc4a 	bl	80001d0 <memchr>
 800e93c:	b138      	cbz	r0, 800e94e <_vfiprintf_r+0x176>
 800e93e:	9b04      	ldr	r3, [sp, #16]
 800e940:	eba0 000a 	sub.w	r0, r0, sl
 800e944:	2240      	movs	r2, #64	@ 0x40
 800e946:	4082      	lsls	r2, r0
 800e948:	4313      	orrs	r3, r2
 800e94a:	3401      	adds	r4, #1
 800e94c:	9304      	str	r3, [sp, #16]
 800e94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e952:	4829      	ldr	r0, [pc, #164]	@ (800e9f8 <_vfiprintf_r+0x220>)
 800e954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e958:	2206      	movs	r2, #6
 800e95a:	f7f1 fc39 	bl	80001d0 <memchr>
 800e95e:	2800      	cmp	r0, #0
 800e960:	d03f      	beq.n	800e9e2 <_vfiprintf_r+0x20a>
 800e962:	4b26      	ldr	r3, [pc, #152]	@ (800e9fc <_vfiprintf_r+0x224>)
 800e964:	bb1b      	cbnz	r3, 800e9ae <_vfiprintf_r+0x1d6>
 800e966:	9b03      	ldr	r3, [sp, #12]
 800e968:	3307      	adds	r3, #7
 800e96a:	f023 0307 	bic.w	r3, r3, #7
 800e96e:	3308      	adds	r3, #8
 800e970:	9303      	str	r3, [sp, #12]
 800e972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e974:	443b      	add	r3, r7
 800e976:	9309      	str	r3, [sp, #36]	@ 0x24
 800e978:	e76a      	b.n	800e850 <_vfiprintf_r+0x78>
 800e97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e97e:	460c      	mov	r4, r1
 800e980:	2001      	movs	r0, #1
 800e982:	e7a8      	b.n	800e8d6 <_vfiprintf_r+0xfe>
 800e984:	2300      	movs	r3, #0
 800e986:	3401      	adds	r4, #1
 800e988:	9305      	str	r3, [sp, #20]
 800e98a:	4619      	mov	r1, r3
 800e98c:	f04f 0c0a 	mov.w	ip, #10
 800e990:	4620      	mov	r0, r4
 800e992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e996:	3a30      	subs	r2, #48	@ 0x30
 800e998:	2a09      	cmp	r2, #9
 800e99a:	d903      	bls.n	800e9a4 <_vfiprintf_r+0x1cc>
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d0c6      	beq.n	800e92e <_vfiprintf_r+0x156>
 800e9a0:	9105      	str	r1, [sp, #20]
 800e9a2:	e7c4      	b.n	800e92e <_vfiprintf_r+0x156>
 800e9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e7f0      	b.n	800e990 <_vfiprintf_r+0x1b8>
 800e9ae:	ab03      	add	r3, sp, #12
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	462a      	mov	r2, r5
 800e9b4:	4b12      	ldr	r3, [pc, #72]	@ (800ea00 <_vfiprintf_r+0x228>)
 800e9b6:	a904      	add	r1, sp, #16
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	f7fc fa61 	bl	800ae80 <_printf_float>
 800e9be:	4607      	mov	r7, r0
 800e9c0:	1c78      	adds	r0, r7, #1
 800e9c2:	d1d6      	bne.n	800e972 <_vfiprintf_r+0x19a>
 800e9c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9c6:	07d9      	lsls	r1, r3, #31
 800e9c8:	d405      	bmi.n	800e9d6 <_vfiprintf_r+0x1fe>
 800e9ca:	89ab      	ldrh	r3, [r5, #12]
 800e9cc:	059a      	lsls	r2, r3, #22
 800e9ce:	d402      	bmi.n	800e9d6 <_vfiprintf_r+0x1fe>
 800e9d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9d2:	f7fd fac3 	bl	800bf5c <__retarget_lock_release_recursive>
 800e9d6:	89ab      	ldrh	r3, [r5, #12]
 800e9d8:	065b      	lsls	r3, r3, #25
 800e9da:	f53f af1f 	bmi.w	800e81c <_vfiprintf_r+0x44>
 800e9de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9e0:	e71e      	b.n	800e820 <_vfiprintf_r+0x48>
 800e9e2:	ab03      	add	r3, sp, #12
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	462a      	mov	r2, r5
 800e9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ea00 <_vfiprintf_r+0x228>)
 800e9ea:	a904      	add	r1, sp, #16
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f7fc fcdf 	bl	800b3b0 <_printf_i>
 800e9f2:	e7e4      	b.n	800e9be <_vfiprintf_r+0x1e6>
 800e9f4:	0800fae1 	.word	0x0800fae1
 800e9f8:	0800faeb 	.word	0x0800faeb
 800e9fc:	0800ae81 	.word	0x0800ae81
 800ea00:	0800e7b3 	.word	0x0800e7b3
 800ea04:	0800fae7 	.word	0x0800fae7

0800ea08 <__sflush_r>:
 800ea08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea10:	0716      	lsls	r6, r2, #28
 800ea12:	4605      	mov	r5, r0
 800ea14:	460c      	mov	r4, r1
 800ea16:	d454      	bmi.n	800eac2 <__sflush_r+0xba>
 800ea18:	684b      	ldr	r3, [r1, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	dc02      	bgt.n	800ea24 <__sflush_r+0x1c>
 800ea1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	dd48      	ble.n	800eab6 <__sflush_r+0xae>
 800ea24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea26:	2e00      	cmp	r6, #0
 800ea28:	d045      	beq.n	800eab6 <__sflush_r+0xae>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea30:	682f      	ldr	r7, [r5, #0]
 800ea32:	6a21      	ldr	r1, [r4, #32]
 800ea34:	602b      	str	r3, [r5, #0]
 800ea36:	d030      	beq.n	800ea9a <__sflush_r+0x92>
 800ea38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea3a:	89a3      	ldrh	r3, [r4, #12]
 800ea3c:	0759      	lsls	r1, r3, #29
 800ea3e:	d505      	bpl.n	800ea4c <__sflush_r+0x44>
 800ea40:	6863      	ldr	r3, [r4, #4]
 800ea42:	1ad2      	subs	r2, r2, r3
 800ea44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea46:	b10b      	cbz	r3, 800ea4c <__sflush_r+0x44>
 800ea48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea4a:	1ad2      	subs	r2, r2, r3
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea50:	6a21      	ldr	r1, [r4, #32]
 800ea52:	4628      	mov	r0, r5
 800ea54:	47b0      	blx	r6
 800ea56:	1c43      	adds	r3, r0, #1
 800ea58:	89a3      	ldrh	r3, [r4, #12]
 800ea5a:	d106      	bne.n	800ea6a <__sflush_r+0x62>
 800ea5c:	6829      	ldr	r1, [r5, #0]
 800ea5e:	291d      	cmp	r1, #29
 800ea60:	d82b      	bhi.n	800eaba <__sflush_r+0xb2>
 800ea62:	4a2a      	ldr	r2, [pc, #168]	@ (800eb0c <__sflush_r+0x104>)
 800ea64:	40ca      	lsrs	r2, r1
 800ea66:	07d6      	lsls	r6, r2, #31
 800ea68:	d527      	bpl.n	800eaba <__sflush_r+0xb2>
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	6062      	str	r2, [r4, #4]
 800ea6e:	04d9      	lsls	r1, r3, #19
 800ea70:	6922      	ldr	r2, [r4, #16]
 800ea72:	6022      	str	r2, [r4, #0]
 800ea74:	d504      	bpl.n	800ea80 <__sflush_r+0x78>
 800ea76:	1c42      	adds	r2, r0, #1
 800ea78:	d101      	bne.n	800ea7e <__sflush_r+0x76>
 800ea7a:	682b      	ldr	r3, [r5, #0]
 800ea7c:	b903      	cbnz	r3, 800ea80 <__sflush_r+0x78>
 800ea7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea82:	602f      	str	r7, [r5, #0]
 800ea84:	b1b9      	cbz	r1, 800eab6 <__sflush_r+0xae>
 800ea86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea8a:	4299      	cmp	r1, r3
 800ea8c:	d002      	beq.n	800ea94 <__sflush_r+0x8c>
 800ea8e:	4628      	mov	r0, r5
 800ea90:	f7fe f8f2 	bl	800cc78 <_free_r>
 800ea94:	2300      	movs	r3, #0
 800ea96:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea98:	e00d      	b.n	800eab6 <__sflush_r+0xae>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	47b0      	blx	r6
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	1c50      	adds	r0, r2, #1
 800eaa4:	d1c9      	bne.n	800ea3a <__sflush_r+0x32>
 800eaa6:	682b      	ldr	r3, [r5, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d0c6      	beq.n	800ea3a <__sflush_r+0x32>
 800eaac:	2b1d      	cmp	r3, #29
 800eaae:	d001      	beq.n	800eab4 <__sflush_r+0xac>
 800eab0:	2b16      	cmp	r3, #22
 800eab2:	d11e      	bne.n	800eaf2 <__sflush_r+0xea>
 800eab4:	602f      	str	r7, [r5, #0]
 800eab6:	2000      	movs	r0, #0
 800eab8:	e022      	b.n	800eb00 <__sflush_r+0xf8>
 800eaba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eabe:	b21b      	sxth	r3, r3
 800eac0:	e01b      	b.n	800eafa <__sflush_r+0xf2>
 800eac2:	690f      	ldr	r7, [r1, #16]
 800eac4:	2f00      	cmp	r7, #0
 800eac6:	d0f6      	beq.n	800eab6 <__sflush_r+0xae>
 800eac8:	0793      	lsls	r3, r2, #30
 800eaca:	680e      	ldr	r6, [r1, #0]
 800eacc:	bf08      	it	eq
 800eace:	694b      	ldreq	r3, [r1, #20]
 800ead0:	600f      	str	r7, [r1, #0]
 800ead2:	bf18      	it	ne
 800ead4:	2300      	movne	r3, #0
 800ead6:	eba6 0807 	sub.w	r8, r6, r7
 800eada:	608b      	str	r3, [r1, #8]
 800eadc:	f1b8 0f00 	cmp.w	r8, #0
 800eae0:	dde9      	ble.n	800eab6 <__sflush_r+0xae>
 800eae2:	6a21      	ldr	r1, [r4, #32]
 800eae4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eae6:	4643      	mov	r3, r8
 800eae8:	463a      	mov	r2, r7
 800eaea:	4628      	mov	r0, r5
 800eaec:	47b0      	blx	r6
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	dc08      	bgt.n	800eb04 <__sflush_r+0xfc>
 800eaf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eafa:	81a3      	strh	r3, [r4, #12]
 800eafc:	f04f 30ff 	mov.w	r0, #4294967295
 800eb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb04:	4407      	add	r7, r0
 800eb06:	eba8 0800 	sub.w	r8, r8, r0
 800eb0a:	e7e7      	b.n	800eadc <__sflush_r+0xd4>
 800eb0c:	20400001 	.word	0x20400001

0800eb10 <_fflush_r>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	690b      	ldr	r3, [r1, #16]
 800eb14:	4605      	mov	r5, r0
 800eb16:	460c      	mov	r4, r1
 800eb18:	b913      	cbnz	r3, 800eb20 <_fflush_r+0x10>
 800eb1a:	2500      	movs	r5, #0
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	bd38      	pop	{r3, r4, r5, pc}
 800eb20:	b118      	cbz	r0, 800eb2a <_fflush_r+0x1a>
 800eb22:	6a03      	ldr	r3, [r0, #32]
 800eb24:	b90b      	cbnz	r3, 800eb2a <_fflush_r+0x1a>
 800eb26:	f7fc fffb 	bl	800bb20 <__sinit>
 800eb2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d0f3      	beq.n	800eb1a <_fflush_r+0xa>
 800eb32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb34:	07d0      	lsls	r0, r2, #31
 800eb36:	d404      	bmi.n	800eb42 <_fflush_r+0x32>
 800eb38:	0599      	lsls	r1, r3, #22
 800eb3a:	d402      	bmi.n	800eb42 <_fflush_r+0x32>
 800eb3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb3e:	f7fd fa0c 	bl	800bf5a <__retarget_lock_acquire_recursive>
 800eb42:	4628      	mov	r0, r5
 800eb44:	4621      	mov	r1, r4
 800eb46:	f7ff ff5f 	bl	800ea08 <__sflush_r>
 800eb4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb4c:	07da      	lsls	r2, r3, #31
 800eb4e:	4605      	mov	r5, r0
 800eb50:	d4e4      	bmi.n	800eb1c <_fflush_r+0xc>
 800eb52:	89a3      	ldrh	r3, [r4, #12]
 800eb54:	059b      	lsls	r3, r3, #22
 800eb56:	d4e1      	bmi.n	800eb1c <_fflush_r+0xc>
 800eb58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb5a:	f7fd f9ff 	bl	800bf5c <__retarget_lock_release_recursive>
 800eb5e:	e7dd      	b.n	800eb1c <_fflush_r+0xc>

0800eb60 <fiprintf>:
 800eb60:	b40e      	push	{r1, r2, r3}
 800eb62:	b503      	push	{r0, r1, lr}
 800eb64:	4601      	mov	r1, r0
 800eb66:	ab03      	add	r3, sp, #12
 800eb68:	4805      	ldr	r0, [pc, #20]	@ (800eb80 <fiprintf+0x20>)
 800eb6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb6e:	6800      	ldr	r0, [r0, #0]
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	f7ff fe31 	bl	800e7d8 <_vfiprintf_r>
 800eb76:	b002      	add	sp, #8
 800eb78:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb7c:	b003      	add	sp, #12
 800eb7e:	4770      	bx	lr
 800eb80:	20000068 	.word	0x20000068

0800eb84 <__swhatbuf_r>:
 800eb84:	b570      	push	{r4, r5, r6, lr}
 800eb86:	460c      	mov	r4, r1
 800eb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	b096      	sub	sp, #88	@ 0x58
 800eb90:	4615      	mov	r5, r2
 800eb92:	461e      	mov	r6, r3
 800eb94:	da0d      	bge.n	800ebb2 <__swhatbuf_r+0x2e>
 800eb96:	89a3      	ldrh	r3, [r4, #12]
 800eb98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb9c:	f04f 0100 	mov.w	r1, #0
 800eba0:	bf14      	ite	ne
 800eba2:	2340      	movne	r3, #64	@ 0x40
 800eba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eba8:	2000      	movs	r0, #0
 800ebaa:	6031      	str	r1, [r6, #0]
 800ebac:	602b      	str	r3, [r5, #0]
 800ebae:	b016      	add	sp, #88	@ 0x58
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	466a      	mov	r2, sp
 800ebb4:	f000 f874 	bl	800eca0 <_fstat_r>
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	dbec      	blt.n	800eb96 <__swhatbuf_r+0x12>
 800ebbc:	9901      	ldr	r1, [sp, #4]
 800ebbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ebc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ebc6:	4259      	negs	r1, r3
 800ebc8:	4159      	adcs	r1, r3
 800ebca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebce:	e7eb      	b.n	800eba8 <__swhatbuf_r+0x24>

0800ebd0 <__smakebuf_r>:
 800ebd0:	898b      	ldrh	r3, [r1, #12]
 800ebd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebd4:	079d      	lsls	r5, r3, #30
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	460c      	mov	r4, r1
 800ebda:	d507      	bpl.n	800ebec <__smakebuf_r+0x1c>
 800ebdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebe0:	6023      	str	r3, [r4, #0]
 800ebe2:	6123      	str	r3, [r4, #16]
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	6163      	str	r3, [r4, #20]
 800ebe8:	b003      	add	sp, #12
 800ebea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebec:	ab01      	add	r3, sp, #4
 800ebee:	466a      	mov	r2, sp
 800ebf0:	f7ff ffc8 	bl	800eb84 <__swhatbuf_r>
 800ebf4:	9f00      	ldr	r7, [sp, #0]
 800ebf6:	4605      	mov	r5, r0
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f7fe f8b0 	bl	800cd60 <_malloc_r>
 800ec00:	b948      	cbnz	r0, 800ec16 <__smakebuf_r+0x46>
 800ec02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec06:	059a      	lsls	r2, r3, #22
 800ec08:	d4ee      	bmi.n	800ebe8 <__smakebuf_r+0x18>
 800ec0a:	f023 0303 	bic.w	r3, r3, #3
 800ec0e:	f043 0302 	orr.w	r3, r3, #2
 800ec12:	81a3      	strh	r3, [r4, #12]
 800ec14:	e7e2      	b.n	800ebdc <__smakebuf_r+0xc>
 800ec16:	89a3      	ldrh	r3, [r4, #12]
 800ec18:	6020      	str	r0, [r4, #0]
 800ec1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec1e:	81a3      	strh	r3, [r4, #12]
 800ec20:	9b01      	ldr	r3, [sp, #4]
 800ec22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec26:	b15b      	cbz	r3, 800ec40 <__smakebuf_r+0x70>
 800ec28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f000 f849 	bl	800ecc4 <_isatty_r>
 800ec32:	b128      	cbz	r0, 800ec40 <__smakebuf_r+0x70>
 800ec34:	89a3      	ldrh	r3, [r4, #12]
 800ec36:	f023 0303 	bic.w	r3, r3, #3
 800ec3a:	f043 0301 	orr.w	r3, r3, #1
 800ec3e:	81a3      	strh	r3, [r4, #12]
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	431d      	orrs	r5, r3
 800ec44:	81a5      	strh	r5, [r4, #12]
 800ec46:	e7cf      	b.n	800ebe8 <__smakebuf_r+0x18>

0800ec48 <memmove>:
 800ec48:	4288      	cmp	r0, r1
 800ec4a:	b510      	push	{r4, lr}
 800ec4c:	eb01 0402 	add.w	r4, r1, r2
 800ec50:	d902      	bls.n	800ec58 <memmove+0x10>
 800ec52:	4284      	cmp	r4, r0
 800ec54:	4623      	mov	r3, r4
 800ec56:	d807      	bhi.n	800ec68 <memmove+0x20>
 800ec58:	1e43      	subs	r3, r0, #1
 800ec5a:	42a1      	cmp	r1, r4
 800ec5c:	d008      	beq.n	800ec70 <memmove+0x28>
 800ec5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec66:	e7f8      	b.n	800ec5a <memmove+0x12>
 800ec68:	4402      	add	r2, r0
 800ec6a:	4601      	mov	r1, r0
 800ec6c:	428a      	cmp	r2, r1
 800ec6e:	d100      	bne.n	800ec72 <memmove+0x2a>
 800ec70:	bd10      	pop	{r4, pc}
 800ec72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec7a:	e7f7      	b.n	800ec6c <memmove+0x24>

0800ec7c <strncmp>:
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	b16a      	cbz	r2, 800ec9c <strncmp+0x20>
 800ec80:	3901      	subs	r1, #1
 800ec82:	1884      	adds	r4, r0, r2
 800ec84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d103      	bne.n	800ec98 <strncmp+0x1c>
 800ec90:	42a0      	cmp	r0, r4
 800ec92:	d001      	beq.n	800ec98 <strncmp+0x1c>
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	d1f5      	bne.n	800ec84 <strncmp+0x8>
 800ec98:	1ad0      	subs	r0, r2, r3
 800ec9a:	bd10      	pop	{r4, pc}
 800ec9c:	4610      	mov	r0, r2
 800ec9e:	e7fc      	b.n	800ec9a <strncmp+0x1e>

0800eca0 <_fstat_r>:
 800eca0:	b538      	push	{r3, r4, r5, lr}
 800eca2:	4d07      	ldr	r5, [pc, #28]	@ (800ecc0 <_fstat_r+0x20>)
 800eca4:	2300      	movs	r3, #0
 800eca6:	4604      	mov	r4, r0
 800eca8:	4608      	mov	r0, r1
 800ecaa:	4611      	mov	r1, r2
 800ecac:	602b      	str	r3, [r5, #0]
 800ecae:	f7f3 ffa3 	bl	8002bf8 <_fstat>
 800ecb2:	1c43      	adds	r3, r0, #1
 800ecb4:	d102      	bne.n	800ecbc <_fstat_r+0x1c>
 800ecb6:	682b      	ldr	r3, [r5, #0]
 800ecb8:	b103      	cbz	r3, 800ecbc <_fstat_r+0x1c>
 800ecba:	6023      	str	r3, [r4, #0]
 800ecbc:	bd38      	pop	{r3, r4, r5, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20002fa8 	.word	0x20002fa8

0800ecc4 <_isatty_r>:
 800ecc4:	b538      	push	{r3, r4, r5, lr}
 800ecc6:	4d06      	ldr	r5, [pc, #24]	@ (800ece0 <_isatty_r+0x1c>)
 800ecc8:	2300      	movs	r3, #0
 800ecca:	4604      	mov	r4, r0
 800eccc:	4608      	mov	r0, r1
 800ecce:	602b      	str	r3, [r5, #0]
 800ecd0:	f7f3 ffa2 	bl	8002c18 <_isatty>
 800ecd4:	1c43      	adds	r3, r0, #1
 800ecd6:	d102      	bne.n	800ecde <_isatty_r+0x1a>
 800ecd8:	682b      	ldr	r3, [r5, #0]
 800ecda:	b103      	cbz	r3, 800ecde <_isatty_r+0x1a>
 800ecdc:	6023      	str	r3, [r4, #0]
 800ecde:	bd38      	pop	{r3, r4, r5, pc}
 800ece0:	20002fa8 	.word	0x20002fa8

0800ece4 <_sbrk_r>:
 800ece4:	b538      	push	{r3, r4, r5, lr}
 800ece6:	4d06      	ldr	r5, [pc, #24]	@ (800ed00 <_sbrk_r+0x1c>)
 800ece8:	2300      	movs	r3, #0
 800ecea:	4604      	mov	r4, r0
 800ecec:	4608      	mov	r0, r1
 800ecee:	602b      	str	r3, [r5, #0]
 800ecf0:	f7f3 ffaa 	bl	8002c48 <_sbrk>
 800ecf4:	1c43      	adds	r3, r0, #1
 800ecf6:	d102      	bne.n	800ecfe <_sbrk_r+0x1a>
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	b103      	cbz	r3, 800ecfe <_sbrk_r+0x1a>
 800ecfc:	6023      	str	r3, [r4, #0]
 800ecfe:	bd38      	pop	{r3, r4, r5, pc}
 800ed00:	20002fa8 	.word	0x20002fa8
 800ed04:	00000000 	.word	0x00000000

0800ed08 <nan>:
 800ed08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ed10 <nan+0x8>
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	00000000 	.word	0x00000000
 800ed14:	7ff80000 	.word	0x7ff80000

0800ed18 <abort>:
 800ed18:	b508      	push	{r3, lr}
 800ed1a:	2006      	movs	r0, #6
 800ed1c:	f000 fbc4 	bl	800f4a8 <raise>
 800ed20:	2001      	movs	r0, #1
 800ed22:	f7f3 ff19 	bl	8002b58 <_exit>

0800ed26 <_calloc_r>:
 800ed26:	b570      	push	{r4, r5, r6, lr}
 800ed28:	fba1 5402 	umull	r5, r4, r1, r2
 800ed2c:	b934      	cbnz	r4, 800ed3c <_calloc_r+0x16>
 800ed2e:	4629      	mov	r1, r5
 800ed30:	f7fe f816 	bl	800cd60 <_malloc_r>
 800ed34:	4606      	mov	r6, r0
 800ed36:	b928      	cbnz	r0, 800ed44 <_calloc_r+0x1e>
 800ed38:	4630      	mov	r0, r6
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	220c      	movs	r2, #12
 800ed3e:	6002      	str	r2, [r0, #0]
 800ed40:	2600      	movs	r6, #0
 800ed42:	e7f9      	b.n	800ed38 <_calloc_r+0x12>
 800ed44:	462a      	mov	r2, r5
 800ed46:	4621      	mov	r1, r4
 800ed48:	f7fd f88a 	bl	800be60 <memset>
 800ed4c:	e7f4      	b.n	800ed38 <_calloc_r+0x12>

0800ed4e <rshift>:
 800ed4e:	6903      	ldr	r3, [r0, #16]
 800ed50:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed58:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed5c:	f100 0414 	add.w	r4, r0, #20
 800ed60:	dd45      	ble.n	800edee <rshift+0xa0>
 800ed62:	f011 011f 	ands.w	r1, r1, #31
 800ed66:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed6a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed6e:	d10c      	bne.n	800ed8a <rshift+0x3c>
 800ed70:	f100 0710 	add.w	r7, r0, #16
 800ed74:	4629      	mov	r1, r5
 800ed76:	42b1      	cmp	r1, r6
 800ed78:	d334      	bcc.n	800ede4 <rshift+0x96>
 800ed7a:	1a9b      	subs	r3, r3, r2
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	1eea      	subs	r2, r5, #3
 800ed80:	4296      	cmp	r6, r2
 800ed82:	bf38      	it	cc
 800ed84:	2300      	movcc	r3, #0
 800ed86:	4423      	add	r3, r4
 800ed88:	e015      	b.n	800edb6 <rshift+0x68>
 800ed8a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed8e:	f1c1 0820 	rsb	r8, r1, #32
 800ed92:	40cf      	lsrs	r7, r1
 800ed94:	f105 0e04 	add.w	lr, r5, #4
 800ed98:	46a1      	mov	r9, r4
 800ed9a:	4576      	cmp	r6, lr
 800ed9c:	46f4      	mov	ip, lr
 800ed9e:	d815      	bhi.n	800edcc <rshift+0x7e>
 800eda0:	1a9a      	subs	r2, r3, r2
 800eda2:	0092      	lsls	r2, r2, #2
 800eda4:	3a04      	subs	r2, #4
 800eda6:	3501      	adds	r5, #1
 800eda8:	42ae      	cmp	r6, r5
 800edaa:	bf38      	it	cc
 800edac:	2200      	movcc	r2, #0
 800edae:	18a3      	adds	r3, r4, r2
 800edb0:	50a7      	str	r7, [r4, r2]
 800edb2:	b107      	cbz	r7, 800edb6 <rshift+0x68>
 800edb4:	3304      	adds	r3, #4
 800edb6:	1b1a      	subs	r2, r3, r4
 800edb8:	42a3      	cmp	r3, r4
 800edba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edbe:	bf08      	it	eq
 800edc0:	2300      	moveq	r3, #0
 800edc2:	6102      	str	r2, [r0, #16]
 800edc4:	bf08      	it	eq
 800edc6:	6143      	streq	r3, [r0, #20]
 800edc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edcc:	f8dc c000 	ldr.w	ip, [ip]
 800edd0:	fa0c fc08 	lsl.w	ip, ip, r8
 800edd4:	ea4c 0707 	orr.w	r7, ip, r7
 800edd8:	f849 7b04 	str.w	r7, [r9], #4
 800eddc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ede0:	40cf      	lsrs	r7, r1
 800ede2:	e7da      	b.n	800ed9a <rshift+0x4c>
 800ede4:	f851 cb04 	ldr.w	ip, [r1], #4
 800ede8:	f847 cf04 	str.w	ip, [r7, #4]!
 800edec:	e7c3      	b.n	800ed76 <rshift+0x28>
 800edee:	4623      	mov	r3, r4
 800edf0:	e7e1      	b.n	800edb6 <rshift+0x68>

0800edf2 <__hexdig_fun>:
 800edf2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800edf6:	2b09      	cmp	r3, #9
 800edf8:	d802      	bhi.n	800ee00 <__hexdig_fun+0xe>
 800edfa:	3820      	subs	r0, #32
 800edfc:	b2c0      	uxtb	r0, r0
 800edfe:	4770      	bx	lr
 800ee00:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ee04:	2b05      	cmp	r3, #5
 800ee06:	d801      	bhi.n	800ee0c <__hexdig_fun+0x1a>
 800ee08:	3847      	subs	r0, #71	@ 0x47
 800ee0a:	e7f7      	b.n	800edfc <__hexdig_fun+0xa>
 800ee0c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ee10:	2b05      	cmp	r3, #5
 800ee12:	d801      	bhi.n	800ee18 <__hexdig_fun+0x26>
 800ee14:	3827      	subs	r0, #39	@ 0x27
 800ee16:	e7f1      	b.n	800edfc <__hexdig_fun+0xa>
 800ee18:	2000      	movs	r0, #0
 800ee1a:	4770      	bx	lr

0800ee1c <__gethex>:
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	b085      	sub	sp, #20
 800ee22:	468a      	mov	sl, r1
 800ee24:	9302      	str	r3, [sp, #8]
 800ee26:	680b      	ldr	r3, [r1, #0]
 800ee28:	9001      	str	r0, [sp, #4]
 800ee2a:	4690      	mov	r8, r2
 800ee2c:	1c9c      	adds	r4, r3, #2
 800ee2e:	46a1      	mov	r9, r4
 800ee30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ee34:	2830      	cmp	r0, #48	@ 0x30
 800ee36:	d0fa      	beq.n	800ee2e <__gethex+0x12>
 800ee38:	eba9 0303 	sub.w	r3, r9, r3
 800ee3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ee40:	f7ff ffd7 	bl	800edf2 <__hexdig_fun>
 800ee44:	4605      	mov	r5, r0
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d168      	bne.n	800ef1c <__gethex+0x100>
 800ee4a:	49a0      	ldr	r1, [pc, #640]	@ (800f0cc <__gethex+0x2b0>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	4648      	mov	r0, r9
 800ee50:	f7ff ff14 	bl	800ec7c <strncmp>
 800ee54:	4607      	mov	r7, r0
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d167      	bne.n	800ef2a <__gethex+0x10e>
 800ee5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ee5e:	4626      	mov	r6, r4
 800ee60:	f7ff ffc7 	bl	800edf2 <__hexdig_fun>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d062      	beq.n	800ef2e <__gethex+0x112>
 800ee68:	4623      	mov	r3, r4
 800ee6a:	7818      	ldrb	r0, [r3, #0]
 800ee6c:	2830      	cmp	r0, #48	@ 0x30
 800ee6e:	4699      	mov	r9, r3
 800ee70:	f103 0301 	add.w	r3, r3, #1
 800ee74:	d0f9      	beq.n	800ee6a <__gethex+0x4e>
 800ee76:	f7ff ffbc 	bl	800edf2 <__hexdig_fun>
 800ee7a:	fab0 f580 	clz	r5, r0
 800ee7e:	096d      	lsrs	r5, r5, #5
 800ee80:	f04f 0b01 	mov.w	fp, #1
 800ee84:	464a      	mov	r2, r9
 800ee86:	4616      	mov	r6, r2
 800ee88:	3201      	adds	r2, #1
 800ee8a:	7830      	ldrb	r0, [r6, #0]
 800ee8c:	f7ff ffb1 	bl	800edf2 <__hexdig_fun>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d1f8      	bne.n	800ee86 <__gethex+0x6a>
 800ee94:	498d      	ldr	r1, [pc, #564]	@ (800f0cc <__gethex+0x2b0>)
 800ee96:	2201      	movs	r2, #1
 800ee98:	4630      	mov	r0, r6
 800ee9a:	f7ff feef 	bl	800ec7c <strncmp>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d13f      	bne.n	800ef22 <__gethex+0x106>
 800eea2:	b944      	cbnz	r4, 800eeb6 <__gethex+0x9a>
 800eea4:	1c74      	adds	r4, r6, #1
 800eea6:	4622      	mov	r2, r4
 800eea8:	4616      	mov	r6, r2
 800eeaa:	3201      	adds	r2, #1
 800eeac:	7830      	ldrb	r0, [r6, #0]
 800eeae:	f7ff ffa0 	bl	800edf2 <__hexdig_fun>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d1f8      	bne.n	800eea8 <__gethex+0x8c>
 800eeb6:	1ba4      	subs	r4, r4, r6
 800eeb8:	00a7      	lsls	r7, r4, #2
 800eeba:	7833      	ldrb	r3, [r6, #0]
 800eebc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eec0:	2b50      	cmp	r3, #80	@ 0x50
 800eec2:	d13e      	bne.n	800ef42 <__gethex+0x126>
 800eec4:	7873      	ldrb	r3, [r6, #1]
 800eec6:	2b2b      	cmp	r3, #43	@ 0x2b
 800eec8:	d033      	beq.n	800ef32 <__gethex+0x116>
 800eeca:	2b2d      	cmp	r3, #45	@ 0x2d
 800eecc:	d034      	beq.n	800ef38 <__gethex+0x11c>
 800eece:	1c71      	adds	r1, r6, #1
 800eed0:	2400      	movs	r4, #0
 800eed2:	7808      	ldrb	r0, [r1, #0]
 800eed4:	f7ff ff8d 	bl	800edf2 <__hexdig_fun>
 800eed8:	1e43      	subs	r3, r0, #1
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	2b18      	cmp	r3, #24
 800eede:	d830      	bhi.n	800ef42 <__gethex+0x126>
 800eee0:	f1a0 0210 	sub.w	r2, r0, #16
 800eee4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eee8:	f7ff ff83 	bl	800edf2 <__hexdig_fun>
 800eeec:	f100 3cff 	add.w	ip, r0, #4294967295
 800eef0:	fa5f fc8c 	uxtb.w	ip, ip
 800eef4:	f1bc 0f18 	cmp.w	ip, #24
 800eef8:	f04f 030a 	mov.w	r3, #10
 800eefc:	d91e      	bls.n	800ef3c <__gethex+0x120>
 800eefe:	b104      	cbz	r4, 800ef02 <__gethex+0xe6>
 800ef00:	4252      	negs	r2, r2
 800ef02:	4417      	add	r7, r2
 800ef04:	f8ca 1000 	str.w	r1, [sl]
 800ef08:	b1ed      	cbz	r5, 800ef46 <__gethex+0x12a>
 800ef0a:	f1bb 0f00 	cmp.w	fp, #0
 800ef0e:	bf0c      	ite	eq
 800ef10:	2506      	moveq	r5, #6
 800ef12:	2500      	movne	r5, #0
 800ef14:	4628      	mov	r0, r5
 800ef16:	b005      	add	sp, #20
 800ef18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1c:	2500      	movs	r5, #0
 800ef1e:	462c      	mov	r4, r5
 800ef20:	e7b0      	b.n	800ee84 <__gethex+0x68>
 800ef22:	2c00      	cmp	r4, #0
 800ef24:	d1c7      	bne.n	800eeb6 <__gethex+0x9a>
 800ef26:	4627      	mov	r7, r4
 800ef28:	e7c7      	b.n	800eeba <__gethex+0x9e>
 800ef2a:	464e      	mov	r6, r9
 800ef2c:	462f      	mov	r7, r5
 800ef2e:	2501      	movs	r5, #1
 800ef30:	e7c3      	b.n	800eeba <__gethex+0x9e>
 800ef32:	2400      	movs	r4, #0
 800ef34:	1cb1      	adds	r1, r6, #2
 800ef36:	e7cc      	b.n	800eed2 <__gethex+0xb6>
 800ef38:	2401      	movs	r4, #1
 800ef3a:	e7fb      	b.n	800ef34 <__gethex+0x118>
 800ef3c:	fb03 0002 	mla	r0, r3, r2, r0
 800ef40:	e7ce      	b.n	800eee0 <__gethex+0xc4>
 800ef42:	4631      	mov	r1, r6
 800ef44:	e7de      	b.n	800ef04 <__gethex+0xe8>
 800ef46:	eba6 0309 	sub.w	r3, r6, r9
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	4629      	mov	r1, r5
 800ef4e:	2b07      	cmp	r3, #7
 800ef50:	dc0a      	bgt.n	800ef68 <__gethex+0x14c>
 800ef52:	9801      	ldr	r0, [sp, #4]
 800ef54:	f7fd ff90 	bl	800ce78 <_Balloc>
 800ef58:	4604      	mov	r4, r0
 800ef5a:	b940      	cbnz	r0, 800ef6e <__gethex+0x152>
 800ef5c:	4b5c      	ldr	r3, [pc, #368]	@ (800f0d0 <__gethex+0x2b4>)
 800ef5e:	4602      	mov	r2, r0
 800ef60:	21e4      	movs	r1, #228	@ 0xe4
 800ef62:	485c      	ldr	r0, [pc, #368]	@ (800f0d4 <__gethex+0x2b8>)
 800ef64:	f7fd f810 	bl	800bf88 <__assert_func>
 800ef68:	3101      	adds	r1, #1
 800ef6a:	105b      	asrs	r3, r3, #1
 800ef6c:	e7ef      	b.n	800ef4e <__gethex+0x132>
 800ef6e:	f100 0a14 	add.w	sl, r0, #20
 800ef72:	2300      	movs	r3, #0
 800ef74:	4655      	mov	r5, sl
 800ef76:	469b      	mov	fp, r3
 800ef78:	45b1      	cmp	r9, r6
 800ef7a:	d337      	bcc.n	800efec <__gethex+0x1d0>
 800ef7c:	f845 bb04 	str.w	fp, [r5], #4
 800ef80:	eba5 050a 	sub.w	r5, r5, sl
 800ef84:	10ad      	asrs	r5, r5, #2
 800ef86:	6125      	str	r5, [r4, #16]
 800ef88:	4658      	mov	r0, fp
 800ef8a:	f7fe f867 	bl	800d05c <__hi0bits>
 800ef8e:	016d      	lsls	r5, r5, #5
 800ef90:	f8d8 6000 	ldr.w	r6, [r8]
 800ef94:	1a2d      	subs	r5, r5, r0
 800ef96:	42b5      	cmp	r5, r6
 800ef98:	dd54      	ble.n	800f044 <__gethex+0x228>
 800ef9a:	1bad      	subs	r5, r5, r6
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7fe fbf3 	bl	800d78a <__any_on>
 800efa4:	4681      	mov	r9, r0
 800efa6:	b178      	cbz	r0, 800efc8 <__gethex+0x1ac>
 800efa8:	1e6b      	subs	r3, r5, #1
 800efaa:	1159      	asrs	r1, r3, #5
 800efac:	f003 021f 	and.w	r2, r3, #31
 800efb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800efb4:	f04f 0901 	mov.w	r9, #1
 800efb8:	fa09 f202 	lsl.w	r2, r9, r2
 800efbc:	420a      	tst	r2, r1
 800efbe:	d003      	beq.n	800efc8 <__gethex+0x1ac>
 800efc0:	454b      	cmp	r3, r9
 800efc2:	dc36      	bgt.n	800f032 <__gethex+0x216>
 800efc4:	f04f 0902 	mov.w	r9, #2
 800efc8:	4629      	mov	r1, r5
 800efca:	4620      	mov	r0, r4
 800efcc:	f7ff febf 	bl	800ed4e <rshift>
 800efd0:	442f      	add	r7, r5
 800efd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efd6:	42bb      	cmp	r3, r7
 800efd8:	da42      	bge.n	800f060 <__gethex+0x244>
 800efda:	9801      	ldr	r0, [sp, #4]
 800efdc:	4621      	mov	r1, r4
 800efde:	f7fd ff8b 	bl	800cef8 <_Bfree>
 800efe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efe4:	2300      	movs	r3, #0
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	25a3      	movs	r5, #163	@ 0xa3
 800efea:	e793      	b.n	800ef14 <__gethex+0xf8>
 800efec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eff0:	2a2e      	cmp	r2, #46	@ 0x2e
 800eff2:	d012      	beq.n	800f01a <__gethex+0x1fe>
 800eff4:	2b20      	cmp	r3, #32
 800eff6:	d104      	bne.n	800f002 <__gethex+0x1e6>
 800eff8:	f845 bb04 	str.w	fp, [r5], #4
 800effc:	f04f 0b00 	mov.w	fp, #0
 800f000:	465b      	mov	r3, fp
 800f002:	7830      	ldrb	r0, [r6, #0]
 800f004:	9303      	str	r3, [sp, #12]
 800f006:	f7ff fef4 	bl	800edf2 <__hexdig_fun>
 800f00a:	9b03      	ldr	r3, [sp, #12]
 800f00c:	f000 000f 	and.w	r0, r0, #15
 800f010:	4098      	lsls	r0, r3
 800f012:	ea4b 0b00 	orr.w	fp, fp, r0
 800f016:	3304      	adds	r3, #4
 800f018:	e7ae      	b.n	800ef78 <__gethex+0x15c>
 800f01a:	45b1      	cmp	r9, r6
 800f01c:	d8ea      	bhi.n	800eff4 <__gethex+0x1d8>
 800f01e:	492b      	ldr	r1, [pc, #172]	@ (800f0cc <__gethex+0x2b0>)
 800f020:	9303      	str	r3, [sp, #12]
 800f022:	2201      	movs	r2, #1
 800f024:	4630      	mov	r0, r6
 800f026:	f7ff fe29 	bl	800ec7c <strncmp>
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d1e1      	bne.n	800eff4 <__gethex+0x1d8>
 800f030:	e7a2      	b.n	800ef78 <__gethex+0x15c>
 800f032:	1ea9      	subs	r1, r5, #2
 800f034:	4620      	mov	r0, r4
 800f036:	f7fe fba8 	bl	800d78a <__any_on>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	d0c2      	beq.n	800efc4 <__gethex+0x1a8>
 800f03e:	f04f 0903 	mov.w	r9, #3
 800f042:	e7c1      	b.n	800efc8 <__gethex+0x1ac>
 800f044:	da09      	bge.n	800f05a <__gethex+0x23e>
 800f046:	1b75      	subs	r5, r6, r5
 800f048:	4621      	mov	r1, r4
 800f04a:	9801      	ldr	r0, [sp, #4]
 800f04c:	462a      	mov	r2, r5
 800f04e:	f7fe f963 	bl	800d318 <__lshift>
 800f052:	1b7f      	subs	r7, r7, r5
 800f054:	4604      	mov	r4, r0
 800f056:	f100 0a14 	add.w	sl, r0, #20
 800f05a:	f04f 0900 	mov.w	r9, #0
 800f05e:	e7b8      	b.n	800efd2 <__gethex+0x1b6>
 800f060:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f064:	42bd      	cmp	r5, r7
 800f066:	dd6f      	ble.n	800f148 <__gethex+0x32c>
 800f068:	1bed      	subs	r5, r5, r7
 800f06a:	42ae      	cmp	r6, r5
 800f06c:	dc34      	bgt.n	800f0d8 <__gethex+0x2bc>
 800f06e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f072:	2b02      	cmp	r3, #2
 800f074:	d022      	beq.n	800f0bc <__gethex+0x2a0>
 800f076:	2b03      	cmp	r3, #3
 800f078:	d024      	beq.n	800f0c4 <__gethex+0x2a8>
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d115      	bne.n	800f0aa <__gethex+0x28e>
 800f07e:	42ae      	cmp	r6, r5
 800f080:	d113      	bne.n	800f0aa <__gethex+0x28e>
 800f082:	2e01      	cmp	r6, #1
 800f084:	d10b      	bne.n	800f09e <__gethex+0x282>
 800f086:	9a02      	ldr	r2, [sp, #8]
 800f088:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f08c:	6013      	str	r3, [r2, #0]
 800f08e:	2301      	movs	r3, #1
 800f090:	6123      	str	r3, [r4, #16]
 800f092:	f8ca 3000 	str.w	r3, [sl]
 800f096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f098:	2562      	movs	r5, #98	@ 0x62
 800f09a:	601c      	str	r4, [r3, #0]
 800f09c:	e73a      	b.n	800ef14 <__gethex+0xf8>
 800f09e:	1e71      	subs	r1, r6, #1
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f7fe fb72 	bl	800d78a <__any_on>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d1ed      	bne.n	800f086 <__gethex+0x26a>
 800f0aa:	9801      	ldr	r0, [sp, #4]
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	f7fd ff23 	bl	800cef8 <_Bfree>
 800f0b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	6013      	str	r3, [r2, #0]
 800f0b8:	2550      	movs	r5, #80	@ 0x50
 800f0ba:	e72b      	b.n	800ef14 <__gethex+0xf8>
 800f0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1f3      	bne.n	800f0aa <__gethex+0x28e>
 800f0c2:	e7e0      	b.n	800f086 <__gethex+0x26a>
 800f0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d1dd      	bne.n	800f086 <__gethex+0x26a>
 800f0ca:	e7ee      	b.n	800f0aa <__gethex+0x28e>
 800f0cc:	0800fadf 	.word	0x0800fadf
 800f0d0:	0800fa75 	.word	0x0800fa75
 800f0d4:	0800fafa 	.word	0x0800fafa
 800f0d8:	1e6f      	subs	r7, r5, #1
 800f0da:	f1b9 0f00 	cmp.w	r9, #0
 800f0de:	d130      	bne.n	800f142 <__gethex+0x326>
 800f0e0:	b127      	cbz	r7, 800f0ec <__gethex+0x2d0>
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f7fe fb50 	bl	800d78a <__any_on>
 800f0ea:	4681      	mov	r9, r0
 800f0ec:	117a      	asrs	r2, r7, #5
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f0f4:	f007 071f 	and.w	r7, r7, #31
 800f0f8:	40bb      	lsls	r3, r7
 800f0fa:	4213      	tst	r3, r2
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	4620      	mov	r0, r4
 800f100:	bf18      	it	ne
 800f102:	f049 0902 	orrne.w	r9, r9, #2
 800f106:	f7ff fe22 	bl	800ed4e <rshift>
 800f10a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f10e:	1b76      	subs	r6, r6, r5
 800f110:	2502      	movs	r5, #2
 800f112:	f1b9 0f00 	cmp.w	r9, #0
 800f116:	d047      	beq.n	800f1a8 <__gethex+0x38c>
 800f118:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d015      	beq.n	800f14c <__gethex+0x330>
 800f120:	2b03      	cmp	r3, #3
 800f122:	d017      	beq.n	800f154 <__gethex+0x338>
 800f124:	2b01      	cmp	r3, #1
 800f126:	d109      	bne.n	800f13c <__gethex+0x320>
 800f128:	f019 0f02 	tst.w	r9, #2
 800f12c:	d006      	beq.n	800f13c <__gethex+0x320>
 800f12e:	f8da 3000 	ldr.w	r3, [sl]
 800f132:	ea49 0903 	orr.w	r9, r9, r3
 800f136:	f019 0f01 	tst.w	r9, #1
 800f13a:	d10e      	bne.n	800f15a <__gethex+0x33e>
 800f13c:	f045 0510 	orr.w	r5, r5, #16
 800f140:	e032      	b.n	800f1a8 <__gethex+0x38c>
 800f142:	f04f 0901 	mov.w	r9, #1
 800f146:	e7d1      	b.n	800f0ec <__gethex+0x2d0>
 800f148:	2501      	movs	r5, #1
 800f14a:	e7e2      	b.n	800f112 <__gethex+0x2f6>
 800f14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f14e:	f1c3 0301 	rsb	r3, r3, #1
 800f152:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f156:	2b00      	cmp	r3, #0
 800f158:	d0f0      	beq.n	800f13c <__gethex+0x320>
 800f15a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f15e:	f104 0314 	add.w	r3, r4, #20
 800f162:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f166:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f16a:	f04f 0c00 	mov.w	ip, #0
 800f16e:	4618      	mov	r0, r3
 800f170:	f853 2b04 	ldr.w	r2, [r3], #4
 800f174:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f178:	d01b      	beq.n	800f1b2 <__gethex+0x396>
 800f17a:	3201      	adds	r2, #1
 800f17c:	6002      	str	r2, [r0, #0]
 800f17e:	2d02      	cmp	r5, #2
 800f180:	f104 0314 	add.w	r3, r4, #20
 800f184:	d13c      	bne.n	800f200 <__gethex+0x3e4>
 800f186:	f8d8 2000 	ldr.w	r2, [r8]
 800f18a:	3a01      	subs	r2, #1
 800f18c:	42b2      	cmp	r2, r6
 800f18e:	d109      	bne.n	800f1a4 <__gethex+0x388>
 800f190:	1171      	asrs	r1, r6, #5
 800f192:	2201      	movs	r2, #1
 800f194:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f198:	f006 061f 	and.w	r6, r6, #31
 800f19c:	fa02 f606 	lsl.w	r6, r2, r6
 800f1a0:	421e      	tst	r6, r3
 800f1a2:	d13a      	bne.n	800f21a <__gethex+0x3fe>
 800f1a4:	f045 0520 	orr.w	r5, r5, #32
 800f1a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1aa:	601c      	str	r4, [r3, #0]
 800f1ac:	9b02      	ldr	r3, [sp, #8]
 800f1ae:	601f      	str	r7, [r3, #0]
 800f1b0:	e6b0      	b.n	800ef14 <__gethex+0xf8>
 800f1b2:	4299      	cmp	r1, r3
 800f1b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1b8:	d8d9      	bhi.n	800f16e <__gethex+0x352>
 800f1ba:	68a3      	ldr	r3, [r4, #8]
 800f1bc:	459b      	cmp	fp, r3
 800f1be:	db17      	blt.n	800f1f0 <__gethex+0x3d4>
 800f1c0:	6861      	ldr	r1, [r4, #4]
 800f1c2:	9801      	ldr	r0, [sp, #4]
 800f1c4:	3101      	adds	r1, #1
 800f1c6:	f7fd fe57 	bl	800ce78 <_Balloc>
 800f1ca:	4681      	mov	r9, r0
 800f1cc:	b918      	cbnz	r0, 800f1d6 <__gethex+0x3ba>
 800f1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f238 <__gethex+0x41c>)
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	2184      	movs	r1, #132	@ 0x84
 800f1d4:	e6c5      	b.n	800ef62 <__gethex+0x146>
 800f1d6:	6922      	ldr	r2, [r4, #16]
 800f1d8:	3202      	adds	r2, #2
 800f1da:	f104 010c 	add.w	r1, r4, #12
 800f1de:	0092      	lsls	r2, r2, #2
 800f1e0:	300c      	adds	r0, #12
 800f1e2:	f7fc febc 	bl	800bf5e <memcpy>
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	9801      	ldr	r0, [sp, #4]
 800f1ea:	f7fd fe85 	bl	800cef8 <_Bfree>
 800f1ee:	464c      	mov	r4, r9
 800f1f0:	6923      	ldr	r3, [r4, #16]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1f8:	6122      	str	r2, [r4, #16]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	615a      	str	r2, [r3, #20]
 800f1fe:	e7be      	b.n	800f17e <__gethex+0x362>
 800f200:	6922      	ldr	r2, [r4, #16]
 800f202:	455a      	cmp	r2, fp
 800f204:	dd0b      	ble.n	800f21e <__gethex+0x402>
 800f206:	2101      	movs	r1, #1
 800f208:	4620      	mov	r0, r4
 800f20a:	f7ff fda0 	bl	800ed4e <rshift>
 800f20e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f212:	3701      	adds	r7, #1
 800f214:	42bb      	cmp	r3, r7
 800f216:	f6ff aee0 	blt.w	800efda <__gethex+0x1be>
 800f21a:	2501      	movs	r5, #1
 800f21c:	e7c2      	b.n	800f1a4 <__gethex+0x388>
 800f21e:	f016 061f 	ands.w	r6, r6, #31
 800f222:	d0fa      	beq.n	800f21a <__gethex+0x3fe>
 800f224:	4453      	add	r3, sl
 800f226:	f1c6 0620 	rsb	r6, r6, #32
 800f22a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f22e:	f7fd ff15 	bl	800d05c <__hi0bits>
 800f232:	42b0      	cmp	r0, r6
 800f234:	dbe7      	blt.n	800f206 <__gethex+0x3ea>
 800f236:	e7f0      	b.n	800f21a <__gethex+0x3fe>
 800f238:	0800fa75 	.word	0x0800fa75

0800f23c <L_shift>:
 800f23c:	f1c2 0208 	rsb	r2, r2, #8
 800f240:	0092      	lsls	r2, r2, #2
 800f242:	b570      	push	{r4, r5, r6, lr}
 800f244:	f1c2 0620 	rsb	r6, r2, #32
 800f248:	6843      	ldr	r3, [r0, #4]
 800f24a:	6804      	ldr	r4, [r0, #0]
 800f24c:	fa03 f506 	lsl.w	r5, r3, r6
 800f250:	432c      	orrs	r4, r5
 800f252:	40d3      	lsrs	r3, r2
 800f254:	6004      	str	r4, [r0, #0]
 800f256:	f840 3f04 	str.w	r3, [r0, #4]!
 800f25a:	4288      	cmp	r0, r1
 800f25c:	d3f4      	bcc.n	800f248 <L_shift+0xc>
 800f25e:	bd70      	pop	{r4, r5, r6, pc}

0800f260 <__match>:
 800f260:	b530      	push	{r4, r5, lr}
 800f262:	6803      	ldr	r3, [r0, #0]
 800f264:	3301      	adds	r3, #1
 800f266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f26a:	b914      	cbnz	r4, 800f272 <__match+0x12>
 800f26c:	6003      	str	r3, [r0, #0]
 800f26e:	2001      	movs	r0, #1
 800f270:	bd30      	pop	{r4, r5, pc}
 800f272:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f276:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f27a:	2d19      	cmp	r5, #25
 800f27c:	bf98      	it	ls
 800f27e:	3220      	addls	r2, #32
 800f280:	42a2      	cmp	r2, r4
 800f282:	d0f0      	beq.n	800f266 <__match+0x6>
 800f284:	2000      	movs	r0, #0
 800f286:	e7f3      	b.n	800f270 <__match+0x10>

0800f288 <__hexnan>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	680b      	ldr	r3, [r1, #0]
 800f28e:	6801      	ldr	r1, [r0, #0]
 800f290:	115e      	asrs	r6, r3, #5
 800f292:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f296:	f013 031f 	ands.w	r3, r3, #31
 800f29a:	b087      	sub	sp, #28
 800f29c:	bf18      	it	ne
 800f29e:	3604      	addne	r6, #4
 800f2a0:	2500      	movs	r5, #0
 800f2a2:	1f37      	subs	r7, r6, #4
 800f2a4:	4682      	mov	sl, r0
 800f2a6:	4690      	mov	r8, r2
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2ae:	46b9      	mov	r9, r7
 800f2b0:	463c      	mov	r4, r7
 800f2b2:	9502      	str	r5, [sp, #8]
 800f2b4:	46ab      	mov	fp, r5
 800f2b6:	784a      	ldrb	r2, [r1, #1]
 800f2b8:	1c4b      	adds	r3, r1, #1
 800f2ba:	9303      	str	r3, [sp, #12]
 800f2bc:	b342      	cbz	r2, 800f310 <__hexnan+0x88>
 800f2be:	4610      	mov	r0, r2
 800f2c0:	9105      	str	r1, [sp, #20]
 800f2c2:	9204      	str	r2, [sp, #16]
 800f2c4:	f7ff fd95 	bl	800edf2 <__hexdig_fun>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d151      	bne.n	800f370 <__hexnan+0xe8>
 800f2cc:	9a04      	ldr	r2, [sp, #16]
 800f2ce:	9905      	ldr	r1, [sp, #20]
 800f2d0:	2a20      	cmp	r2, #32
 800f2d2:	d818      	bhi.n	800f306 <__hexnan+0x7e>
 800f2d4:	9b02      	ldr	r3, [sp, #8]
 800f2d6:	459b      	cmp	fp, r3
 800f2d8:	dd13      	ble.n	800f302 <__hexnan+0x7a>
 800f2da:	454c      	cmp	r4, r9
 800f2dc:	d206      	bcs.n	800f2ec <__hexnan+0x64>
 800f2de:	2d07      	cmp	r5, #7
 800f2e0:	dc04      	bgt.n	800f2ec <__hexnan+0x64>
 800f2e2:	462a      	mov	r2, r5
 800f2e4:	4649      	mov	r1, r9
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f7ff ffa8 	bl	800f23c <L_shift>
 800f2ec:	4544      	cmp	r4, r8
 800f2ee:	d952      	bls.n	800f396 <__hexnan+0x10e>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	f1a4 0904 	sub.w	r9, r4, #4
 800f2f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2fa:	f8cd b008 	str.w	fp, [sp, #8]
 800f2fe:	464c      	mov	r4, r9
 800f300:	461d      	mov	r5, r3
 800f302:	9903      	ldr	r1, [sp, #12]
 800f304:	e7d7      	b.n	800f2b6 <__hexnan+0x2e>
 800f306:	2a29      	cmp	r2, #41	@ 0x29
 800f308:	d157      	bne.n	800f3ba <__hexnan+0x132>
 800f30a:	3102      	adds	r1, #2
 800f30c:	f8ca 1000 	str.w	r1, [sl]
 800f310:	f1bb 0f00 	cmp.w	fp, #0
 800f314:	d051      	beq.n	800f3ba <__hexnan+0x132>
 800f316:	454c      	cmp	r4, r9
 800f318:	d206      	bcs.n	800f328 <__hexnan+0xa0>
 800f31a:	2d07      	cmp	r5, #7
 800f31c:	dc04      	bgt.n	800f328 <__hexnan+0xa0>
 800f31e:	462a      	mov	r2, r5
 800f320:	4649      	mov	r1, r9
 800f322:	4620      	mov	r0, r4
 800f324:	f7ff ff8a 	bl	800f23c <L_shift>
 800f328:	4544      	cmp	r4, r8
 800f32a:	d936      	bls.n	800f39a <__hexnan+0x112>
 800f32c:	f1a8 0204 	sub.w	r2, r8, #4
 800f330:	4623      	mov	r3, r4
 800f332:	f853 1b04 	ldr.w	r1, [r3], #4
 800f336:	f842 1f04 	str.w	r1, [r2, #4]!
 800f33a:	429f      	cmp	r7, r3
 800f33c:	d2f9      	bcs.n	800f332 <__hexnan+0xaa>
 800f33e:	1b3b      	subs	r3, r7, r4
 800f340:	f023 0303 	bic.w	r3, r3, #3
 800f344:	3304      	adds	r3, #4
 800f346:	3401      	adds	r4, #1
 800f348:	3e03      	subs	r6, #3
 800f34a:	42b4      	cmp	r4, r6
 800f34c:	bf88      	it	hi
 800f34e:	2304      	movhi	r3, #4
 800f350:	4443      	add	r3, r8
 800f352:	2200      	movs	r2, #0
 800f354:	f843 2b04 	str.w	r2, [r3], #4
 800f358:	429f      	cmp	r7, r3
 800f35a:	d2fb      	bcs.n	800f354 <__hexnan+0xcc>
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	b91b      	cbnz	r3, 800f368 <__hexnan+0xe0>
 800f360:	4547      	cmp	r7, r8
 800f362:	d128      	bne.n	800f3b6 <__hexnan+0x12e>
 800f364:	2301      	movs	r3, #1
 800f366:	603b      	str	r3, [r7, #0]
 800f368:	2005      	movs	r0, #5
 800f36a:	b007      	add	sp, #28
 800f36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f370:	3501      	adds	r5, #1
 800f372:	2d08      	cmp	r5, #8
 800f374:	f10b 0b01 	add.w	fp, fp, #1
 800f378:	dd06      	ble.n	800f388 <__hexnan+0x100>
 800f37a:	4544      	cmp	r4, r8
 800f37c:	d9c1      	bls.n	800f302 <__hexnan+0x7a>
 800f37e:	2300      	movs	r3, #0
 800f380:	f844 3c04 	str.w	r3, [r4, #-4]
 800f384:	2501      	movs	r5, #1
 800f386:	3c04      	subs	r4, #4
 800f388:	6822      	ldr	r2, [r4, #0]
 800f38a:	f000 000f 	and.w	r0, r0, #15
 800f38e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f392:	6020      	str	r0, [r4, #0]
 800f394:	e7b5      	b.n	800f302 <__hexnan+0x7a>
 800f396:	2508      	movs	r5, #8
 800f398:	e7b3      	b.n	800f302 <__hexnan+0x7a>
 800f39a:	9b01      	ldr	r3, [sp, #4]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d0dd      	beq.n	800f35c <__hexnan+0xd4>
 800f3a0:	f1c3 0320 	rsb	r3, r3, #32
 800f3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a8:	40da      	lsrs	r2, r3
 800f3aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f3ae:	4013      	ands	r3, r2
 800f3b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f3b4:	e7d2      	b.n	800f35c <__hexnan+0xd4>
 800f3b6:	3f04      	subs	r7, #4
 800f3b8:	e7d0      	b.n	800f35c <__hexnan+0xd4>
 800f3ba:	2004      	movs	r0, #4
 800f3bc:	e7d5      	b.n	800f36a <__hexnan+0xe2>

0800f3be <__ascii_mbtowc>:
 800f3be:	b082      	sub	sp, #8
 800f3c0:	b901      	cbnz	r1, 800f3c4 <__ascii_mbtowc+0x6>
 800f3c2:	a901      	add	r1, sp, #4
 800f3c4:	b142      	cbz	r2, 800f3d8 <__ascii_mbtowc+0x1a>
 800f3c6:	b14b      	cbz	r3, 800f3dc <__ascii_mbtowc+0x1e>
 800f3c8:	7813      	ldrb	r3, [r2, #0]
 800f3ca:	600b      	str	r3, [r1, #0]
 800f3cc:	7812      	ldrb	r2, [r2, #0]
 800f3ce:	1e10      	subs	r0, r2, #0
 800f3d0:	bf18      	it	ne
 800f3d2:	2001      	movne	r0, #1
 800f3d4:	b002      	add	sp, #8
 800f3d6:	4770      	bx	lr
 800f3d8:	4610      	mov	r0, r2
 800f3da:	e7fb      	b.n	800f3d4 <__ascii_mbtowc+0x16>
 800f3dc:	f06f 0001 	mvn.w	r0, #1
 800f3e0:	e7f8      	b.n	800f3d4 <__ascii_mbtowc+0x16>

0800f3e2 <_realloc_r>:
 800f3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e6:	4607      	mov	r7, r0
 800f3e8:	4614      	mov	r4, r2
 800f3ea:	460d      	mov	r5, r1
 800f3ec:	b921      	cbnz	r1, 800f3f8 <_realloc_r+0x16>
 800f3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f2:	4611      	mov	r1, r2
 800f3f4:	f7fd bcb4 	b.w	800cd60 <_malloc_r>
 800f3f8:	b92a      	cbnz	r2, 800f406 <_realloc_r+0x24>
 800f3fa:	f7fd fc3d 	bl	800cc78 <_free_r>
 800f3fe:	4625      	mov	r5, r4
 800f400:	4628      	mov	r0, r5
 800f402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f406:	f000 f86b 	bl	800f4e0 <_malloc_usable_size_r>
 800f40a:	4284      	cmp	r4, r0
 800f40c:	4606      	mov	r6, r0
 800f40e:	d802      	bhi.n	800f416 <_realloc_r+0x34>
 800f410:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f414:	d8f4      	bhi.n	800f400 <_realloc_r+0x1e>
 800f416:	4621      	mov	r1, r4
 800f418:	4638      	mov	r0, r7
 800f41a:	f7fd fca1 	bl	800cd60 <_malloc_r>
 800f41e:	4680      	mov	r8, r0
 800f420:	b908      	cbnz	r0, 800f426 <_realloc_r+0x44>
 800f422:	4645      	mov	r5, r8
 800f424:	e7ec      	b.n	800f400 <_realloc_r+0x1e>
 800f426:	42b4      	cmp	r4, r6
 800f428:	4622      	mov	r2, r4
 800f42a:	4629      	mov	r1, r5
 800f42c:	bf28      	it	cs
 800f42e:	4632      	movcs	r2, r6
 800f430:	f7fc fd95 	bl	800bf5e <memcpy>
 800f434:	4629      	mov	r1, r5
 800f436:	4638      	mov	r0, r7
 800f438:	f7fd fc1e 	bl	800cc78 <_free_r>
 800f43c:	e7f1      	b.n	800f422 <_realloc_r+0x40>

0800f43e <__ascii_wctomb>:
 800f43e:	4603      	mov	r3, r0
 800f440:	4608      	mov	r0, r1
 800f442:	b141      	cbz	r1, 800f456 <__ascii_wctomb+0x18>
 800f444:	2aff      	cmp	r2, #255	@ 0xff
 800f446:	d904      	bls.n	800f452 <__ascii_wctomb+0x14>
 800f448:	228a      	movs	r2, #138	@ 0x8a
 800f44a:	601a      	str	r2, [r3, #0]
 800f44c:	f04f 30ff 	mov.w	r0, #4294967295
 800f450:	4770      	bx	lr
 800f452:	700a      	strb	r2, [r1, #0]
 800f454:	2001      	movs	r0, #1
 800f456:	4770      	bx	lr

0800f458 <_raise_r>:
 800f458:	291f      	cmp	r1, #31
 800f45a:	b538      	push	{r3, r4, r5, lr}
 800f45c:	4605      	mov	r5, r0
 800f45e:	460c      	mov	r4, r1
 800f460:	d904      	bls.n	800f46c <_raise_r+0x14>
 800f462:	2316      	movs	r3, #22
 800f464:	6003      	str	r3, [r0, #0]
 800f466:	f04f 30ff 	mov.w	r0, #4294967295
 800f46a:	bd38      	pop	{r3, r4, r5, pc}
 800f46c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f46e:	b112      	cbz	r2, 800f476 <_raise_r+0x1e>
 800f470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f474:	b94b      	cbnz	r3, 800f48a <_raise_r+0x32>
 800f476:	4628      	mov	r0, r5
 800f478:	f000 f830 	bl	800f4dc <_getpid_r>
 800f47c:	4622      	mov	r2, r4
 800f47e:	4601      	mov	r1, r0
 800f480:	4628      	mov	r0, r5
 800f482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f486:	f000 b817 	b.w	800f4b8 <_kill_r>
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d00a      	beq.n	800f4a4 <_raise_r+0x4c>
 800f48e:	1c59      	adds	r1, r3, #1
 800f490:	d103      	bne.n	800f49a <_raise_r+0x42>
 800f492:	2316      	movs	r3, #22
 800f494:	6003      	str	r3, [r0, #0]
 800f496:	2001      	movs	r0, #1
 800f498:	e7e7      	b.n	800f46a <_raise_r+0x12>
 800f49a:	2100      	movs	r1, #0
 800f49c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	4798      	blx	r3
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	e7e0      	b.n	800f46a <_raise_r+0x12>

0800f4a8 <raise>:
 800f4a8:	4b02      	ldr	r3, [pc, #8]	@ (800f4b4 <raise+0xc>)
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	6818      	ldr	r0, [r3, #0]
 800f4ae:	f7ff bfd3 	b.w	800f458 <_raise_r>
 800f4b2:	bf00      	nop
 800f4b4:	20000068 	.word	0x20000068

0800f4b8 <_kill_r>:
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	4d07      	ldr	r5, [pc, #28]	@ (800f4d8 <_kill_r+0x20>)
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4604      	mov	r4, r0
 800f4c0:	4608      	mov	r0, r1
 800f4c2:	4611      	mov	r1, r2
 800f4c4:	602b      	str	r3, [r5, #0]
 800f4c6:	f7f3 fb37 	bl	8002b38 <_kill>
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	d102      	bne.n	800f4d4 <_kill_r+0x1c>
 800f4ce:	682b      	ldr	r3, [r5, #0]
 800f4d0:	b103      	cbz	r3, 800f4d4 <_kill_r+0x1c>
 800f4d2:	6023      	str	r3, [r4, #0]
 800f4d4:	bd38      	pop	{r3, r4, r5, pc}
 800f4d6:	bf00      	nop
 800f4d8:	20002fa8 	.word	0x20002fa8

0800f4dc <_getpid_r>:
 800f4dc:	f7f3 bb24 	b.w	8002b28 <_getpid>

0800f4e0 <_malloc_usable_size_r>:
 800f4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4e4:	1f18      	subs	r0, r3, #4
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	bfbc      	itt	lt
 800f4ea:	580b      	ldrlt	r3, [r1, r0]
 800f4ec:	18c0      	addlt	r0, r0, r3
 800f4ee:	4770      	bx	lr

0800f4f0 <_init>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	bf00      	nop
 800f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f6:	bc08      	pop	{r3}
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	4770      	bx	lr

0800f4fc <_fini>:
 800f4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fe:	bf00      	nop
 800f500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f502:	bc08      	pop	{r3}
 800f504:	469e      	mov	lr, r3
 800f506:	4770      	bx	lr
