
ESLAB_P1_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f70  08007f70  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007f70  08007f70  00008f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f78  08007f78  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f7c  08007f7c  00008f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007f80  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002094  20000010  08007f90  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020a4  08007f90  000090a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021300  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004319  00000000  00000000  0002a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d80  00000000  00000000  0002e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e1  00000000  00000000  000303e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004401  00000000  00000000  00031ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000233a0  00000000  00000000  00035ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdb78  00000000  00000000  00059262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e98  00000000  00000000  00156e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0015ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e5c 	.word	0x08007e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007e5c 	.word	0x08007e5c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	rising_falling = 0;
 80004c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000544 <main+0x84>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 ffda 	bl	8001482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f851 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 fa19 	bl	8000908 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d6:	f000 f8af 	bl	8000638 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004da:	f000 f8e5 	bl	80006a8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004de:	f000 f921 	bl	8000724 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e2:	f000 f945 	bl	8000770 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f981 	bl	80007ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 f9af 	bl	800084c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004ee:	f000 f9dd 	bl	80008ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f2:	f004 fb89 	bl	8004c08 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Periodic_Blink */
  Periodic_BlinkHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &Periodic_Blink_attributes);
 80004f6:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <main+0x88>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	4813      	ldr	r0, [pc, #76]	@ (800054c <main+0x8c>)
 80004fe:	f004 fc8f 	bl	8004e20 <osTimerNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <main+0x90>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of Long_Press_Detection */
  Long_Press_DetectionHandle = osTimerNew(Callback02, osTimerOnce, NULL, &Long_Press_Detection_attributes);
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <main+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	4812      	ldr	r0, [pc, #72]	@ (8000558 <main+0x98>)
 8000510:	f004 fc86 	bl	8004e20 <osTimerNew>
 8000514:	4603      	mov	r3, r0
 8000516:	4a11      	ldr	r2, [pc, #68]	@ (800055c <main+0x9c>)
 8000518:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Task_Queue */
  Task_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Task_Queue_attributes);
 800051a:	4a11      	ldr	r2, [pc, #68]	@ (8000560 <main+0xa0>)
 800051c:	2102      	movs	r1, #2
 800051e:	2010      	movs	r0, #16
 8000520:	f004 fd28 	bl	8004f74 <osMessageQueueNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <main+0xa4>)
 8000528:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <main+0xa8>)
 800052c:	2100      	movs	r1, #0
 800052e:	480f      	ldr	r0, [pc, #60]	@ (800056c <main+0xac>)
 8000530:	f004 fbb4 	bl	8004c9c <osThreadNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <main+0xb0>)
 8000538:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053a:	f004 fb89 	bl	8004c50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	bf00      	nop
 8000540:	e7fd      	b.n	800053e <main+0x7e>
 8000542:	bf00      	nop
 8000544:	20000764 	.word	0x20000764
 8000548:	08007f08 	.word	0x08007f08
 800054c:	08000dbd 	.word	0x08000dbd
 8000550:	2000075c 	.word	0x2000075c
 8000554:	08007f18 	.word	0x08007f18
 8000558:	08000de5 	.word	0x08000de5
 800055c:	20000760 	.word	0x20000760
 8000560:	08007ef0 	.word	0x08007ef0
 8000564:	20000758 	.word	0x20000758
 8000568:	08007ecc 	.word	0x08007ecc
 800056c:	08000d09 	.word	0x08000d09
 8000570:	20000754 	.word	0x20000754

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b096      	sub	sp, #88	@ 0x58
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2244      	movs	r2, #68	@ 0x44
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f007 fc2f 	bl	8007de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000596:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800059a:	f001 fea1 	bl	80022e0 <HAL_PWREx_ControlVoltageScaling>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a4:	f000 fc28 	bl	8000df8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a8:	f001 fe7c 	bl	80022a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ac:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <SystemClock_Config+0xc0>)
 80005ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005b2:	4a20      	ldr	r2, [pc, #128]	@ (8000634 <SystemClock_Config+0xc0>)
 80005b4:	f023 0318 	bic.w	r3, r3, #24
 80005b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005bc:	2314      	movs	r3, #20
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005cc:	2360      	movs	r3, #96	@ 0x60
 80005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005dc:	2328      	movs	r3, #40	@ 0x28
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 ff97 	bl	8002524 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005fc:	f000 fbfc 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	2104      	movs	r1, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fb5f 	bl	8002cdc <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000624:	f000 fbe8 	bl	8000df8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000628:	f003 f866 	bl	80036f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	@ 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000

08000638 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 800063e:	4a19      	ldr	r2, [pc, #100]	@ (80006a4 <MX_DFSDM1_Init+0x6c>)
 8000640:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 8000644:	2201      	movs	r2, #1
 8000646:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 8000650:	2202      	movs	r2, #2
 8000652:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 8000662:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000666:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 8000670:	2204      	movs	r2, #4
 8000672:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 800067c:	2201      	movs	r2, #1
 800067e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000680:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 8000682:	2200      	movs	r2, #0
 8000684:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 8000688:	2200      	movs	r2, #0
 800068a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_DFSDM1_Init+0x68>)
 800068e:	f001 f8a3 	bl	80017d8 <HAL_DFSDM_ChannelInit>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000698:	f000 fbae 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000002c 	.word	0x2000002c
 80006a4:	40016020 	.word	0x40016020

080006a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_I2C2_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <MX_I2C2_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_I2C2_Init+0x74>)
 80006b4:	f640 6214 	movw	r2, #3604	@ 0xe14
 80006b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_I2C2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_I2C2_Init+0x74>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_I2C2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_I2C2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2C2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_I2C2_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_I2C2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <MX_I2C2_Init+0x74>)
 80006e6:	f001 fb77 	bl	8001dd8 <HAL_I2C_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 fb82 	bl	8000df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4809      	ldr	r0, [pc, #36]	@ (800071c <MX_I2C2_Init+0x74>)
 80006f8:	f001 fc09 	bl	8001f0e <HAL_I2CEx_ConfigAnalogFilter>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000702:	f000 fb79 	bl	8000df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_I2C2_Init+0x74>)
 800070a:	f001 fc4b 	bl	8001fa4 <HAL_I2CEx_ConfigDigitalFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 fb70 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000064 	.word	0x20000064
 8000720:	40005800 	.word	0x40005800

08000724 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_QUADSPI_Init+0x44>)
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <MX_QUADSPI_Init+0x48>)
 800072c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_QUADSPI_Init+0x44>)
 8000730:	2202      	movs	r2, #2
 8000732:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_QUADSPI_Init+0x44>)
 8000736:	2204      	movs	r2, #4
 8000738:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_QUADSPI_Init+0x44>)
 800073c:	2210      	movs	r2, #16
 800073e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_QUADSPI_Init+0x44>)
 8000742:	2217      	movs	r2, #23
 8000744:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_QUADSPI_Init+0x44>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_QUADSPI_Init+0x44>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_QUADSPI_Init+0x44>)
 8000754:	f001 fe2a 	bl	80023ac <HAL_QSPI_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800075e:	f000 fb4b 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000b8 	.word	0x200000b8
 800076c:	a0001000 	.word	0xa0001000

08000770 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_SPI3_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_SPI3_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_SPI3_Init+0x74>)
 800077c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_SPI3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_SPI3_Init+0x74>)
 800078a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800078e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_SPI3_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_SPI3_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_SPI3_Init+0x74>)
 800079e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_SPI3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_SPI3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_SPI3_Init+0x74>)
 80007be:	2207      	movs	r2, #7
 80007c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_SPI3_Init+0x74>)
 80007ca:	2208      	movs	r2, #8
 80007cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_SPI3_Init+0x74>)
 80007d0:	f003 f974 	bl	8003abc <HAL_SPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 fb0d 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000fc 	.word	0x200000fc
 80007e8:	40003c00 	.word	0x40003c00

080007ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <MX_USART1_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000830:	f003 f9e7 	bl	8003c02 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 fadd 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000160 	.word	0x20000160
 8000848:	40013800 	.word	0x40013800

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	@ (80008a8 <MX_USART3_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_USART3_UART_Init+0x58>)
 8000890:	f003 f9b7 	bl	8003c02 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 faad 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200001e8 	.word	0x200001e8
 80008a8:	40004800 	.word	0x40004800

080008ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2206      	movs	r2, #6
 80008bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	f001 fba4 	bl	800203c <HAL_PCD_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 fa7d 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000270 	.word	0x20000270

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	4bbd      	ldr	r3, [pc, #756]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4abc      	ldr	r2, [pc, #752]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4bba      	ldr	r3, [pc, #744]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4bb7      	ldr	r3, [pc, #732]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4ab6      	ldr	r2, [pc, #728]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4bb4      	ldr	r3, [pc, #720]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4bb1      	ldr	r3, [pc, #708]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4ab0      	ldr	r2, [pc, #704]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4bae      	ldr	r3, [pc, #696]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4bab      	ldr	r3, [pc, #684]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4aaa      	ldr	r2, [pc, #680]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4ba8      	ldr	r3, [pc, #672]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4ba5      	ldr	r3, [pc, #660]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4aa4      	ldr	r2, [pc, #656]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4ba2      	ldr	r3, [pc, #648]	@ (8000c14 <MX_GPIO_Init+0x30c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800099c:	489e      	ldr	r0, [pc, #632]	@ (8000c18 <MX_GPIO_Init+0x310>)
 800099e:	f001 f9d1 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f248 1104 	movw	r1, #33028	@ 0x8104
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ac:	f001 f9ca 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009b0:	2200      	movs	r2, #0
 80009b2:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80009b6:	4899      	ldr	r0, [pc, #612]	@ (8000c1c <MX_GPIO_Init+0x314>)
 80009b8:	f001 f9c4 	bl	8001d44 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f241 0181 	movw	r1, #4225	@ 0x1081
 80009c2:	4897      	ldr	r0, [pc, #604]	@ (8000c20 <MX_GPIO_Init+0x318>)
 80009c4:	f001 f9be 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ce:	4894      	ldr	r0, [pc, #592]	@ (8000c20 <MX_GPIO_Init+0x318>)
 80009d0:	f001 f9b8 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80009da:	4892      	ldr	r0, [pc, #584]	@ (8000c24 <MX_GPIO_Init+0x31c>)
 80009dc:	f001 f9b2 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2120      	movs	r1, #32
 80009e4:	488d      	ldr	r0, [pc, #564]	@ (8000c1c <MX_GPIO_Init+0x314>)
 80009e6:	f001 f9ad 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2101      	movs	r1, #1
 80009ee:	488a      	ldr	r0, [pc, #552]	@ (8000c18 <MX_GPIO_Init+0x310>)
 80009f0:	f001 f9a8 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009f4:	f240 1315 	movw	r3, #277	@ 0x115
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4882      	ldr	r0, [pc, #520]	@ (8000c18 <MX_GPIO_Init+0x310>)
 8000a0e:	f000 ffef 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a12:	236a      	movs	r3, #106	@ 0x6a
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	487c      	ldr	r0, [pc, #496]	@ (8000c18 <MX_GPIO_Init+0x310>)
 8000a28:	f000 ffe2 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a32:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4878      	ldr	r0, [pc, #480]	@ (8000c24 <MX_GPIO_Init+0x31c>)
 8000a44:	f000 ffd4 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a48:	233f      	movs	r3, #63	@ 0x3f
 8000a4a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4872      	ldr	r0, [pc, #456]	@ (8000c24 <MX_GPIO_Init+0x31c>)
 8000a5c:	f000 ffc8 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a60:	2303      	movs	r3, #3
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a70:	2308      	movs	r3, #8
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7e:	f000 ffb7 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a82:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9e:	f000 ffa7 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac0:	f000 ff96 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f000 ff89 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ade:	23e0      	movs	r3, #224	@ 0xe0
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aee:	2305      	movs	r3, #5
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afc:	f000 ff78 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b00:	2301      	movs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4841      	ldr	r0, [pc, #260]	@ (8000c1c <MX_GPIO_Init+0x314>)
 8000b16:	f000 ff6b 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b1e:	230b      	movs	r3, #11
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	483b      	ldr	r0, [pc, #236]	@ (8000c1c <MX_GPIO_Init+0x314>)
 8000b2e:	f000 ff5f 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b32:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b36:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4834      	ldr	r0, [pc, #208]	@ (8000c1c <MX_GPIO_Init+0x314>)
 8000b4c:	f000 ff50 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b50:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b54:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	482e      	ldr	r0, [pc, #184]	@ (8000c20 <MX_GPIO_Init+0x318>)
 8000b68:	f000 ff42 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b6c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4826      	ldr	r0, [pc, #152]	@ (8000c20 <MX_GPIO_Init+0x318>)
 8000b86:	f000 ff33 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4820      	ldr	r0, [pc, #128]	@ (8000c24 <MX_GPIO_Init+0x31c>)
 8000ba4:	f000 ff24 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ba8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4819      	ldr	r0, [pc, #100]	@ (8000c24 <MX_GPIO_Init+0x31c>)
 8000bc0:	f000 ff16 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4810      	ldr	r0, [pc, #64]	@ (8000c20 <MX_GPIO_Init+0x318>)
 8000be0:	f000 ff06 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000be4:	2378      	movs	r3, #120	@ 0x78
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4808      	ldr	r0, [pc, #32]	@ (8000c20 <MX_GPIO_Init+0x318>)
 8000c00:	f000 fef6 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e00a      	b.n	8000c28 <MX_GPIO_Init+0x320>
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48001000 	.word	0x48001000
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	48000c00 	.word	0x48000c00
 8000c24:	48000800 	.word	0x48000800
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <MX_GPIO_Init+0x360>)
 8000c3a:	f000 fed9 	bl	80019f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2105      	movs	r1, #5
 8000c42:	2017      	movs	r0, #23
 8000c44:	f000 fd91 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c48:	2017      	movs	r0, #23
 8000c4a:	f000 fdaa 	bl	80017a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2105      	movs	r1, #5
 8000c52:	2028      	movs	r0, #40	@ 0x28
 8000c54:	f000 fd89 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c58:	2028      	movs	r0, #40	@ 0x28
 8000c5a:	f000 fda2 	bl	80017a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	@ 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	48000400 	.word	0x48000400

08000c6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	@ 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	switch(GPIO_Pin)
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c7c:	d136      	bne.n	8000cec <HAL_GPIO_EXTI_Callback+0x80>
//		else{
//			//press
//			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
//
//		}
		rising_falling++;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c86:	6013      	str	r3, [r2, #0]
		if(rising_falling%2){
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <HAL_GPIO_EXTI_Callback+0x34>
//			osTimerStart(Long_Press_DetectionHandle, 1000);
			presstime = HAL_GetTick();
 8000c94:	f000 fc5e 	bl	8001554 <HAL_GetTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x90>)
 8000c9c:	6013      	str	r3, [r2, #0]
				MSGQUEUE_OBJ_t msg;
				msg.Buf[0] = 2;
				osMessageQueuePut(Task_QueueHandle, &msg, 0U, 0U);
			}
		}
		break;
 8000c9e:	e026      	b.n	8000cee <HAL_GPIO_EXTI_Callback+0x82>
			rising_falling = 0;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
			releasetime = HAL_GetTick();
 8000ca6:	f000 fc55 	bl	8001554 <HAL_GetTick>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x94>)
 8000cae:	6013      	str	r3, [r2, #0]
			if(releasetime - presstime < 1000){
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x94>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x90>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cbe:	d20a      	bcs.n	8000cd6 <HAL_GPIO_EXTI_Callback+0x6a>
				msg.Buf[0] = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	733b      	strb	r3, [r7, #12]
				osMessageQueuePut(Task_QueueHandle, &msg, 0U, 0U);
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x98>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	f107 010c 	add.w	r1, r7, #12
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f004 f9c4 	bl	800505c <osMessageQueuePut>
		break;
 8000cd4:	e00b      	b.n	8000cee <HAL_GPIO_EXTI_Callback+0x82>
				msg.Buf[0] = 2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	733b      	strb	r3, [r7, #12]
				osMessageQueuePut(Task_QueueHandle, &msg, 0U, 0U);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x98>)
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	f107 010c 	add.w	r1, r7, #12
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f004 f9b9 	bl	800505c <osMessageQueuePut>
		break;
 8000cea:	e000      	b.n	8000cee <HAL_GPIO_EXTI_Callback+0x82>
	default:
		break;
 8000cec:	bf00      	nop
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	@ 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000764 	.word	0x20000764
 8000cfc:	20000768 	.word	0x20000768
 8000d00:	2000076c 	.word	0x2000076c
 8000d04:	20000758 	.word	0x20000758

08000d08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	@ 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	osTimerStart(Periodic_BlinkHandle, 10000);
 8000d10:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <StartDefaultTask+0xa8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 f8fd 	bl	8004f18 <osTimerStart>
	MSGQUEUE_OBJ_t msg;
	for(;;)
  {
	  osMessageQueueGet(Task_QueueHandle, &msg, NULL, osWaitForever);
 8000d1e:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <StartDefaultTask+0xac>)
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	f107 0108 	add.w	r1, r7, #8
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f004 f9f6 	bl	800511c <osMessageQueueGet>
	  if(msg.Buf[0] == 0){
 8000d30:	7a3b      	ldrb	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d111      	bne.n	8000d5a <StartDefaultTask+0x52>
		  // Task 2
		  for(int i = 0; i < 40; i++){
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d3a:	e00a      	b.n	8000d52 <StartDefaultTask+0x4a>
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000d3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d40:	481d      	ldr	r0, [pc, #116]	@ (8000db8 <StartDefaultTask+0xb0>)
 8000d42:	f001 f817 	bl	8001d74 <HAL_GPIO_TogglePin>
			osDelay(50);
 8000d46:	2032      	movs	r0, #50	@ 0x32
 8000d48:	f004 f83a 	bl	8004dc0 <osDelay>
		  for(int i = 0; i < 40; i++){
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d4e:	3301      	adds	r3, #1
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d54:	2b27      	cmp	r3, #39	@ 0x27
 8000d56:	ddf1      	ble.n	8000d3c <StartDefaultTask+0x34>
 8000d58:	e7e1      	b.n	8000d1e <StartDefaultTask+0x16>
		}
	  }
	  else if(msg.Buf[0] == 1){
 8000d5a:	7a3b      	ldrb	r3, [r7, #8]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d112      	bne.n	8000d86 <StartDefaultTask+0x7e>
		  // Short Press
		  for(int i = 0; i < 10; i++){
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d64:	e00b      	b.n	8000d7e <StartDefaultTask+0x76>
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000d66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6a:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <StartDefaultTask+0xb0>)
 8000d6c:	f001 f802 	bl	8001d74 <HAL_GPIO_TogglePin>
			osDelay(500);
 8000d70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d74:	f004 f824 	bl	8004dc0 <osDelay>
		  for(int i = 0; i < 10; i++){
 8000d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	ddf0      	ble.n	8000d66 <StartDefaultTask+0x5e>
 8000d84:	e7cb      	b.n	8000d1e <StartDefaultTask+0x16>
		   }
	  }
	  else if(msg.Buf[0] == 2){
 8000d86:	7a3b      	ldrb	r3, [r7, #8]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d1c8      	bne.n	8000d1e <StartDefaultTask+0x16>
		  // Long Press
		  for(int i = 0; i < 100; i++){
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d90:	e00a      	b.n	8000da8 <StartDefaultTask+0xa0>
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000d92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d96:	4808      	ldr	r0, [pc, #32]	@ (8000db8 <StartDefaultTask+0xb0>)
 8000d98:	f000 ffec 	bl	8001d74 <HAL_GPIO_TogglePin>
			osDelay(50);
 8000d9c:	2032      	movs	r0, #50	@ 0x32
 8000d9e:	f004 f80f 	bl	8004dc0 <osDelay>
		  for(int i = 0; i < 100; i++){
 8000da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da4:	3301      	adds	r3, #1
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000daa:	2b63      	cmp	r3, #99	@ 0x63
 8000dac:	ddf1      	ble.n	8000d92 <StartDefaultTask+0x8a>
	  osMessageQueueGet(Task_QueueHandle, &msg, NULL, osWaitForever);
 8000dae:	e7b6      	b.n	8000d1e <StartDefaultTask+0x16>
 8000db0:	2000075c 	.word	0x2000075c
 8000db4:	20000758 	.word	0x20000758
 8000db8:	48000400 	.word	0x48000400

08000dbc <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	@ 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	// 10 sec timer
	MSGQUEUE_OBJ_t msg;
	msg.Buf[0] = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	733b      	strb	r3, [r7, #12]
  /* USER CODE BEGIN Callback01 */
	osMessageQueuePut(Task_QueueHandle, &msg, 0U, 0U);
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <Callback01+0x24>)
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	f107 010c 	add.w	r1, r7, #12
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f004 f942 	bl	800505c <osMessageQueuePut>
  /* USER CODE END Callback01 */
}
 8000dd8:	bf00      	nop
 8000dda:	3730      	adds	r7, #48	@ 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000758 	.word	0x20000758

08000de4 <Callback02>:

/* Callback02 function */
void Callback02(void *argument)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	// long press
  /* USER CODE END Callback02 */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0e:	4a10      	ldr	r2, [pc, #64]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	f06f 0001 	mvn.w	r0, #1
 8000e42:	f000 fc92 	bl	800176a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0ac      	sub	sp, #176	@ 0xb0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2288      	movs	r2, #136	@ 0x88
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 ffb6 	bl	8007de6 <memset>
  if(DFSDM1_Init == 0)
 8000e7a:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d142      	bne.n	8000f08 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 f946 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000e9e:	f7ff ffab 	bl	8000df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ea8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a15      	ldr	r2, [pc, #84]	@ (8000f14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000ed2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000eec:	2306      	movs	r3, #6
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000efa:	f000 fd79 	bl	80019f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a02      	ldr	r2, [pc, #8]	@ (8000f10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f06:	6013      	str	r3, [r2, #0]
  }

}
 8000f08:	bf00      	nop
 8000f0a:	37b0      	adds	r7, #176	@ 0xb0
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000770 	.word	0x20000770
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48001000 	.word	0x48001000

08000f1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2288      	movs	r2, #136	@ 0x88
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 ff52 	bl	8007de6 <memset>
  if(hi2c->Instance==I2C2)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a21      	ldr	r2, [pc, #132]	@ (8000fcc <HAL_I2C_MspInit+0xb0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d13b      	bne.n	8000fc4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 f8e3 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f64:	f7ff ff48 	bl	8000df8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_I2C_MspInit+0xb4>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6c:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <HAL_I2C_MspInit+0xb4>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <HAL_I2C_MspInit+0xb4>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f88:	2312      	movs	r3, #18
 8000f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <HAL_I2C_MspInit+0xb8>)
 8000fa8:	f000 fd22 	bl	80019f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_I2C_MspInit+0xb4>)
 8000fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb0:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_I2C_MspInit+0xb4>)
 8000fb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <HAL_I2C_MspInit+0xb4>)
 8000fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000fc4:	bf00      	nop
 8000fc6:	37b0      	adds	r7, #176	@ 0xb0
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40005800 	.word	0x40005800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48000400 	.word	0x48000400

08000fd8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <HAL_QSPI_MspInit+0x7c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d128      	bne.n	800104c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <HAL_QSPI_MspInit+0x80>)
 8000ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ffe:	4a16      	ldr	r2, [pc, #88]	@ (8001058 <HAL_QSPI_MspInit+0x80>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001004:	6513      	str	r3, [r2, #80]	@ 0x50
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_QSPI_MspInit+0x80>)
 8001008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800100a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_QSPI_MspInit+0x80>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a10      	ldr	r2, [pc, #64]	@ (8001058 <HAL_QSPI_MspInit+0x80>)
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_QSPI_MspInit+0x80>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800102a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800102e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800103c:	230a      	movs	r3, #10
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	@ (800105c <HAL_QSPI_MspInit+0x84>)
 8001048:	f000 fcd2 	bl	80019f0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	@ 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	a0001000 	.word	0xa0001000
 8001058:	40021000 	.word	0x40021000
 800105c:	48001000 	.word	0x48001000

08001060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <HAL_SPI_MspInit+0x7c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d128      	bne.n	80010d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001082:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 8001088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800108c:	6593      	str	r3, [r2, #88]	@ 0x58
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010b2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c4:	2306      	movs	r3, #6
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <HAL_SPI_MspInit+0x84>)
 80010d0:	f000 fc8e 	bl	80019f0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40003c00 	.word	0x40003c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000800 	.word	0x48000800

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0ae      	sub	sp, #184	@ 0xb8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2288      	movs	r2, #136	@ 0x88
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fe6c 	bl	8007de6 <memset>
  if(huart->Instance==USART1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a42      	ldr	r2, [pc, #264]	@ (800121c <HAL_UART_MspInit+0x134>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d13b      	bne.n	8001190 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800111c:	2300      	movs	r3, #0
 800111e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fffd 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001130:	f7ff fe62 	bl	8000df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001134:	4b3a      	ldr	r3, [pc, #232]	@ (8001220 <HAL_UART_MspInit+0x138>)
 8001136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001138:	4a39      	ldr	r2, [pc, #228]	@ (8001220 <HAL_UART_MspInit+0x138>)
 800113a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001140:	4b37      	ldr	r3, [pc, #220]	@ (8001220 <HAL_UART_MspInit+0x138>)
 8001142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <HAL_UART_MspInit+0x138>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001150:	4a33      	ldr	r2, [pc, #204]	@ (8001220 <HAL_UART_MspInit+0x138>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <HAL_UART_MspInit+0x138>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001164:	23c0      	movs	r3, #192	@ 0xc0
 8001166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800117c:	2307      	movs	r3, #7
 800117e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001186:	4619      	mov	r1, r3
 8001188:	4826      	ldr	r0, [pc, #152]	@ (8001224 <HAL_UART_MspInit+0x13c>)
 800118a:	f000 fc31 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800118e:	e040      	b.n	8001212 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a24      	ldr	r2, [pc, #144]	@ (8001228 <HAL_UART_MspInit+0x140>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d13b      	bne.n	8001212 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800119a:	2304      	movs	r3, #4
 800119c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800119e:	2300      	movs	r3, #0
 80011a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 ffbc 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80011b2:	f7ff fe21 	bl	8000df8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <HAL_UART_MspInit+0x138>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	4a19      	ldr	r2, [pc, #100]	@ (8001220 <HAL_UART_MspInit+0x138>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HAL_UART_MspInit+0x138>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_UART_MspInit+0x138>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <HAL_UART_MspInit+0x138>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_UART_MspInit+0x138>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001200:	2307      	movs	r3, #7
 8001202:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001206:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800120a:	4619      	mov	r1, r3
 800120c:	4807      	ldr	r0, [pc, #28]	@ (800122c <HAL_UART_MspInit+0x144>)
 800120e:	f000 fbef 	bl	80019f0 <HAL_GPIO_Init>
}
 8001212:	bf00      	nop
 8001214:	37b8      	adds	r7, #184	@ 0xb8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40013800 	.word	0x40013800
 8001220:	40021000 	.word	0x40021000
 8001224:	48000400 	.word	0x48000400
 8001228:	40004800 	.word	0x40004800
 800122c:	48000c00 	.word	0x48000c00

08001230 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ac      	sub	sp, #176	@ 0xb0
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2288      	movs	r2, #136	@ 0x88
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f006 fdc8 	bl	8007de6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800125e:	d17c      	bne.n	800135a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001260:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001264:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001266:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800126a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001276:	2318      	movs	r3, #24
 8001278:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800127a:	2307      	movs	r3, #7
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001282:	2302      	movs	r3, #2
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001286:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4618      	mov	r0, r3
 8001292:	f001 ff47 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800129c:	f7ff fdac 	bl	8000df8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d6:	f000 fb8b 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012f4:	230a      	movs	r3, #10
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f000 fb74 	bl	80019f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	4a15      	ldr	r2, [pc, #84]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800130e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d114      	bne.n	8001356 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001336:	6593      	str	r3, [r2, #88]	@ 0x58
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001344:	f001 f822 	bl	800238c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <HAL_PCD_MspInit+0x134>)
 800134e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001352:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001354:	e001      	b.n	800135a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001356:	f001 f819 	bl	800238c <HAL_PWREx_EnableVddUSB>
}
 800135a:	bf00      	nop
 800135c:	37b0      	adds	r7, #176	@ 0xb0
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 f8c3 	bl	800152c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013a6:	f006 f823 	bl	80073f0 <xTaskGetSchedulerState>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d001      	beq.n	80013b4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013b0:	f004 fbaa 	bl	8005b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80013bc:	2020      	movs	r0, #32
 80013be:	f000 fcf3 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80013c2:	2040      	movs	r0, #64	@ 0x40
 80013c4:	f000 fcf0 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80013c8:	2080      	movs	r0, #128	@ 0x80
 80013ca:	f000 fced 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013d2:	f000 fce9 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}

080013da <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80013de:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013e2:	f000 fce1 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80013ea:	f000 fcdd 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80013ee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013f2:	f000 fcd9 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013f6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013fa:	f000 fcd5 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013fe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001402:	f000 fcd1 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001468 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff ffea 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	@ (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	@ (800147c <LoopForever+0x16>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f006 fccb 	bl	8007df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001462:	f7ff f82d 	bl	80004c0 <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001474:	08007f80 	.word	0x08007f80
  ldr r2, =_sbss
 8001478:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800147c:	200020a4 	.word	0x200020a4

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>

08001482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f961 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f80e 	bl	80014b4 <HAL_InitTick>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e001      	b.n	80014a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a4:	f7ff fcae 	bl	8000e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014c0:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_InitTick+0x6c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d023      	beq.n	8001510 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <HAL_InitTick+0x70>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <HAL_InitTick+0x6c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f96d 	bl	80017be <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10f      	bne.n	800150a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d809      	bhi.n	8001504 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f937 	bl	800176a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_InitTick+0x74>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e007      	b.n	8001514 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e004      	b.n	8001514 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e001      	b.n	8001514 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	20000774 	.word	0x20000774

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000774 	.word	0x20000774

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	@ (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	@ (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	@ 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	@ 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff8e 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff29 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff3e 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff8e 	bl	80016a8 <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5d 	bl	8001654 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff31 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0ac      	b.n	8001944 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f8b2 	bl	8001958 <DFSDM_GetChannelFromInstance>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a55      	ldr	r2, [pc, #340]	@ (800194c <HAL_DFSDM_ChannelInit+0x174>)
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e09f      	b.n	8001944 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fb25 	bl	8000e54 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800180a:	4b51      	ldr	r3, [pc, #324]	@ (8001950 <HAL_DFSDM_ChannelInit+0x178>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a4f      	ldr	r2, [pc, #316]	@ (8001950 <HAL_DFSDM_ChannelInit+0x178>)
 8001812:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001814:	4b4e      	ldr	r3, [pc, #312]	@ (8001950 <HAL_DFSDM_ChannelInit+0x178>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d125      	bne.n	8001868 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800181c:	4b4d      	ldr	r3, [pc, #308]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a4c      	ldr	r2, [pc, #304]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 8001822:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001826:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001828:	4b4a      	ldr	r3, [pc, #296]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4948      	ldr	r1, [pc, #288]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a46      	ldr	r2, [pc, #280]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 800183c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001840:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	791b      	ldrb	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d108      	bne.n	800185c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800184a:	4b42      	ldr	r3, [pc, #264]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	3b01      	subs	r3, #1
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	493f      	ldr	r1, [pc, #252]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800185c:	4b3d      	ldr	r3, [pc, #244]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a3c      	ldr	r2, [pc, #240]	@ (8001954 <HAL_DFSDM_ChannelInit+0x17c>)
 8001862:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001866:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001876:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6819      	ldr	r1, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001886:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800188c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 020f 	bic.w	r2, r2, #15
 80018a4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80018cc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	3b01      	subs	r3, #1
 80018de:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f002 0207 	and.w	r2, r2, #7
 80018f8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001924:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f810 	bl	8001958 <DFSDM_GetChannelFromInstance>
 8001938:	4602      	mov	r2, r0
 800193a:	4904      	ldr	r1, [pc, #16]	@ (800194c <HAL_DFSDM_ChannelInit+0x174>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000077c 	.word	0x2000077c
 8001950:	20000778 	.word	0x20000778
 8001954:	40016000 	.word	0x40016000

08001958 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a1c      	ldr	r2, [pc, #112]	@ (80019d4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d102      	bne.n	800196e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e02b      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a19      	ldr	r2, [pc, #100]	@ (80019d8 <DFSDM_GetChannelFromInstance+0x80>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d102      	bne.n	800197c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e024      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a17      	ldr	r2, [pc, #92]	@ (80019dc <DFSDM_GetChannelFromInstance+0x84>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d102      	bne.n	800198a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001984:	2302      	movs	r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e01d      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <DFSDM_GetChannelFromInstance+0x88>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d102      	bne.n	8001998 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001992:	2304      	movs	r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e016      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <DFSDM_GetChannelFromInstance+0x8c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d102      	bne.n	80019a6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80019a0:	2305      	movs	r3, #5
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e00f      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a0f      	ldr	r2, [pc, #60]	@ (80019e8 <DFSDM_GetChannelFromInstance+0x90>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d102      	bne.n	80019b4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80019ae:	2306      	movs	r3, #6
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e008      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <DFSDM_GetChannelFromInstance+0x94>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d102      	bne.n	80019c2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80019bc:	2307      	movs	r3, #7
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e001      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80019c2:	2303      	movs	r3, #3
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	40016000 	.word	0x40016000
 80019d8:	40016020 	.word	0x40016020
 80019dc:	40016040 	.word	0x40016040
 80019e0:	40016080 	.word	0x40016080
 80019e4:	400160a0 	.word	0x400160a0
 80019e8:	400160c0 	.word	0x400160c0
 80019ec:	400160e0 	.word	0x400160e0

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fe:	e17f      	b.n	8001d00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8171 	beq.w	8001cfa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d005      	beq.n	8001a30 <HAL_GPIO_Init+0x40>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 0201 	and.w	r2, r3, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d118      	bne.n	8001ad0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d017      	beq.n	8001b0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	6939      	ldr	r1, [r7, #16]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80ac 	beq.w	8001cfa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d20 <HAL_GPIO_Init+0x330>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d20 <HAL_GPIO_Init+0x330>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bae:	4b5c      	ldr	r3, [pc, #368]	@ (8001d20 <HAL_GPIO_Init+0x330>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bba:	4a5a      	ldr	r2, [pc, #360]	@ (8001d24 <HAL_GPIO_Init+0x334>)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001be4:	d025      	beq.n	8001c32 <HAL_GPIO_Init+0x242>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d28 <HAL_GPIO_Init+0x338>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01f      	beq.n	8001c2e <HAL_GPIO_Init+0x23e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8001d2c <HAL_GPIO_Init+0x33c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x23a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d30 <HAL_GPIO_Init+0x340>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x236>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4c      	ldr	r2, [pc, #304]	@ (8001d34 <HAL_GPIO_Init+0x344>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x232>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4b      	ldr	r2, [pc, #300]	@ (8001d38 <HAL_GPIO_Init+0x348>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x22e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4a      	ldr	r2, [pc, #296]	@ (8001d3c <HAL_GPIO_Init+0x34c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x22a>
 8001c16:	2306      	movs	r3, #6
 8001c18:	e00c      	b.n	8001c34 <HAL_GPIO_Init+0x244>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e00a      	b.n	8001c34 <HAL_GPIO_Init+0x244>
 8001c1e:	2305      	movs	r3, #5
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x244>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x244>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x244>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x244>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x244>
 8001c32:	2300      	movs	r3, #0
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c44:	4937      	ldr	r1, [pc, #220]	@ (8001d24 <HAL_GPIO_Init+0x334>)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c52:	4b3b      	ldr	r3, [pc, #236]	@ (8001d40 <HAL_GPIO_Init+0x350>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c76:	4a32      	ldr	r2, [pc, #200]	@ (8001d40 <HAL_GPIO_Init+0x350>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c7c:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <HAL_GPIO_Init+0x350>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ca0:	4a27      	ldr	r2, [pc, #156]	@ (8001d40 <HAL_GPIO_Init+0x350>)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <HAL_GPIO_Init+0x350>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cca:	4a1d      	ldr	r2, [pc, #116]	@ (8001d40 <HAL_GPIO_Init+0x350>)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <HAL_GPIO_Init+0x350>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cf4:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <HAL_GPIO_Init+0x350>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f47f ae78 	bne.w	8001a00 <HAL_GPIO_Init+0x10>
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	48000400 	.word	0x48000400
 8001d2c:	48000800 	.word	0x48000800
 8001d30:	48000c00 	.word	0x48000c00
 8001d34:	48001000 	.word	0x48001000
 8001d38:	48001400 	.word	0x48001400
 8001d3c:	48001800 	.word	0x48001800
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d54:	787b      	ldrb	r3, [r7, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43d9      	mvns	r1, r3
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	400b      	ands	r3, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ff50 	bl	8000c6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e08d      	b.n	8001f06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff f88c 	bl	8000f1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2224      	movs	r2, #36	@ 0x24
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e006      	b.n	8001e60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d108      	bne.n	8001e7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	e007      	b.n	8001e8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d138      	bne.n	8001f96 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e032      	b.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2224      	movs	r2, #36	@ 0x24
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f60:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d139      	bne.n	800202e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e033      	b.n	8002030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	@ 0x24
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ff6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af02      	add	r7, sp, #8
 8002042:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e101      	b.n	8002252 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff f8e4 	bl	8001230 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fb10 	bl	80046a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7c1a      	ldrb	r2, [r3, #16]
 8002088:	f88d 2000 	strb.w	r2, [sp]
 800208c:	3304      	adds	r3, #4
 800208e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002090:	f002 fad9 	bl	8004646 <USB_CoreInit>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0d5      	b.n	8002252 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 fb08 	bl	80046c2 <USB_SetCurrentMode>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0c6      	b.n	8002252 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e04a      	b.n	8002160 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	3315      	adds	r3, #21
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3314      	adds	r3, #20
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	b298      	uxth	r0, r3
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	332e      	adds	r3, #46	@ 0x2e
 8002106:	4602      	mov	r2, r0
 8002108:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3318      	adds	r3, #24
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	331c      	adds	r3, #28
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	3320      	adds	r3, #32
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3324      	adds	r3, #36	@ 0x24
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	3301      	adds	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	429a      	cmp	r2, r3
 8002168:	d3af      	bcc.n	80020ca <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	e044      	b.n	80021fa <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	3301      	adds	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	791b      	ldrb	r3, [r3, #4]
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	429a      	cmp	r2, r3
 8002202:	d3b5      	bcc.n	8002170 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7c1a      	ldrb	r2, [r3, #16]
 800220c:	f88d 2000 	strb.w	r2, [sp]
 8002210:	3304      	adds	r3, #4
 8002212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002214:	f002 faa2 	bl	800475c <USB_DevInit>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e013      	b.n	8002252 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7b1b      	ldrb	r3, [r3, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f80a 	bl	800225a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fc47 	bl	8004ade <USB_DevDisconnect>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800228c:	f043 0303 	orr.w	r3, r3, #3
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000

080022c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <HAL_PWREx_GetVoltageRange+0x18>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40007000 	.word	0x40007000

080022e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ee:	d130      	bne.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f0:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022fc:	d038      	beq.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002306:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002308:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800230c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800230e:	4b1d      	ldr	r3, [pc, #116]	@ (8002384 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2232      	movs	r2, #50	@ 0x32
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	4a1b      	ldr	r2, [pc, #108]	@ (8002388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	3301      	adds	r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002324:	e002      	b.n	800232c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3b01      	subs	r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232c:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002338:	d102      	bne.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x60>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f2      	bne.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234c:	d110      	bne.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e00f      	b.n	8002372 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235e:	d007      	beq.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002360:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002368:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40007000 	.word	0x40007000
 8002384:	20000000 	.word	0x20000000
 8002388:	431bde83 	.word	0x431bde83

0800238c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800239a:	6053      	str	r3, [r2, #4]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40007000 	.word	0x40007000

080023ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff f8ce 	bl	8001554 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e063      	b.n	800248c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7fe fdfd 	bl	8000fd8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80023de:	f241 3188 	movw	r1, #5000	@ 0x1388
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f858 	bl	8002498 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	021a      	lsls	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	2120      	movs	r1, #32
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f850 	bl	80024b4 <QSPI_WaitFlagStateUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002418:	7afb      	ldrb	r3, [r7, #11]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d131      	bne.n	8002482 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002428:	f023 0310 	bic.w	r3, r3, #16
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6852      	ldr	r2, [r2, #4]
 8002430:	0611      	lsls	r1, r2, #24
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <HAL_QSPI_Init+0xe8>)
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6912      	ldr	r2, [r2, #16]
 800244e:	0411      	lsls	r1, r2, #16
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6952      	ldr	r2, [r2, #20]
 8002454:	4311      	orrs	r1, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6992      	ldr	r2, [r2, #24]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800248a:	7afb      	ldrb	r3, [r7, #11]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	ffe0f8fe 	.word	0xffe0f8fe

08002498 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024c4:	e01a      	b.n	80024fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d016      	beq.n	80024fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ce:	f7ff f841 	bl	8001554 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d302      	bcc.n	80024e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2204      	movs	r2, #4
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e00e      	b.n	800251a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	429a      	cmp	r2, r3
 8002516:	d1d6      	bne.n	80024c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e3ca      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b97      	ldr	r3, [pc, #604]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4b94      	ldr	r3, [pc, #592]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80e4 	beq.w	8002720 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_RCC_OscConfig+0x4a>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	f040 808b 	bne.w	800267c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b01      	cmp	r3, #1
 800256a:	f040 8087 	bne.w	800267c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800256e:	4b89      	ldr	r3, [pc, #548]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x62>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e3a2      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1a      	ldr	r2, [r3, #32]
 800258a:	4b82      	ldr	r3, [pc, #520]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_RCC_OscConfig+0x7c>
 8002596:	4b7f      	ldr	r3, [pc, #508]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800259e:	e005      	b.n	80025ac <HAL_RCC_OscConfig+0x88>
 80025a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d223      	bcs.n	80025f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fd55 	bl	8003064 <RCC_SetFlashLatencyFromMSIRange>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e383      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c4:	4b73      	ldr	r3, [pc, #460]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a72      	ldr	r2, [pc, #456]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b70      	ldr	r3, [pc, #448]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	496d      	ldr	r1, [pc, #436]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	4968      	ldr	r1, [pc, #416]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
 80025f6:	e025      	b.n	8002644 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f8:	4b66      	ldr	r3, [pc, #408]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a65      	ldr	r2, [pc, #404]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80025fe:	f043 0308 	orr.w	r3, r3, #8
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4960      	ldr	r1, [pc, #384]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002616:	4b5f      	ldr	r3, [pc, #380]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	495b      	ldr	r1, [pc, #364]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fd15 	bl	8003064 <RCC_SetFlashLatencyFromMSIRange>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e343      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002644:	f000 fc4a 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b52      	ldr	r3, [pc, #328]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	4950      	ldr	r1, [pc, #320]	@ (8002798 <HAL_RCC_OscConfig+0x274>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	4a4e      	ldr	r2, [pc, #312]	@ (800279c <HAL_RCC_OscConfig+0x278>)
 8002662:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002664:	4b4e      	ldr	r3, [pc, #312]	@ (80027a0 <HAL_RCC_OscConfig+0x27c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe ff23 	bl	80014b4 <HAL_InitTick>
 800266e:	4603      	mov	r3, r0
 8002670:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d052      	beq.n	800271e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	e327      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d032      	beq.n	80026ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002684:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a42      	ldr	r2, [pc, #264]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002690:	f7fe ff60 	bl	8001554 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002698:	f7fe ff5c 	bl	8001554 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e310      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b6:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a36      	ldr	r2, [pc, #216]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b34      	ldr	r3, [pc, #208]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4931      	ldr	r1, [pc, #196]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	492c      	ldr	r1, [pc, #176]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
 80026e8:	e01a      	b.n	8002720 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a29      	ldr	r2, [pc, #164]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f6:	f7fe ff2d 	bl	8001554 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026fe:	f7fe ff29 	bl	8001554 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e2dd      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x1da>
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800271e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d074      	beq.n	8002816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x21a>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d10e      	bne.n	8002756 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d10b      	bne.n	8002756 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d064      	beq.n	8002814 <HAL_RCC_OscConfig+0x2f0>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d160      	bne.n	8002814 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e2ba      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x24a>
 8002760:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e026      	b.n	80027bc <HAL_RCC_OscConfig+0x298>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002776:	d115      	bne.n	80027a4 <HAL_RCC_OscConfig+0x280>
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 800277e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a02      	ldr	r2, [pc, #8]	@ (8002794 <HAL_RCC_OscConfig+0x270>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x298>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	08007f28 	.word	0x08007f28
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004
 80027a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a9f      	ldr	r2, [pc, #636]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b9d      	ldr	r3, [pc, #628]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a9c      	ldr	r2, [pc, #624]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fec6 	bl	8001554 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fe fec2 	bl	8001554 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	@ 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e276      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027de:	4b92      	ldr	r3, [pc, #584]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x2a8>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe feb2 	bl	8001554 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe feae 	bl	8001554 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e262      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002806:	4b88      	ldr	r3, [pc, #544]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2d0>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d060      	beq.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x310>
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d119      	bne.n	8002862 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d116      	bne.n	8002862 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002834:	4b7c      	ldr	r3, [pc, #496]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_OscConfig+0x328>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e23f      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b76      	ldr	r3, [pc, #472]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	4973      	ldr	r1, [pc, #460]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002860:	e040      	b.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d023      	beq.n	80028b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fe6d 	bl	8001554 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fe69 	bl	8001554 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e21d      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002890:	4b65      	ldr	r3, [pc, #404]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b62      	ldr	r3, [pc, #392]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	495f      	ldr	r1, [pc, #380]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e018      	b.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fe49 	bl	8001554 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c6:	f7fe fe45 	bl	8001554 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1f9      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d8:	4b53      	ldr	r3, [pc, #332]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d03c      	beq.n	800296a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01c      	beq.n	8002932 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fe24 	bl	8001554 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe fe20 	bl	8001554 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1d4      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002922:	4b41      	ldr	r3, [pc, #260]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <HAL_RCC_OscConfig+0x3ec>
 8002930:	e01b      	b.n	800296a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002932:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002938:	4a3b      	ldr	r2, [pc, #236]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe fe07 	bl	8001554 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe fe03 	bl	8001554 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e1b7      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800295c:	4b32      	ldr	r3, [pc, #200]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ef      	bne.n	800294a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80a6 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10d      	bne.n	80029a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298c:	4a26      	ldr	r2, [pc, #152]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002992:	6593      	str	r3, [r2, #88]	@ 0x58
 8002994:	4b24      	ldr	r3, [pc, #144]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a0:	2301      	movs	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a4:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <HAL_RCC_OscConfig+0x508>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d118      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <HAL_RCC_OscConfig+0x508>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a2c <HAL_RCC_OscConfig+0x508>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029bc:	f7fe fdca 	bl	8001554 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe fdc6 	bl	8001554 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e17a      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <HAL_RCC_OscConfig+0x508>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_OscConfig+0x4d8>
 80029ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029fa:	e029      	b.n	8002a50 <HAL_RCC_OscConfig+0x52c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d115      	bne.n	8002a30 <HAL_RCC_OscConfig+0x50c>
 8002a04:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0a:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a14:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1a:	4a03      	ldr	r2, [pc, #12]	@ (8002a28 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a24:	e014      	b.n	8002a50 <HAL_RCC_OscConfig+0x52c>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	4b9c      	ldr	r3, [pc, #624]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a36:	4a9b      	ldr	r2, [pc, #620]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a40:	4b98      	ldr	r3, [pc, #608]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	4a97      	ldr	r2, [pc, #604]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fd7c 	bl	8001554 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fd78 	bl	8001554 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e12a      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a76:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ed      	beq.n	8002a60 <HAL_RCC_OscConfig+0x53c>
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe fd65 	bl	8001554 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe fd61 	bl	8001554 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e113      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ed      	bne.n	8002a8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b7a      	ldr	r3, [pc, #488]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	4a79      	ldr	r2, [pc, #484]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80fe 	beq.w	8002cca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	f040 80d0 	bne.w	8002c78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ad8:	4b72      	ldr	r3, [pc, #456]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d130      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	3b01      	subs	r3, #1
 8002af8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d127      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d11f      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b18:	2a07      	cmp	r2, #7
 8002b1a:	bf14      	ite	ne
 8002b1c:	2201      	movne	r2, #1
 8002b1e:	2200      	moveq	r2, #0
 8002b20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d113      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	3b01      	subs	r3, #1
 8002b34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d109      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	3b01      	subs	r3, #1
 8002b48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d06e      	beq.n	8002c2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b0c      	cmp	r3, #12
 8002b52:	d069      	beq.n	8002c28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b60:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0ad      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b70:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a4b      	ldr	r2, [pc, #300]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b7c:	f7fe fcea 	bl	8001554 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fce6 	bl	8001554 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e09a      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b96:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	4b40      	ldr	r3, [pc, #256]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	4b40      	ldr	r3, [pc, #256]	@ (8002ca8 <HAL_RCC_OscConfig+0x784>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bb2:	3a01      	subs	r2, #1
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bbc:	0212      	lsls	r2, r2, #8
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bc4:	0852      	lsrs	r2, r2, #1
 8002bc6:	3a01      	subs	r2, #1
 8002bc8:	0552      	lsls	r2, r2, #21
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bd0:	0852      	lsrs	r2, r2, #1
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	0652      	lsls	r2, r2, #25
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bdc:	0912      	lsrs	r2, r2, #4
 8002bde:	0452      	lsls	r2, r2, #17
 8002be0:	430a      	orrs	r2, r1
 8002be2:	4930      	ldr	r1, [pc, #192]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002be8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c00:	f7fe fca8 	bl	8001554 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fca4 	bl	8001554 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c26:	e050      	b.n	8002cca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e04f      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d148      	bne.n	8002cca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c50:	f7fe fc80 	bl	8001554 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fc7c 	bl	8001554 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e030      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x734>
 8002c76:	e028      	b.n	8002cca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d023      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a08      	ldr	r2, [pc, #32]	@ (8002ca4 <HAL_RCC_OscConfig+0x780>)
 8002c84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fc63 	bl	8001554 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	e00c      	b.n	8002cac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe fc5f 	bl	8001554 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d905      	bls.n	8002cac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cac:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <HAL_RCC_OscConfig+0x7b0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ec      	bne.n	8002c92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_RCC_OscConfig+0x7b0>)
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	4905      	ldr	r1, [pc, #20]	@ (8002cd4 <HAL_RCC_OscConfig+0x7b0>)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_RCC_OscConfig+0x7b4>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60cb      	str	r3, [r1, #12]
 8002cc4:	e001      	b.n	8002cca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	feeefffc 	.word	0xfeeefffc

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0e7      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b75      	ldr	r3, [pc, #468]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b72      	ldr	r3, [pc, #456]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 0207 	bic.w	r2, r3, #7
 8002d06:	4970      	ldr	r1, [pc, #448]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0cf      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d908      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b63      	ldr	r3, [pc, #396]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4960      	ldr	r1, [pc, #384]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d04c      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	4b5a      	ldr	r3, [pc, #360]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d121      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0a6      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	4b54      	ldr	r3, [pc, #336]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d115      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e09a      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d92:	4b4e      	ldr	r3, [pc, #312]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e08e      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e086      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b46      	ldr	r3, [pc, #280]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4943      	ldr	r1, [pc, #268]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fbc6 	bl	8001554 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fbc2 	bl	8001554 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e06e      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b31      	ldr	r3, [pc, #196]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d208      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b2e      	ldr	r3, [pc, #184]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	492b      	ldr	r1, [pc, #172]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e22:	4b29      	ldr	r3, [pc, #164]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d210      	bcs.n	8002e52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e30:	4b25      	ldr	r3, [pc, #148]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 0207 	bic.w	r2, r3, #7
 8002e38:	4923      	ldr	r1, [pc, #140]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e40:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e036      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4918      	ldr	r1, [pc, #96]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4910      	ldr	r1, [pc, #64]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e90:	f000 f824 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	490b      	ldr	r1, [pc, #44]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	4a09      	ldr	r2, [pc, #36]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eb0:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1fc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe fafd 	bl	80014b4 <HAL_InitTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08007f28 	.word	0x08007f28
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000004 	.word	0x20000004

08002edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eea:	4b3e      	ldr	r3, [pc, #248]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x34>
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d121      	bne.n	8002f4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d11e      	bne.n	8002f4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f10:	4b34      	ldr	r3, [pc, #208]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f1c:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e005      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f38:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f54:	4b25      	ldr	r3, [pc, #148]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x110>)
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	e004      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f60:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d134      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d003      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0xac>
 8002f80:	e005      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f82:	4b1a      	ldr	r3, [pc, #104]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x110>)
 8002f84:	617b      	str	r3, [r7, #20]
      break;
 8002f86:	e005      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f8a:	617b      	str	r3, [r7, #20]
      break;
 8002f8c:	e002      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	617b      	str	r3, [r7, #20]
      break;
 8002f92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f94:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	fb03 f202 	mul.w	r2, r3, r2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	0e5b      	lsrs	r3, r3, #25
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	@ 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	08007f40 	.word	0x08007f40
 8002fec:	00f42400 	.word	0x00f42400
 8002ff0:	007a1200 	.word	0x007a1200

08002ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	@ (8003008 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000

0800300c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003010:	f7ff fff0 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4904      	ldr	r1, [pc, #16]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	08007f38 	.word	0x08007f38

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800303c:	f7ff ffda 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0adb      	lsrs	r3, r3, #11
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4904      	ldr	r1, [pc, #16]	@ (8003060 <HAL_RCC_GetPCLK2Freq+0x28>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	08007f38 	.word	0x08007f38

08003064 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003070:	4b2a      	ldr	r3, [pc, #168]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff f922 	bl	80022c4 <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
 8003082:	e014      	b.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b25      	ldr	r3, [pc, #148]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	4a24      	ldr	r2, [pc, #144]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003090:	4b22      	ldr	r3, [pc, #136]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800309c:	f7ff f912 	bl	80022c4 <HAL_PWREx_GetVoltageRange>
 80030a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b1e      	ldr	r3, [pc, #120]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a6:	4a1d      	ldr	r2, [pc, #116]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030b4:	d10b      	bne.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b80      	cmp	r3, #128	@ 0x80
 80030ba:	d919      	bls.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2ba0      	cmp	r3, #160	@ 0xa0
 80030c0:	d902      	bls.n	80030c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c2:	2302      	movs	r3, #2
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e013      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e010      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b80      	cmp	r3, #128	@ 0x80
 80030d2:	d902      	bls.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030d4:	2303      	movs	r3, #3
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e00a      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b80      	cmp	r3, #128	@ 0x80
 80030de:	d102      	bne.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e0:	2302      	movs	r3, #2
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e004      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b70      	cmp	r3, #112	@ 0x70
 80030ea:	d101      	bne.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ec:	2301      	movs	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 0207 	bic.w	r2, r3, #7
 80030f8:	4909      	ldr	r1, [pc, #36]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003100:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	429a      	cmp	r2, r3
 800310c:	d001      	beq.n	8003112 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	40022000 	.word	0x40022000

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800312c:	2300      	movs	r3, #0
 800312e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003130:	2300      	movs	r3, #0
 8003132:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	d041      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003144:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003148:	d02a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800314a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800314e:	d824      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003150:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003156:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800315a:	d81e      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003164:	d010      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003166:	e018      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003168:	4b86      	ldr	r3, [pc, #536]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a85      	ldr	r2, [pc, #532]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003172:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003174:	e015      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 facb 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003186:	e00c      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3320      	adds	r3, #32
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fbb6 	bl	8003900 <RCCEx_PLLSAI2_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003198:	e003      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	74fb      	strb	r3, [r7, #19]
      break;
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031a8:	4b76      	ldr	r3, [pc, #472]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031b6:	4973      	ldr	r1, [pc, #460]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031be:	e001      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d041      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031d8:	d02a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031de:	d824      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ea:	d81e      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f4:	d010      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031f6:	e018      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031f8:	4b62      	ldr	r3, [pc, #392]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a61      	ldr	r2, [pc, #388]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003202:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003204:	e015      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fa83 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003216:	e00c      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3320      	adds	r3, #32
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fb6e 	bl	8003900 <RCCEx_PLLSAI2_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003228:	e003      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	74fb      	strb	r3, [r7, #19]
      break;
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003238:	4b52      	ldr	r3, [pc, #328]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003246:	494f      	ldr	r1, [pc, #316]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a0 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	4a40      	ldr	r2, [pc, #256]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003286:	6593      	str	r3, [r2, #88]	@ 0x58
 8003288:	4b3e      	ldr	r3, [pc, #248]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003294:	2301      	movs	r3, #1
 8003296:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003298:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a4:	f7fe f956 	bl	8001554 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032aa:	e009      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe f952 	bl	8001554 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d902      	bls.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	74fb      	strb	r3, [r7, #19]
        break;
 80032be:	e005      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032c0:	4b31      	ldr	r3, [pc, #196]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ef      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d15c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01f      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d019      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032f0:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032fc:	4b21      	ldr	r3, [pc, #132]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	4a20      	ldr	r2, [pc, #128]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800330c:	4b1d      	ldr	r3, [pc, #116]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003312:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800331c:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fe f911 	bl	8001554 <HAL_GetTick>
 8003332:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003334:	e00b      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7fe f90d 	bl	8001554 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d902      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	74fb      	strb	r3, [r7, #19]
            break;
 800334c:	e006      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334e:	4b0d      	ldr	r3, [pc, #52]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ec      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003362:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003372:	4904      	ldr	r1, [pc, #16]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800337a:	e009      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	74bb      	strb	r3, [r7, #18]
 8003380:	e006      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003390:	7c7b      	ldrb	r3, [r7, #17]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4b9e      	ldr	r3, [pc, #632]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	4a9d      	ldr	r2, [pc, #628]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ae:	4b98      	ldr	r3, [pc, #608]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b4:	f023 0203 	bic.w	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033bc:	4994      	ldr	r1, [pc, #592]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f023 020c 	bic.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033de:	498c      	ldr	r1, [pc, #560]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f2:	4b87      	ldr	r3, [pc, #540]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	4983      	ldr	r1, [pc, #524]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003414:	4b7e      	ldr	r3, [pc, #504]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	497b      	ldr	r1, [pc, #492]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003436:	4b76      	ldr	r3, [pc, #472]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003444:	4972      	ldr	r1, [pc, #456]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003458:	4b6d      	ldr	r3, [pc, #436]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003466:	496a      	ldr	r1, [pc, #424]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800347a:	4b65      	ldr	r3, [pc, #404]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003488:	4961      	ldr	r1, [pc, #388]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800349c:	4b5c      	ldr	r3, [pc, #368]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034aa:	4959      	ldr	r1, [pc, #356]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034be:	4b54      	ldr	r3, [pc, #336]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034cc:	4950      	ldr	r1, [pc, #320]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ee:	4948      	ldr	r1, [pc, #288]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003502:	4b43      	ldr	r3, [pc, #268]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	493f      	ldr	r1, [pc, #252]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d028      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003524:	4b3a      	ldr	r3, [pc, #232]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003532:	4937      	ldr	r1, [pc, #220]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800353e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003542:	d106      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003544:	4b32      	ldr	r3, [pc, #200]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a31      	ldr	r2, [pc, #196]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800354e:	60d3      	str	r3, [r2, #12]
 8003550:	e011      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800355a:	d10c      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f8d8 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003582:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003588:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	491f      	ldr	r1, [pc, #124]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035a0:	d106      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ac:	60d3      	str	r3, [r2, #12]
 80035ae:	e011      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f8a9 	bl	8003718 <RCCEx_PLLSAI1_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d02b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ee:	4908      	ldr	r1, [pc, #32]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035fe:	d109      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a02      	ldr	r2, [pc, #8]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800360a:	60d3      	str	r3, [r2, #12]
 800360c:	e014      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800361c:	d10c      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f877 	bl	8003718 <RCCEx_PLLSAI1_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d02f      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003644:	4b2b      	ldr	r3, [pc, #172]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003652:	4928      	ldr	r1, [pc, #160]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800365e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003662:	d10d      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	2102      	movs	r1, #2
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f854 	bl	8003718 <RCCEx_PLLSAI1_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d014      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	74bb      	strb	r3, [r7, #18]
 800367e:	e011      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3320      	adds	r3, #32
 800368e:	2102      	movs	r1, #2
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f935 	bl	8003900 <RCCEx_PLLSAI2_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036b0:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036be:	490d      	ldr	r1, [pc, #52]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036d2:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036e2:	4904      	ldr	r1, [pc, #16]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000

080036f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a04      	ldr	r2, [pc, #16]	@ (8003714 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003702:	f043 0304 	orr.w	r3, r3, #4
 8003706:	6013      	str	r3, [r2, #0]
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000

08003718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003726:	4b75      	ldr	r3, [pc, #468]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d018      	beq.n	8003764 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003732:	4b72      	ldr	r3, [pc, #456]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0203 	and.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d10d      	bne.n	800375e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
       ||
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800374a:	4b6c      	ldr	r3, [pc, #432]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
       ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d047      	beq.n	80037ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
 8003762:	e044      	b.n	80037ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d018      	beq.n	800379e <RCCEx_PLLSAI1_Config+0x86>
 800376c:	2b03      	cmp	r3, #3
 800376e:	d825      	bhi.n	80037bc <RCCEx_PLLSAI1_Config+0xa4>
 8003770:	2b01      	cmp	r3, #1
 8003772:	d002      	beq.n	800377a <RCCEx_PLLSAI1_Config+0x62>
 8003774:	2b02      	cmp	r3, #2
 8003776:	d009      	beq.n	800378c <RCCEx_PLLSAI1_Config+0x74>
 8003778:	e020      	b.n	80037bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800377a:	4b60      	ldr	r3, [pc, #384]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11d      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378a:	e01a      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800378c:	4b5b      	ldr	r3, [pc, #364]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d116      	bne.n	80037c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379c:	e013      	b.n	80037c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800379e:	4b57      	ldr	r3, [pc, #348]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037aa:	4b54      	ldr	r3, [pc, #336]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ba:	e006      	b.n	80037ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e004      	b.n	80037cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037d2:	4b4a      	ldr	r3, [pc, #296]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	430b      	orrs	r3, r1
 80037e8:	4944      	ldr	r1, [pc, #272]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d17d      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a40      	ldr	r2, [pc, #256]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fd fea8 	bl	8001554 <HAL_GetTick>
 8003804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003806:	e009      	b.n	800381c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003808:	f7fd fea4 	bl	8001554 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d902      	bls.n	800381c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	73fb      	strb	r3, [r7, #15]
        break;
 800381a:	e005      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800381c:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ef      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d160      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d111      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003834:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800383c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	0211      	lsls	r1, r2, #8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	0912      	lsrs	r2, r2, #4
 800384c:	0452      	lsls	r2, r2, #17
 800384e:	430a      	orrs	r2, r1
 8003850:	492a      	ldr	r1, [pc, #168]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	610b      	str	r3, [r1, #16]
 8003856:	e027      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d112      	bne.n	8003884 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800385e:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003866:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6892      	ldr	r2, [r2, #8]
 800386e:	0211      	lsls	r1, r2, #8
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6912      	ldr	r2, [r2, #16]
 8003874:	0852      	lsrs	r2, r2, #1
 8003876:	3a01      	subs	r2, #1
 8003878:	0552      	lsls	r2, r2, #21
 800387a:	430a      	orrs	r2, r1
 800387c:	491f      	ldr	r1, [pc, #124]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	610b      	str	r3, [r1, #16]
 8003882:	e011      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003884:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800388c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6892      	ldr	r2, [r2, #8]
 8003894:	0211      	lsls	r1, r2, #8
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6952      	ldr	r2, [r2, #20]
 800389a:	0852      	lsrs	r2, r2, #1
 800389c:	3a01      	subs	r2, #1
 800389e:	0652      	lsls	r2, r2, #25
 80038a0:	430a      	orrs	r2, r1
 80038a2:	4916      	ldr	r1, [pc, #88]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038a8:	4b14      	ldr	r3, [pc, #80]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fd fe4e 	bl	8001554 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ba:	e009      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038bc:	f7fd fe4a 	bl	8001554 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d902      	bls.n	80038d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	73fb      	strb	r3, [r7, #15]
          break;
 80038ce:	e005      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ef      	beq.n	80038bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	4904      	ldr	r1, [pc, #16]	@ (80038fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800390e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d018      	beq.n	800394c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800391a:	4b67      	ldr	r3, [pc, #412]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d10d      	bne.n	8003946 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
       ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003932:	4b61      	ldr	r3, [pc, #388]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
       ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d047      	beq.n	80039d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	e044      	b.n	80039d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d018      	beq.n	8003986 <RCCEx_PLLSAI2_Config+0x86>
 8003954:	2b03      	cmp	r3, #3
 8003956:	d825      	bhi.n	80039a4 <RCCEx_PLLSAI2_Config+0xa4>
 8003958:	2b01      	cmp	r3, #1
 800395a:	d002      	beq.n	8003962 <RCCEx_PLLSAI2_Config+0x62>
 800395c:	2b02      	cmp	r3, #2
 800395e:	d009      	beq.n	8003974 <RCCEx_PLLSAI2_Config+0x74>
 8003960:	e020      	b.n	80039a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003962:	4b55      	ldr	r3, [pc, #340]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11d      	bne.n	80039aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003972:	e01a      	b.n	80039aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003974:	4b50      	ldr	r3, [pc, #320]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d116      	bne.n	80039ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e013      	b.n	80039ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003986:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003992:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039a2:	e006      	b.n	80039b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      break;
 80039a8:	e004      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10d      	bne.n	80039d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ba:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	430b      	orrs	r3, r1
 80039d0:	4939      	ldr	r1, [pc, #228]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d167      	bne.n	8003aac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a35      	ldr	r2, [pc, #212]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fd fdb4 	bl	8001554 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039f0:	f7fd fdb0 	bl	8001554 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
        break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a04:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ef      	bne.n	80039f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d14a      	bne.n	8003aac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d111      	bne.n	8003a40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a1c:	4b26      	ldr	r3, [pc, #152]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6892      	ldr	r2, [r2, #8]
 8003a2c:	0211      	lsls	r1, r2, #8
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68d2      	ldr	r2, [r2, #12]
 8003a32:	0912      	lsrs	r2, r2, #4
 8003a34:	0452      	lsls	r2, r2, #17
 8003a36:	430a      	orrs	r2, r1
 8003a38:	491f      	ldr	r1, [pc, #124]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	614b      	str	r3, [r1, #20]
 8003a3e:	e011      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a40:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6892      	ldr	r2, [r2, #8]
 8003a50:	0211      	lsls	r1, r2, #8
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6912      	ldr	r2, [r2, #16]
 8003a56:	0852      	lsrs	r2, r2, #1
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	0652      	lsls	r2, r2, #25
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	4916      	ldr	r1, [pc, #88]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a64:	4b14      	ldr	r3, [pc, #80]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fd70 	bl	8001554 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a76:	e009      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a78:	f7fd fd6c 	bl	8001554 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d902      	bls.n	8003a8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	73fb      	strb	r3, [r7, #15]
          break;
 8003a8a:	e005      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ef      	beq.n	8003a78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4904      	ldr	r1, [pc, #16]	@ (8003ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000

08003abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e095      	b.n	8003bfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ade:	d009      	beq.n	8003af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	61da      	str	r2, [r3, #28]
 8003ae6:	e005      	b.n	8003af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd faa6 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b34:	d902      	bls.n	8003b3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e002      	b.n	8003b42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b4a:	d007      	beq.n	8003b5c <HAL_SPI_Init+0xa0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b54:	d002      	beq.n	8003b5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	f003 0204 	and.w	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bd8:	ea42 0103 	orr.w	r1, r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e040      	b.n	8003c96 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fd fa5f 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2224      	movs	r2, #36	@ 0x24
 8003c2e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fae1 	bl	8004210 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f826 	bl	8003ca0 <UART_SetConfig>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e01b      	b.n	8003c96 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fb60 	bl	8004354 <UART_CheckIdleState>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca4:	b08a      	sub	sp, #40	@ 0x28
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4ba4      	ldr	r3, [pc, #656]	@ (8003f60 <UART_SetConfig+0x2c0>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a99      	ldr	r2, [pc, #612]	@ (8003f64 <UART_SetConfig+0x2c4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a90      	ldr	r2, [pc, #576]	@ (8003f68 <UART_SetConfig+0x2c8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d126      	bne.n	8003d78 <UART_SetConfig+0xd8>
 8003d2a:	4b90      	ldr	r3, [pc, #576]	@ (8003f6c <UART_SetConfig+0x2cc>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d81b      	bhi.n	8003d70 <UART_SetConfig+0xd0>
 8003d38:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <UART_SetConfig+0xa0>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d61 	.word	0x08003d61
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d69 	.word	0x08003d69
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d56:	e116      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e112      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e10e      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e10a      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e106      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a7c      	ldr	r2, [pc, #496]	@ (8003f70 <UART_SetConfig+0x2d0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d138      	bne.n	8003df4 <UART_SetConfig+0x154>
 8003d82:	4b7a      	ldr	r3, [pc, #488]	@ (8003f6c <UART_SetConfig+0x2cc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d82d      	bhi.n	8003dec <UART_SetConfig+0x14c>
 8003d90:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <UART_SetConfig+0xf8>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dcd 	.word	0x08003dcd
 8003d9c:	08003ded 	.word	0x08003ded
 8003da0:	08003ded 	.word	0x08003ded
 8003da4:	08003ded 	.word	0x08003ded
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003ded 	.word	0x08003ded
 8003db0:	08003ded 	.word	0x08003ded
 8003db4:	08003ded 	.word	0x08003ded
 8003db8:	08003dd5 	.word	0x08003dd5
 8003dbc:	08003ded 	.word	0x08003ded
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003ded 	.word	0x08003ded
 8003dc8:	08003de5 	.word	0x08003de5
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd2:	e0d8      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dda:	e0d4      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de2:	e0d0      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003de4:	2308      	movs	r3, #8
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dea:	e0cc      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003dec:	2310      	movs	r3, #16
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df2:	e0c8      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5e      	ldr	r2, [pc, #376]	@ (8003f74 <UART_SetConfig+0x2d4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d125      	bne.n	8003e4a <UART_SetConfig+0x1aa>
 8003dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8003f6c <UART_SetConfig+0x2cc>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e08:	2b30      	cmp	r3, #48	@ 0x30
 8003e0a:	d016      	beq.n	8003e3a <UART_SetConfig+0x19a>
 8003e0c:	2b30      	cmp	r3, #48	@ 0x30
 8003e0e:	d818      	bhi.n	8003e42 <UART_SetConfig+0x1a2>
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d00a      	beq.n	8003e2a <UART_SetConfig+0x18a>
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d814      	bhi.n	8003e42 <UART_SetConfig+0x1a2>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <UART_SetConfig+0x182>
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d008      	beq.n	8003e32 <UART_SetConfig+0x192>
 8003e20:	e00f      	b.n	8003e42 <UART_SetConfig+0x1a2>
 8003e22:	2300      	movs	r3, #0
 8003e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e28:	e0ad      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e30:	e0a9      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e32:	2304      	movs	r3, #4
 8003e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e38:	e0a5      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e40:	e0a1      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e42:	2310      	movs	r3, #16
 8003e44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e48:	e09d      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f78 <UART_SetConfig+0x2d8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d125      	bne.n	8003ea0 <UART_SetConfig+0x200>
 8003e54:	4b45      	ldr	r3, [pc, #276]	@ (8003f6c <UART_SetConfig+0x2cc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e60:	d016      	beq.n	8003e90 <UART_SetConfig+0x1f0>
 8003e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e64:	d818      	bhi.n	8003e98 <UART_SetConfig+0x1f8>
 8003e66:	2b80      	cmp	r3, #128	@ 0x80
 8003e68:	d00a      	beq.n	8003e80 <UART_SetConfig+0x1e0>
 8003e6a:	2b80      	cmp	r3, #128	@ 0x80
 8003e6c:	d814      	bhi.n	8003e98 <UART_SetConfig+0x1f8>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <UART_SetConfig+0x1d8>
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d008      	beq.n	8003e88 <UART_SetConfig+0x1e8>
 8003e76:	e00f      	b.n	8003e98 <UART_SetConfig+0x1f8>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e082      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e80:	2302      	movs	r3, #2
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e07e      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e07a      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e90:	2308      	movs	r3, #8
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e96:	e076      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9e:	e072      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a35      	ldr	r2, [pc, #212]	@ (8003f7c <UART_SetConfig+0x2dc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d12a      	bne.n	8003f00 <UART_SetConfig+0x260>
 8003eaa:	4b30      	ldr	r3, [pc, #192]	@ (8003f6c <UART_SetConfig+0x2cc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb8:	d01a      	beq.n	8003ef0 <UART_SetConfig+0x250>
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ebe:	d81b      	bhi.n	8003ef8 <UART_SetConfig+0x258>
 8003ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec4:	d00c      	beq.n	8003ee0 <UART_SetConfig+0x240>
 8003ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eca:	d815      	bhi.n	8003ef8 <UART_SetConfig+0x258>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <UART_SetConfig+0x238>
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed4:	d008      	beq.n	8003ee8 <UART_SetConfig+0x248>
 8003ed6:	e00f      	b.n	8003ef8 <UART_SetConfig+0x258>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ede:	e052      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee6:	e04e      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eee:	e04a      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef6:	e046      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efe:	e042      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a17      	ldr	r2, [pc, #92]	@ (8003f64 <UART_SetConfig+0x2c4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d13a      	bne.n	8003f80 <UART_SetConfig+0x2e0>
 8003f0a:	4b18      	ldr	r3, [pc, #96]	@ (8003f6c <UART_SetConfig+0x2cc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f18:	d01a      	beq.n	8003f50 <UART_SetConfig+0x2b0>
 8003f1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f1e:	d81b      	bhi.n	8003f58 <UART_SetConfig+0x2b8>
 8003f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f24:	d00c      	beq.n	8003f40 <UART_SetConfig+0x2a0>
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2a:	d815      	bhi.n	8003f58 <UART_SetConfig+0x2b8>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <UART_SetConfig+0x298>
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f34:	d008      	beq.n	8003f48 <UART_SetConfig+0x2a8>
 8003f36:	e00f      	b.n	8003f58 <UART_SetConfig+0x2b8>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3e:	e022      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003f40:	2302      	movs	r3, #2
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f46:	e01e      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4e:	e01a      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003f50:	2308      	movs	r3, #8
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f56:	e016      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5e:	e012      	b.n	8003f86 <UART_SetConfig+0x2e6>
 8003f60:	efff69f3 	.word	0xefff69f3
 8003f64:	40008000 	.word	0x40008000
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40004400 	.word	0x40004400
 8003f74:	40004800 	.word	0x40004800
 8003f78:	40004c00 	.word	0x40004c00
 8003f7c:	40005000 	.word	0x40005000
 8003f80:	2310      	movs	r3, #16
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a9f      	ldr	r2, [pc, #636]	@ (8004208 <UART_SetConfig+0x568>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d17a      	bne.n	8004086 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d824      	bhi.n	8003fe2 <UART_SetConfig+0x342>
 8003f98:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <UART_SetConfig+0x300>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fd3 	.word	0x08003fd3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fe3 	.word	0x08003fe3
 8003fbc:	08003fe3 	.word	0x08003fe3
 8003fc0:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7ff f822 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 8003fc8:	61f8      	str	r0, [r7, #28]
        break;
 8003fca:	e010      	b.n	8003fee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800420c <UART_SetConfig+0x56c>)
 8003fce:	61fb      	str	r3, [r7, #28]
        break;
 8003fd0:	e00d      	b.n	8003fee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe ff83 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8003fd6:	61f8      	str	r0, [r7, #28]
        break;
 8003fd8:	e009      	b.n	8003fee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fde:	61fb      	str	r3, [r7, #28]
        break;
 8003fe0:	e005      	b.n	8003fee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80fb 	beq.w	80041ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	429a      	cmp	r2, r3
 8004004:	d305      	bcc.n	8004012 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	429a      	cmp	r2, r3
 8004010:	d903      	bls.n	800401a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004018:	e0e8      	b.n	80041ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	2200      	movs	r2, #0
 800401e:	461c      	mov	r4, r3
 8004020:	4615      	mov	r5, r2
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	022b      	lsls	r3, r5, #8
 800402c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004030:	0222      	lsls	r2, r4, #8
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6849      	ldr	r1, [r1, #4]
 8004036:	0849      	lsrs	r1, r1, #1
 8004038:	2000      	movs	r0, #0
 800403a:	4688      	mov	r8, r1
 800403c:	4681      	mov	r9, r0
 800403e:	eb12 0a08 	adds.w	sl, r2, r8
 8004042:	eb43 0b09 	adc.w	fp, r3, r9
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004054:	4650      	mov	r0, sl
 8004056:	4659      	mov	r1, fp
 8004058:	f7fc f8ba 	bl	80001d0 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4613      	mov	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800406a:	d308      	bcc.n	800407e <UART_SetConfig+0x3de>
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004072:	d204      	bcs.n	800407e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	60da      	str	r2, [r3, #12]
 800407c:	e0b6      	b.n	80041ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004084:	e0b2      	b.n	80041ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800408e:	d15e      	bne.n	800414e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004090:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004094:	2b08      	cmp	r3, #8
 8004096:	d828      	bhi.n	80040ea <UART_SetConfig+0x44a>
 8004098:	a201      	add	r2, pc, #4	@ (adr r2, 80040a0 <UART_SetConfig+0x400>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040cd 	.word	0x080040cd
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	080040eb 	.word	0x080040eb
 80040b0:	080040db 	.word	0x080040db
 80040b4:	080040eb 	.word	0x080040eb
 80040b8:	080040eb 	.word	0x080040eb
 80040bc:	080040eb 	.word	0x080040eb
 80040c0:	080040e3 	.word	0x080040e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7fe ffa2 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 80040c8:	61f8      	str	r0, [r7, #28]
        break;
 80040ca:	e014      	b.n	80040f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7fe ffb4 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 80040d0:	61f8      	str	r0, [r7, #28]
        break;
 80040d2:	e010      	b.n	80040f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d4:	4b4d      	ldr	r3, [pc, #308]	@ (800420c <UART_SetConfig+0x56c>)
 80040d6:	61fb      	str	r3, [r7, #28]
        break;
 80040d8:	e00d      	b.n	80040f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040da:	f7fe feff 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 80040de:	61f8      	str	r0, [r7, #28]
        break;
 80040e0:	e009      	b.n	80040f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040e6:	61fb      	str	r3, [r7, #28]
        break;
 80040e8:	e005      	b.n	80040f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d077      	beq.n	80041ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	005a      	lsls	r2, r3, #1
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	441a      	add	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b0f      	cmp	r3, #15
 8004116:	d916      	bls.n	8004146 <UART_SetConfig+0x4a6>
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800411e:	d212      	bcs.n	8004146 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f023 030f 	bic.w	r3, r3, #15
 8004128:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	b29b      	uxth	r3, r3
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	b29a      	uxth	r2, r3
 8004136:	8afb      	ldrh	r3, [r7, #22]
 8004138:	4313      	orrs	r3, r2
 800413a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	8afa      	ldrh	r2, [r7, #22]
 8004142:	60da      	str	r2, [r3, #12]
 8004144:	e052      	b.n	80041ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800414c:	e04e      	b.n	80041ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800414e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004152:	2b08      	cmp	r3, #8
 8004154:	d827      	bhi.n	80041a6 <UART_SetConfig+0x506>
 8004156:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <UART_SetConfig+0x4bc>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	080041a7 	.word	0x080041a7
 800416c:	08004197 	.word	0x08004197
 8004170:	080041a7 	.word	0x080041a7
 8004174:	080041a7 	.word	0x080041a7
 8004178:	080041a7 	.word	0x080041a7
 800417c:	0800419f 	.word	0x0800419f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7fe ff44 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 8004184:	61f8      	str	r0, [r7, #28]
        break;
 8004186:	e014      	b.n	80041b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7fe ff56 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 800418c:	61f8      	str	r0, [r7, #28]
        break;
 800418e:	e010      	b.n	80041b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <UART_SetConfig+0x56c>)
 8004192:	61fb      	str	r3, [r7, #28]
        break;
 8004194:	e00d      	b.n	80041b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe fea1 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 800419a:	61f8      	str	r0, [r7, #28]
        break;
 800419c:	e009      	b.n	80041b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a2:	61fb      	str	r3, [r7, #28]
        break;
 80041a4:	e005      	b.n	80041b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041b0:	bf00      	nop
    }

    if (pclk != 0U)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d019      	beq.n	80041ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	085a      	lsrs	r2, r3, #1
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	441a      	add	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b0f      	cmp	r3, #15
 80041d0:	d909      	bls.n	80041e6 <UART_SetConfig+0x546>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d8:	d205      	bcs.n	80041e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60da      	str	r2, [r3, #12]
 80041e4:	e002      	b.n	80041ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3728      	adds	r7, #40	@ 0x28
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004206:	bf00      	nop
 8004208:	40008000 	.word	0x40008000
 800420c:	00f42400 	.word	0x00f42400

08004210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01a      	beq.n	8004326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800430e:	d10a      	bne.n	8004326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b098      	sub	sp, #96	@ 0x60
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004364:	f7fd f8f6 	bl	8001554 <HAL_GetTick>
 8004368:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d12e      	bne.n	80043d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004378:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004380:	2200      	movs	r2, #0
 8004382:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f88c 	bl	80044a4 <UART_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d021      	beq.n	80043d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e6      	bne.n	8004392 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e062      	b.n	800449c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d149      	bne.n	8004478 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ec:	2200      	movs	r2, #0
 80043ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f856 	bl	80044a4 <UART_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03c      	beq.n	8004478 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	623b      	str	r3, [r7, #32]
   return(result);
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800441c:	633b      	str	r3, [r7, #48]	@ 0x30
 800441e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800442a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e6      	bne.n	80043fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3308      	adds	r3, #8
 8004436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004450:	61fa      	str	r2, [r7, #28]
 8004452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	617b      	str	r3, [r7, #20]
   return(result);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e011      	b.n	800449c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3758      	adds	r7, #88	@ 0x58
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b4:	e04f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d04b      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fd f849 	bl	8001554 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e04e      	b.n	8004576 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d037      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b80      	cmp	r3, #128	@ 0x80
 80044ea:	d034      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d031      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d110      	bne.n	8004522 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2208      	movs	r2, #8
 8004506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f838 	bl	800457e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2208      	movs	r2, #8
 8004512:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e029      	b.n	8004576 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800452c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004530:	d111      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800453a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f81e 	bl	800457e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e00f      	b.n	8004576 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	429a      	cmp	r2, r3
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	429a      	cmp	r2, r3
 8004572:	d0a0      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457e:	b480      	push	{r7}
 8004580:	b095      	sub	sp, #84	@ 0x54
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800459a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80045a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d118      	bne.n	8004626 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	60bb      	str	r3, [r7, #8]
   return(result);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 0310 	bic.w	r3, r3, #16
 8004608:	647b      	str	r3, [r7, #68]	@ 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	613b      	str	r3, [r7, #16]
   return(result);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e6      	bne.n	80045f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800463a:	bf00      	nop
 800463c:	3754      	adds	r7, #84	@ 0x54
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004646:	b084      	sub	sp, #16
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	f107 001c 	add.w	r0, r7, #28
 8004654:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa69 	bl	8004b3c <USB_CoreReset>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800466e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	639a      	str	r2, [r3, #56]	@ 0x38
 8004682:	e005      	b.n	8004690 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800469c:	b004      	add	sp, #16
 800469e:	4770      	bx	lr

080046a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f023 0201 	bic.w	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d115      	bne.n	8004710 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80046f0:	200a      	movs	r0, #10
 80046f2:	f7fc ff3b 	bl	800156c <HAL_Delay>
      ms += 10U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	330a      	adds	r3, #10
 80046fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fa0f 	bl	8004b20 <USB_GetMode>
 8004702:	4603      	mov	r3, r0
 8004704:	2b01      	cmp	r3, #1
 8004706:	d01e      	beq.n	8004746 <USB_SetCurrentMode+0x84>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2bc7      	cmp	r3, #199	@ 0xc7
 800470c:	d9f0      	bls.n	80046f0 <USB_SetCurrentMode+0x2e>
 800470e:	e01a      	b.n	8004746 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d115      	bne.n	8004742 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004722:	200a      	movs	r0, #10
 8004724:	f7fc ff22 	bl	800156c <HAL_Delay>
      ms += 10U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	330a      	adds	r3, #10
 800472c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9f6 	bl	8004b20 <USB_GetMode>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <USB_SetCurrentMode+0x84>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2bc7      	cmp	r3, #199	@ 0xc7
 800473e:	d9f0      	bls.n	8004722 <USB_SetCurrentMode+0x60>
 8004740:	e001      	b.n	8004746 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e005      	b.n	8004752 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2bc8      	cmp	r3, #200	@ 0xc8
 800474a:	d101      	bne.n	8004750 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800475c:	b084      	sub	sp, #16
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800476a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	e009      	b.n	8004790 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	3340      	adds	r3, #64	@ 0x40
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	2200      	movs	r2, #0
 8004788:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	3301      	adds	r3, #1
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b0e      	cmp	r3, #14
 8004794:	d9f2      	bls.n	800477c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004796:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800479a:	2b00      	cmp	r3, #0
 800479c:	d11c      	bne.n	80047d8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e005      	b.n	80047e4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047ea:	461a      	mov	r2, r3
 80047ec:	2300      	movs	r3, #0
 80047ee:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047f0:	2103      	movs	r1, #3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f95a 	bl	8004aac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047f8:	2110      	movs	r1, #16
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8f6 	bl	80049ec <USB_FlushTxFifo>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f920 	bl	8004a50 <USB_FlushRxFifo>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004820:	461a      	mov	r2, r3
 8004822:	2300      	movs	r3, #0
 8004824:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482c:	461a      	mov	r2, r3
 800482e:	2300      	movs	r3, #0
 8004830:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004838:	461a      	mov	r2, r3
 800483a:	2300      	movs	r3, #0
 800483c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	e043      	b.n	80048cc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800485a:	d118      	bne.n	800488e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800486e:	461a      	mov	r2, r3
 8004870:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e013      	b.n	80048a0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004884:	461a      	mov	r2, r3
 8004886:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	e008      	b.n	80048a0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800489a:	461a      	mov	r2, r3
 800489c:	2300      	movs	r3, #0
 800489e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ac:	461a      	mov	r2, r3
 80048ae:	2300      	movs	r3, #0
 80048b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048be:	461a      	mov	r2, r3
 80048c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3301      	adds	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80048d0:	461a      	mov	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d3b5      	bcc.n	8004844 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	e043      	b.n	8004966 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048f4:	d118      	bne.n	8004928 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004908:	461a      	mov	r2, r3
 800490a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e013      	b.n	800493a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e008      	b.n	800493a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004934:	461a      	mov	r2, r3
 8004936:	2300      	movs	r3, #0
 8004938:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004946:	461a      	mov	r2, r3
 8004948:	2300      	movs	r3, #0
 800494a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004958:	461a      	mov	r2, r3
 800495a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800495e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	3301      	adds	r3, #1
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800496a:	461a      	mov	r2, r3
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4293      	cmp	r3, r2
 8004970:	d3b5      	bcc.n	80048de <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004984:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004992:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f043 0210 	orr.w	r2, r3, #16
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <USB_DevInit+0x28c>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f043 0208 	orr.w	r2, r3, #8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d107      	bne.n	80049d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049d0:	f043 0304 	orr.w	r3, r3, #4
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049e4:	b004      	add	sp, #16
 80049e6:	4770      	bx	lr
 80049e8:	803c3800 	.word	0x803c3800

080049ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a06:	d901      	bls.n	8004a0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e01b      	b.n	8004a44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	daf2      	bge.n	80049fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	019b      	lsls	r3, r3, #6
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a30:	d901      	bls.n	8004a36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e006      	b.n	8004a44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d0f0      	beq.n	8004a24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a68:	d901      	bls.n	8004a6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e018      	b.n	8004aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	daf2      	bge.n	8004a5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2210      	movs	r2, #16
 8004a7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a8c:	d901      	bls.n	8004a92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e006      	b.n	8004aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d0f0      	beq.n	8004a80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004af8:	f023 0303 	bic.w	r3, r3, #3
 8004afc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b0c:	f043 0302 	orr.w	r3, r3, #2
 8004b10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b54:	d901      	bls.n	8004b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e01b      	b.n	8004b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	daf2      	bge.n	8004b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b7e:	d901      	bls.n	8004b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e006      	b.n	8004b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d0f0      	beq.n	8004b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <__NVIC_SetPriority>:
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	db0a      	blt.n	8004bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	490c      	ldr	r1, [pc, #48]	@ (8004bec <__NVIC_SetPriority+0x4c>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	0112      	lsls	r2, r2, #4
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bc8:	e00a      	b.n	8004be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	4908      	ldr	r1, [pc, #32]	@ (8004bf0 <__NVIC_SetPriority+0x50>)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	3b04      	subs	r3, #4
 8004bd8:	0112      	lsls	r2, r2, #4
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	440b      	add	r3, r1
 8004bde:	761a      	strb	r2, [r3, #24]
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	e000e100 	.word	0xe000e100
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	f06f 0004 	mvn.w	r0, #4
 8004bfe:	f7ff ffcf 	bl	8004ba0 <__NVIC_SetPriority>
#endif
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0e:	f3ef 8305 	mrs	r3, IPSR
 8004c12:	603b      	str	r3, [r7, #0]
  return(result);
 8004c14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c1a:	f06f 0305 	mvn.w	r3, #5
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	e00c      	b.n	8004c3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c22:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <osKernelInitialize+0x44>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c2a:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <osKernelInitialize+0x44>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	e002      	b.n	8004c3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c3c:	687b      	ldr	r3, [r7, #4]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	2000079c 	.word	0x2000079c

08004c50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c56:	f3ef 8305 	mrs	r3, IPSR
 8004c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c62:	f06f 0305 	mvn.w	r3, #5
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	e010      	b.n	8004c8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <osKernelStart+0x48>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d109      	bne.n	8004c86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c72:	f7ff ffbf 	bl	8004bf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c76:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <osKernelStart+0x48>)
 8004c78:	2202      	movs	r2, #2
 8004c7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c7c:	f001 ff6a 	bl	8006b54 <vTaskStartScheduler>
      stat = osOK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	e002      	b.n	8004c8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c8c:	687b      	ldr	r3, [r7, #4]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	2000079c 	.word	0x2000079c

08004c9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	@ 0x38
 8004ca0:	af04      	add	r7, sp, #16
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cac:	f3ef 8305 	mrs	r3, IPSR
 8004cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8004cb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d17e      	bne.n	8004db6 <osThreadNew+0x11a>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d07b      	beq.n	8004db6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cc2:	2318      	movs	r3, #24
 8004cc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d045      	beq.n	8004d62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <osThreadNew+0x48>
        name = attr->name;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <osThreadNew+0x6e>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b38      	cmp	r3, #56	@ 0x38
 8004cfc:	d805      	bhi.n	8004d0a <osThreadNew+0x6e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <osThreadNew+0x72>
        return (NULL);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e054      	b.n	8004db8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00e      	beq.n	8004d44 <osThreadNew+0xa8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b5b      	cmp	r3, #91	@ 0x5b
 8004d2c:	d90a      	bls.n	8004d44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <osThreadNew+0xa8>
        mem = 1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e010      	b.n	8004d66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <osThreadNew+0xca>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d108      	bne.n	8004d66 <osThreadNew+0xca>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <osThreadNew+0xca>
          mem = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	e001      	b.n	8004d66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d110      	bne.n	8004d8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d74:	9202      	str	r2, [sp, #8]
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6a3a      	ldr	r2, [r7, #32]
 8004d80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f001 fd0a 	bl	800679c <xTaskCreateStatic>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	e013      	b.n	8004db6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d110      	bne.n	8004db6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f001 fd58 	bl	800685c <xTaskCreate>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d001      	beq.n	8004db6 <osThreadNew+0x11a>
            hTask = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004db6:	693b      	ldr	r3, [r7, #16]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3728      	adds	r7, #40	@ 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc8:	f3ef 8305 	mrs	r3, IPSR
 8004dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <osDelay+0x1c>
    stat = osErrorISR;
 8004dd4:	f06f 0305 	mvn.w	r3, #5
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e007      	b.n	8004dec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <osDelay+0x2c>
      vTaskDelay(ticks);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 fe7e 	bl	8006ae8 <vTaskDelay>
    }
  }

  return (stat);
 8004dec:	68fb      	ldr	r3, [r7, #12]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f002 ffd0 	bl	8007da4 <pvTimerGetTimerID>
 8004e04:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	6852      	ldr	r2, [r2, #4]
 8004e14:	4610      	mov	r0, r2
 8004e16:	4798      	blx	r3
  }
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	@ 0x30
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e34:	f3ef 8305 	mrs	r3, IPSR
 8004e38:	613b      	str	r3, [r7, #16]
  return(result);
 8004e3a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d163      	bne.n	8004f08 <osTimerNew+0xe8>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d060      	beq.n	8004f08 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004e46:	2008      	movs	r0, #8
 8004e48:	f000 f9fa 	bl	8005240 <pvPortMalloc>
 8004e4c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d059      	beq.n	8004f08 <osTimerNew+0xe8>
      callb->func = func;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004e60:	7afb      	ldrb	r3, [r7, #11]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <osTimerNew+0x4c>
        reload = pdFALSE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	e001      	b.n	8004e70 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01c      	beq.n	8004eba <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <osTimerNew+0x6e>
          name = attr->name;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <osTimerNew+0x84>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b2b      	cmp	r3, #43	@ 0x2b
 8004e9c:	d902      	bls.n	8004ea4 <osTimerNew+0x84>
          mem = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e00c      	b.n	8004ebe <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d108      	bne.n	8004ebe <osTimerNew+0x9e>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <osTimerNew+0x9e>
            mem = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e001      	b.n	8004ebe <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d10c      	bne.n	8004ede <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <osTimerNew+0xf4>)
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ed6:	f002 fbd8 	bl	800768a <xTimerCreateStatic>
 8004eda:	6238      	str	r0, [r7, #32]
 8004edc:	e00b      	b.n	8004ef6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d108      	bne.n	8004ef6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <osTimerNew+0xf4>)
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	2101      	movs	r1, #1
 8004eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ef0:	f002 fbaa 	bl	8007648 <xTimerCreate>
 8004ef4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <osTimerNew+0xe8>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <osTimerNew+0xe8>
        vPortFree (callb);
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f000 fa6a 	bl	80053dc <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004f08:	6a3b      	ldr	r3, [r7, #32]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3728      	adds	r7, #40	@ 0x28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	08004df7 	.word	0x08004df7

08004f18 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f26:	f3ef 8305 	mrs	r3, IPSR
 8004f2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <osTimerStart+0x22>
    stat = osErrorISR;
 8004f32:	f06f 0305 	mvn.w	r3, #5
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e017      	b.n	8004f6a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <osTimerStart+0x30>
    stat = osErrorParameter;
 8004f40:	f06f 0303 	mvn.w	r3, #3
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e010      	b.n	8004f6a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	2104      	movs	r1, #4
 8004f52:	6938      	ldr	r0, [r7, #16]
 8004f54:	f002 fc16 	bl	8007784 <xTimerGenericCommand>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d102      	bne.n	8004f64 <osTimerStart+0x4c>
      stat = osOK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e002      	b.n	8004f6a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004f64:	f06f 0302 	mvn.w	r3, #2
 8004f68:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004f6a:	697b      	ldr	r3, [r7, #20]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	@ 0x28
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f84:	f3ef 8305 	mrs	r3, IPSR
 8004f88:	613b      	str	r3, [r7, #16]
  return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d15f      	bne.n	8005050 <osMessageQueueNew+0xdc>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d05c      	beq.n	8005050 <osMessageQueueNew+0xdc>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d059      	beq.n	8005050 <osMessageQueueNew+0xdc>
    mem = -1;
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d029      	beq.n	8004ffc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d012      	beq.n	8004fd6 <osMessageQueueNew+0x62>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b4f      	cmp	r3, #79	@ 0x4f
 8004fb6:	d90e      	bls.n	8004fd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <osMessageQueueNew+0x62>
        mem = 1;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	e014      	b.n	8005000 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d110      	bne.n	8005000 <osMessageQueueNew+0x8c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d108      	bne.n	8005000 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <osMessageQueueNew+0x8c>
          mem = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e001      	b.n	8005000 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10b      	bne.n	800501e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2100      	movs	r1, #0
 8005010:	9100      	str	r1, [sp, #0]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fe73 	bl	8005d00 <xQueueGenericCreateStatic>
 800501a:	61f8      	str	r0, [r7, #28]
 800501c:	e008      	b.n	8005030 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005024:	2200      	movs	r2, #0
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fee6 	bl	8005dfa <xQueueGenericCreate>
 800502e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00c      	beq.n	8005050 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <osMessageQueueNew+0xd0>
        name = attr->name;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e001      	b.n	8005048 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005048:	6979      	ldr	r1, [r7, #20]
 800504a:	69f8      	ldr	r0, [r7, #28]
 800504c:	f001 fb48 	bl	80066e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005050:	69fb      	ldr	r3, [r7, #28]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005074:	f3ef 8305 	mrs	r3, IPSR
 8005078:	617b      	str	r3, [r7, #20]
  return(result);
 800507a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800507c:	2b00      	cmp	r3, #0
 800507e:	d028      	beq.n	80050d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <osMessageQueuePut+0x36>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <osMessageQueuePut+0x36>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005092:	f06f 0303 	mvn.w	r3, #3
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	e038      	b.n	800510c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800509e:	f107 0210 	add.w	r2, r7, #16
 80050a2:	2300      	movs	r3, #0
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	69b8      	ldr	r0, [r7, #24]
 80050a8:	f001 f808 	bl	80060bc <xQueueGenericSendFromISR>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d003      	beq.n	80050ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80050b2:	f06f 0302 	mvn.w	r3, #2
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e028      	b.n	800510c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d025      	beq.n	800510c <osMessageQueuePut+0xb0>
 80050c0:	4b15      	ldr	r3, [pc, #84]	@ (8005118 <osMessageQueuePut+0xbc>)
 80050c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	e01c      	b.n	800510c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <osMessageQueuePut+0x82>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80050de:	f06f 0303 	mvn.w	r3, #3
 80050e2:	61fb      	str	r3, [r7, #28]
 80050e4:	e012      	b.n	800510c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80050e6:	2300      	movs	r3, #0
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	69b8      	ldr	r0, [r7, #24]
 80050ee:	f000 fee3 	bl	8005eb8 <xQueueGenericSend>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d009      	beq.n	800510c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80050fe:	f06f 0301 	mvn.w	r3, #1
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	e002      	b.n	800510c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005106:	f06f 0302 	mvn.w	r3, #2
 800510a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800510c:	69fb      	ldr	r3, [r7, #28]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005132:	f3ef 8305 	mrs	r3, IPSR
 8005136:	617b      	str	r3, [r7, #20]
  return(result);
 8005138:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800513a:	2b00      	cmp	r3, #0
 800513c:	d028      	beq.n	8005190 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <osMessageQueueGet+0x34>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <osMessageQueueGet+0x34>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005150:	f06f 0303 	mvn.w	r3, #3
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e037      	b.n	80051c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800515c:	f107 0310 	add.w	r3, r7, #16
 8005160:	461a      	mov	r2, r3
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	69b8      	ldr	r0, [r7, #24]
 8005166:	f001 f929 	bl	80063bc <xQueueReceiveFromISR>
 800516a:	4603      	mov	r3, r0
 800516c:	2b01      	cmp	r3, #1
 800516e:	d003      	beq.n	8005178 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005170:	f06f 0302 	mvn.w	r3, #2
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	e027      	b.n	80051c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d024      	beq.n	80051c8 <osMessageQueueGet+0xac>
 800517e:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <osMessageQueueGet+0xb8>)
 8005180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	e01b      	b.n	80051c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <osMessageQueueGet+0x80>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d103      	bne.n	80051a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800519c:	f06f 0303 	mvn.w	r3, #3
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	e011      	b.n	80051c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	69b8      	ldr	r0, [r7, #24]
 80051aa:	f001 f825 	bl	80061f8 <xQueueReceive>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d009      	beq.n	80051c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80051ba:	f06f 0301 	mvn.w	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	e002      	b.n	80051c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80051c2:	f06f 0302 	mvn.w	r3, #2
 80051c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051c8:	69fb      	ldr	r3, [r7, #28]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a07      	ldr	r2, [pc, #28]	@ (8005204 <vApplicationGetIdleTaskMemory+0x2c>)
 80051e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4a06      	ldr	r2, [pc, #24]	@ (8005208 <vApplicationGetIdleTaskMemory+0x30>)
 80051ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2280      	movs	r2, #128	@ 0x80
 80051f4:	601a      	str	r2, [r3, #0]
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	200007a0 	.word	0x200007a0
 8005208:	200007fc 	.word	0x200007fc

0800520c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a07      	ldr	r2, [pc, #28]	@ (8005238 <vApplicationGetTimerTaskMemory+0x2c>)
 800521c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4a06      	ldr	r2, [pc, #24]	@ (800523c <vApplicationGetTimerTaskMemory+0x30>)
 8005222:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800522a:	601a      	str	r2, [r3, #0]
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	200009fc 	.word	0x200009fc
 800523c:	20000a58 	.word	0x20000a58

08005240 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	@ 0x28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800524c:	f001 fcea 	bl	8006c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005250:	4b5c      	ldr	r3, [pc, #368]	@ (80053c4 <pvPortMalloc+0x184>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005258:	f000 f924 	bl	80054a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800525c:	4b5a      	ldr	r3, [pc, #360]	@ (80053c8 <pvPortMalloc+0x188>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 8095 	bne.w	8005394 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01e      	beq.n	80052ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005270:	2208      	movs	r2, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	2b00      	cmp	r3, #0
 8005280:	d015      	beq.n	80052ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f023 0307 	bic.w	r3, r3, #7
 8005288:	3308      	adds	r3, #8
 800528a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00b      	beq.n	80052ae <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d06f      	beq.n	8005394 <pvPortMalloc+0x154>
 80052b4:	4b45      	ldr	r3, [pc, #276]	@ (80053cc <pvPortMalloc+0x18c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d86a      	bhi.n	8005394 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052be:	4b44      	ldr	r3, [pc, #272]	@ (80053d0 <pvPortMalloc+0x190>)
 80052c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052c2:	4b43      	ldr	r3, [pc, #268]	@ (80053d0 <pvPortMalloc+0x190>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052c8:	e004      	b.n	80052d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d903      	bls.n	80052e6 <pvPortMalloc+0xa6>
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f1      	bne.n	80052ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052e6:	4b37      	ldr	r3, [pc, #220]	@ (80053c4 <pvPortMalloc+0x184>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d051      	beq.n	8005394 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2208      	movs	r2, #8
 80052f6:	4413      	add	r3, r2
 80052f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	1ad2      	subs	r2, r2, r3
 800530a:	2308      	movs	r3, #8
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	429a      	cmp	r2, r3
 8005310:	d920      	bls.n	8005354 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4413      	add	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <pvPortMalloc+0xfc>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	613b      	str	r3, [r7, #16]
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	1ad2      	subs	r2, r2, r3
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800534e:	69b8      	ldr	r0, [r7, #24]
 8005350:	f000 f90a 	bl	8005568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005354:	4b1d      	ldr	r3, [pc, #116]	@ (80053cc <pvPortMalloc+0x18c>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	4a1b      	ldr	r2, [pc, #108]	@ (80053cc <pvPortMalloc+0x18c>)
 8005360:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005362:	4b1a      	ldr	r3, [pc, #104]	@ (80053cc <pvPortMalloc+0x18c>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b1b      	ldr	r3, [pc, #108]	@ (80053d4 <pvPortMalloc+0x194>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d203      	bcs.n	8005376 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800536e:	4b17      	ldr	r3, [pc, #92]	@ (80053cc <pvPortMalloc+0x18c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a18      	ldr	r2, [pc, #96]	@ (80053d4 <pvPortMalloc+0x194>)
 8005374:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	4b13      	ldr	r3, [pc, #76]	@ (80053c8 <pvPortMalloc+0x188>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	431a      	orrs	r2, r3
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800538a:	4b13      	ldr	r3, [pc, #76]	@ (80053d8 <pvPortMalloc+0x198>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	4a11      	ldr	r2, [pc, #68]	@ (80053d8 <pvPortMalloc+0x198>)
 8005392:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005394:	f001 fc54 	bl	8006c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <pvPortMalloc+0x17a>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60fb      	str	r3, [r7, #12]
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	e7fd      	b.n	80053b6 <pvPortMalloc+0x176>
	return pvReturn;
 80053ba:	69fb      	ldr	r3, [r7, #28]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3728      	adds	r7, #40	@ 0x28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20001a18 	.word	0x20001a18
 80053c8:	20001a2c 	.word	0x20001a2c
 80053cc:	20001a1c 	.word	0x20001a1c
 80053d0:	20001a10 	.word	0x20001a10
 80053d4:	20001a20 	.word	0x20001a20
 80053d8:	20001a24 	.word	0x20001a24

080053dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d04f      	beq.n	800548e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053ee:	2308      	movs	r3, #8
 80053f0:	425b      	negs	r3, r3
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4b25      	ldr	r3, [pc, #148]	@ (8005498 <vPortFree+0xbc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <vPortFree+0x46>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60fb      	str	r3, [r7, #12]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <vPortFree+0x66>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	60bb      	str	r3, [r7, #8]
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	e7fd      	b.n	800543e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4b14      	ldr	r3, [pc, #80]	@ (8005498 <vPortFree+0xbc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11a      	bne.n	800548e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4b0e      	ldr	r3, [pc, #56]	@ (8005498 <vPortFree+0xbc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005468:	f001 fbdc 	bl	8006c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <vPortFree+0xc0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4413      	add	r3, r2
 8005476:	4a09      	ldr	r2, [pc, #36]	@ (800549c <vPortFree+0xc0>)
 8005478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800547a:	6938      	ldr	r0, [r7, #16]
 800547c:	f000 f874 	bl	8005568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005480:	4b07      	ldr	r3, [pc, #28]	@ (80054a0 <vPortFree+0xc4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	4a06      	ldr	r2, [pc, #24]	@ (80054a0 <vPortFree+0xc4>)
 8005488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800548a:	f001 fbd9 	bl	8006c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800548e:	bf00      	nop
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20001a2c 	.word	0x20001a2c
 800549c:	20001a1c 	.word	0x20001a1c
 80054a0:	20001a28 	.word	0x20001a28

080054a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054aa:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80054ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054b0:	4b27      	ldr	r3, [pc, #156]	@ (8005550 <prvHeapInit+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3307      	adds	r3, #7
 80054c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0307 	bic.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005550 <prvHeapInit+0xac>)
 80054d4:	4413      	add	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <prvHeapInit+0xb0>)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005554 <prvHeapInit+0xb0>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	4413      	add	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054f0:	2208      	movs	r2, #8
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0307 	bic.w	r3, r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <prvHeapInit+0xb4>)
 8005504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005506:	4b14      	ldr	r3, [pc, #80]	@ (8005558 <prvHeapInit+0xb4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800550e:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <prvHeapInit+0xb4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005524:	4b0c      	ldr	r3, [pc, #48]	@ (8005558 <prvHeapInit+0xb4>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a0a      	ldr	r2, [pc, #40]	@ (800555c <prvHeapInit+0xb8>)
 8005532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a09      	ldr	r2, [pc, #36]	@ (8005560 <prvHeapInit+0xbc>)
 800553a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800553c:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <prvHeapInit+0xc0>)
 800553e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005542:	601a      	str	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	20000e58 	.word	0x20000e58
 8005554:	20001a10 	.word	0x20001a10
 8005558:	20001a18 	.word	0x20001a18
 800555c:	20001a20 	.word	0x20001a20
 8005560:	20001a1c 	.word	0x20001a1c
 8005564:	20001a2c 	.word	0x20001a2c

08005568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005570:	4b28      	ldr	r3, [pc, #160]	@ (8005614 <prvInsertBlockIntoFreeList+0xac>)
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e002      	b.n	800557c <prvInsertBlockIntoFreeList+0x14>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d8f7      	bhi.n	8005576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	d108      	bne.n	80055aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	441a      	add	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d118      	bne.n	80055f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4b15      	ldr	r3, [pc, #84]	@ (8005618 <prvInsertBlockIntoFreeList+0xb0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d00d      	beq.n	80055e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	441a      	add	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e008      	b.n	80055f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005618 <prvInsertBlockIntoFreeList+0xb0>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e003      	b.n	80055f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d002      	beq.n	8005606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20001a10 	.word	0x20001a10
 8005618:	20001a18 	.word	0x20001a18

0800561c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f103 0208 	add.w	r2, r3, #8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f04f 32ff 	mov.w	r2, #4294967295
 8005634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f103 0208 	add.w	r2, r3, #8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f103 0208 	add.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d103      	bne.n	80056de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e00c      	b.n	80056f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3308      	adds	r3, #8
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e002      	b.n	80056ec <vListInsert+0x2e>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d2f6      	bcs.n	80056e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6892      	ldr	r2, [r2, #8]
 8005746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6852      	ldr	r2, [r2, #4]
 8005750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d103      	bne.n	8005764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	1e5a      	subs	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3b04      	subs	r3, #4
 8005794:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800579c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057b4:	4a0c      	ldr	r2, [pc, #48]	@ (80057e8 <pxPortInitialiseStack+0x64>)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b14      	subs	r3, #20
 80057be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b04      	subs	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f06f 0202 	mvn.w	r2, #2
 80057d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b20      	subs	r3, #32
 80057d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	080057ed 	.word	0x080057ed

080057ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057f6:	4b13      	ldr	r3, [pc, #76]	@ (8005844 <prvTaskExitError+0x58>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d00b      	beq.n	8005818 <prvTaskExitError+0x2c>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60fb      	str	r3, [r7, #12]
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <prvTaskExitError+0x28>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	60bb      	str	r3, [r7, #8]
}
 800582a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800582c:	bf00      	nop
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0fc      	beq.n	800582e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000000c 	.word	0x2000000c
	...

08005850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005850:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <pxCurrentTCBConst2>)
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	6808      	ldr	r0, [r1, #0]
 8005856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585a:	f380 8809 	msr	PSP, r0
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8811 	msr	BASEPRI, r0
 800586a:	4770      	bx	lr
 800586c:	f3af 8000 	nop.w

08005870 <pxCurrentTCBConst2>:
 8005870:	20001a78 	.word	0x20001a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop

08005878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005878:	4808      	ldr	r0, [pc, #32]	@ (800589c <prvPortStartFirstTask+0x24>)
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	6800      	ldr	r0, [r0, #0]
 800587e:	f380 8808 	msr	MSP, r0
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8814 	msr	CONTROL, r0
 800588a:	b662      	cpsie	i
 800588c:	b661      	cpsie	f
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	df00      	svc	0
 8005898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800589a:	bf00      	nop
 800589c:	e000ed08 	.word	0xe000ed08

080058a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058a6:	4b47      	ldr	r3, [pc, #284]	@ (80059c4 <xPortStartScheduler+0x124>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a47      	ldr	r2, [pc, #284]	@ (80059c8 <xPortStartScheduler+0x128>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10b      	bne.n	80058c8 <xPortStartScheduler+0x28>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	613b      	str	r3, [r7, #16]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058c8:	4b3e      	ldr	r3, [pc, #248]	@ (80059c4 <xPortStartScheduler+0x124>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a3f      	ldr	r2, [pc, #252]	@ (80059cc <xPortStartScheduler+0x12c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d10b      	bne.n	80058ea <xPortStartScheduler+0x4a>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	60fb      	str	r3, [r7, #12]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058ea:	4b39      	ldr	r3, [pc, #228]	@ (80059d0 <xPortStartScheduler+0x130>)
 80058ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	22ff      	movs	r2, #255	@ 0xff
 80058fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800590c:	b2da      	uxtb	r2, r3
 800590e:	4b31      	ldr	r3, [pc, #196]	@ (80059d4 <xPortStartScheduler+0x134>)
 8005910:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005912:	4b31      	ldr	r3, [pc, #196]	@ (80059d8 <xPortStartScheduler+0x138>)
 8005914:	2207      	movs	r2, #7
 8005916:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005918:	e009      	b.n	800592e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800591a:	4b2f      	ldr	r3, [pc, #188]	@ (80059d8 <xPortStartScheduler+0x138>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3b01      	subs	r3, #1
 8005920:	4a2d      	ldr	r2, [pc, #180]	@ (80059d8 <xPortStartScheduler+0x138>)
 8005922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	b2db      	uxtb	r3, r3
 800592c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005936:	2b80      	cmp	r3, #128	@ 0x80
 8005938:	d0ef      	beq.n	800591a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800593a:	4b27      	ldr	r3, [pc, #156]	@ (80059d8 <xPortStartScheduler+0x138>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1c3 0307 	rsb	r3, r3, #7
 8005942:	2b04      	cmp	r3, #4
 8005944:	d00b      	beq.n	800595e <xPortStartScheduler+0xbe>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	60bb      	str	r3, [r7, #8]
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	e7fd      	b.n	800595a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800595e:	4b1e      	ldr	r3, [pc, #120]	@ (80059d8 <xPortStartScheduler+0x138>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	4a1c      	ldr	r2, [pc, #112]	@ (80059d8 <xPortStartScheduler+0x138>)
 8005966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005968:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <xPortStartScheduler+0x138>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005970:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <xPortStartScheduler+0x138>)
 8005972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	b2da      	uxtb	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800597c:	4b17      	ldr	r3, [pc, #92]	@ (80059dc <xPortStartScheduler+0x13c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a16      	ldr	r2, [pc, #88]	@ (80059dc <xPortStartScheduler+0x13c>)
 8005982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005988:	4b14      	ldr	r3, [pc, #80]	@ (80059dc <xPortStartScheduler+0x13c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a13      	ldr	r2, [pc, #76]	@ (80059dc <xPortStartScheduler+0x13c>)
 800598e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005994:	f000 f8da 	bl	8005b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005998:	4b11      	ldr	r3, [pc, #68]	@ (80059e0 <xPortStartScheduler+0x140>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800599e:	f000 f8f9 	bl	8005b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059a2:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <xPortStartScheduler+0x144>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a0f      	ldr	r2, [pc, #60]	@ (80059e4 <xPortStartScheduler+0x144>)
 80059a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059ae:	f7ff ff63 	bl	8005878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059b2:	f001 faad 	bl	8006f10 <vTaskSwitchContext>
	prvTaskExitError();
 80059b6:	f7ff ff19 	bl	80057ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	e000ed00 	.word	0xe000ed00
 80059c8:	410fc271 	.word	0x410fc271
 80059cc:	410fc270 	.word	0x410fc270
 80059d0:	e000e400 	.word	0xe000e400
 80059d4:	20001a30 	.word	0x20001a30
 80059d8:	20001a34 	.word	0x20001a34
 80059dc:	e000ed20 	.word	0xe000ed20
 80059e0:	2000000c 	.word	0x2000000c
 80059e4:	e000ef34 	.word	0xe000ef34

080059e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	607b      	str	r3, [r7, #4]
}
 8005a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a02:	4b10      	ldr	r3, [pc, #64]	@ (8005a44 <vPortEnterCritical+0x5c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	4a0e      	ldr	r2, [pc, #56]	@ (8005a44 <vPortEnterCritical+0x5c>)
 8005a0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a44 <vPortEnterCritical+0x5c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d110      	bne.n	8005a36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a14:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <vPortEnterCritical+0x60>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	603b      	str	r3, [r7, #0]
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <vPortEnterCritical+0x4a>
	}
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	2000000c 	.word	0x2000000c
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a52:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <vPortExitCritical+0x50>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <vPortExitCritical+0x26>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	607b      	str	r3, [r7, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <vPortExitCritical+0x50>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	4a08      	ldr	r2, [pc, #32]	@ (8005a9c <vPortExitCritical+0x50>)
 8005a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a7c:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <vPortExitCritical+0x50>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d105      	bne.n	8005a90 <vPortExitCritical+0x44>
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	2000000c 	.word	0x2000000c

08005aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005aa0:	f3ef 8009 	mrs	r0, PSP
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <pxCurrentTCBConst>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f01e 0f10 	tst.w	lr, #16
 8005ab0:	bf08      	it	eq
 8005ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aba:	6010      	str	r0, [r2, #0]
 8005abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ac4:	f380 8811 	msr	BASEPRI, r0
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f001 fa1e 	bl	8006f10 <vTaskSwitchContext>
 8005ad4:	f04f 0000 	mov.w	r0, #0
 8005ad8:	f380 8811 	msr	BASEPRI, r0
 8005adc:	bc09      	pop	{r0, r3}
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	6808      	ldr	r0, [r1, #0]
 8005ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae6:	f01e 0f10 	tst.w	lr, #16
 8005aea:	bf08      	it	eq
 8005aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005af0:	f380 8809 	msr	PSP, r0
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	f3af 8000 	nop.w

08005b00 <pxCurrentTCBConst>:
 8005b00:	20001a78 	.word	0x20001a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop

08005b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
}
 8005b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b22:	f001 f93b 	bl	8006d9c <xTaskIncrementTick>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <xPortSysTickHandler+0x40>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	@ (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	@ (8005b84 <vPortSetupTimerInterrupt+0x38>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b88 <vPortSetupTimerInterrupt+0x3c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	@ (8005b8c <vPortSetupTimerInterrupt+0x40>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	4a09      	ldr	r2, [pc, #36]	@ (8005b90 <vPortSetupTimerInterrupt+0x44>)
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b6e:	4b04      	ldr	r3, [pc, #16]	@ (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b70:	2207      	movs	r2, #7
 8005b72:	601a      	str	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	e000e010 	.word	0xe000e010
 8005b84:	e000e018 	.word	0xe000e018
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	10624dd3 	.word	0x10624dd3
 8005b90:	e000e014 	.word	0xe000e014

08005b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ba4 <vPortEnableVFP+0x10>
 8005b98:	6801      	ldr	r1, [r0, #0]
 8005b9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b9e:	6001      	str	r1, [r0, #0]
 8005ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ba2:	bf00      	nop
 8005ba4:	e000ed88 	.word	0xe000ed88

08005ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bae:	f3ef 8305 	mrs	r3, IPSR
 8005bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d915      	bls.n	8005be6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bba:	4a18      	ldr	r2, [pc, #96]	@ (8005c1c <vPortValidateInterruptPriority+0x74>)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bc4:	4b16      	ldr	r3, [pc, #88]	@ (8005c20 <vPortValidateInterruptPriority+0x78>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	7afa      	ldrb	r2, [r7, #11]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d20b      	bcs.n	8005be6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	e7fd      	b.n	8005be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005be6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c24 <vPortValidateInterruptPriority+0x7c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005bee:	4b0e      	ldr	r3, [pc, #56]	@ (8005c28 <vPortValidateInterruptPriority+0x80>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d90b      	bls.n	8005c0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	603b      	str	r3, [r7, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <vPortValidateInterruptPriority+0x62>
	}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	e000e3f0 	.word	0xe000e3f0
 8005c20:	20001a30 	.word	0x20001a30
 8005c24:	e000ed0c 	.word	0xe000ed0c
 8005c28:	20001a34 	.word	0x20001a34

08005c2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <xQueueGenericReset+0x2c>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	60bb      	str	r3, [r7, #8]
}
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	e7fd      	b.n	8005c54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c58:	f7ff fec6 	bl	80059e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	68f9      	ldr	r1, [r7, #12]
 8005c66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	441a      	add	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	22ff      	movs	r2, #255	@ 0xff
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	22ff      	movs	r2, #255	@ 0xff
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d114      	bne.n	8005cd8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01a      	beq.n	8005cec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3310      	adds	r3, #16
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 f9d8 	bl	8007070 <xTaskRemoveFromEventList>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d012      	beq.n	8005cec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <xQueueGenericReset+0xd0>)
 8005cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	e009      	b.n	8005cec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3310      	adds	r3, #16
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fc9d 	bl	800561c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3324      	adds	r3, #36	@ 0x24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fc98 	bl	800561c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cec:	f7ff feae 	bl	8005a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cf0:	2301      	movs	r3, #1
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08e      	sub	sp, #56	@ 0x38
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	e7fd      	b.n	8005d46 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <xQueueGenericCreateStatic+0x56>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <xQueueGenericCreateStatic+0x5a>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <xQueueGenericCreateStatic+0x5c>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10b      	bne.n	8005d78 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	623b      	str	r3, [r7, #32]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <xQueueGenericCreateStatic+0x84>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <xQueueGenericCreateStatic+0x88>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <xQueueGenericCreateStatic+0x8a>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10b      	bne.n	8005da6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61fb      	str	r3, [r7, #28]
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	e7fd      	b.n	8005da2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005da6:	2350      	movs	r3, #80	@ 0x50
 8005da8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b50      	cmp	r3, #80	@ 0x50
 8005dae:	d00b      	beq.n	8005dc8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	61bb      	str	r3, [r7, #24]
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00d      	beq.n	8005df0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ddc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	4613      	mov	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f840 	bl	8005e70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3730      	adds	r7, #48	@ 0x30
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b08a      	sub	sp, #40	@ 0x28
 8005dfe:	af02      	add	r7, sp, #8
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	4613      	mov	r3, r2
 8005e06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	613b      	str	r3, [r7, #16]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3350      	adds	r3, #80	@ 0x50
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fa03 	bl	8005240 <pvPortMalloc>
 8005e3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d011      	beq.n	8005e66 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3350      	adds	r3, #80	@ 0x50
 8005e4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e54:	79fa      	ldrb	r2, [r7, #7]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f805 	bl	8005e70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e66:	69bb      	ldr	r3, [r7, #24]
	}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e002      	b.n	8005e92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	69b8      	ldr	r0, [r7, #24]
 8005ea2:	f7ff fec3 	bl	8005c2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	78fa      	ldrb	r2, [r7, #3]
 8005eaa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08e      	sub	sp, #56	@ 0x38
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <xQueueGenericSend+0x34>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <xQueueGenericSend+0x42>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <xQueueGenericSend+0x46>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <xQueueGenericSend+0x48>
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <xQueueGenericSend+0x64>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d103      	bne.n	8005f2a <xQueueGenericSend+0x72>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <xQueueGenericSend+0x76>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <xQueueGenericSend+0x78>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <xQueueGenericSend+0x94>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	623b      	str	r3, [r7, #32]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f4c:	f001 fa50 	bl	80073f0 <xTaskGetSchedulerState>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <xQueueGenericSend+0xa4>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <xQueueGenericSend+0xa8>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <xQueueGenericSend+0xaa>
 8005f60:	2300      	movs	r3, #0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <xQueueGenericSend+0xc6>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	61fb      	str	r3, [r7, #28]
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	e7fd      	b.n	8005f7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f7e:	f7ff fd33 	bl	80059e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <xQueueGenericSend+0xdc>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d129      	bne.n	8005fe8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f9a:	f000 fa91 	bl	80064c0 <prvCopyDataToQueue>
 8005f9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d010      	beq.n	8005fca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	3324      	adds	r3, #36	@ 0x24
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 f85f 	bl	8007070 <xTaskRemoveFromEventList>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d013      	beq.n	8005fe0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80060b8 <xQueueGenericSend+0x200>)
 8005fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	e00a      	b.n	8005fe0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fd0:	4b39      	ldr	r3, [pc, #228]	@ (80060b8 <xQueueGenericSend+0x200>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fe0:	f7ff fd34 	bl	8005a4c <vPortExitCritical>
				return pdPASS;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e063      	b.n	80060b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fee:	f7ff fd2d 	bl	8005a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e05c      	b.n	80060b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ffc:	f107 0314 	add.w	r3, r7, #20
 8006000:	4618      	mov	r0, r3
 8006002:	f001 f899 	bl	8007138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006006:	2301      	movs	r3, #1
 8006008:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800600a:	f7ff fd1f 	bl	8005a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800600e:	f000 fe09 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006012:	f7ff fce9 	bl	80059e8 <vPortEnterCritical>
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800601c:	b25b      	sxtb	r3, r3
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d103      	bne.n	800602c <xQueueGenericSend+0x174>
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006032:	b25b      	sxtb	r3, r3
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d103      	bne.n	8006042 <xQueueGenericSend+0x18a>
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006042:	f7ff fd03 	bl	8005a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006046:	1d3a      	adds	r2, r7, #4
 8006048:	f107 0314 	add.w	r3, r7, #20
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f001 f888 	bl	8007164 <xTaskCheckForTimeOut>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d124      	bne.n	80060a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800605a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800605c:	f000 fb28 	bl	80066b0 <prvIsQueueFull>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d018      	beq.n	8006098 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	3310      	adds	r3, #16
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4611      	mov	r1, r2
 800606e:	4618      	mov	r0, r3
 8006070:	f000 ffac 	bl	8006fcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006076:	f000 fab3 	bl	80065e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800607a:	f000 fde1 	bl	8006c40 <xTaskResumeAll>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	f47f af7c 	bne.w	8005f7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006086:	4b0c      	ldr	r3, [pc, #48]	@ (80060b8 <xQueueGenericSend+0x200>)
 8006088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	e772      	b.n	8005f7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800609a:	f000 faa1 	bl	80065e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800609e:	f000 fdcf 	bl	8006c40 <xTaskResumeAll>
 80060a2:	e76c      	b.n	8005f7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060a6:	f000 fa9b 	bl	80065e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060aa:	f000 fdc9 	bl	8006c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3738      	adds	r7, #56	@ 0x38
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b090      	sub	sp, #64	@ 0x40
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10b      	bne.n	80060ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d103      	bne.n	80060fa <xQueueGenericSendFromISR+0x3e>
 80060f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <xQueueGenericSendFromISR+0x42>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <xQueueGenericSendFromISR+0x44>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	e7fd      	b.n	8006118 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d103      	bne.n	800612a <xQueueGenericSendFromISR+0x6e>
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <xQueueGenericSendFromISR+0x72>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <xQueueGenericSendFromISR+0x74>
 800612e:	2300      	movs	r3, #0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	623b      	str	r3, [r7, #32]
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800614c:	f7ff fd2c 	bl	8005ba8 <vPortValidateInterruptPriority>
	__asm volatile
 8006150:	f3ef 8211 	mrs	r2, BASEPRI
 8006154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	61fa      	str	r2, [r7, #28]
 8006166:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006168:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800616a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	429a      	cmp	r2, r3
 8006176:	d302      	bcc.n	800617e <xQueueGenericSendFromISR+0xc2>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d12f      	bne.n	80061de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800617e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006180:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006184:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006194:	f000 f994 	bl	80064c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006198:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d112      	bne.n	80061c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ac:	3324      	adds	r3, #36	@ 0x24
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 ff5e 	bl	8007070 <xTaskRemoveFromEventList>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00e      	beq.n	80061d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	e007      	b.n	80061d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80061cc:	3301      	adds	r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	b25a      	sxtb	r2, r3
 80061d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061d8:	2301      	movs	r3, #1
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80061dc:	e001      	b.n	80061e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e4:	617b      	str	r3, [r7, #20]
	__asm volatile
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f383 8811 	msr	BASEPRI, r3
}
 80061ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3740      	adds	r7, #64	@ 0x40
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08c      	sub	sp, #48	@ 0x30
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006204:	2300      	movs	r3, #0
 8006206:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <xQueueReceive+0x32>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	623b      	str	r3, [r7, #32]
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	e7fd      	b.n	8006226 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <xQueueReceive+0x40>
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <xQueueReceive+0x44>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <xQueueReceive+0x46>
 800623c:	2300      	movs	r3, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <xQueueReceive+0x62>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	61fb      	str	r3, [r7, #28]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800625a:	f001 f8c9 	bl	80073f0 <xTaskGetSchedulerState>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <xQueueReceive+0x72>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <xQueueReceive+0x76>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <xQueueReceive+0x78>
 800626e:	2300      	movs	r3, #0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10b      	bne.n	800628c <xQueueReceive+0x94>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	61bb      	str	r3, [r7, #24]
}
 8006286:	bf00      	nop
 8006288:	bf00      	nop
 800628a:	e7fd      	b.n	8006288 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800628c:	f7ff fbac 	bl	80059e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01f      	beq.n	80062dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062a0:	f000 f978 	bl	8006594 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	1e5a      	subs	r2, r3, #1
 80062a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00f      	beq.n	80062d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b6:	3310      	adds	r3, #16
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fed9 	bl	8007070 <xTaskRemoveFromEventList>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062c4:	4b3c      	ldr	r3, [pc, #240]	@ (80063b8 <xQueueReceive+0x1c0>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062d4:	f7ff fbba 	bl	8005a4c <vPortExitCritical>
				return pdPASS;
 80062d8:	2301      	movs	r3, #1
 80062da:	e069      	b.n	80063b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062e2:	f7ff fbb3 	bl	8005a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e062      	b.n	80063b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f0:	f107 0310 	add.w	r3, r7, #16
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 ff1f 	bl	8007138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fa:	2301      	movs	r3, #1
 80062fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062fe:	f7ff fba5 	bl	8005a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006302:	f000 fc8f 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006306:	f7ff fb6f 	bl	80059e8 <vPortEnterCritical>
 800630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006310:	b25b      	sxtb	r3, r3
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d103      	bne.n	8006320 <xQueueReceive+0x128>
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006326:	b25b      	sxtb	r3, r3
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d103      	bne.n	8006336 <xQueueReceive+0x13e>
 800632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006336:	f7ff fb89 	bl	8005a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633a:	1d3a      	adds	r2, r7, #4
 800633c:	f107 0310 	add.w	r3, r7, #16
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f000 ff0e 	bl	8007164 <xTaskCheckForTimeOut>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d123      	bne.n	8006396 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800634e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006350:	f000 f998 	bl	8006684 <prvIsQueueEmpty>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d017      	beq.n	800638a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	3324      	adds	r3, #36	@ 0x24
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4611      	mov	r1, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fe32 	bl	8006fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800636a:	f000 f939 	bl	80065e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800636e:	f000 fc67 	bl	8006c40 <xTaskResumeAll>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d189      	bne.n	800628c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006378:	4b0f      	ldr	r3, [pc, #60]	@ (80063b8 <xQueueReceive+0x1c0>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	e780      	b.n	800628c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800638a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800638c:	f000 f928 	bl	80065e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006390:	f000 fc56 	bl	8006c40 <xTaskResumeAll>
 8006394:	e77a      	b.n	800628c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006398:	f000 f922 	bl	80065e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800639c:	f000 fc50 	bl	8006c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a2:	f000 f96f 	bl	8006684 <prvIsQueueEmpty>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f43f af6f 	beq.w	800628c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3730      	adds	r7, #48	@ 0x30
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	e000ed04 	.word	0xe000ed04

080063bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08e      	sub	sp, #56	@ 0x38
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	623b      	str	r3, [r7, #32]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <xQueueReceiveFromISR+0x3c>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <xQueueReceiveFromISR+0x40>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <xQueueReceiveFromISR+0x42>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	61fb      	str	r3, [r7, #28]
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop
 8006418:	e7fd      	b.n	8006416 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800641a:	f7ff fbc5 	bl	8005ba8 <vPortValidateInterruptPriority>
	__asm volatile
 800641e:	f3ef 8211 	mrs	r2, BASEPRI
 8006422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	61ba      	str	r2, [r7, #24]
 8006434:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006436:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006438:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d02f      	beq.n	80064a6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800644c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006450:	68b9      	ldr	r1, [r7, #8]
 8006452:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006454:	f000 f89e 	bl	8006594 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	1e5a      	subs	r2, r3, #1
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006460:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d112      	bne.n	8006490 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	3310      	adds	r3, #16
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fdfa 	bl	8007070 <xTaskRemoveFromEventList>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00e      	beq.n	80064a0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e007      	b.n	80064a0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006494:	3301      	adds	r3, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	b25a      	sxtb	r2, r3
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80064a0:	2301      	movs	r3, #1
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a4:	e001      	b.n	80064aa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f383 8811 	msr	BASEPRI, r3
}
 80064b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3738      	adds	r7, #56	@ 0x38
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10d      	bne.n	80064fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d14d      	bne.n	8006582 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 ff9e 	bl	800742c <xTaskPriorityDisinherit>
 80064f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	e043      	b.n	8006582 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d119      	bne.n	8006534 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6858      	ldr	r0, [r3, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006508:	461a      	mov	r2, r3
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	f001 fc98 	bl	8007e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	441a      	add	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	d32b      	bcc.n	8006582 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	e026      	b.n	8006582 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	68d8      	ldr	r0, [r3, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	461a      	mov	r2, r3
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	f001 fc7e 	bl	8007e40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	425b      	negs	r3, r3
 800654e:	441a      	add	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d207      	bcs.n	8006570 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006568:	425b      	negs	r3, r3
 800656a:	441a      	add	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d105      	bne.n	8006582 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	3b01      	subs	r3, #1
 8006580:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800658a:	697b      	ldr	r3, [r7, #20]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d018      	beq.n	80065d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	441a      	add	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d303      	bcc.n	80065c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68d9      	ldr	r1, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d0:	461a      	mov	r2, r3
 80065d2:	6838      	ldr	r0, [r7, #0]
 80065d4:	f001 fc34 	bl	8007e40 <memcpy>
	}
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065e8:	f7ff f9fe 	bl	80059e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065f4:	e011      	b.n	800661a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d012      	beq.n	8006624 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3324      	adds	r3, #36	@ 0x24
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fd34 	bl	8007070 <xTaskRemoveFromEventList>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800660e:	f000 fe0d 	bl	800722c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	3b01      	subs	r3, #1
 8006616:	b2db      	uxtb	r3, r3
 8006618:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800661a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	dce9      	bgt.n	80065f6 <prvUnlockQueue+0x16>
 8006622:	e000      	b.n	8006626 <prvUnlockQueue+0x46>
					break;
 8006624:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	22ff      	movs	r2, #255	@ 0xff
 800662a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800662e:	f7ff fa0d 	bl	8005a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006632:	f7ff f9d9 	bl	80059e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800663c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800663e:	e011      	b.n	8006664 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d012      	beq.n	800666e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3310      	adds	r3, #16
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fd0f 	bl	8007070 <xTaskRemoveFromEventList>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006658:	f000 fde8 	bl	800722c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	3b01      	subs	r3, #1
 8006660:	b2db      	uxtb	r3, r3
 8006662:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	dce9      	bgt.n	8006640 <prvUnlockQueue+0x60>
 800666c:	e000      	b.n	8006670 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800666e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	22ff      	movs	r2, #255	@ 0xff
 8006674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006678:	f7ff f9e8 	bl	8005a4c <vPortExitCritical>
}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800668c:	f7ff f9ac 	bl	80059e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e001      	b.n	80066a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066a2:	f7ff f9d3 	bl	8005a4c <vPortExitCritical>

	return xReturn;
 80066a6:	68fb      	ldr	r3, [r7, #12]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066b8:	f7ff f996 	bl	80059e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d102      	bne.n	80066ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	e001      	b.n	80066d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066d2:	f7ff f9bb 	bl	8005a4c <vPortExitCritical>

	return xReturn;
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e014      	b.n	800671a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006730 <vQueueAddToRegistry+0x50>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066fc:	490c      	ldr	r1, [pc, #48]	@ (8006730 <vQueueAddToRegistry+0x50>)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006706:	4a0a      	ldr	r2, [pc, #40]	@ (8006730 <vQueueAddToRegistry+0x50>)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4413      	add	r3, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006712:	e006      	b.n	8006722 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b07      	cmp	r3, #7
 800671e:	d9e7      	bls.n	80066f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20001a38 	.word	0x20001a38

08006734 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006744:	f7ff f950 	bl	80059e8 <vPortEnterCritical>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800674e:	b25b      	sxtb	r3, r3
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d103      	bne.n	800675e <vQueueWaitForMessageRestricted+0x2a>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006764:	b25b      	sxtb	r3, r3
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d103      	bne.n	8006774 <vQueueWaitForMessageRestricted+0x40>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006774:	f7ff f96a 	bl	8005a4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	d106      	bne.n	800678e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	3324      	adds	r3, #36	@ 0x24
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fc45 	bl	8007018 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800678e:	6978      	ldr	r0, [r7, #20]
 8006790:	f7ff ff26 	bl	80065e0 <prvUnlockQueue>
	}
 8006794:	bf00      	nop
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08e      	sub	sp, #56	@ 0x38
 80067a0:	af04      	add	r7, sp, #16
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	623b      	str	r3, [r7, #32]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	61fb      	str	r3, [r7, #28]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067e6:	235c      	movs	r3, #92	@ 0x5c
 80067e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80067ee:	d00b      	beq.n	8006808 <xTaskCreateStatic+0x6c>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	61bb      	str	r3, [r7, #24]
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	e7fd      	b.n	8006804 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006808:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800680a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01e      	beq.n	800684e <xTaskCreateStatic+0xb2>
 8006810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01b      	beq.n	800684e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800681e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	2202      	movs	r2, #2
 8006824:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006828:	2300      	movs	r3, #0
 800682a:	9303      	str	r3, [sp, #12]
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	9302      	str	r3, [sp, #8]
 8006830:	f107 0314 	add.w	r3, r7, #20
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f850 	bl	80068e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006846:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006848:	f000 f8de 	bl	8006a08 <prvAddNewTaskToReadyList>
 800684c:	e001      	b.n	8006852 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006852:	697b      	ldr	r3, [r7, #20]
	}
 8006854:	4618      	mov	r0, r3
 8006856:	3728      	adds	r7, #40	@ 0x28
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08c      	sub	sp, #48	@ 0x30
 8006860:	af04      	add	r7, sp, #16
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	4613      	mov	r3, r2
 800686a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800686c:	88fb      	ldrh	r3, [r7, #6]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fce5 	bl	8005240 <pvPortMalloc>
 8006876:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800687e:	205c      	movs	r0, #92	@ 0x5c
 8006880:	f7fe fcde 	bl	8005240 <pvPortMalloc>
 8006884:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	631a      	str	r2, [r3, #48]	@ 0x30
 8006892:	e005      	b.n	80068a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006894:	6978      	ldr	r0, [r7, #20]
 8006896:	f7fe fda1 	bl	80053dc <vPortFree>
 800689a:	e001      	b.n	80068a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800689c:	2300      	movs	r3, #0
 800689e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d017      	beq.n	80068d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068ae:	88fa      	ldrh	r2, [r7, #6]
 80068b0:	2300      	movs	r3, #0
 80068b2:	9303      	str	r3, [sp, #12]
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	9302      	str	r3, [sp, #8]
 80068b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f80e 	bl	80068e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ca:	69f8      	ldr	r0, [r7, #28]
 80068cc:	f000 f89c 	bl	8006a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068d0:	2301      	movs	r3, #1
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	e002      	b.n	80068dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
 80068da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068dc:	69bb      	ldr	r3, [r7, #24]
	}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b088      	sub	sp, #32
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	461a      	mov	r2, r3
 80068fe:	21a5      	movs	r1, #165	@ 0xa5
 8006900:	f001 fa71 	bl	8007de6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800690e:	3b01      	subs	r3, #1
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	f023 0307 	bic.w	r3, r3, #7
 800691c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	617b      	str	r3, [r7, #20]
}
 800693a:	bf00      	nop
 800693c:	bf00      	nop
 800693e:	e7fd      	b.n	800693c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01f      	beq.n	8006986 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006946:	2300      	movs	r3, #0
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	e012      	b.n	8006972 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	7819      	ldrb	r1, [r3, #0]
 8006954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	3334      	adds	r3, #52	@ 0x34
 800695c:	460a      	mov	r2, r1
 800695e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d006      	beq.n	800697a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	3301      	adds	r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	2b0f      	cmp	r3, #15
 8006976:	d9e9      	bls.n	800694c <prvInitialiseNewTask+0x66>
 8006978:	e000      	b.n	800697c <prvInitialiseNewTask+0x96>
			{
				break;
 800697a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006984:	e003      	b.n	800698e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	2b37      	cmp	r3, #55	@ 0x37
 8006992:	d901      	bls.n	8006998 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006994:	2337      	movs	r3, #55	@ 0x37
 8006996:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800699c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	2200      	movs	r2, #0
 80069a8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	3304      	adds	r3, #4
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fe54 	bl	800565c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b6:	3318      	adds	r3, #24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe fe4f 	bl	800565c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	2200      	movs	r2, #0
 80069d8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	68f9      	ldr	r1, [r7, #12]
 80069e6:	69b8      	ldr	r0, [r7, #24]
 80069e8:	f7fe fecc 	bl	8005784 <pxPortInitialiseStack>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fe:	bf00      	nop
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a10:	f7fe ffea 	bl	80059e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a14:	4b2d      	ldr	r3, [pc, #180]	@ (8006acc <prvAddNewTaskToReadyList+0xc4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006acc <prvAddNewTaskToReadyList+0xc4>)
 8006a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a26:	4a2a      	ldr	r2, [pc, #168]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a2c:	4b27      	ldr	r3, [pc, #156]	@ (8006acc <prvAddNewTaskToReadyList+0xc4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d110      	bne.n	8006a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a34:	f000 fc1e 	bl	8007274 <prvInitialiseTaskLists>
 8006a38:	e00d      	b.n	8006a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ad4 <prvAddNewTaskToReadyList+0xcc>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a42:	4b23      	ldr	r3, [pc, #140]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d802      	bhi.n	8006a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a50:	4a1f      	ldr	r2, [pc, #124]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a56:	4b20      	ldr	r3, [pc, #128]	@ (8006ad8 <prvAddNewTaskToReadyList+0xd0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad8 <prvAddNewTaskToReadyList+0xd0>)
 8006a5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a60:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad8 <prvAddNewTaskToReadyList+0xd0>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006adc <prvAddNewTaskToReadyList+0xd4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d903      	bls.n	8006a7c <prvAddNewTaskToReadyList+0x74>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	4a18      	ldr	r2, [pc, #96]	@ (8006adc <prvAddNewTaskToReadyList+0xd4>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4a15      	ldr	r2, [pc, #84]	@ (8006ae0 <prvAddNewTaskToReadyList+0xd8>)
 8006a8a:	441a      	add	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7fe fdef 	bl	8005676 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a98:	f7fe ffd8 	bl	8005a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <prvAddNewTaskToReadyList+0xcc>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00e      	beq.n	8006ac2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad0 <prvAddNewTaskToReadyList+0xc8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d207      	bcs.n	8006ac2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <prvAddNewTaskToReadyList+0xdc>)
 8006ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20001f4c 	.word	0x20001f4c
 8006ad0:	20001a78 	.word	0x20001a78
 8006ad4:	20001f58 	.word	0x20001f58
 8006ad8:	20001f68 	.word	0x20001f68
 8006adc:	20001f54 	.word	0x20001f54
 8006ae0:	20001a7c 	.word	0x20001a7c
 8006ae4:	e000ed04 	.word	0xe000ed04

08006ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d018      	beq.n	8006b2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006afa:	4b14      	ldr	r3, [pc, #80]	@ (8006b4c <vTaskDelay+0x64>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <vTaskDelay+0x32>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	60bb      	str	r3, [r7, #8]
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	e7fd      	b.n	8006b16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b1a:	f000 f883 	bl	8006c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b1e:	2100      	movs	r1, #0
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fcf3 	bl	800750c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b26:	f000 f88b 	bl	8006c40 <xTaskResumeAll>
 8006b2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d107      	bne.n	8006b42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b32:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <vTaskDelay+0x68>)
 8006b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20001f74 	.word	0x20001f74
 8006b50:	e000ed04 	.word	0xe000ed04

08006b54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	@ 0x28
 8006b58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b62:	463a      	mov	r2, r7
 8006b64:	1d39      	adds	r1, r7, #4
 8006b66:	f107 0308 	add.w	r3, r7, #8
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe fb34 	bl	80051d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	9202      	str	r2, [sp, #8]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	460a      	mov	r2, r1
 8006b82:	4922      	ldr	r1, [pc, #136]	@ (8006c0c <vTaskStartScheduler+0xb8>)
 8006b84:	4822      	ldr	r0, [pc, #136]	@ (8006c10 <vTaskStartScheduler+0xbc>)
 8006b86:	f7ff fe09 	bl	800679c <xTaskCreateStatic>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4a21      	ldr	r2, [pc, #132]	@ (8006c14 <vTaskStartScheduler+0xc0>)
 8006b8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b90:	4b20      	ldr	r3, [pc, #128]	@ (8006c14 <vTaskStartScheduler+0xc0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e001      	b.n	8006ba2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d102      	bne.n	8006bae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ba8:	f000 fd04 	bl	80075b4 <xTimerCreateTimerTask>
 8006bac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d116      	bne.n	8006be2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	613b      	str	r3, [r7, #16]
}
 8006bc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc8:	4b13      	ldr	r3, [pc, #76]	@ (8006c18 <vTaskStartScheduler+0xc4>)
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295
 8006bce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bd0:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <vTaskStartScheduler+0xc8>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bd6:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <vTaskStartScheduler+0xcc>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bdc:	f7fe fe60 	bl	80058a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006be0:	e00f      	b.n	8006c02 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d10b      	bne.n	8006c02 <vTaskStartScheduler+0xae>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <vTaskStartScheduler+0xaa>
}
 8006c02:	bf00      	nop
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	08007eb4 	.word	0x08007eb4
 8006c10:	08007245 	.word	0x08007245
 8006c14:	20001f70 	.word	0x20001f70
 8006c18:	20001f6c 	.word	0x20001f6c
 8006c1c:	20001f58 	.word	0x20001f58
 8006c20:	20001f50 	.word	0x20001f50

08006c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c28:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <vTaskSuspendAll+0x18>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	4a03      	ldr	r2, [pc, #12]	@ (8006c3c <vTaskSuspendAll+0x18>)
 8006c30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c32:	bf00      	nop
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20001f74 	.word	0x20001f74

08006c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c4e:	4b42      	ldr	r3, [pc, #264]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <xTaskResumeAll+0x2e>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	603b      	str	r3, [r7, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c6e:	f7fe febb 	bl	80059e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c72:	4b39      	ldr	r3, [pc, #228]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	4a37      	ldr	r2, [pc, #220]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7c:	4b36      	ldr	r3, [pc, #216]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d162      	bne.n	8006d4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c84:	4b35      	ldr	r3, [pc, #212]	@ (8006d5c <xTaskResumeAll+0x11c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d05e      	beq.n	8006d4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c8c:	e02f      	b.n	8006cee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c8e:	4b34      	ldr	r3, [pc, #208]	@ (8006d60 <xTaskResumeAll+0x120>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3318      	adds	r3, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fd48 	bl	8005730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fd43 	bl	8005730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	4b2d      	ldr	r3, [pc, #180]	@ (8006d64 <xTaskResumeAll+0x124>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d903      	bls.n	8006cbe <xTaskResumeAll+0x7e>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	4a2a      	ldr	r2, [pc, #168]	@ (8006d64 <xTaskResumeAll+0x124>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4a27      	ldr	r2, [pc, #156]	@ (8006d68 <xTaskResumeAll+0x128>)
 8006ccc:	441a      	add	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f7fe fcce 	bl	8005676 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	4b23      	ldr	r3, [pc, #140]	@ (8006d6c <xTaskResumeAll+0x12c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d302      	bcc.n	8006cee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006ce8:	4b21      	ldr	r3, [pc, #132]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cee:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <xTaskResumeAll+0x120>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1cb      	bne.n	8006c8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cfc:	f000 fb58 	bl	80073b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d00:	4b1c      	ldr	r3, [pc, #112]	@ (8006d74 <xTaskResumeAll+0x134>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d010      	beq.n	8006d2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d0c:	f000 f846 	bl	8006d9c <xTaskIncrementTick>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d16:	4b16      	ldr	r3, [pc, #88]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f1      	bne.n	8006d0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006d28:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <xTaskResumeAll+0x134>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d2e:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <xTaskResumeAll+0x138>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d4a:	f7fe fe7f 	bl	8005a4c <vPortExitCritical>

	return xAlreadyYielded;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20001f74 	.word	0x20001f74
 8006d5c:	20001f4c 	.word	0x20001f4c
 8006d60:	20001f0c 	.word	0x20001f0c
 8006d64:	20001f54 	.word	0x20001f54
 8006d68:	20001a7c 	.word	0x20001a7c
 8006d6c:	20001a78 	.word	0x20001a78
 8006d70:	20001f60 	.word	0x20001f60
 8006d74:	20001f5c 	.word	0x20001f5c
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d82:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <xTaskGetTickCount+0x1c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d88:	687b      	ldr	r3, [r7, #4]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20001f50 	.word	0x20001f50

08006d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da6:	4b4f      	ldr	r3, [pc, #316]	@ (8006ee4 <xTaskIncrementTick+0x148>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 8090 	bne.w	8006ed0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006db0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ee8 <xTaskIncrementTick+0x14c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006db8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ee8 <xTaskIncrementTick+0x14c>)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d121      	bne.n	8006e08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dc4:	4b49      	ldr	r3, [pc, #292]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <xTaskIncrementTick+0x46>
 8006de6:	4b41      	ldr	r3, [pc, #260]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	4b40      	ldr	r3, [pc, #256]	@ (8006ef0 <xTaskIncrementTick+0x154>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a3e      	ldr	r2, [pc, #248]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef0 <xTaskIncrementTick+0x154>)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef4 <xTaskIncrementTick+0x158>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	4a3c      	ldr	r2, [pc, #240]	@ (8006ef4 <xTaskIncrementTick+0x158>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	f000 fad4 	bl	80073b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e08:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d349      	bcc.n	8006ea6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e12:	4b36      	ldr	r3, [pc, #216]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e1c:	4b36      	ldr	r3, [pc, #216]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e22:	601a      	str	r2, [r3, #0]
					break;
 8006e24:	e03f      	b.n	8006ea6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e26:	4b31      	ldr	r3, [pc, #196]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d203      	bcs.n	8006e46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e44:	e02f      	b.n	8006ea6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fc70 	bl	8005730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	3318      	adds	r3, #24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe fc67 	bl	8005730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e66:	4b25      	ldr	r3, [pc, #148]	@ (8006efc <xTaskIncrementTick+0x160>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d903      	bls.n	8006e76 <xTaskIncrementTick+0xda>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e72:	4a22      	ldr	r2, [pc, #136]	@ (8006efc <xTaskIncrementTick+0x160>)
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4a1f      	ldr	r2, [pc, #124]	@ (8006f00 <xTaskIncrementTick+0x164>)
 8006e84:	441a      	add	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f7fe fbf2 	bl	8005676 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e96:	4b1b      	ldr	r3, [pc, #108]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d3b8      	bcc.n	8006e12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea4:	e7b5      	b.n	8006e12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ea6:	4b17      	ldr	r3, [pc, #92]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eac:	4914      	ldr	r1, [pc, #80]	@ (8006f00 <xTaskIncrementTick+0x164>)
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d901      	bls.n	8006ec2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ec2:	4b11      	ldr	r3, [pc, #68]	@ (8006f08 <xTaskIncrementTick+0x16c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e004      	b.n	8006eda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f0c <xTaskIncrementTick+0x170>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8006f0c <xTaskIncrementTick+0x170>)
 8006ed8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006eda:	697b      	ldr	r3, [r7, #20]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20001f74 	.word	0x20001f74
 8006ee8:	20001f50 	.word	0x20001f50
 8006eec:	20001f04 	.word	0x20001f04
 8006ef0:	20001f08 	.word	0x20001f08
 8006ef4:	20001f64 	.word	0x20001f64
 8006ef8:	20001f6c 	.word	0x20001f6c
 8006efc:	20001f54 	.word	0x20001f54
 8006f00:	20001a7c 	.word	0x20001a7c
 8006f04:	20001a78 	.word	0x20001a78
 8006f08:	20001f60 	.word	0x20001f60
 8006f0c:	20001f5c 	.word	0x20001f5c

08006f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f16:	4b28      	ldr	r3, [pc, #160]	@ (8006fb8 <vTaskSwitchContext+0xa8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f1e:	4b27      	ldr	r3, [pc, #156]	@ (8006fbc <vTaskSwitchContext+0xac>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f24:	e042      	b.n	8006fac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006f26:	4b25      	ldr	r3, [pc, #148]	@ (8006fbc <vTaskSwitchContext+0xac>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2c:	4b24      	ldr	r3, [pc, #144]	@ (8006fc0 <vTaskSwitchContext+0xb0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e011      	b.n	8006f58 <vTaskSwitchContext+0x48>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <vTaskSwitchContext+0x42>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	607b      	str	r3, [r7, #4]
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	e7fd      	b.n	8006f4e <vTaskSwitchContext+0x3e>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	491a      	ldr	r1, [pc, #104]	@ (8006fc4 <vTaskSwitchContext+0xb4>)
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0e3      	beq.n	8006f34 <vTaskSwitchContext+0x24>
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4a13      	ldr	r2, [pc, #76]	@ (8006fc4 <vTaskSwitchContext+0xb4>)
 8006f78:	4413      	add	r3, r2
 8006f7a:	60bb      	str	r3, [r7, #8]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d104      	bne.n	8006f9c <vTaskSwitchContext+0x8c>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	605a      	str	r2, [r3, #4]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	4a09      	ldr	r2, [pc, #36]	@ (8006fc8 <vTaskSwitchContext+0xb8>)
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	4a06      	ldr	r2, [pc, #24]	@ (8006fc0 <vTaskSwitchContext+0xb0>)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6013      	str	r3, [r2, #0]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	20001f74 	.word	0x20001f74
 8006fbc:	20001f60 	.word	0x20001f60
 8006fc0:	20001f54 	.word	0x20001f54
 8006fc4:	20001a7c 	.word	0x20001a7c
 8006fc8:	20001a78 	.word	0x20001a78

08006fcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60fb      	str	r3, [r7, #12]
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ff4:	4b07      	ldr	r3, [pc, #28]	@ (8007014 <vTaskPlaceOnEventList+0x48>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3318      	adds	r3, #24
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7fe fb5e 	bl	80056be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007002:	2101      	movs	r1, #1
 8007004:	6838      	ldr	r0, [r7, #0]
 8007006:	f000 fa81 	bl	800750c <prvAddCurrentTaskToDelayedList>
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20001a78 	.word	0x20001a78

08007018 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	617b      	str	r3, [r7, #20]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007042:	4b0a      	ldr	r3, [pc, #40]	@ (800706c <vTaskPlaceOnEventListRestricted+0x54>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3318      	adds	r3, #24
 8007048:	4619      	mov	r1, r3
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f7fe fb13 	bl	8005676 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007056:	f04f 33ff 	mov.w	r3, #4294967295
 800705a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	68b8      	ldr	r0, [r7, #8]
 8007060:	f000 fa54 	bl	800750c <prvAddCurrentTaskToDelayedList>
	}
 8007064:	bf00      	nop
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20001a78 	.word	0x20001a78

08007070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10b      	bne.n	800709e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	60fb      	str	r3, [r7, #12]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3318      	adds	r3, #24
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe fb44 	bl	8005730 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007120 <xTaskRemoveFromEventList+0xb0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d11d      	bne.n	80070ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fb3b 	bl	8005730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070be:	4b19      	ldr	r3, [pc, #100]	@ (8007124 <xTaskRemoveFromEventList+0xb4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d903      	bls.n	80070ce <xTaskRemoveFromEventList+0x5e>
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	4a16      	ldr	r2, [pc, #88]	@ (8007124 <xTaskRemoveFromEventList+0xb4>)
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4a13      	ldr	r2, [pc, #76]	@ (8007128 <xTaskRemoveFromEventList+0xb8>)
 80070dc:	441a      	add	r2, r3
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	3304      	adds	r3, #4
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f7fe fac6 	bl	8005676 <vListInsertEnd>
 80070ea:	e005      	b.n	80070f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	3318      	adds	r3, #24
 80070f0:	4619      	mov	r1, r3
 80070f2:	480e      	ldr	r0, [pc, #56]	@ (800712c <xTaskRemoveFromEventList+0xbc>)
 80070f4:	f7fe fabf 	bl	8005676 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007130 <xTaskRemoveFromEventList+0xc0>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007102:	429a      	cmp	r2, r3
 8007104:	d905      	bls.n	8007112 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007106:	2301      	movs	r3, #1
 8007108:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800710a:	4b0a      	ldr	r3, [pc, #40]	@ (8007134 <xTaskRemoveFromEventList+0xc4>)
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	e001      	b.n	8007116 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007116:	697b      	ldr	r3, [r7, #20]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20001f74 	.word	0x20001f74
 8007124:	20001f54 	.word	0x20001f54
 8007128:	20001a7c 	.word	0x20001a7c
 800712c:	20001f0c 	.word	0x20001f0c
 8007130:	20001a78 	.word	0x20001a78
 8007134:	20001f60 	.word	0x20001f60

08007138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007140:	4b06      	ldr	r3, [pc, #24]	@ (800715c <vTaskInternalSetTimeOutState+0x24>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007148:	4b05      	ldr	r3, [pc, #20]	@ (8007160 <vTaskInternalSetTimeOutState+0x28>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	605a      	str	r2, [r3, #4]
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	20001f64 	.word	0x20001f64
 8007160:	20001f50 	.word	0x20001f50

08007164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10b      	bne.n	800718c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	613b      	str	r3, [r7, #16]
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10b      	bne.n	80071aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60fb      	str	r3, [r7, #12]
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071aa:	f7fe fc1d 	bl	80059e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007224 <xTaskCheckForTimeOut+0xc0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	d102      	bne.n	80071ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e023      	b.n	8007216 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b15      	ldr	r3, [pc, #84]	@ (8007228 <xTaskCheckForTimeOut+0xc4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d007      	beq.n	80071ea <xTaskCheckForTimeOut+0x86>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d302      	bcc.n	80071ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071e4:	2301      	movs	r3, #1
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	e015      	b.n	8007216 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d20b      	bcs.n	800720c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff99 	bl	8007138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007206:	2300      	movs	r3, #0
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	e004      	b.n	8007216 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007212:	2301      	movs	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007216:	f7fe fc19 	bl	8005a4c <vPortExitCritical>

	return xReturn;
 800721a:	69fb      	ldr	r3, [r7, #28]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20001f50 	.word	0x20001f50
 8007228:	20001f64 	.word	0x20001f64

0800722c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007230:	4b03      	ldr	r3, [pc, #12]	@ (8007240 <vTaskMissedYield+0x14>)
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]
}
 8007236:	bf00      	nop
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	20001f60 	.word	0x20001f60

08007244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800724c:	f000 f852 	bl	80072f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007250:	4b06      	ldr	r3, [pc, #24]	@ (800726c <prvIdleTask+0x28>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d9f9      	bls.n	800724c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007258:	4b05      	ldr	r3, [pc, #20]	@ (8007270 <prvIdleTask+0x2c>)
 800725a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007268:	e7f0      	b.n	800724c <prvIdleTask+0x8>
 800726a:	bf00      	nop
 800726c:	20001a7c 	.word	0x20001a7c
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800727a:	2300      	movs	r3, #0
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	e00c      	b.n	800729a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4a12      	ldr	r2, [pc, #72]	@ (80072d4 <prvInitialiseTaskLists+0x60>)
 800728c:	4413      	add	r3, r2
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe f9c4 	bl	800561c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3301      	adds	r3, #1
 8007298:	607b      	str	r3, [r7, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b37      	cmp	r3, #55	@ 0x37
 800729e:	d9ef      	bls.n	8007280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072a0:	480d      	ldr	r0, [pc, #52]	@ (80072d8 <prvInitialiseTaskLists+0x64>)
 80072a2:	f7fe f9bb 	bl	800561c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072a6:	480d      	ldr	r0, [pc, #52]	@ (80072dc <prvInitialiseTaskLists+0x68>)
 80072a8:	f7fe f9b8 	bl	800561c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072ac:	480c      	ldr	r0, [pc, #48]	@ (80072e0 <prvInitialiseTaskLists+0x6c>)
 80072ae:	f7fe f9b5 	bl	800561c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072b2:	480c      	ldr	r0, [pc, #48]	@ (80072e4 <prvInitialiseTaskLists+0x70>)
 80072b4:	f7fe f9b2 	bl	800561c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072b8:	480b      	ldr	r0, [pc, #44]	@ (80072e8 <prvInitialiseTaskLists+0x74>)
 80072ba:	f7fe f9af 	bl	800561c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072be:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <prvInitialiseTaskLists+0x78>)
 80072c0:	4a05      	ldr	r2, [pc, #20]	@ (80072d8 <prvInitialiseTaskLists+0x64>)
 80072c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072c4:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <prvInitialiseTaskLists+0x7c>)
 80072c6:	4a05      	ldr	r2, [pc, #20]	@ (80072dc <prvInitialiseTaskLists+0x68>)
 80072c8:	601a      	str	r2, [r3, #0]
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20001a7c 	.word	0x20001a7c
 80072d8:	20001edc 	.word	0x20001edc
 80072dc:	20001ef0 	.word	0x20001ef0
 80072e0:	20001f0c 	.word	0x20001f0c
 80072e4:	20001f20 	.word	0x20001f20
 80072e8:	20001f38 	.word	0x20001f38
 80072ec:	20001f04 	.word	0x20001f04
 80072f0:	20001f08 	.word	0x20001f08

080072f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072fa:	e019      	b.n	8007330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072fc:	f7fe fb74 	bl	80059e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007300:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <prvCheckTasksWaitingTermination+0x50>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3304      	adds	r3, #4
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fa0f 	bl	8005730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007312:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <prvCheckTasksWaitingTermination+0x54>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3b01      	subs	r3, #1
 8007318:	4a0b      	ldr	r2, [pc, #44]	@ (8007348 <prvCheckTasksWaitingTermination+0x54>)
 800731a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800731c:	4b0b      	ldr	r3, [pc, #44]	@ (800734c <prvCheckTasksWaitingTermination+0x58>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3b01      	subs	r3, #1
 8007322:	4a0a      	ldr	r2, [pc, #40]	@ (800734c <prvCheckTasksWaitingTermination+0x58>)
 8007324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007326:	f7fe fb91 	bl	8005a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f810 	bl	8007350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007330:	4b06      	ldr	r3, [pc, #24]	@ (800734c <prvCheckTasksWaitingTermination+0x58>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e1      	bne.n	80072fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20001f20 	.word	0x20001f20
 8007348:	20001f4c 	.word	0x20001f4c
 800734c:	20001f34 	.word	0x20001f34

08007350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800735e:	2b00      	cmp	r3, #0
 8007360:	d108      	bne.n	8007374 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe f838 	bl	80053dc <vPortFree>
				vPortFree( pxTCB );
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fe f835 	bl	80053dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007372:	e019      	b.n	80073a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800737a:	2b01      	cmp	r3, #1
 800737c:	d103      	bne.n	8007386 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fe f82c 	bl	80053dc <vPortFree>
	}
 8007384:	e010      	b.n	80073a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800738c:	2b02      	cmp	r3, #2
 800738e:	d00b      	beq.n	80073a8 <prvDeleteTCB+0x58>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60fb      	str	r3, [r7, #12]
}
 80073a2:	bf00      	nop
 80073a4:	bf00      	nop
 80073a6:	e7fd      	b.n	80073a4 <prvDeleteTCB+0x54>
	}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073b6:	4b0c      	ldr	r3, [pc, #48]	@ (80073e8 <prvResetNextTaskUnblockTime+0x38>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073c0:	4b0a      	ldr	r3, [pc, #40]	@ (80073ec <prvResetNextTaskUnblockTime+0x3c>)
 80073c2:	f04f 32ff 	mov.w	r2, #4294967295
 80073c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073c8:	e008      	b.n	80073dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ca:	4b07      	ldr	r3, [pc, #28]	@ (80073e8 <prvResetNextTaskUnblockTime+0x38>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	4a04      	ldr	r2, [pc, #16]	@ (80073ec <prvResetNextTaskUnblockTime+0x3c>)
 80073da:	6013      	str	r3, [r2, #0]
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	20001f04 	.word	0x20001f04
 80073ec:	20001f6c 	.word	0x20001f6c

080073f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007424 <xTaskGetSchedulerState+0x34>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073fe:	2301      	movs	r3, #1
 8007400:	607b      	str	r3, [r7, #4]
 8007402:	e008      	b.n	8007416 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007404:	4b08      	ldr	r3, [pc, #32]	@ (8007428 <xTaskGetSchedulerState+0x38>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800740c:	2302      	movs	r3, #2
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	e001      	b.n	8007416 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007416:	687b      	ldr	r3, [r7, #4]
	}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	20001f58 	.word	0x20001f58
 8007428:	20001f74 	.word	0x20001f74

0800742c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d058      	beq.n	80074f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007442:	4b2f      	ldr	r3, [pc, #188]	@ (8007500 <xTaskPriorityDisinherit+0xd4>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d00b      	beq.n	8007464 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60fb      	str	r3, [r7, #12]
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	60bb      	str	r3, [r7, #8]
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	e7fd      	b.n	8007480 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007488:	1e5a      	subs	r2, r3, #1
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007496:	429a      	cmp	r2, r3
 8007498:	d02c      	beq.n	80074f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d128      	bne.n	80074f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe f942 	bl	8005730 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <xTaskPriorityDisinherit+0xd8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d903      	bls.n	80074d4 <xTaskPriorityDisinherit+0xa8>
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <xTaskPriorityDisinherit+0xd8>)
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4a09      	ldr	r2, [pc, #36]	@ (8007508 <xTaskPriorityDisinherit+0xdc>)
 80074e2:	441a      	add	r2, r3
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fe f8c3 	bl	8005676 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074f4:	697b      	ldr	r3, [r7, #20]
	}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20001a78 	.word	0x20001a78
 8007504:	20001f54 	.word	0x20001f54
 8007508:	20001a7c 	.word	0x20001a7c

0800750c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007516:	4b21      	ldr	r3, [pc, #132]	@ (800759c <prvAddCurrentTaskToDelayedList+0x90>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800751c:	4b20      	ldr	r3, [pc, #128]	@ (80075a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3304      	adds	r3, #4
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe f904 	bl	8005730 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d10a      	bne.n	8007546 <prvAddCurrentTaskToDelayedList+0x3a>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007536:	4b1a      	ldr	r3, [pc, #104]	@ (80075a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3304      	adds	r3, #4
 800753c:	4619      	mov	r1, r3
 800753e:	4819      	ldr	r0, [pc, #100]	@ (80075a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007540:	f7fe f899 	bl	8005676 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007544:	e026      	b.n	8007594 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800754e:	4b14      	ldr	r3, [pc, #80]	@ (80075a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	429a      	cmp	r2, r3
 800755c:	d209      	bcs.n	8007572 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800755e:	4b12      	ldr	r3, [pc, #72]	@ (80075a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b0f      	ldr	r3, [pc, #60]	@ (80075a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3304      	adds	r3, #4
 8007568:	4619      	mov	r1, r3
 800756a:	4610      	mov	r0, r2
 800756c:	f7fe f8a7 	bl	80056be <vListInsert>
}
 8007570:	e010      	b.n	8007594 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007572:	4b0e      	ldr	r3, [pc, #56]	@ (80075ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b0a      	ldr	r3, [pc, #40]	@ (80075a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f7fe f89d 	bl	80056be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007584:	4b0a      	ldr	r3, [pc, #40]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	d202      	bcs.n	8007594 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800758e:	4a08      	ldr	r2, [pc, #32]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20001f50 	.word	0x20001f50
 80075a0:	20001a78 	.word	0x20001a78
 80075a4:	20001f38 	.word	0x20001f38
 80075a8:	20001f08 	.word	0x20001f08
 80075ac:	20001f04 	.word	0x20001f04
 80075b0:	20001f6c 	.word	0x20001f6c

080075b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	@ 0x28
 80075b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075be:	f000 fbb1 	bl	8007d24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007638 <xTimerCreateTimerTask+0x84>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d021      	beq.n	800760e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075d2:	1d3a      	adds	r2, r7, #4
 80075d4:	f107 0108 	add.w	r1, r7, #8
 80075d8:	f107 030c 	add.w	r3, r7, #12
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fd fe15 	bl	800520c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	9202      	str	r2, [sp, #8]
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	2302      	movs	r3, #2
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	2300      	movs	r3, #0
 80075f2:	460a      	mov	r2, r1
 80075f4:	4911      	ldr	r1, [pc, #68]	@ (800763c <xTimerCreateTimerTask+0x88>)
 80075f6:	4812      	ldr	r0, [pc, #72]	@ (8007640 <xTimerCreateTimerTask+0x8c>)
 80075f8:	f7ff f8d0 	bl	800679c <xTaskCreateStatic>
 80075fc:	4603      	mov	r3, r0
 80075fe:	4a11      	ldr	r2, [pc, #68]	@ (8007644 <xTimerCreateTimerTask+0x90>)
 8007600:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007602:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <xTimerCreateTimerTask+0x90>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800760a:	2301      	movs	r3, #1
 800760c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10b      	bne.n	800762c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	613b      	str	r3, [r7, #16]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800762c:	697b      	ldr	r3, [r7, #20]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20001fa8 	.word	0x20001fa8
 800763c:	08007ebc 	.word	0x08007ebc
 8007640:	080078bd 	.word	0x080078bd
 8007644:	20001fac 	.word	0x20001fac

08007648 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007656:	202c      	movs	r0, #44	@ 0x2c
 8007658:	f7fd fdf2 	bl	8005240 <pvPortMalloc>
 800765c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00d      	beq.n	8007680 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f845 	bl	800770a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007680:	697b      	ldr	r3, [r7, #20]
	}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800768a:	b580      	push	{r7, lr}
 800768c:	b08a      	sub	sp, #40	@ 0x28
 800768e:	af02      	add	r7, sp, #8
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007698:	232c      	movs	r3, #44	@ 0x2c
 800769a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b2c      	cmp	r3, #44	@ 0x2c
 80076a0:	d00b      	beq.n	80076ba <xTimerCreateStatic+0x30>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	61bb      	str	r3, [r7, #24]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80076bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <xTimerCreateStatic+0x50>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	617b      	str	r3, [r7, #20]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80076da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076dc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00d      	beq.n	8007700 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f805 	bl	800770a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007700:	69fb      	ldr	r3, [r7, #28]
	}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b086      	sub	sp, #24
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	607a      	str	r2, [r7, #4]
 8007716:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	617b      	str	r3, [r7, #20]
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	e7fd      	b.n	8007732 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01e      	beq.n	800777a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800773c:	f000 faf2 	bl	8007d24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	6a3a      	ldr	r2, [r7, #32]
 8007756:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	3304      	adds	r3, #4
 800775c:	4618      	mov	r0, r3
 800775e:	f7fd ff7d 	bl	800565c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800776e:	f043 0304 	orr.w	r3, r3, #4
 8007772:	b2da      	uxtb	r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800777a:	bf00      	nop
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	@ 0x28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007792:	2300      	movs	r3, #0
 8007794:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	623b      	str	r3, [r7, #32]
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077b4:	4b19      	ldr	r3, [pc, #100]	@ (800781c <xTimerGenericCommand+0x98>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d02a      	beq.n	8007812 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	dc18      	bgt.n	8007800 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077ce:	f7ff fe0f 	bl	80073f0 <xTaskGetSchedulerState>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d109      	bne.n	80077ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077d8:	4b10      	ldr	r3, [pc, #64]	@ (800781c <xTimerGenericCommand+0x98>)
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	f107 0110 	add.w	r1, r7, #16
 80077e0:	2300      	movs	r3, #0
 80077e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e4:	f7fe fb68 	bl	8005eb8 <xQueueGenericSend>
 80077e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80077ea:	e012      	b.n	8007812 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077ec:	4b0b      	ldr	r3, [pc, #44]	@ (800781c <xTimerGenericCommand+0x98>)
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	f107 0110 	add.w	r1, r7, #16
 80077f4:	2300      	movs	r3, #0
 80077f6:	2200      	movs	r2, #0
 80077f8:	f7fe fb5e 	bl	8005eb8 <xQueueGenericSend>
 80077fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80077fe:	e008      	b.n	8007812 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007800:	4b06      	ldr	r3, [pc, #24]	@ (800781c <xTimerGenericCommand+0x98>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	f107 0110 	add.w	r1, r7, #16
 8007808:	2300      	movs	r3, #0
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	f7fe fc56 	bl	80060bc <xQueueGenericSendFromISR>
 8007810:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007814:	4618      	mov	r0, r3
 8007816:	3728      	adds	r7, #40	@ 0x28
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20001fa8 	.word	0x20001fa8

08007820 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af02      	add	r7, sp, #8
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800782a:	4b23      	ldr	r3, [pc, #140]	@ (80078b8 <prvProcessExpiredTimer+0x98>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	3304      	adds	r3, #4
 8007838:	4618      	mov	r0, r3
 800783a:	f7fd ff79 	bl	8005730 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d023      	beq.n	8007894 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	18d1      	adds	r1, r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	6978      	ldr	r0, [r7, #20]
 800785a:	f000 f8d5 	bl	8007a08 <prvInsertTimerInActiveList>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d020      	beq.n	80078a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007864:	2300      	movs	r3, #0
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	2300      	movs	r3, #0
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	2100      	movs	r1, #0
 800786e:	6978      	ldr	r0, [r7, #20]
 8007870:	f7ff ff88 	bl	8007784 <xTimerGenericCommand>
 8007874:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d114      	bne.n	80078a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60fb      	str	r3, [r7, #12]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	6978      	ldr	r0, [r7, #20]
 80078ac:	4798      	blx	r3
}
 80078ae:	bf00      	nop
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20001fa0 	.word	0x20001fa0

080078bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078c4:	f107 0308 	add.w	r3, r7, #8
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f859 	bl	8007980 <prvGetNextExpireTime>
 80078ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4619      	mov	r1, r3
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f805 	bl	80078e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078da:	f000 f8d7 	bl	8007a8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078de:	bf00      	nop
 80078e0:	e7f0      	b.n	80078c4 <prvTimerTask+0x8>
	...

080078e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078ee:	f7ff f999 	bl	8006c24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078f2:	f107 0308 	add.w	r3, r7, #8
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f866 	bl	80079c8 <prvSampleTimeNow>
 80078fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d130      	bne.n	8007966 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <prvProcessTimerOrBlockTask+0x3c>
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	429a      	cmp	r2, r3
 8007910:	d806      	bhi.n	8007920 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007912:	f7ff f995 	bl	8006c40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff ff81 	bl	8007820 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800791e:	e024      	b.n	800796a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d008      	beq.n	8007938 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007926:	4b13      	ldr	r3, [pc, #76]	@ (8007974 <prvProcessTimerOrBlockTask+0x90>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <prvProcessTimerOrBlockTask+0x50>
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <prvProcessTimerOrBlockTask+0x52>
 8007934:	2300      	movs	r3, #0
 8007936:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007938:	4b0f      	ldr	r3, [pc, #60]	@ (8007978 <prvProcessTimerOrBlockTask+0x94>)
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	4619      	mov	r1, r3
 8007946:	f7fe fef5 	bl	8006734 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800794a:	f7ff f979 	bl	8006c40 <xTaskResumeAll>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007954:	4b09      	ldr	r3, [pc, #36]	@ (800797c <prvProcessTimerOrBlockTask+0x98>)
 8007956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	f3bf 8f6f 	isb	sy
}
 8007964:	e001      	b.n	800796a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007966:	f7ff f96b 	bl	8006c40 <xTaskResumeAll>
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20001fa4 	.word	0x20001fa4
 8007978:	20001fa8 	.word	0x20001fa8
 800797c:	e000ed04 	.word	0xe000ed04

08007980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007988:	4b0e      	ldr	r3, [pc, #56]	@ (80079c4 <prvGetNextExpireTime+0x44>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <prvGetNextExpireTime+0x16>
 8007992:	2201      	movs	r2, #1
 8007994:	e000      	b.n	8007998 <prvGetNextExpireTime+0x18>
 8007996:	2200      	movs	r2, #0
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079a4:	4b07      	ldr	r3, [pc, #28]	@ (80079c4 <prvGetNextExpireTime+0x44>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	e001      	b.n	80079b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20001fa0 	.word	0x20001fa0

080079c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079d0:	f7ff f9d4 	bl	8006d7c <xTaskGetTickCount>
 80079d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a04 <prvSampleTimeNow+0x3c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d205      	bcs.n	80079ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079e0:	f000 f93a 	bl	8007c58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e002      	b.n	80079f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079f2:	4a04      	ldr	r2, [pc, #16]	@ (8007a04 <prvSampleTimeNow+0x3c>)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079f8:	68fb      	ldr	r3, [r7, #12]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20001fb0 	.word	0x20001fb0

08007a08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d812      	bhi.n	8007a54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	1ad2      	subs	r2, r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d302      	bcc.n	8007a42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e01b      	b.n	8007a7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <prvInsertTimerInActiveList+0x7c>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	f7fd fe36 	bl	80056be <vListInsert>
 8007a52:	e012      	b.n	8007a7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d206      	bcs.n	8007a6a <prvInsertTimerInActiveList+0x62>
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e007      	b.n	8007a7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a6a:	4b07      	ldr	r3, [pc, #28]	@ (8007a88 <prvInsertTimerInActiveList+0x80>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7fd fe22 	bl	80056be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a7a:	697b      	ldr	r3, [r7, #20]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20001fa4 	.word	0x20001fa4
 8007a88:	20001fa0 	.word	0x20001fa0

08007a8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08e      	sub	sp, #56	@ 0x38
 8007a90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a92:	e0ce      	b.n	8007c32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	da19      	bge.n	8007ace <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a9a:	1d3b      	adds	r3, r7, #4
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10b      	bne.n	8007abe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	61fb      	str	r3, [r7, #28]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ac4:	6850      	ldr	r0, [r2, #4]
 8007ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ac8:	6892      	ldr	r2, [r2, #8]
 8007aca:	4611      	mov	r1, r2
 8007acc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f2c0 80ae 	blt.w	8007c32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fe22 	bl	8005730 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aec:	463b      	mov	r3, r7
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff ff6a 	bl	80079c8 <prvSampleTimeNow>
 8007af4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b09      	cmp	r3, #9
 8007afa:	f200 8097 	bhi.w	8007c2c <prvProcessReceivedCommands+0x1a0>
 8007afe:	a201      	add	r2, pc, #4	@ (adr r2, 8007b04 <prvProcessReceivedCommands+0x78>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007b2d 	.word	0x08007b2d
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b2d 	.word	0x08007b2d
 8007b10:	08007ba3 	.word	0x08007ba3
 8007b14:	08007bb7 	.word	0x08007bb7
 8007b18:	08007c03 	.word	0x08007c03
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007b2d 	.word	0x08007b2d
 8007b24:	08007ba3 	.word	0x08007ba3
 8007b28:	08007bb7 	.word	0x08007bb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	18d1      	adds	r1, r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b4c:	f7ff ff5c 	bl	8007a08 <prvInsertTimerInActiveList>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d06c      	beq.n	8007c30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d061      	beq.n	8007c30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	441a      	add	r2, r3
 8007b74:	2300      	movs	r3, #0
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b7e:	f7ff fe01 	bl	8007784 <xTimerGenericCommand>
 8007b82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d152      	bne.n	8007c30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	61bb      	str	r3, [r7, #24]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ba8:	f023 0301 	bic.w	r3, r3, #1
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007bb4:	e03d      	b.n	8007c32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bbc:	f043 0301 	orr.w	r3, r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10b      	bne.n	8007bee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	617b      	str	r3, [r7, #20]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	18d1      	adds	r1, r2, r3
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bfc:	f7ff ff04 	bl	8007a08 <prvInsertTimerInActiveList>
					break;
 8007c00:	e017      	b.n	8007c32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c12:	f7fd fbe3 	bl	80053dc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c16:	e00c      	b.n	8007c32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c2a:	e002      	b.n	8007c32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007c2c:	bf00      	nop
 8007c2e:	e000      	b.n	8007c32 <prvProcessReceivedCommands+0x1a6>
					break;
 8007c30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c32:	4b08      	ldr	r3, [pc, #32]	@ (8007c54 <prvProcessReceivedCommands+0x1c8>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	1d39      	adds	r1, r7, #4
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fadc 	bl	80061f8 <xQueueReceive>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f47f af26 	bne.w	8007a94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	3730      	adds	r7, #48	@ 0x30
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20001fa8 	.word	0x20001fa8

08007c58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c5e:	e049      	b.n	8007cf4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c60:	4b2e      	ldr	r3, [pc, #184]	@ (8007d1c <prvSwitchTimerLists+0xc4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8007d1c <prvSwitchTimerLists+0xc4>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fd fd59 	bl	8005730 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d02f      	beq.n	8007cf4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d90e      	bls.n	8007cc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d1c <prvSwitchTimerLists+0xc4>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	f7fd fcfe 	bl	80056be <vListInsert>
 8007cc2:	e017      	b.n	8007cf4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	2100      	movs	r1, #0
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7ff fd58 	bl	8007784 <xTimerGenericCommand>
 8007cd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10b      	bne.n	8007cf4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	603b      	str	r3, [r7, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	e7fd      	b.n	8007cf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cf4:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <prvSwitchTimerLists+0xc4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1b0      	bne.n	8007c60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cfe:	4b07      	ldr	r3, [pc, #28]	@ (8007d1c <prvSwitchTimerLists+0xc4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d04:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <prvSwitchTimerLists+0xc8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a04      	ldr	r2, [pc, #16]	@ (8007d1c <prvSwitchTimerLists+0xc4>)
 8007d0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d0c:	4a04      	ldr	r2, [pc, #16]	@ (8007d20 <prvSwitchTimerLists+0xc8>)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	6013      	str	r3, [r2, #0]
}
 8007d12:	bf00      	nop
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20001fa0 	.word	0x20001fa0
 8007d20:	20001fa4 	.word	0x20001fa4

08007d24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d2a:	f7fd fe5d 	bl	80059e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d2e:	4b15      	ldr	r3, [pc, #84]	@ (8007d84 <prvCheckForValidListAndQueue+0x60>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d120      	bne.n	8007d78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d36:	4814      	ldr	r0, [pc, #80]	@ (8007d88 <prvCheckForValidListAndQueue+0x64>)
 8007d38:	f7fd fc70 	bl	800561c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d3c:	4813      	ldr	r0, [pc, #76]	@ (8007d8c <prvCheckForValidListAndQueue+0x68>)
 8007d3e:	f7fd fc6d 	bl	800561c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d42:	4b13      	ldr	r3, [pc, #76]	@ (8007d90 <prvCheckForValidListAndQueue+0x6c>)
 8007d44:	4a10      	ldr	r2, [pc, #64]	@ (8007d88 <prvCheckForValidListAndQueue+0x64>)
 8007d46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d48:	4b12      	ldr	r3, [pc, #72]	@ (8007d94 <prvCheckForValidListAndQueue+0x70>)
 8007d4a:	4a10      	ldr	r2, [pc, #64]	@ (8007d8c <prvCheckForValidListAndQueue+0x68>)
 8007d4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4b11      	ldr	r3, [pc, #68]	@ (8007d98 <prvCheckForValidListAndQueue+0x74>)
 8007d54:	4a11      	ldr	r2, [pc, #68]	@ (8007d9c <prvCheckForValidListAndQueue+0x78>)
 8007d56:	2110      	movs	r1, #16
 8007d58:	200a      	movs	r0, #10
 8007d5a:	f7fd ffd1 	bl	8005d00 <xQueueGenericCreateStatic>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4a08      	ldr	r2, [pc, #32]	@ (8007d84 <prvCheckForValidListAndQueue+0x60>)
 8007d62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d64:	4b07      	ldr	r3, [pc, #28]	@ (8007d84 <prvCheckForValidListAndQueue+0x60>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <prvCheckForValidListAndQueue+0x60>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	490b      	ldr	r1, [pc, #44]	@ (8007da0 <prvCheckForValidListAndQueue+0x7c>)
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fcb4 	bl	80066e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d78:	f7fd fe68 	bl	8005a4c <vPortExitCritical>
}
 8007d7c:	bf00      	nop
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20001fa8 	.word	0x20001fa8
 8007d88:	20001f78 	.word	0x20001f78
 8007d8c:	20001f8c 	.word	0x20001f8c
 8007d90:	20001fa0 	.word	0x20001fa0
 8007d94:	20001fa4 	.word	0x20001fa4
 8007d98:	20002054 	.word	0x20002054
 8007d9c:	20001fb4 	.word	0x20001fb4
 8007da0:	08007ec4 	.word	0x08007ec4

08007da4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	60fb      	str	r3, [r7, #12]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007dce:	f7fd fe0b 	bl	80059e8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007dd8:	f7fd fe38 	bl	8005a4c <vPortExitCritical>

	return pvReturn;
 8007ddc:	693b      	ldr	r3, [r7, #16]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <memset>:
 8007de6:	4402      	add	r2, r0
 8007de8:	4603      	mov	r3, r0
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d100      	bne.n	8007df0 <memset+0xa>
 8007dee:	4770      	bx	lr
 8007df0:	f803 1b01 	strb.w	r1, [r3], #1
 8007df4:	e7f9      	b.n	8007dea <memset+0x4>
	...

08007df8 <__libc_init_array>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8007e30 <__libc_init_array+0x38>)
 8007dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8007e34 <__libc_init_array+0x3c>)
 8007dfe:	1b64      	subs	r4, r4, r5
 8007e00:	10a4      	asrs	r4, r4, #2
 8007e02:	2600      	movs	r6, #0
 8007e04:	42a6      	cmp	r6, r4
 8007e06:	d109      	bne.n	8007e1c <__libc_init_array+0x24>
 8007e08:	4d0b      	ldr	r5, [pc, #44]	@ (8007e38 <__libc_init_array+0x40>)
 8007e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e3c <__libc_init_array+0x44>)
 8007e0c:	f000 f826 	bl	8007e5c <_init>
 8007e10:	1b64      	subs	r4, r4, r5
 8007e12:	10a4      	asrs	r4, r4, #2
 8007e14:	2600      	movs	r6, #0
 8007e16:	42a6      	cmp	r6, r4
 8007e18:	d105      	bne.n	8007e26 <__libc_init_array+0x2e>
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e20:	4798      	blx	r3
 8007e22:	3601      	adds	r6, #1
 8007e24:	e7ee      	b.n	8007e04 <__libc_init_array+0xc>
 8007e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2a:	4798      	blx	r3
 8007e2c:	3601      	adds	r6, #1
 8007e2e:	e7f2      	b.n	8007e16 <__libc_init_array+0x1e>
 8007e30:	08007f78 	.word	0x08007f78
 8007e34:	08007f78 	.word	0x08007f78
 8007e38:	08007f78 	.word	0x08007f78
 8007e3c:	08007f7c 	.word	0x08007f7c

08007e40 <memcpy>:
 8007e40:	440a      	add	r2, r1
 8007e42:	4291      	cmp	r1, r2
 8007e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e48:	d100      	bne.n	8007e4c <memcpy+0xc>
 8007e4a:	4770      	bx	lr
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e56:	4291      	cmp	r1, r2
 8007e58:	d1f9      	bne.n	8007e4e <memcpy+0xe>
 8007e5a:	bd10      	pop	{r4, pc}

08007e5c <_init>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr

08007e68 <_fini>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	bf00      	nop
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr
